window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
        o = b;
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  AchievementData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a835W88Z5L36Zxiky/P1I6", "AchievementData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var AchievementData = function() {
      function AchievementData() {
        this.index = 0;
        this.monsters = {};
        this.items = {};
        this.equips = {};
        this.npcs = {};
        this.maps = {};
        this.challenges = {};
        this.furnitures = {};
        this.playerLifes = 0;
      }
      AchievementData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.monsters = data.monsters ? data.monsters : {};
        this.items = data.items ? data.items : {};
        this.equips = data.equips ? data.equips : {};
        this.npcs = data.npcs ? data.npcs : {};
        this.maps = data.maps ? data.maps : {};
        this.challenges = data.challenges ? data.challenges : {};
        this.furnitures = data.furnitures ? data.furnitures : {};
      };
      return AchievementData;
    }();
    exports.default = AchievementData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  AchievementItemDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96567VnqW1J7rI4r4v/kGbc", "AchievementItemDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentManager_1 = require("../../manager/EquipmentManager");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var BaseDialog_1 = require("./BaseDialog");
    var EquipmentAndItemDialog_1 = require("./EquipmentAndItemDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AchievementItemDialog = function(_super) {
      __extends(AchievementItemDialog, _super);
      function AchievementItemDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.equipmentAndItemDialogPrefab = null;
        _this.equipmentAndItemDialog = null;
        _this.icon = null;
        _this.infoLabel = null;
        return _this;
      }
      AchievementItemDialog_1 = AchievementItemDialog;
      AchievementItemDialog.prototype.onLoad = function() {
        this.equipmentAndItemDialog = this.initDialog();
      };
      AchievementItemDialog.prototype.initDialog = function() {
        var node = cc.instantiate(this.equipmentAndItemDialogPrefab);
        node.parent = this.node;
        var dialog = node.getComponent(EquipmentAndItemDialog_1.default);
        dialog.changeBgAndAnchor(EquipmentAndItemDialog_1.default.BG_TYPE_NONE);
        dialog.hideDialog();
        return dialog;
      };
      AchievementItemDialog.prototype.start = function() {};
      AchievementItemDialog.prototype.show = function(nonPlayerData, itemData, equipData, furnitureData, spriteFrame, count) {
        _super.prototype.show.call(this);
        if (spriteFrame) {
          this.icon.spriteFrame = spriteFrame;
          this.icon.node.width = 160;
          this.icon.node.height = 160 / spriteFrame.getOriginalSize().width * spriteFrame.getOriginalSize().height;
        }
        if (count > 0) {
          var length = count % 20;
          count > 100 && (length = 20);
          var str = "";
          for (var i_1 = 0; i_1 < length; i_1 += 4) str += "\u2605";
          this.infoLabel.string = str;
          var i = Math.floor(count / 20);
          i > AchievementItemDialog_1.COLORS.length - 1 && (i = AchievementItemDialog_1.COLORS.length - 1);
          this.infoLabel.node.color = cc.Color.WHITE.fromHEX(AchievementItemDialog_1.COLORS[i]);
        }
        equipData && (equipData = EquipmentManager_1.default.getNewEquipData(equipData.img, true));
        this.equipmentAndItemDialog.showDialog(cc.v3(80, 150), nonPlayerData, itemData, equipData, furnitureData);
      };
      AchievementItemDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      var AchievementItemDialog_1;
      AchievementItemDialog.COLORS = [ "#ffffff", "#00ff00", "#0000ff", "#800080", "#ffa500" ];
      __decorate([ property(cc.Prefab) ], AchievementItemDialog.prototype, "equipmentAndItemDialogPrefab", void 0);
      __decorate([ property(cc.Sprite) ], AchievementItemDialog.prototype, "icon", void 0);
      __decorate([ property(cc.Label) ], AchievementItemDialog.prototype, "infoLabel", void 0);
      AchievementItemDialog = AchievementItemDialog_1 = __decorate([ ccclass ], AchievementItemDialog);
      return AchievementItemDialog;
    }(BaseDialog_1.default);
    exports.default = AchievementItemDialog;
    cc._RF.pop();
  }, {
    "../../manager/EquipmentManager": "EquipmentManager",
    "../../utils/AudioPlayer": "AudioPlayer",
    "./BaseDialog": "BaseDialog",
    "./EquipmentAndItemDialog": "EquipmentAndItemDialog"
  } ],
  AchievementItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "769e5+ojuhFiYvxDanjxQKn", "AchievementItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AchievementItem = function(_super) {
      __extends(AchievementItem, _super);
      function AchievementItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isSelect = false;
        _this.sprite = null;
        _this.index = 0;
        _this.parentIndex = 0;
        _this.count = 0;
        _this.spriteFrame = null;
        return _this;
      }
      AchievementItem.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {}, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          if (_this.node && _this.count > 0) {
            AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
            _this.achievements.achievementItemDialog.show(_this.nonPlayerData, _this.itemData, _this.equipData, _this.furnitureData, _this.sprite.spriteFrame, _this.count);
          } else AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {}, this);
      };
      AchievementItem.prototype.init = function(achievements, parentIndex, index, count, spriteFrame, nonPlayerData, itemData, equipData, furnitureData) {
        this.nonPlayerData = nonPlayerData;
        this.itemData = itemData;
        this.equipData = equipData;
        this.furnitureData = furnitureData;
        this.achievements = achievements;
        this.parentIndex = parentIndex;
        this.index = index;
        this.count = count;
        this.spriteFrame = spriteFrame;
        this.isSelect = false;
        this.updateData();
      };
      AchievementItem.prototype.updateData = function() {
        this.isSelect = false;
        this.sprite.spriteFrame = null;
        if (this.spriteFrame) {
          this.sprite.spriteFrame = this.spriteFrame;
          var w = this.spriteFrame.getOriginalSize().width;
          var h = this.spriteFrame.getOriginalSize().height;
          this.sprite.node.width = 4 * w;
          this.sprite.node.height = 4 * h;
          if (this.sprite.node.height > 96) {
            this.sprite.node.height = 96;
            this.sprite.node.width = 96 / this.spriteFrame.getOriginalSize().height * this.spriteFrame.getOriginalSize().width;
          }
          var scale = 4;
          h > 96 && (scale = .5);
          this.mat || (this.mat = this.sprite.getMaterial(0));
          this.mat.setProperty("textureSizeWidth", this.spriteFrame.getTexture().width * scale);
          this.mat.setProperty("textureSizeHeight", this.spriteFrame.getTexture().height * scale);
          this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
          this.mat.setProperty("blackBg", this.count > 0 ? 0 : 1);
          this.mat.setProperty("openOutline", this.count > 0 ? 0 : 1);
        }
      };
      AchievementItem.prototype.setEmpty = function() {
        this.sprite.spriteFrame = null;
      };
      AchievementItem.prototype.start = function() {};
      AchievementItem.TYPE_EMPTY = 0;
      AchievementItem.TYPE_CHALLENGE = 1;
      AchievementItem.TYPE_MAP = 2;
      AchievementItem.TYPE_FURNITURE = 3;
      AchievementItem.TYPE_NPC = 4;
      AchievementItem.TYPE_BOSS = 5;
      AchievementItem.TYPE_MONSTER = 6;
      AchievementItem.TYPE_EQUIP = 7;
      AchievementItem.TYPE_ITEM = 8;
      __decorate([ property(cc.Sprite) ], AchievementItem.prototype, "sprite", void 0);
      AchievementItem = __decorate([ ccclass ], AchievementItem);
      return AchievementItem;
    }(cc.Component);
    exports.default = AchievementItem;
    cc._RF.pop();
  }, {
    "../utils/AudioPlayer": "AudioPlayer"
  } ],
  Achievement: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5607byYvNBEQ4yBaPsgf0sF", "Achievement");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentData_1 = require("../data/EquipmentData");
    var ItemData_1 = require("../data/ItemData");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var Logic_1 = require("./Logic");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var LoadingManager_1 = require("../manager/LoadingManager");
    var AchievementItem_1 = require("../ui/AchievementItem");
    var AchievementItemDialog_1 = require("../ui/dialog/AchievementItemDialog");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var LocalStorage_1 = require("../utils/LocalStorage");
    var LoadingIcon_1 = require("../ui/LoadingIcon");
    var EventHelper_1 = require("./EventHelper");
    var BuildingData_1 = require("../data/BuildingData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Achievement = function(_super) {
      __extends(Achievement, _super);
      function Achievement() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.content = null;
        _this.prefab = null;
        _this.lifesLabel = null;
        _this.coinLabel = null;
        _this.goldLabel = null;
        _this.loadingBackground = null;
        _this.achievementItemDialog = null;
        _this.loadingIconPrefab = null;
        _this.cursorAreaPrefab = null;
        _this.bossSpriteFrames = null;
        _this.currentListIndex = 0;
        _this.currentItemIndex = -1;
        _this.loadingManager = new LoadingManager_1.default();
        return _this;
      }
      Achievement_1 = Achievement;
      Achievement.prototype.onLoad = function() {
        var _this = this;
        this.loadingManager.init();
        this.removeContent();
        this.data = LocalStorage_1.default.getAchievementData();
        this.lifesLabel && this.data.playerLifes && (this.lifesLabel.string = "DIED " + this.data.playerLifes);
        if (this.coinLabel) {
          var c = LocalStorage_1.default.getValueFromData(LocalStorage_1.default.KEY_REAL_COINS);
          this.coinLabel.string = "" + (c ? parseInt(c) : 0);
        }
        this.achievementItemDialog && (this.achievementItemDialog.node.active = false);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CANCEL_OR_PAUSE, function(detail) {
          _this.node && _this.node.isValid && _this.cancelOrPause();
        });
        this.loadingIcon = cc.instantiate(this.loadingIconPrefab).getComponent(LoadingIcon_1.default);
        this.loadingIcon.node.parent = this.loadingBackground;
        this.loadingIcon.init([ LoadingIcon_1.default.TYPE_TEXTURE_AUTO, LoadingIcon_1.default.TYPE_TEXTURE, LoadingIcon_1.default.TYPE_ITEM, LoadingIcon_1.default.TYPE_EQUIP, LoadingIcon_1.default.TYPE_NPC ]);
      };
      Achievement.prototype.start = function() {
        this.loadingManager.loadEquipment();
        this.loadingManager.loadAutoSpriteFrames();
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_TEXTURES, "singleColor");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_ITEM, "ammo");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_EQUIPMENT, "emptyequipment");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_BOSS, "iconboss000");
        this.loadingManager.loadMonsters();
        this.loadingManager.loadBosses();
        this.loadingManager.loadItems();
        this.loadingManager.loadNonplayer();
        this.loadingManager.loadSuits();
        this.loadingManager.loadFurnitures();
        this.loadingBackground.active = true;
      };
      Achievement.prototype.removeContent = function() {
        this.content.removeAllChildren();
      };
      Achievement.prototype.addItem = function(item) {
        this.content.addChild(item.node);
      };
      Achievement.prototype.changeList = function(toggle, index) {
        this.currentListIndex = parseInt(index);
        this.unscheduleAllCallbacks();
        switch (this.currentListIndex) {
         case Achievement_1.TYPE_CHALLENGE:
         case Achievement_1.TYPE_MAP:
          this.removeContent();
          break;

         case Achievement_1.TYPE_FURNITURE:
          this.showFurnitureList();
          break;

         case Achievement_1.TYPE_NPC:
          this.showNpcList();
          break;

         case Achievement_1.TYPE_BOSS:
          this.showBossList();
          break;

         case Achievement_1.TYPE_MONSTER:
          this.showMonsterList();
          break;

         case Achievement_1.TYPE_EQUIP:
          this.showEquipList();
          break;

         case Achievement_1.TYPE_ITEM:
          this.showItemList();
        }
      };
      Achievement.prototype.showMonsterList = function() {
        var _this = this;
        this.removeContent();
        var index = 0;
        var _loop_1 = function(key) {
          LoadingManager_1.default.loadNpcSpriteAtlas(key, function() {
            var data = new NonPlayerData_1.default();
            data.valueCopy(Logic_1.default.monsters[key]);
            var icon = cc.instantiate(_this.prefab).getComponent(AchievementItem_1.default);
            icon.init(_this, _this.currentListIndex, index++, _this.data.monsters[data.resName], Logic_1.default.spriteFrameRes(data.resName + "anim000"), data, null, null, null);
            _this.addItem(icon);
          });
        };
        for (var key in Logic_1.default.monsters) _loop_1(key);
      };
      Achievement.prototype.showBossList = function() {
        this.removeContent();
        var index = 0;
        for (var key in Logic_1.default.bosses) {
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.default.bosses[key]);
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          icon.init(this, this.currentListIndex, index++, this.data.npcs[data.resName], Logic_1.default.spriteFrameRes("icon" + data.resName), data, null, null, null);
          this.addItem(icon);
        }
      };
      Achievement.prototype.showNpcList = function() {
        var _this = this;
        this.removeContent();
        var index = 0;
        var _loop_2 = function(key) {
          LoadingManager_1.default.loadNpcSpriteAtlas(key, function() {
            var data = new NonPlayerData_1.default();
            data.valueCopy(Logic_1.default.nonplayers[key]);
            var icon = cc.instantiate(_this.prefab).getComponent(AchievementItem_1.default);
            icon.init(_this, _this.currentListIndex, index++, _this.data.npcs[data.resName], Logic_1.default.spriteFrameRes(data.resName + "anim000"), data, null, null, null);
            _this.addItem(icon);
          });
        };
        for (var key in Logic_1.default.nonplayers) _loop_2(key);
      };
      Achievement.prototype.showItemList = function() {
        this.removeContent();
        var index = 0;
        for (var key in Logic_1.default.items) {
          var data = new ItemData_1.default();
          data.valueCopy(Logic_1.default.items[key]);
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          icon.init(this, this.currentListIndex, index++, this.data.items[data.resName], Logic_1.default.spriteFrameRes(data.resName), null, data, null, null);
          index > 5 && this.addItem(icon);
        }
      };
      Achievement.prototype.showEquipList = function() {
        this.removeContent();
        var index = 0;
        for (var key in Logic_1.default.equipments) {
          var data = new EquipmentData_1.default();
          data.valueCopy(Logic_1.default.equipments[key]);
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          var spriteFrame = Logic_1.default.spriteFrameRes(data.img);
          data.equipmetType == InventoryManager_1.default.CLOTHES ? spriteFrame = Logic_1.default.spriteFrameRes(data.img + "anim0") : data.equipmetType == InventoryManager_1.default.HELMET ? spriteFrame = Logic_1.default.spriteFrameRes(data.img + "anim0") : data.equipmetType == InventoryManager_1.default.REMOTE && (spriteFrame = Logic_1.default.spriteFrameRes(data.img + "anim0"));
          icon.init(this, this.currentListIndex, index++, this.data.equips[data.img], spriteFrame, null, null, data, null);
          index > 1 && this.addItem(icon);
        }
      };
      Achievement.prototype.showFurnitureList = function() {
        this.removeContent();
        var index = 0;
        for (var key in Logic_1.default.furnitures) {
          var data = new BuildingData_1.default();
          data.valueCopy(Logic_1.default.furnitures[key]);
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          icon.init(this, this.currentListIndex, index++, this.data.furnitures[data.id], Logic_1.default.spriteFrameRes(data.resName), null, null, null, data);
          this.addItem(icon);
        }
      };
      Achievement.prototype.show = function() {
        var _this = this;
        this.loadingIcon && this.loadingIcon.isFirst ? cc.tween(this.loadingBackground).to(.5, {
          opacity: 0
        }).call(function() {
          _this.loadingBackground.active = false;
        }).start() : this.loadingBackground.active = false;
        this.changeList(null, "0");
      };
      Achievement.prototype.backToHome = function() {
        cc.director.loadScene("start");
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      Achievement.prototype.cancelOrPause = function() {
        if (this.achievementItemDialog && this.achievementItemDialog.isShow) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
          this.achievementItemDialog.dismiss();
          return;
        }
        this.backToHome();
      };
      Achievement.addMonsterKillAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.monsters[name]) {
          data.monsters[name] = data.monsters[name] + 1;
          data.monsters[name] > 9999 && (data.monsters[name] = 9999);
        } else data.monsters[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addPlayerDiedLifesAchievement = function() {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.playerLifes) {
          data.playerLifes = data.playerLifes + 1;
          data.playerLifes > 9999 && (data.playerLifes = 9999);
        } else data.playerLifes = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addItemAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.items[name]) {
          data.items[name] = data.items[name] + 1;
          data.items[name] > 9999 && (data.items[name] = 9999);
        } else data.items[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addEquipsAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.equips[name]) {
          data.equips[name] = data.equips[name] + 1;
          data.equips[name] > 9999 && (data.equips[name] = 9999);
        } else data.equips[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addNpcsAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.npcs[name]) {
          data.npcs[name] = data.npcs[name] + 1;
          data.npcs[name] > 9999 && (data.npcs[name] = 9999);
        } else data.npcs[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addMapsAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.maps[name]) {
          data.maps[name] = data.maps[name] + 1;
          data.maps[name] > 9999 && (data.maps[name] = 9999);
        } else data.maps[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addChallengesAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.challenges[name]) {
          data.challenges[name] = data.challenges[name] + 1;
          data.challenges[name] > 9999 && (data.challenges[name] = 9999);
        } else data.challenges[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addFurnituresAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.furnitures[name]) {
          data.furnitures[name] = data.furnitures[name] + 1;
          data.furnitures[name] > 9999 && (data.furnitures[name] = 9999);
        } else data.furnitures[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.prototype.update = function(dt) {
        if (this.loadingManager.isEquipmentLoaded && this.loadingManager.isAllSpriteFramesLoaded() && this.loadingManager.isMonsterLoaded && this.loadingManager.isNonplayerLoaded && this.loadingManager.isItemsLoaded && this.loadingManager.isFurnituresLoaded && this.loadingManager.isSuitsLoaded) {
          this.loadingManager.reset();
          this.show();
        }
      };
      var Achievement_1;
      Achievement.MONSTER_SIZE = 33;
      Achievement.BOSS_SIZE = 9;
      Achievement.TYPE_CHALLENGE = 0;
      Achievement.TYPE_MAP = 1;
      Achievement.TYPE_FURNITURE = 2;
      Achievement.TYPE_NPC = 3;
      Achievement.TYPE_BOSS = 4;
      Achievement.TYPE_MONSTER = 5;
      Achievement.TYPE_EQUIP = 6;
      Achievement.TYPE_ITEM = 7;
      Achievement.TYPE_ROOM = 8;
      __decorate([ property(cc.Node) ], Achievement.prototype, "content", void 0);
      __decorate([ property(cc.Prefab) ], Achievement.prototype, "prefab", void 0);
      __decorate([ property(cc.Label) ], Achievement.prototype, "lifesLabel", void 0);
      __decorate([ property(cc.Label) ], Achievement.prototype, "coinLabel", void 0);
      __decorate([ property(cc.Label) ], Achievement.prototype, "goldLabel", void 0);
      __decorate([ property(cc.Node) ], Achievement.prototype, "loadingBackground", void 0);
      __decorate([ property(AchievementItemDialog_1.default) ], Achievement.prototype, "achievementItemDialog", void 0);
      __decorate([ property(cc.Prefab) ], Achievement.prototype, "loadingIconPrefab", void 0);
      __decorate([ property(cc.Prefab) ], Achievement.prototype, "cursorAreaPrefab", void 0);
      Achievement = Achievement_1 = __decorate([ ccclass ], Achievement);
      return Achievement;
    }(cc.Component);
    exports.default = Achievement;
    cc._RF.pop();
  }, {
    "../data/BuildingData": "BuildingData",
    "../data/EquipmentData": "EquipmentData",
    "../data/ItemData": "ItemData",
    "../data/NonPlayerData": "NonPlayerData",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/LoadingManager": "LoadingManager",
    "../ui/AchievementItem": "AchievementItem",
    "../ui/LoadingIcon": "LoadingIcon",
    "../ui/dialog/AchievementItemDialog": "AchievementItemDialog",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/LocalStorage": "LocalStorage",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  ActionSettingDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "10e70WblgRHSrX7aalDj8Q8", "ActionSettingDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SettingsData_1 = require("../../data/SettingsData");
    var EventHelper_1 = require("../../logic/EventHelper");
    var Logic_1 = require("../../logic/Logic");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var LocalStorage_1 = require("../../utils/LocalStorage");
    var BaseDialog_1 = require("./BaseDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ActionSettingDialog = function(_super) {
      __extends(ActionSettingDialog, _super);
      function ActionSettingDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.attack = null;
        _this.remote = null;
        _this.dash = null;
        _this.jump = null;
        _this.interact = null;
        _this.skill1 = null;
        _this.skill2 = null;
        _this.actions = null;
        _this.layout = null;
        _this.equipment = null;
        _this.isPressed = false;
        _this.pressedIndex = -1;
        _this.buttonArr = [];
        _this.startPos = cc.Vec2.ZERO;
        _this.layoutrect = cc.rect();
        _this.equipmentrect = cc.rect();
        return _this;
      }
      ActionSettingDialog.prototype.onLoad = function() {
        var _this = this;
        this.setAllPos();
        this.buttonArr.push(this.attack);
        this.buttonArr.push(this.remote);
        this.buttonArr.push(this.dash);
        this.buttonArr.push(this.jump);
        this.buttonArr.push(this.interact);
        this.buttonArr.push(this.skill1);
        this.buttonArr.push(this.skill2);
        this.layoutrect = cc.rect(-this.layout.width / 2, -this.layout.height / 2, this.layout.width, this.layout.height);
        this.equipmentrect = cc.rect(this.equipment.x - this.equipment.width / 2, this.equipment.y - this.equipment.height, this.equipment.width, this.equipment.height);
        this.layout.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.startPos = _this.layout.convertToNodeSpaceAR(event.getLocation());
          _this.pressedIndex = -1;
          for (var i = 0; i < _this.buttonArr.length; i++) {
            var btn = _this.buttonArr[i];
            var rect = cc.rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);
            if (rect.contains(_this.startPos)) {
              _this.pressedIndex = i;
              break;
            }
          }
        });
        this.layout.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          if (_this.pressedIndex > -1 && _this.pressedIndex < _this.buttonArr.length) {
            var pos = _this.layout.convertToNodeSpaceAR(event.getLocation());
            var btn = _this.buttonArr[_this.pressedIndex];
            var setSuccess = _this.checkButtonInRectAndSet(btn, pos);
            if (!setSuccess) {
              setSuccess = _this.checkButtonInRectAndSet(btn, cc.v2(pos.x, btn.y));
              setSuccess || (setSuccess = _this.checkButtonInRectAndSet(btn, cc.v2(btn.x, pos.y)));
            }
          }
        });
      };
      ActionSettingDialog.prototype.checkButtonInRectAndSet = function(btn, pos) {
        var rect = cc.rect(pos.x - btn.width / 2, pos.y - btn.height / 2, btn.width, btn.height);
        var setSuccess = this.layoutrect.containsRect(rect) && !this.equipmentrect.intersects(rect) && !this.equipmentrect.containsRect(rect);
        setSuccess && (btn.position = cc.v3(pos));
        return setSuccess;
      };
      ActionSettingDialog.prototype.start = function() {};
      ActionSettingDialog.prototype.getSettingsButtonPos = function(settingPos) {
        return cc.v3(this.layout.convertToNodeSpaceAR(this.actions.convertToWorldSpaceAR(settingPos)));
      };
      ActionSettingDialog.prototype.getSaveButtonPos = function(buttonPos) {
        return cc.v2(this.actions.convertToNodeSpaceAR(this.layout.convertToWorldSpaceAR(buttonPos)));
      };
      ActionSettingDialog.prototype.show = function() {
        _super.prototype.show.call(this);
      };
      ActionSettingDialog.prototype.setAllPos = function() {
        this.attack.position = this.getSettingsButtonPos(Logic_1.default.settings.buttonPosAttack);
        this.remote.position = this.getSettingsButtonPos(Logic_1.default.settings.buttonPosRemote);
        this.dash.position = this.getSettingsButtonPos(Logic_1.default.settings.buttonPosDash);
        this.jump.position = this.getSettingsButtonPos(Logic_1.default.settings.buttonPosJump);
        this.interact.position = this.getSettingsButtonPos(Logic_1.default.settings.buttonPosInteract);
        this.skill1.position = this.getSettingsButtonPos(Logic_1.default.settings.buttonPosSkill1);
        this.skill2.position = this.getSettingsButtonPos(Logic_1.default.settings.buttonPosSkill2);
      };
      ActionSettingDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      ActionSettingDialog.prototype.save = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.settings.buttonPosAttack = this.getSaveButtonPos(this.attack.position);
        Logic_1.default.settings.buttonPosRemote = this.getSaveButtonPos(this.remote.position);
        Logic_1.default.settings.buttonPosJump = this.getSaveButtonPos(this.jump.position);
        Logic_1.default.settings.buttonPosDash = this.getSaveButtonPos(this.dash.position);
        Logic_1.default.settings.buttonPosInteract = this.getSaveButtonPos(this.interact.position);
        Logic_1.default.settings.buttonPosSkill1 = this.getSaveButtonPos(this.skill1.position);
        Logic_1.default.settings.buttonPosSkill2 = this.getSaveButtonPos(this.skill2.position);
        LocalStorage_1.default.saveSystemSettings(Logic_1.default.settings);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_UPDATE_GAMEPAD);
        this.dismiss();
      };
      ActionSettingDialog.prototype.reset = function() {
        this.attack.position = this.getSettingsButtonPos(SettingsData_1.default.BPA);
        this.remote.position = this.getSettingsButtonPos(SettingsData_1.default.BPR);
        this.dash.position = this.getSettingsButtonPos(SettingsData_1.default.BPD);
        this.jump.position = this.getSettingsButtonPos(SettingsData_1.default.BPJ);
        this.interact.position = this.getSettingsButtonPos(SettingsData_1.default.BPI);
        this.skill1.position = this.getSettingsButtonPos(SettingsData_1.default.BPS1);
        this.skill2.position = this.getSettingsButtonPos(SettingsData_1.default.BPS2);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      ActionSettingDialog.BUTTON_ATTACK = 0;
      ActionSettingDialog.BUTTON_REMOTE = 1;
      ActionSettingDialog.BUTTON_JUMP = 2;
      ActionSettingDialog.BUTTON_DASH = 3;
      ActionSettingDialog.BUTTON_INTERACT = 4;
      ActionSettingDialog.BUTTON_SKILL1 = 5;
      ActionSettingDialog.BUTTON_SKILL2 = 6;
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "attack", void 0);
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "remote", void 0);
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "dash", void 0);
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "jump", void 0);
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "interact", void 0);
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "skill1", void 0);
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "skill2", void 0);
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "actions", void 0);
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "layout", void 0);
      __decorate([ property(cc.Node) ], ActionSettingDialog.prototype, "equipment", void 0);
      ActionSettingDialog = __decorate([ ccclass ], ActionSettingDialog);
      return ActionSettingDialog;
    }(BaseDialog_1.default);
    exports.default = ActionSettingDialog;
    cc._RF.pop();
  }, {
    "../../data/SettingsData": "SettingsData",
    "../../logic/EventHelper": "EventHelper",
    "../../logic/Logic": "Logic",
    "../../utils/AudioPlayer": "AudioPlayer",
    "../../utils/LocalStorage": "LocalStorage",
    "./BaseDialog": "BaseDialog"
  } ],
  ActorAttackBox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5bd3A3tgpJso8uoa83DjVW", "ActorAttackBox");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FromData_1 = require("../data/FromData");
    var Actor_1 = require("../base/Actor");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var Utils_1 = require("../utils/Utils");
    var CCollider_1 = require("../collider/CCollider");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var StatusManager_1 = require("../manager/StatusManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ActorAttackBox = function(_super) {
      __extends(ActorAttackBox, _super);
      function ActorAttackBox() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isEnemy = false;
        _this.attackType = 0;
        _this.isAttacking = false;
        _this.hv = cc.v2(1, 0);
        _this.isSpecial = false;
        _this.isLarge = false;
        _this.data = new NonPlayerData_1.default();
        _this.checkTimeDelay = 0;
        return _this;
      }
      ActorAttackBox.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite");
        this.sprite && (this.collider = this.sprite.getComponent(CCollider_1.default));
      };
      ActorAttackBox.prototype.init = function(actor, data) {
        if (!this.sprite) {
          this.sprite = this.node.getChildByName("sprite");
          this.collider = this.sprite.getComponent(CCollider_1.default);
        }
        this.sprite.opacity = 0;
        this.isEnemy = data.isEnemy > 0;
        this.actor = actor;
        this.data = data;
        this.isEnemy ? this.collider.setTargetTags([ CCollider_1.default.TAG.GOODNONPLAYER, CCollider_1.default.TAG.PLAYER, CCollider_1.default.TAG.PLAYER_HIT ]) : this.collider.setTargetTags([ CCollider_1.default.TAG.NONPLAYER, CCollider_1.default.TAG.BOSS ]);
      };
      ActorAttackBox.prototype.start = function() {};
      ActorAttackBox.prototype.show = function(boxRect, isSpecial, dashLength, hv, isHalf) {
        if (!this.actor) {
          cc.log("attackBox not init");
          return;
        }
        this.setHv(hv);
        this.collider.enabled = true;
        this.isSpecial = isSpecial;
        this.sprite.opacity = 40;
        var rectArr = boxRect.split(",");
        this.sprite.position = cc.v3(parseInt(rectArr[0]), parseInt(rectArr[1]));
        var w = parseInt(rectArr[2]);
        isHalf && (w /= 2);
        var h = parseInt(rectArr[3]);
        var len = dashLength - w;
        len < 0 && (len = 0);
        this.sprite.stopAllActions();
        this.sprite.width = 0;
        cc.tween(this.sprite).to(.1, {
          width: w
        }).delay(.1).to(.1, {
          width: w + len
        }).start();
        this.sprite.height = h;
        this.collider.offset = cc.v2(w / 2, 0);
        this.collider.w = w;
        this.collider.h = h;
        this.collider.zHeight = parseInt(rectArr[4]);
      };
      ActorAttackBox.prototype.hide = function(isMiss) {
        this.isAttacking = !isMiss;
        this.sprite.opacity = 0;
      };
      ActorAttackBox.prototype.finish = function() {
        this.sprite.opacity = 0;
        this.isAttacking = false;
        this.isSpecial = false;
        this.collider.enabled = false;
      };
      ActorAttackBox.prototype.onColliderStay = function(other, self) {
        if (this.isAttacking && this.actor) {
          if (other.tag == CCollider_1.default.TAG.PLAYER_HIT) {
            this.isAttacking = false;
            return;
          }
          var a = other.getComponent(Actor_1.default);
          var m = this.actor;
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other, !this.isEnemy);
          if (target) {
            this.actor.sc.isDashing = false;
            this.isAttacking = false;
            var from = FromData_1.default.getClone(this.data.nameCn, this.data.resName + "anim000", this.node.position);
            var dd = this.data.getAttackPoint();
            dd.isBackAttack = ActorUtils_1.default.isBehindTarget(m, a) && this.data.FinalCommon.DamageBack > 0;
            dd.isBackAttack && (dd.realDamage += this.data.FinalCommon.DamageBack);
            dd.isMelee = true;
            this.isSpecial && (dd.physicalDamage = 2 * dd.physicalDamage);
            a.takeDamage(dd, from, this.actor) && StatusManager_1.default.addBaseStatus(a, this.data.FinalCommon, from);
            this.isSpecial = false;
          }
        }
      };
      ActorAttackBox.prototype.setHv = function(hv) {
        this.hv = hv;
        this.rotateCollider(this.hv);
      };
      ActorAttackBox.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .02) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      ActorAttackBox.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        this.node.angle = Utils_1.default.getRotateAngle(direction);
      };
      ActorAttackBox = __decorate([ ccclass ], ActorAttackBox);
      return ActorAttackBox;
    }(cc.Component);
    exports.default = ActorAttackBox;
    cc._RF.pop();
  }, {
    "../base/Actor": "Actor",
    "../collider/CCollider": "CCollider",
    "../data/FromData": "FromData",
    "../data/NonPlayerData": "NonPlayerData",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/Utils": "Utils"
  } ],
  ActorBottomDir: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d046buWy35JEJMVpF7KtIXF", "ActorBottomDir");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Utils_1 = require("../utils/Utils");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ActorBottomDir = function(_super) {
      __extends(ActorBottomDir, _super);
      function ActorBottomDir() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.circle = null;
        _this.base = null;
        _this.arrow = null;
        _this.currentAngle = 0;
        _this.checkTimeDelay = 0;
        return _this;
      }
      ActorBottomDir.prototype.onLoad = function() {};
      ActorBottomDir.prototype.init = function(actor, color, width, height, range) {
        this.actor = actor;
        width && (this.circle.width = width);
        height && (this.circle.height = height);
        range && (this.arrow.x = range);
        if (color) {
          this.circle.color = color;
          this.arrow.color = color;
        }
      };
      ActorBottomDir.prototype.update = function(dt) {
        if (this.actor) {
          this.rotateCollider(this.actor.hv);
          this.base.angle = Logic_1.default.lerp(this.base.angle, this.currentAngle, 5 * dt);
        }
      };
      ActorBottomDir.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .02) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      ActorBottomDir.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        this.currentAngle = Utils_1.default.getRotateAngle(direction);
        this.currentAngle < 0 && (this.currentAngle += 360);
        this.currentAngle >= 0 && this.currentAngle <= 90 && this.base.angle >= 225 && this.node.angle <= 360 ? this.base.angle -= 360 : this.base.angle >= 0 && this.base.angle <= 90 && this.currentAngle >= 225 && this.currentAngle <= 360 && (this.base.angle += 360);
      };
      __decorate([ property(cc.Node) ], ActorBottomDir.prototype, "circle", void 0);
      __decorate([ property(cc.Node) ], ActorBottomDir.prototype, "base", void 0);
      __decorate([ property(cc.Node) ], ActorBottomDir.prototype, "arrow", void 0);
      ActorBottomDir = __decorate([ ccclass ], ActorBottomDir);
      return ActorBottomDir;
    }(cc.Component);
    exports.default = ActorBottomDir;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "../utils/Utils": "Utils"
  } ],
  ActorEntity: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd28cVliS9Fy6d63F6LdqDD", "ActorEntity");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NodeEntity_1 = require("./NodeEntity");
    var ActorEntity = function(_super) {
      __extends(ActorEntity, _super);
      function ActorEntity() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return ActorEntity;
    }(NodeEntity_1.default);
    exports.default = ActorEntity;
    cc._RF.pop();
  }, {
    "./NodeEntity": "NodeEntity"
  } ],
  ActorIconList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de2d6PRS3dGcLhD5AjDvSBE", "ActorIconList");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ActorIcon_1 = require("./ActorIcon");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ActorIconList = function(_super) {
      __extends(ActorIconList, _super);
      function ActorIconList() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.iconPrefab = null;
        _this.layout = null;
        return _this;
      }
      ActorIconList.prototype.onLoad = function() {};
      ActorIconList.prototype.getIcon = function(resName) {
        var node = cc.instantiate(this.iconPrefab);
        node.parent = this.layout;
        var icon = node.getComponent(ActorIcon_1.default);
        icon.show(resName, true);
        return icon;
      };
      __decorate([ property(cc.Prefab) ], ActorIconList.prototype, "iconPrefab", void 0);
      __decorate([ property(cc.Node) ], ActorIconList.prototype, "layout", void 0);
      ActorIconList = __decorate([ ccclass ], ActorIconList);
      return ActorIconList;
    }(cc.Component);
    exports.default = ActorIconList;
    cc._RF.pop();
  }, {
    "./ActorIcon": "ActorIcon"
  } ],
  ActorIconView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "98dcfwwsiBByJEBKBxtcNvK", "ActorIconView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ActorIcon_1 = require("./ActorIcon");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ActorIconView = function(_super) {
      __extends(ActorIconView, _super);
      function ActorIconView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.iconPrefab = null;
        _this.layout = null;
        return _this;
      }
      ActorIconView.prototype.onLoad = function() {};
      ActorIconView.prototype.getIcon = function(resName) {
        var node = cc.instantiate(this.iconPrefab);
        node.parent = this.layout;
        var icon = node.getComponent(ActorIcon_1.default);
        icon.show(resName, false);
        return icon;
      };
      __decorate([ property(cc.Prefab) ], ActorIconView.prototype, "iconPrefab", void 0);
      __decorate([ property(cc.Node) ], ActorIconView.prototype, "layout", void 0);
      ActorIconView = __decorate([ ccclass ], ActorIconView);
      return ActorIconView;
    }(cc.Component);
    exports.default = ActorIconView;
    cc._RF.pop();
  }, {
    "./ActorIcon": "ActorIcon"
  } ],
  ActorIcon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82cadv95axM0ICz3dQzuxI8", "ActorIcon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ActorIcon = function(_super) {
      __extends(ActorIcon, _super);
      function ActorIcon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.isKilled = false;
        _this.isListItem = true;
        return _this;
      }
      ActorIcon.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
      };
      ActorIcon.prototype.start = function() {};
      ActorIcon.prototype.show = function(resName, isListItem) {
        this.isListItem = isListItem;
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        var sp = Logic_1.default.spriteFrameRes("monstericon");
        var unit = 8;
        var rect = sp.getRect();
        var sf1 = sp.clone();
        var index = parseInt(resName.substring("monster".length));
        sf1.setRect(cc.rect(rect.x + unit * index, rect.y, unit, unit));
        this.sprite.trim = true;
        this.sprite.spriteFrame = sf1;
        this.sprite.node.width = 32;
        this.sprite.node.height = 32;
      };
      ActorIcon.prototype.hide = function() {
        var _this = this;
        if (!this.node || this.isKilled) return;
        this.isKilled = true;
        cc.tween(this.sprite.node).to(.3, {
          scale: 1.5,
          opacity: 0
        }).call(function() {
          _this.node.destroy();
        }).start();
      };
      ActorIcon.prototype.updateLogic = function(data, pos) {
        if (this.node && this.node.isValid) if (data.currentHealth <= 0) this.hide(); else if (!this.isListItem) {
          var p = this.node.parent.convertToNodeSpaceAR(pos);
          var pw = this.node.parent.width / 2;
          var ph = this.node.parent.height / 2;
          var w = this.node.width;
          var h = this.node.height;
          var x = p.x;
          var y = p.y;
          var isOut = false;
          if (x > pw) {
            x = pw - w;
            isOut = true;
          }
          if (x < -pw) {
            x = -pw + w;
            isOut = true;
          }
          if (y > ph) {
            y = ph - h;
            isOut = true;
          }
          if (y < -ph) {
            y = -ph + h;
            isOut = true;
          }
          this.sprite.node.position = cc.v3(x, y);
          this.sprite.node.opacity = isOut ? 255 : 0;
        }
      };
      ActorIcon = __decorate([ ccclass ], ActorIcon);
      return ActorIcon;
    }(cc.Component);
    exports.default = ActorIcon;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic"
  } ],
  ActorUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01700dV3iVC1p7rezKVnsyV", "ActorUtils");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("./../ecs/component/MoveComponent");
    var Actor_1 = require("../base/Actor");
    var Boss_1 = require("../boss/Boss");
    var CCollider_1 = require("../collider/CCollider");
    var Logic_1 = require("../logic/Logic");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var Player_1 = require("../logic/Player");
    var Utils_1 = require("./Utils");
    var IndexZ_1 = require("./IndexZ");
    var ActorUtils = function() {
      function ActorUtils() {}
      ActorUtils.getEnemyCollisionTarget = function(other, isPlayer) {
        if (isPlayer) {
          if (other.tag == CCollider_1.default.TAG.NONPLAYER || other.tag == CCollider_1.default.TAG.BOSS) return other.node.getComponent(Actor_1.default);
        } else if (other.tag == CCollider_1.default.TAG.PLAYER || other.tag == CCollider_1.default.TAG.GOODNONPLAYER) return other.node.getComponent(Actor_1.default);
        return null;
      };
      ActorUtils.getEnemyActorByNode = function(other, isPlayer) {
        if (isPlayer) {
          var non = other.getComponent(NonPlayer_1.default);
          if (non && non.data.isEnemy > 0) return non;
          var boss = other.getComponent(Boss_1.default);
          if (boss) return boss;
        } else {
          var player = other.getComponent(Player_1.default);
          if (player) return player;
          var non = other.getComponent(NonPlayer_1.default);
          if (non && non.data.isEnemy < 1) return non;
        }
        return null;
      };
      ActorUtils.getPlayerPosition = function(selfPosition, dungeon, distance) {
        return ActorUtils.getNearestTargetPosition(selfPosition, [ Actor_1.default.TARGET_PLAYER ], dungeon, true, distance);
      };
      ActorUtils.getDirectionFromNearestEnemy = function(selfPosition, selfIsEnemy, dungeon, needRandom, distance) {
        var targetActor = ActorUtils.getNearestEnemyActor(selfPosition, selfIsEnemy, dungeon, distance);
        return ActorUtils.getTargetDirection(selfPosition, targetActor, needRandom);
      };
      ActorUtils.getTargetDirection = function(selfPosition, targetActor, needRandom) {
        var pos = ActorUtils.getTargetPosition(selfPosition, targetActor, needRandom);
        return pos.equals(cc.Vec3.ZERO) ? cc.Vec3.ZERO : pos.subtract(selfPosition).normalize();
      };
      ActorUtils.getNearestEnemyPosition = function(selfPosition, selfIsEnemy, dungeon, needRandom, distance) {
        return ActorUtils.getNearestTargetPosition(selfPosition, selfIsEnemy ? [ Actor_1.default.TARGET_PLAYER, Actor_1.default.TARGET_NONPLAYER ] : [ Actor_1.default.TARGET_MONSTER, Actor_1.default.TARGET_NONPLAYER_ENEMY, Actor_1.default.TARGET_BOSS ], dungeon, needRandom, distance);
      };
      ActorUtils.getNearestTargetPosition = function(selfPosition, targetTypes, dungeon, needRandom, distance) {
        var targetActor = ActorUtils.getNearestTargetActor(selfPosition, targetTypes, dungeon, distance || 999999);
        return ActorUtils.getTargetPosition(selfPosition, targetActor, needRandom);
      };
      ActorUtils.getTargetPosition = function(selfPosition, targetActor, needRandom) {
        if (targetActor) return targetActor.getCenterPosition();
        if (needRandom) return selfPosition.clone().addSelf(cc.v3(Logic_1.default.getRandomNum(0, 600) - 300, Logic_1.default.getRandomNum(0, 600) - 300));
        return cc.Vec3.ZERO;
      };
      ActorUtils.getNearestEnemyActor = function(selfPosition, selfIsEnemy, dungeon, distance) {
        return ActorUtils.getNearestTargetActor(selfPosition, selfIsEnemy ? [ Actor_1.default.TARGET_PLAYER, Actor_1.default.TARGET_NONPLAYER ] : [ Actor_1.default.TARGET_MONSTER, Actor_1.default.TARGET_NONPLAYER_ENEMY, Actor_1.default.TARGET_BOSS ], dungeon, distance);
      };
      ActorUtils.getNearestTargetActor = function(selfPosition, targetTypes, dungeon, distance) {
        if (!dungeon) return null;
        var shortdis = distance || 999999;
        var targetActor;
        var targetList = [];
        for (var _i = 0, targetTypes_1 = targetTypes; _i < targetTypes_1.length; _i++) {
          var targetType = targetTypes_1[_i];
          if (targetType == Actor_1.default.TARGET_PLAYER) targetList.push(dungeon.player); else if (targetType == Actor_1.default.TARGET_MONSTER) targetList = targetList.concat(dungeon.monsterManager.monsterList); else if (targetType == Actor_1.default.TARGET_BOSS) targetList = targetList.concat(dungeon.monsterManager.bossList); else if (targetType == Actor_1.default.TARGET_NONPLAYER) for (var _a = 0, _b = dungeon.nonPlayerManager.nonPlayerList; _a < _b.length; _a++) {
            var non = _b[_a];
            non && non.node && non.node.active && non.data.isEnemy < 1 && targetList.push(non);
          } else if (targetType == Actor_1.default.TARGET_NONPLAYER_ENEMY) for (var _c = 0, _d = dungeon.nonPlayerManager.nonPlayerList; _c < _d.length; _c++) {
            var non = _d[_c];
            non && non.node && non.node.active && non.data.isEnemy > 0 && targetList.push(non);
          }
        }
        for (var _e = 0, targetList_1 = targetList; _e < targetList_1.length; _e++) {
          var target = targetList_1[_e];
          if (this.isTargetCanTrack(target)) {
            var dis = Logic_1.default.getDistanceNoSqrt(selfPosition, target.getCenterPosition());
            if (dis < shortdis) {
              shortdis = dis;
              targetActor = target;
            }
          }
        }
        if (targetActor) return targetActor;
        return null;
      };
      ActorUtils.getTargetDistance = function(actor, target) {
        if (!target) return 999999;
        var dis = Logic_1.default.getDistanceNoSqrt(actor.node.position, target.node.position);
        return dis;
      };
      ActorUtils.isTargetAlive = function(target) {
        if (!target || target.invisible || target.sc.isDied || !target.sc.isShow) return false;
        return true;
      };
      ActorUtils.isTargetCanTrack = function(target) {
        if (target && target.node && target.node.active && target.isValid && !target.sc.isDied && target.sc.isShow) return true;
        return false;
      };
      ActorUtils.isBehindTarget = function(self, target) {
        if (!self || !target) return false;
        return ActorUtils.isPosBehindTarget(self.node.position, target);
      };
      ActorUtils.isPosBehindTarget = function(pos, target) {
        if (!pos || !target) return false;
        var isTargetOnRight = target.node.position.x > pos.x;
        var isTargetFaceRight = target.isFaceRight;
        return isTargetOnRight && isTargetFaceRight || !isTargetOnRight && !isTargetFaceRight;
      };
      ActorUtils.getDashDistance = function(actor, speed, second) {
        if (!actor || !actor.entity || !actor.entity.Move) {
          cc.log("actor\u6216\u8005entity\u4e0d\u5b58\u5728");
          return 0;
        }
        return Utils_1.default.getDashDistanceByTime(speed, actor.entity.Move.damping, second) * MoveComponent_1.MoveComponent.PIXELS_PER_UNIT;
      };
      ActorUtils.getDashTime = function(actor, speed) {
        return Utils_1.default.getDashTime(speed, actor.entity.Move.damping);
      };
      ActorUtils.changeZIndex = function(actor) {
        var offsetY = actor.entity.Transform.base;
        offsetY > 0 && (offsetY += 500);
        actor.node.zIndex = IndexZ_1.default.getActorZIndex(cc.v3(actor.node.position.x, actor.node.position.y - offsetY));
      };
      return ActorUtils;
    }();
    exports.default = ActorUtils;
    cc._RF.pop();
  }, {
    "../base/Actor": "Actor",
    "../boss/Boss": "Boss",
    "../collider/CCollider": "CCollider",
    "../logic/Logic": "Logic",
    "../logic/NonPlayer": "NonPlayer",
    "../logic/Player": "Player",
    "./../ecs/component/MoveComponent": "MoveComponent",
    "./IndexZ": "IndexZ",
    "./Utils": "Utils"
  } ],
  Actor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1527FzjXVGUp0qJt0LJYgx", "Actor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ColliderComponent_1 = require("./../ecs/component/ColliderComponent");
    var CCollider_1 = require("../collider/CCollider");
    var MoveComponent_1 = require("../ecs/component/MoveComponent");
    var NodeRenderComponent_1 = require("../ecs/component/NodeRenderComponent");
    var TransformComponent_1 = require("../ecs/component/TransformComponent");
    var ECS_1 = require("../ecs/ECS");
    var StateContext_1 = require("./StateContext");
    var BaseColliderComponent_1 = require("./BaseColliderComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Actor = function(_super) {
      __extends(Actor, _super);
      function Actor() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.invisible = false;
        _this.isFaceRight = true;
        _this.isFaceUp = true;
        _this.lights = [];
        _this.sc = new StateContext_1.default();
        _this.seed = 0;
        _this.entity = ECS_1.ecs.createEntityWithComps(NodeRenderComponent_1.NodeRenderComponent, MoveComponent_1.MoveComponent, TransformComponent_1.TransformComponent, ColliderComponent_1.ColliderComponent);
        _this.hv = cc.v2(1, 0);
        return _this;
      }
      Actor.prototype.initCollider = function() {
        this.ccolliders = [];
        var childColliders = this.getComponentsInChildren(CCollider_1.default);
        for (var _i = 0, childColliders_1 = childColliders; _i < childColliders_1.length; _i++) {
          var c = childColliders_1[_i];
          c.tag == CCollider_1.default.TAG.LIGHT || c.getComponent(BaseColliderComponent_1.default) || this.ccolliders.push(c);
        }
        if (this.ccolliders && this.ccolliders.length > 0) {
          this.entity.Collider.colliders = this.ccolliders;
          var groupId = CCollider_1.default.genNonDuplicateID();
          for (var _a = 0, _b = this.ccolliders; _a < _b.length; _a++) {
            var ccolider = _b[_a];
            ccolider.groupId = groupId;
            ccolider.setOnContactListener(this);
          }
        } else this.entity.remove(ColliderComponent_1.ColliderComponent);
      };
      Actor.prototype.registerListener = function(actor) {
        for (var _i = 0, _a = this.ccolliders; _i < _a.length; _i++) {
          var ccolider = _a[_i];
          ccolider.setOnContactListener(actor);
        }
      };
      Actor.prototype.setTargetTags = function() {
        var tags = [];
        for (var _i = 0; _i < arguments.length; _i++) tags[_i] = arguments[_i];
        for (var _a = 0, _b = this.ccolliders; _a < _b.length; _a++) {
          var ccolider = _b[_a];
          ccolider.setTargetTags(tags);
        }
      };
      Actor.prototype.setIgnoreTags = function() {
        var tags = [];
        for (var _i = 0; _i < arguments.length; _i++) tags[_i] = arguments[_i];
        for (var _a = 0, _b = this.ccolliders; _a < _b.length; _a++) {
          var ccolider = _b[_a];
          ccolider.setIgnoreTags(tags);
        }
      };
      Actor.prototype.destroyEntityNode = function() {
        this.entity.destroy();
        this.node.destroy();
      };
      Actor.prototype.onColliderEnter = function(other, self) {};
      Actor.prototype.onColliderStay = function(other, self) {};
      Actor.prototype.onColliderExit = function(other, self) {};
      Actor.prototype.onColliderPreSolve = function(other, self) {};
      Actor.TARGET_PLAYER = 0;
      Actor.TARGET_MONSTER = 1;
      Actor.TARGET_BOSS = 2;
      Actor.TARGET_NONPLAYER = 3;
      Actor.TARGET_NONPLAYER_ENEMY = 4;
      Actor = __decorate([ ccclass ], Actor);
      return Actor;
    }(cc.Component);
    exports.default = Actor;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../ecs/ECS": "ECS",
    "../ecs/component/MoveComponent": "MoveComponent",
    "../ecs/component/NodeRenderComponent": "NodeRenderComponent",
    "../ecs/component/TransformComponent": "TransformComponent",
    "./../ecs/component/ColliderComponent": "ColliderComponent",
    "./BaseColliderComponent": "BaseColliderComponent",
    "./StateContext": "StateContext"
  } ],
  AffixData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "be9b253HYZHzoxRnUI59KXj", "AffixData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var CommonData_1 = require("./CommonData");
    var AffixData = function() {
      function AffixData() {
        this.name = "";
        this.desc = "";
        this.index = 0;
        this.groupId = 0;
        this.factor = 0;
        this.type = 0;
        this.common = new CommonData_1.default();
      }
      AffixData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        this.common.valueCopy(data.common);
        return this;
      };
      AffixData.prototype.clone = function() {
        var e = new AffixData();
        e.valueCopy(this);
        return e;
      };
      return AffixData;
    }();
    exports.default = AffixData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./CommonData": "CommonData"
  } ],
  AffixManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dd6ddlD68BM/504ME7aNgeS", "AffixManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AffixData_1 = require("../data/AffixData");
    var AffixMapData_1 = require("../data/AffixMapData");
    var Logic_1 = require("../logic/Logic");
    var EquipmentManager_1 = require("./EquipmentManager");
    var InventoryManager_1 = require("./InventoryManager");
    var AffixManager = function() {
      function AffixManager() {}
      AffixManager.getAffixMapCollection = function(equipmetType) {
        var EQUIP = new Map();
        EQUIP.set(InventoryManager_1.default.WEAPON, [ 1, 4, 5, 6, 9, 13, 14, 17, 20 ]);
        EQUIP.set(InventoryManager_1.default.REMOTE, [ 1, 2, 3, 12, 16, 22, 23, 24 ]);
        EQUIP.set(InventoryManager_1.default.SHIELD, [ 0, 1, 7, 15, 18, 19, 21 ]);
        EQUIP.set(InventoryManager_1.default.HELMET, [ 0, 1, 7, 14, 17, 20, 22 ]);
        EQUIP.set(InventoryManager_1.default.CLOTHES, [ 0, 1, 7, 21, 15 ]);
        EQUIP.set(InventoryManager_1.default.TROUSERS, [ 0, 1, 7, 8, 21 ]);
        EQUIP.set(InventoryManager_1.default.SHOES, [ 0, 1, 7, 8, 21 ]);
        EQUIP.set(InventoryManager_1.default.GLOVES, [ 0, 1, 2, 3, 7, 9, 13, 14, 15, 16, 17, 22, 23, 24 ]);
        EQUIP.set(InventoryManager_1.default.CLOAK, [ 0, 1, 7, 8, 21 ]);
        var ELEMENT = [ 25, 26, 27, 28, 29, 30, 31 ];
        var TOTAL = [ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46 ];
        var GROUP = EQUIP.get(equipmetType);
        return [ GROUP, ELEMENT, TOTAL ];
      };
      AffixManager.buildEquipmentAffixs = function(data, rand4save) {
        var _a = AffixManager.getAffixMapCollection(data.equipmetType), GROUP = _a[0], ELEMENT = _a[1], TOTAL = _a[2];
        data.requireLevel = Logic_1.default.playerData.OilGoldData.level;
        data.affixs = [];
        data.titlecolor = this.QUALITY_COLORS[data.quality];
        for (var i = 0; i < data.quality; i++) data.affixs.push(AffixManager.getRandomAffix(GROUP, ELEMENT, TOTAL, data.requireLevel, rand4save, -1));
      };
      AffixManager.recastEquipmentAffixs = function(data, oldAffixIndex, rand4save) {
        var _a = AffixManager.getAffixMapCollection(data.equipmetType), GROUP = _a[0], ELEMENT = _a[1], TOTAL = _a[2];
        for (var _i = 0, _b = data.affixs; _i < _b.length; _i++) {
          var affix = _b[_i];
          AffixManager.removeHaveAffix(GROUP, ELEMENT, TOTAL, affix);
        }
        data.affixs[oldAffixIndex] = AffixManager.getRandomAffix(GROUP, ELEMENT, TOTAL, data.requireLevel, rand4save, data.affixs[oldAffixIndex].index);
        EquipmentManager_1.default.updateUpgradeEquipment(data);
      };
      AffixManager.removeHaveAffix = function(groups, elements, totals, oldAffix) {
        var arr = [];
        0 == oldAffix.type ? arr = groups : 1 == oldAffix.type ? arr = elements : 2 == oldAffix.type && (arr = totals);
        for (var i = arr.length - 1; i >= 0; i--) if (oldAffix.groupId == arr[i]) {
          arr.splice(i, 1);
          break;
        }
      };
      AffixManager.strengthenEquipmentAffixs = function(data, oldAffixIndex) {
        var oldAffix = data.affixs[oldAffixIndex];
        if (oldAffix.index >= 9) return;
        oldAffix.index++;
        var map = new AffixMapData_1.default().valueCopy(Logic_1.default.affixs[oldAffix.groupId]);
        AffixManager.buildAffixNameAndCommon(oldAffix, map, data.requireLevel);
        EquipmentManager_1.default.updateUpgradeEquipment(data);
      };
      AffixManager.getRandomAffix = function(groups, elements, totals, level, rand4save, keepIndex) {
        var rand = rand4save.rand();
        var arr = groups;
        var type = 0;
        if (rand > .9) {
          arr = totals;
          type = 2;
        } else if (rand > .7) {
          arr = elements;
          type = 1;
        }
        var i = rand4save.getRandomNum(0, arr.length - 1);
        var index = arr[i];
        arr.splice(i, 1);
        var map = new AffixMapData_1.default().valueCopy(Logic_1.default.affixs[index]);
        var data = new AffixData_1.default();
        data.groupId = map.id;
        data.factor = map.factor;
        data.type = type;
        if (-1 == keepIndex) {
          var r = rand4save.rand();
          data.index = r < .8 ? 0 : r >= .8 && r < .95 ? 1 : r >= .95 && r < .99 ? 2 : 3;
        } else data.index = keepIndex;
        AffixManager.buildAffixNameAndCommon(data, map, level);
        return data;
      };
      AffixManager.buildAffixNameAndCommon = function(data, map, level) {
        3 == data.index ? data.name = map.affixs[0] : 6 == data.index ? data.name = map.affixs[1] : 9 == data.index && (data.name = map.affixs[2]);
        data.common[map.common] = map.levels[data.index] + map.levels[data.index] * data.factor * level;
        data.desc = map.desc.replace("@", data.common[map.common]);
      };
      AffixManager.QUALITY_COLORS = [ "#ffffff", "#00ff00", "#4169E1", "#8B008B", "#FFFF00", "#ffa500", "#ff0000" ];
      AffixManager.QUALITY_NAMES = [ "\u666e\u901a\u7684", "\u7cbe\u826f\u7684", "\u4f18\u79c0\u7684", "\u53f2\u8bd7\u7684", "\u4f20\u8bf4\u7684", "\u795e\u8bdd\u7684", "\u8bc5\u5492\u7684" ];
      AffixManager.BASE_UPGRADE = [ 0, 1, 4, 5, 6, 7, 12, 13, 14, 15 ];
      return AffixManager;
    }();
    exports.default = AffixManager;
    cc._RF.pop();
  }, {
    "../data/AffixData": "AffixData",
    "../data/AffixMapData": "AffixMapData",
    "../logic/Logic": "Logic",
    "./EquipmentManager": "EquipmentManager",
    "./InventoryManager": "InventoryManager"
  } ],
  AffixMapData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ea820wKBeZCKo9ZuwqGqC6y", "AffixMapData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var AffixMapData = function() {
      function AffixMapData() {
        this.desc = "";
        this.id = 0;
        this.factor = 0;
        this.affixs = [];
        this.levels = [];
        this.common = "";
      }
      AffixMapData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        this.affixs = DataUtils_1.default.copyListValue(data.affixs, function(arg0) {
          return arg0 || "";
        });
        this.levels = DataUtils_1.default.copyListValue(data.levels, function(arg0) {
          return arg0 || 0;
        });
        return this;
      };
      AffixMapData.prototype.clone = function() {
        var e = new AffixMapData();
        e.valueCopy(this);
        return e;
      };
      return AffixMapData;
    }();
    exports.default = AffixMapData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  AiController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93fbafziSlDUIZV8uwfZF+g", "AiController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseController_1 = require("./BaseController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AiController = function(_super) {
      __extends(AiController, _super);
      function AiController() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      AiController.prototype.ctrlPlayerMove = function(dir, pos, dt, dungeon) {
        this.CanControl && this.player.ctrlMove(dir, pos, dt, dungeon);
      };
      AiController.prototype.ctrlPlayerTrigger = function(isLongPress) {
        this.CanControl && this.player.ctrlTriggerThings(isLongPress);
      };
      AiController.prototype.ctrlPlayerUseItem = function(detail) {
        this.CanControl && this.player.ctrlUseItem(detail.itemData);
      };
      AiController.prototype.ctrlPlayerUseSkill = function() {
        this.CanControl && this.player.ctrlUseSkill();
      };
      AiController.prototype.ctrlPlayerUseSkill1 = function() {
        this.CanControl && this.player.ctrlUseSkill1();
      };
      AiController.prototype.ctrlPlayerMeleeAttack = function() {
        this.CanControl && this.player.ctrlMeleeAttack();
      };
      AiController.prototype.ctrlPlayerRemoteAttackCancel = function() {
        this.CanControl && this.player.ctrlRemoteCancel();
      };
      AiController.prototype.ctrlPlayerRemoteAttack = function() {
        this.CanControl && this.player.ctrlRemoteAttack();
      };
      AiController.prototype.ctrlPlayerJump = function() {
        this.CanControl && this.player.ctrlJump();
      };
      AiController.prototype.ctrlPlayerDash = function() {
        this.CanControl && this.player.ctrlDash();
      };
      AiController.prototype.ctrlPlayerJumpCancel = function() {
        this.CanControl && this.player.ctrlJumpCancel();
      };
      AiController = __decorate([ ccclass ], AiController);
      return AiController;
    }(BaseController_1.default);
    exports.default = AiController;
    cc._RF.pop();
  }, {
    "./BaseController": "BaseController"
  } ],
  AiPlayerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8038fBTh+dOxqkqEKLB2G6q", "AiPlayerManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var BaseManager_1 = require("./BaseManager");
    var Utils_1 = require("../utils/Utils");
    var Player_1 = require("../logic/Player");
    var AiController_1 = require("../logic/AiController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AiPlayerManager = function(_super) {
      __extends(AiPlayerManager, _super);
      function AiPlayerManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerPrefab = null;
        _this.players = new Array();
        _this.controllers = new Array();
        _this.timeDelay = 0;
        return _this;
      }
      Object.defineProperty(AiPlayerManager.prototype, "PlayerList", {
        get: function() {
          return this.players;
        },
        enumerable: false,
        configurable: true
      });
      AiPlayerManager.prototype.clear = function() {
        Utils_1.default.clearComponentArray(this.players);
      };
      AiPlayerManager.prototype.addAiPlayerListFromSave = function(dungeon, list) {
        var room = Logic_1.default.mapManager.getCurrentRoom();
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
          var key = list_1[_i];
          var data = Logic_1.default.getPlayerDataById(key);
          data.roomPos.x == room.x && data.roomPos.y == room.y && data.chapterIndex == Logic_1.default.chapterIndex && data.chapterLevel == Logic_1.default.level && this.getPlayer(data.id, dungeon);
        }
      };
      AiPlayerManager.prototype.addNonPlayerFromData = function(dataId, dungeon) {
        this.getPlayer(dataId, dungeon);
      };
      AiPlayerManager.prototype.getPlayer = function(dataId, dungeon) {
        var player = cc.instantiate(this.playerPrefab).getComponent(Player_1.default);
        player.dataId = dataId;
        var controller = player.addComponent(AiController_1.default);
        controller.player = player;
        player.controller = controller;
        player.node.parent = dungeon.node;
        player.dungeon = dungeon;
        return player;
      };
      AiPlayerManager.prototype.updateLogic = function(dt) {};
      __decorate([ property(cc.Prefab) ], AiPlayerManager.prototype, "playerPrefab", void 0);
      AiPlayerManager = __decorate([ ccclass ], AiPlayerManager);
      return AiPlayerManager;
    }(BaseManager_1.default);
    exports.default = AiPlayerManager;
    cc._RF.pop();
  }, {
    "../logic/AiController": "AiController",
    "../logic/Logic": "Logic",
    "../logic/Player": "Player",
    "../utils/Utils": "Utils",
    "./BaseManager": "BaseManager"
  } ],
  AirExit: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "091edkNmgRCZq+fEAizpd4W", "AirExit");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Player_1 = require("../logic/Player");
    var Logic_1 = require("../logic/Logic");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../utils/IndexZ");
    var Dungeon_1 = require("../logic/Dungeon");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AirExit = function(_super) {
      __extends(AirExit, _super);
      function AirExit() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.dir = 0;
        _this.status = AirExit_1.STATUS_CLOSE;
        _this.sprite = null;
        return _this;
      }
      AirExit_1 = AirExit;
      AirExit.prototype.onLoad = function() {
        this.sprite = this.getComponent(cc.Sprite);
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      AirExit.prototype.init = function(dir, length) {
        this.dir = dir;
        switch (dir) {
         case 0:
          break;

         case 1:
          this.node.scaleY = -8;
          break;

         case 2:
          this.node.angle = 90;
          break;

         case 3:
          this.node.angle = 90;
          this.node.scaleY = -8;
        }
        this.node.opacity = 60;
        this.node.width = Dungeon_1.default.TILE_SIZE / 8 * length;
        this.setTargetTags(CCollider_1.default.TAG.PLAYER, CCollider_1.default.TAG.BULLET);
        for (var _i = 0, _a = this.ccolliders; _i < _a.length; _i++) {
          var c = _a[_i];
          c.setSize(cc.size(this.node.width, Dungeon_1.default.TILE_SIZE / 8));
        }
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
        this.changeStatus(AirExit_1.STATUS_CLOSE);
      };
      AirExit.prototype.changeStatus = function(status) {
        this.status = status;
        var resName = "";
        Logic_1.default.mapManager.isNeighborRoomExist(this.dir) || (this.status = AirExit_1.STATUS_WAIT);
        switch (this.status) {
         case AirExit_1.STATUS_CLOSE:
          resName = "outertips2";
          break;

         case AirExit_1.STATUS_WAIT:
          resName = "outertips3";
          break;

         case AirExit_1.STATUS_OPEN:
          resName = "outertips1";
        }
        for (var _i = 0, _a = this.ccolliders; _i < _a.length; _i++) {
          var c = _a[_i];
          c.sensor = this.status == AirExit_1.STATUS_OPEN;
        }
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
      };
      AirExit.prototype.start = function() {};
      AirExit.prototype.onColliderEnter = function(other, self) {
        var _this = this;
        if (other.tag == CCollider_1.default.TAG.PLAYER) {
          var player = other.node.getComponent(Player_1.default);
          player && this.status == AirExit_1.STATUS_OPEN && this.scheduleOnce(function() {
            Logic_1.default.loadingNextRoom(_this.dir);
          });
        }
      };
      var AirExit_1;
      AirExit.STATUS_CLOSE = 0;
      AirExit.STATUS_WAIT = 1;
      AirExit.STATUS_OPEN = 2;
      AirExit = AirExit_1 = __decorate([ ccclass ], AirExit);
      return AirExit;
    }(Building_1.default);
    exports.default = AirExit;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Player": "Player",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  AlertDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95ea5sSiSZL5bTC3LGBi6J8", "AlertDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AlertDialog = function(_super) {
      __extends(AlertDialog, _super);
      function AlertDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.msg = null;
        _this.ok = null;
        _this.cancel = null;
        return _this;
      }
      AlertDialog.prototype.onLoad = function() {};
      AlertDialog.prototype.showAnim = function() {
        this.node.active = true;
      };
      AlertDialog.prototype.hideAnim = function() {
        this.node.active = false;
      };
      AlertDialog.prototype.show = function(msg, ok, cancel, callback) {
        this.msg.string = msg;
        this.ok.getComponentInChildren(cc.Label).string = ok;
        this.cancel.node.active = cancel.length > 0;
        this.cancel.getComponentInChildren(cc.Label).string = cancel;
        this.callback = callback;
        this.showAnim();
      };
      AlertDialog.prototype.hide = function() {
        this.hideAnim();
      };
      AlertDialog.prototype.clickOk = function() {
        this.callback && this.callback(true);
        this.hide();
      };
      AlertDialog.prototype.clickCancel = function() {
        this.callback && this.callback(false);
        this.hide();
      };
      __decorate([ property(cc.Label) ], AlertDialog.prototype, "msg", void 0);
      __decorate([ property(cc.Button) ], AlertDialog.prototype, "ok", void 0);
      __decorate([ property(cc.Button) ], AlertDialog.prototype, "cancel", void 0);
      AlertDialog = __decorate([ ccclass ], AlertDialog);
      return AlertDialog;
    }(cc.Component);
    exports.default = AlertDialog;
    cc._RF.pop();
  }, {} ],
  AoeManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "418293hoQNDuI0vvcVpCRMh", "AoeManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AreaOfEffect_1 = require("../actor/AreaOfEffect");
    var Logic_1 = require("../logic/Logic");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AoeManager = function(_super) {
      __extends(AoeManager, _super);
      function AoeManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.aoe = null;
        return _this;
      }
      AoeManager.prototype.clear = function() {};
      AoeManager.prototype.addSpriteFramesAoe = function(parentNode, pos, aoeData, spriteFrameNames, repeatForever, isFaceRight) {
        var aoe = cc.instantiate(this.aoe);
        pos.y += 32;
        var sprite = aoe.getChildByName("sprite").getComponent(cc.Sprite);
        var collider = aoe.getComponent(CCollider_1.default);
        if (spriteFrameNames.length > 0) {
          var spriteframe = Logic_1.default.spriteFrameRes(spriteFrameNames[0]);
          sprite.node.width = spriteframe.getOriginalSize().width;
          sprite.node.height = spriteframe.getOriginalSize().height;
          sprite.node.scale = 4;
          sprite.node.scaleX = isFaceRight ? 4 : -4;
          collider.w = 3 * sprite.node.width;
          collider.h = 3 * sprite.node.height;
        }
        var tween = cc.tween();
        var _loop_1 = function(name) {
          tween.then(cc.tween().delay(.2).call(function() {
            sprite.spriteFrame = Logic_1.default.spriteFrameRes(name);
          }));
        };
        for (var _i = 0, spriteFrameNames_1 = spriteFrameNames; _i < spriteFrameNames_1.length; _i++) {
          var name = spriteFrameNames_1[_i];
          _loop_1(name);
        }
        repeatForever ? cc.tween(aoe).repeatForever(tween).start() : cc.tween(aoe).then(tween).delay(.2).call(function() {
          sprite.spriteFrame = null;
        }).start();
        var areaScript = aoe.getComponent(AreaOfEffect_1.default);
        areaScript.show(parentNode, pos, cc.v2(1, 0), 0, aoeData);
      };
      __decorate([ property(cc.Prefab) ], AoeManager.prototype, "aoe", void 0);
      AoeManager = __decorate([ ccclass ], AoeManager);
      return AoeManager;
    }(cc.Component);
    exports.default = AoeManager;
    cc._RF.pop();
  }, {
    "../actor/AreaOfEffect": "AreaOfEffect",
    "../collider/CCollider": "CCollider",
    "../logic/Logic": "Logic"
  } ],
  AreaDetector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "77810+lX7JF67u57+eViJLm", "AreaDetector");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CCollider_1 = require("../collider/CCollider");
    var Bullet_1 = require("../item/Bullet");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var NextStep_1 = require("../utils/NextStep");
    var Random_1 = require("../utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AreaDetector = function(_super) {
      __extends(AreaDetector, _super);
      function AreaDetector() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.step = new NextStep_1.default();
        return _this;
      }
      AreaDetector.prototype.onLoad = function() {
        this.collider = this.getComponent(CCollider_1.default);
      };
      AreaDetector.prototype.start = function() {};
      AreaDetector.prototype.onColliderEnter = function(other, self) {
        var _this = this;
        this.step.next(function() {
          var bullet = other.getComponent(Bullet_1.default);
          var monster = _this.node.parent.getComponent(NonPlayer_1.default);
          if (bullet && (bullet.isFromPlayer && monster.data.isEnemy > 0 || !bullet.isFromPlayer && monster.data.isEnemy < 1)) {
            var pos = _this.getRoate90Point(bullet.node.position, monster.node.position, Random_1.default.getHalfChance());
            pos = pos.sub(monster.node.position);
            monster.dodge(pos);
          }
        }, 3);
      };
      AreaDetector.prototype.getRoate90Point = function(posA, posB, reverse) {
        return reverse ? cc.v3(posB.x + posA.y - posB.y, posB.y - posA.x + posB.x) : cc.v3(posB.x - posA.y + posB.y, posB.y + posA.x - posB.x);
      };
      AreaDetector = __decorate([ ccclass ], AreaDetector);
      return AreaDetector;
    }(cc.Component);
    exports.default = AreaDetector;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../item/Bullet": "Bullet",
    "../logic/NonPlayer": "NonPlayer",
    "../utils/NextStep": "NextStep",
    "../utils/Random": "Random"
  } ],
  AreaOfEffectData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33991eUauZNwoZkS4LCMfg4", "AreaOfEffectData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var IndexZ_1 = require("../utils/IndexZ");
    var DamageData_1 = require("./DamageData");
    var FromData_1 = require("./FromData");
    var AreaOfEffectData = function() {
      function AreaOfEffectData() {
        this.duration = 0;
        this.interval = .1;
        this.delay = 0;
        this.scale = 0;
        this.zIndex = IndexZ_1.default.ACTOR;
        this.isRotate = false;
        this.isFromEnemy = false;
        this.canBreakBuilding = false;
        this.canBreakBullet = false;
        this.canBeatBack = false;
        this.damage = new DamageData_1.default();
        this.from = new FromData_1.default();
        this.statusList = [];
      }
      AreaOfEffectData.prototype.init = function(duration, interval, delay, scale, zIndex, isFromEnemy, canBreakBuilding, canBreakBullet, canBeatBack, isRotate, damage, from, statusList) {
        this.duration = duration;
        this.delay = delay;
        this.interval = interval;
        this.scale = scale;
        this.zIndex = zIndex;
        this.isFromEnemy = isFromEnemy;
        this.canBreakBuilding = canBreakBuilding;
        this.canBreakBullet = canBreakBullet;
        this.canBeatBack = canBeatBack;
        this.isRotate = isRotate;
        this.damage = damage;
        this.from = from;
        this.statusList = statusList;
        return this;
      };
      AreaOfEffectData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.interval = data.interval ? data.interval : .1;
        this.zIndex = data.zIndex ? data.zIndex : IndexZ_1.default.ACTOR;
        this.statusList = data.statusList ? data.statusList : [];
        this.damage.valueCopy(data.damage);
        this.from.valueCopy(data.from);
      };
      AreaOfEffectData.prototype.clone = function() {
        var e = new AreaOfEffectData();
        e.valueCopy(this);
        return e;
      };
      return AreaOfEffectData;
    }();
    exports.default = AreaOfEffectData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "../utils/IndexZ": "IndexZ",
    "./DamageData": "DamageData",
    "./FromData": "FromData"
  } ],
  AreaOfEffect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a73blWLNVEw7zhXpbo521b", "AreaOfEffect");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("../boss/Boss");
    var DamageData_1 = require("../data/DamageData");
    var IndexZ_1 = require("../utils/IndexZ");
    var AreaOfEffectData_1 = require("../data/AreaOfEffectData");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var InteractBuilding_1 = require("../building/InteractBuilding");
    var CCollider_1 = require("../collider/CCollider");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var NormalBuilding_1 = require("../building/NormalBuilding");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AreaOfEffect = function(_super) {
      __extends(AreaOfEffect, _super);
      function AreaOfEffect() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hasTargetMap = new Map();
        _this.isAttacking = false;
        _this.data = new AreaOfEffectData_1.default();
        _this.usePool = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Object.defineProperty(AreaOfEffect.prototype, "IsAttacking", {
        get: function() {
          return this.isAttacking;
        },
        enumerable: false,
        configurable: true
      });
      AreaOfEffect.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      AreaOfEffect.prototype.onEnable = function() {
        this.hasTargetMap.clear();
        this.isAttacking = false;
      };
      AreaOfEffect.prototype.start = function() {};
      AreaOfEffect.prototype.AnimFinish = function() {
        this.close();
      };
      AreaOfEffect.prototype.close = function() {
        var _this = this;
        this.scheduleOnce(function() {
          _this.node && _this.node.isValid && !_this.usePool && _this.destroyEntityNode();
          _this.destoryCallBack && _this.usePool && _this.destoryCallBack(_this.node);
        }, 1);
        this.isAttacking = false;
      };
      AreaOfEffect.prototype.show = function(parentNode, postion, hv, angleOffset, data, killCallBack, usePool, destoryCallBack) {
        var _this = this;
        this.data.valueCopy(data);
        this.node.active = true;
        this.node.parent = parentNode;
        this.usePool = usePool;
        this.isAttacking = true;
        this.killCallBack = killCallBack;
        this.destoryCallBack = destoryCallBack;
        this.node.setPosition(postion);
        this.entity.Transform.position = postion;
        if (this.data.scale > 0) {
          this.node.scaleX = this.node.scaleX > 0 ? this.data.scale : -this.data.scale;
          this.node.scaleY = this.node.scaleY > 0 ? this.data.scale : -this.data.scale;
        }
        if (this.data.isRotate) {
          var direction = this.getHv(hv, angleOffset);
          var angle = cc.v2(direction.x, direction.y).signAngle(cc.v2(1, 0));
          var degree = cc.misc.radiansToDegrees(angle);
          this.node.angle = 360 - degree;
        }
        this.node.zIndex = this.data.zIndex ? this.data.zIndex : IndexZ_1.default.ACTOR;
        this.scheduleOnce(function() {
          _this.isAttacking = true;
        }, this.data.delay);
        this.data.duration > 0 && this.scheduleOnce(function() {
          _this.close();
        }, this.data.duration);
        var anim = this.getComponent(cc.Animation);
        anim && !anim.playOnLoad && anim.play();
      };
      AreaOfEffect.prototype.getHv = function(hv, angleOffset) {
        var pos = cc.v2(hv.clone().rotateSelf(angleOffset * Math.PI / 180));
        return pos.normalizeSelf();
      };
      AreaOfEffect.prototype.onColliderStay = function(other, self) {
        if (self.isValid && this.isAttacking) if (this.hasTargetMap.has(other.id) && this.hasTargetMap.get(other.id) > 0) this.hasTargetMap.set(other.id, this.hasTargetMap.get(other.id) + 1); else {
          this.hasTargetMap.set(other.id, 1);
          var isAttack = true;
          this.data.isFromEnemy || other.tag != CCollider_1.default.TAG.GOODNONPLAYER && other.tag != CCollider_1.default.TAG.PLAYER || (isAttack = false);
          !this.data.isFromEnemy || other.tag != CCollider_1.default.TAG.NONPLAYER && other.tag != CCollider_1.default.TAG.BOSS || (isAttack = false);
          isAttack && this.attacking(other.node, other.tag);
        }
      };
      AreaOfEffect.prototype.attacking = function(attackTarget, tag) {
        if (!attackTarget) return;
        var damage = new DamageData_1.default();
        damage.valueCopy(this.data.damage);
        damage.isRemote = true;
        if (tag == CCollider_1.default.TAG.PLAYER || tag == CCollider_1.default.TAG.NONPLAYER || tag == CCollider_1.default.TAG.GOODNONPLAYER || tag == CCollider_1.default.TAG.BOSS) {
          var normal = attackTarget.convertToWorldSpaceAR(cc.Vec2.ZERO).subSelf(this.node.convertToWorldSpaceAR(cc.Vec2.ZERO)).normalizeSelf();
          var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget, !this.data.isFromEnemy);
          this.data.from.pos = this.node.position;
          if (target && !target.sc.isDied) {
            var damageSuccess = target.takeDamage(damage, this.data.from);
            if (damageSuccess) {
              target.data.currentHealth <= 0 && this.killCallBack && this.killCallBack(target);
              this.data.canBeatBack && !target.getComponent(Boss_1.default) && this.beatBack(target, normal);
              for (var _i = 0, _a = this.data.statusList; _i < _a.length; _i++) {
                var status = _a[_i];
                target.addStatus(status, this.data.from);
              }
            }
          }
        } else if (tag == CCollider_1.default.TAG.BUILDING) {
          var interactBuilding = attackTarget.getComponent(InteractBuilding_1.default);
          if (this.data.canBreakBuilding && interactBuilding) {
            interactBuilding.takeDamage(damage, this.data.from);
            return;
          }
          var hitBuilding = attackTarget.getComponent(NormalBuilding_1.default);
          this.data.canBreakBuilding && hitBuilding && hitBuilding.takeDamage(damage, this.data.from);
        }
      };
      AreaOfEffect.prototype.beatBack = function(actor, hv) {
        var pos = hv.clone();
        pos.equals(cc.Vec2.ZERO) && (pos = cc.v2(1, 0));
        var power = 20;
        pos = pos.normalizeSelf().mul(power);
        this.scheduleOnce(function() {
          actor.entity.Move.linearVelocity = cc.v2(pos.x, pos.y);
        }, .1);
      };
      AreaOfEffect.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > this.data.interval) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      AreaOfEffect.prototype.update = function(dt) {
        this.isCheckTimeDelay(dt) && this.hasTargetMap.clear();
      };
      AreaOfEffect = __decorate([ ccclass ], AreaOfEffect);
      return AreaOfEffect;
    }(BaseColliderComponent_1.default);
    exports.default = AreaOfEffect;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../boss/Boss": "Boss",
    "../building/InteractBuilding": "InteractBuilding",
    "../building/NormalBuilding": "NormalBuilding",
    "../collider/CCollider": "CCollider",
    "../data/AreaOfEffectData": "AreaOfEffectData",
    "../data/DamageData": "DamageData",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/IndexZ": "IndexZ"
  } ],
  AttributeData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3df7eU5e+9JzoOx3mUEhHmJ", "AttributeData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AttributeData = function() {
      function AttributeData(id, name, resName, desc, name1, desc1) {
        this.name = "";
        this.id = 0;
        this.resName = "";
        this.desc = "";
        this.name1 = "";
        this.desc1 = "";
        this.id = id;
        this.name = name;
        this.resName = resName;
        this.desc = desc;
        this.desc1 = desc1;
        this.name1 = name1;
      }
      return AttributeData;
    }();
    exports.default = AttributeData;
    cc._RF.pop();
  }, {} ],
  AttributeSelector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ba37UErLJKsamr/CQR4tOg", "AttributeSelector");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var ColorPicker_1 = require("./ColorPicker");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AttributeSelector = function(_super) {
      __extends(AttributeSelector, _super);
      function AttributeSelector() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.arrowLeft = null;
        _this.arrowRight = null;
        _this.label = null;
        _this.title = null;
        _this.palette = null;
        _this.nameList = [];
        _this.currentIndex = 0;
        _this.defaultColors = [];
        return _this;
      }
      AttributeSelector.prototype.onLoad = function() {
        var _this = this;
        this.arrowLeft.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.currentIndex--;
          _this.updateAttribute();
        });
        this.arrowRight.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.currentIndex++;
          _this.updateAttribute();
        });
        this.palette.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.colorPicker && _this.colorPicker.show(_this.palette.color, _this.defaultColors, function(color) {
            _this.palette.color = color;
            _this.selectorCallback && _this.selectorCallback(_this.nameList[_this.currentIndex], _this.palette.color);
          });
        });
      };
      AttributeSelector.prototype.selectRandom = function(colorOnlyDefault) {
        this.currentIndex = Logic_1.default.getRandomNum(0, this.nameList.length - 1);
        if (this.colorPicker) {
          this.palette.color = ColorPicker_1.default.getRandomColor();
          colorOnlyDefault && (this.palette.color = cc.Color.WHITE.fromHEX(this.defaultColors[Logic_1.default.getRandomNum(0, this.defaultColors.length - 1)]));
        }
        this.updateAttribute();
      };
      AttributeSelector.prototype.selectTarget = function(resName, defaultColor) {
        if (resName && resName.length > 0) {
          var index = this.nameList.findIndex(function(item) {
            return item.resName == resName;
          });
          index > -1 && (this.currentIndex = index);
        }
        defaultColor && (this.palette.color = defaultColor);
        this.updateAttribute();
      };
      AttributeSelector.prototype.selectNext = function(isLeft) {
        isLeft ? this.currentIndex-- : this.currentIndex++;
        this.updateAttribute();
      };
      AttributeSelector.prototype.init = function(title, nameList, defaultIndex, colorPicker, defaultColors) {
        this.title.string = title;
        this.nameList = nameList;
        this.currentIndex = defaultIndex || 0;
        this.colorPicker = colorPicker;
        if (this.colorPicker) {
          this.node.height = 87;
          this.palette.active = true;
          this.defaultColors = defaultColors;
        } else {
          this.node.height = 52;
          this.palette.active = false;
          this.defaultColors = [];
        }
        this.updateAttribute();
      };
      AttributeSelector.prototype.updateAttribute = function() {
        this.currentIndex < 0 ? this.currentIndex = this.nameList.length - 1 : this.currentIndex > this.nameList.length - 1 && (this.currentIndex = 0);
        this.label.string = this.nameList[this.currentIndex].name;
        this.selectorCallback && this.selectorCallback(this.nameList[this.currentIndex], this.palette.color);
      };
      Object.defineProperty(AttributeSelector.prototype, "CurrentData", {
        get: function() {
          return this.nameList[this.currentIndex];
        },
        enumerable: false,
        configurable: true
      });
      __decorate([ property(cc.Node) ], AttributeSelector.prototype, "arrowLeft", void 0);
      __decorate([ property(cc.Node) ], AttributeSelector.prototype, "arrowRight", void 0);
      __decorate([ property(cc.Label) ], AttributeSelector.prototype, "label", void 0);
      __decorate([ property(cc.Label) ], AttributeSelector.prototype, "title", void 0);
      __decorate([ property(cc.Node) ], AttributeSelector.prototype, "palette", void 0);
      AttributeSelector = __decorate([ ccclass ], AttributeSelector);
      return AttributeSelector;
    }(cc.Component);
    exports.default = AttributeSelector;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "./ColorPicker": "ColorPicker"
  } ],
  AudioPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "76c8da4ThVB/L/QkXaZyrPc", "AudioPlayer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var LoadingManager_1 = require("../manager/LoadingManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AudioPlayer = function(_super) {
      __extends(AudioPlayer, _super);
      function AudioPlayer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.select = null;
        _this.selectfail = null;
        _this.transportship = null;
        _this.lastName = "";
        _this.isSoundNeedPause = false;
        _this.lastBgmIndex = -1;
        _this.effectMap = new Map();
        return _this;
      }
      AudioPlayer_1 = AudioPlayer;
      AudioPlayer.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAY_AUDIO, function(detail) {
          _this.playSound(detail.name, detail.bgm, detail.loop);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.STOP_ALL_AUDIO_EFFECT, function(detail) {
          _this.stopAllEffect();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.STOP_AUDIO_EFFECT, function(detail) {
          _this.stopEffect(detail.name);
        });
        cc.audioEngine.setMusicVolume(.2);
        cc.audioEngine.setEffectsVolume(.4);
        Logic_1.default.audioClips[AudioPlayer_1.SELECT] = this.select;
        Logic_1.default.audioClips[AudioPlayer_1.SELECT_FAIL] = this.selectfail;
        Logic_1.default.audioClips[AudioPlayer_1.TRANSPORTSHIP] = this.transportship;
      };
      AudioPlayer.prototype.playbg = function() {
        var _this = this;
        LoadingManager_1.default.loadAllBundle([ LoadingManager_1.default.AB_BGM ], function() {
          var bgms = [ Logic_1.default.bgmClips[AudioPlayer_1.BGM001], Logic_1.default.bgmClips[AudioPlayer_1.BGM002], Logic_1.default.bgmClips[AudioPlayer_1.BGM003] ];
          var clip = bgms[Logic_1.default.lastBgmIndex];
          if (clip && (!cc.audioEngine.isMusicPlaying() || _this.lastBgmIndex != Logic_1.default.lastBgmIndex)) {
            cc.audioEngine.stopMusic();
            var audioId = cc.audioEngine.playMusic(clip, true);
            _this.effectMap.set(clip.name, audioId);
            _this.lastBgmIndex = Logic_1.default.lastBgmIndex;
          }
        });
      };
      AudioPlayer.prototype.stopAllEffect = function() {
        cc.audioEngine.stopAllEffects();
      };
      AudioPlayer.prototype.stopEffect = function(name) {
        this.effectMap.has(name) && cc.audioEngine.stopEffect(this.effectMap.get(name));
      };
      AudioPlayer.prototype.playSound = function(name, isBgm, loop) {
        var _this = this;
        if (name == this.lastName && name == AudioPlayer_1.COIN && this.isSoundNeedPause) return;
        if (isBgm) switch (name) {
         case AudioPlayer_1.STOP_BG:
          cc.audioEngine.stopMusic();
          break;

         case AudioPlayer_1.PLAY_BG:
          this.playbg();
        } else if (Logic_1.default.audioClips[name]) {
          var audioId = cc.audioEngine.playEffect(Logic_1.default.audioClips[name], loop);
          this.effectMap.set(name, audioId);
        }
        this.lastName = name;
        this.isSoundNeedPause = false;
        if (name == AudioPlayer_1.COIN) {
          this.isSoundNeedPause = true;
          this.scheduleOnce(function() {
            _this.isSoundNeedPause = false;
          }, .05);
        }
      };
      AudioPlayer.play = function(audioName, bgm, loop) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
          name: audioName,
          bgm: bgm,
          loop: loop
        });
      };
      AudioPlayer.stopAllEffect = function() {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.STOP_ALL_AUDIO_EFFECT, {});
      };
      AudioPlayer.stopEffect = function(name) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.STOP_AUDIO_EFFECT, {
          name: name
        });
      };
      var AudioPlayer_1;
      AudioPlayer.BATHING = "bathing";
      AudioPlayer.BGM001 = "bgm001";
      AudioPlayer.BGM002 = "bgm002";
      AudioPlayer.BGM003 = "bgm003";
      AudioPlayer.BLEEDING = "bleeding";
      AudioPlayer.BUBBLE = "bubble";
      AudioPlayer.BLINK = "blink";
      AudioPlayer.BOOM = "boom";
      AudioPlayer.BOSS_ICEDEMON_ATTACK = "bossicedemonattack";
      AudioPlayer.BOSS_ICEDEMON_DASH = "bossicedemondash";
      AudioPlayer.BOSS_ICEDEMON_DEFEND = "bossicedemondefend";
      AudioPlayer.BOSS_ICEDEMON_HIT = "bossicedemonhit";
      AudioPlayer.BOSS_ICEDEMON_THRON = "bossicedemonthron";
      AudioPlayer.CASHIERING = "cashiering";
      AudioPlayer.CAT = "cat";
      AudioPlayer.CHICKEN = "chicken";
      AudioPlayer.CLOSESTOOL = "closestool";
      AudioPlayer.COIN = "coin";
      AudioPlayer.COIN1 = "coin1";
      AudioPlayer.COIN2 = "coin2";
      AudioPlayer.COMPLETE = "complete";
      AudioPlayer.DAGGER_ATTACK = "dagger";
      AudioPlayer.DAGGER_ATTACK1 = "dagger1";
      AudioPlayer.DAGGER_ATTACK2 = "dagger2";
      AudioPlayer.DASH = "dash1";
      AudioPlayer.DIE = "die";
      AudioPlayer.DOG = "dog";
      AudioPlayer.DOLLDOWN = "dolldown";
      AudioPlayer.DOLLMACHINE = "dollmachine";
      AudioPlayer.DRINK = "drink";
      AudioPlayer.ATTACK_ELECTRIC = "attackelectric";
      AudioPlayer.ATTACK_ICE = "attackice";
      AudioPlayer.ATTACK_TOXIC = "attacktoxic";
      AudioPlayer.ATTACK_FIRE = "attackfire";
      AudioPlayer.ATTACK_CURSE = "attackcurse";
      AudioPlayer.ATTACK_BLEEDING = "attackbleeding";
      AudioPlayer.EXIT = "exit";
      AudioPlayer.FEED_FISH = "feedfish";
      AudioPlayer.FIREBALL = "fireball";
      AudioPlayer.FISHTANK = "fishtank";
      AudioPlayer.FIST = "fist";
      AudioPlayer.FIST1 = "fist1";
      AudioPlayer.FIST2 = "fist2";
      AudioPlayer.FLASHLIGHT = "flashlight";
      AudioPlayer.ICEBOOM = "iceboom";
      AudioPlayer.JUMP = "jump";
      AudioPlayer.JUMP_FALL = "jumpfall";
      AudioPlayer.JUMP_WATER = "jumpwater";
      AudioPlayer.LASER = "laser";
      AudioPlayer.LEVELUP = "levelup";
      AudioPlayer.MELEE = "melee";
      AudioPlayer.MELEE_PARRY = "meleeparry";
      AudioPlayer.MELEE_REFLECT = "meleereflect";
      AudioPlayer.MELEE_REFLECT1 = "meleereflect1";
      AudioPlayer.MELEE_REFLECT_WALL = "meleereflectwall";
      AudioPlayer.MELEE_REFLECT_WALL1 = "meleereflectwall1";
      AudioPlayer.MELEE_REFLECT_WOOD1 = "meleereflectwood1";
      AudioPlayer.MELEE_REFLECT_WOOD2 = "meleereflectwood2";
      AudioPlayer.MELEE_REFLECT_WOOD3 = "meleereflectwood3";
      AudioPlayer.MONSTER_HIT = "monsterhit";
      AudioPlayer.MONSTER_HIT1 = "monsterhit1";
      AudioPlayer.MONSTER_HIT2 = "monsterhit2";
      AudioPlayer.MOUSE = "mouse";
      AudioPlayer.MUTANT = "mutant";
      AudioPlayer.OILGOLD = "oildgold";
      AudioPlayer.PICK_ITEM = "pickitem";
      AudioPlayer.PICK_UP = "pickup";
      AudioPlayer.PLAYER_HIT = "playerhit";
      AudioPlayer.PUNCH = "punch";
      AudioPlayer.PUNCH1 = "punch1";
      AudioPlayer.PUNCH2 = "punch2";
      AudioPlayer.RAINDROP = "raindrop";
      AudioPlayer.RELOAD = "reload";
      AudioPlayer.SCARABCRAWL = "scarabcrawl";
      AudioPlayer.SELECT = "select";
      AudioPlayer.SELECT_FAIL = "selectfail";
      AudioPlayer.SENBON = "senbon";
      AudioPlayer.SHOOT = "shoot";
      AudioPlayer.SHOOT001 = "shoot001";
      AudioPlayer.SHOOT002 = "shoot002";
      AudioPlayer.SHOOT003 = "shoot003";
      AudioPlayer.SHOOT004 = "shoot004";
      AudioPlayer.SILENCE = "silence";
      AudioPlayer.SKILL_FIREBALL = "skillfireball";
      AudioPlayer.SKILL_ICETHRON = "skillicethron";
      AudioPlayer.SKILL_MAGICBALL = "skillmagicball";
      AudioPlayer.SKILL_MAGICBALL1 = "skillmagicball1";
      AudioPlayer.STICK_ATTACK = "stickattack";
      AudioPlayer.STICK_ATTACK1 = "stickattack1";
      AudioPlayer.STICK_ATTACK2 = "stickattack2";
      AudioPlayer.STICK_ATTACK3 = "stickattack3";
      AudioPlayer.SWIMMING = "swimming";
      AudioPlayer.SWORD_ATTACK = "swordattack";
      AudioPlayer.SWORD_ATTACK1 = "swordattack1";
      AudioPlayer.SWORD_ATTACK2 = "swordattack2";
      AudioPlayer.SWORD_HIT = "swordhit";
      AudioPlayer.SWORD_HIT1 = "swordhit1";
      AudioPlayer.SWORD_HIT2 = "swordhit2";
      AudioPlayer.SWORD_SHOW = "swordshow";
      AudioPlayer.SMOKE_BALL = "smokeball";
      AudioPlayer.TAKEPHOTO = "takephoto";
      AudioPlayer.TRANSPORTSHIP = "transportship";
      AudioPlayer.TRASH = "trash";
      AudioPlayer.TVCOLOR = "tvcolor";
      AudioPlayer.TVWHITE = "tvwhite";
      AudioPlayer.VOICE = "voice";
      AudioPlayer.WALK = "walk";
      AudioPlayer.WATERDISPENSER = "waterdispenser";
      AudioPlayer.WATERFALL = "waterfall";
      AudioPlayer.WELCOME = "welcome";
      AudioPlayer.WENTLINE_OPEN = "wentlineopen";
      AudioPlayer.WENTLINE_SHOW = "wentlineshow";
      AudioPlayer.ZOMBIE_ATTACK = "zombieattack";
      AudioPlayer.ZOMBIE_FALL = "zombiefall";
      AudioPlayer.ZOMBIE_SPITTING = "zombiespitting";
      AudioPlayer.ZOMBIE_SPITTING1 = "zombiespitting1";
      AudioPlayer.OPEN_CHEST = "openchest";
      AudioPlayer.SHURIKEN = "shuriken";
      AudioPlayer.STRIKEIRON = "strikeiron";
      AudioPlayer.STRIKEIRON1 = "strikeiron1";
      AudioPlayer.STOP_BG = "STOP_BG";
      AudioPlayer.PLAY_BG = "PLAY_BG";
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "select", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "selectfail", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "transportship", void 0);
      AudioPlayer = AudioPlayer_1 = __decorate([ ccclass ], AudioPlayer);
      return AudioPlayer;
    }(cc.Component);
    exports.default = AudioPlayer;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/LoadingManager": "LoadingManager"
  } ],
  AvatarData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78b51+ej+hHW50Cw1oQcuRl", "AvatarData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __rest = this && this.__rest || function(s, e) {
      var t = {};
      for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
      if (null != s && "function" === typeof Object.getOwnPropertySymbols) for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
      return t;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var ProfessionData_1 = require("./ProfessionData");
    var AvatarData = function(_super) {
      __extends(AvatarData, _super);
      function AvatarData() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.organizationIndex = 0;
        _this.professionData = new ProfessionData_1.default();
        _this.skinColor = "#ffe1c5";
        _this.hairResName = "avatarhair000";
        _this.hairColor = "#000000";
        _this.eyesResName = "avatareyes000";
        _this.eyesColor = "#000000";
        _this.faceResName = "avatarface000";
        _this.faceColor = "#FBA1DE";
        _this.petName = "nonplayer100";
        _this.isAnimFrame = false;
        _this.idleFrames = [ 0, 1 ];
        _this.walkFrames = [ 2, 5 ];
        _this.hitFrames = [ 6, 7 ];
        _this.dieFrames = [ 8 ];
        _this.attackFrames = [ 9, 10 ];
        _this.specialFrames = [ 11, 12 ];
        _this.disguiseFrames = [ 13 ];
        return _this;
      }
      AvatarData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data, true);
        this.professionData.valueCopy(data.professionData);
        this.copyArray(this.idleFrames, data.idleFrames);
        this.copyArray(this.walkFrames, data.walkFrames);
        this.copyArray(this.dieFrames, data.dieFrames);
        this.copyArray(this.disguiseFrames, data.disguiseFrames);
        this.copyArray(this.attackFrames, data.attackFrames);
        this.copyArray(this.specialFrames, data.specialFrames);
        this.copyArray(this.hitFrames, data.hitFrames);
      };
      AvatarData.prototype.copyArray = function(arr1, arr2) {
        arr2 && arr2.length > 0 && (arr1 = arr2);
      };
      AvatarData.prototype.clone = function() {
        var e = new AvatarData();
        e.valueCopy(this);
        return e;
      };
      AvatarData.prototype.toJSON = function() {
        var _a = this, idleFrames = _a.idleFrames, walkFrames = _a.walkFrames, hitFrames = _a.hitFrames, dieFrames = _a.dieFrames, attackFrames = _a.attackFrames, specialFrames = _a.specialFrames, disguiseFrames = _a.disguiseFrames, rest = __rest(_a, [ "idleFrames", "walkFrames", "hitFrames", "dieFrames", "attackFrames", "specialFrames", "disguiseFrames" ]);
        return rest;
      };
      AvatarData.FOLLOWER = 0;
      AvatarData.HUNTER = 1;
      AvatarData.GURAD = 2;
      AvatarData.TECH = 3;
      AvatarData.ORGANIZATION = [ "\u5f25\u4e16\u9010\u6d41", "\u5f02\u95fb\u730e\u624b", "\u5e7d\u5149\u5b88\u536b", "\u7fe0\u91d1\u79d1\u6280" ];
      return AvatarData;
    }(BaseData_1.default);
    exports.default = AvatarData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData",
    "./ProfessionData": "ProfessionData"
  } ],
  AvatarFileEditor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "13496SlULZHvYbjmvgIAWvC", "AvatarFileEditor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AttributeData_1 = require("../../data/AttributeData");
    var AvatarData_1 = require("../../data/AvatarData");
    var PlayerData_1 = require("../../data/PlayerData");
    var Logic_1 = require("../../logic/Logic");
    var InventoryManager_1 = require("../../manager/InventoryManager");
    var LoadingManager_1 = require("../../manager/LoadingManager");
    var AttributeSelector_1 = require("../../ui/AttributeSelector");
    var BrightnessBar_1 = require("../../ui/BrightnessBar");
    var ColorPicker_1 = require("../../ui/ColorPicker");
    var PaletteSelector_1 = require("../../ui/PaletteSelector");
    var Utils_1 = require("../../utils/Utils");
    var JsCallAndroid_1 = require("../utils/JsCallAndroid");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AvatarFileEditor = function(_super) {
      __extends(AvatarFileEditor, _super);
      function AvatarFileEditor() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.avatarTable = null;
        _this.randomButton = null;
        _this.colorPicker = null;
        _this.selectorPrefab = null;
        _this.attributeLayout = null;
        _this.editTitle = null;
        _this.labelName = null;
        _this.labelDesc = null;
        _this.labelSkillName = null;
        _this.labelSkillDesc = null;
        _this.cloakSprite = null;
        _this.shoesSprite1 = null;
        _this.shoesSprite2 = null;
        _this.helmetSprite = null;
        _this.pantsSprite = null;
        _this.clothesSprite = null;
        _this.glovesSprite1 = null;
        _this.glovesSprite2 = null;
        _this.weaponSprite = null;
        _this.remoteSprite = null;
        _this.shieldSprite = null;
        _this.petSprite = null;
        _this.data = new PlayerData_1.default();
        _this.randomTouched = false;
        _this.jsCallAndroid = new JsCallAndroid_1.default();
        _this.delayTime = 0;
        return _this;
      }
      AvatarFileEditor.prototype.onLoad = function() {
        var _this = this;
        this.jsCallAndroid.loadPlayers();
        this.data.valueCopy(Logic_1.default.currentEditPlayerData);
        this.petSprite = this.getSpriteChildSprite(this.avatarTable, [ "pet" ]);
        this.bodySprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "body" ]);
        this.handSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "handleft" ]);
        this.handSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "handright" ]);
        this.legSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "legleft" ]);
        this.legSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "legright" ]);
        this.headSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "head" ]);
        this.hairSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "head", "hair" ]);
        this.faceSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "head", "face" ]);
        this.eyesSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "head", "eyes" ]);
        this.helmetSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "head", "helmet" ]);
        this.pantsSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "body", "pants" ]);
        this.cloakSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "cloak" ]);
        this.weaponSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "weapon" ]);
        this.remoteSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "remote" ]);
        this.shieldSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "shield" ]);
        this.clothesSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "body", "clothes" ]);
        this.glovesSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "handleft", "gloves" ]);
        this.glovesSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "handright", "gloves" ]);
        this.shoesSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "legleft", "foot", "shoes" ]);
        this.shoesSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "sprite", "avatar", "legright", "foot", "shoes" ]);
        this.editTitle.string = this.data.name;
        this.randomButton.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.randomTouched = true;
        }, this);
        this.randomButton.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.randomTouched = false;
        }, this);
        this.randomButton.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.randomTouched = false;
        }, this);
        var organList = new Array();
        for (var i = 0; i < AvatarData_1.default.ORGANIZATION.length; i++) organList.push(new AttributeData_1.default(i, AvatarData_1.default.ORGANIZATION[i], "", "", "", ""));
        this.organizationSelector = this.addAttributeSelector("\u7ec4\u7ec7\uff1a", organList, 0, false, []);
        this.organizationSelector.selectorCallback = function(data, color) {
          _this.data.AvatarData.organizationIndex = data.id;
          _this.petSelector && (_this.petSelector.node.active = data.id == AvatarData_1.default.HUNTER);
          _this.petSprite.node.active = data.id == AvatarData_1.default.HUNTER;
        };
        var professionList = new Array();
        for (var i = 0; i < Logic_1.default.professionList.length; i++) {
          var data = Logic_1.default.professionList[i];
          var talent = Logic_1.default.talents[data.talent];
          professionList.push(new AttributeData_1.default(data.id, data.nameCn, data.id + "", data.desc, "\u6280\u80fd\uff1a" + talent.nameCn, "" + talent.desc));
        }
        this.professionSelector = this.addAttributeSelector("\u804c\u4e1a\uff1a", professionList, 0, false, []);
        this.professionSelector.selectorCallback = function(data, color) {
          _this.data.AvatarData.professionData.valueCopy(Logic_1.default.professionList[data.id]);
          _this.labelName.string = "" + data.name;
          _this.labelDesc.string = "" + data.desc;
          _this.labelSkillName.string = "" + data.name1;
          _this.labelSkillDesc.string = "" + data.desc1;
          _this.changeEquipment(Logic_1.default.professionList[data.id]);
        };
        this.skinSelector = this.addAttributeSelector("\u80a4\u8272", [ new AttributeData_1.default(0, "\u9ed8\u8ba4", "", "", "", ""), new AttributeData_1.default(1, "\u968f\u673a", "", "", "", "") ], 0, true, BrightnessBar_1.default.SKIN_COLORS);
        this.skinSelector.selectorCallback = function(data, color) {
          _this.changeSkinColor(color);
        };
        var hairList = [];
        for (var i = 0; i < 10; i++) hairList.push(new AttributeData_1.default(i, "\u6837\u5f0f" + i, "avatarhair" + Utils_1.default.getNumberStr3(i), "", "", ""));
        this.hairSelector = this.addAttributeSelector("\u53d1\u578b\uff1a", hairList, 0, true, PaletteSelector_1.default.HAIRCOLORS);
        this.hairSelector.selectorCallback = function(data, color) {
          _this.hairSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName + "anim0");
          _this.data.AvatarData.hairResName = data.resName;
          _this.hairSprite.node.color = color;
          _this.data.AvatarData.hairColor = color.toHEX("#rrggbb");
        };
        var eyesList = [];
        for (var i = 0; i < 22; i++) eyesList.push(new AttributeData_1.default(i, "\u6837\u5f0f" + i, "avatareyes" + Utils_1.default.getNumberStr3(i), "", "", ""));
        this.eyesSelector = this.addAttributeSelector("\u773c\u775b\uff1a", eyesList, 0, true, PaletteSelector_1.default.EYESCOLORS);
        this.eyesSelector.selectorCallback = function(data, color) {
          _this.eyesSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName + "anim0");
          _this.data.AvatarData.eyesResName = data.resName;
          _this.eyesSprite.getMaterial(0).setProperty("eyeColor", color);
          _this.data.AvatarData.eyesColor = color.toHEX("#rrggbb");
        };
        var faceList = [];
        for (var i = 0; i < 15; i++) faceList.push(new AttributeData_1.default(i, "\u6837\u5f0f" + i, "avatarface" + Utils_1.default.getNumberStr3(i), "", "", ""));
        this.faceSelector = this.addAttributeSelector("\u9762\u988a\uff1a", faceList, 0, true, PaletteSelector_1.default.FACECOLORS);
        this.faceSelector.selectorCallback = function(data, color) {
          _this.faceSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName + "anim0");
          _this.data.AvatarData.faceResName = data.resName;
          _this.faceSprite.node.color = color;
          _this.faceSprite.node.opacity = 128;
          _this.data.AvatarData.faceColor = color.toHEX("#rrggbb");
        };
        var petNames = [ "\u67ef\u57fa", "\u5bb6\u732b", "\u6a59\u5b50\u9c7c" ];
        var petList = [];
        for (var i = 0; i < petNames.length; i++) petList.push(new AttributeData_1.default(i, "" + petNames[i], "nonplayer1" + Utils_1.default.getNumberStr2(i), "", "", ""));
        this.petSelector = this.addAttributeSelector("\u5ba0\u7269\uff1a", petList, 0, false, []);
        this.petSelector.selectorCallback = function(data, color) {
          LoadingManager_1.default.loadNpcSpriteAtlas(data.resName, function() {
            _this.petSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName + "anim000");
          });
          _this.data.AvatarData.petName = "nonplayer1" + Utils_1.default.getNumberStr2(data.id);
        };
        this.petSelector.node.active = this.organizationSelector.CurrentData.id == AvatarData_1.default.HUNTER;
        this.petSprite.node.active = this.organizationSelector.CurrentData.id == AvatarData_1.default.HUNTER;
        this.selectTarget();
      };
      AvatarFileEditor.prototype.changeSkinColor = function(color) {
        this.bodySprite.node.color = color;
        this.headSprite.node.color = color;
        this.handSprite1.node.color = color;
        this.handSprite2.node.color = color;
        this.legSprite1.node.color = color;
        this.legSprite2.node.color = color;
        this.data.AvatarData.skinColor = color.toHEX("#rrggbb");
      };
      AvatarFileEditor.prototype.getSpriteChildSprite = function(node, childNames) {
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      AvatarFileEditor.prototype.addAttributeSelector = function(title, nameList, defaultIndex, colorPick, defaultColors) {
        var prefab = cc.instantiate(this.selectorPrefab);
        var script = prefab.getComponent(AttributeSelector_1.default);
        this.attributeLayout.addChild(prefab);
        script.init(title, nameList, defaultIndex, colorPick ? this.colorPicker : null, defaultColors);
        return script;
      };
      AvatarFileEditor.prototype.changeEquipment = function(data) {
        this.changeRes(this.helmetSprite, data.equips[InventoryManager_1.default.HELMET], "anim0");
        this.changeRes(this.pantsSprite, data.equips[InventoryManager_1.default.TROUSERS]);
        this.changeRes(this.cloakSprite, data.equips[InventoryManager_1.default.CLOAK]);
        this.changeRes(this.weaponSprite, data.equips[InventoryManager_1.default.WEAPON]);
        this.changeRes(this.remoteSprite, data.equips[InventoryManager_1.default.REMOTE], "anim0");
        this.changeRes(this.shieldSprite, data.equips[InventoryManager_1.default.SHIELD]);
        this.changeRes(this.clothesSprite, data.equips[InventoryManager_1.default.CLOTHES], "anim0");
        this.changeRes(this.glovesSprite1, data.equips[InventoryManager_1.default.GLOVES]);
        this.changeRes(this.glovesSprite2, data.equips[InventoryManager_1.default.GLOVES]);
        this.changeRes(this.shoesSprite1, data.equips[InventoryManager_1.default.SHOES]);
        this.changeRes(this.shoesSprite2, data.equips[InventoryManager_1.default.SHOES]);
        this.resetSpriteSize(this.weaponSprite);
        this.resetSpriteSize(this.remoteSprite);
        this.resetSpriteSize(this.shieldSprite);
      };
      AvatarFileEditor.prototype.changeRes = function(sprite, resName, subfix) {
        if (!sprite) return false;
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        subfix && Logic_1.default.spriteFrameRes(resName + subfix) && (spriteFrame = Logic_1.default.spriteFrameRes(resName + subfix));
        sprite.spriteFrame = spriteFrame || null;
      };
      AvatarFileEditor.prototype.resetSpriteSize = function(sprite) {
        if (sprite.spriteFrame) {
          sprite.node.width = sprite.spriteFrame.getOriginalSize().width;
          sprite.node.height = sprite.spriteFrame.getOriginalSize().height;
        }
      };
      AvatarFileEditor.prototype.update = function(dt) {
        if (this.isTimeDelay(dt) && this.randomTouched) {
          this.randomButton.angle = 0;
          cc.tween(this.randomButton).to(.2, {
            angle: 360
          }).start();
          this.ButtonRandom();
        }
      };
      AvatarFileEditor.prototype.isTimeDelay = function(dt) {
        this.delayTime += dt;
        if (this.delayTime > .2) {
          this.delayTime = 0;
          return true;
        }
        return false;
      };
      AvatarFileEditor.prototype.backToList = function() {
        cc.director.loadScene("avatarlist");
      };
      AvatarFileEditor.prototype.ButtonRandom = function() {
        this.organizationSelector.selectRandom();
        this.professionSelector.selectRandom();
        this.skinSelector.selectRandom(0 == this.skinSelector.currentIndex);
        this.hairSelector.selectRandom();
        this.eyesSelector.selectRandom();
        this.faceSelector.selectRandom();
        this.petSelector.selectRandom();
      };
      AvatarFileEditor.prototype.selectTarget = function() {
        this.organizationSelector.selectTarget(AvatarData_1.default.ORGANIZATION[this.data.AvatarData.organizationIndex]);
        this.professionSelector.selectTarget(this.data.AvatarData.professionData.id + "");
        this.skinSelector.selectTarget("", cc.Color.WHITE.fromHEX(this.data.AvatarData.skinColor));
        this.hairSelector.selectTarget(this.data.AvatarData.hairResName, cc.Color.WHITE.fromHEX(this.data.AvatarData.hairColor));
        this.eyesSelector.selectTarget(this.data.AvatarData.eyesResName, cc.Color.WHITE.fromHEX(this.data.AvatarData.eyesColor));
        this.faceSelector.selectTarget(this.data.AvatarData.faceResName, cc.Color.WHITE.fromHEX(this.data.AvatarData.faceColor));
        this.petSelector.selectTarget(this.data.AvatarData.petName);
      };
      AvatarFileEditor.prototype.saveData = function() {
        this.data.name = this.editTitle.string;
        this.jsCallAndroid.savePlayerDataById(this.data) && this.backToList();
      };
      __decorate([ property(cc.Node) ], AvatarFileEditor.prototype, "avatarTable", void 0);
      __decorate([ property(cc.Node) ], AvatarFileEditor.prototype, "randomButton", void 0);
      __decorate([ property(ColorPicker_1.default) ], AvatarFileEditor.prototype, "colorPicker", void 0);
      __decorate([ property(cc.Prefab) ], AvatarFileEditor.prototype, "selectorPrefab", void 0);
      __decorate([ property(cc.Node) ], AvatarFileEditor.prototype, "attributeLayout", void 0);
      __decorate([ property(cc.EditBox) ], AvatarFileEditor.prototype, "editTitle", void 0);
      __decorate([ property(cc.Label) ], AvatarFileEditor.prototype, "labelName", void 0);
      __decorate([ property(cc.Label) ], AvatarFileEditor.prototype, "labelDesc", void 0);
      __decorate([ property(cc.Label) ], AvatarFileEditor.prototype, "labelSkillName", void 0);
      __decorate([ property(cc.Label) ], AvatarFileEditor.prototype, "labelSkillDesc", void 0);
      AvatarFileEditor = __decorate([ ccclass ], AvatarFileEditor);
      return AvatarFileEditor;
    }(cc.Component);
    exports.default = AvatarFileEditor;
    cc._RF.pop();
  }, {
    "../../data/AttributeData": "AttributeData",
    "../../data/AvatarData": "AvatarData",
    "../../data/PlayerData": "PlayerData",
    "../../logic/Logic": "Logic",
    "../../manager/InventoryManager": "InventoryManager",
    "../../manager/LoadingManager": "LoadingManager",
    "../../ui/AttributeSelector": "AttributeSelector",
    "../../ui/BrightnessBar": "BrightnessBar",
    "../../ui/ColorPicker": "ColorPicker",
    "../../ui/PaletteSelector": "PaletteSelector",
    "../../utils/Utils": "Utils",
    "../utils/JsCallAndroid": "JsCallAndroid"
  } ],
  AvatarItemList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2123iTvXFAKbWxtGHB20mM", "AvatarItemList");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerData_1 = require("../../data/PlayerData");
    var Logic_1 = require("../../logic/Logic");
    var LoadingManager_1 = require("../../manager/LoadingManager");
    var AvatarItem_1 = require("./AvatarItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AvatarItemList = function(_super) {
      __extends(AvatarItemList, _super);
      function AvatarItemList() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.avatarPrefab = null;
        _this.content = null;
        _this.loadingManager = new LoadingManager_1.default();
        return _this;
      }
      AvatarItemList.prototype.onLoad = function() {
        this.content.removeAllChildren();
        this.loadingManager.init();
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_TEXTURES, "singleColor");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_EQUIPMENT, "emptyequipment");
        this.loadingManager.loadProfession();
        this.loadingManager.loadEquipment();
        this.loadingManager.loadTalents();
        this.loadingManager.loadItems();
        this.loadingManager.loadSuits();
        this.loadingManager.loadAffixs();
        this.loadingManager.loadPlayer();
      };
      AvatarItemList.prototype.update = function(dt) {
        if (this.loadingManager.isSpriteFramesLoaded(LoadingManager_1.default.KEY_TEXTURES) && this.loadingManager.isSpriteFramesLoaded(LoadingManager_1.default.KEY_EQUIPMENT) && this.loadingManager.isProfessionLoaded && this.loadingManager.isEquipmentLoaded && this.loadingManager.isSkillsLoaded && this.loadingManager.isItemsLoaded && this.loadingManager.isSuitsLoaded && this.loadingManager.isPlayerLoaded && this.loadingManager.isAffixsLoaded) {
          this.loadingManager.reset();
          this.show();
        }
      };
      AvatarItemList.prototype.show = function() {
        for (var key in Logic_1.default.players) AvatarItem_1.default.create(this.avatarPrefab, this.content, new PlayerData_1.default().valueCopy(Logic_1.default.players[key]));
      };
      __decorate([ property(cc.Prefab) ], AvatarItemList.prototype, "avatarPrefab", void 0);
      __decorate([ property(cc.Node) ], AvatarItemList.prototype, "content", void 0);
      AvatarItemList = __decorate([ ccclass ], AvatarItemList);
      return AvatarItemList;
    }(cc.Component);
    exports.default = AvatarItemList;
    cc._RF.pop();
  }, {
    "../../data/PlayerData": "PlayerData",
    "../../logic/Logic": "Logic",
    "../../manager/LoadingManager": "LoadingManager",
    "./AvatarItem": "AvatarItem"
  } ],
  AvatarItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4632a3QsppObbW5yBs5Qwnk", "AvatarItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerData_1 = require("../../data/PlayerData");
    var Logic_1 = require("../../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AvatarItem = function(_super) {
      __extends(AvatarItem, _super);
      function AvatarItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.cloakSprite = null;
        _this.legLeftSprite = null;
        _this.legRightSprite = null;
        _this.footLeftSprite = null;
        _this.footRightSprite = null;
        _this.shoesLeftSprite = null;
        _this.shoesRightSprite = null;
        _this.handLeftSprite = null;
        _this.glovesLeftSprite = null;
        _this.handRightSprite = null;
        _this.glovesRightSprite = null;
        _this.headSprite = null;
        _this.faceSprite = null;
        _this.eyesSprite = null;
        _this.hairSprite = null;
        _this.helmetSprite = null;
        _this.bodySprite = null;
        _this.pantsSprite = null;
        _this.clothesSprite = null;
        _this.petSprite = null;
        _this.isInit = false;
        _this.data = new PlayerData_1.default();
        return _this;
      }
      AvatarItem_1 = AvatarItem;
      AvatarItem.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          Logic_1.default.currentEditPlayerData.valueCopy(_this.data);
          cc.director.loadScene("avatareditor");
        });
      };
      AvatarItem.create = function(prefab, parent, data) {
        var avatar = cc.instantiate(prefab).getComponent(AvatarItem_1);
        avatar.node.parent = parent;
        avatar.node.zIndex = 0;
        avatar.init(data);
        return avatar;
      };
      AvatarItem.prototype.init = function(data) {
        if (this.isInit) return;
        this.isInit = true;
        this.data = new PlayerData_1.default();
        this.data.valueCopy(data);
        this.cloakSprite = this.getSpriteChildSprite([ "avatar", "sprite", "cloak" ]);
        this.legLeftSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "legleft" ]);
        this.legRightSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "legright" ]);
        this.footLeftSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "legleft", "foot" ]);
        this.footRightSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "legright", "foot" ]);
        this.shoesLeftSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "legleft", "foot", "shoes" ]);
        this.shoesRightSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "legright", "foot", "shoes" ]);
        this.handLeftSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "handleft" ]);
        this.handRightSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "handright" ]);
        this.glovesLeftSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "handleft", "gloves" ]);
        this.glovesRightSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "handright", "gloves" ]);
        this.headSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "head" ]);
        this.faceSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "head", "face" ]);
        this.eyesSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "head", "eyes" ]);
        this.hairSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "head", "hair" ]);
        this.helmetSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "head", "helmet" ]);
        this.bodySprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "body" ]);
        this.pantsSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "body", "pants" ]);
        this.clothesSprite = this.getSpriteChildSprite([ "avatar", "sprite", "avatar", "body", "clothes" ]);
        this.headSprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.skinColor);
        this.faceSprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.faceColor);
        this.faceSprite.node.opacity = 128;
        var eyeColor = cc.Color.WHITE.fromHEX(this.data.AvatarData.eyesColor);
        this.eyesSprite.getMaterial(0).setProperty("eyeColor", eyeColor);
        this.hairSprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.hairColor);
        this.bodySprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.skinColor);
        this.legLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.skinColor);
        this.legRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.skinColor);
        this.footLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.skinColor);
        this.footRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.skinColor);
        this.handLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.skinColor);
        this.handRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.AvatarData.skinColor);
        this.hairSprite.node.stopAllActions();
        this.updateSpriteFrameAnim(this.faceSprite, this.data.AvatarData.faceResName, 1);
        this.updateSpriteFrameAnim(this.hairSprite, this.data.AvatarData.hairResName, 2);
        this.updateSpriteFrameAnim(this.eyesSprite, this.data.AvatarData.eyesResName, 1);
        this.label.string = this.data.name;
      };
      AvatarItem.prototype.getSpriteChildSprite = function(childNames) {
        var node = this.node;
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      AvatarItem.prototype.updateSpriteFrameAnim = function(sprite, resName, animCount) {
        var resLength = animCount && 0 != animCount ? animCount : 1;
        sprite.unscheduleAllCallbacks();
        var index = 0;
        sprite.schedule(function() {
          var start = 0;
          sprite.spriteFrame = Logic_1.default.spriteFrameRes(resName + "anim" + (start + index++));
          index > resLength - 1 && (index = 0);
        }, .2, cc.macro.REPEAT_FOREVER, .1);
      };
      var AvatarItem_1;
      __decorate([ property(cc.Label) ], AvatarItem.prototype, "label", void 0);
      AvatarItem = AvatarItem_1 = __decorate([ ccclass ], AvatarItem);
      return AvatarItem;
    }(cc.Component);
    exports.default = AvatarItem;
    cc._RF.pop();
  }, {
    "../../data/PlayerData": "PlayerData",
    "../../logic/Logic": "Logic"
  } ],
  B3ActionsClsRegister: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "352f2uqQJhMupJcmXgQLeU6", "B3ActionsClsRegister");
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3ActionsCls = void 0;
    var B3Error_1 = require("../actions/B3Error");
    var B3Failer_1 = require("../actions/B3Failer");
    var B3Runner_1 = require("../actions/B3Runner");
    var B3Succeeder_1 = require("../actions/B3Succeeder");
    var B3Wait_1 = require("../actions/B3Wait");
    exports.B3ActionsCls = (_a = {}, _a["B3Error"] = B3Error_1.B3Error, _a["B3Failer"] = B3Failer_1.B3Failer, 
    _a["B3Runner"] = B3Runner_1.B3Runner, _a["B3Succeeder"] = B3Succeeder_1.B3Succeeder, 
    _a["B3Wait"] = B3Wait_1.B3Wait, _a);
    cc._RF.pop();
  }, {
    "../actions/B3Error": "B3Error",
    "../actions/B3Failer": "B3Failer",
    "../actions/B3Runner": "B3Runner",
    "../actions/B3Succeeder": "B3Succeeder",
    "../actions/B3Wait": "B3Wait"
  } ],
  B3Action: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1c1cCmPu1Me4asyZFrhWEL", "B3Action");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Action = void 0;
    var Constants_1 = require("../Constants");
    var B3BaseNode_1 = require("./B3BaseNode");
    var B3Action = function(_super) {
      __extends(B3Action, _super);
      function B3Action(d) {
        var _this = this;
        d.category = Constants_1.EnumCategory.ACTION;
        _this = _super.call(this, d) || this;
        return _this;
      }
      return B3Action;
    }(B3BaseNode_1.B3BaseNode);
    exports.B3Action = B3Action;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./B3BaseNode": "B3BaseNode"
  } ],
  B3BaseNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9ea58bs5w5ChZT5UOgOGuVf", "B3BaseNode");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3BaseNode = void 0;
    var Constants_1 = require("../Constants");
    var B3Utils_1 = require("../utils/B3Utils");
    var B3BaseNode = function() {
      function B3BaseNode(d) {
        this.id = d.id || B3Utils_1.createUUID();
        this.category = d.category || "";
        this.name = d.name || "";
        this.title = d.title || this.name;
        this.description = d.description || "";
        this.properties = d.properties || {};
        this.parameters = {};
        this._parseProp(this.properties);
      }
      B3BaseNode.prototype._parseProp = function(prop) {};
      B3BaseNode.prototype.execute = function(tick) {
        this._enter(tick);
        tick.blackboard.get("isOpen", tick.tree.id, this.id) || this._open(tick);
        var status = this._tick(tick);
        status !== Constants_1.EnumStatus.RUNNING && this._close(tick);
        this._exit(tick);
        return status;
      };
      B3BaseNode.prototype._enter = function(tick) {
        tick.enterNode(this);
        this.enter(tick);
      };
      B3BaseNode.prototype._open = function(tick) {
        tick.openNode(this);
        tick.blackboard.set("isOpen", true, tick.tree.id, this.id);
        this.open(tick);
      };
      B3BaseNode.prototype._tick = function(tick) {
        tick.tickNode(this);
        return this.tick(tick);
      };
      B3BaseNode.prototype._close = function(tick) {
        if (!tick.blackboard.get("isOpen", tick.tree.id, this.id)) return;
        tick.closeNode(this);
        tick.blackboard.set("isOpen", false, tick.tree.id, this.id);
        this.close(tick);
      };
      B3BaseNode.prototype._exit = function(tick) {
        tick.exitNode(this);
        this.exit(tick);
      };
      B3BaseNode.prototype.enter = function(tick) {};
      B3BaseNode.prototype.open = function(tick) {};
      B3BaseNode.prototype.close = function(tick) {};
      B3BaseNode.prototype.exit = function(tick) {};
      return B3BaseNode;
    }();
    exports.B3BaseNode = B3BaseNode;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../utils/B3Utils": "B3Utils"
  } ],
  B3BehaviorTreeGroup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2b1b4pdEmdNFJRky3UbovJd", "B3BehaviorTreeGroup");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3BehaviorTreeGroup = void 0;
    var B3BehaviorTree_1 = require("./B3BehaviorTree");
    var B3BehaviorTreeGroup = function() {
      function B3BehaviorTreeGroup() {}
      B3BehaviorTreeGroup.prototype.parse = function(project) {
        this._trees || (this._trees = {});
        var treeHash = {};
        for (var i = 0; i < project.trees.length; i++) treeHash[project.trees[i].id] = project.trees[i];
        for (var id in treeHash) {
          var tree = treeHash[id];
          this._paserTree(tree, treeHash);
          this._trees[tree.title] = tree;
        }
      };
      B3BehaviorTreeGroup.prototype.build = function(treeTitle, names) {
        var tree = this._trees[treeTitle];
        if (!tree) return null;
        var bTree = new B3BehaviorTree_1.B3BehaviorTree();
        bTree.load(tree, names);
        return bTree;
      };
      B3BehaviorTreeGroup.prototype._paserTree = function(tree, treeHash) {
        if (tree.pasered) {
          var nodes_1 = [];
          for (var nodeId in tree.nodes) {
            var node = tree.nodes[nodeId];
            nodes_1.push(node);
          }
          return nodes_1;
        }
        var nodes = [];
        for (var nodeId in tree.nodes) {
          var node = tree.nodes[nodeId];
          if (treeHash[node.name]) {
            var childTree = treeHash[node.name];
            var addNodes = this._paserTree(childTree, treeHash);
            nodes = nodes.concat(addNodes);
            node.name = "Sequence";
            node.children = [ childTree.root ];
          } else nodes.push(node);
        }
        for (var i = 0; i < nodes.length; i++) tree.nodes[nodes[i].id] = nodes[i];
        tree.pasered = true;
        return nodes;
      };
      return B3BehaviorTreeGroup;
    }();
    exports.B3BehaviorTreeGroup = B3BehaviorTreeGroup;
    cc._RF.pop();
  }, {
    "./B3BehaviorTree": "B3BehaviorTree"
  } ],
  B3BehaviorTree: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18d3atiViNI2IiuRVJno/ce", "B3BehaviorTree");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3BehaviorTree = void 0;
    var Constants_1 = require("../Constants");
    var B3ActionsClsRegister_1 = require("../register/B3ActionsClsRegister");
    var B3CompositesClsRegister_1 = require("../register/B3CompositesClsRegister");
    var B3CustomClsRegister_1 = require("../register/B3CustomClsRegister");
    var B3DecoratorsClsRegister_1 = require("../register/B3DecoratorsClsRegister");
    var B3Utils_1 = require("../utils/B3Utils");
    var B3Tick_1 = require("./B3Tick");
    var B3BehaviorTree = function() {
      function B3BehaviorTree(id) {
        this.id = id || B3Utils_1.createUUID();
        this.title = "The behavior tree";
        this.description = "Default description";
        this.properties = {};
        this.root = null;
        this.debug = null;
      }
      B3BehaviorTree.prototype.load = function(data, names) {
        names = names || {};
        this.id = data.id || this.id;
        this.title = data.title || this.title;
        this.description = data.description || this.description;
        this.properties = data.properties || this.properties;
        var nodes = {};
        var id, spec, node;
        for (id in data.nodes) {
          spec = data.nodes[id];
          var clsName = spec.name;
          clsName = "B3" + clsName;
          var Cls;
          if (B3CustomClsRegister_1.B3CustomClsRegister[spec.name]) Cls = B3CustomClsRegister_1.B3CustomClsRegister[spec.name]; else if (B3ActionsClsRegister_1.B3ActionsCls[clsName]) Cls = B3ActionsClsRegister_1.B3ActionsCls[clsName]; else if (B3CompositesClsRegister_1.B3CompositesCls[clsName]) Cls = B3CompositesClsRegister_1.B3CompositesCls[clsName]; else {
            if (!B3DecoratorsClsRegister_1.B3DecoratorsCls[clsName]) {
              console.error('BehaviorTree.load: Invalid node name + "' + spec.name + '".');
              continue;
            }
            Cls = B3DecoratorsClsRegister_1.B3DecoratorsCls[clsName];
          }
          node = new Cls(spec);
          nodes[id] = node;
        }
        for (id in data.nodes) {
          spec = data.nodes[id];
          node = nodes[id];
          if (node.category === Constants_1.EnumCategory.COMPOSITE && spec.children) for (var i = 0; i < spec.children.length; i++) {
            var cid = spec.children[i];
            node.children.push(nodes[cid]);
          } else node.category === Constants_1.EnumCategory.DECORATOR && spec.child && (node.child = nodes[spec.child]);
        }
        this.nodes = nodes;
        this.root = nodes[data.root];
      };
      B3BehaviorTree.prototype.dump = function() {
        var data = {};
        var customNames = [];
        data.title = this.title;
        data.description = this.description;
        data.root = this.root ? this.root.id : null;
        data.properties = this.properties;
        data.nodes = {};
        data.custom_nodes = [];
        if (!this.root) return data;
        var stack = [ this.root ];
        while (stack.length > 0) {
          var node = stack.pop();
          var spec = {};
          spec.id = node.id;
          spec.name = node.name;
          spec.title = node.title;
          spec.description = node.description;
          spec.properties = node.properties;
          spec.parameters = node.parameters;
          var proto = node.constructor && node.constructor.prototype;
          var nodeName = proto && proto.name || node.name;
          node.category != Constants_1.EnumCategory.ACTION;
          if (node.category != Constants_1.EnumCategory.ACTION && node.category != Constants_1.EnumCategory.COMPOSITE && node.category != Constants_1.EnumCategory.DECORATOR && customNames.indexOf(nodeName) < 0) {
            var subdata = {};
            subdata.name = nodeName;
            subdata.title = proto && proto.title || node.title;
            subdata.category = node.category;
            customNames.push(nodeName);
            data.custom_nodes.push(subdata);
          }
          if (node.category === Constants_1.EnumCategory.COMPOSITE) {
            var composite = node;
            if (composite.children) {
              var children = [];
              for (var i = composite.children.length - 1; i >= 0; i--) {
                children.push(composite.children[i].id);
                stack.push(composite.children[i]);
              }
              spec.children = children;
            }
          } else if (node.category === Constants_1.EnumCategory.DECORATOR && node.child) {
            stack.push(node.child);
            spec.child = node.child.id;
          }
          data.nodes[node.id] = spec;
        }
        return data;
      };
      B3BehaviorTree.prototype.tick = function(target, blackboard) {
        if (!blackboard) throw "The blackboard parameter is obligatory and must be an instance of B3Blackboard";
        var tick = new B3Tick_1.B3Tick();
        tick.debug = this.debug;
        tick.target = target;
        tick.blackboard = blackboard;
        tick.tree = this;
        var state = this.root.execute(tick);
        var lastOpenNodes = blackboard.get("openNodes", this.id);
        var currOpenNodes = tick.openNodes.slice(0);
        var start = 0;
        for (var i = 0, len = Math.min(lastOpenNodes.length, currOpenNodes.length); i < len; i++) {
          if (lastOpenNodes[i] !== currOpenNodes[i]) {
            start = i;
            break;
          }
          start = i + 1;
        }
        for (var i = lastOpenNodes.length - 1; i >= start; i--) {
          var node = this.nodes[lastOpenNodes[i]];
          node && node._close(tick);
        }
        blackboard.set("openNodes", currOpenNodes, this.id);
        blackboard.set("nodeCount", tick.nodeCount, this.id);
        return state;
      };
      return B3BehaviorTree;
    }();
    exports.B3BehaviorTree = B3BehaviorTree;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../register/B3ActionsClsRegister": "B3ActionsClsRegister",
    "../register/B3CompositesClsRegister": "B3CompositesClsRegister",
    "../register/B3CustomClsRegister": "B3CustomClsRegister",
    "../register/B3DecoratorsClsRegister": "B3DecoratorsClsRegister",
    "../utils/B3Utils": "B3Utils",
    "./B3Tick": "B3Tick"
  } ],
  B3Blackboard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7c27Y+PFtLkY2IBdTwpllg", "B3Blackboard");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Blackboard = void 0;
    var B3Blackboard = function() {
      function B3Blackboard() {
        this._baseMemory = {};
        this._treeMemory = {};
      }
      B3Blackboard.prototype._getTreeMemory = function(treeScope) {
        this._treeMemory[treeScope] || (this._treeMemory[treeScope] = {
          nodeMemory: {},
          openNodes: [],
          traversalDepth: 0,
          traversalCycle: 0
        });
        return this._treeMemory[treeScope];
      };
      B3Blackboard.prototype._getNodeMemory = function(treeMemory, nodeScope) {
        var memory = treeMemory.nodeMemory;
        memory[nodeScope] || (memory[nodeScope] = {});
        return memory[nodeScope];
      };
      B3Blackboard.prototype._getMemory = function(treeScope, nodeScope) {
        var memory = this._baseMemory;
        if (treeScope) {
          memory = this._getTreeMemory(treeScope);
          nodeScope && (memory = this._getNodeMemory(memory, nodeScope));
        }
        return memory;
      };
      B3Blackboard.prototype.set = function(key, value, treeScope, nodeScope) {
        var memory = this._getMemory(treeScope, nodeScope);
        memory[key] = value;
      };
      B3Blackboard.prototype.get = function(key, treeScope, nodeScope) {
        var memory = this._getMemory(treeScope, nodeScope);
        return memory[key];
      };
      B3Blackboard.prototype.getCache = function() {
        return {
          base: this._baseMemory,
          tree: this._treeMemory
        };
      };
      B3Blackboard.prototype.setCache = function(base, tree) {
        this._baseMemory = base;
        this._treeMemory = tree;
      };
      return B3Blackboard;
    }();
    exports.B3Blackboard = B3Blackboard;
    cc._RF.pop();
  }, {} ],
  B3CompositesClsRegister: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "91c6aLJ91JPHY46B3nzUZlV", "B3CompositesClsRegister");
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3CompositesCls = void 0;
    var B3MemPriority_1 = require("../composites/B3MemPriority");
    var B3MemSequence_1 = require("../composites/B3MemSequence");
    var B3Sequence_1 = require("../composites/B3Sequence");
    var B3Priority_1 = require("../composites/B3Priority");
    exports.B3CompositesCls = (_a = {}, _a["B3MemPriority"] = B3MemPriority_1.B3MemPriority, 
    _a["B3MemSequence"] = B3MemSequence_1.B3MemSequence, _a["B3Sequence"] = B3Sequence_1.B3Sequence, 
    _a["B3Priority"] = B3Priority_1.B3Priority, _a);
    cc._RF.pop();
  }, {
    "../composites/B3MemPriority": "B3MemPriority",
    "../composites/B3MemSequence": "B3MemSequence",
    "../composites/B3Priority": "B3Priority",
    "../composites/B3Sequence": "B3Sequence"
  } ],
  B3Composite: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b5ea63MDaBEK5soWfrRowhx", "B3Composite");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Composite = void 0;
    var Constants_1 = require("../Constants");
    var B3BaseNode_1 = require("./B3BaseNode");
    var B3Composite = function(_super) {
      __extends(B3Composite, _super);
      function B3Composite(d) {
        var _this = this;
        d.category = Constants_1.EnumCategory.COMPOSITE;
        _this = _super.call(this, d) || this;
        _this.children = [];
        return _this;
      }
      return B3Composite;
    }(B3BaseNode_1.B3BaseNode);
    exports.B3Composite = B3Composite;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./B3BaseNode": "B3BaseNode"
  } ],
  B3Condition: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "da5e9QBm8dLK6Sc1Z1LMwb3", "B3Condition");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Condition = void 0;
    var Constants_1 = require("../Constants");
    var B3BaseNode_1 = require("./B3BaseNode");
    var B3Condition = function(_super) {
      __extends(B3Condition, _super);
      function B3Condition(d) {
        var _this = this;
        d.category = Constants_1.EnumCategory.CONDITION;
        _this = _super.call(this, d) || this;
        return _this;
      }
      return B3Condition;
    }(B3BaseNode_1.B3BaseNode);
    exports.B3Condition = B3Condition;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./B3BaseNode": "B3BaseNode"
  } ],
  B3CustomClsRegister: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dc7a7KjzN5DZpgEOp9+zWQs", "B3CustomClsRegister");
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3CustomClsRegister = void 0;
    var CustomAction_1 = require("../custom/actions/CustomAction");
    var CustomAction_2 = require("../custom/actions/CustomAction");
    var DisCondition_1 = require("../custom/condtion/DisCondition");
    var TargetCondition_1 = require("../custom/condtion/TargetCondition");
    exports.B3CustomClsRegister = (_a = {}, _a["CustomAction"] = CustomAction_2.default, 
    _a["Log"] = CustomAction_1.default, _a["TargetCondition"] = TargetCondition_1.default, 
    _a["DisCondition"] = DisCondition_1.default, _a);
    cc._RF.pop();
  }, {
    "../custom/actions/CustomAction": "CustomAction",
    "../custom/condtion/DisCondition": "DisCondition",
    "../custom/condtion/TargetCondition": "TargetCondition"
  } ],
  B3DecoratorsClsRegister: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "20ad3onaV5IKbogDjJmt4r2", "B3DecoratorsClsRegister");
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3DecoratorsCls = void 0;
    var B3Inverter_1 = require("../decorators/B3Inverter");
    var B3Limiter_1 = require("../decorators/B3Limiter");
    var B3MaxTime_1 = require("../decorators/B3MaxTime");
    var B3Repeater_1 = require("../decorators/B3Repeater");
    var B3RepeatUntilFailure_1 = require("../decorators/B3RepeatUntilFailure");
    var B3RepeatUntilSuccess_1 = require("../decorators/B3RepeatUntilSuccess");
    exports.B3DecoratorsCls = (_a = {}, _a["B3Inverter"] = B3Inverter_1.B3Inverter, 
    _a["B3Limiter"] = B3Limiter_1.B3Limiter, _a["B3MaxTime"] = B3MaxTime_1.B3MaxTime, 
    _a["B3Repeater"] = B3Repeater_1.B3Repeater, _a["B3RepeatUntilFailure"] = B3RepeatUntilFailure_1.B3RepeatUntilFailure, 
    _a["B3RepeatUntilSuccess"] = B3RepeatUntilSuccess_1.B3RepeatUntilSuccess, _a);
    cc._RF.pop();
  }, {
    "../decorators/B3Inverter": "B3Inverter",
    "../decorators/B3Limiter": "B3Limiter",
    "../decorators/B3MaxTime": "B3MaxTime",
    "../decorators/B3RepeatUntilFailure": "B3RepeatUntilFailure",
    "../decorators/B3RepeatUntilSuccess": "B3RepeatUntilSuccess",
    "../decorators/B3Repeater": "B3Repeater"
  } ],
  B3Decorator: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eaa24ax83JCvozuBvRpp7zm", "B3Decorator");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Decorator = void 0;
    var Constants_1 = require("../Constants");
    var B3BaseNode_1 = require("./B3BaseNode");
    var B3Decorator = function(_super) {
      __extends(B3Decorator, _super);
      function B3Decorator(d) {
        var _this = this;
        d.category = Constants_1.EnumCategory.DECORATOR;
        _this = _super.call(this, d) || this;
        _this.child = d.child;
        return _this;
      }
      return B3Decorator;
    }(B3BaseNode_1.B3BaseNode);
    exports.B3Decorator = B3Decorator;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./B3BaseNode": "B3BaseNode"
  } ],
  B3Error: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a2b70MOcE1Gnpt1cjemZ2px", "B3Error");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Error = void 0;
    var B3Action_1 = require("../core/B3Action");
    var Constants_1 = require("../Constants");
    var B3Error = function(_super) {
      __extends(B3Error, _super);
      function B3Error(d) {
        return _super.call(this, d || {
          name: "Error"
        }) || this;
      }
      B3Error.prototype.tick = function(tick) {
        return Constants_1.EnumStatus.ERROR;
      };
      return B3Error;
    }(B3Action_1.B3Action);
    exports.B3Error = B3Error;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Action": "B3Action"
  } ],
  B3Failer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2874bKBC7NCt5sH5Q+TnxV7", "B3Failer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Failer = void 0;
    var Constants_1 = require("../Constants");
    var B3Action_1 = require("../core/B3Action");
    var B3Failer = function(_super) {
      __extends(B3Failer, _super);
      function B3Failer(d) {
        return _super.call(this, d || {
          name: "Failer"
        }) || this;
      }
      B3Failer.prototype.tick = function(tick) {
        return Constants_1.EnumStatus.FAILURE;
      };
      return B3Failer;
    }(B3Action_1.B3Action);
    exports.B3Failer = B3Failer;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Action": "B3Action"
  } ],
  B3INodeProperties: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6a68sI5qxJar0VG1n36YzC", "B3INodeProperties");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  B3Inverter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9972bidrxCdrH5oLLMn+UN", "B3Inverter");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Inverter = void 0;
    var Constants_1 = require("../Constants");
    var B3Decorator_1 = require("../core/B3Decorator");
    var B3Inverter = function(_super) {
      __extends(B3Inverter, _super);
      function B3Inverter(d) {
        var _this = this;
        d.name = "Inverter";
        _this = _super.call(this, d) || this;
        return _this;
      }
      B3Inverter.prototype.tick = function(tick) {
        if (!this.child) return Constants_1.EnumStatus.ERROR;
        var status = this.child.execute(tick);
        status == Constants_1.EnumStatus.SUCCESS ? status = Constants_1.EnumStatus.FAILURE : status == Constants_1.EnumStatus.FAILURE && (status = Constants_1.EnumStatus.SUCCESS);
        return status;
      };
      return B3Inverter;
    }(B3Decorator_1.B3Decorator);
    exports.B3Inverter = B3Inverter;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Decorator": "B3Decorator"
  } ],
  B3Limiter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb050dGqEBD5ZMbluh2CuOe", "B3Limiter");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Limiter = void 0;
    var Constants_1 = require("../Constants");
    var B3Decorator_1 = require("../core/B3Decorator");
    var B3Limiter = function(_super) {
      __extends(B3Limiter, _super);
      function B3Limiter(d) {
        return _super.call(this, d) || this;
      }
      B3Limiter.prototype._parseProp = function(d) {
        if (!d.maxLoop) throw "maxLoop parameter in Limiter decorator is an obligatory parameter";
        this.maxLoop = d.maxLoop || 1;
      };
      B3Limiter.prototype.open = function(tick) {
        tick.blackboard.set("i", 0, tick.tree.id, this.id);
      };
      B3Limiter.prototype.tick = function(tick) {
        if (!this.child) return Constants_1.EnumStatus.ERROR;
        var i = tick.blackboard.get("i", tick.tree.id, this.id);
        if (i < this.maxLoop) {
          var status = this.child.execute(tick);
          status != Constants_1.EnumStatus.SUCCESS && status != Constants_1.EnumStatus.FAILURE || tick.blackboard.set("i", i + 1, tick.tree.id, this.id);
          return status;
        }
        return Constants_1.EnumStatus.FAILURE;
      };
      return B3Limiter;
    }(B3Decorator_1.B3Decorator);
    exports.B3Limiter = B3Limiter;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Decorator": "B3Decorator"
  } ],
  B3MaxTime: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4d13fMEQvBARLJWoblZe4yK", "B3MaxTime");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3MaxTime = void 0;
    var Constants_1 = require("../Constants");
    var B3Decorator_1 = require("../core/B3Decorator");
    var B3MaxTime = function(_super) {
      __extends(B3MaxTime, _super);
      function B3MaxTime(d) {
        return _super.call(this, d) || this;
      }
      B3MaxTime.prototype._parseProp = function(d) {
        if (!d.maxTime) throw "maxTime parameter in MaxTime decorator is an obligatory parameter";
        this.maxTime = d.maxTime || 0;
      };
      B3MaxTime.prototype.open = function(tick) {
        var startTime = new Date().getTime();
        tick.blackboard.set("startTime", startTime, tick.tree.id, this.id);
      };
      B3MaxTime.prototype.tick = function(tick) {
        if (!this.child) return Constants_1.EnumStatus.ERROR;
        var currTime = new Date().getTime();
        var startTime = tick.blackboard.get("startTime", tick.tree.id, this.id);
        var status = this.child.execute(tick);
        if (currTime - startTime > this.maxTime) return Constants_1.EnumStatus.FAILURE;
        return status;
      };
      return B3MaxTime;
    }(B3Decorator_1.B3Decorator);
    exports.B3MaxTime = B3MaxTime;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Decorator": "B3Decorator"
  } ],
  B3MemPriority: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e85f8i/41FNlajkPZELiXLe", "B3MemPriority");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3MemPriority = void 0;
    var Constants_1 = require("../Constants");
    var B3Composite_1 = require("../core/B3Composite");
    var B3MemPriority = function(_super) {
      __extends(B3MemPriority, _super);
      function B3MemPriority(d) {
        var _this = this;
        d.name = "MemPriority";
        _this = _super.call(this, d) || this;
        return _this;
      }
      B3MemPriority.prototype.open = function(tick) {
        tick.blackboard.set("runningChild", 0, tick.tree.id, this.id);
      };
      B3MemPriority.prototype.tick = function(tick) {
        var child = tick.blackboard.get("runningChild", tick.tree.id, this.id);
        for (var i = child; i < this.children.length; i++) {
          var status = this.children[i].execute(tick);
          if (status !== Constants_1.EnumStatus.FAILURE) {
            status === Constants_1.EnumStatus.RUNNING && tick.blackboard.set("runningChild", i, tick.tree.id, this.id);
            return status;
          }
        }
        return Constants_1.EnumStatus.FAILURE;
      };
      return B3MemPriority;
    }(B3Composite_1.B3Composite);
    exports.B3MemPriority = B3MemPriority;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Composite": "B3Composite"
  } ],
  B3MemSequence: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "53589IaR/hLm7hcpnZCspDU", "B3MemSequence");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3MemSequence = void 0;
    var Constants_1 = require("../Constants");
    var B3Composite_1 = require("../core/B3Composite");
    var B3MemSequence = function(_super) {
      __extends(B3MemSequence, _super);
      function B3MemSequence(d) {
        var _this = this;
        d.name = "MemSequence";
        _this = _super.call(this, d) || this;
        return _this;
      }
      B3MemSequence.prototype.open = function(tick) {
        tick.blackboard.set("runningChild", 0, tick.tree.id, this.id);
      };
      B3MemSequence.prototype.tick = function(tick) {
        var child = tick.blackboard.get("runningChild", tick.tree.id, this.id);
        for (var i = child; i < this.children.length; i++) {
          var status = this.children[i].execute(tick);
          if (status !== Constants_1.EnumStatus.SUCCESS) {
            status === Constants_1.EnumStatus.RUNNING && tick.blackboard.set("runningChild", i, tick.tree.id, this.id);
            return status;
          }
        }
        return Constants_1.EnumStatus.SUCCESS;
      };
      return B3MemSequence;
    }(B3Composite_1.B3Composite);
    exports.B3MemSequence = B3MemSequence;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Composite": "B3Composite"
  } ],
  B3Priority: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d6436xPKBtIsoNOThmQn2sX", "B3Priority");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Priority = void 0;
    var Constants_1 = require("../Constants");
    var B3Composite_1 = require("../core/B3Composite");
    var B3Priority = function(_super) {
      __extends(B3Priority, _super);
      function B3Priority(d) {
        var _this = this;
        d.name = "Priority";
        _this = _super.call(this, d) || this;
        return _this;
      }
      B3Priority.prototype.tick = function(tick) {
        for (var i = 0; i < this.children.length; i++) {
          var status = this.children[i].execute(tick);
          if (status !== Constants_1.EnumStatus.FAILURE) return status;
        }
        return Constants_1.EnumStatus.FAILURE;
      };
      return B3Priority;
    }(B3Composite_1.B3Composite);
    exports.B3Priority = B3Priority;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Composite": "B3Composite"
  } ],
  B3RepeatUntilFailure: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5ac85cJdoFGS4ZCDfFiw/sB", "B3RepeatUntilFailure");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3RepeatUntilFailure = void 0;
    var Constants_1 = require("../Constants");
    var B3Decorator_1 = require("../core/B3Decorator");
    var B3RepeatUntilFailure = function(_super) {
      __extends(B3RepeatUntilFailure, _super);
      function B3RepeatUntilFailure(d) {
        return _super.call(this, d) || this;
      }
      B3RepeatUntilFailure.prototype._parseProp = function(d) {
        this.maxLoop = this.maxLoop || -1;
      };
      B3RepeatUntilFailure.prototype.open = function(tick) {
        tick.blackboard.set("i", 0, tick.tree.id, this.id);
      };
      B3RepeatUntilFailure.prototype.tick = function(tick) {
        if (!this.child) return Constants_1.EnumStatus.ERROR;
        var i = tick.blackboard.get("i", tick.tree.id, this.id);
        var status = Constants_1.EnumStatus.ERROR;
        while (this.maxLoop < 0 || i < this.maxLoop) {
          status = this.child.execute(tick);
          if (status != Constants_1.EnumStatus.SUCCESS) break;
          i++;
        }
        i = tick.blackboard.set("i", i, tick.tree.id, this.id);
        return status;
      };
      return B3RepeatUntilFailure;
    }(B3Decorator_1.B3Decorator);
    exports.B3RepeatUntilFailure = B3RepeatUntilFailure;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Decorator": "B3Decorator"
  } ],
  B3RepeatUntilSuccess: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c87c8i/SD1IHbeldhw8UcFP", "B3RepeatUntilSuccess");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3RepeatUntilSuccess = void 0;
    var Constants_1 = require("../Constants");
    var B3Decorator_1 = require("../core/B3Decorator");
    var B3RepeatUntilSuccess = function(_super) {
      __extends(B3RepeatUntilSuccess, _super);
      function B3RepeatUntilSuccess(d) {
        return _super.call(this, d) || this;
      }
      B3RepeatUntilSuccess.prototype._parseProp = function(d) {
        this.maxLoop = d.maxLoop || -1;
      };
      B3RepeatUntilSuccess.prototype.open = function(tick) {
        tick.blackboard.set("i", 0, tick.tree.id, this.id);
      };
      B3RepeatUntilSuccess.prototype.tick = function(tick) {
        if (!this.child) return Constants_1.EnumStatus.ERROR;
        var i = tick.blackboard.get("i", tick.tree.id, this.id);
        var status = Constants_1.EnumStatus.ERROR;
        while (this.maxLoop < 0 || i < this.maxLoop) {
          status = this.child.execute(tick);
          if (status != Constants_1.EnumStatus.FAILURE) break;
          i++;
        }
        i = tick.blackboard.set("i", i, tick.tree.id, this.id);
        return status;
      };
      return B3RepeatUntilSuccess;
    }(B3Decorator_1.B3Decorator);
    exports.B3RepeatUntilSuccess = B3RepeatUntilSuccess;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Decorator": "B3Decorator"
  } ],
  B3Repeater: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bf16bZrEi5JSYHzgGI2XFk7", "B3Repeater");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Repeater = void 0;
    var Constants_1 = require("../Constants");
    var B3Decorator_1 = require("../core/B3Decorator");
    var B3Repeater = function(_super) {
      __extends(B3Repeater, _super);
      function B3Repeater(d) {
        return _super.call(this, d) || this;
      }
      B3Repeater.prototype._parseProp = function(d) {
        this.maxLoop = d.maxLoop || -1;
      };
      B3Repeater.prototype.open = function(tick) {
        tick.blackboard.set("i", 0, tick.tree.id, this.id);
      };
      B3Repeater.prototype.tick = function(tick) {
        if (!this.child) return Constants_1.EnumStatus.ERROR;
        var i = tick.blackboard.get("i", tick.tree.id, this.id);
        var status = Constants_1.EnumStatus.SUCCESS;
        while (this.maxLoop < 0 || i < this.maxLoop) {
          status = this.child.execute(tick);
          if (status != Constants_1.EnumStatus.SUCCESS && status != Constants_1.EnumStatus.FAILURE) break;
          i++;
        }
        tick.blackboard.set("i", i, tick.tree.id, this.id);
        return status;
      };
      return B3Repeater;
    }(B3Decorator_1.B3Decorator);
    exports.B3Repeater = B3Repeater;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Decorator": "B3Decorator"
  } ],
  B3Runner: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "093cf0Zi9lB27MsxoZ4m1u3", "B3Runner");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Runner = void 0;
    var Constants_1 = require("../Constants");
    var B3Action_1 = require("../core/B3Action");
    var B3Runner = function(_super) {
      __extends(B3Runner, _super);
      function B3Runner(d) {
        return _super.call(this, d || {
          name: "Runner"
        }) || this;
      }
      B3Runner.prototype.tick = function(tick) {
        return Constants_1.EnumStatus.RUNNING;
      };
      return B3Runner;
    }(B3Action_1.B3Action);
    exports.B3Runner = B3Runner;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Action": "B3Action"
  } ],
  B3Sequence: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a39d73cw7xFR6SYcjWWcbVq", "B3Sequence");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Sequence = void 0;
    var Constants_1 = require("../Constants");
    var B3Composite_1 = require("../core/B3Composite");
    var B3Sequence = function(_super) {
      __extends(B3Sequence, _super);
      function B3Sequence(d) {
        var _this = this;
        d.name = "Sequence";
        _this = _super.call(this, d) || this;
        return _this;
      }
      B3Sequence.prototype.tick = function(tick) {
        for (var i = 0; i < this.children.length; i++) {
          var status = this.children[i].execute(tick);
          if (status !== Constants_1.EnumStatus.SUCCESS) return status;
        }
        return Constants_1.EnumStatus.SUCCESS;
      };
      return B3Sequence;
    }(B3Composite_1.B3Composite);
    exports.B3Sequence = B3Sequence;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Composite": "B3Composite"
  } ],
  B3Succeeder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9f771pBFQhDj5a8bjL+CU3q", "B3Succeeder");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Succeeder = void 0;
    var Constants_1 = require("../Constants");
    var B3Action_1 = require("../core/B3Action");
    var B3Succeeder = function(_super) {
      __extends(B3Succeeder, _super);
      function B3Succeeder(d) {
        return _super.call(this, d || {
          name: "Succeeder"
        }) || this;
      }
      B3Succeeder.prototype.tick = function(tick) {
        return Constants_1.EnumStatus.SUCCESS;
      };
      return B3Succeeder;
    }(B3Action_1.B3Action);
    exports.B3Succeeder = B3Succeeder;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Action": "B3Action"
  } ],
  B3Tick: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "155ffn0s3FHCJ1JNS9KU1mY", "B3Tick");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Tick = void 0;
    var B3Tick = function() {
      function B3Tick() {
        this.tree = null;
        this.debug = null;
        this.target = null;
        this.blackboard = null;
        this._openNodes = [];
        this._nodeCount = 0;
      }
      Object.defineProperty(B3Tick.prototype, "openNodes", {
        get: function() {
          return this._openNodes;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(B3Tick.prototype, "nodeCount", {
        get: function() {
          return this._nodeCount;
        },
        enumerable: false,
        configurable: true
      });
      B3Tick.prototype.enterNode = function(node) {
        this._nodeCount++;
        this._openNodes.push(node.id);
      };
      B3Tick.prototype.openNode = function(node) {};
      B3Tick.prototype.tickNode = function(node) {};
      B3Tick.prototype.closeNode = function(node) {
        this._openNodes.pop();
      };
      B3Tick.prototype.exitNode = function(node) {};
      return B3Tick;
    }();
    exports.B3Tick = B3Tick;
    cc._RF.pop();
  }, {} ],
  B3Utils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39f64v9SzZIYZ/64dh4rnJG", "B3Utils");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createUUID = void 0;
    function createUUID() {
      var s = [];
      var hexDigits = "0123456789abcdef";
      for (var i = 0; i < 36; i++) s[i] = hexDigits.substr(Math.floor(16 * Math.random()), 1);
      s[14] = "4";
      s[19] = hexDigits.substr(3 & s[19] | 8, 1);
      s[8] = s[13] = s[18] = s[23] = "-";
      var uuid = s.join("");
      return uuid;
    }
    exports.createUUID = createUUID;
    cc._RF.pop();
  }, {} ],
  B3Wait: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9122ZsbIVMVo01pCrrQpa7", "B3Wait");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.B3Wait = void 0;
    var Constants_1 = require("../Constants");
    var B3Action_1 = require("../core/B3Action");
    var B3Wait = function(_super) {
      __extends(B3Wait, _super);
      function B3Wait(d) {
        return _super.call(this, d) || this;
      }
      B3Wait.prototype._parseProp = function(d) {
        this.endTime = d.milliseconds || 0;
      };
      B3Wait.prototype.open = function(tick) {
        var startTime = new Date().getTime();
        tick.blackboard.set("startTime", startTime, tick.tree.id, this.id);
      };
      B3Wait.prototype.tick = function(tick) {
        var currTime = new Date().getTime();
        var startTime = tick.blackboard.get("startTime", tick.tree.id, this.id);
        if (currTime - startTime > this.endTime) return Constants_1.EnumStatus.SUCCESS;
        return Constants_1.EnumStatus.RUNNING;
      };
      return B3Wait;
    }(B3Action_1.B3Action);
    exports.B3Wait = B3Wait;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../core/B3Action": "B3Action"
  } ],
  BaseAvatar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6309a7dOXlNSYIFDbYrckXi", "BaseAvatar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseAvatar = function(_super) {
      __extends(BaseAvatar, _super);
      function BaseAvatar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.status = BaseAvatar_1.STATE_IDLE;
        _this.dir = BaseAvatar_1.DIR_RIGHT;
        _this.isAniming = false;
        _this.isInit = false;
        return _this;
      }
      BaseAvatar_1 = BaseAvatar;
      BaseAvatar.prototype.getSpriteChildSprite = function(childNames) {
        var node = this.node;
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      BaseAvatar.prototype.getSpriteChildNode = function(childNames) {
        var node = this.node;
        for (var _i = 0, childNames_2 = childNames; _i < childNames_2.length; _i++) {
          var name = childNames_2[_i];
          node = node.getChildByName(name);
        }
        return node;
      };
      var BaseAvatar_1;
      BaseAvatar.DIR_UP = 0;
      BaseAvatar.DIR_DOWN = 1;
      BaseAvatar.DIR_LEFT = 2;
      BaseAvatar.DIR_RIGHT = 3;
      BaseAvatar.STATE_IDLE = 0;
      BaseAvatar.STATE_WALK = 1;
      BaseAvatar.STATE_ATTACK = 2;
      BaseAvatar.STATE_FALL = 3;
      BaseAvatar.STATE_DIE = 4;
      BaseAvatar.STATE_JUMP_UP = 5;
      BaseAvatar.STATE_JUMP_DOWN = 6;
      BaseAvatar.STATE_AIRKICK = 7;
      BaseAvatar.STATE_HIT = 8;
      BaseAvatar.STATE_SPECIAL = 9;
      BaseAvatar.STATE_DISGUISE = 10;
      BaseAvatar.STATE_DASH = 11;
      BaseAvatar.STATE_DASH1 = 12;
      BaseAvatar = BaseAvatar_1 = __decorate([ ccclass ], BaseAvatar);
      return BaseAvatar;
    }(cc.Component);
    exports.default = BaseAvatar;
    cc._RF.pop();
  }, {} ],
  BaseColliderComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "902bcgBo5RK+aOrmHRVahv+", "BaseColliderComponent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ColliderComponent_1 = require("../ecs/component/ColliderComponent");
    var CCollider_1 = require("../collider/CCollider");
    var MoveComponent_1 = require("../ecs/component/MoveComponent");
    var NodeRenderComponent_1 = require("../ecs/component/NodeRenderComponent");
    var TransformComponent_1 = require("../ecs/component/TransformComponent");
    var ECS_1 = require("../ecs/ECS");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseColliderComponent = function(_super) {
      __extends(BaseColliderComponent, _super);
      function BaseColliderComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.entity = ECS_1.ecs.createEntityWithComps(NodeRenderComponent_1.NodeRenderComponent, MoveComponent_1.MoveComponent, TransformComponent_1.TransformComponent, ColliderComponent_1.ColliderComponent);
        return _this;
      }
      BaseColliderComponent.prototype.resetEntity = function() {
        this.entity = ECS_1.ecs.createEntityWithComps(NodeRenderComponent_1.NodeRenderComponent, MoveComponent_1.MoveComponent, TransformComponent_1.TransformComponent, ColliderComponent_1.ColliderComponent);
        this.initCollider();
        this.entity.NodeRender.node = this.node;
      };
      BaseColliderComponent.prototype.onLoad = function() {
        this.initCollider();
        this.entity.NodeRender.node = this.node;
      };
      BaseColliderComponent.prototype.initCollider = function() {
        this.ccolliders = [];
        var childColliders = this.getComponentsInChildren(CCollider_1.default);
        for (var _i = 0, childColliders_1 = childColliders; _i < childColliders_1.length; _i++) {
          var c = childColliders_1[_i];
          c.tag != CCollider_1.default.TAG.LIGHT && this.ccolliders.push(c);
        }
        if (this.ccolliders && this.ccolliders.length > 0) {
          this.entity.Collider.colliders = this.ccolliders;
          var groupId = CCollider_1.default.genNonDuplicateID();
          for (var _a = 0, _b = this.ccolliders; _a < _b.length; _a++) {
            var ccolider = _b[_a];
            ccolider.groupId = groupId;
            ccolider.setOnContactListener(this);
          }
        } else this.entity.remove(ColliderComponent_1.ColliderComponent);
      };
      BaseColliderComponent.prototype.setTargetTags = function() {
        var tags = [];
        for (var _i = 0; _i < arguments.length; _i++) tags[_i] = arguments[_i];
        for (var _a = 0, _b = this.ccolliders; _a < _b.length; _a++) {
          var ccolider = _b[_a];
          ccolider.setTargetTags(tags);
        }
      };
      BaseColliderComponent.prototype.setIgnoreTags = function() {
        var tags = [];
        for (var _i = 0; _i < arguments.length; _i++) tags[_i] = arguments[_i];
        for (var _a = 0, _b = this.ccolliders; _a < _b.length; _a++) {
          var ccolider = _b[_a];
          ccolider.setIgnoreTags(tags);
        }
      };
      BaseColliderComponent.prototype.destroyEntityNode = function() {
        this.entity.destroy();
        this.node.destroy();
      };
      BaseColliderComponent.prototype.onColliderEnter = function(other, self) {};
      BaseColliderComponent.prototype.onColliderStay = function(other, self) {};
      BaseColliderComponent.prototype.onColliderExit = function(other, self) {};
      BaseColliderComponent.prototype.onColliderPreSolve = function(other, self) {};
      BaseColliderComponent = __decorate([ ccclass ], BaseColliderComponent);
      return BaseColliderComponent;
    }(cc.Component);
    exports.default = BaseColliderComponent;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../ecs/ECS": "ECS",
    "../ecs/component/ColliderComponent": "ColliderComponent",
    "../ecs/component/MoveComponent": "MoveComponent",
    "../ecs/component/NodeRenderComponent": "NodeRenderComponent",
    "../ecs/component/TransformComponent": "TransformComponent"
  } ],
  BaseController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "acefalDOtJHMboT12hnonAT", "BaseController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseController = function(_super) {
      __extends(BaseController, _super);
      function BaseController() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Object.defineProperty(BaseController.prototype, "CanControl", {
        get: function() {
          return this.player && this.player.dungeon && this.player.sc.isShow;
        },
        enumerable: false,
        configurable: true
      });
      BaseController = __decorate([ ccclass ], BaseController);
      return BaseController;
    }(cc.Component);
    exports.default = BaseController;
    cc._RF.pop();
  }, {} ],
  BaseData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "104f7mgC6BFIYLmzL4FKFUV", "BaseData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Random_1 = require("../utils/Random");
    var BaseData = function() {
      function BaseData() {}
      BaseData.prototype.genNonDuplicateID = function() {
        return Number(Random_1.default.rand().toString().substring(3, 16) + Date.now()).toString(36);
      };
      return BaseData;
    }();
    exports.default = BaseData;
    cc._RF.pop();
  }, {
    "../utils/Random": "Random"
  } ],
  BaseDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5de11HhcHdDHbXLJONfG55W", "BaseDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseDialog = function(_super) {
      __extends(BaseDialog, _super);
      function BaseDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bg = null;
        _this.dialogBg = null;
        _this.cancelOutSide = true;
        _this._isAniming = false;
        return _this;
      }
      Object.defineProperty(BaseDialog.prototype, "isAniming", {
        get: function() {
          return this._isAniming;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseDialog.prototype, "isShow", {
        get: function() {
          return true == this.node.active;
        },
        enumerable: false,
        configurable: true
      });
      BaseDialog.prototype.onLoad = function() {
        var _this = this;
        this.bg = this.node.getChildByName("bg");
        this.dialogBg = this.node.getChildByName("dialogbg");
        this.bg.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.cancelOutSide && _this.dismiss();
        }, this);
      };
      BaseDialog.prototype.start = function() {};
      BaseDialog.prototype.setCanceledOnTouchOutside = function(flag) {
        this.cancelOutSide = flag;
      };
      BaseDialog.prototype.show = function() {
        var _this = this;
        if (this._isAniming) return;
        this._isAniming = true;
        this.node.active = true;
        this.node.opacity = 255;
        this.node.scale = 0;
        cc.tween(this.node).to(.1, {
          scale: .1
        }).to(.1, {
          scaleX: 1
        }).to(.1, {
          scaleY: 1
        }).call(function() {
          _this._isAniming = false;
        }).start();
      };
      BaseDialog.prototype.dismiss = function() {
        var _this = this;
        if (this._isAniming) return;
        this._isAniming = true;
        cc.tween(this.node).to(.1, {
          scaleY: .1
        }).to(.1, {
          scaleX: 0
        }).to(.1, {
          opacity: 0
        }).call(function() {
          _this.node.active = false;
          _this._isAniming = false;
          _this.dismissCallBack && _this.dismissCallBack();
        }).start();
      };
      BaseDialog.prototype.onDismissListener = function(callback) {
        this.dismissCallBack = callback;
      };
      BaseDialog = __decorate([ ccclass ], BaseDialog);
      return BaseDialog;
    }(cc.Component);
    exports.default = BaseDialog;
    cc._RF.pop();
  }, {} ],
  BaseManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0fb6uxoAJAR6KX1Qx/juNE", "BaseManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseManager = function(_super) {
      __extends(BaseManager, _super);
      function BaseManager() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BaseManager = __decorate([ ccclass ], BaseManager);
      return BaseManager;
    }(cc.Component);
    exports.default = BaseManager;
    cc._RF.pop();
  }, {} ],
  BaseNodeComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7dd4dWawVdLUrTa1D3zIh/7", "BaseNodeComponent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("../ecs/component/MoveComponent");
    var NodeRenderComponent_1 = require("../ecs/component/NodeRenderComponent");
    var TransformComponent_1 = require("../ecs/component/TransformComponent");
    var ECS_1 = require("../ecs/ECS");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseNodeComponent = function(_super) {
      __extends(BaseNodeComponent, _super);
      function BaseNodeComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.entity = ECS_1.ecs.createEntityWithComps(NodeRenderComponent_1.NodeRenderComponent, MoveComponent_1.MoveComponent, TransformComponent_1.TransformComponent);
        return _this;
      }
      BaseNodeComponent.prototype.resetEntity = function() {
        this.entity = ECS_1.ecs.createEntityWithComps(NodeRenderComponent_1.NodeRenderComponent, MoveComponent_1.MoveComponent, TransformComponent_1.TransformComponent);
        this.entity.NodeRender.node = this.node;
      };
      BaseNodeComponent.prototype.onLoad = function() {
        this.entity.NodeRender.node = this.node;
      };
      BaseNodeComponent.prototype.destroyEntityNode = function() {
        this.entity.destroy();
        this.node.destroy();
      };
      BaseNodeComponent = __decorate([ ccclass ], BaseNodeComponent);
      return BaseNodeComponent;
    }(cc.Component);
    exports.default = BaseNodeComponent;
    cc._RF.pop();
  }, {
    "../ecs/ECS": "ECS",
    "../ecs/component/MoveComponent": "MoveComponent",
    "../ecs/component/NodeRenderComponent": "NodeRenderComponent",
    "../ecs/component/TransformComponent": "TransformComponent"
  } ],
  BaseNonPlayerActorState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "920bbZwmdhLNqox7T/WQBj5", "BaseNonPlayerActorState");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Utils_1 = require("../utils/Utils");
    var BaseNonPlayerActorState = function() {
      function BaseNonPlayerActorState(name) {
        this._isRunnig = false;
        this._Name = "";
        this.showLog = true;
        this._Name = name;
      }
      Object.defineProperty(BaseNonPlayerActorState.prototype, "isRunnig", {
        get: function() {
          return this._isRunnig;
        },
        enumerable: false,
        configurable: true
      });
      BaseNonPlayerActorState.prototype.enter = function(entity) {
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(" + this._Name + "):enter");
        this._isRunnig = true;
      };
      BaseNonPlayerActorState.prototype.update = function(entity) {};
      BaseNonPlayerActorState.prototype.exit = function(entity) {
        this._isRunnig = false;
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(" + this._Name + "):exit");
      };
      BaseNonPlayerActorState.prototype.event = function(entity, event) {
        this._isRunnig = true;
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(" + this._Name + "):event");
        return true;
      };
      BaseNonPlayerActorState.prototype.log = function(msg) {
        this.showLog && cc.log(msg);
      };
      return BaseNonPlayerActorState;
    }();
    exports.default = BaseNonPlayerActorState;
    cc._RF.pop();
  }, {
    "../utils/Utils": "Utils"
  } ],
  BasePlayerActorState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a7a0276chJQYpA/8MgdXmI", "BasePlayerActorState");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Utils_1 = require("../utils/Utils");
    var BasePlayerActorState = function() {
      function BasePlayerActorState(name) {
        this._isRunnig = false;
        this._Name = "";
        this.showLog = true;
        this._Name = name;
      }
      Object.defineProperty(BasePlayerActorState.prototype, "isRunnig", {
        get: function() {
          return this._isRunnig;
        },
        enumerable: false,
        configurable: true
      });
      BasePlayerActorState.prototype.enter = function(entity) {
        this._isRunnig = true;
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(" + this._Name + "):enter");
      };
      BasePlayerActorState.prototype.update = function(entity) {};
      BasePlayerActorState.prototype.exit = function(entity) {
        this._isRunnig = false;
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(" + this._Name + "):exit");
      };
      BasePlayerActorState.prototype.event = function(entity, event) {
        this._isRunnig = true;
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(" + this._Name + "):event");
        return true;
      };
      BasePlayerActorState.prototype.log = function(msg) {
        this.showLog && cc.log(msg);
      };
      return BasePlayerActorState;
    }();
    exports.default = BasePlayerActorState;
    cc._RF.pop();
  }, {
    "../utils/Utils": "Utils"
  } ],
  BlockLight: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "200a5VPMNZOQ7QKn+qhQpb0", "BlockLight");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BlockLight = function(_super) {
      __extends(BlockLight, _super);
      function BlockLight() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BlockLight.prototype.show = function() {
        var _this = this;
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play();
        this.scheduleOnce(function() {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.POOL_DESTORY_BLOCKLIGHT, {
            targetNode: _this.node
          });
        }, .5);
      };
      BlockLight = __decorate([ ccclass ], BlockLight);
      return BlockLight;
    }(cc.Component);
    exports.default = BlockLight;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper"
  } ],
  BossAttackCollider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "955f3FE6OVI9rSVX2x0s/2h", "BossAttackCollider");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var FromData_1 = require("../data/FromData");
    var Actor_1 = require("../base/Actor");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BossAttackCollider = function(_super) {
      __extends(BossAttackCollider, _super);
      function BossAttackCollider() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.damage = 9;
        _this.parentNode = null;
        _this.from = new FromData_1.default();
        _this.isShow = false;
        return _this;
      }
      BossAttackCollider.prototype.onLoad = function() {
        this.collider = this.getComponent(CCollider_1.default);
      };
      BossAttackCollider.prototype.start = function() {
        this.isShow = false;
      };
      BossAttackCollider.prototype.showCollider = function(coolingTime, delayTime) {
        var _this = this;
        var delay = delayTime || 0;
        this.scheduleOnce(function() {
          _this.isShow = true;
        }, delay);
        this.scheduleOnce(function() {
          _this.isShow = false;
        }, coolingTime);
      };
      BossAttackCollider.prototype.onColliderEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isShow && this.node.active && this.parentNode) {
          this.isShow = false;
          var dd = new DamageData_1.default();
          dd.physicalDamage = this.damage;
          target.takeDamage(dd, this.from, this.parentNode.getComponent(Actor_1.default));
        }
      };
      __decorate([ property ], BossAttackCollider.prototype, "damage", void 0);
      __decorate([ property(cc.Node) ], BossAttackCollider.prototype, "parentNode", void 0);
      BossAttackCollider = __decorate([ ccclass ], BossAttackCollider);
      return BossAttackCollider;
    }(cc.Component);
    exports.default = BossAttackCollider;
    cc._RF.pop();
  }, {
    "../base/Actor": "Actor",
    "../collider/CCollider": "CCollider",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../utils/ActorUtils": "ActorUtils"
  } ],
  Boss: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27ef0INO8BDnrQF5OkIl5aV", "Boss");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var Dungeon_1 = require("../logic/Dungeon");
    var StatusManager_1 = require("../manager/StatusManager");
    var EventHelper_1 = require("../logic/EventHelper");
    var Actor_1 = require("../base/Actor");
    var Item_1 = require("../item/Item");
    var IndexZ_1 = require("../utils/IndexZ");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var MapManager_1 = require("../manager/MapManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Boss = function(_super) {
      __extends(Boss, _super);
      function Boss() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.statusManager = null;
        _this.healthBar = null;
        _this.pos = cc.v3(0, 0);
        _this.defaultPos = cc.v3(0, 0);
        _this.data = new NonPlayerData_1.default();
        return _this;
      }
      Boss.prototype.addStatus = function(statusType, from) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager && this.statusManager.addStatus(statusType, from);
      };
      Boss.prototype.updateData = function() {
        this.data.updateFinalCommon();
      };
      Boss.prototype.getNearPlayerDistance = function(playerNode, offset) {
        var p = this.node.position.clone();
        offset && p.addSelf(offset);
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, playerNode.position);
        return dis;
      };
      Boss.prototype.getCenterPosition = function() {
        return this.node.position.clone().addSelf(cc.v3(0, 32 * this.node.scaleY));
      };
      Boss.prototype.playHit = function(sprite) {
        if (sprite) {
          sprite.stopAllActions();
          sprite.position = cc.v3(0, 0);
          cc.tween(sprite).to(.1, {
            position: cc.v3(2, 0)
          }).to(.1, {
            position: cc.v3(-2, 0)
          }).to(.1, {
            position: cc.v3(2, 0)
          }).to(.1, {
            position: cc.v3(-2, 0)
          }).to(.1, {
            position: cc.v3(2, 0)
          }).to(.1, {
            position: cc.v3(-2, 0)
          }).to(.1, {
            position: cc.v3(2, 0)
          }).to(.1, {
            position: cc.v3(0, 0)
          }).start();
        }
      };
      Boss.prototype.updatePlayerPos = function() {
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(this.pos);
        this.node.position = this.entity.Transform.position.clone();
      };
      Boss.prototype.transportBoss = function(x, y) {
        this.pos.x = x;
        this.pos.y = y;
        this.changeZIndex();
        this.updatePlayerPos();
      };
      Boss.prototype.changeZIndex = function() {
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      Boss.prototype.start = function() {
        var _this = this;
        this.changeZIndex();
        this.scheduleOnce(function() {
          _this.healthBar && _this.healthBar.refreshHealth(_this.data.currentHealth, _this.data.Common.MaxHealth);
        }, .1);
      };
      Boss.prototype.getLoot = function(isSteal) {
        if (this.dungeon) {
          var rand4save = Logic_1.default.mapManager.getRandom4Save(this.seed, MapManager_1.default.RANDOM_BOSS);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
            pos: this.node.position,
            count: isSteal ? 9 : 19
          });
          isSteal || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, {
            pos: this.node.position,
            count: 100
          });
          var chance = Logic_1.default.getHalfChance() && isSteal || !isSteal;
          if (chance) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              res: Item_1.default.HEART
            });
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              res: Item_1.default.DREAM
            });
          }
          this.dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), null, null, isSteal ? 0 : EquipmentManager_1.default.QUALITY_ORANGE);
        }
      };
      Boss.prototype.showBoss = function() {};
      Boss.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.actor = this;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle);
      };
      Boss.prototype.takeDizz = function(dizzDuration) {};
      Boss.prototype.updateStatus = function(statusList, totalStatusData) {
        this.data.StatusTotalData.valueCopy(totalStatusData);
        this.updateData();
      };
      Boss.prototype.hideSelf = function(hideDuration) {};
      Boss.prototype.updateDream = function(offset) {
        return 0;
      };
      Boss.prototype.updateLife = function(sanity, solid, liquid) {};
      Boss.prototype.setLinearVelocity = function(movement) {};
      __decorate([ property(StatusManager_1.default) ], Boss.prototype, "statusManager", void 0);
      Boss = __decorate([ ccclass ], Boss);
      return Boss;
    }(Actor_1.default);
    exports.default = Boss;
    cc._RF.pop();
  }, {
    "../base/Actor": "Actor",
    "../data/NonPlayerData": "NonPlayerData",
    "../item/Item": "Item",
    "../logic/Dungeon": "Dungeon",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/EquipmentManager": "EquipmentManager",
    "../manager/MapManager": "MapManager",
    "../manager/StatusManager": "StatusManager",
    "../utils/IndexZ": "IndexZ"
  } ],
  Box: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84b7dB47rlIALRzq2ZvOGc3", "Box");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var Building_1 = require("./Building");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Box = function(_super) {
      __extends(Box, _super);
      function Box() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isBreaking = false;
        _this.boxType = 0;
        return _this;
      }
      Box_1 = Box;
      Box.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.anim.play("BoxShow");
      };
      Box.prototype.start = function() {
        var resName = "box";
        switch (this.boxType) {
         case Box_1.BOX:
          resName = "box";
          break;

         case Box_1.PLANT:
          resName = "plant";
          break;

         case Box_1.BOXBREAKABLE:
          resName = "box";
        }
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          this.changeRes(resName + "000");
          break;

         case Logic_1.default.CHAPTER01:
          this.changeRes(resName + "001");
          break;

         case Logic_1.default.CHAPTER02:
          this.changeRes(resName + "002");
          break;

         case Logic_1.default.CHAPTER03:
          this.changeRes(resName + "003");
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          this.changeRes(resName + "004");
          break;

         case Logic_1.default.CHAPTER099:
          this.changeRes(resName + "000");
        }
      };
      Box.prototype.changeRes = function(resName) {
        var sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        sprite.spriteFrame = spriteFrame;
      };
      Box.prototype.setDefaultPos = function(defaultPos) {
        this.data.defaultPos = defaultPos;
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(defaultPos);
        this.node.position = this.entity.Transform.position.clone();
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.entity.Transform.position);
      };
      Box.prototype.BreakingFinish = function() {
        this.reset();
      };
      Box.prototype.breakBox = function() {
        if (this.isBreaking) return;
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("BoxBroken");
        this.isBreaking = true;
      };
      Box.prototype.reset = function() {
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(this.data.defaultPos);
        this.node.position = this.entity.Transform.position.clone();
        this.isBreaking = false;
      };
      Box.prototype.update = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .2) {
          this.data.position = this.entity.Transform.position;
          var saveBox = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
          saveBox && (saveBox.position = this.data.position);
          this.node.zIndex = IndexZ_1.default.getActorZIndex(this.entity.Transform.position);
        }
      };
      var Box_1;
      Box.BOX = 0;
      Box.PLANT = 1;
      Box.BOXBREAKABLE = 2;
      Box = Box_1 = __decorate([ ccclass ], Box);
      return Box;
    }(Building_1.default);
    exports.default = Box;
    cc._RF.pop();
  }, {
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  BrightnessBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd2d8XSihFHJ5/ASmPsHcdm", "BrightnessBar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BrightnessBar = function(_super) {
      __extends(BrightnessBar, _super);
      function BrightnessBar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.slider = null;
        return _this;
      }
      BrightnessBar_1 = BrightnessBar;
      BrightnessBar.prototype.onLoad = function() {};
      BrightnessBar.prototype.init = function() {};
      BrightnessBar.prototype.setSelectorCallback = function(callback) {
        this.selectorCallback = callback;
        this.updateAttribute();
      };
      BrightnessBar.prototype.selectRandom = function() {
        this.slider.progress = Logic_1.default.getRandomNum(0, 10) / 10;
        this.updateAttribute();
      };
      BrightnessBar.prototype.updateAttribute = function() {
        if (this.selectorCallback) {
          var colors = BrightnessBar_1.SKIN_COLORS;
          var num = Math.floor(10 * this.slider.progress);
          this.selectorCallback(cc.Color.WHITE.fromHEX(colors[num]));
        }
      };
      var BrightnessBar_1;
      BrightnessBar.SKIN = 0;
      BrightnessBar.SKIN_COLORS = [ "#ffe8d2", "#ffe1c5", "#ebcaac", "#e0c1a4", "#ccad8f", "#ad9075", "#997E5B", "#664e38", "#473524", "#291404", "#1f1711" ];
      __decorate([ property(cc.Slider) ], BrightnessBar.prototype, "slider", void 0);
      BrightnessBar = BrightnessBar_1 = __decorate([ ccclass ], BrightnessBar);
      return BrightnessBar;
    }(cc.Component);
    exports.default = BrightnessBar;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic"
  } ],
  BuildingData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78dc5pt0FFGDaglLh5AJv4K", "BuildingData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var EquipmentData_1 = require("./EquipmentData");
    var InventoryData_1 = require("./InventoryData");
    var ItemData_1 = require("./ItemData");
    var BuildingData = function() {
      function BuildingData() {
        this.triggerCount = 0;
        this.quality = 0;
        this.price = 0;
        this.shopType = 0;
        this.isSaled = false;
        this.maxHealth = 1;
        this.currentHealth = 1;
        this.generatorList = [];
        this.generatorCount = 0;
        this.generatorInterval = 0;
        this.breakEquipItems = "";
        this.interact = 0;
        this.rollover = 0;
        this.nameCn = "";
        this.nameEn = "";
        this.id = "";
        this.resName = "";
        this.scale = 1;
        this.collider = "";
        this.spritePos = "";
        this.z = 0;
        this.breakZ = 0;
        this.indexZ = 0;
        this.custom = false;
        this.info = "";
        this.desc = "";
        this.purchased = false;
        this.storageList = [];
        this.storage = 0;
      }
      BuildingData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data, true);
        this.defaultPos = data.defaultPos ? cc.v3(data.defaultPos.x, data.defaultPos.y) : cc.v3(0, 0);
        this.position = data.position ? cc.v3(data.position.x, data.position.y) : cc.v3(0, 0);
        if (data.equipdata) {
          this.equipdata = new EquipmentData_1.default();
          this.equipdata.valueCopy(data.equipdata);
        }
        if (data.itemdata) {
          this.itemdata = new ItemData_1.default();
          this.itemdata.valueCopy(data.itemdata);
        }
        this.generatorList = [];
        data.generatorList && (this.generatorList = data.generatorList);
        this.scale = data.scale ? data.scale : 1;
        this.storage > 32 && (this.storage = 32);
        if (data.storageList && data.storage > 0) {
          this.storageList = [];
          for (var _i = 0, _a = data.storageList; _i < _a.length; _i++) {
            var idata = _a[_i];
            var ida = new InventoryData_1.default();
            ida.valueCopy(idata);
            this.storageList.push(ida);
          }
        }
      };
      BuildingData.prototype.clone = function() {
        var data = new BuildingData();
        data.valueCopy(this);
        return data;
      };
      return BuildingData;
    }();
    exports.default = BuildingData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./EquipmentData": "EquipmentData",
    "./InventoryData": "InventoryData",
    "./ItemData": "ItemData"
  } ],
  BuildingManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac92cjzIYlNDKOIneo1Pkvl", "BuildingManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var FootBoard_1 = require("../building/FootBoard");
    var IndexZ_1 = require("../utils/IndexZ");
    var Saw_1 = require("../building/Saw");
    var Emplacement_1 = require("../building/Emplacement");
    var DecorationFloor_1 = require("../building/DecorationFloor");
    var Chest_1 = require("../building/Chest");
    var Box_1 = require("../building/Box");
    var ShopTable_1 = require("../building/ShopTable");
    var FallStone_1 = require("../building/FallStone");
    var MagicLightening_1 = require("../building/MagicLightening");
    var ExitDoor_1 = require("../building/ExitDoor");
    var Door_1 = require("../building/Door");
    var Wall_1 = require("../building/Wall");
    var AirExit_1 = require("../building/AirExit");
    var Portal_1 = require("../building/Portal");
    var RoomBed_1 = require("../building/RoomBed");
    var Building_1 = require("../building/Building");
    var ExitData_1 = require("../data/ExitData");
    var BaseManager_1 = require("./BaseManager");
    var DryadGrass_1 = require("../boss/DryadGrass");
    var Utils_1 = require("../utils/Utils");
    var ShadowOfSight_1 = require("../effect/ShadowOfSight");
    var LightManager_1 = require("./LightManager");
    var SavePoint_1 = require("../building/SavePoint");
    var MartShelves_1 = require("../building/MartShelves");
    var NonPlayerManager_1 = require("./NonPlayerManager");
    var MonsterManager_1 = require("./MonsterManager");
    var MgWentLine_1 = require("../building/MgWentLine");
    var RoomStool_1 = require("../building/RoomStool");
    var MgCrack_1 = require("../building/MgCrack");
    var InteractBuilding_1 = require("../building/InteractBuilding");
    var EnergyShield_1 = require("../building/EnergyShield");
    var EquipmentManager_1 = require("./EquipmentManager");
    var Furniture_1 = require("../building/Furniture");
    var RoomFishtank_1 = require("../building/RoomFishtank");
    var CCollider_1 = require("../collider/CCollider");
    var WallPaint_1 = require("../building/WallPaint");
    var RoomKitchen_1 = require("../building/RoomKitchen");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var BuildingData_1 = require("../data/BuildingData");
    var InventoryManager_1 = require("./InventoryManager");
    var NormalBuilding_1 = require("../building/NormalBuilding");
    var Stairs_1 = require("../building/Stairs");
    var DecorationWall_1 = require("../building/DecorationWall");
    var Ladder_1 = require("../building/Ladder");
    var MapManager_1 = require("./MapManager");
    var Vehicle_1 = require("../building/Vehicle");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BuildingManager = function(_super) {
      __extends(BuildingManager, _super);
      function BuildingManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.footboards = new Array();
        _this.exitdoors = new Array();
        _this.portals = new Array();
        _this.doors = new Array();
        _this.airExits = new Array();
        _this.monsterGeneratorList = new Array();
        _this.colliderCombineMap = new Map();
        _this.emptyMap = new Map();
        _this.coastColliderList = [ "128,128,0,0", "128,128,0,0", "128,128,0,0", "128,128,0,0", "128,64,0,-32", "128,64,0,32", "64,128,32,0", "64,128,-32,0", "64,64,-32,32", "64,64,32,32", "64,64,-32,-32", "64,64,32,-32" ];
        _this.shelvesFoodIndex = 0;
        _this.shelvesDrinkIndex = 0;
        _this.drinkList = [];
        _this.foodList = [];
        _this.interactBuildings = [];
        _this.buildingList = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      BuildingManager_1 = BuildingManager;
      BuildingManager.prototype.clear = function() {
        Utils_1.default.clearComponentArray(this.footboards);
        Utils_1.default.clearComponentArray(this.exitdoors);
        Utils_1.default.clearComponentArray(this.portals);
        Utils_1.default.clearComponentArray(this.doors);
        Utils_1.default.clearComponentArray(this.airExits);
        Utils_1.default.clearComponentArray(this.interactBuildings);
        this.footboards = new Array();
        this.exitdoors = new Array();
        this.portals = new Array();
        this.doors = new Array();
        this.airExits = new Array();
        this.drinkList = new Array();
        this.foodList = new Array();
        this.interactBuildings = new Array();
        this.buildingList = new Array();
        this.monsterGeneratorList = new Array();
        this.shelvesFoodIndex = 0;
        this.shelvesDrinkIndex = 0;
        this.colliderCombineMap.clear();
        this.emptyMap.clear();
        this.lastInteractBuilding = null;
      };
      BuildingManager.prototype.hasThe = function(mapStr, typeStr) {
        if (!mapStr) return false;
        var isequal = -1 != mapStr.indexOf(typeStr);
        return isequal;
      };
      BuildingManager.prototype.isFirstEqual = function(mapStr, typeStr) {
        if (!mapStr) return false;
        var isequal = mapStr[0] == typeStr;
        return isequal;
      };
      BuildingManager.prototype.setAudioMaterial = function(b, audioMaterial) {
        if (audioMaterial && b.ccolliders) for (var _i = 0, _a = b.ccolliders; _i < _a.length; _i++) {
          var c = _a[_i];
          c.audioMaterial = audioMaterial;
        }
      };
      BuildingManager.prototype.addBuilding = function(prefab, indexPos, audioMaterial, id, moveable) {
        var building = cc.instantiate(prefab);
        building.parent = this.node;
        building.position = Dungeon_1.default.getPosInMap(indexPos);
        building.zIndex = IndexZ_1.default.getActorZIndex(building.position);
        var b = building.getComponent(Building_1.default);
        if (b) {
          b.initCollider();
          this.setAudioMaterial(b, audioMaterial);
          b.entity.NodeRender.node = building;
          b.entity.Transform.position = Dungeon_1.default.getPosInMap(indexPos);
          b.entity.Move.isStatic = !moveable;
          b.seed = Logic_1.default.mapManager.getSeedFromRoom(MapManager_1.default.RANDOM_BUILDING);
          id && id.length > 0 ? b.data.valueCopy(Logic_1.default.normalBuildings[id]) : b.data.custom = true;
          b.data.defaultPos = indexPos.clone();
          b.lights = b.getComponentsInChildren(ShadowOfSight_1.default);
          b.lights && LightManager_1.default.registerLight(b.lights, b.node);
        }
        this.buildingList.push(b);
        return building;
      };
      BuildingManager.prototype.addBuildingsFromMap = function(dungeon, mapData, mapDataStr, indexPos, levelData, exits, equipitems) {
        var _this = this;
        !mapDataStr || mapDataStr.length < 1 || "undefined" == mapDataStr ? this.emptyMap.set("x=" + indexPos.x + "y=" + indexPos.y, indexPos) : "==" == mapDataStr || this.isFirstEqual(mapDataStr, "*") || (this.isFirstEqual(mapDataStr, "#") ? this.addDirWalls(mapDataStr, mapData, indexPos, levelData, false) : this.isFirstEqual(mapDataStr, "-") ? Logic_1.default.getBuildings(BuildingManager_1.DARKNESS, function(prefab) {
          var dn = _this.addBuilding(prefab, indexPos);
          dn.zIndex = IndexZ_1.default.DARKNESS;
          "-0" == mapDataStr && (dn.zIndex = IndexZ_1.default.ROOF);
        }) : this.isFirstEqual(mapDataStr, "~") ? this.addWaterBuilding(mapDataStr, indexPos) : this.isFirstEqual(mapDataStr, "+") ? this.addDecorate(dungeon, mapDataStr, indexPos) : "@@" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.FOOTBOARD, function(prefab) {
          var foot = _this.addBuilding(prefab, indexPos);
          foot.zIndex = IndexZ_1.default.FLOOR;
          _this.footboards.push(foot.getComponent(FootBoard_1.default));
        }) : "@S" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.SAVEPOINT, function(prefab) {
          var save = _this.addBuilding(prefab, indexPos);
          _this.savePointS = save.getComponent(SavePoint_1.default);
        }) : "@a" == mapDataStr ? this.addEquipItemBuildings(dungeon, mapDataStr, indexPos, equipitems) : "@b" == mapDataStr ? this.addEquipItemBuildings(dungeon, mapDataStr, indexPos, equipitems) : this.isFirstEqual(mapDataStr, "B") ? this.addBox(mapDataStr, indexPos) : this.isFirstEqual(mapDataStr, "C") ? this.addChest(indexPos, mapDataStr) : this.isFirstEqual(mapDataStr, "D") ? this.addDoor(mapDataStr, indexPos, false) : this.isFirstEqual(mapDataStr, "E") ? this.addExitDoor(mapDataStr, indexPos, exits) : "F0" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.CAMPFIRE, function(prefab) {
          var camp = _this.addBuilding(prefab, indexPos);
          _this.setAudioMaterial(camp.getComponent(Building_1.default), CCollider_1.default.AUDIO_MATERIAL.WOOD);
          var fallentree = camp.getChildByName("sprite").getChildByName("fallentree");
          fallentree.position = Dungeon_1.default.getPosInMap(indexPos);
          fallentree.position = cc.v3(fallentree.position.x, fallentree.position.y + 40);
          fallentree.parent = _this.node;
          fallentree.zIndex = IndexZ_1.default.getActorZIndex(fallentree.position);
          fallentree.setScale(6, 4);
        }) : "F1" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.AIRTRANSPORTMODEL, function(prefab) {
          _this.addBuilding(prefab, indexPos);
        }) : this.isFirstEqual(mapDataStr, "G") ? Logic_1.default.getBuildings(BuildingManager_1.EMPLACEMENT, function(prefab) {
          var em = _this.addBuilding(prefab, indexPos).getComponent(Emplacement_1.default);
          em.setDirType(mapDataStr);
          em.dungeon = dungeon;
        }) : this.isFirstEqual(mapDataStr, "H") ? this.addNormalBuilding(dungeon, mapDataStr, NormalBuilding_1.default.PREFIX_HITBUILDING, indexPos) : "I0" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.WENTLINE, function(prefab) {
          var p = _this.addBuilding(prefab, indexPos).getComponent(MgWentLine_1.default);
          p.init(dungeon, 1, 6, [ MonsterManager_1.default.MONSTER_ZOOMBIE, MonsterManager_1.default.MONSTER_BITE_ZOMBIE ]);
          _this.monsterGeneratorList.push(p);
        }) : "I6" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.CRACK, function(prefab) {
          var p = _this.addBuilding(prefab, indexPos).getComponent(MgCrack_1.default);
          p.init(dungeon, .5, 15, [ MonsterManager_1.default.MONSTER_SCARAB ]);
          _this.monsterGeneratorList.push(p);
        }) : this.isFirstEqual(mapDataStr, "J") ? this.addNormalBuilding(dungeon, mapDataStr, NormalBuilding_1.default.PREFIX_PLATFORM, indexPos) : this.isFirstEqual(mapDataStr, "K") || (this.isFirstEqual(mapDataStr, "L") ? this.addLamp(mapDataStr, indexPos) : this.isFirstEqual(mapDataStr, "O") ? Logic_1.default.getBuildings(BuildingManager_1.DECORATIONOVERHEAD, function(prefab) {
          var head = _this.addBuilding(prefab, indexPos);
          "O1" == mapDataStr && (head.angle = 90);
          head.opacity = 80;
          head.zIndex = IndexZ_1.default.ROOF;
        }) : this.isFirstEqual(mapDataStr, "P") ? Logic_1.default.getBuildings(BuildingManager_1.PORTAL, function(prefab) {
          if (Logic_1.default.isCheatMode) {
            var d = ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level);
            for (var _i = 0, exits_1 = exits; _i < exits_1.length; _i++) {
              var e = exits_1[_i];
              if (e.fromPos.equals(indexPos) && e.fromRoomPos.equals(cc.v3(Logic_1.default.mapManager.getCurrentRoom().x, Logic_1.default.mapManager.getCurrentRoom().y))) {
                d.valueCopy(e);
                break;
              }
            }
            var p = _this.addBuilding(prefab, indexPos);
            var portal = p.getComponent(Portal_1.default);
            portal.exitData.valueCopy(d);
            _this.portals.push(portal);
          }
        }) : "Q0" == mapDataStr || (this.isFirstEqual(mapDataStr, "R") ? Logic_1.default.getBuildings(BuildingManager_1.SHIPSTAIRS, function(prefab) {
          var node = _this.addBuilding(prefab, indexPos);
          node.setScale(16);
          node.zIndex = IndexZ_1.default.WALLINTERNAL;
          if (1 == parseInt(mapDataStr[1])) {
            node.setScale(-16, 16);
            node.getComponent(CCollider_1.default).offset = cc.v2(-8, 0);
          }
        }) : "S0" == mapDataStr ? this.addShopTable(indexPos) : "S1" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.SHOP, function(prefab) {
          _this.addBuilding(prefab, indexPos);
        }) : "S2" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.SHOPMART, function(prefab) {
          var mart = _this.addBuilding(prefab, indexPos);
          mart.zIndex += 10;
        }) : "S3" == mapDataStr || "S4" == mapDataStr || "S5" == mapDataStr ? this.addMartShelves(mapDataStr, indexPos) : "S6" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.MARTCASHIER, function(prefab) {
          _this.addBuilding(prefab, indexPos);
          var pos = Dungeon_1.default.getPosInMap(indexPos);
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.default.nonplayers[NonPlayerManager_1.default.SHOP_KEEPER]);
          dungeon.nonPlayerManager.addNonPlayerFromData(data, cc.v3(pos.x - 60, pos.y + 180), 0, dungeon);
        }) : "S7" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.MARTTABLE, function(prefab) {
          _this.addBuilding(prefab, indexPos);
        }) : "T000" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.TRAP, function(prefab) {
          _this.addBuilding(prefab, indexPos);
        }) : "T002" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.SAW, function(prefab) {
          var saw = _this.addBuilding(prefab, indexPos);
          saw.getComponent(Saw_1.default).setPos(indexPos);
        }) : "T003" == mapDataStr ? this.addFallStone(indexPos, false) : "T004" == mapDataStr ? this.addLighteningFall(Dungeon_1.default.getPosInMap(indexPos), true, true, true) : this.isFirstEqual(mapDataStr, "U") ? Logic_1.default.getBuildings(BuildingManager_1.WALLPAINT, function(prefab) {
          var wallpaint = _this.addBuilding(prefab, indexPos).getComponent(WallPaint_1.default);
          wallpaint.node.zIndex = IndexZ_1.default.getActorZIndex(wallpaint.node.position.add(cc.v3(0, 120)));
          wallpaint.init(mapDataStr);
        }) : this.isFirstEqual(mapDataStr, "V") ? this.addStairs(mapDataStr, indexPos) : this.isFirstEqual(mapDataStr, "W") ? this.addInteractBuilding(mapDataStr, indexPos) : this.isFirstEqual(mapDataStr, "X") ? Logic_1.default.getBuildings(BuildingManager_1.DECORATIONWALL, function(prefab) {
          var decorationWall = _this.addBuilding(prefab, indexPos).getComponent(DecorationWall_1.default);
          decorationWall.node.zIndex = IndexZ_1.default.getActorZIndex(decorationWall.node.position.add(cc.v3(0, 120)));
          decorationWall.init(mapDataStr);
        }) : this.isFirstEqual(mapDataStr, "Y") ? this.addLadder(mapDataStr, indexPos) : this.isFirstEqual(mapDataStr, "Z") ? "Z0" == mapDataStr || "Z1" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.ROOMBED, function(prefab) {
          var p = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          var rb = p.getComponent(RoomBed_1.default);
          p.zIndex -= 40;
          rb.init(dungeon, "Z1" == mapDataStr);
        }) : this.addFurnitures(dungeon, mapDataStr, indexPos) : this.hasThe(mapDataStr, "car") && this.addVehicle(dungeon, mapDataStr, indexPos))));
      };
      BuildingManager.prototype.addLadder = function(mapDataStr, indexPos) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.LADDER, function(prefab) {
          var p = _this.addBuilding(prefab, indexPos);
          var ladder = p.getComponent(Ladder_1.default);
          p.zIndex = IndexZ_1.default.getActorZIndex(p.position.add(cc.v3(0, 120)));
          ladder.init(mapDataStr);
        });
      };
      BuildingManager.prototype.addBuildingsFromSideMap = function(mapDataStr, mapData, indexPos, levelData) {
        var _this = this;
        this.isFirstEqual(mapDataStr, "#") ? this.addDirWalls(mapDataStr, mapData, indexPos, levelData, true) : this.isFirstEqual(mapDataStr, "-") ? Logic_1.default.getBuildings(BuildingManager_1.DARKNESS, function(prefab) {
          var dn = _this.addBuilding(prefab, indexPos);
          dn.zIndex = IndexZ_1.default.DARKNESS;
          "-0" == mapDataStr && (dn.zIndex = IndexZ_1.default.ROOF);
        }) : this.isFirstEqual(mapDataStr, "~") ? this.addWaterBuilding(mapDataStr, indexPos) : "F1" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.AIRTRANSPORTMODEL, function(prefab) {
          _this.addBuilding(prefab, indexPos);
        }) : this.isFirstEqual(mapDataStr, "D") && this.addDoor(mapDataStr, indexPos, true);
      };
      BuildingManager.prototype.addStairs = function(mapDataStr, indexPos) {
        var _this = this;
        var map = new Map();
        map.set(Stairs_1.default.TYPE_FRONT, BuildingManager_1.STAIRS0);
        map.set(Stairs_1.default.TYPE_BEHIND, BuildingManager_1.STAIRS1);
        map.set(Stairs_1.default.TYPE_LEFT, BuildingManager_1.STAIRS2);
        map.set(Stairs_1.default.TYPE_RIGHT, BuildingManager_1.STAIRS3);
        map.set(Stairs_1.default.TYPE_PLATFORM, BuildingManager_1.STAIRS4);
        map.forEach(function(value, key) {
          if (_this.hasThe(mapDataStr, key)) {
            Logic_1.default.getBuildings(value, function(prefab) {
              var building = _this.addBuilding(prefab, indexPos).getComponent(Stairs_1.default);
              building.data.z = 0;
              building.init(mapDataStr);
            });
            return;
          }
        });
      };
      BuildingManager.prototype.addNormalBuilding = function(dungeon, mapDataStr, prefix, indexPos) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.NORMAL_BUILDING, function(prefab) {
          var building = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.METAL, "" + prefix + mapDataStr.substring(1)).getComponent(NormalBuilding_1.default);
          var save = Logic_1.default.mapManager.getCurrentMapBuilding(building.data.defaultPos);
          building.data.valueCopy(save);
          building.init(dungeon);
        });
      };
      BuildingManager.prototype.addInteractBuilding = function(mapDataStr, indexPos) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.INTERACTBUILDING, function(prefab) {
          var saveBox = Logic_1.default.mapManager.getCurrentMapBuilding(indexPos);
          var isReborn = Logic_1.default.mapManager.getCurrentRoom().isReborn;
          if (saveBox) {
            if (saveBox.currentHealth > 0 || isReborn) {
              var interactBuilding = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD, "", true);
              var d = interactBuilding.getComponent(InteractBuilding_1.default);
              d.node.position = saveBox.position.clone();
              d.data.valueCopy(saveBox);
              if (isReborn) {
                d.node.position = Dungeon_1.default.getPosInMap(d.data.defaultPos);
                d.data.currentHealth = d.data.maxHealth;
              }
              d.init(true, parseInt(mapDataStr[1]));
              _this.interactBuildings.push(d);
            }
          } else {
            var interactBuilding = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD, "", true);
            var d = interactBuilding.getComponent(InteractBuilding_1.default);
            d.data.currentHealth = 5;
            Logic_1.default.mapManager.setCurrentBuildingData(d.data.clone());
            d.init(true, parseInt(mapDataStr[1]));
            _this.interactBuildings.push(d);
          }
        });
      };
      BuildingManager.prototype.addBox = function(mapDataStr, indexPos) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.BOX, function(prefab) {
          var box = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD, "", true);
          var b = box.getComponent(Box_1.default);
          b.setDefaultPos(indexPos);
          "B001" == mapDataStr && (b.boxType = Box_1.default.PLANT);
          var saveBox = Logic_1.default.mapManager.getCurrentMapBuilding(b.data.defaultPos);
          saveBox ? b.node.position = saveBox.position.clone() : Logic_1.default.mapManager.setCurrentBuildingData(b.data.clone());
        });
      };
      BuildingManager.prototype.addShopTable = function(indexPos) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.SHOPTABLE, function(prefab) {
          var table = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          var ta = table.getComponent(ShopTable_1.default);
          ta.setDefaultPos(indexPos);
          var isReborn = Logic_1.default.mapManager.getCurrentRoom().isReborn;
          var rand4save = Logic_1.default.mapManager.getRandom4Save(ta.seed, MapManager_1.default.RANDOM_BUILDING);
          ta.data.shopType = rand4save.getRandomNum(0, 100) > 10 ? ShopTable_1.default.EQUIPMENT : ShopTable_1.default.ITEM;
          var saveTable = Logic_1.default.mapManager.getCurrentMapBuilding(ta.data.defaultPos);
          if (saveTable) {
            if (isReborn && saveTable.isSaled) {
              saveTable.isSaled = false;
              saveTable.equipdata = null;
              saveTable.itemdata = null;
              rand4save = Logic_1.default.mapManager.getRandom4Save(Logic_1.default.mapManager.getRebornSeed(ta.seed), MapManager_1.default.RANDOM_BUILDING);
              saveTable.shopType = rand4save.getRandomNum(0, 100) > 10 ? ShopTable_1.default.EQUIPMENT : ShopTable_1.default.ITEM;
            }
            ta.data.valueCopy(saveTable);
          } else Logic_1.default.mapManager.setCurrentBuildingData(ta.data.clone());
          ta.showItem();
        });
      };
      BuildingManager.prototype.addChest = function(indexPos, mapDataStr) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.CHEST, function(prefab) {
          var chest = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          var c = chest.getComponent(Chest_1.default);
          c.seDefaultPos(indexPos);
          var quality = mapDataStr.substring(mapDataStr.length - 1, mapDataStr.length);
          c.setQuality(parseInt(quality), 0);
          var saveChest = Logic_1.default.mapManager.getCurrentMapBuilding(c.data.defaultPos);
          saveChest ? c.setQuality(saveChest.quality, saveChest.triggerCount) : Logic_1.default.mapManager.setCurrentBuildingData(c.data.clone());
        });
      };
      BuildingManager.prototype.addEquipItemBuildings = function(dungeon, mapDataStr, indexPos, equipitems) {
        var data = new BuildingData_1.default();
        var repetitive = "@b" == mapDataStr;
        data.defaultPos = indexPos.clone();
        data.triggerCount = 1;
        if (!repetitive) {
          var savedata = Logic_1.default.mapManager.getCurrentMapBuilding(data.defaultPos);
          if (savedata && savedata.triggerCount > 0) return;
          Logic_1.default.mapManager.setCurrentBuildingData(data.clone());
        }
        for (var _i = 0, equipitems_1 = equipitems; _i < equipitems_1.length; _i++) {
          var d = equipitems_1[_i];
          if (d.fromPos.equals(indexPos) && d.fromRoomPos.equals(cc.v3(Logic_1.default.mapManager.getCurrentRoom().x, Logic_1.default.mapManager.getCurrentRoom().y))) {
            InventoryManager_1.default.isEquipTag(d.resName) ? dungeon.addEquipment(d.resName, Dungeon_1.default.getPosInMap(indexPos)) : dungeon.addItem(Dungeon_1.default.getPosInMap(indexPos), d.resName);
            break;
          }
        }
      };
      BuildingManager.prototype.addVehicle = function(dungeon, mapDataStr, indexPos) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.VEHICLE, function(prefab) {
          var n = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.METAL, "", true);
          var vehicle = n.getComponent(Vehicle_1.default);
          vehicle.init(dungeon, mapDataStr);
        });
      };
      BuildingManager.prototype.addDecorate = function(dungeon, mapDataStr, indexPos) {
        var _this = this;
        "+++0" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.GRASS01, function(prefab) {
          _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
        }) : "+++1" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.GRASS02, function(prefab) {
          _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
        }) : "+++2" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.GRASS03, function(prefab) {
          _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
        }) : "+++3" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.GRASS04, function(prefab) {
          _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
        }) : Logic_1.default.getBuildings(BuildingManager_1.DECORATIONFLOOR, function(prefab) {
          var fd = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          var df = fd.getComponent(DecorationFloor_1.default);
          "+1" == mapDataStr ? df.init(dungeon, "floor_exitarrow", 4, 0) : "+2" == mapDataStr ? df.init(dungeon, "floor_exitarrow", 4, -90) : "+3" == mapDataStr ? df.init(dungeon, "floor_exitarrow", 4, 180) : "+4" == mapDataStr ? df.init(dungeon, "floor_exitarrow", 4, 90) : "+5" == mapDataStr ? df.init(dungeon, "floor_final", 4) : "+6" == mapDataStr ? df.init(dungeon, "floor_ladder", 4) : "+7" == mapDataStr ? df.init(dungeon, "floor_whiteline", 4) : "+8" == mapDataStr ? df.init(dungeon, "floor_exitarrow1", 4, 0) : "+9" == mapDataStr ? df.init(dungeon, "floor_exitarrow1", 4, -90) : "+10" == mapDataStr ? df.init(dungeon, "floor_exitarrow1", 4, 180) : "+11" == mapDataStr ? df.init(dungeon, "floor_exitarrow1", 4, 90) : "+12" == mapDataStr ? df.init(dungeon, "floor_whiteline", 4, 90) : "++0" == mapDataStr ? df.init(dungeon, "floor_roomoutside0", 32, 0, 1, cc.v3(.7, .5), 255, IndexZ_1.default.BASE) : "++1" == mapDataStr ? df.init(dungeon, "floor_roomoutside1", 32, 0, 1, cc.v3(.7, .5), 255, IndexZ_1.default.BASE) : "++2" == mapDataStr ? df.init(dungeon, "floor_roomoutside2", 32, 0, 1, cc.v3(0, .5), 255, IndexZ_1.default.BASE) : df.init(dungeon, "floor_dev", 4);
        });
      };
      BuildingManager.prototype.addWaterBuilding = function(mapDataStr, indexPos) {
        var _this = this;
        this.hasThe(mapDataStr, "~#") ? Logic_1.default.getBuildings(BuildingManager_1.COAST, function(prefab) {
          var fint = parseInt(mapDataStr.substring(2));
          var co = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          co.zIndex = IndexZ_1.default.ACTOR;
          co.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("coast" + Utils_1.default.getNumberStr3(fint));
        }) : this.hasThe(mapDataStr, "~~") && Logic_1.default.getBuildings(BuildingManager_1.WATERFALL, function(prefab) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.WATERFALL, false, true);
          var dn = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
        });
      };
      BuildingManager.prototype.addLamp = function(mapDataStr, indexPos) {
        var _this = this;
        var prefabName = BuildingManager_1.LAMPLIGHT;
        var isOverHead = false;
        var isRect = false;
        var isCustom = false;
        var isOutSide = false;
        var isAttachTop = false;
        switch (mapDataStr) {
         case "L0":
          prefabName = BuildingManager_1.LAMPOVALLIGHT;
          break;

         case "L1":
          prefabName = BuildingManager_1.LAMPSUN;
          isOverHead = true;
          break;

         case "L2":
          prefabName = BuildingManager_1.LAMPSHIP;
          isOverHead = true;
          break;

         case "L3":
          prefabName = BuildingManager_1.MUSHROOM01;
          break;

         case "L4":
          prefabName = BuildingManager_1.MUSHROOM02;
          break;

         case "L5":
          prefabName = BuildingManager_1.MUSHROOM03;
          break;

         case "L6":
          prefabName = BuildingManager_1.MUSHROOM04;
          break;

         case "L7":
          prefabName = BuildingManager_1.LAMPSEARCH;
          isOverHead = true;
          break;

         case "L8":
          prefabName = BuildingManager_1.LAMPTORCH;
          isOverHead = true;
          break;

         case "L9":
          prefabName = BuildingManager_1.LAMPFIREPAN;
          break;

         case "L10":
          prefabName = BuildingManager_1.LAMPROAD;
          break;

         case "L11":
          prefabName = BuildingManager_1.LAMPFIREFLY;
          break;

         case "L12":
          prefabName = BuildingManager_1.LAMPEXIT;
          isAttachTop = true;
          break;

         case "L13":
          prefabName = BuildingManager_1.LAMPOVALLIGHTOUTSIDE;
          break;

         case "LL020":
         case "LL021":
         case "LL022":
         case "LL023":
          prefabName = BuildingManager_1.LAMPDIRECT;
          break;

         case "LL010":
         case "LL011":
         case "LL012":
         case "LL013":
         case "LL014":
         case "LL015":
         case "LL016":
         case "LL017":
         case "LL018":
         case "LL019":
          prefabName = BuildingManager_1.LAMPLIGHT;
          isCustom = true;
          break;

         case "LL000":
         case "LL001":
         case "LL002":
         case "LL003":
         case "LL004":
         case "LL005":
         case "LL006":
         case "LL007":
         case "LL008":
         case "LL009":
          prefabName = BuildingManager_1.LAMPLIGHT;
          isCustom = true;
          isRect = true;
          break;

         case "LO010":
         case "LO011":
         case "LO012":
         case "LO013":
         case "LO014":
         case "LO015":
         case "LO016":
         case "LO017":
         case "LO018":
         case "LO019":
          prefabName = BuildingManager_1.LAMPLIGHTOUTSIDE;
          isCustom = true;
          break;

         case "LO000":
         case "LO001":
         case "LO002":
         case "LO003":
         case "LO004":
         case "LO005":
         case "LO006":
         case "LO007":
         case "LO008":
         case "LO009":
          prefabName = BuildingManager_1.LAMPLIGHTOUTSIDE;
          isCustom = true;
          isRect = true;
        }
        Logic_1.default.getBuildings(prefabName, function(prefab) {
          var node = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          isOverHead && (node.zIndex = IndexZ_1.default.OVERHEAD + 100);
          isAttachTop && (node.zIndex = IndexZ_1.default.getActorZIndex(node.position.add(cc.v3(0, 120))));
          if (isCustom) {
            var b = node.getComponent(Building_1.default);
            if (b.lights.length > 0) {
              var index = parseInt(mapDataStr[4]);
              var range = Dungeon_1.default.TILE_SIZE * index;
              b.lights[0].setCustomColliderStyle(isRect, range, range, range / 2, 0, 0);
            }
          }
        });
      };
      BuildingManager.prototype.getGoodsList = function(type) {
        if (this.foodList.length < 1 && this.drinkList.length < 1) {
          var prefix = "goods";
          for (var _i = 0, _a = Logic_1.default.goodsNameList; _i < _a.length; _i++) {
            var goods = _a[_i];
            var index = goods.substring(prefix.length, prefix.length + 1);
            "0" == index ? this.drinkList.push(goods) : "1" == index && this.foodList.push(goods);
          }
        }
        if (type == MartShelves_1.default.TYPE_FRIDGE) {
          var tempdrinks = [];
          for (var i = this.shelvesDrinkIndex % MartShelves_1.default.SIZE_FRIDGE; i < MartShelves_1.default.SIZE_FRIDGE; i++) this.shelvesDrinkIndex < this.drinkList.length && tempdrinks.push(this.drinkList[this.shelvesDrinkIndex++]);
          return tempdrinks;
        }
        var tempfoods = [];
        for (var i = this.shelvesFoodIndex % MartShelves_1.default.SIZE_NORMAL; i < MartShelves_1.default.SIZE_NORMAL; i++) this.shelvesFoodIndex < this.foodList.length && tempfoods.push(this.foodList[this.shelvesFoodIndex++]);
        return tempfoods;
      };
      BuildingManager.prototype.addMartShelves = function(mapDataStr, indexPos) {
        var _this = this;
        mapDataStr == MartShelves_1.default.TYPE_FRIDGE ? Logic_1.default.getBuildings(BuildingManager_1.MARTFRIDGE, function(prefab) {
          var ms = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD).getComponent(MartShelves_1.default);
          ms.init(mapDataStr, _this.getGoodsList(mapDataStr));
        }) : Logic_1.default.getBuildings(BuildingManager_1.MARTSHELVES, function(prefab) {
          var ms = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD).getComponent(MartShelves_1.default);
          ms.init(mapDataStr, _this.getGoodsList(mapDataStr));
        });
      };
      BuildingManager.prototype.addExitDoor = function(mapDataStr, indexPos, exits) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.EXITDOOR, function(prefab) {
          var dir = parseInt(mapDataStr[3]);
          var type = parseInt(mapDataStr.substring(1, 3));
          var d = ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level);
          for (var _i = 0, exits_2 = exits; _i < exits_2.length; _i++) {
            var e = exits_2[_i];
            if (e.fromPos.equals(indexPos) && e.fromRoomPos.equals(cc.v3(Logic_1.default.mapManager.getCurrentRoom().x, Logic_1.default.mapManager.getCurrentRoom().y))) {
              d.valueCopy(e);
              break;
            }
          }
          var p = _this.addBuilding(prefab, indexPos);
          var exitdoor = p.getComponent(ExitDoor_1.default);
          exitdoor.init(type, dir, d);
          _this.exitdoors.push(exitdoor);
        });
      };
      BuildingManager.prototype.addAirExit = function(mapData) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.AIREXIT, function(prefab) {
          var top = _this.addBuilding(prefab, cc.v3(Math.floor(mapData.length / 2), mapData[0].length)).getComponent(AirExit_1.default);
          var bottom = _this.addBuilding(prefab, cc.v3(Math.floor(mapData.length / 2), -1)).getComponent(AirExit_1.default);
          var left = _this.addBuilding(prefab, cc.v3(-1, Math.floor(mapData[0].length / 2))).getComponent(AirExit_1.default);
          var right = _this.addBuilding(prefab, cc.v3(mapData.length, Math.floor(mapData[0].length / 2))).getComponent(AirExit_1.default);
          _this.airExits.push(top);
          _this.airExits.push(bottom);
          _this.airExits.push(left);
          _this.airExits.push(right);
          for (var i = 0; i < _this.airExits.length; i++) _this.airExits[i].init(i, i < 2 ? mapData.length + 2 : mapData[0].length + 2);
        });
      };
      BuildingManager.prototype.addDoor = function(mapDataStr, indexPos, isDecorate) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.DOOR, function(prefab) {
          var dir = parseInt(mapDataStr[3]);
          var type = parseInt(mapDataStr.substring(1, 3));
          var door = _this.addBuilding(prefab, indexPos).getComponent(Door_1.default);
          door.isDoor = true;
          door.dir = dir % 4;
          door.isLock = 1 == type && !Logic_1.default.isCheatMode;
          door.isEmpty = 2 == type;
          door.isTransparent = 3 == type;
          door.isHidden = 4 == type;
          door.isDecorate = isDecorate;
          door.setOpen(true, true);
          _this.doors.push(door);
        });
      };
      BuildingManager.prototype.setDoors = function(isOpen, immediately) {
        for (var _i = 0, _a = this.doors; _i < _a.length; _i++) {
          var door = _a[_i];
          door.setOpen(isOpen, immediately);
        }
        if (immediately) return;
        for (var _b = 0, _c = this.airExits; _b < _c.length; _b++) {
          var air = _c[_b];
          air.changeStatus(isOpen ? AirExit_1.default.STATUS_OPEN : AirExit_1.default.STATUS_CLOSE);
        }
        if (this.exitdoors.length > 0) for (var _d = 0, _e = this.exitdoors; _d < _e.length; _d++) {
          var ed = _e[_d];
          isOpen ? ed.openGate() : ed.closeGate();
        }
        if (this.portals.length > 0) for (var _f = 0, _g = this.portals; _f < _g.length; _f++) {
          var ed = _g[_f];
          isOpen ? ed.openGate() : ed.closeGate();
        }
      };
      BuildingManager.prototype.getReachDir = function() {
        var dirs = new Map();
        for (var _i = 0, _a = this.doors; _i < _a.length; _i++) {
          var door = _a[_i];
          door.isLock || door.isDecorate || (Logic_1.default.mapManager.isNeighborRoomNew(door.dir) ? dirs.set(door.dir, true) : Logic_1.default.mapManager.isNeighborRoomExist(door.dir) && dirs.set(door.dir, false));
        }
        for (var _b = 0, _c = this.exitdoors; _b < _c.length; _b++) {
          var exit = _c[_b];
          exit.dir < 8 && dirs.set(exit.dir % 4, true);
        }
        return dirs;
      };
      BuildingManager.prototype.addDirWalls = function(mapDataStr, mapData, indexPos, levelData, onlyShow) {
        var _this = this;
        Logic_1.default.getBuildings(BuildingManager_1.WALL, function(prefab) {
          var node = _this.addBuilding(prefab, indexPos);
          var wall = node.getComponent(Wall_1.default);
          var combineCountX = 0;
          var combineCountY = 0;
          var isCombine = _this.colliderCombineMap.has("i" + indexPos.x + "j" + indexPos.y);
          isCombine && (wall.combineWall = _this.colliderCombineMap.get("i" + indexPos.x + "j" + indexPos.y));
          if (!isCombine && !onlyShow) for (var i = indexPos.x + 1; i < mapData.length; i++) {
            var next = mapData[i][indexPos.y];
            if (!Utils_1.default.isFirstEqual(next, "#")) break;
            _this.colliderCombineMap.set("i" + i + "j" + indexPos.y, wall);
            combineCountX++;
          }
          wall.init(mapDataStr, levelData, onlyShow || isCombine, combineCountX, combineCountY);
        });
      };
      BuildingManager.prototype.addFurnitures = function(dungeon, mapDataStr, indexPos) {
        var _this = this;
        var data = new BuildingData_1.default();
        switch (mapDataStr) {
         case "Z2":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.DESK]);
          break;

         case "Z3":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.TV]);
          break;

         case "Z4":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.SOFA]);
          break;

         case "Z5":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.DINNER_TABLE]);
          break;

         case "Z6":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.FRIDGE]);
          break;

         case "Z7":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.WASHING_MACHINE]);
          break;

         case "Z8":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.CUPBOARD]);
          break;

         case "Z9":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.STOOL]);
          break;

         case "Z10":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.COOKING_BENCH]);
          break;

         case "Z11":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.DOLL_MACHINE]);
          break;

         case "Z12":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.COOKING_BENCH_2]);
          break;

         case "Z13":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.COOKING_BENCH_3]);
          break;

         case "Z14":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.BATH]);
          break;

         case "Z15":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.LITTLE_TABLE]);
          break;

         case "Z16":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.LITTLE_TABLE_1]);
          break;

         case "Z17":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.LITTLE_TABLE_2]);
          break;

         case "Z18":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.FISHTANK]);
          break;

         case "Z19":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.BOOKSHELF]);
          break;

         case "Z20":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.WATERDISPENER]);
          break;

         case "Z21":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.TRASHCAN]);
        }
        var building;
        var script;
        "Z3" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.ROOMTV, function(prefab) {
          building = _this.addBuilding(prefab, indexPos);
          script = building.getComponent(Furniture_1.default);
          script.init(data, false);
        }) : "Z4" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.ROOMSOFA, function(prefab) {
          building = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          building.zIndex = IndexZ_1.default.ACTOR;
          script = building.getComponent(Furniture_1.default);
          script.init(data, false);
        }) : "Z9" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.ROOMSTOOL, function(prefab) {
          building = _this.addBuilding(prefab, indexPos);
          building.getComponent(RoomStool_1.default).init(dungeon);
          script = building.getComponent(Furniture_1.default);
          script.init(data, false);
        }) : "Z10" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.ROOMKITCHEN, function(prefab) {
          building = _this.addBuilding(prefab, indexPos);
          building.getComponent(RoomKitchen_1.default).init(indexPos);
          script = building.getComponent(Furniture_1.default);
          script.init(data, false);
        }) : "Z17" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.ROOMCLOCK, function(prefab) {
          building = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          script = building.getComponent(Furniture_1.default);
          script.init(data, false);
        }) : "Z18" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.ROOMFISHTANK, function(prefab) {
          building = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          building.getComponent(RoomFishtank_1.default).init(dungeon);
          script = building.getComponent(Furniture_1.default);
          script.init(data, false);
        }) : "Z20" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.ROOMWATERDISPENSER, function(prefab) {
          building = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          script = building.getComponent(Furniture_1.default);
          script.init(data, false);
        }) : "Z21" == mapDataStr ? Logic_1.default.getBuildings(BuildingManager_1.ROOMTRASHCAN, function(prefab) {
          building = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          script = building.getComponent(Furniture_1.default);
          script.init(data, false);
        }) : Logic_1.default.getBuildings(BuildingManager_1.FURNITURE, function(prefab) {
          building = _this.addBuilding(prefab, indexPos, CCollider_1.default.AUDIO_MATERIAL.WOOD);
          script = building.getComponent(Furniture_1.default);
          script.init(data, true);
        });
        if (script) {
          var save = Logic_1.default.mapManager.getCurrentMapBuilding(script.data.defaultPos);
          save && (script.data.triggerCount = save.triggerCount);
        }
      };
      BuildingManager.prototype.addFallStone = function(pos, isAuto, withFire) {
        var _this = this;
        if (!this.node) return;
        Logic_1.default.getBuildings(BuildingManager_1.FALLSTONE, function(prefab) {
          var stone = _this.addBuilding(prefab, pos);
          var stoneScript = stone.getComponent(FallStone_1.default);
          stoneScript.isAuto = isAuto;
          stone.zIndex = IndexZ_1.default.ACTOR;
          stoneScript.isAuto && stoneScript.fall(withFire);
        });
      };
      BuildingManager.prototype.addLighteningFall = function(pos, isTrigger, needPrepare, showArea, damagePoint) {
        var _this = this;
        if (!this.node) return;
        Logic_1.default.getBuildings(BuildingManager_1.LIGHTENINGFALL, function(prefab) {
          var fall = _this.addBuilding(prefab, Dungeon_1.default.getIndexInMap(pos));
          var fallScript = fall.getComponent(MagicLightening_1.default);
          fall.zIndex = IndexZ_1.default.ACTOR;
          fallScript.isTrigger = isTrigger;
          fallScript.isTrigger || fallScript.fall(needPrepare, showArea, damagePoint);
        });
      };
      BuildingManager.prototype.addTwineGrass = function(pos, isAuto) {
        var _this = this;
        if (!this.node) return;
        Logic_1.default.getBuildings(BuildingManager_1.DRYADTWINE, function(prefab) {
          var grass = _this.addBuilding(prefab, pos);
          var dryadGrassScript = grass.getComponent(DryadGrass_1.default);
          dryadGrassScript.isAuto = isAuto;
          grass.zIndex = IndexZ_1.default.getActorZIndex(pos);
          dryadGrassScript.isAuto && dryadGrassScript.fall();
        });
      };
      BuildingManager.prototype.addEnergyShield = function(player, callback) {
        var _this = this;
        this.node || callback && callback(null);
        Logic_1.default.getBuildings(BuildingManager_1.ENERGYSHIELD, function(prefab) {
          var shield = _this.addBuilding(prefab, player.pos);
          shield.position = player.node.position.clone();
          var script = shield.getComponent(EnergyShield_1.default);
          script.entity.Transform.position = shield.position.clone();
          var scale = 8 + Math.floor(Logic_1.default.playerData.OilGoldData.level / 5);
          script.init(player, 20 + 5 * Logic_1.default.playerData.OilGoldData.level, scale);
          callback && callback(script);
        });
      };
      BuildingManager.prototype.addPracticeEquipItem = function(dungeon, indexPos) {
        if (dungeon) {
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_SWORD, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(-2, 0))));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_SPEAR, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(-1, 0))));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_DAGGER, Dungeon_1.default.getPosInMap(indexPos));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_HAMMER, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(1, 0))));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_LONG_CROSS, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(2, 0))));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_LONG_STICK, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(-3, 0))));
        }
      };
      BuildingManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      BuildingManager.prototype.updateLogic = function(dt, player) {
        if (this.isCheckTimeDelay(dt)) {
          var distance = 200;
          var building = null;
          for (var i = this.interactBuildings.length - 1; i >= 0; i--) {
            var b = this.interactBuildings[i];
            b.highLight(false);
            if (b.isTaken || !b.isValid || b.data.currentHealth <= 0) continue;
            var d = Logic_1.default.getDistanceNoSqrt(b.node.position, player.node.position);
            if (d < distance) {
              distance = d;
              building = b;
            }
          }
          if (distance < 96 && building) {
            building.highLight(true);
            this.lastInteractBuilding = building;
          } else this.lastInteractBuilding = null;
        }
      };
      var BuildingManager_1;
      BuildingManager.AIREXIT = "AirExit";
      BuildingManager.AIRTRANSPORT = "AirTransport";
      BuildingManager.AIRTRANSPORTMODEL = "AirTransportModel";
      BuildingManager.BED = "Bed";
      BuildingManager.BOX = "Box";
      BuildingManager.CAMPFIRE = "CampFire";
      BuildingManager.CHEST = "Chest";
      BuildingManager.COAST = "Coast";
      BuildingManager.DARKNESS = "Darkness";
      BuildingManager.INTERACTBUILDING = "InteractBuilding";
      BuildingManager.DECORATIONFLOOR = "DecorationFloor";
      BuildingManager.DECORATIONOVERHEAD = "DecorationOverHead";
      BuildingManager.DECORATIONWALL = "DecorationWall";
      BuildingManager.DOOR = "Door";
      BuildingManager.DRYADTWINE = "DryadTwine";
      BuildingManager.EMPLACEMENT = "Emplacement";
      BuildingManager.EXITDOOR = "ExitDoor";
      BuildingManager.FALLSTONE = "FallStone";
      BuildingManager.FOOTBOARD = "FootBoard";
      BuildingManager.HITBUILDING = "HitBuilding";
      BuildingManager.ICEDEMONTHRON = "IceDemonThron";
      BuildingManager.LIGHTENINGFALL = "LighteningFall";
      BuildingManager.LADDER = "Ladder";
      BuildingManager.MARTCASHIER = "MartCashier";
      BuildingManager.MARTFRIDGE = "MartFridge";
      BuildingManager.MARTSHELVES = "MartShelves";
      BuildingManager.MARTTABLE = "MartTable";
      BuildingManager.MIST = "Mist";
      BuildingManager.PORTAL = "Portal";
      BuildingManager.ROOMBED = "RoomBed";
      BuildingManager.ROOMTV = "RoomTv";
      BuildingManager.ROOMSTOOL = "RoomStool";
      BuildingManager.ROOMSOFA = "RoomSofa";
      BuildingManager.ROOMFISHTANK = "RoomFishtank";
      BuildingManager.ROOMWATERDISPENSER = "RoomWaterDispenser";
      BuildingManager.ROOMCLOCK = "RoomClock";
      BuildingManager.ROOMTRASHCAN = "RoomTrashCan";
      BuildingManager.ROOMKITCHEN = "RoomKitchen";
      BuildingManager.SAVEPOINT = "SavePoint";
      BuildingManager.SAW = "Saw";
      BuildingManager.SHIPSTAIRS = "Shipstairs";
      BuildingManager.SHOP = "Shop";
      BuildingManager.SHOPMART = "ShopMart";
      BuildingManager.SHOPTABLE = "ShopTable";
      BuildingManager.TAROTTABLE = "TarotTable";
      BuildingManager.TRAP = "Trap";
      BuildingManager.WALL = "Wall";
      BuildingManager.WATER = "Water";
      BuildingManager.LAMPLIGHT = "LampLight";
      BuildingManager.LAMPLIGHTOUTSIDE = "LampLightOutside";
      BuildingManager.LAMPOVALLIGHT = "LampOvalLight";
      BuildingManager.LAMPOVALLIGHTOUTSIDE = "LampOvalLightOutside";
      BuildingManager.LAMPSUN = "LampSun";
      BuildingManager.LAMPSHIP = "LampShip";
      BuildingManager.LAMPSEARCH = "LampSearch";
      BuildingManager.LAMPFIREPAN = "LampFirePan";
      BuildingManager.LAMPTORCH = "LampTorch";
      BuildingManager.LAMPROAD = "LampRoad";
      BuildingManager.LAMPFIREFLY = "LampFireFly";
      BuildingManager.LAMPEXIT = "LampExit";
      BuildingManager.LAMPDIRECT = "LampDirectLight";
      BuildingManager.MUSHROOM01 = "MushRoom01";
      BuildingManager.MUSHROOM02 = "MushRoom02";
      BuildingManager.MUSHROOM03 = "MushRoom03";
      BuildingManager.MUSHROOM04 = "MushRoom04";
      BuildingManager.GRASS01 = "Grass01";
      BuildingManager.GRASS02 = "Grass02";
      BuildingManager.GRASS03 = "Grass03";
      BuildingManager.GRASS04 = "Grass04";
      BuildingManager.WENTLINE = "WentLine";
      BuildingManager.CRACK = "Crack";
      BuildingManager.WATERFALL = "WaterFall";
      BuildingManager.ENERGYSHIELD = "EnergyShield";
      BuildingManager.FURNITURE = "Furniture";
      BuildingManager.WALLPAINT = "WallPaint";
      BuildingManager.NORMAL_BUILDING = "NormalBuilding";
      BuildingManager.STAIRS0 = "Stairs0";
      BuildingManager.STAIRS1 = "Stairs1";
      BuildingManager.STAIRS2 = "Stairs2";
      BuildingManager.STAIRS3 = "Stairs3";
      BuildingManager.STAIRS4 = "Stairs4";
      BuildingManager.VEHICLE = "Vehicle";
      BuildingManager = BuildingManager_1 = __decorate([ ccclass ], BuildingManager);
      return BuildingManager;
    }(BaseManager_1.default);
    exports.default = BuildingManager;
    cc._RF.pop();
  }, {
    "../boss/DryadGrass": "DryadGrass",
    "../building/AirExit": "AirExit",
    "../building/Box": "Box",
    "../building/Building": "Building",
    "../building/Chest": "Chest",
    "../building/DecorationFloor": "DecorationFloor",
    "../building/DecorationWall": "DecorationWall",
    "../building/Door": "Door",
    "../building/Emplacement": "Emplacement",
    "../building/EnergyShield": "EnergyShield",
    "../building/ExitDoor": "ExitDoor",
    "../building/FallStone": "FallStone",
    "../building/FootBoard": "FootBoard",
    "../building/Furniture": "Furniture",
    "../building/InteractBuilding": "InteractBuilding",
    "../building/Ladder": "Ladder",
    "../building/MagicLightening": "MagicLightening",
    "../building/MartShelves": "MartShelves",
    "../building/MgCrack": "MgCrack",
    "../building/MgWentLine": "MgWentLine",
    "../building/NormalBuilding": "NormalBuilding",
    "../building/Portal": "Portal",
    "../building/RoomBed": "RoomBed",
    "../building/RoomFishtank": "RoomFishtank",
    "../building/RoomKitchen": "RoomKitchen",
    "../building/RoomStool": "RoomStool",
    "../building/SavePoint": "SavePoint",
    "../building/Saw": "Saw",
    "../building/ShopTable": "ShopTable",
    "../building/Stairs": "Stairs",
    "../building/Vehicle": "Vehicle",
    "../building/Wall": "Wall",
    "../building/WallPaint": "WallPaint",
    "../collider/CCollider": "CCollider",
    "../data/BuildingData": "BuildingData",
    "../data/ExitData": "ExitData",
    "../data/NonPlayerData": "NonPlayerData",
    "../effect/ShadowOfSight": "ShadowOfSight",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/Utils": "Utils",
    "./BaseManager": "BaseManager",
    "./EquipmentManager": "EquipmentManager",
    "./InventoryManager": "InventoryManager",
    "./LightManager": "LightManager",
    "./MapManager": "MapManager",
    "./MonsterManager": "MonsterManager",
    "./NonPlayerManager": "NonPlayerManager"
  } ],
  Building: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "255a9MnBFxLp4C3tatPRINn", "Building");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Actor_1 = require("../base/Actor");
    var BuildingData_1 = require("../data/BuildingData");
    var Random_1 = require("../utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Building = function(_super) {
      __extends(Building, _super);
      function Building() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.data = new BuildingData_1.default();
        return _this;
      }
      Building.prototype.takeDamage = function(damage, from, actor) {
        return false;
      };
      Building.prototype.addStatus = function(statusType, from) {};
      Building.prototype.getCenterPosition = function() {
        return this.entity.Transform.position.clone();
      };
      Building.prototype.actorName = function() {
        return "";
      };
      Building.prototype.updateData = function() {};
      Building.prototype.takeDizz = function(dizzDuration) {};
      Building.prototype.updateStatus = function(statusList, totalStatusData) {};
      Building.prototype.hideSelf = function(hideDuration) {};
      Building.prototype.updateDream = function(offset) {
        return 0;
      };
      Building.prototype.setLinearVelocity = function(movement) {};
      Building.prototype.updateLife = function(sanity, solid, liquid) {};
      Building.prototype.disappear = function() {
        cc.tween(this.node).to(.5 + Random_1.default.rand(), {
          scaleY: 0
        }).start();
      };
      Building = __decorate([ ccclass ], Building);
      return Building;
    }(Actor_1.default);
    exports.default = Building;
    cc._RF.pop();
  }, {
    "../base/Actor": "Actor",
    "../data/BuildingData": "BuildingData",
    "../utils/Random": "Random"
  } ],
  BulletData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "081a6xA9tZAiZxbsh2+6iXp", "BulletData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var DamageData_1 = require("./DamageData");
    var FromData_1 = require("./FromData");
    var BulletData = function() {
      function BulletData() {
        this.speed = 0;
        this.isRect = 0;
        this.isRotate = 0;
        this.rotateAngle = 0;
        this.isLaser = 0;
        this.laserRange = 0;
        this.isDecelerate = 0;
        this.decelerateDelta = 0;
        this.delayDecelerate = 0;
        this.isBoom = 0;
        this.isPhysical = 0;
        this.delaytrack = 0;
        this.isTracking = 0;
        this.lifeTime = 0;
        this.size = 1;
        this.resName = "";
        this.lightName = "";
        this.lightColor = "#ffffff";
        this.fixedRotation = 0;
        this.statusType = "";
        this.statusRate = 0;
        this.canBreakBuilding = 0;
        this.isInvincible = 0;
        this.splitBulletType = "";
        this.splitTime = 0;
        this.splitArcExNum = 0;
        this.splitLineExNum = 0;
        this.damage = new DamageData_1.default();
        this.from = new FromData_1.default();
        this.hitAudio = "";
      }
      BulletData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.size = data.size ? data.size : 1;
        this.lightColor = data.lightColor ? data.lightColor : "#ffffff";
        this.damage.valueCopy(data.damage);
        this.from.valueCopy(data.from);
      };
      BulletData.prototype.clone = function() {
        var e = new BulletData();
        e.valueCopy(this);
        return e;
      };
      return BulletData;
    }();
    exports.default = BulletData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./DamageData": "DamageData",
    "./FromData": "FromData"
  } ],
  Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d243aeNu+tEJJbz1ng6i61f", "Bullet");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var Player_1 = require("../logic/Player");
    var DamageData_1 = require("../data/DamageData");
    var Logic_1 = require("../logic/Logic");
    var Boss_1 = require("../boss/Boss");
    var BulletData_1 = require("../data/BulletData");
    var StatusManager_1 = require("../manager/StatusManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Wall_1 = require("../building/Wall");
    var AreaOfEffect_1 = require("../actor/AreaOfEffect");
    var AreaOfEffectData_1 = require("../data/AreaOfEffectData");
    var IndexZ_1 = require("../utils/IndexZ");
    var ExitDoor_1 = require("../building/ExitDoor");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var InteractBuilding_1 = require("../building/InteractBuilding");
    var EnergyShield_1 = require("../building/EnergyShield");
    var Utils_1 = require("../utils/Utils");
    var MeleeShadowWeapon_1 = require("../logic/MeleeShadowWeapon");
    var Shield_1 = require("../logic/Shield");
    var CCollider_1 = require("../collider/CCollider");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var TriggerData_1 = require("../data/TriggerData");
    var MeleeCollideHelper_1 = require("../logic/MeleeCollideHelper");
    var AirExit_1 = require("../building/AirExit");
    var ShadowOfSight_1 = require("../effect/ShadowOfSight");
    var LightManager_1 = require("../manager/LightManager");
    var NormalBuilding_1 = require("../building/NormalBuilding");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Bullet = function(_super) {
      __extends(Bullet, _super);
      function Bullet() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.boom = null;
        _this.root = null;
        _this.shadow = null;
        _this.data = new BulletData_1.default();
        _this.dir = 0;
        _this.tagetPos = cc.v3(0, 0);
        _this.hv = cc.v2(0, 0);
        _this.isFromPlayer = false;
        _this.startPos = cc.v3(0, 0);
        _this.isTrackDelay = false;
        _this.isDecelerateDelay = false;
        _this.isHit = false;
        _this.isReserved = false;
        _this.aoeData = new AreaOfEffectData_1.default();
        _this.currentLinearVelocity = cc.v2(0, 0);
        _this.ignoreEmptyWall = false;
        _this.lights = [];
        _this.timeDelay = 0;
        _this.checkTimeDelay = 0;
        _this.trackCount = 0;
        return _this;
      }
      Bullet.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.anim = this.getComponent(cc.Animation);
        this.collider = this.getComponentInChildren(CCollider_1.default);
        this.base = this.root.getChildByName("base");
        this.base.angle = 0;
        this.sprite = this.base.getChildByName("sprite").getComponent(cc.Sprite);
        this.sprite.node.opacity = 255;
        this.light = this.base.getChildByName("light").getComponent(cc.Sprite);
        this.light.node.opacity = 0;
        this.entity.Move.gravity = 0;
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
        LightManager_1.default.registerLight(this.lights, this.node);
      };
      Bullet.prototype.onEnable = function() {
        this.tagetPos = cc.v3(0, 0);
        this.entity.Move.linearVelocity = cc.v2(0, 0);
        this.currentLinearVelocity = cc.v2(0, 0);
        if (!this.base) {
          this.base = this.root.getChildByName("base");
          this.sprite = this.base.getChildByName("sprite").getComponent(cc.Sprite);
          this.light = this.base.getChildByName("light").getComponent(cc.Sprite);
        }
        this.sprite.node.angle = 0;
        this.sprite.node.opacity = 255;
        this.light.node.opacity = 0;
        this.changeAngle(0);
        this.isTrackDelay = false;
        this.isDecelerateDelay = false;
        this.isHit = false;
        this.isReserved = false;
        LightManager_1.default.unRegisterLight(this.lights);
        LightManager_1.default.registerLight(this.lights, this.node);
      };
      Bullet.prototype.changeAngle = function(angle) {
        this.base.angle = angle;
        this.shadow.angle = angle;
      };
      Bullet.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) {
          this.entity.Move.linearVelocity = cc.v2(0, 0);
          return;
        }
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .5) {
          this.checkTraking();
          this.checkTimeDelay = 0;
        }
        1 == this.data.fixedRotation && this.changeAngle(0);
        if (1 == this.data.isDecelerate && this.isDecelerateDelay) {
          this.timeDelay += dt;
          if (this.timeDelay > .016) {
            this.timeDelay = 0;
            var d = this.data.decelerateDelta > 0 ? this.data.decelerateDelta : 1;
            this.currentLinearVelocity = this.currentLinearVelocity.lerp(cc.v2(0, 0), d * dt);
          }
        }
        this.entity.Move.linearVelocity = this.currentLinearVelocity;
        var y = this.root.y - this.entity.Transform.base;
        y < 0 && (y = 0);
        var scale = 1 - y / 64;
        this.shadow.scale = scale < .5 ? .5 : scale;
        this.shadow.y = this.entity.Transform.base;
        this.entity.Move.linearVelocityZ = 0;
      };
      Bullet.prototype.checkTraking = function() {
        if (1 == this.data.isTracking && this.isTrackDelay && !this.isHit) {
          var pos = this.hasNearEnemy();
          if (!pos.equals(cc.Vec3.ZERO)) {
            this.rotateCollider(cc.v2(pos.x, pos.y));
            this.hv = cc.v2(pos.x, pos.y).normalize();
            this.currentLinearVelocity = cc.v2(this.data.speed * this.hv.x, this.data.speed * this.hv.y);
          }
        }
      };
      Bullet.prototype.changeBullet = function(data, zHeight) {
        this.entity.NodeRender.node = this.node;
        this.entity.NodeRender.root = this.root;
        this.data = data;
        this.changeRes(data.resName, data.lightName, data.lightColor);
        this.collider.type = CCollider_1.default.TYPE.RECT;
        this.light.node.position = 1 == data.isRect ? cc.v3(8, 0) : cc.v3(0, 0);
        this.node.scale = data.size > 0 ? data.size : 1;
        if (1 == data.isRect) {
          this.collider.w = 16;
          this.collider.h = 12;
        } else {
          this.collider.w = 24;
          this.collider.h = 16;
        }
        this.collider.sensor = 0 == data.isPhysical;
        if (this.shooter && this.shooter.actor) {
          this.entity.Transform.base = this.shooter.actor.entity.Transform.base;
          this.entity.Transform.z = zHeight / this.node.scale;
        }
        this.entity.Move.gravity = 0;
      };
      Bullet.prototype.changeRes = function(resName, lightName, lightColor, suffix) {
        this.sprite || (this.sprite = this.root.getChildByName("sprite").getComponent(cc.Sprite));
        this.shadowSprite || (this.shadowSprite = this.shadow.getComponent(cc.Sprite));
        if (!this.sprite || resName.length < 1) return;
        var s1 = this.getSpriteFrameByName(resName, suffix);
        var s2 = this.getSpriteFrameByName(lightName, suffix);
        s1 && (this.sprite.spriteFrame = s1);
        if (s2) {
          this.light.spriteFrame = s2;
          var color = cc.color(255, 255, 255).fromHEX(lightColor);
          this.light.node.color = color;
          this.shadow.color = cc.color(255, 0, 0);
          this.shadow.opacity = 60;
        }
        this.shadowSprite.spriteFrame = this.sprite.spriteFrame;
        this.shadow.color = cc.Color.BLACK;
        this.shadow.opacity = 80;
      };
      Bullet.prototype.getSpriteFrameByName = function(resName, suffix, needDefaultSuffix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(needDefaultSuffix ? resName + "anim000" : resName));
        return spriteFrame;
      };
      Bullet.prototype.MeleeFinish = function() {
        this.shooter.addDestroyBullet(this.node);
      };
      Bullet.prototype.showBullet = function(hv) {
        this.hv = hv;
        this.rotateCollider(cc.v2(this.hv.x, this.hv.y));
        this.fire(this.hv.clone());
      };
      Bullet.prototype.BulletDestory = function() {
        this.sprite && (this.sprite.spriteFrame = null);
        LightManager_1.default.unRegisterLight(this.lights);
        this.shooter.addDestroyBullet(this.node);
      };
      Bullet.prototype.fire = function(hv) {
        var _this = this;
        this.currentLinearVelocity = cc.v2(hv.x, hv.y).mul(this.data.speed);
        this.entity.Move.linearVelocity = this.currentLinearVelocity;
        this.startPos = this.node.convertToWorldSpaceAR(cc.v3(0, 0));
        this.sprite.node.stopAllActions();
        this.node.stopAllActions();
        var ss = this.sprite;
        var idletween = cc.tween().delay(.1).call(function() {
          ss.spriteFrame = _this.getSpriteFrameByName(_this.data.resName, "anim000", true);
        }).delay(.1).call(function() {
          ss.spriteFrame = _this.getSpriteFrameByName(_this.data.resName, "anim001", true);
        }).delay(.1).call(function() {
          ss.spriteFrame = _this.getSpriteFrameByName(_this.data.resName, "anim002", true);
        });
        var rotatetween = cc.tween().by(.3, {
          angle: this.data.rotateAngle > 0 ? this.data.rotateAngle : 15
        });
        var spawntween = cc.tween().parallel(idletween, rotatetween);
        this.data.isRotate > 0 ? cc.tween(this.sprite.node).repeatForever(spawntween).start() : cc.tween(this.sprite.node).repeatForever(idletween).start();
        this.unscheduleAllCallbacks();
        this.data.lifeTime > 0 ? this.scheduleOnce(function() {
          _this.bulletHit();
        }, this.data.lifeTime) : this.scheduleOnce(function() {
          _this.bulletHit();
        }, 30);
        this.isTrackDelay = false;
        1 == this.data.isTracking && this.scheduleOnce(function() {
          _this.isTrackDelay = true;
        }, this.data.delaytrack);
        this.isDecelerateDelay = false;
        1 == this.data.isDecelerate && this.scheduleOnce(function() {
          _this.isDecelerateDelay = true;
        }, this.data.delayDecelerate);
        this.data.splitTime > 0 && this.data.splitBulletType.length > 0 && this.scheduleOnce(function() {
          _this.bulletHit();
          var pos = _this.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
          _this.shooter.fireSplitBullet(_this.data.splitBulletType, _this.base.angle, _this.shooter.node.convertToNodeSpaceAR(pos), _this.data.splitArcExNum, _this.data.splitLineExNum);
        }, this.data.splitTime);
      };
      Bullet.prototype.start = function() {};
      Bullet.prototype.onColliderPreSolve = function(other, self) {
        this.isFromPlayer || other.tag != CCollider_1.default.TAG.NONPLAYER && other.tag != CCollider_1.default.TAG.BOSS || (self.disabledOnce = true);
        !this.isFromPlayer || other.tag != CCollider_1.default.TAG.PLAYER && other.tag != CCollider_1.default.TAG.GOODNONPLAYER || (self.disabledOnce = true);
      };
      Bullet.prototype.onColliderEnter = function(other, self) {
        if (!other.sensor) {
          var isDestory = true;
          (other.tag == CCollider_1.default.TAG.PLAYER || other.tag == CCollider_1.default.TAG.NONPLAYER || other.tag == CCollider_1.default.TAG.BOSS || other.tag == CCollider_1.default.TAG.BOSS_HIT || other.tag == CCollider_1.default.TAG.BULLET || other.tag == CCollider_1.default.TAG.WARTER || other.sensor || this.data.isInvincible > 0 || other.tag == CCollider_1.default.TAG.WALL_TOP || other.tag == CCollider_1.default.TAG.WALL || other.tag == CCollider_1.default.TAG.BUILDING) && (isDestory = false);
          if (isDestory) {
            this.bulletHit();
            return;
          }
        }
        var isAttack = true;
        this.isFromPlayer || other.tag != CCollider_1.default.TAG.NONPLAYER && other.tag != CCollider_1.default.TAG.BOSS || (isAttack = false);
        !this.isFromPlayer || other.tag != CCollider_1.default.TAG.PLAYER && other.tag != CCollider_1.default.TAG.GOODNONPLAYER || (isAttack = false);
        other.tag == CCollider_1.default.TAG.BULLET && (isAttack = false);
        isAttack && this.attacking(other.node, other.tag, other.sensor);
      };
      Bullet.prototype.attacking = function(attackTarget, tag, sensor) {
        if (!attackTarget || this.isHit) return;
        var damage = new DamageData_1.default();
        var damageSuccess = false;
        damage.valueCopy(this.data.damage);
        damage.isRemote = true;
        var isDestory = false;
        this.data.from.pos = this.node.position;
        if (this.data.isInvincible > 0) isDestory = false; else if (tag == CCollider_1.default.TAG.NONPLAYER || tag == CCollider_1.default.TAG.GOODNONPLAYER) {
          var monster = attackTarget.getComponent(NonPlayer_1.default);
          if (monster && !monster.sc.isDied) {
            damageSuccess = monster.takeDamage(damage, this.data.from);
            if (damageSuccess) {
              this.addTargetAllStatus(monster, new FromData_1.default());
              this.shooter.player && this.shooter.player.exTrigger(TriggerData_1.default.GROUP_HIT, damage.isCriticalStrike ? TriggerData_1.default.TYPE_HIT_CRIT_REMOTE : TriggerData_1.default.TYPE_HIT_REMOTE, new FromData_1.default(), monster);
            }
            isDestory = true;
          }
        } else if (tag == CCollider_1.default.TAG.PLAYER) {
          var player = attackTarget.getComponent(Player_1.default);
          if (player && !player.sc.isDied) {
            var isReverse = false;
            player.shield.Status == Shield_1.default.STATUS_PARRY && 1 == player.shield.data.isReflect && (isReverse = this.revserseBullet(player.node.convertToWorldSpaceAR(cc.Vec2.ZERO)));
            if (!isReverse) {
              damageSuccess = player.takeDamage(damage, this.data.from);
              damageSuccess && this.addTargetAllStatus(player, this.data.from);
              isDestory = true;
            }
          }
        } else if (tag == CCollider_1.default.TAG.AOE) {
          var aoe = attackTarget.getComponent(AreaOfEffect_1.default);
          aoe && aoe.IsAttacking && aoe.data.canBreakBullet && (isDestory = true);
        } else if (tag == CCollider_1.default.TAG.BOSS) {
          var boss = attackTarget.getComponent(Boss_1.default);
          if (boss && !boss.sc.isDied) {
            damageSuccess = boss.takeDamage(damage, this.data.from);
            if (damageSuccess) {
              this.addTargetAllStatus(boss, new FromData_1.default());
              this.shooter.player && this.shooter.player.exTrigger(TriggerData_1.default.GROUP_HIT, damage.isCriticalStrike ? TriggerData_1.default.TYPE_HIT_CRIT_REMOTE : TriggerData_1.default.TYPE_HIT_REMOTE, new FromData_1.default(), boss);
            }
            isDestory = true;
          }
        } else if (tag == CCollider_1.default.TAG.PLAYER_HIT) {
          var helper = attackTarget.getComponent(MeleeCollideHelper_1.default);
          var meleeWeapon = void 0;
          helper && (meleeWeapon = helper.meleeWeapon);
          var shadowWeapon = void 0;
          if (!meleeWeapon) {
            shadowWeapon = attackTarget.getComponent(MeleeShadowWeapon_1.default);
            shadowWeapon && (meleeWeapon = shadowWeapon.meleeWeapon);
          }
          if (meleeWeapon && meleeWeapon.IsAttacking && !this.isFromPlayer) {
            var isReverse = false;
            if (meleeWeapon.IsReflect) {
              var n = shadowWeapon ? shadowWeapon.meleeWeapon.node : meleeWeapon.node;
              isReverse = this.revserseBullet(n.convertToWorldSpaceAR(cc.Vec2.ZERO));
            }
            isReverse || (isDestory = true);
          }
        } else if (tag == CCollider_1.default.TAG.BUILDING || tag == CCollider_1.default.TAG.WALL || tag == CCollider_1.default.TAG.WALL_TOP) {
          var interactBuilding = attackTarget.getComponent(InteractBuilding_1.default);
          if (1 == this.data.canBreakBuilding && interactBuilding) {
            damageSuccess = true;
            interactBuilding.takeDamage(damage, this.data.from);
          }
          if (!damageSuccess) {
            var hitBuilding = attackTarget.getComponent(NormalBuilding_1.default);
            if (1 == this.data.canBreakBuilding && hitBuilding) {
              damageSuccess = true;
              hitBuilding.takeDamage(damage, this.data.from);
            }
          }
          if (!damageSuccess) {
            var wall = attackTarget.getComponent(Wall_1.default);
            if (wall) {
              isDestory = !sensor;
              this.ignoreEmptyWall && wall.isEmptyWall() && (isDestory = false);
            }
            isDestory && attackTarget.getComponent(ExitDoor_1.default) && (isDestory = false);
          }
          damageSuccess || attackTarget.getComponent(AirExit_1.default) && (isDestory = !this.ignoreEmptyWall);
        } else if (!this.isFromPlayer && tag == CCollider_1.default.TAG.ENERGY_SHIELD) {
          var shield = attackTarget.getComponent(EnergyShield_1.default);
          shield && shield.isValid && (damageSuccess = shield.takeDamage(damage, this.data.from));
          damageSuccess && (isDestory = true);
        }
        isDestory && this.bulletHit();
      };
      Bullet.prototype.revserseBullet = function(targetWorldPos) {
        if (this.isReserved) {
          this.isReserved = true;
          return false;
        }
        var angle = -180 + Logic_1.default.getRandomNum(0, 10) - 20;
        this.changeAngle(this.sprite.node.angle + angle);
        this.currentLinearVelocity = this.currentLinearVelocity.rotate(angle * Math.PI / 180);
        this.isFromPlayer = true;
        this.data.isTracking = 0;
        return true;
      };
      Bullet.prototype.bulletHit = function() {
        if (this.isHit) return;
        this.isHit = true;
        if (this.anim && !this.anim.getAnimationState("Bullet001Hit").isPlaying) {
          this.currentLinearVelocity = cc.v2(0, 0);
          this.entity.Move.linearVelocity = cc.v2(0, 0);
          this.anim.play("Bullet001Hit");
        }
        if (this.data.isBoom > 0) {
          var pos = this.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
          pos = this.shooter.node.convertToNodeSpaceAR(pos);
          this.shooter.fireAoe(this.boom, new AreaOfEffectData_1.default().init(1, .2, 0, 0, IndexZ_1.default.OVERHEAD, !this.isFromPlayer, true, true, false, false, new DamageData_1.default(2), FromData_1.default.getClone("\u7206\u70b8", "boom000anim004", pos), []), pos, 0, null, true);
          AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            isHeavyShaking: true
          });
        }
        if (this.aoePrefab) {
          var aoe = cc.instantiate(this.aoePrefab).getComponent(AreaOfEffect_1.default);
          aoe && aoe.show(this.node.parent, this.node.position, this.hv, 0, this.aoeData);
        }
      };
      Bullet.prototype.hasNearEnemy = function() {
        if (1 != this.data.isTracking || !this.dungeon) return cc.Vec3.ZERO;
        var needRefresh = this.trackCount > 10;
        this.trackCount > 10 && (this.trackCount = 0);
        return this.getTrackDirection(needRefresh);
      };
      Bullet.prototype.getTrackDirection = function(needRefresh) {
        this.trackCount++;
        ActorUtils_1.default.isTargetCanTrack(this.currentTrackActor) && !needRefresh || (this.currentTrackActor = ActorUtils_1.default.getNearestEnemyActor(this.node.position, !this.isFromPlayer, this.dungeon, 500));
        return ActorUtils_1.default.getTargetDirection(this.node.position, this.currentTrackActor, false);
      };
      Bullet.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        if (1 == this.data.fixedRotation) return;
        this.changeAngle(Utils_1.default.getRotateAngle(direction, this.node.scaleX < 0));
      };
      Bullet.prototype.addTargetAllStatus = function(target, from) {
        this.addTargetStatus(this.data.damage.iceRate, target, StatusManager_1.default.FROZEN, from);
        this.addTargetStatus(this.data.damage.fireRate, target, StatusManager_1.default.BURNING, from);
        this.addTargetStatus(this.data.damage.lighteningRate, target, StatusManager_1.default.DIZZ, from);
        this.addTargetStatus(this.data.damage.toxicRate, target, StatusManager_1.default.TOXICOSIS, from);
        this.addTargetStatus(this.data.damage.curseRate, target, StatusManager_1.default.CURSING, from);
        this.addTargetStatus(this.data.damage.realRate, target, StatusManager_1.default.BLEEDING, from);
        this.addTargetStatus(this.data.statusRate, target, this.data.statusType, from);
      };
      Bullet.prototype.addTargetStatus = function(rate, target, statusType, from) {
        Logic_1.default.getRandomNum(0, 100) < rate && target.addStatus(statusType, from);
      };
      __decorate([ property(cc.Prefab) ], Bullet.prototype, "boom", void 0);
      __decorate([ property(cc.Node) ], Bullet.prototype, "root", void 0);
      __decorate([ property(cc.Node) ], Bullet.prototype, "shadow", void 0);
      Bullet = __decorate([ ccclass ], Bullet);
      return Bullet;
    }(BaseColliderComponent_1.default);
    exports.default = Bullet;
    cc._RF.pop();
  }, {
    "../actor/AreaOfEffect": "AreaOfEffect",
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../boss/Boss": "Boss",
    "../building/AirExit": "AirExit",
    "../building/EnergyShield": "EnergyShield",
    "../building/ExitDoor": "ExitDoor",
    "../building/InteractBuilding": "InteractBuilding",
    "../building/NormalBuilding": "NormalBuilding",
    "../building/Wall": "Wall",
    "../collider/CCollider": "CCollider",
    "../data/AreaOfEffectData": "AreaOfEffectData",
    "../data/BulletData": "BulletData",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../data/TriggerData": "TriggerData",
    "../effect/ShadowOfSight": "ShadowOfSight",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../logic/MeleeCollideHelper": "MeleeCollideHelper",
    "../logic/MeleeShadowWeapon": "MeleeShadowWeapon",
    "../logic/NonPlayer": "NonPlayer",
    "../logic/Player": "Player",
    "../logic/Shield": "Shield",
    "../manager/LightManager": "LightManager",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/Utils": "Utils"
  } ],
  CCollider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8b89bNPNd5CPpD7MGNVsQ0f", "CCollider");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Random_1 = require("../utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CCollider = function(_super) {
      __extends(CCollider, _super);
      function CCollider() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.audioMaterial = CCollider_1.AUDIO_MATERIAL.METAL;
        _this.tag = CCollider_1.TAG.DEFAULT;
        _this.offsetX = 0;
        _this.offsetY = 0;
        _this.type = CCollider_1.TYPE.RECT;
        _this.radius = 64;
        _this.w = 128;
        _this.h = 128;
        _this.zHeight = 32;
        _this.bounce = 0;
        _this.sensor = false;
        _this.isStatic = false;
        _this.ignoreSameTag = false;
        _this.targetTagList = [];
        _this.ignoreTagList = [];
        _this.inColliders = new Map();
        _this.id = CCollider_1.genNonDuplicateID();
        _this.targetTags = new Map();
        _this.ignoreTags = new Map();
        _this.isStaying = false;
        _this._points = [];
        _this.isRotate = false;
        _this.baseChangedCount = 0;
        _this._disableOnce = false;
        _this._lastOffsetX = 0;
        _this._lastOffsetY = 0;
        _this._lastW = 0;
        _this._lastH = 0;
        _this._lastR = 0;
        return _this;
      }
      CCollider_1 = CCollider;
      Object.defineProperty(CCollider.prototype, "disabledOnce", {
        get: function() {
          return this._disableOnce;
        },
        set: function(disabledOnce) {
          this._disableOnce = disabledOnce;
        },
        enumerable: false,
        configurable: true
      });
      CCollider.prototype.setSize = function(s, zHeight) {
        this.w = s.width;
        this.h = s.height;
        zHeight && (this.zHeight = zHeight);
      };
      Object.defineProperty(CCollider.prototype, "offset", {
        get: function() {
          return cc.v2(this.offsetX, this.offsetY);
        },
        set: function(o) {
          this.offsetX = o.x;
          this.offsetY = o.y;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CCollider.prototype, "w_radius", {
        get: function() {
          return this._radius;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CCollider.prototype, "w_center", {
        get: function() {
          return cc.v2(this._center);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CCollider.prototype, "points", {
        get: function() {
          return this._points;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CCollider.prototype, "z", {
        get: function() {
          return this.entity.Transform.z;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CCollider.prototype, "isEmpty", {
        get: function() {
          return this.type == CCollider_1.TYPE.CIRCLE && 0 == this.radius || this.type == CCollider_1.TYPE.RECT && (0 == this.w || 0 == this.h);
        },
        enumerable: false,
        configurable: true
      });
      CCollider.prototype.setOnContactListener = function(onContactListener) {
        this.onContactListener = onContactListener;
      };
      CCollider.prototype.setEntityNode = function(node) {
        this.entity.NodeRender.node = node;
      };
      CCollider.prototype.isChanged = function() {
        return this._lastH != this.h || this._lastW != this.w || this._lastR != this.radius || this._lastOffsetX != this.offsetX || this._lastOffsetY != this.offsetY;
      };
      CCollider.prototype.fixCenterAndScale = function() {
        this.isStaying = false;
        this.baseChangedCount = 0;
        var worldMatrix = new cc.Mat4();
        this.node.getWorldMatrix(worldMatrix);
        if (!this.isChanged() && this._lastTransWorldMatrix && this._lastTransWorldMatrix.equals(worldMatrix)) return;
        var offset = cc.v3(this.offsetX, this.offsetY);
        this._center = cc.v3(this.offsetX, this.offsetY).transformMat4(worldMatrix);
        this._lastTransWorldMatrix = worldMatrix.clone();
        this._lastW = this.w;
        this._lastH = this.h;
        this._lastR = this.radius;
        this._lastOffsetX = this.offsetX;
        this._lastOffsetY = this.offsetY;
        var worldScale = cc.v3(1, 1);
        worldMatrix.getScale(worldScale);
        this._radius = this.radius * Math.abs(worldScale.x);
        var wlen = this.w * Math.abs(worldScale.x);
        var hlen = this.h * Math.abs(worldScale.y);
        if (this.isCircle) {
          this.isRotate = false;
          this._points = [];
          this._aabb = cc.rect(this._center.x - this._radius, this._center.y - this._radius, 2 * this._radius, 2 * this._radius);
        } else {
          this._aabb = cc.rect(this._center.x - wlen / 2, this._center.y - hlen / 2, wlen, hlen);
          var p0 = offset.add(cc.v3(-this.w / 2, -this.h / 2)).transformMat4(worldMatrix);
          var p1 = offset.add(cc.v3(-this.w / 2, this.h / 2)).transformMat4(worldMatrix);
          var p2 = offset.add(cc.v3(this.w / 2, this.h / 2)).transformMat4(worldMatrix);
          var p3 = offset.add(cc.v3(this.w / 2, -this.h / 2)).transformMat4(worldMatrix);
          this._points = [ cc.v2(p0), cc.v2(p1), cc.v2(p2), cc.v2(p3) ];
          this.isRotate = p0.x != p1.x;
          if (this.isRotate) {
            var ps = [];
            var tp0 = this._points[0].clone();
            var startIndex = 0;
            for (var i = 1; i < this._points.length; i++) if (this._points[i].x < tp0.x) {
              tp0 = this._points[i].clone();
              startIndex = i;
            }
            for (var i = startIndex; i < this._points.length; i++) ps.push(this._points[i].clone());
            for (var i = 0; i < startIndex; i++) ps.push(this._points[i].clone());
            var w = Math.abs(ps[0].x - ps[2].x);
            var h = Math.abs(ps[1].y - ps[3].y);
            this._aabb = cc.rect(ps[0].x, ps[1].y < ps[3].y ? ps[1].y : ps[3].y, w, h);
          }
        }
      };
      CCollider.prototype.updateChildOffset = function() {};
      CCollider.prototype.onLoad = function() {
        this.setTargetTags(this.targetTagList);
        this.setIgnoreTags(this.ignoreTagList);
      };
      CCollider.prototype.setTargetTags = function(tags, isRemove) {
        for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {
          var tag = tags_1[_i];
          isRemove ? this.targetTags.delete(tag) : this.targetTags.set(tag, true);
        }
      };
      CCollider.prototype.setIgnoreTags = function(tags, isRemove) {
        for (var _i = 0, tags_2 = tags; _i < tags_2.length; _i++) {
          var tag = tags_2[_i];
          isRemove ? this.ignoreTags.delete(tag) : this.ignoreTags.set(tag, true);
        }
      };
      CCollider.prototype.isBelowOther = function(other) {
        return this.z + this.zHeight < other.z;
      };
      CCollider.prototype.isAboveOther = function(other) {
        return this.z >= other.z + other.zHeight;
      };
      CCollider.prototype.isHeightNotCollid = function(other) {
        return this.isBelowOther(other) || this.isAboveOther(other);
      };
      CCollider.prototype.preSolve = function(other, dt) {
        if (this.isHeightNotCollid(other)) return;
        this.onContactListener && this.onContactListener.onColliderPreSolve(other, this);
      };
      CCollider.prototype.contact = function(other, dt) {
        if (this._disableOnce || other.disabledOnce || this.isHeightNotCollid(other)) return;
        if (this.inColliders.has(other.id)) {
          this.isStaying = true;
          this.onContactListener && this.onContactListener.onColliderStay(other, this);
        } else {
          this.inColliders.set(other.id, true);
          this.onContactListener && this.onContactListener.onColliderEnter(other, this);
        }
      };
      CCollider.prototype.physicTest = function(other, dt) {
        if (this._disableOnce || other.disabledOnce || !this.entity || !other.entity || this.sensor || other.sensor || this.isStatic) return;
        var tps = this._points;
        var ops = other._points;
        (this.isRotate || this.type == CCollider_1.TYPE.CIRCLE || this.node.scaleX < 0 || this.node.scaleY < 0) && (tps = [ cc.v2(this.Aabb.x, this.Aabb.y), cc.v2(this.Aabb.x, this.Aabb.y + this.Aabb.height), cc.v2(this.Aabb.x + this.Aabb.width, this.Aabb.y + this.Aabb.height), cc.v2(this.Aabb.x + this.Aabb.width, this.Aabb.y) ]);
        (other.isRotate || other.type == CCollider_1.TYPE.CIRCLE || other.node.scaleX < 0 || other.node.scaleY < 0) && (ops = [ cc.v2(other.Aabb.x, other.Aabb.y), cc.v2(other.Aabb.x, other.Aabb.y + other.Aabb.height), cc.v2(other.Aabb.x + other.Aabb.width, other.Aabb.y + other.Aabb.height), cc.v2(other.Aabb.x + other.Aabb.width, other.Aabb.y) ]);
        var w1 = tps[3].x - tps[0].x;
        var w2 = ops[3].x - ops[0].x;
        var h1 = tps[1].y - tps[0].y;
        var h2 = ops[1].y - ops[0].y;
        var center1 = cc.v2(tps[0].x + w1 / 2, tps[0].y + h1 / 2);
        var center2 = cc.v2(ops[0].x + w2 / 2, ops[0].y + h2 / 2);
        var rect1 = cc.rect(tps[0].x, tps[0].y, w1, h1);
        var rect2 = cc.rect(ops[0].x, ops[0].y, w2, h2);
        var isLeft = tps[0].x < ops[0].x;
        var isRight = tps[2].x > ops[2].x;
        var isTop = tps[1].y > ops[1].y;
        var isBottom = tps[0].y < ops[0].y;
        var pos = this.entity.Move.linearVelocity.clone();
        var offset = this.bounce > 0 ? this.bounce : 1;
        var lenVertical = Math.abs(center1.y - center2.y);
        var lenHorizonal = Math.abs(center1.x - center2.x);
        var offsetVertical = (h1 + h2) / 2 - lenVertical;
        var offsetHorizonal = (w1 + w2) / 2 - lenHorizonal;
        if (this.isAboveOther(other)) {
          this.entity.Transform.base = other.z + other.zHeight;
          this.baseChangedCount++;
        } else if (this.z < other.z) {
          if (this.z + this.zHeight >= other.z) {
            this.entity.Transform.z = other.z - this.zHeight;
            this.entity.Move.linearVelocityZ > 0 && (this.entity.Move.linearVelocityZ = 0);
          }
        } else rect1.contains(center2) || rect2.contains(center1) ? pos = center1.sub(center2).normalizeSelf().mul(offset) : isLeft && pos.x >= 0 && offsetHorizonal > 0 && offsetHorizonal < offsetVertical ? pos.x = -offset : isRight && pos.x <= 0 && offsetHorizonal > 0 && offsetHorizonal < offsetVertical ? pos.x = offset : isTop && pos.y <= 0 && offsetVertical > 0 && offsetHorizonal > offsetVertical ? pos.y = offset : isBottom && pos.y >= 0 && offsetVertical > 0 && offsetHorizonal > offsetVertical && (pos.y = -offset);
        if (this.entity.Move.linearVelocityZ <= 0 && this.z + CCollider_1.MIN_HEIGHT >= other.z + other.zHeight && this.z < other.z + other.zHeight) {
          pos.mulSelf(.5);
          this.entity.Move.linearVelocityZ = 5;
        }
        this.entity.Move.linearVelocity = pos;
      };
      CCollider.prototype.exit = function(other) {
        if (this.inColliders.has(other.id)) {
          this.inColliders.delete(other.id);
          this.disabledOnce = false;
          this.onContactListener && this.onContactListener.onColliderExit(other, this);
        }
      };
      CCollider.prototype.drawDebug = function(graphics) {
        if (!graphics) return;
        graphics.strokeColor = cc.color(255, 255, 255, 160);
        graphics.fillColor = cc.color(255, 255, 255, 60);
        graphics.lineWidth = 4;
        var center = graphics.node.convertToNodeSpaceAR(this.w_center);
        if (this.type == CCollider_1.TYPE.CIRCLE) {
          var r1 = graphics.node.convertToNodeSpaceAR(cc.v3(this.w_radius, 0));
          var r2 = graphics.node.convertToNodeSpaceAR(cc.v3(0, 0));
          graphics.circle(center.x, center.y, r1.sub(r2).mag());
          this.isStaying && graphics.fill();
          graphics.stroke();
        } else {
          var p0_1 = graphics.node.convertToNodeSpaceAR(this.points[0]);
          graphics.moveTo(p0_1.x, p0_1.y);
          for (var i = 1; i < this.points.length; i++) {
            var p_1 = graphics.node.convertToNodeSpaceAR(this.points[i]);
            graphics.lineTo(p_1.x, p_1.y);
          }
          graphics.close();
          this.isStaying && graphics.fill();
          graphics.stroke();
        }
        graphics.strokeColor = cc.color(255, 0, 0, 160);
        var aabb = this.Aabb;
        var p = graphics.node.convertToNodeSpaceAR(cc.v3(aabb.x, aabb.y));
        var p0 = graphics.node.convertToNodeSpaceAR(cc.v3(0, 0));
        var pw = graphics.node.convertToNodeSpaceAR(cc.v3(aabb.width, 0));
        var ph = graphics.node.convertToNodeSpaceAR(cc.v3(aabb.height, 0));
        var nw = pw.sub(p0).mag();
        var nh = ph.sub(p0).mag();
        graphics.rect(p.x, p.y, nw, nh);
        graphics.stroke();
        if (!this.sensor) {
          var zh = graphics.node.convertToNodeSpaceAR(cc.v3(this.zHeight, 0));
          var nzh = zh.sub(p0).mag();
          graphics.strokeColor = cc.color(0, 0, 255, 40);
          graphics.moveTo(p.x + .25 * nw, p.y);
          graphics.lineTo(p.x + .25 * nw, p.y + nzh);
          graphics.stroke();
          graphics.strokeColor = cc.color(0, 255, 0, 40);
          graphics.moveTo(p.x + .75 * nw, p.y + nh);
          graphics.lineTo(p.x + .75 * nw, p.y + nh + nzh);
          graphics.stroke();
          graphics.strokeColor = cc.color(0, 255, 255, 40);
          graphics.moveTo(p.x + .25 * nw, p.y + nzh);
          graphics.lineTo(p.x + .75 * nw, p.y + nh + nzh);
          graphics.stroke();
        }
      };
      Object.defineProperty(CCollider.prototype, "Aabb", {
        get: function() {
          return this._aabb;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CCollider.prototype, "isCircle", {
        get: function() {
          return this.type == CCollider_1.TYPE.CIRCLE;
        },
        enumerable: false,
        configurable: true
      });
      CCollider.prototype.start = function() {};
      CCollider.genNonDuplicateID = function() {
        return Number(~~(1e6 * Random_1.default.rand()) + Date.now());
      };
      var CCollider_1;
      CCollider.TYPE = cc.Enum({
        CIRCLE: 0,
        RECT: 1
      });
      CCollider.GROUP = cc.Enum({
        DEFAULT: 0,
        ACTOR: 1
      });
      CCollider.TAG = cc.Enum({
        DEFAULT: 0,
        WALL: 1,
        WALL_TOP: 2,
        PLAYER: 3,
        PLAYER_HIT: 4,
        NONPLAYER: 5,
        NONPLAYER_HIT: 6,
        GOODNONPLAYER: 7,
        GOODNONPLAYER_HIT: 8,
        BOSS: 9,
        BOSS_HIT: 10,
        BULLET: 11,
        BUILDING: 12,
        AOE: 13,
        ITEM: 14,
        EQUIPMENT: 15,
        COIN: 16,
        TIPS: 17,
        WARTER: 18,
        ENERGY_SHIELD: 19,
        LIGHT: 20,
        PLAYER_INTERACT: 21,
        INTERACT: 22,
        EFFECT: 23,
        VEHICLE: 24,
        BADPLAYER: 25,
        BADPLAYER_HIT: 26
      });
      CCollider.AUDIO_MATERIAL = cc.Enum({
        METAL: 0,
        WOOD: 1,
        STONE: 2,
        PLASTIC: 3,
        MEAT: 4
      });
      CCollider.MIN_HEIGHT = 17;
      __decorate([ property({
        type: CCollider_1.TAG,
        displayName: "Collider Tag"
      }) ], CCollider.prototype, "tag", void 0);
      __decorate([ property ], CCollider.prototype, "offsetX", void 0);
      __decorate([ property ], CCollider.prototype, "offsetY", void 0);
      __decorate([ property({
        type: CCollider_1.TYPE,
        displayName: "Shape Type"
      }) ], CCollider.prototype, "type", void 0);
      __decorate([ property({
        visible: function() {
          return this.type == CCollider_1.TYPE.CIRCLE;
        }
      }) ], CCollider.prototype, "radius", void 0);
      __decorate([ property({
        visible: function() {
          return this.type == CCollider_1.TYPE.RECT;
        }
      }) ], CCollider.prototype, "w", void 0);
      __decorate([ property({
        visible: function() {
          return this.type == CCollider_1.TYPE.RECT;
        }
      }) ], CCollider.prototype, "h", void 0);
      __decorate([ property ], CCollider.prototype, "zHeight", void 0);
      __decorate([ property ], CCollider.prototype, "bounce", void 0);
      __decorate([ property ], CCollider.prototype, "sensor", void 0);
      __decorate([ property ], CCollider.prototype, "isStatic", void 0);
      __decorate([ property ], CCollider.prototype, "ignoreSameTag", void 0);
      __decorate([ property({
        type: [ CCollider_1.TAG ],
        displayName: "Target Tag"
      }) ], CCollider.prototype, "targetTagList", void 0);
      __decorate([ property({
        type: [ CCollider_1.TAG ],
        displayName: "Ignore Tag",
        visible: function() {
          return this.targetTagList.length < 1;
        }
      }) ], CCollider.prototype, "ignoreTagList", void 0);
      CCollider = CCollider_1 = __decorate([ ccclass ], CCollider);
      return CCollider;
    }(cc.Component);
    exports.default = CCollider;
    cc._RF.pop();
  }, {
    "../utils/Random": "Random"
  } ],
  CameraControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aaca098lw9M94SueX+ajVM7", "CameraControl");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("./Dungeon");
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CameraControl = function(_super) {
      __extends(CameraControl, _super);
      function CameraControl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeSpace = null;
        _this.isShaking = false;
        _this.isHeavyShaking = false;
        _this.offsetIndex = 0;
        _this.offsetArr = [ cc.v3(0, 2), cc.v3(0, 2), cc.v3(0, -3), cc.v3(0, -3), cc.v3(1, 2), cc.v3(1, 2), cc.v3(-1, -1), cc.v3(-1, -1) ];
        _this.offsetArr1 = [ cc.v3(0, 3), cc.v3(0, 3), cc.v3(0, -6), cc.v3(0, -6), cc.v3(3, 6), cc.v3(3, 6), cc.v3(-3, -3), cc.v3(-3, -3) ];
        _this.cameraTargetActor = null;
        _this.cameraTargetOffset = cc.Vec3.ZERO;
        _this.cameraZoom = CameraControl_1.DEFAULT_ZOOM;
        _this.needZoomIn = false;
        return _this;
      }
      CameraControl_1 = CameraControl;
      Object.defineProperty(CameraControl.prototype, "Target", {
        get: function() {
          return this.cameraTargetActor;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CameraControl.prototype, "TargetOffset", {
        get: function() {
          return this.cameraTargetOffset;
        },
        enumerable: false,
        configurable: true
      });
      CameraControl.prototype.onLoad = function() {
        var _this = this;
        this.camera = this.getComponent(cc.Camera);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.CAMERA_SHAKE, function(detail) {
          _this.shakeCamera(detail.isHeavyShaking);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.CAMERA_LOOK, function(detail) {
          _this.followTarget(true);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN, function(detail) {
          _this.node && (_this.cameraZoom = CameraControl_1.DEFAULT_ZOOM_MAX);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN_LOCK, function(detail) {
          if (_this.node) {
            _this.needZoomIn = !detail.unlock;
            _this.cameraZoom = _this.needZoomIn ? CameraControl_1.DEFAULT_ZOOM_MIN : CameraControl_1.DEFAULT_ZOOM;
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_OUT, function(detail) {
          _this.node && (_this.cameraZoom = _this.needZoomIn ? CameraControl_1.DEFAULT_ZOOM_MIN : CameraControl_1.DEFAULT_ZOOM);
        });
      };
      CameraControl.prototype.changeCameraTarget = function(actor, offset) {
        this.cameraTargetActor = actor;
        this.cameraTargetOffset = offset ? offset.clone() : cc.Vec3.ZERO;
      };
      CameraControl.prototype.start = function() {};
      CameraControl.prototype.lateUpdate = function() {
        this.cameraTargetActor && this.followTarget(false);
        this.camera.zoomRatio = this.lerpNumber(this.camera.zoomRatio, this.cameraZoom, .05);
      };
      CameraControl.prototype.followTarget = function(isDirect) {
        if (!this.nodeSpace || !this.cameraTargetActor) return;
        var offset = cc.v3(0, 0);
        var targetPos = this.nodeSpace.convertToWorldSpaceAR(this.cameraTargetActor.node.position.clone().addSelf(offset.add(this.cameraTargetOffset)));
        var pos = this.node.parent.convertToNodeSpaceAR(targetPos);
        this.cameraTargetActor.entity && this.cameraTargetActor.entity.Transform.base > 2 * Dungeon_1.default.TILE_SIZE && (pos.y += this.cameraTargetActor.entity.Transform.base);
        if (isDirect) {
          this.node.position = pos;
          cc.log("mainCamera pos:" + this.node.position);
        } else this.node.position = this.lerp(this.node.position, pos, .1);
        if (this.isShaking) {
          this.offsetIndex > this.offsetArr.length - 1 && (this.offsetIndex = 0);
          this.node.position = this.node.position.addSelf(this.isHeavyShaking ? this.offsetArr1[this.offsetIndex] : this.offsetArr[this.offsetIndex]);
          this.offsetIndex++;
        }
      };
      CameraControl.prototype.shakeCamera = function(isHeavyShaking) {
        var _this = this;
        if (!this.node) return;
        this.isHeavyShaking = isHeavyShaking;
        this.isShaking = true;
        this.scheduleOnce(function() {
          _this.isShaking = false;
        }, .2);
      };
      CameraControl.prototype.lerpNumber = function(a, b, r) {
        return a + (b - a) * r;
      };
      CameraControl.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      var CameraControl_1;
      CameraControl.DEFAULT_ZOOM_MAX = 2;
      CameraControl.DEFAULT_ZOOM_MIN = .6;
      CameraControl.DEFAULT_ZOOM = 1;
      __decorate([ property(cc.Node) ], CameraControl.prototype, "nodeSpace", void 0);
      CameraControl = CameraControl_1 = __decorate([ ccclass ], CameraControl);
      return CameraControl;
    }(cc.Component);
    exports.default = CameraControl;
    cc._RF.pop();
  }, {
    "./Dungeon": "Dungeon",
    "./EventHelper": "EventHelper"
  } ],
  CampFire: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1c424MJYhhGnYiXSF5IIdkC", "CampFire");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Building_1 = require("./Building");
    var CCollider_1 = require("../collider/CCollider");
    var FromData_1 = require("../data/FromData");
    var Player_1 = require("../logic/Player");
    var StatusManager_1 = require("../manager/StatusManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CampFire = function(_super) {
      __extends(CampFire, _super);
      function CampFire() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isAddTime = true;
        _this.timeDelay = 0;
        return _this;
      }
      CampFire.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > 5) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      CampFire.prototype.update = function(dt) {
        this.isTimeDelay(dt) && (this.isAddTime = true);
      };
      CampFire.prototype.onColliderEnter = function(other, self) {};
      CampFire.prototype.onColliderStay = function(other, self) {
        if (self.sensor && other.tag == CCollider_1.default.TAG.PLAYER && this.isAddTime) {
          this.isAddTime = false;
          var player = other.getComponent(Player_1.default);
          player && player.addStatus(StatusManager_1.default.CAMP_FIRE, new FromData_1.default());
        }
      };
      CampFire.prototype.onColliderExit = function(other, self) {};
      CampFire = __decorate([ ccclass ], CampFire);
      return CampFire;
    }(Building_1.default);
    exports.default = CampFire;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/FromData": "FromData",
    "../logic/Player": "Player",
    "../manager/StatusManager": "StatusManager",
    "./Building": "Building"
  } ],
  CaptainSword: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e541b/KaoRBdL9VgXHoN6dM", "CaptainSword");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var FromData_1 = require("../data/FromData");
    var Captain_1 = require("./Captain");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CaptainSword = function(_super) {
      __extends(CaptainSword, _super);
      function CaptainSword() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.damage = 12;
        _this.parentNode = null;
        _this.isShow = false;
        return _this;
      }
      CaptainSword.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.entity && this.entity.Move && (this.entity.Move.isStatic = true);
      };
      CaptainSword.prototype.start = function() {
        this.isShow = false;
      };
      CaptainSword.prototype.onColliderEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isShow && this.node.active) {
          this.isShow = false;
          var dd = new DamageData_1.default();
          dd.physicalDamage = this.damage;
          target.takeDamage(dd, FromData_1.default.getClone(this.actorName(), "captain_head", this.node.position), this.parentNode.getComponent(Captain_1.default));
        }
      };
      CaptainSword.prototype.actorName = function() {
        return "\u90aa\u6076\u8239\u957f";
      };
      __decorate([ property ], CaptainSword.prototype, "damage", void 0);
      __decorate([ property(cc.Node) ], CaptainSword.prototype, "parentNode", void 0);
      CaptainSword = __decorate([ ccclass ], CaptainSword);
      return CaptainSword;
    }(BaseColliderComponent_1.default);
    exports.default = CaptainSword;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../utils/ActorUtils": "ActorUtils",
    "./Captain": "Captain"
  } ],
  Captain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6d826iFR+pBDJHGFIoYZ400", "Captain");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CaptainSword_1 = require("./CaptainSword");
    var Dungeon_1 = require("../logic/Dungeon");
    var Shooter_1 = require("../logic/Shooter");
    var DamageData_1 = require("../data/DamageData");
    var Boss_1 = require("./Boss");
    var NextStep_1 = require("../utils/NextStep");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var Logic_1 = require("../logic/Logic");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Captain = function(_super) {
      __extends(Captain, _super);
      function Captain() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sword = null;
        _this.healthBar = null;
        _this.isFaceRight = true;
        _this.isMoving = false;
        _this.timeDelay = 0;
        _this.isFall = false;
        _this.shooter = null;
        _this.exshooter = null;
        _this.attackSkill = new NextStep_1.default();
        _this.fireSkill = new NextStep_1.default();
        _this.jumpSkill = new NextStep_1.default();
        return _this;
      }
      Captain.prototype.init = function(type) {};
      Captain.prototype.onLoad = function() {
        this.attackSkill.IsExcuting = false;
        this.sc.isDied = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter = this.node.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.exshooter = this.node.getChildByName("ExShooter").getComponent(Shooter_1.default);
        this.shooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "captain_head", this.node.position));
        this.exshooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "captain_head", this.node.position));
        this.updatePlayerPos();
        this.entity.NodeRender.node = this.node;
        this.entity.Move.damping = 1;
      };
      Captain.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      Captain.prototype.AttackDamageStart = function() {
        this.sword.isShow = true;
      };
      Captain.prototype.AttackDamageFinish = function() {
        this.sword.isShow = false;
      };
      Captain.prototype.AttackStart = function() {
        this.attackSkill.IsExcuting = true;
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
      };
      Captain.prototype.AttackFinish = function() {
        this.attackSkill.IsExcuting = false;
      };
      Captain.prototype.JumpStart = function() {
        this.jumpSkill.IsExcuting = true;
        this.getComponent(CCollider_1.default).sensor = true;
      };
      Captain.prototype.FireSwordLight = function() {
        this.shooter.setHv(cc.v2(this.isFaceRight ? 1 : -1, 0));
        this.shooter.dungeon = this.dungeon;
        this.shooter.actor = this;
        this.shooter.data.bulletType = "bullet043";
        this.shooter.fireBullet(0, cc.v3(16, 0));
      };
      Captain.prototype.JumpFinish = function() {
        var _this = this;
        this.jumpSkill.IsExcuting = false;
        this.isFall = true;
        this.scheduleOnce(function() {
          _this.isFall = false;
        }, .1);
        this.getComponent(CCollider_1.default).sensor = false;
        if (!this.dungeon || !this.exshooter) return;
        var hv = this.dungeon.player.getCenterPosition().sub(this.node.position);
        if (!hv.equals(cc.Vec3.ZERO)) {
          hv = hv.normalizeSelf();
          this.exshooter.setHv(cc.v2(hv));
          this.exshooter.dungeon = this.dungeon;
          this.exshooter.actor = this;
          this.exshooter.data.bulletType = "bullet033";
          this.exshooter.data.bulletArcOffsetX = 64;
          this.exshooter.data.bulletArcExNum = 99;
          this.exshooter.data.bulletArcOffsetX = 32;
          this.exshooter.data.bulletLineInterval = 1;
          this.data.currentHealth < this.data.Common.MaxHealth / 2 && (this.exshooter.data.bulletLineExNum = 1);
          this.exshooter.fireBullet(0, cc.v3(16, 0));
        }
      };
      Captain.prototype.fireWithGun = function() {
        if (!this.dungeon || !this.shooter) return;
        var hv = this.dungeon.player.getCenterPosition().sub(this.entity.Transform.position);
        if (!hv.equals(cc.Vec3.ZERO)) {
          this.shooter.setHv(cc.v2(hv).normalize());
          this.shooter.dungeon = this.dungeon;
          this.shooter.actor = this;
          this.shooter.data.bulletType = "bullet102";
          this.shooter.fireBullet(0, cc.v3(16, 0));
        }
      };
      Captain.prototype.OpenFire = function() {
        var _this = this;
        if (!this.dungeon || !this.shooter) return;
        this.shooter.data.bulletArcExNum = 0;
        this.fireWithGun();
        this.data.currentHealth < this.data.Common.MaxHealth / 2 && this.scheduleOnce(function() {
          _this.fireWithGun();
        }, .5);
      };
      Captain.prototype.onColliderStay = function(other, self) {
        if (self.tag == CCollider_1.default.TAG.BOSS_HIT) {
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
          if (target && this.isFall && !this.sc.isDied) {
            this.isFall = false;
            var dd = new DamageData_1.default();
            dd.physicalDamage = 10;
            target.takeDamage(dd, FromData_1.default.getClone(this.actorName(), "captain_head", this.node.position), this);
          }
        }
      };
      Captain.prototype.updateLogic = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.healthBar.node.active = !this.sc.isDied;
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          this.bossAction();
          this.JumpMove();
        }
        if (this.dungeon) {
          var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
          playerDis < 96 && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
        }
        this.sc.isDied && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
        this.healthBar.node.active = !this.sc.isDied;
        this.data.currentHealth < 1 && this.killed();
        this.node.scaleX = this.isFaceRight ? 1 : -1;
      };
      Captain.prototype.takeDamage = function(damage) {
        var isPlayJump = this.anim.getAnimationState("CaptainJump").isPlaying;
        if (this.sc.isDied || isPlayJump) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Captain.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.anim.play("CaptainDie");
        var collider = this.getComponent(CCollider_1.default);
        collider.sensor = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Captain.prototype.bossAction = function() {
        var _this = this;
        if (this.sc.isDied || !this.dungeon) return;
        this.entity.Transform.position = Dungeon_1.default.fixOuterMap(this.entity.Transform.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position);
        this.changeZIndex();
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos).sub(this.entity.Transform.position);
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        var isPlayJump = this.anim.getAnimationState("CaptainJump").isPlaying;
        var isPlayFire = this.anim.getAnimationState("CaptainFire").isPlaying;
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        this.isFaceRight = h > 0;
        if (isPlayJump || isPlayFire) return;
        var speed = 4;
        isPlayJump || this.fireSkill.next(function() {
          speed = 1;
          _this.anim.play("CaptainFire");
        }, 5);
        if (playerDis < 140 && !this.dungeon.player.sc.isDied) this.attackSkill.next(function() {
          _this.attackSkill.IsExcuting = true;
          _this.anim.play("CaptainAttack");
        }, 1); else {
          playerDis > 300 && this.jumpSkill.next(function() {
            _this.anim.play("CaptainJump");
            isPlayJump = true;
          }, 8);
          if (!pos.equals(cc.Vec3.ZERO) && !isPlayJump && !this.attackSkill.IsExcuting) {
            pos = pos.normalizeSelf();
            this.move(pos, speed);
          }
        }
      };
      Captain.prototype.JumpMove = function() {
        if (!this.dungeon || !this.jumpSkill.IsExcuting) return;
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos).sub(this.entity.Transform.position);
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        var speed = 4;
        this.data.currentHealth < this.data.Common.MaxHealth / 2 && (speed = 5);
        movement = movement.normalize().mul(speed);
        this.entity.Move.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
      };
      Captain.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        this.attackSkill.IsExcuting && !pos.equals(cc.Vec3.ZERO) && (pos = pos.mul(.5));
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.normalize().mul(speed);
        this.entity.Move.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.isMoving && (this.isFaceRight = h > 0);
        this.isMoving ? this.anim.getAnimationState("CaptainMove").isPlaying || this.anim.playAdditive("CaptainMove") : this.anim.getAnimationState("CaptainMove").isPlaying && this.anim.play("CaptainIdle");
        this.changeZIndex();
      };
      Captain.prototype.actorName = function() {
        return "\u90aa\u6076\u8239\u957f";
      };
      __decorate([ property(CaptainSword_1.default) ], Captain.prototype, "sword", void 0);
      Captain = __decorate([ ccclass ], Captain);
      return Captain;
    }(Boss_1.default);
    exports.default = Captain;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/NextStep": "NextStep",
    "./Boss": "Boss",
    "./CaptainSword": "CaptainSword"
  } ],
  CellphoneData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ca606JzDZxBpJXGyzhO8Xom", "CellphoneData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var BuildingData_1 = require("./BuildingData");
    var ItemData_1 = require("./ItemData");
    var CellphoneData = function(_super) {
      __extends(CellphoneData, _super);
      function CellphoneData() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.createTime = 0;
        _this.type = 0;
        return _this;
      }
      CellphoneData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        if (data.furnitureData) {
          this.furnitureData = new BuildingData_1.default();
          this.furnitureData.valueCopy(data.furnitureData);
          this.price = this.furnitureData.price;
        }
        if (data.itemData) {
          this.itemData = new ItemData_1.default();
          this.itemData.valueCopy(data.itemData);
        }
        this.itemData = data.itemData;
      };
      CellphoneData.prototype.clone = function() {
        var e = new CellphoneData();
        e.valueCopy(this);
        return e;
      };
      CellphoneData.prototype.setEmpty = function() {
        this.type = 0;
        this.furnitureData = null;
        this.itemData = null;
        this.createTime = 0;
        this.price = 0;
      };
      return CellphoneData;
    }(BaseData_1.default);
    exports.default = CellphoneData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData",
    "./BuildingData": "BuildingData",
    "./ItemData": "ItemData"
  } ],
  CellphoneDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7e27cFOFVVGe4YHWxa4+CC5", "CellphoneDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Achievement_1 = require("../../logic/Achievement");
    var CellphoneData_1 = require("../../data/CellphoneData");
    var EventHelper_1 = require("../../logic/EventHelper");
    var Logic_1 = require("../../logic/Logic");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var LocalStorage_1 = require("../../utils/LocalStorage");
    var Utils_1 = require("../../utils/Utils");
    var CellphoneItem_1 = require("../CellphoneItem");
    var BaseDialog_1 = require("./BaseDialog");
    var EquipmentAndItemDialog_1 = require("./EquipmentAndItemDialog");
    var BuildingData_1 = require("../../data/BuildingData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CellphoneDialog = function(_super) {
      __extends(CellphoneDialog, _super);
      function CellphoneDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.item = null;
        _this.content = null;
        _this.equipmentAndItemDialogPrefab = null;
        _this.buyButton = null;
        _this.list = [];
        _this.itemSelect = null;
        _this.title = null;
        _this.priceLabel = null;
        _this.hourLabel = null;
        _this.dayLabel = null;
        _this.layer = null;
        _this.flashLightSprite = null;
        _this.top = null;
        _this.bottom = null;
        _this.equipmentAndItemDialog = null;
        _this.itemList = [];
        _this.appIndex = 0;
        _this.checkTimeChangeDelay = 0;
        return _this;
      }
      CellphoneDialog_1 = CellphoneDialog;
      CellphoneDialog.prototype.onLoad = function() {
        var _this = this;
        this.itemSelect.opacity = 0;
        this.layer.active = false;
        this.equipmentAndItemDialog = this.initDialog();
        this.dayLabel.string = Utils_1.default.getDay(Logic_1.default.getTickTime());
        this.hourLabel.string = Utils_1.default.getHour(Logic_1.default.getTickTime());
        this.updateList(this.appIndex);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_SHOW_FLASHLIGHT, function(detail) {
          _this.node && _this.changeFlashLightSprite(detail.isOpen);
        });
        this.flashLightSprite.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          CellphoneDialog_1.changeFlashLight();
        });
        this.changeFlashLightSprite(Logic_1.default.settings.isFlashLightOpen);
      };
      CellphoneDialog.changeFlashLight = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.FLASHLIGHT);
        Logic_1.default.settings.isFlashLightOpen = !Logic_1.default.settings.isFlashLightOpen;
        LocalStorage_1.default.saveSystemSettings(Logic_1.default.settings);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_SHOW_FLASHLIGHT, {
          isOpen: Logic_1.default.settings.isFlashLightOpen
        });
      };
      CellphoneDialog.prototype.changeFlashLightSprite = function(isOpen) {
        this.changeSwitchSprite(this.flashLightSprite, isOpen, "cellphone_flashlight1", "cellphone_flashlight0");
      };
      CellphoneDialog.prototype.changeSwitchSprite = function(sprite, isOpen, spriteName0, spriteName1) {
        sprite.spriteFrame = Logic_1.default.spriteFrameRes(isOpen ? spriteName0 : spriteName1);
      };
      CellphoneDialog.prototype.initDialog = function() {
        var node = cc.instantiate(this.equipmentAndItemDialogPrefab);
        node.parent = this.node;
        var dialog = node.getComponent(EquipmentAndItemDialog_1.default);
        dialog.changeBgAndAnchor(EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_NONE);
        dialog.hideDialog();
        return dialog;
      };
      CellphoneDialog.prototype.getItem = function(index, data) {
        var prefab = cc.instantiate(this.item);
        prefab.parent = this.content;
        var item = prefab.getComponent(CellphoneItem_1.default);
        item.init(this, index, data);
        return item;
      };
      CellphoneDialog.prototype.start = function() {};
      CellphoneDialog.prototype.show = function() {
        _super.prototype.show.call(this);
        this.updateList(this.appIndex);
      };
      CellphoneDialog.prototype.home = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.layer.stopAllActions();
        cc.tween(this.layer).to(.2, {
          opacity: 0
        }).call(function() {
          _this.layer.active = false;
        }).start();
      };
      CellphoneDialog.prototype.openApp = function(event, index) {
        var color = "#FFFFFF";
        var i = parseInt(index);
        switch (i) {
         case 0:
          this.title.string = "\u5403\u9971\u5566";
          color = "#03418d";
          break;

         case 1:
          this.title.string = "\u5b9c\u4f4f\u5bb6";
          color = "#b56300";
          break;

         case 2:
          this.title.string = "\u840c\u5ba0\u4e50\u56ed";
          color = "#940011";
          break;

         case 3:
          this.title.string = "\u751f\u6d3b\u5230\u5bb6";
          color = "#a18000";
          break;

         case 4:
          this.title.string = "\u4ed6\u4eec\u804a";
          color = "#00801c";
        }
        this.top.color = cc.color().fromHEX(color);
        this.bottom.color = cc.color().fromHEX(color);
        this.layer.stopAllActions();
        this.layer.active = true;
        cc.tween(this.layer).to(.2, {
          opacity: 255
        }).start();
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.updateList(i);
      };
      CellphoneDialog.prototype.clearSelect = function() {
        this.currentSelectIndex = -1;
        this.equipmentAndItemDialog.hideDialog();
        this.buyButton.active = false;
        this.priceLabel.string = "";
        this.itemSelect.opacity = 0;
      };
      CellphoneDialog.prototype.showSelect = function(item) {
        this.currentSelectIndex = item.index;
        this.itemSelect.parent = item.node;
        this.itemSelect.position = cc.Vec3.ZERO;
        this.itemSelect.opacity = 200;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.priceLabel.string = "" + Math.floor(item.data.price);
        this.buyButton.active = true;
        this.equipmentAndItemDialog.showDialog(cc.v3(-240, 160), null, item.data.itemData, null, item.data.furnitureData);
      };
      CellphoneDialog.prototype.updateList = function(appIndex) {
        this.clearSelect();
        this.list = [];
        this.content.removeAllChildren();
        this.appIndex = appIndex;
        var dataList = [];
        if (1 == appIndex) {
          var normallist = [];
          var purchasedlist = [];
          var index = 0;
          for (var key in Logic_1.default.furnitures) {
            var fd = new BuildingData_1.default();
            fd.valueCopy(Logic_1.default.furnitures[key]);
            if (fd.price <= 0) continue;
            var save = LocalStorage_1.default.getFurnitureData(fd.id);
            if (save) {
              fd.triggerCount = save.triggerCount;
              fd.purchased = save.purchased;
            }
            var data = new CellphoneData_1.default();
            data.createTime = new Date().getTime();
            data.type = CellphoneItem_1.default.TYPE_FURNITURE;
            data.furnitureData = fd;
            fd.purchased ? purchasedlist.push(data) : normallist.push(data);
            this.list.push(this.getItem(index++, data));
          }
          dataList = normallist.concat(purchasedlist);
          for (var i = 0; i < this.list.length; i++) this.list[i].updateData(dataList[i]);
        }
      };
      CellphoneDialog.prototype.sale = function() {
        if (-1 == this.currentSelectIndex || this.list[this.currentSelectIndex].data.type == CellphoneItem_1.default.TYPE_EMPTY) return;
        var current = this.list[this.currentSelectIndex];
        if (current.data.type == CellphoneItem_1.default.TYPE_FURNITURE) {
          var fd = current.data.furnitureData;
          if (!fd.purchased && Logic_1.default.coins >= fd.price) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
              count: -fd.price
            });
            AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
            current.data.furnitureData.purchased = true;
            current.updateData();
            Achievement_1.default.addFurnituresAchievement(fd.id);
            LocalStorage_1.default.saveFurnitureData(fd);
            this.clearSelect();
            Utils_1.default.toast("\u8d2d\u4e70\u6210\u529f,\u5feb\u53bb\u770b\u770b\u662f\u5426\u5df2\u7ecf\u5230\u5bb6", true, true);
            AudioPlayer_1.default.play(AudioPlayer_1.default.CASHIERING);
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_FURNITURE_REFRESH, {
              id: fd.id
            });
          } else {
            Utils_1.default.toast("\u8d2d\u4e70\u5931\u8d25\uff0c\u4f59\u989d\u4e0d\u8db3", true, true);
            AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
          }
        }
      };
      CellphoneDialog.prototype.update = function(dt) {
        if (this.isCheckTimeChangeDelay(dt)) {
          this.dayLabel.string = Utils_1.default.getDay(Logic_1.default.getTickTime());
          this.hourLabel.string = Utils_1.default.getHour(Logic_1.default.getTickTime());
        }
      };
      CellphoneDialog.prototype.isCheckTimeChangeDelay = function(dt) {
        this.checkTimeChangeDelay += dt;
        if (this.checkTimeChangeDelay > 1) {
          this.checkTimeChangeDelay = 0;
          return true;
        }
        return false;
      };
      CellphoneDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
        this.content.removeAllChildren();
      };
      CellphoneDialog.prototype.waitOneHour = function() {
        Logic_1.default.isDreaming() ? Logic_1.default.dreamTime += 36e5 : Logic_1.default.realTime += 36e5;
        this.dayLabel.string = Utils_1.default.getDay(Logic_1.default.getTickTime());
        this.hourLabel.string = Utils_1.default.getHour(Logic_1.default.getTickTime());
      };
      var CellphoneDialog_1;
      __decorate([ property(cc.Prefab) ], CellphoneDialog.prototype, "item", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "content", void 0);
      __decorate([ property(cc.Prefab) ], CellphoneDialog.prototype, "equipmentAndItemDialogPrefab", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "buyButton", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "itemSelect", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "title", void 0);
      __decorate([ property(cc.Label) ], CellphoneDialog.prototype, "priceLabel", void 0);
      __decorate([ property(cc.Label) ], CellphoneDialog.prototype, "hourLabel", void 0);
      __decorate([ property(cc.Label) ], CellphoneDialog.prototype, "dayLabel", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "layer", void 0);
      __decorate([ property(cc.Sprite) ], CellphoneDialog.prototype, "flashLightSprite", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "top", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "bottom", void 0);
      CellphoneDialog = CellphoneDialog_1 = __decorate([ ccclass ], CellphoneDialog);
      return CellphoneDialog;
    }(BaseDialog_1.default);
    exports.default = CellphoneDialog;
    cc._RF.pop();
  }, {
    "../../data/BuildingData": "BuildingData",
    "../../data/CellphoneData": "CellphoneData",
    "../../logic/Achievement": "Achievement",
    "../../logic/EventHelper": "EventHelper",
    "../../logic/Logic": "Logic",
    "../../utils/AudioPlayer": "AudioPlayer",
    "../../utils/LocalStorage": "LocalStorage",
    "../../utils/Utils": "Utils",
    "../CellphoneItem": "CellphoneItem",
    "./BaseDialog": "BaseDialog",
    "./EquipmentAndItemDialog": "EquipmentAndItemDialog"
  } ],
  CellphoneItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "998cfMDHbFCeYkBTaoitXnc", "CellphoneItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CellphoneData_1 = require("../data/CellphoneData");
    var Logic_1 = require("../logic/Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CellphoneItem = function(_super) {
      __extends(CellphoneItem, _super);
      function CellphoneItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isSelect = false;
        _this.sprite = null;
        _this.label = null;
        _this.disableCover = null;
        _this.index = 0;
        _this.data = new CellphoneData_1.default();
        return _this;
      }
      CellphoneItem_1 = CellphoneItem;
      CellphoneItem.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.isSelect && _this.index == _this.dialog.currentSelectIndex ? _this.isSelect = false : _this.isSelect = _this.data.type != CellphoneItem_1.TYPE_EMPTY;
          _this.data.type == CellphoneItem_1.TYPE_FURNITURE && _this.data.furnitureData && _this.data.furnitureData.purchased && (_this.isSelect = false);
          _this.dialog.clearSelect();
          _this.isSelect ? _this.dialog.showSelect(_this) : AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
        }, this);
      };
      CellphoneItem.prototype.init = function(cellphoneDialog, index, data) {
        this.dialog = cellphoneDialog;
        this.index = index;
        this.isSelect = false;
        this.updateData(data);
      };
      CellphoneItem.prototype.updateData = function(data) {
        this.isSelect = false;
        this.data.valueCopy(data);
        this.label.string = "";
        this.sprite.spriteFrame = null;
        this.disableCover.active = false;
        var spriteFrame = null;
        if (this.data.type == CellphoneItem_1.TYPE_ITEM && this.data.itemData) {
          this.label.string = this.data.itemData.nameCn + "\n" + this.data.itemData.price;
          spriteFrame = Logic_1.default.spriteFrameRes(this.data.itemData.resName);
        } else if (this.data.type == CellphoneItem_1.TYPE_FURNITURE && this.data.furnitureData) {
          spriteFrame = Logic_1.default.spriteFrameRes(this.data.furnitureData.resName);
          this.label.string = this.data.furnitureData.nameCn + "\n" + this.data.furnitureData.price;
          this.disableCover.active = this.data.furnitureData.purchased;
        }
        if (spriteFrame) {
          this.sprite.spriteFrame = spriteFrame;
          var w = spriteFrame.getOriginalSize().width;
          var h = spriteFrame.getOriginalSize().height;
          this.sprite.node.width = 4 * w;
          this.sprite.node.height = 4 * h;
          if (this.sprite.node.height > 128) {
            this.sprite.node.height = 128;
            this.sprite.node.width = 128 / spriteFrame.getOriginalSize().height * spriteFrame.getOriginalSize().width;
          }
        }
      };
      CellphoneItem.prototype.setEmpty = function() {
        this.label.string = "";
        this.sprite.spriteFrame = null;
      };
      CellphoneItem.prototype.start = function() {};
      var CellphoneItem_1;
      CellphoneItem.TYPE_EMPTY = 0;
      CellphoneItem.TYPE_FURNITURE = 1;
      CellphoneItem.TYPE_ITEM = 2;
      __decorate([ property(cc.Sprite) ], CellphoneItem.prototype, "sprite", void 0);
      __decorate([ property(cc.Label) ], CellphoneItem.prototype, "label", void 0);
      __decorate([ property(cc.Node) ], CellphoneItem.prototype, "disableCover", void 0);
      CellphoneItem = CellphoneItem_1 = __decorate([ ccclass ], CellphoneItem);
      return CellphoneItem;
    }(cc.Component);
    exports.default = CellphoneItem;
    cc._RF.pop();
  }, {
    "../data/CellphoneData": "CellphoneData",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer"
  } ],
  ChapterData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb6073McgVKOpRjZZ5su/Nf", "ChapterData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChapterData = function() {
      function ChapterData(chapter) {
        this.chapter = 0;
        this.list = [];
        this.chapter = chapter;
      }
      return ChapterData;
    }();
    exports.default = ChapterData;
    cc._RF.pop();
  }, {} ],
  Chapter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e966c6tQ3FASbN1WCJi24PI", "Chapter");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var StartBackground_1 = require("../ui/StartBackground");
    var LocalStorage_1 = require("../utils/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Chapter = function(_super) {
      __extends(Chapter, _super);
      function Chapter() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chapter00 = null;
        _this.chapter01 = null;
        _this.chapter02 = null;
        _this.chapter03 = null;
        _this.chapter04 = null;
        _this.cursorAreaPrefab = null;
        _this.timeDelay = 0;
        return _this;
      }
      Chapter.prototype.onLoad = function() {};
      Chapter.prototype.start = function() {};
      Chapter.prototype.clickChapter = function(event, chapter) {
        if (chapter) {
          Logic_1.default.jumpSlotIndex = LocalStorage_1.default.getLastSaveSlotKey();
          Logic_1.default.jumpChapter = parseInt(chapter);
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
          var bg = this.getComponentInChildren(StartBackground_1.default);
          bg && bg.startPressed();
          this.scheduleOnce(function() {
            cc.director.loadScene("pickavatar");
          }, 1);
        }
      };
      Chapter.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter00", void 0);
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter01", void 0);
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter02", void 0);
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter03", void 0);
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter04", void 0);
      __decorate([ property(cc.Prefab) ], Chapter.prototype, "cursorAreaPrefab", void 0);
      Chapter = __decorate([ ccclass ], Chapter);
      return Chapter;
    }(cc.Component);
    exports.default = Chapter;
    cc._RF.pop();
  }, {
    "../ui/StartBackground": "StartBackground",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/LocalStorage": "LocalStorage",
    "./Logic": "Logic"
  } ],
  Chest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a259fOC11hFpJCy2hycs7kH", "Chest");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var Building_1 = require("./Building");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var CCollider_1 = require("../collider/CCollider");
    var AffixManager_1 = require("../manager/AffixManager");
    var MapManager_1 = require("../manager/MapManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Chest = function(_super) {
      __extends(Chest, _super);
      function Chest() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.openSpriteFrame = null;
        _this.closeSpriteFrame = null;
        return _this;
      }
      Chest.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite");
      };
      Chest.prototype.start = function() {};
      Chest.prototype.setQuality = function(quality, triggerCount) {
        this.data.quality = quality;
        this.data.triggerCount = triggerCount;
        this.sprite || (this.sprite = this.node.getChildByName("sprite"));
        quality > 0 && (this.sprite.color = cc.Color.WHITE.fromHEX(AffixManager_1.default.QUALITY_COLORS[quality]));
        this.sprite.getComponent(cc.Sprite).spriteFrame = triggerCount < 1 ? this.closeSpriteFrame : this.openSpriteFrame;
      };
      Chest.prototype.seDefaultPos = function(defaultPos) {
        this.data.defaultPos = defaultPos;
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(defaultPos);
        this.node.position = this.entity.Transform.position.clone();
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.entity.Transform.position);
      };
      Chest.prototype.openChest = function() {
        var _this = this;
        if (this.data.triggerCount > 0) return;
        AudioPlayer_1.default.play(AudioPlayer_1.default.OPEN_CHEST);
        this.data.triggerCount = 1;
        cc.tween(this.sprite).to(.1, {
          position: cc.v3(5, 16)
        }).to(.1, {
          position: cc.v3(-5, 0)
        }).to(.1, {
          position: cc.v3(5, 0)
        }).to(.1, {
          position: cc.v3(-5, 0)
        }).to(.1, {
          position: cc.v3(0, 0)
        }).call(function() {
          _this.sprite.getComponent(cc.Sprite).spriteFrame = _this.openSpriteFrame;
          if (_this.node.parent) {
            var dungeon = _this.node.parent.getComponent(Dungeon_1.default);
            if (dungeon) {
              var rand4save = Logic_1.default.mapManager.getRandom4Save(_this.seed, MapManager_1.default.RANDOM_BUILDING);
              Logic_1.default.isCheatMode && dungeon.addEquipment("shield002", Dungeon_1.default.getPosInMap(_this.data.defaultPos), null, _this.data.quality);
              dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(_this.data.defaultPos), null, _this.data.quality);
            }
          }
        }).start();
        var saveChest = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
        if (saveChest) {
          saveChest.triggerCount = this.data.triggerCount;
          saveChest.quality = this.data.quality;
        } else Logic_1.default.mapManager.setCurrentBuildingData(this.data.clone());
      };
      Chest.prototype.onColliderStay = function(other, self) {
        other.tag == CCollider_1.default.TAG.PLAYER && this.data.triggerCount < 1 && this.openChest();
      };
      __decorate([ property(cc.SpriteFrame) ], Chest.prototype, "openSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], Chest.prototype, "closeSpriteFrame", void 0);
      Chest = __decorate([ ccclass ], Chest);
      return Chest;
    }(Building_1.default);
    exports.default = Chest;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../manager/AffixManager": "AffixManager",
    "../manager/MapManager": "MapManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  ChunkData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2e5707we6VLmaJfbSZnGeFv", "ChunkData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChunkData = function() {
      function ChunkData() {}
      return ChunkData;
    }();
    exports.default = ChunkData;
    cc._RF.pop();
  }, {} ],
  ChunkLookCamera: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "86753OU1JJLlZ74OEo6fP9C", "ChunkLookCamera");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChunkLookCamera = function(_super) {
      __extends(ChunkLookCamera, _super);
      function ChunkLookCamera() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.target = null;
        return _this;
      }
      ChunkLookCamera.prototype.onLoad = function() {
        var _this = this;
        this.camera = this.getComponent(cc.Camera);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.CAMERA_LOOK, function(detail) {
          _this.lookAt(detail.position);
        });
      };
      ChunkLookCamera.prototype.lookAt = function(position) {
        this.targetPosition = position;
      };
      ChunkLookCamera.prototype.lateUpdate = function() {
        this.targetPosition;
        this.node.position = this.lerp(this.node.position, this.node.parent.convertToNodeSpaceAR(this.target.convertToWorldSpaceAR(cc.Vec3.ZERO)), .1);
      };
      ChunkLookCamera.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      __decorate([ property(cc.Node) ], ChunkLookCamera.prototype, "target", void 0);
      ChunkLookCamera = __decorate([ ccclass ], ChunkLookCamera);
      return ChunkLookCamera;
    }(cc.Component);
    exports.default = ChunkLookCamera;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper"
  } ],
  ChunkWorld: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8888aikYhVNfJXCQphMoSyV", "ChunkWorld");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Chunk_1 = require("./Chunk");
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChunkWorld = function(_super) {
      __extends(ChunkWorld, _super);
      function ChunkWorld() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chunkPrefab = null;
        _this.worldMap = new Array();
        _this.currentMap = new Array();
        return _this;
      }
      ChunkWorld_1 = ChunkWorld;
      ChunkWorld.prototype.onLoad = function() {
        var _this = this;
        var CENTER = Math.floor(ChunkWorld_1.SIZE / 2);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.CHUNK_LOAD, function(detail) {
          var pos = detail.pos;
          var p = ChunkWorld_1.getIndexInMap(pos, _this.currentMap[0][0].targetPosition);
          cc.log(p);
          _this.changeMap(p.x, p.y);
        });
        this.initMap();
      };
      ChunkWorld.prototype.initMap = function() {
        for (var i = 0; i < ChunkWorld_1.SIZE; i++) {
          this.currentMap[i] = new Array(i);
          for (var j = 0; j < ChunkWorld_1.SIZE; j++) {
            var c = cc.instantiate(this.chunkPrefab);
            c.parent = this.node;
            c.position = ChunkWorld_1.getPosInMap(cc.v3(i, j));
            c.zIndex = 100;
            var chunk = c.getComponent(Chunk_1.default);
            chunk.data.x = i;
            chunk.data.y = j;
            this.currentMap[i][j] = chunk;
            chunk.targetPosition = c.position.clone();
            chunk.loadMap();
          }
        }
        this.printMapIndex();
      };
      ChunkWorld.prototype.getTargetChunkPos = function(targetPosition) {
        var leftBottomPos = cc.v3(this.currentMap[0][0].data.x, this.currentMap[0][0].data.y);
      };
      ChunkWorld.prototype.changeMap = function(x, y) {
        var CENTER = Math.floor(ChunkWorld_1.SIZE / 2);
        if (x == CENTER && y == CENTER) return;
        var selectPosition = this.currentMap[x][y].targetPosition.clone();
        var tempMap = new Array();
        for (var i = 0; i < ChunkWorld_1.SIZE; i++) {
          tempMap[i] = new Array(i);
          for (var j = 0; j < ChunkWorld_1.SIZE; j++) {
            var pos = this.getCorrectIndex(cc.v3(x, y), cc.v3(i, j));
            tempMap[i][j] = this.currentMap[pos.x][pos.y];
            tempMap[i][j].data.x = i;
            tempMap[i][j].data.y = j;
            if (1 == pos.z) {
              var offset = cc.v3(i, j).subSelf(cc.v3(CENTER, CENTER));
              var offsetPos = ChunkWorld_1.getPosInMap(offset);
              tempMap[i][j].targetPosition = selectPosition.clone().addSelf(offsetPos);
              tempMap[i][j].loadMap();
            }
          }
        }
        this.printMapIndex();
        this.currentMap = tempMap;
      };
      ChunkWorld.prototype.printMapIndex = function() {
        var str = "";
        for (var i = ChunkWorld_1.SIZE - 1; i >= 0; i--) {
          for (var j = 0; j < ChunkWorld_1.SIZE; j++) str += "(" + this.currentMap[j][i].data.x + "," + this.currentMap[j][i].data.y + ")";
          str += "\n";
        }
      };
      ChunkWorld.prototype.getCorrectIndex = function(select, target) {
        var CENTER = Math.floor(ChunkWorld_1.SIZE / 2);
        var pos = target.clone();
        var offsetX = select.x - CENTER;
        var offsetY = select.y - CENTER;
        pos.x = pos.x + offsetX;
        pos.y = pos.y + offsetY;
        var isOuter = false;
        if (pos.x < 0) {
          pos.x = pos.x + ChunkWorld_1.SIZE;
          isOuter = true;
        } else if (pos.x >= ChunkWorld_1.SIZE) {
          pos.x = pos.x - ChunkWorld_1.SIZE;
          isOuter = true;
        }
        if (pos.y < 0) {
          pos.y = pos.y + ChunkWorld_1.SIZE;
          isOuter = true;
        } else if (pos.y >= ChunkWorld_1.SIZE) {
          pos.y = pos.y - ChunkWorld_1.SIZE;
          isOuter = true;
        }
        return new cc.Vec3(pos.x, pos.y, isOuter ? 1 : 0);
      };
      ChunkWorld.getPosInMap = function(pos) {
        var x = pos.x * Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE;
        var y = pos.y * Chunk_1.default.HEIGHT * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE;
        return cc.v3(x, y);
      };
      ChunkWorld.fixOuterMap = function(pos, offset) {
        var x = (pos.x - offset.x) / (Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE);
        var y = (pos.y - offset.y) / (Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE);
        x = Math.round(x);
        y = Math.round(y);
        var isOuter = false;
        if (x < 0) {
          x = 0;
          isOuter = true;
        }
        if (x >= ChunkWorld_1.SIZE) {
          x = ChunkWorld_1.SIZE - 1;
          isOuter = true;
        }
        if (y < 0) {
          y = 0;
          isOuter = true;
        }
        if (y >= ChunkWorld_1.SIZE) {
          y = ChunkWorld_1.SIZE - 1;
          isOuter = true;
        }
        return isOuter ? ChunkWorld_1.getPosInMap(cc.v3(x, y)) : pos;
      };
      ChunkWorld.getIndexInMap = function(pos, offset) {
        var x = (pos.x - offset.x) / (Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE);
        var y = (pos.y - offset.y) / (Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE);
        x = Math.round(x);
        y = Math.round(y);
        x < 0 && (x = 0);
        x >= ChunkWorld_1.SIZE && (x = ChunkWorld_1.SIZE - 1);
        y < 0 && (y = 0);
        y >= ChunkWorld_1.SIZE && (y = ChunkWorld_1.SIZE - 1);
        return cc.v3(x, y);
      };
      ChunkWorld.prototype.start = function() {};
      var ChunkWorld_1;
      ChunkWorld.SIZE = 5;
      __decorate([ property(cc.Prefab) ], ChunkWorld.prototype, "chunkPrefab", void 0);
      ChunkWorld = ChunkWorld_1 = __decorate([ ccclass ], ChunkWorld);
      return ChunkWorld;
    }(cc.Component);
    exports.default = ChunkWorld;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper",
    "./Chunk": "Chunk"
  } ],
  Chunk: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8d511RPE5CG7SWZpmVYfu9", "Chunk");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChunkData_1 = require("../data/ChunkData");
    var Random_1 = require("../utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Chunk = function(_super) {
      __extends(Chunk, _super);
      function Chunk() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.floor = null;
        _this.label = null;
        _this.select = null;
        _this.wall = null;
        _this.data = new ChunkData_1.default();
        _this.targetPosition = cc.v3(0, 0);
        return _this;
      }
      Chunk_1 = Chunk;
      Chunk.prototype.onLoad = function() {
        this.layer = this.node.getChildByName("layer");
        this.floor.scale = Chunk_1.TILE_SCALE;
        this.floor.width = Chunk_1.TILE_SIZE * Chunk_1.WIDTH;
        this.floor.height = Chunk_1.TILE_SIZE * Chunk_1.HEIGHT;
        this.select.scale = Chunk_1.TILE_SCALE;
        this.select.width = Chunk_1.TILE_SIZE * Chunk_1.WIDTH;
        this.select.height = Chunk_1.TILE_SIZE * Chunk_1.HEIGHT;
        this.node.width = Chunk_1.TILE_SCALE * Chunk_1.TILE_SIZE * Chunk_1.WIDTH;
        this.node.height = Chunk_1.TILE_SCALE * Chunk_1.TILE_SIZE * Chunk_1.HEIGHT;
      };
      Chunk.prototype.onClicked = function() {
        var _this = this;
        this.floor.color = cc.Color.GREEN;
        this.scheduleOnce(function() {
          _this.floor.color = cc.Color.WHITE;
        }, 1);
      };
      Chunk.prototype.loadMap = function() {
        this.label.node.position = cc.v3(this.node.width / 2, this.node.height / 2);
        this.label.string = this.targetPosition.x + "," + this.targetPosition.y;
        this.node.position = this.targetPosition.clone();
        this.layer.removeAllChildren();
        for (var i = 0; i < 2; i++) {
          var w = cc.instantiate(this.wall);
          w.parent = this.layer;
          w.position = cc.v3(Random_1.default.getRandomNum(0, this.node.width), Random_1.default.getRandomNum(0, this.node.height));
          w.zIndex = 100;
        }
      };
      Chunk.prototype.lateUpdate = function() {};
      Chunk.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      var Chunk_1;
      Chunk.TYPE_EMPTY = 0;
      Chunk.TYPE_NORMAL = 1;
      Chunk.TYPE_WALL_VERTICAL = 2;
      Chunk.TYPE_WALL_HORIZONTAL = 3;
      Chunk.TYPE_WALL_CROSS = 4;
      Chunk.WIDTH = 5;
      Chunk.HEIGHT = 5;
      Chunk.TILE_SIZE = 16;
      Chunk.TILE_SCALE = 4;
      __decorate([ property(cc.Node) ], Chunk.prototype, "floor", void 0);
      __decorate([ property(cc.Label) ], Chunk.prototype, "label", void 0);
      __decorate([ property(cc.Node) ], Chunk.prototype, "select", void 0);
      __decorate([ property(cc.Prefab) ], Chunk.prototype, "wall", void 0);
      Chunk = Chunk_1 = __decorate([ ccclass ], Chunk);
      return Chunk;
    }(cc.Component);
    exports.default = Chunk;
    cc._RF.pop();
  }, {
    "../data/ChunkData": "ChunkData",
    "../utils/Random": "Random"
  } ],
  CoinCount: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "91131vqXzhODZpby3U0hjQL", "CoinCount");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CoinCount = function(_super) {
      __extends(CoinCount, _super);
      function CoinCount() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.isReal = false;
        return _this;
      }
      CoinCount.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_ADD_COIN, function(detail) {
          _this.addCount(detail.count, detail.isReal);
        });
      };
      CoinCount.prototype.start = function() {};
      CoinCount.prototype.addCount = function(value, isReal) {
        if (!this.anim) return;
        var c = parseInt(value);
        if (isReal && this.isReal) Logic_1.default.realCoins += c; else if (!isReal && !this.isReal) {
          Logic_1.default.coins += c;
          if (c > 0) {
            Logic_1.default.coinCounts += c;
            if (Logic_1.default.coinCounts >= 1) {
              Logic_1.default.coinCounts = 0;
              EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_USEDREAM, {
                value: -1
              });
            }
          }
        }
      };
      CoinCount.prototype.update = function(dt) {
        this.label && (this.label.string = "" + (this.isReal ? Logic_1.default.realCoins : Logic_1.default.coins));
      };
      __decorate([ property(cc.Label) ], CoinCount.prototype, "label", void 0);
      __decorate([ property ], CoinCount.prototype, "isReal", void 0);
      CoinCount = __decorate([ ccclass ], CoinCount);
      return CoinCount;
    }(cc.Component);
    exports.default = CoinCount;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  Coin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "586a7ZPuVJNUIhnMRyd39J4", "Coin");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var EventHelper_1 = require("../logic/EventHelper");
    var Random_1 = require("../utils/Random");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var BaseNodeComponent_1 = require("../base/BaseNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Coin = function(_super) {
      __extends(Coin, _super);
      function Coin() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.value = 0;
        _this.valueRes = [ "gem01", "gem02", "gem03", "gem04" ];
        _this.isReady = false;
        _this.isReal = false;
        _this.soundPlaying = false;
        _this.zSpeed = 15;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Coin_1 = Coin;
      Coin.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.init();
      };
      Coin.prototype.onEnable = function() {
        this.init();
      };
      Coin.prototype.init = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        var speed = Logic_1.default.getRandomNum(5, 10);
        var x = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        var y = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        this.zSpeed = 15;
        this.entity.Move.linearVelocity = cc.v2(x, y);
        this.entity.Move.damping = 3;
        this.entity.Move.linearVelocityZ = this.zSpeed;
        this.isReady = false;
        this.entity.NodeRender.root = this.node.getChildByName("root");
        this.shadow = this.node.getChildByName("shadow");
        this.entity.Transform.position = this.node.position.clone();
        this.scheduleOnce(function() {
          _this.isReady = true;
        }, 2);
      };
      Coin.prototype.changeValue = function(value) {
        this.value = value;
        var index = 1;
        if (this.value == Coin_1.FACE_VALUE) {
          index = 3;
          this.node.scale = 1.2;
        } else {
          index = 1;
          this.node.scale = 1;
        }
        var sprite = this.node.getChildByName("root").getChildByName("sprite").getComponent(cc.Sprite);
        sprite.spriteFrame = Logic_1.default.spriteFrameRes(this.valueRes[index]);
        this.isReal && (sprite.spriteFrame = Logic_1.default.spriteFrameRes("realcoin"));
      };
      Coin.prototype.start = function() {};
      Coin.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          this.soundPlaying = false;
          return true;
        }
        return false;
      };
      Coin.prototype.getNearPlayerDistance = function(playerNode) {
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, playerNode.position.clone().addSelf(cc.v3(0, 32)));
        return dis;
      };
      Coin.prototype.update = function(dt) {
        var y = this.entity.NodeRender.root.y - this.entity.Transform.base;
        y < 0 && (y = 0);
        var scale = 1 - y / 64;
        this.shadow.scale = scale < .5 ? .5 : scale;
        if (0 == y) {
          this.zSpeed -= 3;
          this.zSpeed < 0 ? this.zSpeed = 0 : this.playSound();
          this.entity.Move.linearVelocityZ = this.zSpeed;
        }
        if (this.isCheckTimeDelay(dt) && this.player && this.getNearPlayerDistance(this.player.node) < 1600 && this.node.active && this.isReady) {
          var p = this.player.node.position.clone();
          p.y += 10;
          var pos = p.sub(this.node.position);
          if (!pos.equals(cc.Vec3.ZERO)) {
            this.entity.Move.linearVelocity = cc.v2(pos.x, pos.y).normalize().mul(16);
            this.entity.Move.damping = 1;
          }
        }
        if (this.player && this.getNearPlayerDistance(this.player.node) < 64 && this.node.active && this.isReady) {
          this.isReady = false;
          this.playSound();
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            count: this.value,
            isReal: this.isReal
          });
          EventHelper_1.EventHelper.emit("destorycoin", {
            coinNode: this.node
          });
        }
      };
      Coin.prototype.playSound = function() {
        if (!this.soundPlaying) {
          this.soundPlaying = true;
          var arr = [ AudioPlayer_1.default.COIN, AudioPlayer_1.default.COIN1, AudioPlayer_1.default.COIN2 ];
          AudioPlayer_1.default.play(arr[Logic_1.default.getRandomNum(0, arr.length - 1)]);
        }
      };
      var Coin_1;
      Coin.FACE_VALUE = 10;
      Coin = Coin_1 = __decorate([ ccclass ], Coin);
      return Coin;
    }(BaseNodeComponent_1.default);
    exports.default = Coin;
    cc._RF.pop();
  }, {
    "../base/BaseNodeComponent": "BaseNodeComponent",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Random": "Random"
  } ],
  ColliderComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a502cZks55PtqeBjSSgGyf/", "ColliderComponent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ColliderComponent = void 0;
    var ECS_1 = require("../ECS");
    var ColliderComponent = function(_super) {
      __extends(ColliderComponent, _super);
      function ColliderComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ignoreTagMap = new Map();
        _this.targetTagMap = new Map();
        _this.colliders = [];
        return _this;
      }
      ColliderComponent.prototype.reset = function() {
        this.colliders = [];
        this.ignoreTagMap = new Map();
      };
      ColliderComponent = __decorate([ ECS_1.ecs.register("Collider") ], ColliderComponent);
      return ColliderComponent;
    }(ECS_1.ecs.IComponent);
    exports.ColliderComponent = ColliderComponent;
    cc._RF.pop();
  }, {
    "../ECS": "ECS"
  } ],
  ColliderSystem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84262UUMLRLS4Wni7FYD6tj", "ColliderSystem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ColliderComponent_1 = require("./../component/ColliderComponent");
    var ECS_1 = require("../ECS");
    var Quadtree_1 = require("../../collider/Quadtree");
    var CCollider_1 = require("../../collider/CCollider");
    var RayCastResult_1 = require("./RayCastResult");
    var Logic_1 = require("../../logic/Logic");
    var ColliderSystem = function(_super) {
      __extends(ColliderSystem, _super);
      function ColliderSystem(bounds, graphics) {
        var _this = _super.call(this) || this;
        _this.tempColliders = new Map();
        _this.list = [];
        _this.isDebug = false;
        _this.allCount = 0;
        _this.collisionCount = 0;
        _this.activeCount = 0;
        _this.checkTimeDelay = 0;
        var b = {
          x: bounds.x,
          y: bounds.y,
          width: bounds.width,
          height: bounds.height
        };
        _this.quadTree = new Quadtree_1.default(b);
        _this.graphics = graphics;
        return _this;
      }
      ColliderSystem.prototype.init = function() {
        this.isDebug = Logic_1.default.isDebug;
      };
      ColliderSystem.prototype.filter = function() {
        return ECS_1.ecs.allOf(ColliderComponent_1.ColliderComponent);
      };
      ColliderSystem.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .04) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      ColliderSystem.prototype.update = function(entities) {
        this.initCollider(entities);
        this.collisionCheck();
        this.updateDebug();
      };
      ColliderSystem.prototype.updateDebug = function() {
        if (!this.isDebug || !this.graphics) return;
        this.graphics.clear();
        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
          var c = _a[_i];
          c.drawDebug(this.graphics);
        }
      };
      ColliderSystem.prototype.initCollider = function(entities) {
        this.list = [];
        for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {
          var e = entities_1[_i];
          var colliders = e.Collider.colliders;
          for (var _a = 0, colliders_1 = colliders; _a < colliders_1.length; _a++) {
            var collider = colliders_1[_a];
            collider.entity = e;
            if (collider.enabled && collider.node && collider.node.active && collider.entity.NodeRender.node && collider.entity.NodeRender.node.active && !collider.isEmpty) {
              collider.fixCenterAndScale();
              this.list.push(collider);
              this.quadTree.insert(collider);
            }
          }
        }
      };
      ColliderSystem.prototype.colliderVaild = function(collider, other) {
        if (!other.enabled) return false;
        if (other === collider) return false;
        if (other.groupId == collider.groupId) return false;
        if (collider.ignoreSameTag && collider.tag == other.tag) return false;
        if (collider.targetTags.size > 0) {
          if (!collider.targetTags.has(other.tag)) return false;
        } else if (collider.ignoreTags.has(other.tag)) return false;
        if (other.targetTags.size > 0) {
          if (!other.targetTags.has(collider.tag)) return false;
        } else if (other.ignoreTags.has(collider.tag)) return false;
        return true;
      };
      ColliderSystem.prototype.collisionCheck = function() {
        this.tempColliders.clear();
        var allCount = 0;
        var collisionCount = 0;
        var activeCount = 0;
        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
          var collider = _a[_i];
          if (!collider.enabled) continue;
          var colliders = this.quadTree.retrieve(collider);
          for (var _b = 0, colliders_2 = colliders; _b < colliders_2.length; _b++) {
            var other = colliders_2[_b];
            allCount++;
            collider.tag != CCollider_1.default.TAG.VEHICLE && other.tag != CCollider_1.default.TAG.VEHICLE || collider;
            if (!this.colliderVaild(collider, other)) continue;
            if (this.tempColliders.has("" + collider.id + other.id) || this.tempColliders.has("" + other.id + collider.id)) continue;
            var isCollision = false;
            collider.type == CCollider_1.default.TYPE.RECT && other.type == CCollider_1.default.TYPE.RECT ? isCollision = collider.isRotate && other.isRotate ? this.polygonPolygon(collider.points, other.points) : collider.isRotate && !other.isRotate ? this.rectPolygon(other.Aabb, collider.points) : !collider.isRotate && other.isRotate ? this.rectPolygon(collider.Aabb, other.points) : this.recHit(collider.Aabb, other.Aabb) : collider.type == CCollider_1.default.TYPE.CIRCLE && other.type == CCollider_1.default.TYPE.CIRCLE ? isCollision = this.circleHit(collider.w_center, other.w_center, collider.w_radius, other.w_radius) : collider.type == CCollider_1.default.TYPE.RECT && other.type == CCollider_1.default.TYPE.CIRCLE ? isCollision = this.polygonCircle(collider.points, other.w_center, other.w_radius) : collider.type == CCollider_1.default.TYPE.CIRCLE && other.type == CCollider_1.default.TYPE.RECT && (isCollision = this.polygonCircle(other.points, collider.w_center, collider.w_radius));
            activeCount++;
            if (isCollision) {
              collider.preSolve(other, this.dt);
              other.preSolve(collider, this.dt);
              collider.contact(other, this.dt);
              other.contact(collider, this.dt);
              collider.physicTest(other, this.dt);
              other.physicTest(collider, this.dt);
              collider.disabledOnce = false;
              other.disabledOnce = false;
            } else {
              collider.exit(other);
              other.exit(collider);
            }
            this.tempColliders.set("" + collider.id + other.id, true);
          }
          !collider.sensor && collider.baseChangedCount < 1 && (collider.entity.Transform.base = collider.entity.Transform.fixBase);
        }
        this.quadTree.clear();
      };
      ColliderSystem.prototype.recHit = function(rect1, rect2) {
        if (rect1.width <= 0 || rect1.height <= 0 || rect2.width <= 0 || rect2.height <= 0) return false;
        return cc.Intersection.rectRect(rect1, rect2);
      };
      ColliderSystem.prototype.rectPolygon = function(rect, points) {
        if (rect.width <= 0 || rect.height <= 0) return false;
        return cc.Intersection.rectPolygon(rect, points);
      };
      ColliderSystem.prototype.polygonCircle = function(points, v, r) {
        if (r <= 0) return false;
        return cc.Intersection.polygonCircle(points, {
          position: v,
          radius: r
        });
      };
      ColliderSystem.prototype.polygonPolygon = function(points1, points2) {
        return cc.Intersection.polygonPolygon(points1, points2);
      };
      ColliderSystem.prototype.circleHit = function(v1, v2, r1, r2) {
        if (r1 <= 0 || r2 <= 0) return false;
        return cc.Intersection.circleCircle({
          position: v1,
          radius: r1
        }, {
          position: v2,
          radius: r2
        });
      };
      ColliderSystem.prototype.rayCast = function(p1, p2, lineZ, lineZHeight, targetTags) {
        if (p1.equals(p2)) return [];
        var results = new Array();
        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
          var collider = _a[_i];
          if (!targetTags.has(collider.tag)) continue;
          var isCollision = this.rayCastCollision(collider, p1, p2, lineZ, lineZHeight);
          if (isCollision) {
            var result = new RayCastResult_1.default(collider, collider.w_center);
            results.push(result);
          }
        }
        return results;
      };
      ColliderSystem.prototype.rayCastCollision = function(collider, p1, p2, lineZ, lineZHeight) {
        var isCollision = false;
        this.isLineHeightNotCollid(lineZ, lineZHeight, collider) || (collider.type == CCollider_1.default.TYPE.RECT ? isCollision = cc.Intersection.linePolygon(p1, p2, collider.points) : collider.type == CCollider_1.default.TYPE.CIRCLE && (isCollision = cc.Intersection.lineRect(p1, p2, collider.Aabb)));
        return isCollision;
      };
      ColliderSystem.prototype.nearestRayCast = function(p1, p2, lineZ, lineZHeight, targetTags, sensorTags, ignoreMap) {
        if (p1.equals(p2)) return null;
        var result;
        var distance = -1;
        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
          var collider = _a[_i];
          if (!targetTags.has(collider.tag)) continue;
          if (!sensorTags.has(collider.tag) && collider.sensor) continue;
          if (ignoreMap.has(collider.id)) continue;
          var isCollision = this.rayCastCollision(collider, p1, p2, lineZ, lineZHeight);
          if (isCollision) {
            var d = collider.w_center.sub(p1).magSqr();
            if (distance < 0 || distance > d) {
              distance = d;
              result = new RayCastResult_1.default(collider, collider.w_center);
            }
          }
        }
        if (result) {
          var length = result.collider.points.length;
          for (var i = 0; i < length; ++i) {
            var b1 = result.collider.points[i];
            var b2 = result.collider.points[(i + 1) % length];
            var ponit = this.getLineLinePoint(p1, p2, b1, b2);
            if (ponit) {
              result.point = ponit;
              break;
            }
          }
        }
        return result;
      };
      ColliderSystem.prototype.getNearestColliderPoint = function(p1, p2, collider) {
        var result = new RayCastResult_1.default(collider, p2);
        var length = result.collider.points.length;
        for (var i = 0; i < length; ++i) {
          var b1 = result.collider.points[i];
          var b2 = result.collider.points[(i + 1) % length];
          var ponit = this.getLineLinePoint(p1, p2, b1, b2);
          ponit && ponit.sub(p1).magSqr() < result.point.sub(p1).magSqr() && (result.point = ponit);
        }
        return result;
      };
      ColliderSystem.prototype.getLineLinePoint = function(a, b, c, d) {
        var area_abc = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);
        var area_abd = (a.x - d.x) * (b.y - d.y) - (a.y - d.y) * (b.x - d.x);
        if (area_abc * area_abd >= 0) return null;
        var area_cda = (c.x - a.x) * (d.y - a.y) - (c.y - a.y) * (d.x - a.x);
        var area_cdb = area_cda + area_abc - area_abd;
        if (area_cda * area_cdb >= 0) return null;
        var t = area_cda / (area_abd - area_abc);
        var dx = t * (b.x - a.x), dy = t * (b.y - a.y);
        return cc.v2(a.x + dx, a.y + dy);
      };
      ColliderSystem.prototype.isLineHeightNotCollid = function(lineZ, lineZHeight, collider) {
        return lineZ + lineZHeight < collider.z || lineZ > collider.z + collider.zHeight;
      };
      return ColliderSystem;
    }(ECS_1.ecs.ComblockSystem);
    exports.default = ColliderSystem;
    cc._RF.pop();
  }, {
    "../../collider/CCollider": "CCollider",
    "../../collider/Quadtree": "Quadtree",
    "../../logic/Logic": "Logic",
    "../ECS": "ECS",
    "./../component/ColliderComponent": "ColliderComponent",
    "./RayCastResult": "RayCastResult"
  } ],
  ColorPicker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37100Fyqi1C45ZEL7FQ7Hwb", "ColorPicker");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var HighPrecisionSlider_1 = require("./HighPrecisionSlider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ColorPicker = function(_super) {
      __extends(ColorPicker, _super);
      function ColorPicker() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.colorDisplay = null;
        _this.hueSlider = null;
        _this.saturationSlider = null;
        _this.valueSlider = null;
        _this.defaultColorLayout = null;
        _this.colorChangeCallback = null;
        return _this;
      }
      ColorPicker_1 = ColorPicker;
      ColorPicker.prototype.onLoad = function() {
        var _this = this;
        this.node.getChildByName("bg").on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.hide();
        });
        var _loop_1 = function(child) {
          child.on(cc.Node.EventType.TOUCH_START, function(event) {
            var hsv = child.color.toHSV();
            _this.hueSlider.progress = hsv.h;
            _this.saturationSlider.progress = hsv.s;
            _this.valueSlider.progress = hsv.v;
            _this.onSliderChange();
          });
        };
        for (var _i = 0, _a = this.defaultColorLayout.children; _i < _a.length; _i++) {
          var child = _a[_i];
          _loop_1(child);
        }
      };
      ColorPicker.prototype.show = function(defaultColor, defaultColors, callback) {
        var _this = this;
        this.node.active = true;
        this.colorChangeCallback = callback;
        var hsv = defaultColor.toHSV();
        this.hueSlider.progress = hsv.h;
        this.saturationSlider.progress = hsv.s;
        this.valueSlider.progress = hsv.v;
        for (var i = 0; i < this.defaultColorLayout.childrenCount; i++) if (i < defaultColors.length) {
          this.defaultColorLayout.children[i].active = true;
          this.defaultColorLayout.children[i].color = cc.Color.WHITE.fromHEX(defaultColors[i]);
        } else this.defaultColorLayout.children[i].active = false;
        this.updateColorDisplay();
        this.hueSlider.setSelectorCallback(function(progress) {
          _this.onSliderChange();
        });
        this.saturationSlider.setSelectorCallback(function(progress) {
          _this.onSliderChange();
        });
        this.valueSlider.setSelectorCallback(function(progress) {
          _this.onSliderChange();
        });
      };
      ColorPicker.prototype.hide = function() {
        this.node.active = false;
      };
      ColorPicker.prototype.randomColor = function() {
        var hsv = ColorPicker_1.getRandomColor().toHSV();
        this.hueSlider.progress = hsv.h;
        this.saturationSlider.progress = hsv.s;
        this.valueSlider.progress = hsv.v;
        this.onSliderChange();
      };
      ColorPicker.prototype.onSliderChange = function() {
        this.updateColorDisplay();
        this.node.active && this.colorChangeCallback && this.colorChangeCallback(this.colorDisplay.color);
      };
      ColorPicker.prototype.updateColorDisplay = function() {
        var hue = this.hueSlider.progress;
        var saturation = this.saturationSlider.progress;
        var value = this.valueSlider.progress;
        var color = cc.Color.WHITE.fromHSV(hue, saturation, value);
        this.colorDisplay.color = color;
      };
      ColorPicker.getRandomColor = function() {
        var hue = Math.random();
        var saturation = Math.random();
        var value = Math.random();
        return cc.Color.WHITE.fromHSV(hue, saturation, value);
      };
      var ColorPicker_1;
      ColorPicker.DEFAULT_MAX = 16;
      __decorate([ property(cc.Node) ], ColorPicker.prototype, "colorDisplay", void 0);
      __decorate([ property(HighPrecisionSlider_1.default) ], ColorPicker.prototype, "hueSlider", void 0);
      __decorate([ property(HighPrecisionSlider_1.default) ], ColorPicker.prototype, "saturationSlider", void 0);
      __decorate([ property(HighPrecisionSlider_1.default) ], ColorPicker.prototype, "valueSlider", void 0);
      __decorate([ property(cc.Node) ], ColorPicker.prototype, "defaultColorLayout", void 0);
      ColorPicker = ColorPicker_1 = __decorate([ ccclass ], ColorPicker);
      return ColorPicker;
    }(cc.Component);
    exports.default = ColorPicker;
    cc._RF.pop();
  }, {
    "./HighPrecisionSlider": "HighPrecisionSlider"
  } ],
  CommonData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b86e6PjawlOxqFoYPp0y0Jk", "CommonData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var CommonData = function() {
      function CommonData() {
        this.maxHealth = 0;
        this.maxDream = 0;
        this.maxAmmo = 0;
        this.ammoRecovery = 0;
        this.damageMin = 0;
        this.damageMax = 0;
        this.damageBack = 0;
        this.defence = 0;
        this.moveSpeed = 0;
        this.attackSpeed = 0;
        this.jumpSpeed = 0;
        this.jumpHeight = 0;
        this.remoteDamage = 0;
        this.realDamage = 0;
        this.magicDamage = 0;
        this.blockDamage = 0;
        this.remoteCooldown = 0;
        this.criticalStrikeRate = 0;
        this.blockPhysicalRate = 0;
        this.blockMagicRate = 0;
        this.lifeDrainRate = 0;
        this.dodgeRate = 0;
        this.remoteCritRate = 0;
        this.remoteInterval = 0;
        this.remoteAngle = 0;
        this.realRate = 0;
        this.magicDefenceRate = 0;
        this.iceRate = 0;
        this.fireRate = 0;
        this.lighteningRate = 0;
        this.toxicRate = 0;
        this.curseRate = 0;
        this.maxHealthPercent = 0;
        this.maxDreamPercent = 0;
        this.maxAmmoPercent = 0;
        this.ammoRecoveryPercent = 0;
        this.damageMinPercent = 0;
        this.damageMaxPercent = 0;
        this.damageBackPercent = 0;
        this.defencePercent = 0;
        this.moveSpeedPercent = 0;
        this.attackSpeedPercent = 0;
        this.jumpSpeedPercent = 0;
        this.jumpHeightPercent = 0;
        this.remoteDamagePercent = 0;
        this.realDamagePercent = 0;
        this.magicDamagePercent = 0;
      }
      CommonData.prototype.returnNumberValue = function(num, percent) {
        var value = num * (1 + percent);
        return value < 1 ? value : Math.floor(value);
      };
      Object.defineProperty(CommonData.prototype, "MaxHealth", {
        get: function() {
          return this.returnNumberValue(this.maxHealth, this.maxHealthPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "MaxDream", {
        get: function() {
          return this.returnNumberValue(this.maxDream, this.maxDreamPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "MaxAmmo", {
        get: function() {
          return this.returnNumberValue(this.maxAmmo, this.maxAmmoPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "AmmoRecovery", {
        get: function() {
          return this.returnNumberValue(this.ammoRecovery, this.ammoRecoveryPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "DamageMin", {
        get: function() {
          return this.returnNumberValue(this.damageMin, this.damageMinPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "DamageMax", {
        get: function() {
          return this.returnNumberValue(this.damageMax, this.damageMaxPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "DamageBack", {
        get: function() {
          return this.returnNumberValue(this.damageBack, this.damageBackPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "Defence", {
        get: function() {
          return this.returnNumberValue(this.defence, this.defencePercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "MoveSpeed", {
        get: function() {
          return this.returnNumberValue(this.moveSpeed, this.moveSpeedPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "AttackSpeed", {
        get: function() {
          return this.returnNumberValue(this.attackSpeed, this.attackSpeedPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "JumpSpeed", {
        get: function() {
          return this.returnNumberValue(this.jumpSpeed, this.jumpSpeedPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "JumpHeight", {
        get: function() {
          return this.returnNumberValue(this.jumpHeight, this.jumpHeightPercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "RemoteDamage", {
        get: function() {
          return this.returnNumberValue(this.remoteDamage, this.remoteDamagePercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "RealDamage", {
        get: function() {
          return this.returnNumberValue(this.realDamage, this.realDamagePercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CommonData.prototype, "MagicDamage", {
        get: function() {
          return this.returnNumberValue(this.magicDamage, this.magicDamagePercent / 100);
        },
        enumerable: false,
        configurable: true
      });
      CommonData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
      };
      CommonData.prototype.clone = function() {
        var e = new CommonData();
        e.valueCopy(this);
        return e;
      };
      CommonData.prototype.add = function(data) {
        for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {
          var key = _a[_i];
          -1 != key.indexOf("Rate") ? this[key] = DataUtils_1.default.addRateFixed(this[key], data[key]) : -1 != key.indexOf("Percent") ? this[key] = DataUtils_1.default.addPercentFixed(this[key], data[key]) : this[key] += data[key] ? data[key] : 0;
        }
        return this;
      };
      return CommonData;
    }();
    exports.default = CommonData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  Constants: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d74574gkVdD44PWy0hNj/oC", "Constants");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EnumCategory = exports.EnumStatus = exports.B3_VERSION = void 0;
    exports.B3_VERSION = "0.2.2";
    var EnumStatus;
    (function(EnumStatus) {
      EnumStatus[EnumStatus["SUCCESS"] = 1] = "SUCCESS";
      EnumStatus[EnumStatus["FAILURE"] = 2] = "FAILURE";
      EnumStatus[EnumStatus["RUNNING"] = 3] = "RUNNING";
      EnumStatus[EnumStatus["ERROR"] = 4] = "ERROR";
    })(EnumStatus = exports.EnumStatus || (exports.EnumStatus = {}));
    var EnumCategory;
    (function(EnumCategory) {
      EnumCategory["COMPOSITE"] = "composite";
      EnumCategory["DECORATOR"] = "decorator";
      EnumCategory["ACTION"] = "action";
      EnumCategory["CONDITION"] = "condition";
    })(EnumCategory = exports.EnumCategory || (exports.EnumCategory = {}));
    cc._RF.pop();
  }, {} ],
  Controller: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12f66EVamVPmoXVKYdoGHk5", "Controller");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EventHelper_1 = require("./EventHelper");
    var Logic_1 = require("./Logic");
    var CoolDownView_1 = require("../ui/CoolDownView");
    var CursorArea_1 = require("../ui/CursorArea");
    var Controller = function(_super) {
      __extends(Controller, _super);
      function Controller() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.attackAction = null;
        _this.attackActionTouched = false;
        _this.shootAction = null;
        _this.shootActionTouched = false;
        _this.jumpAction = null;
        _this.jumpActionTouched = false;
        _this.dashAction = null;
        _this.dashActionTouched = false;
        _this.interactAction = null;
        _this.interactActionTouched = false;
        _this.interactEmpty = null;
        _this.interactKey = null;
        _this.skillAction = null;
        _this.skillAction1 = null;
        _this.coolDown = null;
        _this.coolDown1 = null;
        _this.skillActionTouched = false;
        _this.skillActionTouched1 = false;
        _this.cursorAreaPrefab = null;
        _this.timeDelay = 0;
        return _this;
      }
      Controller_1 = Controller;
      Controller.prototype.onLoad = function() {
        var _this = this;
        this.cursorBackArea = CursorArea_1.default.init(this.cursorAreaPrefab);
        this.cursorBackArea.node.parent = this.node;
        this.coolDown.init(CoolDownView_1.default.PROFESSION);
        this.coolDown1.init(CoolDownView_1.default.ORGANIZATION);
        this.attackAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.attackActionTouched = true;
        }, this);
        this.attackAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.attackActionTouched = false;
        }, this);
        this.attackAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.attackActionTouched = false;
        }, this);
        this.shootAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.shootActionTouched = true;
        }, this);
        this.shootAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.shootActionTouched = false;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK_CANCEL);
        }, this);
        this.shootAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.shootActionTouched = false;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK_CANCEL);
        }, this);
        this.jumpAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.jumpActionTouched = true;
        }, this);
        this.jumpAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.jumpActionTouched = false;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_JUMP_CANCEL);
        }, this);
        this.jumpAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.jumpActionTouched = false;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_JUMP_CANCEL);
        }, this);
        this.dashAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.dashActionTouched = true;
        }, this);
        this.dashAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.dashActionTouched = false;
        }, this);
        this.dashAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.dashActionTouched = false;
        }, this);
        this.skillAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.skillActionTouched = true;
        }, this);
        this.skillAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.skillActionTouched = false;
        }, this);
        this.skillAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.skillActionTouched = false;
        }, this);
        this.skillAction1.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.skillActionTouched1 = true;
        }, this);
        this.skillAction1.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.skillActionTouched1 = false;
        }, this);
        this.skillAction1.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.skillActionTouched1 = false;
        }, this);
        var isLongPress = false;
        var touchStart = false;
        this.interactAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.interactActionTouched = true;
          touchStart = true;
          _this.scheduleOnce(function() {
            if (!touchStart) return;
            isLongPress = true;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_TRIGGER, {
              isLongPress: true
            });
          }, .3);
        }, this);
        this.interactAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.interactActionTouched = false;
          isLongPress || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_TRIGGER);
          touchStart = false;
          isLongPress = false;
        }, this);
        this.interactAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.interactActionTouched = false;
          touchStart = false;
          isLongPress = false;
        }, this);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CHANGE_CONTROLLER_SHIELD, function(detail) {
          _this.node && _this.changeRes(detail.isShield);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CONTROLLER_UPDATE_GAMEPAD, function(detail) {
          _this.node && _this.updateGamepad();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CONTROLLER_INTERACT_SHOW, function(detail) {
          if (_this.node) {
            _this.interactAction.active = detail.isShow;
            _this.interactEmpty.active = !detail.iiShow;
            _this.interactKey.active = detail.isShow && Controller_1.isMouseMode();
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CONTROLLER_REMOTE_SHOW, function(detail) {
          _this.node && (_this.shootAction.active = detail.isShow && !Controller_1.isMouseMode());
        });
        this.cursorBackArea.callback = function(type, pos) {
          if (!Controller_1.isMouseMode()) return;
          switch (type) {
           case CursorArea_1.default.CLICK_LEFT_DOWN:
            _this.attackActionTouched = true;
            break;

           case CursorArea_1.default.CLICK_RIGHT_DOWN:
            _this.shootActionTouched = true;
            break;

           case CursorArea_1.default.CLICK_LEFT_UP:
            _this.attackActionTouched = false;
            break;

           case CursorArea_1.default.CLICK_RIGHT_UP:
            _this.shootActionTouched = false;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK_CANCEL);
            break;

           case CursorArea_1.default.MOUSE_MOVE:
            Controller_1.mousePos = pos;
            break;

           case CursorArea_1.default.MOUSE_LEAVE:
            _this.attackActionTouched = false;
            _this.shootActionTouched = false;
          }
        };
        this.updateGamepad();
      };
      Controller.isMouseMode = function() {
        return !cc.sys.isMobile && !Logic_1.default.settings.showGamepad;
      };
      Controller.prototype.updateGamepad = function() {
        this.attackAction.position = cc.v3(Logic_1.default.settings.buttonPosAttack);
        this.shootAction.position = cc.v3(Logic_1.default.settings.buttonPosRemote);
        this.jumpAction.position = cc.v3(Logic_1.default.settings.buttonPosJump);
        this.dashAction.position = cc.v3(Logic_1.default.settings.buttonPosDash);
        this.interactAction.position = cc.v3(Logic_1.default.settings.buttonPosInteract);
        this.interactEmpty.position = cc.v3(Logic_1.default.settings.buttonPosInteract);
        this.skillAction.position = cc.v3(Logic_1.default.settings.buttonPosSkill1);
        this.skillAction1.position = cc.v3(Logic_1.default.settings.buttonPosSkill2);
        if (Controller_1.isMouseMode()) {
          this.attackAction.active = false;
          this.shootAction.active = false;
          this.jumpAction.active = false;
          this.dashAction.active = false;
          this.skillAction.active = false;
          this.skillAction1.active = false;
          this.coolDown.node.position = cc.v3(-100, -80);
          this.coolDown1.node.position = cc.v3(60, -80);
          this.coolDown.changeKeyShow(true);
          this.coolDown1.changeKeyShow(true);
        } else {
          this.attackAction.active = true;
          this.shootAction.active = true;
          this.jumpAction.active = true;
          this.dashAction.active = true;
          this.skillAction.active = true;
          this.skillAction1.active = true;
          this.coolDown.node.position = this.skillAction.position.clone();
          this.coolDown1.node.position = this.skillAction1.position.clone();
          this.coolDown.changeKeyShow(false);
          this.coolDown1.changeKeyShow(false);
        }
      };
      Controller.prototype.changeRes = function(isShield) {
        if (!this.shootAction) return;
        var button = this.shootAction.getComponent(cc.Button);
        if (!button) return;
        button.normalSprite = Logic_1.default.spriteFrameRes(isShield ? "uishield" : "uiremote");
        button.pressedSprite = Logic_1.default.spriteFrameRes(isShield ? "uishieldpress" : "uiremotepress");
        button.hoverSprite = Logic_1.default.spriteFrameRes(isShield ? "uishieldlight" : "uiremotelight");
        button.disabledSprite = Logic_1.default.spriteFrameRes(isShield ? "uishieldpress" : "uiremotepress");
      };
      Controller.prototype.drawSkillCoolDown = function(coolDown, count, graphics, coolDownFuc, coolDownNode, skillIcon, label) {
        var _this = this;
        label && (label.string = count > 0 ? "" + count : "");
        if (coolDown < 0) return;
        if (!coolDownNode) return;
        coolDownFuc && this.unschedule(coolDownFuc);
        0 == coolDown && graphics && graphics.clear();
        var p = cc.Vec3.ZERO;
        var percent = 100;
        var delta = .1;
        var offset = 100 / coolDown * delta;
        coolDownFuc = function() {
          percent -= offset;
          graphics && graphics.clear();
          _this.drawArc(360 * percent / 100, p, graphics);
          skillIcon.node.opacity = 200;
          if (percent < 0) {
            skillIcon.node.opacity = 0;
            graphics && graphics.clear();
            _this.unschedule(coolDownFuc);
          }
        };
        this.schedule(coolDownFuc, delta, cc.macro.REPEAT_FOREVER);
      };
      Controller.prototype.drawArc = function(angle, center, graphics) {
        if (!graphics) return;
        graphics.clear();
        if (angle < 0) return;
        var r = 48;
        var endAngle = 2 * angle * Math.PI / 360;
        graphics.arc(center.x, center.y, r, 2 * Math.PI, 2 * Math.PI - endAngle);
        graphics.stroke();
      };
      Controller.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .03) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      Controller.prototype.update = function(dt) {
        if (this.isTimeDelay(dt) && !Logic_1.default.isGamePause) {
          this.attackActionTouched && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_ATTACK);
          this.shootActionTouched && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK);
          this.jumpActionTouched && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_JUMP);
          this.dashActionTouched && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_DASH);
          if (this.skillActionTouched) {
            this.skillActionTouched = false;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_SKILL);
          }
          if (this.skillActionTouched1) {
            this.skillActionTouched1 = false;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_SKILL1);
          }
        }
      };
      var Controller_1;
      __decorate([ property(cc.Node) ], Controller.prototype, "attackAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "shootAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "jumpAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "dashAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "interactAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "interactEmpty", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "interactKey", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "skillAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "skillAction1", void 0);
      __decorate([ property(CoolDownView_1.default) ], Controller.prototype, "coolDown", void 0);
      __decorate([ property(CoolDownView_1.default) ], Controller.prototype, "coolDown1", void 0);
      __decorate([ property(cc.Prefab) ], Controller.prototype, "cursorAreaPrefab", void 0);
      Controller = Controller_1 = __decorate([ ccclass ], Controller);
      return Controller;
    }(cc.Component);
    exports.default = Controller;
    cc._RF.pop();
  }, {
    "../ui/CoolDownView": "CoolDownView",
    "../ui/CursorArea": "CursorArea",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  CoolDownView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58d32PM1/ZHL6BBvFTBgSIk", "CoolDownView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CoolDownView = function(_super) {
      __extends(CoolDownView, _super);
      function CoolDownView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.id = CoolDownView_1.PROFESSION;
        _this.skillIcon = null;
        _this.graphics = null;
        _this.coolDownFuc = null;
        _this.label = null;
        _this.labelBg = null;
        _this.lastTime = 0;
        _this.duration = 0;
        _this.storePoint = 1;
        _this.storePointMax = 1;
        _this.timeDelay = 0;
        return _this;
      }
      CoolDownView_1 = CoolDownView;
      CoolDownView.prototype.onLoad = function() {
        var _this = this;
        this.graphics = this.getComponent(cc.Graphics);
        this.label = this.node.getChildByName("label").getComponent(cc.Label);
        this.labelBg = this.node.getChildByName("labelbg");
        this.labelBg.active = false;
        this.skillIcon = this.node.getChildByName("mask").getChildByName("sprite").getComponent(cc.Sprite);
        this.skillIcon.node.opacity = 255;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CONTROLLER_COOLDOWN, function(detail) {
          _this.node && detail.id == _this.id && _this.setData(detail.duration, detail.lastTime, detail.storePoint, detail.storePointMax);
        });
      };
      CoolDownView.prototype.init = function(id) {
        this.id = id;
        this.skillIcon || (this.skillIcon = this.node.getChildByName("mask").getChildByName("sprite").getComponent(cc.Sprite));
        id == CoolDownView_1.PROFESSION ? this.setSkillIcon(Logic_1.default.playerData.AvatarData.professionData.talent) : id == CoolDownView_1.ORGANIZATION && this.setSkillIcon("talent10" + Logic_1.default.playerData.AvatarData.organizationIndex);
      };
      CoolDownView.prototype.setSkillIcon = function(resName) {
        this.skillIcon.spriteFrame = Logic_1.default.spriteFrameRes(resName);
      };
      CoolDownView.prototype.setData = function(duration, lastTime, storePoint, storePointMax) {
        if (!this.node) return;
        duration <= 0 && (duration = 0);
        this.storePointMax = storePointMax;
        this.duration = duration;
        this.lastTime = lastTime;
        this.storePoint = storePoint;
        this.drawSkillCoolDown();
      };
      CoolDownView.prototype.drawSkillCoolDown = function() {
        if (this.duration <= 0) return;
        this.label.string = this.storePoint > 0 && this.storePointMax > 1 ? "" + this.storePoint : "";
        this.labelBg.active = this.label.string.length > 0;
        this.graphics && this.graphics.clear();
        var p = cc.Vec3.ZERO;
        var currentTime = Date.now();
        var percent = (currentTime - this.lastTime) / (1e3 * this.duration);
        percent > 1 && (percent = 1);
        percent < 1 && this.drawArc(360 * (1 - percent), p, this.graphics);
      };
      CoolDownView.prototype.drawArc = function(angle, center, graphics) {
        if (!graphics) return;
        graphics.clear();
        if (angle < 0) return;
        var r = 48;
        var endAngle = 2 * angle * Math.PI / 360;
        graphics.arc(center.x, center.y, r, 2 * Math.PI, 2 * Math.PI - endAngle);
        graphics.stroke();
      };
      CoolDownView.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .1) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      CoolDownView.prototype.changeKeyShow = function(show) {
        this.node.getChildByName("btn").active = show;
      };
      CoolDownView.prototype.start = function() {};
      CoolDownView.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.drawSkillCoolDown();
      };
      var CoolDownView_1;
      CoolDownView.PROFESSION = 0;
      CoolDownView.ORGANIZATION = 1;
      CoolDownView.EQUIPITEM = 2;
      CoolDownView = CoolDownView_1 = __decorate([ ccclass ], CoolDownView);
      return CoolDownView;
    }(cc.Component);
    exports.default = CoolDownView;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic"
  } ],
  CursorArea: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5d73LFHDhBmYy/YoxxJn3D", "CursorArea");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CursorArea = function(_super) {
      __extends(CursorArea, _super);
      function CursorArea() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cursor = null;
        return _this;
      }
      CursorArea_1 = CursorArea;
      CursorArea.init = function(prefab) {
        var cursorArea = cc.instantiate(prefab).getComponent(CursorArea_1);
        cc.director.getScene().addChild(cursorArea.node, 0);
        return cursorArea;
      };
      CursorArea.prototype.onLoad = function() {
        this.cursor.active = false;
        this.node.on(cc.Node.EventType.MOUSE_DOWN, this.mouseDown, this);
        this.node.on(cc.Node.EventType.MOUSE_UP, this.mouseUp, this);
        this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.mouseLeave, this);
        this.node.on(cc.Node.EventType.MOUSE_MOVE, this.mouseMove, this);
      };
      CursorArea.prototype.offMouseEvent = function(type) {
        switch (type) {
         case 0:
          this.node.off(cc.Node.EventType.MOUSE_DOWN, this.mouseDown, this);
          break;

         case 1:
          this.node.off(cc.Node.EventType.MOUSE_UP, this.mouseUp, this);
          break;

         case 2:
          this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.mouseLeave, this);
          break;

         case 3:
          this.node.off(cc.Node.EventType.MOUSE_MOVE, this.mouseMove, this);
        }
      };
      CursorArea.prototype.mouseDown = function(event) {
        event.getButton() == cc.Event.EventMouse.BUTTON_LEFT ? this.callback && this.callback(CursorArea_1.CLICK_LEFT_DOWN, event.getLocation()) : event.getButton() == cc.Event.EventMouse.BUTTON_RIGHT && this.callback && this.callback(CursorArea_1.CLICK_RIGHT_DOWN, event.getLocation());
      };
      CursorArea.prototype.mouseUp = function(event) {
        event.getButton() == cc.Event.EventMouse.BUTTON_LEFT ? this.callback && this.callback(CursorArea_1.CLICK_LEFT_UP, event.getLocation()) : event.getButton() == cc.Event.EventMouse.BUTTON_RIGHT && this.callback && this.callback(CursorArea_1.CLICK_RIGHT_UP, event.getLocation());
      };
      CursorArea.prototype.mouseLeave = function(event) {
        this.callback && this.callback(CursorArea_1.MOUSE_LEAVE, event.getLocation());
      };
      CursorArea.prototype.mouseMove = function(event) {
        this.cursor.position = cc.v3(this.cursor.parent.convertToNodeSpaceAR(event.getLocation()));
        this.callback && this.callback(CursorArea_1.MOUSE_MOVE, event.getLocation());
      };
      CursorArea.prototype.setCursorParent = function(node) {
        this.cursor.parent = node;
      };
      var CursorArea_1;
      CursorArea.CLICK_LEFT_DOWN = 0;
      CursorArea.CLICK_LEFT_UP = 1;
      CursorArea.CLICK_RIGHT_DOWN = 2;
      CursorArea.CLICK_RIGHT_UP = 3;
      CursorArea.MOUSE_LEAVE = 4;
      CursorArea.MOUSE_MOVE = 5;
      __decorate([ property(cc.Node) ], CursorArea.prototype, "cursor", void 0);
      CursorArea = CursorArea_1 = __decorate([ ccclass ], CursorArea);
      return CursorArea;
    }(cc.Component);
    exports.default = CursorArea;
    cc._RF.pop();
  }, {} ],
  CustomAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96c32rzPk5Ju4HCHyR4PDmc", "CustomAction");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../../Constants");
    var B3Action_1 = require("../../core/B3Action");
    var Log = function(_super) {
      __extends(Log, _super);
      function Log() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Log.prototype.tick = function(tick) {
        console.log("test log");
        return Constants_1.EnumStatus.SUCCESS;
      };
      return Log;
    }(B3Action_1.B3Action);
    exports.default = Log;
    cc._RF.pop();
  }, {
    "../../Constants": "Constants",
    "../../core/B3Action": "B3Action"
  } ],
  CutScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb0c7YcdndBfpVkO+dBgo79", "CutScene");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CutScene = function(_super) {
      __extends(CutScene, _super);
      function CutScene() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isSkip = false;
        return _this;
      }
      CutScene.prototype.onLoad = function() {
        var _this = this;
        this.skipNode = this.node.getChildByName("skip");
        this.cut001 = this.node.getChildByName("sprite").getChildByName("cut001");
        this.cut002 = this.node.getChildByName("sprite").getChildByName("cut002");
        this.cut003 = this.node.getChildByName("sprite").getChildByName("cut003");
        this.cut004 = this.node.getChildByName("sprite").getChildByName("cut004");
        this.cut006 = this.node.getChildByName("sprite").getChildByName("cut006");
        this.cut007 = this.node.getChildByName("sprite").getChildByName("cut007");
        this.cut008 = this.node.getChildByName("sprite").getChildByName("cut008");
        this.cut009 = this.node.getChildByName("sprite").getChildByName("cut009");
        this.cutList = new Array();
        this.cutList.push(this.cut001);
        this.cutList.push(this.cut002);
        this.cutList.push(this.cut003);
        this.cutList.push(this.cut004);
        this.cutList.push(this.cut006);
        this.cutList.push(this.cut007);
        this.cutList.push(this.cut008);
        this.cutList.push(this.cut009);
        this.skipNode.opacity = 0;
        this.node.opacity = 0;
        this.hideAllCuts();
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          255 == _this.skipNode.opacity && (_this.isSkip = true);
          _this.skipNode.opacity = 255;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {}, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {}, this);
      };
      CutScene.prototype.playShow = function() {
        var _this = this;
        this.node.opacity = 255;
        this.getComponent(cc.Animation).play();
        this.scheduleOnce(function() {
          _this.isSkip = true;
        }, 12);
      };
      CutScene.prototype.unregisterClick = function() {
        this.node.off(cc.Node.EventType.TOUCH_START);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL);
        this.node.off(cc.Node.EventType.TOUCH_END);
      };
      CutScene.prototype.hideAllCuts = function() {
        for (var _i = 0, _a = this.cutList; _i < _a.length; _i++) {
          var cut = _a[_i];
          cut.opacity = 0;
        }
      };
      CutScene.prototype.start = function() {};
      CutScene = __decorate([ ccclass ], CutScene);
      return CutScene;
    }(cc.Component);
    exports.default = CutScene;
    cc._RF.pop();
  }, {} ],
  DamageData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "140ebm8pJ5CBb4RE4tI9c22", "DamageData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var DamageData = function() {
      function DamageData(realDamage) {
        this.realDamage = 0;
        this.physicalDamage = 0;
        this.magicDamage = 0;
        this.realRate = 0;
        this.iceRate = 0;
        this.fireRate = 0;
        this.lighteningRate = 0;
        this.toxicRate = 0;
        this.curseRate = 0;
        this.stoneRate = 0;
        this.isCriticalStrike = false;
        this.isBackAttack = false;
        this.isRemote = false;
        this.isStab = false;
        this.isFar = false;
        this.isFist = false;
        this.isBlunt = false;
        this.isMelee = false;
        this.comboType = 0;
        this.realDamage = realDamage || 0;
      }
      DamageData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
      };
      DamageData.prototype.clone = function() {
        var e = new DamageData();
        e.valueCopy(this);
        return e;
      };
      DamageData.prototype.getTotalDamage = function() {
        var d = this.physicalDamage + this.magicDamage + this.realDamage;
        if (isNaN(d)) {
          console.log(d);
          d = 0;
        }
        return d;
      };
      return DamageData;
    }();
    exports.default = DamageData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  DashShadow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "909e64n9VxBGoAX7rWiFEbf", "DashShadow");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var Dungeon_1 = require("../logic/Dungeon");
    var Talent_1 = require("../talent/Talent");
    var Shooter_1 = require("../logic/Shooter");
    var IndexZ_1 = require("../utils/IndexZ");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DashShadow = function(_super) {
      __extends(DashShadow, _super);
      function DashShadow() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hv = cc.v2(1, 0);
        _this.shooter = null;
        return _this;
      }
      DashShadow.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.motionStreak = this.getComponent(cc.MotionStreak);
        this.sprite = this.node.getChildByName("sprite");
      };
      DashShadow.prototype.init = function(talentDash) {
        this.talentDash = talentDash;
        this.shooter.actor = this.talentDash.player;
        this.shooter.dungeon = this.talentDash.player.node.parent.getComponent(Dungeon_1.default);
      };
      DashShadow.prototype.changeDashPerformance = function(talentList) {
        this.motionStreak.color = cc.Color.BLACK;
        for (var _i = 0, talentList_1 = talentList; _i < talentList_1.length; _i++) var t = talentList_1[_i];
      };
      DashShadow.prototype.onEnable = function() {};
      DashShadow.prototype.start = function() {};
      DashShadow.prototype.getPlayerPosition = function() {
        return this.talentDash.player.node.position.clone().addSelf(cc.v3(8, 8));
      };
      DashShadow.prototype.getNearPlayerDistance = function(playerNode) {
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, this.getPlayerPosition());
        return dis;
      };
      DashShadow.prototype.show = function() {
        var _this = this;
        this.node.active = true;
        this.node.parent = this.talentDash.player.node.parent;
        var faceright = this.talentDash.player.isFaceRight;
        this.sprite.scaleX = faceright ? 1 : -1;
        this.node.setPosition(this.getPlayerPosition());
        var speed = 24;
        this.talentDash.hashTalent(Talent_1.default.DASH_14) && (speed = 40);
        var hs = this.hv.mul(speed);
        this.entity.Move.linearVelocity = cc.v2(hs.x, hs.y);
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
        this.fire(this.shooter);
        this.scheduleOnce(function() {
          _this.hide();
        }, .45);
      };
      DashShadow.prototype.hide = function() {
        this.talentDash.player.node.setPosition(Dungeon_1.default.fixOuterMap(this.node.position.clone()));
        this.node.active = false;
        this.entity.Move.linearVelocity = cc.Vec2.ZERO;
      };
      DashShadow.prototype.onColliderEnter = function(other, self) {
        this.talentDash && this.talentDash.hashTalent(Talent_1.default.DASH_02) && this.talentDash.attacking(other, this.node);
      };
      DashShadow.prototype.fire = function(shooter) {
        shooter.data.bulletLineExNum = 5;
        shooter.data.bulletLineInterval = .05;
        if (this.talentDash.hashTalent(Talent_1.default.DASH_11)) {
          shooter.data.bulletLineExNum = 10;
          shooter.data.bulletLineInterval = .03;
        }
        var isOpenFire = false;
        if (this.talentDash.hashTalent(Talent_1.default.DASH_09)) {
          isOpenFire = true;
          shooter.data.bulletType = "bullet025";
        } else if (this.talentDash.hashTalent(Talent_1.default.DASH_10)) {
          isOpenFire = true;
          shooter.data.bulletType = "bullet026";
        }
        isOpenFire && shooter.fireBullet(0, cc.v3(0, 0));
      };
      DashShadow.prototype.setHv = function(hv) {
        hv.equals(cc.Vec2.ZERO) ? this.hv = cc.v2(1, 0) : this.hv = hv;
      };
      __decorate([ property(Shooter_1.default) ], DashShadow.prototype, "shooter", void 0);
      DashShadow = __decorate([ ccclass ], DashShadow);
      return DashShadow;
    }(BaseColliderComponent_1.default);
    exports.default = DashShadow;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../talent/Talent": "Talent",
    "../utils/IndexZ": "IndexZ"
  } ],
  DataUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3c153x2wslGmoUdqSPLeAbh", "DataUtils");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils = function() {
      function DataUtils() {}
      DataUtils.baseCopy = function(self, other, keepDefault) {
        if (!other) return;
        if (!self) return;
        if (self === other) return;
        for (var _i = 0, _a = Object.keys(self); _i < _a.length; _i++) {
          var key = _a[_i];
          "number" == typeof self[key] ? self[key] = keepDefault ? other[key] ? other[key] : self[key] : other[key] ? other[key] : 0 : "string" == typeof self[key] ? self[key] = keepDefault ? other[key] ? other[key] : self[key] : other[key] ? other[key] : "" : "boolean" == typeof self[key] && (self[key] = !!other[key] && other[key]);
        }
      };
      DataUtils.copyMapValue = function(map, callback) {
        var returnMap = new Map();
        map && map.forEach(function(element, key) {
          returnMap.set(key, callback(element));
        });
        return returnMap;
      };
      DataUtils.copyListValue = function(list, callback) {
        var returnList = [];
        if (list) for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
          var c = list_1[_i];
          returnList.push(callback(c));
        }
        return returnList;
      };
      DataUtils.cloneKeyValue = function(data, callback) {
        var newdata = {};
        for (var key in data) newdata[key] = callback(data[key]);
        return newdata;
      };
      DataUtils.cloneNumberKeyValue = function(data, callback) {
        var newdata = {};
        for (var key in data) newdata[key] = callback(data[key]);
        return newdata;
      };
      DataUtils.addRateFixed = function(origin, target) {
        return DataUtils.fixRateRange(DataUtils.addRate(origin, target), 0, 100);
      };
      DataUtils.addRate = function(origin, target) {
        if (!target || isNaN(target)) {
          if (!origin || isNaN(origin)) return 0;
          return origin;
        }
        if (!origin || isNaN(origin)) {
          if (!target || isNaN(target)) return 0;
          return target;
        }
        var rate = 1;
        rate *= 1 - origin / 100;
        rate *= 1 - target / 100;
        return 100 * (1 - rate);
      };
      DataUtils.addPercentFixed = function(origin, target) {
        return DataUtils.fixRateRange(DataUtils.addRate(origin, target), -100, 9999);
      };
      DataUtils.fixRateRange = function(rate, min, max) {
        rate = rate < min ? min : rate;
        rate = rate > max ? max : rate;
        return rate;
      };
      DataUtils.getinfoNum2String = function(isSkip, prefix, num, suffix) {
        if (isSkip) return "";
        if (isNaN(num)) return "" + prefix;
        if (0 == num) return "" + prefix + num + suffix;
        var str = "" + num.toFixed(2).replace(".00", "");
        if (str.indexOf(".") > -1) {
          var arr = str.split(".");
          var end = arr[1];
          end.length > 1 && end.endsWith("0") && (end = end.substring(0, end.length - 1));
          str = arr[0] + "." + end;
        }
        return "" + prefix + str + suffix;
      };
      return DataUtils;
    }();
    exports.default = DataUtils;
    cc._RF.pop();
  }, {} ],
  DecorationFloor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0e43WuUrFGu7HrB9h8NrBh", "DecorationFloor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var IndexZ_1 = require("../utils/IndexZ");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DecorationFloor = function(_super) {
      __extends(DecorationFloor, _super);
      function DecorationFloor() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.parallexLevel = 0;
        _this.RANGE = 300;
        return _this;
      }
      DecorationFloor.prototype.init = function(dungeon, resName, scale, angle, parallexLevel, anchor, opacity, zIndex) {
        this.entity.destroy();
        this.dungeon = dungeon;
        this.parallexLevel = null !== parallexLevel && void 0 !== parallexLevel ? parallexLevel : 0;
        this.node.zIndex = zIndex || IndexZ_1.default.ACTOR;
        this.node.scale = scale;
        if (anchor) {
          this.node.anchorX = anchor.x;
          this.node.anchorY = anchor.y;
        }
        var sprite = this.getComponent(cc.Sprite);
        sprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
        this.node.angle = null !== angle && void 0 !== angle ? angle : 0;
        this.node.width = sprite.spriteFrame.getOriginalSize().width;
        this.node.height = sprite.spriteFrame.getOriginalSize().height;
        this.node.opacity = opacity || 255;
        this.originPos = this.node.position.clone();
      };
      DecorationFloor.prototype.update = function(dt) {
        if (this.dungeon && this.dungeon.player && this.parallexLevel > 0) {
          var pos = this.dungeon.player.node.position.sub(this.node.position);
          pos.x > this.RANGE && (pos.x = this.RANGE);
          pos.x < -this.RANGE && (pos.x = -this.RANGE);
          pos.y > this.RANGE && (pos.y = this.RANGE);
          pos.y < -this.RANGE && (pos.y = -this.RANGE);
          var p = cc.v3(pos.x / this.RANGE * Dungeon_1.default.TILE_SIZE * this.parallexLevel, -pos.y / this.RANGE * Dungeon_1.default.TILE_SIZE * this.parallexLevel / 2);
          this.node.position = Logic_1.default.lerpPos(this.node.position, this.originPos.add(p), 5 * dt);
        }
      };
      DecorationFloor = __decorate([ ccclass ], DecorationFloor);
      return DecorationFloor;
    }(Building_1.default);
    exports.default = DecorationFloor;
    cc._RF.pop();
  }, {
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  DecorationWall: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5d55seKzhHT5DvzBQhlKhU", "DecorationWall");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Building_1 = require("./Building");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DecorationWall = function(_super) {
      __extends(DecorationWall, _super);
      function DecorationWall() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        return _this;
      }
      DecorationWall.prototype.init = function(mapStr) {
        this.entity.destroy();
        this.mapStr = mapStr;
        var letter = mapStr[1];
        var resName = "walldecoration_0_" + letter;
        var spriteframe = Logic_1.default.spriteFrameRes(resName);
        if (spriteframe) {
          var arr = resName.split("_");
          if (arr.length > 1) {
            var scale = parseInt(arr[1]);
            isNaN(scale) || (this.sprite.node.scale = scale > 0 ? scale : 1);
          }
          this.sprite.spriteFrame = spriteframe;
          this.sprite.node.width = spriteframe.getRect().width;
          this.sprite.node.height = spriteframe.getRect().height;
        }
      };
      __decorate([ property(cc.Sprite) ], DecorationWall.prototype, "sprite", void 0);
      DecorationWall = __decorate([ ccclass ], DecorationWall);
      return DecorationWall;
    }(Building_1.default);
    exports.default = DecorationWall;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "./Building": "Building"
  } ],
  DefaultStateMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4327d7ykMVKAbwAJoU8o/85", "DefaultStateMachine");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DefaultStateMachine = function() {
      function DefaultStateMachine(owner, initialState, globalState) {
        this.owner = owner;
        this.setInitialState(initialState);
        this.setGlobalState(globalState);
      }
      DefaultStateMachine.prototype.getOwner = function() {
        return this.owner;
      };
      DefaultStateMachine.prototype.setOwner = function(owner) {
        this.owner = owner;
      };
      DefaultStateMachine.prototype.setInitialState = function(state) {
        this.previousState = null;
        this.currentState = state;
      };
      DefaultStateMachine.prototype.setGlobalState = function(state) {
        this.globalState = state;
      };
      DefaultStateMachine.prototype.getCurrentState = function() {
        return this.currentState;
      };
      DefaultStateMachine.prototype.getGlobalState = function() {
        return this.globalState;
      };
      DefaultStateMachine.prototype.getPreviousState = function() {
        return this.previousState;
      };
      DefaultStateMachine.prototype.update = function() {
        this.globalState && this.globalState.update(this.owner);
        this.currentState && this.currentState.update(this.owner);
      };
      DefaultStateMachine.prototype.changeState = function(newState) {
        this.previousState = this.currentState;
        this.currentState && this.currentState.exit(this.owner);
        this.currentState = newState;
        this.currentState && this.currentState.enter(this.owner);
      };
      DefaultStateMachine.prototype.revertToPreviousState = function() {
        if (!this.previousState) return false;
        this.changeState(this.previousState);
        return true;
      };
      DefaultStateMachine.prototype.isInState = function(state) {
        return this.currentState == state;
      };
      DefaultStateMachine.prototype.handleEvent = function(event) {
        if (this.currentState && this.currentState.event(this.owner, event)) return true;
        if (this.globalState && this.globalState.event(this.owner, event)) return true;
        return false;
      };
      return DefaultStateMachine;
    }();
    exports.default = DefaultStateMachine;
    cc._RF.pop();
  }, {} ],
  DialogueActorData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e32c18Z0BZI05IL1SZQyIL8", "DialogueActorData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var DialogueActorData = function() {
      function DialogueActorData() {
        this.id = 0;
        this.resName = "";
        this.name = "";
      }
      DialogueActorData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
      };
      DialogueActorData.prototype.clone = function() {
        var e = new DialogueActorData();
        e.valueCopy(this);
        return e;
      };
      return DialogueActorData;
    }();
    exports.default = DialogueActorData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  DialogueButtonData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6bd5asFAJFKDr1VnvArWXtv", "DialogueButtonData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var DialogueButtonData = function() {
      function DialogueButtonData() {
        this.jumpId = 0;
        this.text = "";
      }
      DialogueButtonData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
      };
      DialogueButtonData.prototype.clone = function() {
        var e = new DialogueButtonData();
        e.valueCopy(this);
        return e;
      };
      return DialogueButtonData;
    }();
    exports.default = DialogueButtonData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  DialogueData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3fcf/QYfRGfaZUJs22LWOn", "DialogueData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var DialogueActorData_1 = require("./DialogueActorData");
    var DialogueTextData_1 = require("./DialogueTextData");
    var DialogueData = function() {
      function DialogueData() {
        this.id = "";
        this.list = [];
        this.actors = [];
        this.isTalk = false;
        this.count = 0;
      }
      DialogueData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        if (data.list) {
          this.list = [];
          for (var _i = 0, _a = data.list; _i < _a.length; _i++) {
            var d = _a[_i];
            var data_1 = new DialogueTextData_1.default();
            data_1.valueCopy(d);
            this.list.push(data_1);
          }
        }
        if (data.actors) {
          this.actors = [];
          for (var _b = 0, _c = data.actors; _b < _c.length; _b++) {
            var d = _c[_b];
            var data_2 = new DialogueActorData_1.default();
            data_2.valueCopy(d);
            this.actors.push(data_2);
          }
        }
      };
      DialogueData.prototype.clone = function() {
        var e = new DialogueData();
        e.valueCopy(this);
        return e;
      };
      return DialogueData;
    }();
    exports.default = DialogueData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./DialogueActorData": "DialogueActorData",
    "./DialogueTextData": "DialogueTextData"
  } ],
  DialogueTextData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "54286rMQ+lGeIpVOxeBmewI", "DialogueTextData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var DialogueButtonData_1 = require("./DialogueButtonData");
    var DialogueTextData = function() {
      function DialogueTextData() {
        this.id = 0;
        this.actor = 0;
        this.text = "";
        this.next = [];
      }
      DialogueTextData.prototype.valueCopy = function(data) {
        var _a;
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.next = null !== (_a = data.next) && void 0 !== _a ? _a : [];
        if (data.next) {
          this.next = [];
          for (var _i = 0, _b = data.next; _i < _b.length; _i++) {
            var d = _b[_i];
            var data_1 = new DialogueButtonData_1.default();
            data_1.valueCopy(d);
            this.next.push(data_1);
          }
        }
      };
      DialogueTextData.prototype.clone = function() {
        var e = new DialogueTextData();
        e.valueCopy(this);
        return e;
      };
      return DialogueTextData;
    }();
    exports.default = DialogueTextData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./DialogueButtonData": "DialogueButtonData"
  } ],
  Dialogue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "631f6Hdi4dH9rqEJFMGhsDk", "Dialogue");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DialogueData_1 = require("../data/DialogueData");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Dialogue = function(_super) {
      __extends(Dialogue, _super);
      function Dialogue() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.next = null;
        _this.topbg = null;
        _this.bottombg = null;
        _this.avatarSprite = null;
        _this.buttonLayout = null;
        _this.button0 = null;
        _this.button1 = null;
        _this.button2 = null;
        _this.button3 = null;
        _this.nameLabel = null;
        _this.anim = null;
        _this.data = new DialogueData_1.default();
        _this.currentTextIndex = 0;
        _this.currentTextSplitIndex = 0;
        _this.splitArr = [];
        _this.isShow = false;
        _this.isAniming = false;
        _this.isTalking = false;
        _this.buttons = [];
        _this.nextPos = cc.v3(0, 0);
        return _this;
      }
      Dialogue_1 = Dialogue;
      Dialogue.prototype.onLoad = function() {
        var _this = this;
        this.buttons = [ this.button0, this.button1, this.button2, this.button3 ];
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_DIALOGUE_SHOW, function(detail) {
          _this.node && _this.show(detail.data);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_DIALOGUE_SKIP, function(detail) {
          _this.node && _this.tap();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_DIALOGUE_BUTTON, function(detail) {
          _this.node && _this.buttonTap(null, detail.index);
        });
        this.node.active = false;
        this.anim = this.getComponent(cc.Animation);
        this.addTapListener(this.node);
      };
      Dialogue.play = function(id, callback) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DIALOGUE_SHOW, {
          data: Logic_1.default.dialogues[id]
        });
        callback && Dialogue_1.callbacks.set(id, callback);
      };
      Dialogue.prototype.addTapListener = function(node) {
        var _this = this;
        node.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.tap();
        }, this);
      };
      Dialogue.prototype.show = function(data) {
        this.anim.stop();
        this.resetUi();
        this.node.active = true;
        this.data.valueCopy(data);
        this.isAniming = true;
        this.isShow = true;
        this.anim.play("DialogueShow");
      };
      Dialogue.prototype.hide = function() {
        this.isShow = false;
        this.isAniming = true;
        this.label.node.opacity = 0;
        this.anim.play("DialogueHide");
      };
      Dialogue.prototype.buttonTap = function(event, index) {
        if (!this.buttons[parseInt(index)].node.active) return;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.goNext(parseInt(index));
      };
      Dialogue.prototype.ShowFinish = function() {
        this.isAniming = false;
        this.playDialogue();
      };
      Dialogue.prototype.HideFinish = function() {
        this.isAniming = false;
        this.node.active = false;
      };
      Dialogue.prototype.hasButton = function() {
        return this.button0.node.active || this.button1.node.active || this.button2.node.active || this.button3.node.active;
      };
      Dialogue.prototype.goNext = function(index) {
        var current = this.data.list[this.currentTextIndex];
        this.splitArr.length < 1 && (current.next.length > index ? this.currentTextIndex = current.next[index].jumpId : this.currentTextIndex++);
        if (this.currentTextIndex > this.data.list.length - 1) {
          this.hide();
          var callback = Dialogue_1.callbacks.get(this.data.id);
          if (callback) {
            callback(index);
            Dialogue_1.callbacks.delete(this.data.id);
          }
          return;
        }
        this.updateUi();
      };
      Dialogue.prototype.tap = function() {
        if (!this.isShow || this.isAniming || this.hasButton()) return;
        if (this.isTalking) {
          this.isTalking = false;
          this.label.node.stopAllActions();
          var current = this.data.list[this.currentTextIndex];
          this.label.string = current.text;
          return;
        }
        this.goNext(0);
      };
      Dialogue.prototype.playDialogue = function() {
        if (this.data.list.length > 0) {
          this.currentTextIndex = 0;
          this.updateUi();
        } else this.hide();
      };
      Dialogue.prototype.resetUi = function() {
        this.nameLabel.string = "";
        this.avatarSprite.spriteFrame = null;
        this.label.string = "";
        this.next.opacity = 0;
        for (var i = 0; i < this.buttons.length; i++) this.updateButton(this.buttons[i], i);
      };
      Dialogue.prototype.updateUi = function() {
        if (this.currentTextIndex > this.data.list.length - 1) return;
        this.currentTextIndex < 0 && this.hide();
        var current = this.data.list[this.currentTextIndex];
        if (this.splitArr.length < 1) {
          var count = 0;
          var start = 0;
          for (var i = 0; i < current.text.length; i++) {
            var code = current.text.charCodeAt(i);
            count += code >= 1 && code <= 126 || 65376 <= code && code <= 65439 ? 1 : 2;
            if (count > 100 || i == current.text.length - 1) {
              count = 0;
              this.splitArr.unshift(current.text.substring(start, start + i + 1));
              start = i + 1;
              start > current.text.length - 1 && (start = current.text.length - 1);
            }
          }
        }
        this.nameLabel.string = this.data.actors[current.actor].name;
        this.avatarSprite.spriteFrame = Logic_1.default.spriteFrameRes(this.data.actors[current.actor].resName);
        null == this.avatarSprite.spriteFrame && (this.avatarSprite.spriteFrame = Logic_1.default.spriteFrameRes("dialoguedefault"));
        this.updateLabel(this.splitArr.pop(), this.data.isTalk);
        for (var i = 0; i < this.buttons.length; i++) this.updateButton(this.buttons[i], i, this.splitArr.length > 0 ? void 0 : current);
        this.next.opacity = this.hasButton() ? 0 : 255;
      };
      Dialogue.prototype.updateButton = function(button, index, current) {
        if (!current || current.next.length - 1 < index) {
          button.node.active = false;
          return;
        }
        button.node.active = current.next[index].text && current.next[index].text.length > 0;
        button.getComponentInChildren(cc.Label).string = index + 1 + "." + current.next[index].text;
      };
      Dialogue.prototype.updateLabel = function(text, isTalk) {
        var _this = this;
        if (isTalk) {
          this.nextPos = this.next.position.clone();
          this.next.stopAllActions();
          cc.tween(this.next).repeatForever(cc.tween(this.next).to(.5, {
            y: this.nextPos.y - 10
          }).to(.5, {
            y: this.nextPos.y
          })).start();
          this.isTalking = true;
          var index_1 = 0;
          var talktween = cc.tween().delay(.04).call(function() {
            _this.label.string = text.substring(0, ++index_1);
            AudioPlayer_1.default.play(AudioPlayer_1.default.VOICE);
          });
          cc.tween(this.label.node).to(.2, {
            opacity: 0
          }).call(function() {
            _this.label.string = "";
          }).to(.2, {
            opacity: 255
          }).repeat(text.length, talktween).call(function() {
            _this.isTalking = false;
            _this.next.stopAllActions();
            AudioPlayer_1.default.stopAllEffect();
          }).start();
        } else cc.tween(this.label.node).to(.2, {
          opacity: 0
        }).call(function() {
          _this.label.string = text;
        }).to(.2, {
          opacity: 255
        }).start();
      };
      var Dialogue_1;
      Dialogue.DAILY_WAKE_UP = "daily000";
      Dialogue.DAILY_SLEEP = "daily001";
      Dialogue.DAILY_SAVE_POINT = "daily004";
      Dialogue.COURSE_FIRST_PC = "course000";
      Dialogue.COURSE_FIRST_MOBILE = "course001";
      Dialogue.callbacks = new Map();
      __decorate([ property(cc.Label) ], Dialogue.prototype, "label", void 0);
      __decorate([ property(cc.Node) ], Dialogue.prototype, "next", void 0);
      __decorate([ property(cc.Node) ], Dialogue.prototype, "topbg", void 0);
      __decorate([ property(cc.Node) ], Dialogue.prototype, "bottombg", void 0);
      __decorate([ property(cc.Sprite) ], Dialogue.prototype, "avatarSprite", void 0);
      __decorate([ property(cc.Node) ], Dialogue.prototype, "buttonLayout", void 0);
      __decorate([ property(cc.Button) ], Dialogue.prototype, "button0", void 0);
      __decorate([ property(cc.Button) ], Dialogue.prototype, "button1", void 0);
      __decorate([ property(cc.Button) ], Dialogue.prototype, "button2", void 0);
      __decorate([ property(cc.Button) ], Dialogue.prototype, "button3", void 0);
      __decorate([ property(cc.Label) ], Dialogue.prototype, "nameLabel", void 0);
      Dialogue = Dialogue_1 = __decorate([ ccclass ], Dialogue);
      return Dialogue;
    }(cc.Component);
    exports.default = Dialogue;
    cc._RF.pop();
  }, {
    "../data/DialogueData": "DialogueData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer"
  } ],
  DisCondition: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8676b1Mv1lKtKwC+IsyIJ5V", "DisCondition");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../../Constants");
    var B3Condition_1 = require("../../core/B3Condition");
    var DisCondition = function(_super) {
      __extends(DisCondition, _super);
      function DisCondition() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DisCondition.prototype.tick = function(tick) {
        var myPos = tick.blackboard.get("mypos");
        var targetPos = tick.blackboard.get("targetpos");
        var dis = myPos.sub(targetPos).mag();
        if (dis < this.dis) return Constants_1.EnumStatus.SUCCESS;
        return Constants_1.EnumStatus.FAILURE;
      };
      DisCondition.prototype._parseProp = function(d) {
        this.dis = d.dis;
      };
      DisCondition.prototype.setTarget = function(v) {
        this.target = v;
      };
      DisCondition.prototype.getTarget = function() {
        return this.target;
      };
      return DisCondition;
    }(B3Condition_1.B3Condition);
    exports.default = DisCondition;
    cc._RF.pop();
  }, {
    "../../Constants": "Constants",
    "../../core/B3Condition": "B3Condition"
  } ],
  DollJoyStick: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a4c84CciM1Ne6aS3ei6/bWa", "DollJoyStick");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DollJoyStick = function(_super) {
      __extends(DollJoyStick, _super);
      function DollJoyStick() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.head = null;
        _this.bar = null;
        _this.isPressing = false;
        _this.timeDelay = 0;
        _this.movePos = cc.v2(0, 0);
        _this.stopCount = 0;
        return _this;
      }
      DollJoyStick.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .03) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      DollJoyStick.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.startPos = event.getLocation();
          _this.isPressing = true;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var movePos = event.getLocation().sub(_this.startPos);
          movePos.mag() > _this.node.width / 10 ? _this.movePos = movePos.normalize() : _this.movePos = cc.Vec2.ZERO;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.isPressing = false;
          _this.movePos = cc.Vec2.ZERO;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.isPressing = false;
          _this.movePos = cc.Vec2.ZERO;
        }, this);
      };
      DollJoyStick.prototype.updateUi = function(pos) {
        this.sprite.angle = -45 * pos.x;
        this.head.y = 16 * (1 + pos.y);
        this.bar.scaleY = 1 + pos.y;
        this.head.y > 24 && (this.head.y = 24);
        this.bar.scaleY > 1.5 && (this.bar.scaleY = 1.5);
      };
      DollJoyStick.prototype.update = function(dt) {
        if (this.isTimeDelay(dt)) {
          this.movePos.equals(cc.Vec2.ZERO) ? this.stopCount++ : this.stopCount = 0;
          this.stopCount < 2 && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.KEYBOARD_MOVE, {
            pos: this.movePos
          });
        }
      };
      __decorate([ property(cc.Node) ], DollJoyStick.prototype, "sprite", void 0);
      __decorate([ property(cc.Node) ], DollJoyStick.prototype, "head", void 0);
      __decorate([ property(cc.Node) ], DollJoyStick.prototype, "bar", void 0);
      DollJoyStick = __decorate([ ccclass ], DollJoyStick);
      return DollJoyStick;
    }(cc.Component);
    exports.default = DollJoyStick;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper"
  } ],
  DollMachineDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78eb7fVRwVOurYS85kmreTD", "DollMachineDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../../logic/Logic");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var Utils_1 = require("../../utils/Utils");
    var Doll_1 = require("../Doll");
    var DollJoyStick_1 = require("../DollJoyStick");
    var EventHelper_1 = require("./../../logic/EventHelper");
    var BaseDialog_1 = require("./BaseDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DollMachineDialog = function(_super) {
      __extends(DollMachineDialog, _super);
      function DollMachineDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hook = null;
        _this.hookSprite = null;
        _this.claw = null;
        _this.clawLeft = null;
        _this.clawRight = null;
        _this.clawCenter = null;
        _this.hookLine = null;
        _this.topLayout = null;
        _this.layout = null;
        _this.joyStick = null;
        _this.joyStickSmall = null;
        _this.coinLayout = null;
        _this.countDown = null;
        _this.countDownSmall = null;
        _this.dollPrefab = null;
        _this.isHooking = false;
        _this.lastMovePos = cc.Vec3.ZERO;
        _this.hookSwingAngle = 0;
        _this.clawSwingAngle = 0;
        _this.dollList = [];
        _this.isCoinInserted = false;
        _this.isCoinAniming = false;
        return _this;
      }
      DollMachineDialog.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.KEYBOARD_MOVE, function(detail) {
          _this.node && _this.node.active && _this.joystickMove(detail.pos);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.KEYBOARD_INTERACT, function(detail) {
          _this.node && _this.node.active && _this.buttonClick();
        });
        this.coinLayout.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.node && _this.insertCoin();
        }, this);
        this.initDolls();
      };
      DollMachineDialog.prototype.initDolls = function() {
        this.dollList = [];
        this.layout.removeAllChildren();
        for (var _i = 0, _a = Logic_1.default.dollNameList; _i < _a.length; _i++) {
          var data = _a[_i];
          var doll = cc.instantiate(this.dollPrefab).getComponent(Doll_1.default).init(Logic_1.default.items[data]);
          doll.node.parent = this.layout;
          this.dollList.push(doll);
        }
        for (var j = 0; j < 3; j++) for (var i = 0; i < 6; i++) {
          if (0 == i && 0 == j) continue;
          i + j < this.dollList.length + 1 && (this.dollList[i + 6 * j - 1].node.position = cc.v3(i * Doll_1.default.RECT.width, j * Doll_1.default.RECT.width).add(cc.v3(Doll_1.default.RECT.width / 2, Doll_1.default.RECT.width / 2)));
        }
      };
      DollMachineDialog.prototype.insertCoin = function() {
        var _this = this;
        if (this.isCoinAniming) return;
        this.anim || (this.anim = this.coinLayout.getComponent(cc.Animation));
        this.isCoinAniming = true;
        this.anim.play("DollMachineCoinIn");
        AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
          count: -2
        });
        this.scheduleOnce(function() {
          _this.coinIn();
        }, 1);
      };
      DollMachineDialog.prototype.coinIn = function() {
        var _this = this;
        if (this.isCoinInserted) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
          this.anim.play("DollMachineCoinOut");
          Utils_1.default.toast("\u5df2\u6295\u5e01\uff0c\u8bf7\u7a0d\u540e");
          this.scheduleOnce(function() {
            _this.isCoinAniming = false;
            AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
          }, 1);
        } else {
          this.isCoinAniming = false;
          this.isCoinInserted = true;
          AudioPlayer_1.default.play(AudioPlayer_1.default.CASHIERING);
          this.unscheduleAllCallbacks();
          var count_1 = 30;
          this.countDown.string = "" + count_1;
          this.countDownSmall.string = "" + count_1;
          var timer_1 = function() {
            count_1--;
            if (count_1 <= 0) {
              count_1 = 0;
              _this.buttonClick();
            } else count_1 < 6 && AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
            _this.countDown.string = (count_1 > 9 ? "" : "0") + count_1;
            _this.countDownSmall.string = (count_1 > 9 ? "" : "0") + count_1;
            _this.isHooking && _this.unschedule(timer_1);
          };
          this.schedule(timer_1, 1, count_1, 1);
        }
      };
      DollMachineDialog.prototype.joystickMove = function(pos) {
        this.joyStick.updateUi(pos);
        this.joyStickSmall.updateUi(pos);
        if (!this.isCoinInserted || this.isHooking) return;
        var movePos = Utils_1.default.clampPos(this.hook.position.add(pos.mul(10)), cc.v3(this.topLayout.width - this.hook.width / 2, this.topLayout.height - this.hook.height / 2), cc.v3(this.hook.width / 2, this.hook.height / 2));
        this.hook.position = movePos;
        if (!pos.equals(cc.Vec3.ZERO)) {
          pos.x > 0 ? this.lastMovePos.x < 0 ? this.hookSwingAngle < 0 ? this.hookSwingAngle -= 30 : 0 == this.hookSwingAngle && (this.hookSwingAngle += 30) : 0 == this.lastMovePos.x && 0 == this.hookSwingAngle && (this.hookSwingAngle += 30) : pos.x < 0 && (this.lastMovePos.x > 0 ? this.hookSwingAngle > 0 ? this.hookSwingAngle += 30 : 0 == this.hookSwingAngle && (this.hookSwingAngle -= 30) : 0 == this.lastMovePos.x && 0 == this.hookSwingAngle && (this.hookSwingAngle -= 30));
          var max = 75;
          this.hookSwingAngle = Utils_1.default.clamp(this.hookSwingAngle, max, -max);
        }
        this.lastMovePos = pos.clone();
      };
      DollMachineDialog.prototype.buttonClick = function() {
        var _this = this;
        if (!this.isCoinInserted) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
          Utils_1.default.toast("\u70b9\u51fb\u53f3\u4e0b\u89d2\u6295\u5e01");
          return;
        }
        if (this.isHooking) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
          return;
        }
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.isHooking = true;
        this.clawLeft.angle = 60;
        this.clawRight.angle = -60;
        this.clawCenter.scaleY = .5;
        this.claw.y = 0;
        this.claw.angle = 0;
        var downRange = 80;
        var leaveOffset = 30;
        var grabedDoll = null;
        var isFinish1 = false;
        var isFinish2 = false;
        cc.tween(this.claw).to(1, {
          y: -downRange
        }).call(function() {
          cc.tween(_this.clawLeft).to(.5, {
            angle: 0
          }).start();
          cc.tween(_this.clawRight).to(.5, {
            angle: 0
          }).start();
          cc.tween(_this.clawCenter).to(.5, {
            scaleY: 1
          }).call(function() {
            var cw = _this.hook.convertToWorldSpaceAR(_this.claw.position);
            var hw = _this.hook.convertToWorldSpaceAR(cc.v3(0, 0));
            var offsetX = cw.x - hw.x;
            grabedDoll = _this.getGrabDoll(cc.v3(_this.hook.x + offsetX, _this.hook.y));
            var angle = grabedDoll ? 45 : 60;
            cc.tween(_this.clawLeft).to(.5, {
              angle: angle
            }).start();
            cc.tween(_this.clawRight).to(.5, {
              angle: -angle
            }).start();
          }).to(.5, {
            scaleY: .5
          }).call(function() {
            cc.tween(_this.claw).call(function() {
              cc.tween(_this.hook).to(_this.hook.position.mag() / 120, {
                position: cc.v3(_this.hook.width / 2, _this.hook.height / 2)
              }).call(function() {
                isFinish1 = true;
                if (isFinish2) {
                  _this.isHooking = false;
                  _this.isCoinInserted = false;
                }
              }).start();
            }).to(.5, {
              y: -downRange + leaveOffset
            }).call(function() {
              cc.tween(_this.clawLeft).to(.2, {
                angle: 0
              }).to(.1, {
                angle: 60
              }).start();
              cc.tween(_this.clawRight).to(.2, {
                angle: 0
              }).to(.1, {
                angle: -60
              }).start();
              cc.tween(_this.clawCenter).to(.2, {
                scaleY: 1
              }).to(.1, {
                scaleY: .5
              }).start();
              grabedDoll && grabedDoll.drop(_this.hook.position.y);
            }).to(1, {
              y: 0
            }).call(function() {
              isFinish2 = true;
              if (isFinish1) {
                _this.isHooking = false;
                _this.isCoinInserted = false;
              }
            }).start();
            cc.tween(_this.hookLine).to(2, {
              height: 0
            }).start();
          }).start();
        }).start();
        cc.tween(this.hookLine).to(1, {
          height: downRange
        }).start();
      };
      DollMachineDialog.prototype.getGrabDoll = function(hookPos) {
        cc.log(hookPos.x + "," + hookPos.y);
        for (var _i = 0, _a = this.dollList; _i < _a.length; _i++) {
          var doll = _a[_i];
          var dis = Logic_1.default.getDistance(doll.node.position, hookPos);
          if (dis < 30) {
            doll.grabed(this.claw);
            return doll;
          }
        }
        return null;
      };
      DollMachineDialog.prototype.update = function(dt) {
        var value = this.getSwingAngle(this.hookSprite.angle, this.hookSwingAngle, .2);
        this.hookSprite.angle = value.x;
        this.hookSwingAngle = value.y;
      };
      DollMachineDialog.prototype.getSwingAngle = function(current, target, reducePercent) {
        var angle = 0;
        var offset = 1;
        var modifyTarget = target;
        if (target > 0) {
          angle = current + offset;
          if (angle > target) {
            angle = target;
            modifyTarget *= reducePercent - offset;
          }
        } else if (target < 0) {
          angle = current - offset;
          if (angle < target) {
            angle = target;
            modifyTarget *= reducePercent - offset;
          }
        } else current > 0 ? angle = current - offset : current < 0 && (angle = current + offset);
        modifyTarget = modifyTarget > 0 ? Math.floor(modifyTarget) : Math.ceil(modifyTarget);
        return cc.v2(angle, modifyTarget);
      };
      DollMachineDialog.prototype.show = function() {
        _super.prototype.show.call(this);
        AudioPlayer_1.default.stopAllEffect();
        AudioPlayer_1.default.play(AudioPlayer_1.default.DOLLMACHINE, false, true);
      };
      DollMachineDialog.prototype.dismiss = function() {
        _super.prototype.dismiss.call(this);
        AudioPlayer_1.default.stopAllEffect();
      };
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "hook", void 0);
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "hookSprite", void 0);
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "claw", void 0);
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "clawLeft", void 0);
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "clawRight", void 0);
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "clawCenter", void 0);
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "hookLine", void 0);
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "topLayout", void 0);
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "layout", void 0);
      __decorate([ property(DollJoyStick_1.default) ], DollMachineDialog.prototype, "joyStick", void 0);
      __decorate([ property(DollJoyStick_1.default) ], DollMachineDialog.prototype, "joyStickSmall", void 0);
      __decorate([ property(cc.Node) ], DollMachineDialog.prototype, "coinLayout", void 0);
      __decorate([ property(cc.Label) ], DollMachineDialog.prototype, "countDown", void 0);
      __decorate([ property(cc.Label) ], DollMachineDialog.prototype, "countDownSmall", void 0);
      __decorate([ property(cc.Prefab) ], DollMachineDialog.prototype, "dollPrefab", void 0);
      DollMachineDialog = __decorate([ ccclass ], DollMachineDialog);
      return DollMachineDialog;
    }(BaseDialog_1.default);
    exports.default = DollMachineDialog;
    cc._RF.pop();
  }, {
    "../../logic/Logic": "Logic",
    "../../utils/AudioPlayer": "AudioPlayer",
    "../../utils/Utils": "Utils",
    "../Doll": "Doll",
    "../DollJoyStick": "DollJoyStick",
    "./../../logic/EventHelper": "EventHelper",
    "./BaseDialog": "BaseDialog"
  } ],
  Doll: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac317QzJatNd7oqz6bJXovF", "Doll");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./../logic/EventHelper");
    var ItemData_1 = require("../data/ItemData");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Random_1 = require("../utils/Random");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Doll = function(_super) {
      __extends(Doll, _super);
      function Doll() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.isAniming = false;
        _this.isGrabing = false;
        _this.data = new ItemData_1.default();
        return _this;
      }
      Doll_1 = Doll;
      Doll.prototype.grabed = function(claw) {
        if (this.isAniming) return;
        this.clawNode = claw;
        this.node.zIndex = 100;
        this.isAniming = true;
        this.isGrabing = true;
      };
      Doll.prototype.init = function(data) {
        if (!data) return this;
        this.data.valueCopy(data);
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName);
        return this;
      };
      Doll.prototype.drop = function(hookPosY) {
        var _this = this;
        this.isGrabing = false;
        Doll_1.RECT.contains(cc.v2(cc.v3(this.node.position.x, hookPosY))) ? cc.tween(this.node).to(.5, {
          y: hookPosY
        }).to(.5, {
          y: -100
        }).call(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.DOLLDOWN);
          _this.addItem();
        }).start() : cc.tween(this.node).to(.5, {
          y: hookPosY
        }).call(function() {
          _this.isAniming = false;
          cc.tween(_this.sprite.node).to(.3, {
            angle: Random_1.default.getRandomNum(-30, 30)
          }).start();
        }).start();
      };
      Doll.prototype.addItem = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.CASHIERING);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_CHANGEITEM, {
          itemData: this.data
        });
      };
      Doll.prototype.update = function(dt) {
        if (this.clawNode && this.isGrabing) {
          var wp = this.clawNode.convertToWorldSpaceAR(cc.v3(0, -16));
          this.node.position = this.node.parent.convertToNodeSpaceAR(wp);
        }
      };
      var Doll_1;
      Doll.RECT = cc.rect(0, 0, 100, 100);
      __decorate([ property(cc.Sprite) ], Doll.prototype, "sprite", void 0);
      Doll = Doll_1 = __decorate([ ccclass ], Doll);
      return Doll;
    }(cc.Component);
    exports.default = Doll;
    cc._RF.pop();
  }, {
    "../data/ItemData": "ItemData",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Random": "Random",
    "./../logic/EventHelper": "EventHelper"
  } ],
  Door: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f14f52tIg1Ivb0Rnl80O8tL", "Door");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../utils/IndexZ");
    var CCollider_1 = require("../collider/CCollider");
    var Random_1 = require("../utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Door = function(_super) {
      __extends(Door, _super);
      function Door() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        _this.isDoor = true;
        _this.isHidden = false;
        _this.isEmpty = false;
        _this.isLock = false;
        _this.isTransparent = false;
        _this.isDecorate = false;
        _this.dir = 0;
        _this.sprite = null;
        _this.roof = null;
        _this.leftside = null;
        _this.rightside = null;
        _this.lockInfo = null;
        return _this;
      }
      Door.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.roof = this.node.getChildByName("roof").getComponent(cc.Sprite);
        this.leftside = this.node.getChildByName("leftside").getComponent(cc.Sprite);
        this.rightside = this.node.getChildByName("rightside").getComponent(cc.Sprite);
        this.lockInfo = this.node.getChildByName("roof").getChildByName("info");
        this.arrow = this.node.getChildByName("doorarrow");
        this.arrow.opacity = 0;
        this.boxCollider = this.getComponent(CCollider_1.default);
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      Door.prototype.start = function() {
        if (this.sprite) {
          this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("door" + (this.dir > 1 ? "side" : "") + "0" + Logic_1.default.chapterIndex + "anim000");
          this.sprite.node.width = 128;
          this.sprite.node.height = this.dir > 1 ? 384 : 128;
          this.isDecorate && (this.sprite.node.opacity = 0);
        }
        this.roof || (this.roof = this.node.getChildByName("roof").getComponent(cc.Sprite));
        var roofframe = Logic_1.default.spriteFrameRes("roof" + Logic_1.default.worldLoader.getCurrentLevelData().wallRes1 + "anim000");
        var sideframe = Logic_1.default.spriteFrameRes("wall" + Logic_1.default.worldLoader.getCurrentLevelData().wallRes1 + "anim002");
        if (this.dir > 1) {
          roofframe = null;
          sideframe = null;
          this.node.zIndex -= 120;
        } else this.node.zIndex += 4;
        this.leftside.spriteFrame = sideframe;
        this.rightside.spriteFrame = sideframe;
        this.roof.spriteFrame = roofframe;
        this.roof.node.parent = this.node.parent;
        var p = this.node.convertToWorldSpaceAR(cc.v3(0, 128));
        this.roof.node.position = this.roof.node.parent.convertToNodeSpaceAR(p);
        this.roof.node.zIndex = IndexZ_1.default.OVERHEAD;
        switch (this.dir) {
         case 0:
          break;

         case 1:
          this.roof.node.angle = 180;
          this.lockInfo.angle = -180;
          break;

         case 2:
          break;

         case 3:
          this.sprite.node.scaleX = -1;
        }
        !this.lockInfo || !this.isLock || Logic_1.default.mapManager.isNeighborRoomStateClear(this.dir) || this.isDecorate || this.isTransparent || (this.lockInfo.opacity = 255);
        1 == this.dir && (this.roof.node.opacity = 128);
        var collider = this.boxCollider;
        collider.offset = cc.v2(0, 7);
        collider.setSize(cc.size(128, 114));
        if (this.dir > 1) {
          collider.offset = cc.v2(0, -64);
          collider.setSize(cc.size(64, 256));
        }
        if (this.isTransparent) {
          this.node.active = false;
          this.roof.node.active = false;
        }
      };
      Door.prototype.setOpen = function(isOpen, immediately) {
        if (!this.isDoor) return;
        isOpen ? this.openGate(immediately) : this.closeGate(immediately);
      };
      Door.prototype.openGate = function(immediately) {
        var _this = this;
        if (this.lockInfo && this.isLock && !Logic_1.default.mapManager.isNeighborRoomStateClear(this.dir) && !this.isDecorate) {
          this.lockInfo.opacity = 255;
          return;
        }
        if (this.isOpen) return;
        this.sprite || (this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite));
        this.lockInfo && (this.lockInfo.opacity = 0);
        this.isOpen = true;
        var index = 0;
        this.schedule(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("door" + (_this.dir > 1 ? "side" : "") + "0" + Logic_1.default.chapterIndex + "anim00" + index++);
          index > 4 && (_this.boxCollider.sensor = true);
        }, immediately ? 0 : .15, 4);
      };
      Door.prototype.closeGate = function(immediately) {
        var _this = this;
        if (!this.isOpen || this.isEmpty || this.isTransparent) return;
        this.isOpen = false;
        var index = 4;
        this.schedule(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("door" + (_this.dir > 1 ? "side" : "") + "0" + Logic_1.default.chapterIndex + "anim00" + index--);
          index < 0 && (_this.boxCollider.sensor = false);
        }, immediately ? 0 : .1, 4);
      };
      Door.prototype.onColliderEnter = function(other, self) {
        this.dir < 2 && (other.tag == CCollider_1.default.TAG.PLAYER || other.tag == CCollider_1.default.TAG.NONPLAYER) && (this.roof.node.opacity = this.isTransparent ? 0 : 128);
      };
      Door.prototype.onColliderStay = function(other, self) {
        this.dir < 2 && (other.tag == CCollider_1.default.TAG.PLAYER || other.tag == CCollider_1.default.TAG.NONPLAYER) && (this.roof.node.opacity = this.isTransparent ? 0 : 128);
      };
      Door.prototype.onColliderExit = function(other, self) {
        if (this.dir < 2 && (other.tag == CCollider_1.default.TAG.PLAYER || other.tag == CCollider_1.default.TAG.NONPLAYER)) {
          this.roof.node.opacity = this.isTransparent ? 0 : 255;
          (this.lockInfo && this.lockInfo.opacity < 1 || this.isDecorate) && (this.roof.node.opacity = this.isTransparent ? 0 : 180);
        }
      };
      Door.prototype.disappear = function() {
        _super.prototype.disappear.call(this);
        cc.tween(this.roof.node).to(.5 + Random_1.default.rand(), {
          scaleY: 0
        }).start();
      };
      Door = __decorate([ ccclass ], Door);
      return Door;
    }(Building_1.default);
    exports.default = Door;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../logic/Logic": "Logic",
    "../utils/IndexZ": "IndexZ",
    "../utils/Random": "Random",
    "./Building": "Building"
  } ],
  Dragon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a38f40rLRxEErH92pL9pLeC", "Dragon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var DamageData_1 = require("../data/DamageData");
    var Shooter_1 = require("../logic/Shooter");
    var Dungeon_1 = require("../logic/Dungeon");
    var StatusManager_1 = require("../manager/StatusManager");
    var NextStep_1 = require("../utils/NextStep");
    var Random_1 = require("../utils/Random");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var IndexZ_1 = require("../utils/IndexZ");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var Logic_1 = require("../logic/Logic");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Dragon = function(_super) {
      __extends(Dragon, _super);
      function Dragon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.fireSkill = new NextStep_1.default();
        _this.rainSkill = new NextStep_1.default();
        _this.isRainReady = false;
        _this.isMoveRight = false;
        _this.actionTimeDelay = 0;
        return _this;
      }
      Dragon.prototype.init = function(type) {};
      Dragon.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter01 = this.node.getChildByName("Shooter01").getComponent(Shooter_1.default);
        this.shooter01.from.valueCopy(FromData_1.default.getClone(this.actorName(), "dragonhead", this.node.position));
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.physicBox = this.getComponent(CCollider_1.default);
      };
      Dragon.prototype.start = function() {};
      Dragon.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow || this.rainSkill.IsExcuting) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Dragon.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Dragon.prototype.fireFire = function() {
        var _this = this;
        this.fireSkill.next(function() {
          _this.fireSkill.IsExcuting = true;
          _this.anim.play("DragonFire");
          _this.scheduleOnce(function() {
            _this.shooter01.setHv(cc.v2(0, -1));
            _this.shooter01.data.bulletLineInterval = .5;
            _this.fireShooter(_this.shooter01, "bullet200", 2, 5);
          }, 1.1);
          _this.scheduleOnce(function() {
            _this.fireSkill.IsExcuting = false;
            _this.anim.play("DragonIdle");
          }, 2);
        }, 5, true);
      };
      Dragon.prototype.fireRain = function() {
        var _this = this;
        if (!this.isRainReady) return;
        this.rainSkill.next(function() {
          _this.rainSkill.IsExcuting = true;
          _this.physicBox.sensor = true;
          _this.entity.Move.linearVelocity = cc.v2(0, 0);
          _this.anim.stop();
          _this.anim.play("DragonFlyHigh");
          _this.scheduleOnce(function() {
            _this.anim.play("DragonFlyLow");
            _this.physicBox.sensor = false;
          }, 13);
          _this.scheduleOnce(function() {
            _this.rainSkill.IsExcuting = false;
          }, 15);
          _this.schedule(function() {
            _this.dungeon.addFallStone(_this.dungeon.player.node.position, true, true);
            _this.dungeon.addFallStone(Dungeon_1.default.getPosInMap(cc.v3(Random_1.default.getRandomNum(0, Dungeon_1.default.WIDTH_SIZE - 1), Random_1.default.getRandomNum(0, Dungeon_1.default.HEIGHT_SIZE - 1))), true, true);
            _this.dungeon.addFallStone(Dungeon_1.default.getPosInMap(cc.v3(Random_1.default.getRandomNum(0, Dungeon_1.default.WIDTH_SIZE - 1), Random_1.default.getRandomNum(0, Dungeon_1.default.HEIGHT_SIZE - 1))), true, true);
            _this.dungeon.addFallStone(Dungeon_1.default.getPosInMap(cc.v3(Random_1.default.getRandomNum(0, Dungeon_1.default.WIDTH_SIZE - 1), Random_1.default.getRandomNum(0, Dungeon_1.default.HEIGHT_SIZE - 1))), true, true);
          }, .5, 20, 2);
        }, 30);
      };
      Dragon.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.changeZIndex();
        this.fireRain();
        this.rainSkill.IsExcuting || this.fireFire();
        if (!this.rainSkill.IsExcuting) {
          this.isMoveRight && this.pos.x - this.defaultPos.x > 2 ? this.isMoveRight = false : !this.isMoveRight && this.defaultPos.x - this.pos.x > 2 && (this.isMoveRight = true);
          var pos = cc.v3(this.isMoveRight ? 1 : -1, 0);
          if (!pos.equals(cc.Vec3.ZERO)) {
            pos = pos.normalizeSelf();
            this.move(pos, 16);
          }
        }
      };
      Dragon.prototype.changeZIndex = function() {
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
      };
      Dragon.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position));
        var h = pos.x;
        var v = pos.y;
        var movement = cc.v2(h, v);
        movement = movement.normalize().mul(speed);
        this.entity.Move.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.changeZIndex();
      };
      Dragon.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.actor = this;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.setHv(cc.v2(0, -1));
        shooter.fireBullet(angle, cc.Vec3.ZERO);
      };
      Dragon.prototype.showBoss = function() {
        var _this = this;
        this.sc.isShow = true;
        this.entity.NodeRender.node = this.node;
        this.entity.Move.damping = 6;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
        this.scheduleOnce(function() {
          _this.isRainReady = true;
        }, 10);
      };
      Dragon.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Dragon.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
      };
      Dragon.prototype.onColliderEnter = function(other, self) {
        if (self.tag == CCollider_1.default.TAG.BOSS_HIT) {
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
          if (target && !this.sc.isDied && !this.physicBox.sensor) {
            var d = new DamageData_1.default();
            d.physicalDamage = 15;
            target.takeDamage(d, FromData_1.default.getClone(this.actorName(), "dragonhead", this.node.position), this);
          }
        }
      };
      Dragon.prototype.actorName = function() {
        return "\u672b\u65e5\u9ed1\u9f99";
      };
      Dragon = __decorate([ ccclass ], Dragon);
      return Dragon;
    }(Boss_1.default);
    exports.default = Dragon;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/NextStep": "NextStep",
    "../utils/Random": "Random",
    "./Boss": "Boss"
  } ],
  DryadGrass: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7d90DMrjlILYsaGuEm//pn", "DryadGrass");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var StatusManager_1 = require("../manager/StatusManager");
    var FromData_1 = require("../data/FromData");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var Building_1 = require("../building/Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DryadGrass = function(_super) {
      __extends(DryadGrass, _super);
      function DryadGrass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isUp = false;
        _this.isAuto = true;
        _this.isUping = false;
        return _this;
      }
      DryadGrass.prototype.onLoad = function() {
        this.initCollider();
        this.isUp = false;
      };
      DryadGrass.prototype.takeDamage = function() {
        return false;
      };
      DryadGrass.prototype.fall = function() {
        this.anim = this.getComponent(cc.Animation);
        this.anim.play();
        this.isUping = true;
      };
      DryadGrass.prototype.TwineUp = function() {
        var _this = this;
        this.isUp = true;
        this.scheduleOnce(function() {
          _this.isUp = false;
        }, .1);
        this.scheduleOnce(function() {
          _this.node && _this.destroyEntityNode();
        }, 6);
      };
      DryadGrass.prototype.start = function() {};
      DryadGrass.prototype.onColliderEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        !target || this.isAuto || this.isUping || this.fall();
      };
      DryadGrass.prototype.onColliderStay = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isUp && this.isValid) {
          this.isUp = false;
          var from = FromData_1.default.getClone(this.actorName(), "dryadtwine03", this.node.position);
          target.takeDamage(new DamageData_1.default(2), from) && target.addStatus(StatusManager_1.default.TWINE, from);
        }
      };
      DryadGrass.prototype.actorName = function() {
        return "\u6811\u6839\u7f20\u7ed5";
      };
      DryadGrass = __decorate([ ccclass ], DryadGrass);
      return DryadGrass;
    }(Building_1.default);
    exports.default = DryadGrass;
    cc._RF.pop();
  }, {
    "../building/Building": "Building",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils"
  } ],
  Dryad: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1a62Oo+gRDI5+v2dxAMRw+", "Dryad");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var Shooter_1 = require("../logic/Shooter");
    var Logic_1 = require("../logic/Logic");
    var StatusManager_1 = require("../manager/StatusManager");
    var NextStep_1 = require("../utils/NextStep");
    var BossAttackCollider_1 = require("./BossAttackCollider");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Dryad = function(_super) {
      __extends(Dryad, _super);
      function Dryad() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hand01 = null;
        _this.hand02 = null;
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.flower01 = null;
        _this.flower02 = null;
        _this.twoFlowerSkill = new NextStep_1.default();
        _this.twineGrassSkill = new NextStep_1.default();
        _this.meleeSkill = new NextStep_1.default();
        _this.stoneSkill = new NextStep_1.default();
        _this.actionTimeDelay = 0;
        return _this;
      }
      Dryad.prototype.init = function(type) {
        throw new Error("Method not implemented.");
      };
      Dryad.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter01 = this.node.getChildByName("Shooter01").getComponent(Shooter_1.default);
        this.shooter02 = this.node.getChildByName("Shooter02").getComponent(Shooter_1.default);
        this.shooter03 = this.node.getChildByName("Shooter03").getComponent(Shooter_1.default);
        var from = FromData_1.default.getClone(this.actorName(), "dryadflower04", this.node.position);
        this.shooter01.from.valueCopy(from);
        this.shooter02.from.valueCopy(from);
        this.shooter03.from.valueCopy(from);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.hand01.from.valueCopy(from);
        this.hand02.from.valueCopy(from);
      };
      Dryad.prototype.start = function() {};
      Dryad.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        this.playHit(this.node.getChildByName("sprite"));
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Dryad.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Dryad.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.changeZIndex();
        this.twoFlowerSkill.IsExcuting || this.stoneSkill.IsExcuting || this.attack();
        this.meleeSkill.IsExcuting || this.stoneSkill.IsExcuting || this.twoFlowers();
        this.meleeSkill.IsExcuting || this.twoFlowerSkill.IsExcuting || this.fireStone();
        this.twineGrass();
      };
      Dryad.prototype.attack = function() {
        var _this = this;
        this.meleeSkill.next(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          _this.meleeSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          var attackName = "DryadAttack01";
          if (Logic_1.default.getHalfChance()) {
            _this.anim.play("DryadAttack01");
            _this.hand01.showCollider(2, 1);
          } else {
            _this.anim.play("DryadAttack02");
            _this.hand02.showCollider(2, 1);
          }
          _this.scheduleOnce(function() {
            _this.anim.play("DryadIdle");
            _this.meleeSkill.IsExcuting = false;
          }, 1);
        }, 2, true);
      };
      Dryad.prototype.twineGrass = function() {
        var _this = this;
        this.twineGrassSkill.next(function() {
          _this.schedule(function() {
            _this.dungeon.buildingManager.addTwineGrass(_this.dungeon.player.pos.clone(), true);
          }, 1, 2);
        }, 8, true);
      };
      Dryad.prototype.twoFlowers = function() {
        var _this = this;
        this.twoFlowerSkill.next(function() {
          _this.twoFlowerSkill.IsExcuting = true;
          _this.shooter02.setHv(cc.v2(0, -1));
          _this.shooter03.setHv(cc.v2(0, -1));
          _this.anim.play("DryadOpen");
          _this.flower01.getComponent(cc.Animation).play();
          _this.flower02.getComponent(cc.Animation).play();
          _this.scheduleOnce(function() {
            _this.shooter02.data.bulletLineInterval = .5;
            _this.shooter03.data.bulletLineInterval = .5;
            _this.fireShooter(_this.shooter02, "bullet021", 99, 2);
            _this.fireShooter(_this.shooter03, "bullet021", 99, 2);
          }, 2);
          _this.scheduleOnce(function() {
            _this.anim.play("DryadIdle");
            _this.twoFlowerSkill.IsExcuting = false;
          }, 4);
        }, 6, true);
      };
      Dryad.prototype.fireStone = function() {
        var _this = this;
        this.stoneSkill.next(function() {
          _this.stoneSkill.IsExcuting = true;
          _this.anim.play("DryadStone");
          _this.scheduleOnce(function() {
            var pos = _this.entity.Transform.position.clone().add(_this.shooter01.node.position);
            var hv = _this.dungeon.player.getCenterPosition().sub(pos);
            if (!hv.equals(cc.Vec3.ZERO)) {
              _this.shooter01.setHv(cc.v2(hv).normalize());
              _this.fireShooter(_this.shooter01, "bullet022", 0, 0);
            }
          }, .55);
          _this.scheduleOnce(function() {
            _this.stoneSkill.IsExcuting = false;
            _this.anim.play("DryadIdle");
          }, 1);
        }, 4, true);
      };
      Dryad.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.actor = this;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle, cc.Vec3.ZERO);
      };
      Dryad.prototype.showBoss = function() {
        this.sc.isShow = true;
        this.entity.NodeRender.node = this.node;
        this.entity.Move.damping = 6;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      Dryad.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Dryad.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.entity.Move.linearVelocity = cc.Vec2.ZERO;
      };
      Dryad.prototype.actorName = function() {
        return "\u8fdc\u53e4\u4e4b\u6811";
      };
      Dryad.prototype.onColliderEnter = function(other, self) {
        self.tag == CCollider_1.default.TAG.BOSS_HIT && (self.id == this.hand01.collider.id ? this.hand01.onColliderEnter(other, self) : this.hand02.onColliderEnter(other, self));
      };
      __decorate([ property(BossAttackCollider_1.default) ], Dryad.prototype, "hand01", void 0);
      __decorate([ property(BossAttackCollider_1.default) ], Dryad.prototype, "hand02", void 0);
      __decorate([ property(cc.Node) ], Dryad.prototype, "flower01", void 0);
      __decorate([ property(cc.Node) ], Dryad.prototype, "flower02", void 0);
      Dryad = __decorate([ ccclass ], Dryad);
      return Dryad;
    }(Boss_1.default);
    exports.default = Dryad;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/FromData": "FromData",
    "../logic/Achievement": "Achievement",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../manager/StatusManager": "StatusManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/NextStep": "NextStep",
    "./Boss": "Boss",
    "./BossAttackCollider": "BossAttackCollider"
  } ],
  DungeonStyleData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6e0bc4Ume5FZZHLhQzz4NXv", "DungeonStyleData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DungeonStyleData = function() {
      function DungeonStyleData(background, topwall, sidewall, door, doorframe, bg02color, floor) {
        this.background = background;
        this.topwall = topwall;
        this.doorframe = doorframe;
        this.sidewall = sidewall;
        this.door = door;
        this.bg02color = bg02color;
        this.floor = floor;
      }
      return DungeonStyleData;
    }();
    exports.default = DungeonStyleData;
    cc._RF.pop();
  }, {} ],
  DungeonStyleManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96118QtbixO743MdRQKBctE", "DungeonStyleManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var Dungeon_1 = require("../logic/Dungeon");
    var DungeonStyleData_1 = require("../data/DungeonStyleData");
    var ParallaxBackground_1 = require("../ui/ParallaxBackground");
    var IndexZ_1 = require("../utils/IndexZ");
    var BaseManager_1 = require("./BaseManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DungeonStyleManager = function(_super) {
      __extends(DungeonStyleManager, _super);
      function DungeonStyleManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.background01 = null;
        _this.floor = null;
        _this.parallaxBackground = null;
        _this.darksides = "darksides";
        return _this;
      }
      DungeonStyleManager.prototype.clear = function() {};
      DungeonStyleManager.prototype.runBackgroundAnim = function(resName) {
        if (!this.background01) return;
        var spf1 = Logic_1.default.spriteFrameRes(resName);
        var spf2 = Logic_1.default.spriteFrameRes(resName + "1");
        spf2 || (spf2 = Logic_1.default.spriteFrameRes(resName));
        if (!spf1) return;
        this.background01.stopAllActions();
        var sprite = this.background01.getComponent(cc.Sprite);
        cc.tween(this.background01).repeatForever(cc.tween().delay(.4).call(function() {
          sprite.spriteFrame = spf1;
        }).delay(.4).call(function() {
          sprite.spriteFrame = spf2;
        })).start();
      };
      DungeonStyleManager.prototype.addDecorations = function() {
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          this.styleData = new DungeonStyleData_1.default("pipeline", "restwall1", "restsides", "restdoor", "restdoorframe", "#000000", "tile_lab001");
          break;

         case Logic_1.default.CHAPTER01:
          this.styleData = new DungeonStyleData_1.default("sea", "shipwall1", "shipsides", "shipdoor", "shipdoorframe", "#000000", "tile_deck001");
          break;

         case Logic_1.default.CHAPTER02:
          this.styleData = new DungeonStyleData_1.default("grass", "junglewall1", "junglesides", "jungledoor", "jungledoorframe", "#000000", "tile_dirt001");
          break;

         case Logic_1.default.CHAPTER03:
          this.styleData = new DungeonStyleData_1.default("sandsea", "pyramidwall1", "pyramidsides", "pyramiddoor", "pyramiddoorframe", "#000000", "tile003");
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          this.styleData = new DungeonStyleData_1.default("magmasea", "dungeonwall1", "dungeonsides", "dungeondoor", "dungeondoorframe", "#000000", "tile004");
          break;

         case Logic_1.default.CHAPTER099:
          this.styleData = new DungeonStyleData_1.default("pipeline", "restwall1", "restsides", "restdoor", "restdoorframe", "#000000", "tile_lab001");
        }
        if (!this.styleData) return;
        this.background01.getComponent(cc.Sprite).spriteFrame = null;
      };
      DungeonStyleManager.prototype.addDecorateBg = function() {
        var bg = cc.instantiate(this.parallaxBackground);
        bg.parent = this.node;
        var pos = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE / 2, Dungeon_1.default.HEIGHT_SIZE / 2));
        bg.setPosition(pos);
        bg.zIndex = IndexZ_1.default.BACKGROUND;
        var pbg = bg.getComponent(ParallaxBackground_1.default);
        pbg.background.width = Dungeon_1.default.TILE_SIZE / 2 * Dungeon_1.default.WIDTH_SIZE;
        pbg.background.height = Dungeon_1.default.TILE_SIZE / 2 * (Dungeon_1.default.HEIGHT_SIZE + 4);
        pbg.background.color = cc.Color.WHITE.fromHEX(this.styleData.bg02color);
        pbg.init();
      };
      DungeonStyleManager.prototype.addFloor = function() {
        var leveldata = Logic_1.default.worldLoader.getCurrentLevelData();
        var room = Logic_1.default.mapManager.getCurrentRoom();
        var offset = 4;
        var pos = Dungeon_1.default.getPosInMap(cc.v3(-offset, -offset));
        if (0 == room.x) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(0, -offset));
          0 == room.y ? pos = Dungeon_1.default.getPosInMap(cc.v3(0, 0)) : room.y == leveldata.height - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(0, 2 * -offset)));
        } else if (room.x == leveldata.width - 1) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, -offset));
          0 == room.y ? pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 2 * -offset)) : room.y == leveldata.height - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 0)));
        }
        if (0 == room.x) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(0, -offset));
          0 == room.y ? pos = Dungeon_1.default.getPosInMap(cc.v3(0, 0)) : room.y == leveldata.height - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(0, 2 * -offset)));
        } else if (room.x == leveldata.width - 1) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, -offset));
          0 == room.y ? pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 2 * -offset)) : room.y == leveldata.height - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 0)));
        }
        if (0 == room.y) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(-offset, 0));
          0 == room.x ? pos = Dungeon_1.default.getPosInMap(cc.v3(0, 0)) : room.x == leveldata.width - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 2 * -offset)));
        } else if (room.y == leveldata.height - 1) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(-offset, 2 * -offset));
          0 == room.x ? pos = Dungeon_1.default.getPosInMap(cc.v3(0, 2 * -offset)) : room.x == leveldata.width - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 0)));
        }
        this.floor.width = Dungeon_1.default.TILE_SIZE / 4 * (Dungeon_1.default.WIDTH_SIZE + 3 * offset);
        this.floor.height = Dungeon_1.default.TILE_SIZE / 4 * (Dungeon_1.default.HEIGHT_SIZE + 3 * offset);
        this.floor.position = cc.v3(pos.x - Dungeon_1.default.TILE_SIZE / 2, pos.y - Dungeon_1.default.TILE_SIZE / 2);
        this.floor.zIndex = IndexZ_1.default.BACKGROUNDFLOOR;
        var sprite = this.floor.getComponent(cc.Sprite);
        sprite.spriteFrame = Logic_1.default.spriteFrameRes(leveldata.floorRes + "001");
      };
      __decorate([ property(cc.Node) ], DungeonStyleManager.prototype, "background01", void 0);
      __decorate([ property(cc.Node) ], DungeonStyleManager.prototype, "floor", void 0);
      __decorate([ property(cc.Prefab) ], DungeonStyleManager.prototype, "parallaxBackground", void 0);
      DungeonStyleManager = __decorate([ ccclass ], DungeonStyleManager);
      return DungeonStyleManager;
    }(BaseManager_1.default);
    exports.default = DungeonStyleManager;
    cc._RF.pop();
  }, {
    "../data/DungeonStyleData": "DungeonStyleData",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../ui/ParallaxBackground": "ParallaxBackground",
    "../utils/IndexZ": "IndexZ",
    "./BaseManager": "BaseManager"
  } ],
  Dungeon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6dd52klzMJJgafrk2kw2YVi", "Dungeon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Player_1 = require("./Player");
    var Tile_1 = require("./Tile");
    var Logic_1 = require("./Logic");
    var EventHelper_1 = require("./EventHelper");
    var MonsterManager_1 = require("../manager/MonsterManager");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var DungeonStyleManager_1 = require("../manager/DungeonStyleManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var RoomType_1 = require("../rect/RoomType");
    var IndexZ_1 = require("../utils/IndexZ");
    var BuildingManager_1 = require("../manager/BuildingManager");
    var NonPlayerManager_1 = require("../manager/NonPlayerManager");
    var ItemManager_1 = require("../manager/ItemManager");
    var Utils_1 = require("../utils/Utils");
    var LightManager_1 = require("../manager/LightManager");
    var DamageData_1 = require("../data/DamageData");
    var GameWorldSystem_1 = require("../ecs/system/GameWorldSystem");
    var Random_1 = require("../utils/Random");
    var LoadingManager_1 = require("../manager/LoadingManager");
    var StatusIconList_1 = require("../ui/StatusIconList");
    var Dialogue_1 = require("../ui/Dialogue");
    var Controller_1 = require("./Controller");
    var WeatherManager_1 = require("../manager/WeatherManager");
    var EffectItemManager_1 = require("../manager/EffectItemManager");
    var CameraControl_1 = require("./CameraControl");
    var PlayerController_1 = require("./PlayerController");
    var FromData_1 = require("../data/FromData");
    var AiPlayerManager_1 = require("../manager/AiPlayerManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Dungeon = function(_super) {
      __extends(Dungeon, _super);
      function Dungeon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.tile = null;
        _this.playerPrefab = null;
        _this.fog = null;
        _this.statusIconList = null;
        _this.cameraControl = null;
        _this.mapData = [];
        _this.tilesmap = new Array();
        _this.floorCombineMap = new Map();
        _this.floorIndexMap = new Array();
        _this.waterIndexMap = new Array();
        _this.timeDelay = 0;
        _this.checkTimeDelay = 0;
        _this.monsterManager = null;
        _this.nonPlayerManager = null;
        _this.aiPlayerManager = null;
        _this.equipmentManager = null;
        _this.dungeonStyleManager = null;
        _this.itemManager = null;
        _this.buildingManager = null;
        _this.lightManager = null;
        _this.weatherManager = null;
        _this.effectItemManager = null;
        _this.isInitFinish = false;
        _this.isClear = false;
        _this.isComplete = false;
        _this.currentPos = cc.v3(0, 0);
        _this.isDisappeared = false;
        _this.rootSystem = null;
        return _this;
      }
      Dungeon_1 = Dungeon;
      Dungeon.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_SETEQUIPMENT, function(detail) {
          _this.node && _this.addEquipment(detail.res, detail.pos, detail.equipmentData);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, function(detail) {
          _this.addCoin(detail.pos, detail.count, detail.isReal);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, function(detail) {
          _this.addOilGold(detail.pos, detail.count);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, function(detail) {
          _this.node && _this.addItem(detail.pos, detail.res, detail.count);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_FALLSTONE, function(detail) {
          _this.node && _this.addFallStone(detail.pos, detail.isAuto);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_FLOORPAPER, function(detail) {
          _this.node && _this.addFloorPaper(detail.fromPos, detail.targetPos, detail.count);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_LIGHTENINGFALL, function(detail) {
          _this.node && _this.addLighteningFall(detail.pos, false, false, detail.showArea, detail.damage);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_SHAKEONCE, function(detail) {
          _this.anim && _this.anim.play("DungeonShakeOnce");
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.BOSS_ADDSLIME, function(detail) {
          _this.addBossSlime(detail.slimeType, detail.posIndex);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.TEST_SHOW_NODE_COUNT, function(detail) {
          _this.logNodeCount();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_DISAPPEAR, function(detail) {
          if (_this.node) {
            _this.isDisappeared = true;
            for (var _i = 0, _a = _this.buildingManager.buildingList; _i < _a.length; _i++) {
              var b = _a[_i];
              b && b.node && b.disappear();
            }
            for (var _b = 0, _c = _this.tilesmap; _b < _c.length; _b++) {
              var t = _c[_b];
              for (var _d = 0, t_1 = t; _d < t_1.length; _d++) {
                var tile = t_1[_d];
                tile && tile.node && tile.disappear();
              }
            }
            cc.tween(_this.dungeonStyleManager.floor).to(.5 + Random_1.default.rand(), {
              opacity: 0
            }).start();
          }
        });
        this.monsterManager = this.getComponent(MonsterManager_1.default);
        this.nonPlayerManager = this.getComponent(NonPlayerManager_1.default);
        this.aiPlayerManager = this.getComponent(AiPlayerManager_1.default);
        this.equipmentManager = this.getComponent(EquipmentManager_1.default);
        this.itemManager = this.getComponent(ItemManager_1.default);
        this.dungeonStyleManager = this.getComponent(DungeonStyleManager_1.default);
        this.buildingManager = this.getComponent(BuildingManager_1.default);
        this.lightManager = this.getComponent(LightManager_1.default);
        this.weatherManager = this.getComponent(WeatherManager_1.default);
        this.effectItemManager = this.getComponent(EffectItemManager_1.default);
        this.reset();
      };
      Dungeon.prototype.reset = function() {
        var _this = this;
        Logic_1.default.lastBgmIndex = Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099 ? 1 : 0;
        AudioPlayer_1.default.stopAllEffect();
        AudioPlayer_1.default.play(AudioPlayer_1.default.PLAY_BG, true);
        this.monsterManager.clear();
        this.nonPlayerManager.clear();
        this.aiPlayerManager.clear();
        this.equipmentManager.clear();
        this.itemManager.clear();
        this.dungeonStyleManager.clear();
        this.buildingManager.clear();
        this.lightManager.clear();
        this.weatherManager.clear();
        this.fog.zIndex = IndexZ_1.default.FOG;
        this.fog.scale = 2.5;
        this.fog.opacity = 255;
        this.lightManager.shadow.node.zIndex = IndexZ_1.default.SHADOW;
        this.lightManager.shadow1.node.zIndex = IndexZ_1.default.SHADOW;
        this.lightManager.shadowRay.node.zIndex = IndexZ_1.default.SHADOW + 10;
        this.currentPos = cc.v3(Logic_1.default.mapManager.getCurrentRoom().x, Logic_1.default.mapManager.getCurrentRoom().y);
        var mapData = Logic_1.default.mapManager.getCurrentMapStringArray();
        var floorData = Logic_1.default.mapManager.getCurrentFloorMapStringArray();
        this.mapData = mapData;
        var leveldata = Logic_1.default.worldLoader.getCurrentLevelData();
        var exits = leveldata.getExitList();
        var equipitems = leveldata.getEquipItemList();
        Logic_1.default.changeDungeonSize();
        this.node.position = cc.v3(Dungeon_1.WIDTH_SIZE * Dungeon_1.TILE_SIZE * this.currentPos.x, Dungeon_1.HEIGHT_SIZE * Dungeon_1.TILE_SIZE * this.currentPos.y);
        this.dungeonStyleManager.addDecorations();
        for (var _i = 0, _a = this.tilesmap; _i < _a.length; _i++) {
          var arr = _a[_i];
          Utils_1.default.clearComponentArray(arr);
        }
        var colliderdebug = this.node.getChildByName("colliderdebug");
        colliderdebug.zIndex = IndexZ_1.default.UI;
        var p0 = this.node.convertToWorldSpaceAR(cc.v3(-5 * Dungeon_1.TILE_SIZE, -5 * Dungeon_1.TILE_SIZE));
        var p1 = this.node.convertToWorldSpaceAR(cc.v3((Dungeon_1.WIDTH_SIZE + 10) * Dungeon_1.TILE_SIZE, (Dungeon_1.WIDTH_SIZE + 10) * Dungeon_1.TILE_SIZE));
        var rect = cc.rect(p0.x, p0.y, p1.x - p0.x, p1.y - p0.y);
        this.rootSystem = new GameWorldSystem_1.default(rect, colliderdebug.getComponent(cc.Graphics));
        this.rootSystem.init();
        this.tilesmap = new Array();
        this.floorIndexMap = new Array();
        this.waterIndexMap = new Array();
        this.addItemListOnGround();
        this.addEquipmentListOnGround();
        Logic_1.default.getBuildings(BuildingManager_1.default.AIREXIT, function(prefab) {
          Logic_1.default.getBuildings(BuildingManager_1.default.WALL, function(prefab) {
            Logic_1.default.getBuildings(BuildingManager_1.default.DOOR, function(prefab) {
              (leveldata.isOutside && !Logic_1.default.mapManager.getCurrentRoom().isOutside || !leveldata.isOutside && Logic_1.default.mapManager.getCurrentRoom().isOutside) && _this.weatherManager.addRain(cc.v3(Math.floor(Dungeon_1.WIDTH_SIZE / 2), Math.floor(Dungeon_1.WIDTH_SIZE / 2)), 0);
              _this.buildingManager.addAirExit(mapData);
              for (var i = 0; i < Dungeon_1.WIDTH_SIZE; i++) {
                _this.tilesmap[i] = new Array(i);
                for (var j = 0; j < Dungeon_1.HEIGHT_SIZE; j++) {
                  _this.addTiles(floorData, cc.v3(i, j), cc.v3(i, j), leveldata, false);
                  _this.buildingManager.addBuildingsFromMap(_this, mapData, mapData[i][j], cc.v3(i, j), leveldata, exits, equipitems);
                  Logic_1.default.mapManager.isCurrentRoomStateClear() && !Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.TEST_ROOM) || _this.itemManager.addItemFromMap(mapData[i][j], cc.v3(i, j));
                  (!Logic_1.default.mapManager.isCurrentRoomStateClear() || Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.TEST_ROOM) || Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.START_ROOM)) && _this.monsterManager.addMonstersAndBossFromMap(_this, mapData[i][j], cc.v3(i, j));
                  _this.nonPlayerManager.addNonPlayerFromMap(_this, mapData[i][j], cc.v3(i, j), 0);
                }
              }
              var offsets = [ cc.v3(-1, -1, 4), cc.v3(-1, 0, 2), cc.v3(-1, 1, 6), cc.v3(0, -1, 0), cc.v3(0, 1, 1), cc.v3(1, -1, 5), cc.v3(1, 0, 3), cc.v3(1, 1, 7) ];
              for (var _i = 0, offsets_1 = offsets; _i < offsets_1.length; _i++) {
                var offset = offsets_1[_i];
                _this.addBuildingsFromSideMap(offset);
              }
              _this.initPlayer();
              _this.initCameraAndFog(_this.player);
              var nonList = new Array().concat(Logic_1.default.nonPlayerList);
              _this.nonPlayerManager.addNonPlayerListFromSave(_this, nonList, _this.player.node.position, _this.player.entity.Transform.z);
              _this.aiPlayerManager.addAiPlayerListFromSave(_this, Logic_1.default.aiPlayerIdList);
              Logic_1.default.mapManager.isCurrentRoomStateClear() && !Logic_1.default.mapManager.getCurrentRoom().isReborn || !RoomType_1.default.isMonsterGenerateRoom(Logic_1.default.mapManager.getCurrentRoomType()) || Logic_1.default.isTour || _this.monsterManager.addRandomMonsters(_this, Logic_1.default.mapManager.getCurrentRoom().reborn);
              cc.log("load finished");
              _this.scheduleOnce(function() {
                _this.isInitFinish = true;
                _this.fogScaleNormal();
                var blackcenter = _this.fog.getChildByName("sprite").getChildByName("blackcenter");
                cc.tween(blackcenter).delay(.1).to(.5, {
                  opacity: 0
                }).call(function() {
                  Logic_1.default.totalTime < 5 && Logic_1.default.CHAPTER00 == Logic_1.default.chapterIndex && Dialogue_1.default.play(Controller_1.default.isMouseMode() ? Dialogue_1.default.COURSE_FIRST_PC : Dialogue_1.default.COURSE_FIRST_MOBILE);
                }).start();
                _this.logNodeCount();
                _this.addOilGoldOnGround();
              }, .3);
            });
          });
        });
      };
      Dungeon.prototype.initPlayer = function() {
        this.player = cc.instantiate(this.playerPrefab).getComponent(Player_1.default);
        var controller = this.player.addComponent(PlayerController_1.default);
        controller.player = this.player;
        this.player.statusIconList = this.statusIconList;
        this.player.node.parent = this.node;
        this.player.controller = controller;
        this.player.dungeon = this;
        this.player.dataId = Logic_1.default.playerData.id;
      };
      Dungeon.prototype.initCameraAndFog = function(target) {
        this.changeCameraTarget(target);
        this.fog.setPosition(this.cameraControl.Target.node.position.clone());
        this.scheduleOnce(function() {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_LOOK, {
            pos: target.getCenterPosition(),
            isDirect: true
          });
        });
      };
      Dungeon.prototype.changeCameraTarget = function(actor, offset) {
        var _a;
        null === (_a = this.cameraControl) || void 0 === _a ? void 0 : _a.changeCameraTarget(actor, offset);
      };
      Dungeon.prototype.fogScaleNormal = function() {
        cc.tween(this.fog).to(3, {
          scale: 2.5
        }).start();
      };
      Dungeon.prototype.fogScaleDark = function() {
        cc.tween(this.fog).to(2, {
          scale: 1.75
        }).to(6, {
          angle: 0
        }).to(2, {
          scale: .6
        }).start();
      };
      Dungeon.prototype.addTiles = function(floorData, floorPos, indexPos, leveldata, onlyShow) {
        var mapDataStr = floorData[floorPos.x][floorPos.y];
        var isWater = Utils_1.default.hasThe(mapDataStr, "~");
        if (Utils_1.default.hasThe(mapDataStr, "*") || Utils_1.default.hasThe(mapDataStr, "~")) {
          var index = parseInt(mapDataStr.substring(3));
          var resIndex = parseInt(mapDataStr.substring(1, 3));
          var isCombine = this.floorCombineMap.has("i" + floorPos.x + "j" + floorPos.y);
          if (isCombine) onlyShow || (this.tilesmap[indexPos.x][indexPos.y] = this.floorCombineMap.get("i" + floorPos.x + "j" + floorPos.y)); else {
            var t = cc.instantiate(this.tile);
            t.parent = this.node;
            var pos = Dungeon_1.getPosInMap(indexPos.clone());
            t.position = cc.v3(pos.x - Dungeon_1.TILE_SIZE / 2, pos.y - Dungeon_1.TILE_SIZE / 2);
            t.zIndex = (resIndex > 0 ? IndexZ_1.default.FLOOR : IndexZ_1.default.BASE) + 10 * (Dungeon_1.HEIGHT_SIZE - indexPos.y);
            var tile = t.getComponent(Tile_1.default);
            tile.isAutoShow = false;
            tile.tileType = mapDataStr;
            tile.isWater = isWater;
            tile.resName = leveldata.getFloorRes(resIndex);
            onlyShow || (this.tilesmap[indexPos.x][indexPos.y] = tile);
            var combineCountX = 0;
            var combineCountY = 0;
            for (var i = floorPos.x + 1; i < floorData.length; i++) {
              var next = floorData[i][floorPos.y];
              if (mapDataStr != next) break;
              this.floorCombineMap.set("i" + i + "j" + floorPos.y, tile);
              combineCountX++;
            }
            for (var j = floorPos.y + 1; j < floorData[floorPos.x].length; j++) {
              var next = floorData[floorPos.x][j];
              if (mapDataStr != next) break;
              for (var i = 0; i < combineCountX + 2; i++) floorPos.x + i < floorData.length && mapDataStr == floorData[floorPos.x + i][j] && this.floorCombineMap.set("i" + (floorPos.x + i) + "j" + j, tile);
              combineCountY++;
            }
            tile.w = combineCountX + 1;
            tile.h = combineCountY + 1;
          }
          onlyShow || (isWater ? this.waterIndexMap.push(indexPos.clone()) : this.floorIndexMap.push(indexPos.clone()));
        }
      };
      Dungeon.prototype.logNodeCount = function() {
        if (!this.node) return;
        var names = {};
        var log = "childrenCount:" + this.node.childrenCount + " children:\n";
        for (var _i = 0, _a = this.node.children; _i < _a.length; _i++) {
          var child = _a[_i];
          names[child.name] ? names[child.name]++ : names[child.name] = 1;
        }
        for (var key in names) log += key + "(" + names[key] + ")\n";
        console.log(log);
      };
      Dungeon.prototype.addBuildingsFromSideMap = function(offset) {
        var mapData = Logic_1.default.mapManager.getCurrentSideMapStringArray(offset);
        var floorData = Logic_1.default.mapManager.getCurrentSideFloorMapStringArray(offset);
        var leveldata = Logic_1.default.worldLoader.getCurrentLevelData();
        if (!mapData[0] || !floorData[0]) return;
        this.floorCombineMap.clear();
        for (var i = 0; i < Dungeon_1.WIDTH_SIZE; i++) for (var j = 0; j < Dungeon_1.HEIGHT_SIZE; j++) {
          var needAdd = false;
          var length = 4;
          switch (offset.z) {
           case 0:
            needAdd = j > Dungeon_1.HEIGHT_SIZE - length;
            break;

           case 1:
            needAdd = j < length;
            break;

           case 2:
            needAdd = i > Dungeon_1.WIDTH_SIZE - length;
            break;

           case 3:
            needAdd = i < length;
            break;

           case 4:
            needAdd = i > Dungeon_1.WIDTH_SIZE - length && j > Dungeon_1.HEIGHT_SIZE - length;
            break;

           case 5:
            needAdd = i < length && j > Dungeon_1.HEIGHT_SIZE - length;
            break;

           case 6:
            needAdd = i > Dungeon_1.WIDTH_SIZE - length && j < length;
            break;

           case 7:
            needAdd = i < length && j < length;
          }
          if (needAdd) {
            var indexPos = cc.v3(i + Dungeon_1.WIDTH_SIZE * offset.x, j + Dungeon_1.HEIGHT_SIZE * offset.y);
            this.addTiles(floorData, cc.v3(i, j), indexPos.clone(), leveldata, true);
            this.buildingManager.addBuildingsFromSideMap(mapData[i][j], mapData, indexPos.clone(), leveldata);
          }
        }
      };
      Dungeon.prototype.darkAfterKill = function() {
        cc.tween(this.fog).to(1, {
          scale: .6
        }).start();
        var blackcenter = this.fog.getChildByName("sprite").getChildByName("blackcenter");
        cc.tween(blackcenter).delay(.2).to(1, {
          opacity: 255
        }).start();
      };
      Dungeon.isFirstEqual = function(mapStr, typeStr) {
        if (!mapStr) return false;
        var isequal = mapStr[0] == typeStr;
        return isequal;
      };
      Dungeon.prototype.addItem = function(pos, resName, count, shopTable) {
        if (this.itemManager) {
          pos || (pos = this.player.node.position.clone());
          this.itemManager.addItem(pos, resName, count, shopTable);
        }
      };
      Dungeon.prototype.addFallStone = function(pos, isAuto, withFire) {
        this.buildingManager.addFallStone(Dungeon_1.getIndexInMap(pos), isAuto, withFire);
      };
      Dungeon.prototype.addLighteningFall = function(pos, isTrigger, needPrepare, showArea, damagePoint) {
        if (!this.buildingManager) return;
        this.buildingManager.addLighteningFall(pos, isTrigger, needPrepare, showArea, damagePoint);
      };
      Dungeon.prototype.addCoin = function(pos, count, isReal) {
        this.itemManager && this.itemManager.getValueCoin(count, pos, this.node, isReal);
      };
      Dungeon.prototype.addOilGold = function(pos, count) {
        this.itemManager && this.itemManager.getValueOilGold(count, pos, this.node);
      };
      Dungeon.prototype.addEquipmentListOnGround = function() {
        var currequipments = Logic_1.default.mapManager.getCurrentMapEquipments();
        if (currequipments) for (var _i = 0, currequipments_1 = currequipments; _i < currequipments_1.length; _i++) {
          var tempequip = currequipments_1[_i];
          this.equipmentManager && this.equipmentManager.getEquipment(tempequip.img, Dungeon_1.getPosInMap(tempequip.pos), this.node, tempequip, null, null).data;
        }
      };
      Dungeon.prototype.addItemListOnGround = function() {
        var curritems = Logic_1.default.mapManager.getCurrentMapItems();
        Logic_1.default.mapManager.setCurrentItemsArr(new Array());
        if (curritems) for (var _i = 0, curritems_1 = curritems; _i < curritems_1.length; _i++) {
          var tempeitem = curritems_1[_i];
          tempeitem.isTaken || this.addItem(Dungeon_1.getPosInMap(tempeitem.pos), tempeitem.resName, tempeitem.count);
        }
      };
      Dungeon.prototype.addOilGoldOnGround = function() {
        this.scheduleOnce(function() {
          var data = Logic_1.default.groundOilGoldData.clone();
          if (data.chapter == Logic_1.default.chapterIndex && data.level == Logic_1.default.level && data.x == Logic_1.default.mapManager.rectDungeon.currentPos.x && data.y == Logic_1.default.mapManager.rectDungeon.currentPos.y && data.value > 0) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_OILGOLD, {
              count: data.value
            });
            Logic_1.default.saveGroundOilGold(0);
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_OILGOLD_RECOVERY_SHOW);
          }
        }, 1);
      };
      Dungeon.prototype.addEquipment = function(equipType, pos, equipData, chestQuality, shopTable) {
        if (this.equipmentManager) {
          pos || (pos = this.player.node.position.clone());
          var data = this.equipmentManager.getEquipment(equipType, pos, this.node, equipData, chestQuality, shopTable).data;
          if (shopTable) return;
          var isOnlyTest = data.test > 0 && (Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099 || Logic_1.default.chapterIndex == Logic_1.default.CHAPTER00 && 0 == Logic_1.default.level);
          if (!isOnlyTest) {
            var currequipments = Logic_1.default.mapManager.getCurrentMapEquipments();
            if (currequipments) currequipments.push(data); else {
              currequipments = new Array();
              currequipments.push(data);
              Logic_1.default.mapManager.setCurrentEquipmentsArr(currequipments);
            }
          }
        }
      };
      Dungeon.prototype.addFloorPaper = function(fromPos, targetPos, count) {
        for (var i = 0; i < count; i++) this.effectItemManager && this.effectItemManager.addPaper(fromPos, targetPos);
      };
      Dungeon.prototype.addHitBlood = function(fromPos, targetPos, count) {
        for (var i = 0; i < count; i++) this.effectItemManager && this.effectItemManager.addHitBlood(fromPos, targetPos);
      };
      Dungeon.prototype.addBossSlime = function(type, index) {
        this.monsterManager && this.monsterManager.addBossSlime(type, index, this);
      };
      Dungeon.prototype.shakeForKraken = function() {
        var _this = this;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN_LOCK);
        this.anim.playAdditive("DungeonShakeOnce");
        this.scheduleOnce(function() {
          _this.anim.playAdditive("DungeonShakeOnce");
        }, 1);
        this.scheduleOnce(function() {
          _this.anim.playAdditive("DungeonShakeOnce");
        }, 2);
      };
      Dungeon.getPosInMap = function(pos) {
        var x = Dungeon_1.MAPX + pos.x * Dungeon_1.TILE_SIZE;
        var y = Dungeon_1.MAPY + pos.y * Dungeon_1.TILE_SIZE;
        return cc.v3(x, y);
      };
      Dungeon.getIndexInMap = function(pos, canOuter) {
        var x = (pos.x - Dungeon_1.MAPX) / Dungeon_1.TILE_SIZE;
        var y = (pos.y - Dungeon_1.MAPY) / Dungeon_1.TILE_SIZE;
        x = Math.round(x);
        y = Math.round(y);
        if (!canOuter) {
          x < 0 && (x = 0);
          x >= Dungeon_1.WIDTH_SIZE && (x = Dungeon_1.WIDTH_SIZE - 1);
          y < 0 && (y = 0);
          y >= Dungeon_1.HEIGHT_SIZE && (y = Dungeon_1.HEIGHT_SIZE - 1);
        }
        return cc.v3(x, y);
      };
      Dungeon.fixOuterMap = function(pos) {
        var x = (pos.x - Dungeon_1.MAPX) / Dungeon_1.TILE_SIZE;
        var y = (pos.y - Dungeon_1.MAPY) / Dungeon_1.TILE_SIZE;
        x = Math.round(x);
        y = Math.round(y);
        var isOuter = false;
        if (x < 0) {
          x = 0;
          isOuter = true;
        }
        if (x >= Dungeon_1.WIDTH_SIZE) {
          x = Dungeon_1.WIDTH_SIZE - 1;
          isOuter = true;
        }
        if (y < 0) {
          y = 0;
          isOuter = true;
        }
        if (y >= Dungeon_1.HEIGHT_SIZE) {
          y = Dungeon_1.HEIGHT_SIZE - 1;
          isOuter = true;
        }
        return isOuter ? Dungeon_1.getPosInMap(cc.v3(x, y)) : pos;
      };
      Dungeon.prototype.start = function() {
        var _this = this;
        this.scheduleOnce(function() {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CHANGE_MINIMAP, {
            x: _this.currentPos.x,
            y: _this.currentPos.y
          });
          _this.isInitFinish && !Logic_1.default.isGamePause && !_this.isDisappeared && LoadingManager_1.default.allResourceDone() && _this.checkRoomClear();
        }, .1);
        cc.log("dungeon pos:" + this.node.position);
      };
      Dungeon.prototype.breakTile = function(pos) {
        var tile = this.tilesmap[pos.x][pos.y];
        tile && !tile.isBroken && tile.breakTile();
      };
      Dungeon.prototype.getMonsterAliveNum = function() {
        var count = 0;
        for (var _i = 0, _a = this.monsterManager.monsterList; _i < _a.length; _i++) {
          var monster = _a[_i];
          (!monster || !monster.node || monster.sc.isDied || monster.data.isTest > 0) && count++;
        }
        return this.monsterManager.monsterList.length - count;
      };
      Dungeon.prototype.checkRoomClear = function() {
        var count = this.getMonsterAliveNum();
        this.isClear = count <= 0;
        if (this.isClear && this.monsterManager.bossList.length > 0) {
          for (var _i = 0, _a = this.monsterManager.bossList; _i < _a.length; _i++) {
            var boss = _a[_i];
            boss.sc.isDied && count++;
          }
          this.isClear = count >= this.monsterManager.bossList.length;
        }
        for (var _b = 0, _c = this.buildingManager.monsterGeneratorList; _b < _c.length; _b++) {
          var monsterGenerator = _c[_b];
          if (!monsterGenerator.addFinish) {
            this.isClear && monsterGenerator.open();
            this.isClear = false;
          }
        }
        for (var _d = 0, _e = this.buildingManager.footboards; _d < _e.length; _d++) {
          var footboard = _e[_d];
          footboard.isOpen || footboard.hasActive || (this.isClear = false);
        }
        Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.TEST_ROOM) && (this.isClear = true);
        this.setDoors(this.isClear);
        if (this.isClear) {
          if (this.monsterManager.isRoomInitWithEnemy && Logic_1.default.mapManager.getCurrentRoomType().isNotEqual(RoomType_1.default.TEST_ROOM)) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_COMPLETE_SHOW, {
              map: this.buildingManager.getReachDir()
            });
            if (!this.isComplete && this.player && this.player.data && this.player.data.StatusTotalData.clearHealth > 0) {
              this.isComplete = true;
              this.player.takeDamage(new DamageData_1.default(-this.player.data.StatusTotalData.clearHealth), FromData_1.default.getClone(this.player.actorName(), "", this.player.node.position));
            }
          }
          this.buildingManager.savePointS && this.buildingManager.savePointS.open();
          Logic_1.default.mapManager.setRoomClear(this.currentPos.x, this.currentPos.y);
        }
      };
      Dungeon.prototype.setDoors = function(isClear, immediately) {
        if (!this.buildingManager) return;
        this.buildingManager.setDoors(isClear, immediately);
      };
      Dungeon.prototype.checkPlayerPos = function(dt) {
        if (!this.tilesmap || !this.player || !this.node) return;
        var p = this.cameraControl.Target.node.position.add(this.cameraControl.TargetOffset);
        this.cameraControl.Target.entity && (p.y += this.cameraControl.Target.entity.Transform.z);
        this.fog.setPosition(this.lerp(this.fog.position, p, 3 * dt));
        var pos = Dungeon_1.getIndexInMap(this.player.node.position);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CHANGE_MINIMAP, {
          x: pos.x,
          y: pos.y
        });
        if (!this.tilesmap[pos.x] || !this.tilesmap[pos.x][pos.y]) return;
        var tile = this.tilesmap[pos.x][pos.y];
        tile && tile.isBroken && this.player.fall();
        tile && tile.isAutoShow && this.breakTile(pos);
        this.player.isInWaterTile = this.isActorPosInWater(this.player);
      };
      Dungeon.prototype.isActorPosInWater = function(actor) {
        if (this.waterIndexMap.length < 1) return;
        if (!this.tilesmap) return false;
        var pos = Dungeon_1.getIndexInMap(actor.node.position);
        if (!this.tilesmap[pos.x] || !this.tilesmap[pos.x][pos.y]) return false;
        var tile = this.tilesmap[pos.x][pos.y];
        var pp = actor.node.position;
        var w = actor.node.width;
        var h = actor.node.width;
        return tile.isWater && tile.containsRect(cc.rect(pp.x - w / 2, pp.y - h / 2, w, h));
      };
      Dungeon.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      Dungeon.prototype.checkMonstersPos = function() {
        for (var _i = 0, _a = this.monsterManager.monsterList; _i < _a.length; _i++) {
          var monster = _a[_i];
          if (monster && monster.node && monster.node.active && monster.sc.isDied) return;
        }
      };
      Dungeon.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      Dungeon.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      Dungeon.prototype.update = function(dt) {
        if (this.isInitFinish && !Logic_1.default.isGamePause && !this.isDisappeared && LoadingManager_1.default.allResourceDone()) {
          if (this.isTimeDelay(dt)) {
            this.checkPlayerPos(dt);
            this.monsterManager.updateLogic(dt);
            this.nonPlayerManager.updateLogic(dt);
            this.buildingManager.updateLogic(dt, this.player);
            this.equipmentManager.updateLogic(dt, this.player);
            this.itemManager.updateLogic(dt, this.player);
            this.weatherManager.updateLogic(dt, this.player);
          }
          this.isCheckTimeDelay(dt) && this.checkRoomClear();
        }
      };
      Dungeon.prototype.lateUpdate = function(dt) {
        this.isInitFinish && !Logic_1.default.isGamePause && !this.isDisappeared && LoadingManager_1.default.allResourceDone() && this.rootSystem.execute(dt);
      };
      var Dungeon_1;
      Dungeon.WIDTH_SIZE = 7;
      Dungeon.HEIGHT_SIZE = 7;
      Dungeon.MAPX = 64;
      Dungeon.MAPY = 64;
      Dungeon.TILE_SIZE = 128;
      Dungeon.DEFAULT_ZOOM_MAX = 2;
      Dungeon.DEFAULT_ZOOM_MIN = .6;
      Dungeon.DEFAULT_ZOOM = 1;
      __decorate([ property(cc.Prefab) ], Dungeon.prototype, "tile", void 0);
      __decorate([ property(cc.Prefab) ], Dungeon.prototype, "playerPrefab", void 0);
      __decorate([ property(cc.Node) ], Dungeon.prototype, "fog", void 0);
      __decorate([ property(StatusIconList_1.default) ], Dungeon.prototype, "statusIconList", void 0);
      __decorate([ property(CameraControl_1.default) ], Dungeon.prototype, "cameraControl", void 0);
      Dungeon = Dungeon_1 = __decorate([ ccclass ], Dungeon);
      return Dungeon;
    }(cc.Component);
    exports.default = Dungeon;
    cc._RF.pop();
  }, {
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../ecs/system/GameWorldSystem": "GameWorldSystem",
    "../manager/AiPlayerManager": "AiPlayerManager",
    "../manager/BuildingManager": "BuildingManager",
    "../manager/DungeonStyleManager": "DungeonStyleManager",
    "../manager/EffectItemManager": "EffectItemManager",
    "../manager/EquipmentManager": "EquipmentManager",
    "../manager/ItemManager": "ItemManager",
    "../manager/LightManager": "LightManager",
    "../manager/LoadingManager": "LoadingManager",
    "../manager/MonsterManager": "MonsterManager",
    "../manager/NonPlayerManager": "NonPlayerManager",
    "../manager/WeatherManager": "WeatherManager",
    "../rect/RoomType": "RoomType",
    "../ui/Dialogue": "Dialogue",
    "../ui/StatusIconList": "StatusIconList",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/Random": "Random",
    "../utils/Utils": "Utils",
    "./CameraControl": "CameraControl",
    "./Controller": "Controller",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./Player": "Player",
    "./PlayerController": "PlayerController",
    "./Tile": "Tile"
  } ],
  ECS: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01c10Dxz45KbYQrKeyNy/kg", "ECS");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __spreadArrays = this && this.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, 
      k++) r[k] = a[j];
      return r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ecs = void 0;
    var ecs;
    (function(ecs) {
      var IComponent = function() {
        function IComponent() {}
        IComponent.tid = -1;
        IComponent.matcher = null;
        return IComponent;
      }();
      ecs.IComponent = IComponent;
      var componentPools = new Map();
      var compTid = 0;
      var componentConstructors = [];
      var componentAddOrRemove = new Map();
      var tags = new Map();
      function register(componentName) {
        return function(ctor) {
          if (-1 !== ctor.tid) throw new Error("\u91cd\u590d\u6ce8\u518c\u7ec4\u4ef6\uff1a " + componentName + ".");
          ctor.tid = compTid++;
          ctor.compName = componentName;
          componentConstructors.push(ctor);
          componentPools.set(ctor.tid, []);
          componentAddOrRemove.set(ctor.tid, []);
          if (ctor.matcher) {
            var listenAddMatcher = ctor.matcher;
            var listenRemoveMather = listenAddMatcher.clone();
            listenAddMatcher.excludeOf(ctor);
            listenRemoveMather.allOf(ctor);
            groupListenAdd.set(listenAddMatcher.mid, ctor);
            groupListenRemove.set(listenRemoveMather.mid, ctor);
            createGroup(listenAddMatcher);
            createGroup(listenRemoveMather);
          }
        };
      }
      ecs.register = register;
      function registerTag() {
        return function(_class) {
          var tid = compTid;
          for (var k in _class) {
            tid = compTid++;
            _class[k] = tid;
            componentConstructors.push(tid);
            componentPools.set(tid, []);
            componentAddOrRemove.set(tid, []);
            tags.set(tid, k);
          }
        };
      }
      ecs.registerTag = registerTag;
      var entityPool = [];
      var eid2Entity = new Map();
      var groups = new Map();
      var groupListenAdd = new Map();
      var groupListenRemove = new Map();
      var eid = 1;
      function createEntity() {
        var entity = entityPool.pop();
        if (!entity) {
          entity = new Entity();
          entity.eid = eid++;
        }
        eid2Entity.set(entity.eid, entity);
        return entity;
      }
      ecs.createEntity = createEntity;
      function createComponent(ctor) {
        var component = componentPools.get(ctor.tid).pop() || new componentConstructors[ctor.tid]();
        return component;
      }
      function createEntityWithComp(ctor) {
        var entity = createEntity();
        return entity.add(ctor);
      }
      ecs.createEntityWithComp = createEntityWithComp;
      function createEntityWithComps() {
        var ctors = [];
        for (var _i = 0; _i < arguments.length; _i++) ctors[_i] = arguments[_i];
        var entity = createEntity();
        for (var _a = 0, ctors_1 = ctors; _a < ctors_1.length; _a++) {
          var ctor = ctors_1[_a];
          "number" === typeof ctor ? entity.addTag(ctor) : entity.add(ctor);
        }
        return entity;
      }
      ecs.createEntityWithComps = createEntityWithComps;
      function destroyEntity(entity) {
        if (eid2Entity.has(entity.eid)) {
          entityPool.push(entity);
          eid2Entity.delete(entity.eid);
        } else console.warn("\u8bd5\u56fe\u9500\u6bc1\u4e0d\u5b58\u5728\u7684\u5b9e\u4f53\uff01");
      }
      function createGroup(matcher) {
        var group = groups.get(matcher.mid);
        if (!group) {
          group = new Group(matcher);
          groups.set(matcher.mid, group);
          var careComponentTypeIds = matcher.indices;
          for (var i = 0, len = careComponentTypeIds.length; i < len; i++) componentAddOrRemove.get(careComponentTypeIds[i]).push(group.onComponentAddOrRemove.bind(group));
        }
        return group;
      }
      ecs.createGroup = createGroup;
      function query(matcher) {
        var group = groups.get(matcher.mid);
        if (!group) {
          group = createGroup(matcher);
          eid2Entity.forEach(group.onComponentAddOrRemove, group);
        }
        return group.matchEntities;
      }
      ecs.query = query;
      function clear() {
        eid2Entity.forEach(function(entity) {
          entity.destroy();
        });
        groups.forEach(function(group) {
          group.clear();
        });
        componentAddOrRemove.forEach(function(callbackLst) {
          callbackLst.length = 0;
        });
        eid2Entity.clear();
        groups.clear();
      }
      ecs.clear = clear;
      function broadcastComponentAddOrRemove(entity, componentTypeId) {
        var events = componentAddOrRemove.get(componentTypeId);
        for (var i = events.length - 1; i >= 0; i--) events[i](entity);
        tid2comp.has(componentTypeId) && tid2comp.delete(componentTypeId);
      }
      function getEntityByEid(eid) {
        return eid2Entity.get(eid);
      }
      ecs.getEntityByEid = getEntityByEid;
      function activeEntityCount() {
        return eid2Entity.size;
      }
      ecs.activeEntityCount = activeEntityCount;
      function allOf() {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        return (_a = new Matcher()).allOf.apply(_a, args);
      }
      ecs.allOf = allOf;
      function anyOf() {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        return (_a = new Matcher()).anyOf.apply(_a, args);
      }
      ecs.anyOf = anyOf;
      function onlyOf() {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        return (_a = new Matcher()).onlyOf.apply(_a, args);
      }
      ecs.onlyOf = onlyOf;
      function excludeOf() {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        return (_a = new Matcher()).excludeOf.apply(_a, args);
      }
      ecs.excludeOf = excludeOf;
      var tid2comp = new Map();
      function getSingleton(ctor) {
        if (!tid2comp.has(ctor.tid)) {
          var comp = createEntityWithComp(ctor);
          tid2comp.set(ctor.tid, comp);
        }
        return tid2comp.get(ctor.tid);
      }
      ecs.getSingleton = getSingleton;
      var Mask = function() {
        function Mask() {
          this.size = 0;
          var length = Math.ceil(compTid / 31);
          this.mask = new Uint32Array(length);
          this.size = length;
        }
        Mask.prototype.set = function(num) {
          this.mask[num / 31 >>> 0] |= 1 << num % 31;
        };
        Mask.prototype.delete = function(num) {
          this.mask[num / 31 >>> 0] &= ~(1 << num % 31);
        };
        Mask.prototype.has = function(num) {
          return !!(this.mask[num / 31 >>> 0] & 1 << num % 31);
        };
        Mask.prototype.or = function(other) {
          for (var i = 0; i < this.size; i++) if (this.mask[i] & other.mask[i]) return true;
          return false;
        };
        Mask.prototype.and = function(other) {
          for (var i = 0; i < this.size; i++) if ((this.mask[i] & other.mask[i]) != this.mask[i]) return false;
          return true;
        };
        Mask.prototype.clear = function() {
          for (var i = 0; i < this.size; i++) this.mask[i] = 0;
        };
        return Mask;
      }();
      var Entity = function() {
        function Entity() {
          this.eid = -1;
          this.mask = new Mask();
          this.compTid2Ctor = new Map();
        }
        Entity.prototype.add = function(ctor, isReAdd) {
          void 0 === isReAdd && (isReAdd = false);
          var componentTypeId = ctor.tid;
          if (-1 === ctor.tid) throw Error("\u7ec4\u4ef6\u672a\u6ce8\u518c\uff01");
          if (this.compTid2Ctor.has(componentTypeId)) {
            if (!isReAdd) {
              console.log("\u5df2\u7ecf\u5b58\u5728\u7ec4\u4ef6\uff1a" + ctor.compName);
              return this[ctor.compName];
            }
            this.remove(ctor);
          }
          this.mask.set(componentTypeId);
          var component = createComponent(ctor);
          this[ctor.compName] = component;
          this.compTid2Ctor.set(componentTypeId, ctor);
          broadcastComponentAddOrRemove(this, componentTypeId);
          component.ent = this;
          return component;
        };
        Entity.prototype.addComponents = function() {
          var ctors = [];
          for (var _i = 0; _i < arguments.length; _i++) ctors[_i] = arguments[_i];
          for (var _a = 0, ctors_2 = ctors; _a < ctors_2.length; _a++) {
            var ctor = ctors_2[_a];
            "number" === typeof ctor ? this.addTag(ctor) : this.add(ctor);
          }
        };
        Entity.prototype.get = function(ctor) {
          return this[ctor.compName];
        };
        Entity.prototype.has = function(ctor) {
          return this.compTid2Ctor.has(ctor.tid);
        };
        Entity.prototype.remove = function(ctor) {
          var componentTypeId = ctor.tid;
          if (this.mask.has(componentTypeId)) {
            this[ctor.compName].reset();
            this[ctor.compName].ent = null;
            componentPools.get(componentTypeId).push(this[ctor.compName]);
            this[ctor.compName] = null;
            this.mask.delete(componentTypeId);
            broadcastComponentAddOrRemove(this, componentTypeId);
            this.compTid2Ctor.delete(componentTypeId);
          }
        };
        Entity.prototype.addTag = function(tag) {
          if (!tags.has(tag)) throw Error("\u4e0d\u5b58\u5728\u7684tag\uff01");
          this.mask.set(tag);
          this.compTid2Ctor.set(tag, tag);
          var tagName = tags.get(tag);
          this[tagName] = tag;
          broadcastComponentAddOrRemove(this, tag);
          return this;
        };
        Entity.prototype.hasTag = function(tag) {
          return this.mask.has(tag);
        };
        Entity.prototype.removeTag = function(tag) {
          if (this.mask.has(tag)) {
            this.mask.delete(tag);
            this.compTid2Ctor.delete(tag);
            var tagName = tags.get(tag);
            this[tagName] = null;
            broadcastComponentAddOrRemove(this, tag);
          }
        };
        Entity.prototype._remove = function(comp) {
          "number" === typeof comp ? this.removeTag(comp) : this.remove(comp);
        };
        Entity.prototype.destroy = function() {
          this.compTid2Ctor.forEach(this._remove, this);
          destroyEntity(this);
        };
        return Entity;
      }();
      ecs.Entity = Entity;
      var Group = function() {
        function Group(matcher) {
          this._matchEntities = new Map();
          this._entitiesCache = null;
          this.count = 0;
          this._enteredEntities = null;
          this._removedEntities = null;
          this.matcher = matcher;
        }
        Object.defineProperty(Group.prototype, "matchEntities", {
          get: function() {
            null === this._entitiesCache && (this._entitiesCache = Array.from(this._matchEntities.values()));
            return this._entitiesCache;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Group.prototype, "entity", {
          get: function() {
            return this.matchEntities[0];
          },
          enumerable: false,
          configurable: true
        });
        Group.prototype.onComponentAddOrRemove = function(entity) {
          if (this.matcher.isMatch(entity)) {
            this._matchEntities.set(entity.eid, entity);
            this._entitiesCache = null;
            this.count++;
            if (this._enteredEntities) {
              this._enteredEntities.set(entity.eid, entity);
              this._removedEntities.delete(entity.eid);
            }
            groupListenAdd.has(this.matcher.mid) && entity.add(groupListenAdd.get(this.matcher.mid));
          } else if (this._matchEntities.has(entity.eid)) {
            this._matchEntities.delete(entity.eid);
            this._entitiesCache = null;
            this.count--;
            if (this._enteredEntities) {
              this._enteredEntities.delete(entity.eid);
              this._removedEntities.set(entity.eid, entity);
            }
            groupListenRemove.has(this.matcher.mid) && entity.remove(groupListenRemove.get(this.matcher.mid));
          }
        };
        Group.prototype.watchEntityEnterAndRemove = function(enteredEntities, removedEntities) {
          this._enteredEntities = enteredEntities;
          this._removedEntities = removedEntities;
        };
        Group.prototype.clear = function() {
          var _a, _b;
          this._matchEntities.clear();
          this._entitiesCache = null;
          this.count = 0;
          null === (_a = this._enteredEntities) || void 0 === _a ? void 0 : _a.clear();
          null === (_b = this._removedEntities) || void 0 === _b ? void 0 : _b.clear();
        };
        return Group;
      }();
      ecs.Group = Group;
      var BaseOf = function() {
        function BaseOf() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
          this.mask = new Mask();
          this.indices = [];
          var componentTypeId = -1;
          var len = args.length;
          for (var i = 0; i < len; i++) {
            componentTypeId = "number" === typeof args[i] ? args[i] : args[i].tid;
            if (-1 == componentTypeId) throw Error("\u5b58\u5728\u6ca1\u6709\u6ce8\u518c\u7684\u7ec4\u4ef6\uff01");
            this.mask.set(componentTypeId);
            this.indices.indexOf(componentTypeId) < 0 && this.indices.push(componentTypeId);
          }
          len > 1 && this.indices.sort(function(a, b) {
            return a - b;
          });
        }
        BaseOf.prototype.toString = function() {
          return this.indices.join("-");
        };
        return BaseOf;
      }();
      var AnyOf = function(_super) {
        __extends(AnyOf, _super);
        function AnyOf() {
          return null !== _super && _super.apply(this, arguments) || this;
        }
        AnyOf.prototype.isMatch = function(entity) {
          return this.mask.or(entity.mask);
        };
        AnyOf.prototype.getKey = function() {
          return "anyOf:" + this.toString();
        };
        return AnyOf;
      }(BaseOf);
      var AllOf = function(_super) {
        __extends(AllOf, _super);
        function AllOf() {
          return null !== _super && _super.apply(this, arguments) || this;
        }
        AllOf.prototype.isMatch = function(entity) {
          return this.mask.and(entity.mask);
        };
        AllOf.prototype.getKey = function() {
          return "allOf:" + this.toString();
        };
        return AllOf;
      }(BaseOf);
      var ExcludeOf = function(_super) {
        __extends(ExcludeOf, _super);
        function ExcludeOf() {
          return null !== _super && _super.apply(this, arguments) || this;
        }
        ExcludeOf.prototype.getKey = function() {
          return "excludeOf:" + this.toString();
        };
        ExcludeOf.prototype.isMatch = function(entity) {
          return !this.mask.or(entity.mask);
        };
        return ExcludeOf;
      }(BaseOf);
      var macherId = 1;
      var Matcher = function() {
        function Matcher() {
          this.rules = [];
          this._indices = null;
          this.mid = -1;
          this._key = null;
          this.mid = macherId++;
        }
        Object.defineProperty(Matcher.prototype, "key", {
          get: function() {
            if (!this._key) {
              var s = "";
              for (var i = 0; i < this.rules.length; i++) {
                s += this.rules[i].getKey();
                i < this.rules.length - 1 && (s += " && ");
              }
              this._key = s;
            }
            return this._key;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Matcher.prototype, "indices", {
          get: function() {
            var _this = this;
            if (null === this._indices) {
              this._indices = [];
              this.rules.forEach(function(rule) {
                Array.prototype.push.apply(_this._indices, rule.indices);
              });
              this.bindMatchMethod();
            }
            return this._indices;
          },
          enumerable: false,
          configurable: true
        });
        Matcher.prototype.anyOf = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
          this.rules.push(new (AnyOf.bind.apply(AnyOf, __spreadArrays([ void 0 ], args)))());
          return this;
        };
        Matcher.prototype.allOf = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
          this.rules.push(new (AllOf.bind.apply(AllOf, __spreadArrays([ void 0 ], args)))());
          return this;
        };
        Matcher.prototype.onlyOf = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
          this.rules.push(new (AllOf.bind.apply(AllOf, __spreadArrays([ void 0 ], args)))());
          var otherTids = [];
          for (var _a = 0, componentConstructors_1 = componentConstructors; _a < componentConstructors_1.length; _a++) {
            var ctor = componentConstructors_1[_a];
            args.indexOf(ctor) < 0 && otherTids.push(ctor);
          }
          this.rules.push(new (ExcludeOf.bind.apply(ExcludeOf, __spreadArrays([ void 0 ], otherTids)))());
          return this;
        };
        Matcher.prototype.excludeOf = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
          this.rules.push(new (ExcludeOf.bind.apply(ExcludeOf, __spreadArrays([ void 0 ], args)))());
          return this;
        };
        Matcher.prototype.bindMatchMethod = function() {
          1 === this.rules.length ? this.isMatch = this.isMatch1 : 2 === this.rules.length ? this.isMatch = this.isMatch2 : this.isMatch = this.isMatchMore;
        };
        Matcher.prototype.isMatch1 = function(entity) {
          return this.rules[0].isMatch(entity);
        };
        Matcher.prototype.isMatch2 = function(entity) {
          return this.rules[0].isMatch(entity) && this.rules[1].isMatch(entity);
        };
        Matcher.prototype.isMatchMore = function(entity) {
          for (var _i = 0, _a = this.rules; _i < _a.length; _i++) {
            var rule = _a[_i];
            if (!rule.isMatch(entity)) return false;
          }
          return true;
        };
        Matcher.prototype.clone = function() {
          var newMatcher = new Matcher();
          newMatcher.mid = macherId++;
          this.rules.forEach(function(rule) {
            return newMatcher.rules.push(rule);
          });
          return newMatcher;
        };
        return Matcher;
      }();
      var ComblockSystem = function() {
        function ComblockSystem() {
          this.dt = 0;
          this.enteredEntities = null;
          this.removedEntities = null;
          this.hasEntityEnter = false;
          this.hasEntityRemove = false;
          this.tmpExecute = null;
          var hasOwnProperty = Object.hasOwnProperty;
          var prototype = Object.getPrototypeOf(this);
          var hasEntityEnter = hasOwnProperty.call(prototype, "entityEnter");
          var hasEntityRemove = hasOwnProperty.call(prototype, "entityRemove");
          var hasFirstUpdate = hasOwnProperty.call(prototype, "firstUpdate");
          this.hasEntityEnter = hasEntityEnter;
          this.hasEntityRemove = hasEntityRemove;
          if (hasEntityEnter || hasEntityRemove) {
            this.enteredEntities = new Map();
            this.removedEntities = new Map();
            this.execute = this.execute1;
            this.group = createGroup(this.filter());
            this.group.watchEntityEnterAndRemove(this.enteredEntities, this.removedEntities);
          } else {
            this.execute = this.execute0;
            this.group = createGroup(this.filter());
          }
          if (hasFirstUpdate) {
            this.tmpExecute = this.execute;
            this.execute = this.updateOnce;
          }
        }
        ComblockSystem.prototype.init = function() {};
        ComblockSystem.prototype.onDestroy = function() {};
        ComblockSystem.prototype.hasEntity = function() {
          return this.group.count > 0;
        };
        ComblockSystem.prototype.updateOnce = function(dt) {
          if (0 === this.group.count) return;
          this.dt = dt;
          if (this.enteredEntities.size > 0) {
            this.entityEnter(Array.from(this.enteredEntities.values()));
            this.enteredEntities.clear();
          }
          this.firstUpdate(this.group.matchEntities);
          this.execute = this.tmpExecute;
          this.execute(dt);
          this.tmpExecute = null;
        };
        ComblockSystem.prototype.execute0 = function(dt) {
          if (0 === this.group.count) return;
          this.dt = dt;
          this.update(this.group.matchEntities);
        };
        ComblockSystem.prototype.execute1 = function(dt) {
          if (this.removedEntities.size > 0) {
            this.hasEntityRemove && this.entityRemove(Array.from(this.removedEntities.values()));
            this.removedEntities.clear();
          }
          if (0 === this.group.count) return;
          this.dt = dt;
          if (this.enteredEntities.size > 0) {
            this.hasEntityEnter && this.entityEnter(Array.from(this.enteredEntities.values()));
            this.enteredEntities.clear();
          }
          this.update(this.group.matchEntities);
        };
        return ComblockSystem;
      }();
      ecs.ComblockSystem = ComblockSystem;
      var RootSystem = function() {
        function RootSystem() {
          this.executeSystemFlows = [];
          this.systemCnt = 0;
        }
        RootSystem.prototype.add = function(system) {
          system instanceof System ? Array.prototype.push.apply(this.executeSystemFlows, system.comblockSystems) : this.executeSystemFlows.push(system);
          this.systemCnt = this.executeSystemFlows.length;
          return this;
        };
        RootSystem.prototype.init = function() {
          this.executeSystemFlows.forEach(function(sys) {
            return sys.init();
          });
        };
        RootSystem.prototype.execute = function(dt) {
          for (var i = 0; i < this.systemCnt; i++) this.executeSystemFlows[i].execute(dt);
        };
        RootSystem.prototype.clear = function() {
          this.executeSystemFlows.forEach(function(sys) {
            return sys.onDestroy();
          });
        };
        return RootSystem;
      }();
      ecs.RootSystem = RootSystem;
      var System = function() {
        function System() {
          this._comblockSystems = [];
        }
        Object.defineProperty(System.prototype, "comblockSystems", {
          get: function() {
            return this._comblockSystems;
          },
          enumerable: false,
          configurable: true
        });
        System.prototype.add = function(system) {
          if (system instanceof System) {
            Array.prototype.push.apply(this._comblockSystems, system._comblockSystems);
            system._comblockSystems.length = 0;
          } else this._comblockSystems.push(system);
          return this;
        };
        return System;
      }();
      ecs.System = System;
    })(ecs = exports.ecs || (exports.ecs = {}));
    cc._RF.pop();
  }, {} ],
  EffectItemManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e9568cIcu1HKakXYDKsnn1K", "EffectItemManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FloorPaper_1 = require("../effect/FloorPaper");
    var HitBlood_1 = require("../effect/HitBlood");
    var EventHelper_1 = require("../logic/EventHelper");
    var BaseManager_1 = require("./BaseManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EffectItemManager = function(_super) {
      __extends(EffectItemManager, _super);
      function EffectItemManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.paper = null;
        _this.hitBlood = null;
        return _this;
      }
      EffectItemManager.prototype.clear = function() {};
      EffectItemManager.prototype.onLoad = function() {
        var _this = this;
        this.hitBloodPool = new cc.NodePool();
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.POOL_DESTORY_HIT_BLOOD, function(detail) {
          _this.node && _this.destroyHitBlood(detail.paperNode);
        });
      };
      EffectItemManager.prototype.destroyHitBlood = function(paperNode) {
        paperNode.active = false;
        this.hitBloodPool.put(paperNode);
      };
      EffectItemManager.prototype.addHitBlood = function(fromPos, targetPos) {
        var paperPrefab = null;
        this.hitBloodPool.size() > 0 && (paperPrefab = this.hitBloodPool.get());
        paperPrefab && !paperPrefab.active || (paperPrefab = cc.instantiate(this.hitBlood));
        var blood = paperPrefab.getComponent(HitBlood_1.default);
        blood.node.parent = this.node;
        blood.node.active = true;
        blood.node.position = targetPos.clone();
        blood.entity.Transform.position = targetPos.clone();
        blood.entity.Transform.z = 64;
        blood.fly(fromPos, true);
      };
      EffectItemManager.prototype.addPaper = function(fromPos, targetPos) {
        var paper = cc.instantiate(this.paper).getComponent(FloorPaper_1.default);
        paper.node.parent = this.node;
        paper.node.active = true;
        paper.node.position = targetPos.clone();
        paper.entity.Transform.position = targetPos.clone();
        paper.entity.Transform.z = 32;
        paper.fly(fromPos, false);
      };
      __decorate([ property(cc.Prefab) ], EffectItemManager.prototype, "paper", void 0);
      __decorate([ property(cc.Prefab) ], EffectItemManager.prototype, "hitBlood", void 0);
      EffectItemManager = __decorate([ ccclass ], EffectItemManager);
      return EffectItemManager;
    }(BaseManager_1.default);
    exports.default = EffectItemManager;
    cc._RF.pop();
  }, {
    "../effect/FloorPaper": "FloorPaper",
    "../effect/HitBlood": "HitBlood",
    "../logic/EventHelper": "EventHelper",
    "./BaseManager": "BaseManager"
  } ],
  Emplacement: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78b9bpQ7+BAGrpzYzxR/1mq", "Emplacement");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Shooter_1 = require("../logic/Shooter");
    var Logic_1 = require("../logic/Logic");
    var Building_1 = require("./Building");
    var FromData_1 = require("../data/FromData");
    var IndexZ_1 = require("../utils/IndexZ");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Emplacement = function(_super) {
      __extends(Emplacement, _super);
      function Emplacement() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.shooterTopNode = null;
        _this.shooterTop = null;
        _this.shooterBottomNode = null;
        _this.shooterBottom = null;
        _this.shooterLeftNode = null;
        _this.shooterLeft = null;
        _this.shooterRightNode = null;
        _this.shooterRight = null;
        _this.isOpen = false;
        _this.pos = cc.v3(0, 0);
        _this.timeDelay = 0;
        _this.dirType = 0;
        return _this;
      }
      Emplacement_1 = Emplacement;
      Emplacement.prototype.onLoad = function() {
        this.shooterTop = this.shooterTopNode.getComponent(Shooter_1.default);
        this.shooterBottom = this.shooterBottomNode.getComponent(Shooter_1.default);
        this.shooterLeft = this.shooterLeftNode.getComponent(Shooter_1.default);
        this.shooterRight = this.shooterRightNode.getComponent(Shooter_1.default);
        this.setShooterHv(this.shooterTop, cc.v2(0, 1));
        this.setShooterHv(this.shooterBottom, cc.v2(0, -1));
        this.setShooterHv(this.shooterLeft, cc.v2(-1, 0));
        this.setShooterHv(this.shooterRight, cc.v2(1, 0));
        var from = FromData_1.default.getClone("\u70ae\u53f0", "emplacement", this.node.position);
        this.shooterTop.from.valueCopy(from);
        this.shooterBottom.from.valueCopy(from);
        this.shooterLeft.from.valueCopy(from);
        this.shooterRight.from.valueCopy(from);
      };
      Emplacement.prototype.setDirType = function(mapStr) {
        switch (mapStr) {
         case "G0":
          this.dirType = Emplacement_1.BOTTOM;
          this.hideOrShowShooter(0, 1, 0, 0);
          break;

         case "G1":
          this.dirType = Emplacement_1.TOP;
          this.hideOrShowShooter(1, 0, 0, 0);
          break;

         case "G2":
          this.dirType = Emplacement_1.RIGHT;
          this.hideOrShowShooter(0, 0, 0, 1);
          break;

         case "G3":
          this.dirType = Emplacement_1.LEFT;
          this.hideOrShowShooter(0, 0, 1, 0);
          break;

         case "G4":
          this.dirType = Emplacement_1.TOPBOTTOM;
          this.hideOrShowShooter(1, 1, 0, 0);
          break;

         case "G5":
          this.dirType = Emplacement_1.LEFTRIGHT;
          this.hideOrShowShooter(0, 0, 1, 1);
          break;

         case "G6":
          this.dirType = Emplacement_1.BOTTOMRIGHT;
          this.hideOrShowShooter(0, 1, 0, 1);
          break;

         case "G7":
          this.dirType = Emplacement_1.BOTTOMLEFT;
          this.hideOrShowShooter(0, 1, 1, 0);
          break;

         case "G8":
          this.dirType = Emplacement_1.TOPLEFT;
          this.hideOrShowShooter(1, 0, 1, 0);
          break;

         case "G9":
          this.dirType = Emplacement_1.TOPRIGHT;
          this.hideOrShowShooter(1, 0, 0, 1);
          break;

         case "G10":
          this.dirType = Emplacement_1.BOTTOMLEFTRIGHT;
          this.hideOrShowShooter(0, 1, 1, 1);
          break;

         case "G11":
          this.dirType = Emplacement_1.TOPLEFTRIGHT;
          this.hideOrShowShooter(1, 0, 1, 1);
          break;

         case "G12":
          this.dirType = Emplacement_1.RIGHTTOPBOTTOM;
          this.hideOrShowShooter(1, 1, 0, 1);
          break;

         case "G13":
          this.dirType = Emplacement_1.LEFTTOPBOTTOM;
          this.hideOrShowShooter(1, 1, 1, 0);
          break;

         case "G14":
          this.dirType = Emplacement_1.ALL;
          this.hideOrShowShooter(1, 1, 1, 1);
        }
      };
      Emplacement.prototype.hideOrShowShooter = function(top, bottom, left, right) {
        this.shooterTopNode.active = top > 0;
        this.shooterBottomNode.active = bottom > 0;
        this.shooterLeftNode.active = left > 0;
        this.shooterRightNode.active = right > 0;
      };
      Emplacement.prototype.start = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        this.scheduleOnce(function() {
          _this.fire();
        }, 1);
      };
      Emplacement.prototype.setPos = function(pos) {
        this.pos = pos;
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(pos);
        this.node.position = this.entity.Transform.position.clone();
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.entity.Transform.position);
      };
      Emplacement.prototype.OpenFire = function() {
        if (this.dungeon && this.dungeon.isClear || this.data.currentHealth <= 0) return;
        switch (this.dirType) {
         case Emplacement_1.ALL:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterBottom);
          this.fireShooter(this.shooterLeft);
          this.fireShooter(this.shooterRight);
          break;

         case Emplacement_1.TOP:
          this.fireShooter(this.shooterTop);
          break;

         case Emplacement_1.BOTTOM:
          this.fireShooter(this.shooterBottom);
          break;

         case Emplacement_1.LEFT:
          this.fireShooter(this.shooterLeft);
          break;

         case Emplacement_1.RIGHT:
          this.fireShooter(this.shooterRight);
          break;

         case Emplacement_1.TOPBOTTOM:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterBottom);
          break;

         case Emplacement_1.TOPLEFT:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterLeft);
          break;

         case Emplacement_1.TOPRIGHT:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterRight);
          break;

         case Emplacement_1.BOTTOMLEFT:
          this.fireShooter(this.shooterBottom);
          this.fireShooter(this.shooterLeft);
          break;

         case Emplacement_1.BOTTOMRIGHT:
          this.fireShooter(this.shooterBottom);
          this.fireShooter(this.shooterRight);
          break;

         case Emplacement_1.LEFTRIGHT:
          this.fireShooter(this.shooterLeft);
          this.fireShooter(this.shooterRight);
          break;

         case Emplacement_1.LEFTTOPBOTTOM:
          this.fireShooter(this.shooterLeft);
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterBottom);
          break;

         case Emplacement_1.RIGHTTOPBOTTOM:
          this.fireShooter(this.shooterRight);
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterBottom);
          break;

         case Emplacement_1.TOPLEFTRIGHT:
          this.fireShooter(this.shooterRight);
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterLeft);
          break;

         case Emplacement_1.BOTTOMLEFTRIGHT:
          this.fireShooter(this.shooterRight);
          this.fireShooter(this.shooterBottom);
          this.fireShooter(this.shooterLeft);
          break;

         default:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterBottom);
          this.fireShooter(this.shooterLeft);
          this.fireShooter(this.shooterRight);
        }
      };
      Emplacement.prototype.fire = function() {
        if (this.dungeon && this.dungeon.isClear || this.data.currentHealth <= 0) return;
        this.anim && this.anim.play();
      };
      Emplacement.prototype.takeDamage = function(damage, from, actor) {
        if (this.data.currentHealth <= 0 || this.data.currentHealth >= 9999) return false;
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        this.data.currentHealth--;
        cc.tween(this.shooterTopNode).to(.2, {
          scale: 1.5
        }).to(.5, {
          scale: 0
        }).start();
        cc.tween(this.shooterBottomNode).to(.2, {
          scale: 1.5
        }).to(.5, {
          scale: 0
        }).start();
        cc.tween(this.shooterLeftNode).to(.2, {
          scale: 1.5
        }).to(.5, {
          scale: 0
        }).start();
        cc.tween(this.shooterRightNode).to(.2, {
          scale: 1.5
        }).to(.5, {
          scale: 0
        }).start();
        return true;
      };
      Emplacement.prototype.fireShooter = function(shooter) {
        if (!shooter.dungeon) {
          shooter.dungeon = this.dungeon;
          shooter.actor = this;
          shooter.data.bulletType = "bullet010";
          shooter.data.bulletLineExNum = 0;
          shooter.data.bulletLineInterval = .5;
          shooter.data.img = "emplacement";
          shooter.isBuilding = true;
          switch (Logic_1.default.chapterIndex) {
           case Logic_1.default.CHAPTER00:
            shooter.data.bulletLineExNum = 0;
            shooter.data.bulletType = "laser001";
            break;

           case Logic_1.default.CHAPTER01:
            shooter.data.bulletType = "bullet010";
            break;

           case Logic_1.default.CHAPTER02:
            shooter.data.bulletType = "bullet013";
            break;

           case Logic_1.default.CHAPTER03:
            shooter.data.bulletType = "bullet006";
            shooter.data.bulletLineExNum = 1;
            break;

           case Logic_1.default.CHAPTER04:
           case Logic_1.default.CHAPTER05:
            shooter.data.bulletType = "bullet024";
            shooter.data.bulletLineExNum = 1;
            break;

           case Logic_1.default.CHAPTER099:
            shooter.data.bulletType = "bullet010";
          }
        }
        shooter.fireBullet(0, cc.v3(64, 0));
      };
      Emplacement.prototype.setShooterHv = function(shooter, hv) {
        shooter.setHv(hv);
      };
      Emplacement.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.timeDelay += dt;
        if (this.timeDelay > 3) {
          this.timeDelay = 0;
          this.fire();
        }
      };
      var Emplacement_1;
      Emplacement.BOTTOM = 0;
      Emplacement.TOP = 1;
      Emplacement.RIGHT = 2;
      Emplacement.LEFT = 3;
      Emplacement.TOPBOTTOM = 4;
      Emplacement.LEFTRIGHT = 5;
      Emplacement.BOTTOMRIGHT = 6;
      Emplacement.BOTTOMLEFT = 7;
      Emplacement.TOPLEFT = 8;
      Emplacement.TOPRIGHT = 9;
      Emplacement.BOTTOMLEFTRIGHT = 10;
      Emplacement.TOPLEFTRIGHT = 11;
      Emplacement.RIGHTTOPBOTTOM = 12;
      Emplacement.LEFTTOPBOTTOM = 13;
      Emplacement.ALL = 14;
      __decorate([ property(cc.Node) ], Emplacement.prototype, "shooterTopNode", void 0);
      __decorate([ property(cc.Node) ], Emplacement.prototype, "shooterBottomNode", void 0);
      __decorate([ property(cc.Node) ], Emplacement.prototype, "shooterLeftNode", void 0);
      __decorate([ property(cc.Node) ], Emplacement.prototype, "shooterRightNode", void 0);
      Emplacement = Emplacement_1 = __decorate([ ccclass ], Emplacement);
      return Emplacement;
    }(Building_1.default);
    exports.default = Emplacement;
    cc._RF.pop();
  }, {
    "../data/FromData": "FromData",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  EnergyShield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b7ba1woN/lIqoplh/wf+2rX", "EnergyShield");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CCollider_1 = require("../collider/CCollider");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EnergyShield = function(_super) {
      __extends(EnergyShield, _super);
      function EnergyShield() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isShow = false;
        _this.timeDelay = 0;
        _this.recoveryTimeDelay = 0;
        return _this;
      }
      EnergyShield.prototype.onLoad = function() {
        this.cover = this.node.getChildByName("sprite").getChildByName("cover");
        this.element = this.node.getChildByName("sprite").getChildByName("cover").getChildByName("element");
        this.anim = this.getComponent(cc.Animation);
        this.collider = this.getComponent(CCollider_1.default);
      };
      EnergyShield.prototype.init = function(player, maxHealth, scale) {
        this.player = player;
        this.data.currentHealth = maxHealth;
        this.data.maxHealth = maxHealth;
        this.node.scale = scale;
        this.anim = this.getComponent(cc.Animation);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(cc.v3(this.entity.Transform.position.x, this.entity.Transform.position.y - 8 * scale));
        this.base = this.node.getChildByName("base");
        this.base.parent = this.node.parent;
        this.base.position = this.entity.Transform.position;
        cc.tween(this.base).to(1, {
          scale: scale,
          opacity: 255
        }).start();
        this.base.zIndex = IndexZ_1.default.ACTOR;
      };
      EnergyShield.prototype.hitLight = function(isHit) {
        this.mat || (this.mat = this.node.getChildByName("sprite").getChildByName("cover").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
      };
      EnergyShield.prototype.ShowFinish = function() {
        this.isShow = true;
        this.changeIdle();
      };
      EnergyShield.prototype.changeIdle = function() {
        if (!this.isShow) return;
        this.checkTargetIn(this.player.node) ? this.anim.getAnimationState("EnergyShieldIdle").isPlaying || this.anim.play("EnergyShieldIdle") : this.anim.getAnimationState("EnergyShieldIdle1").isPlaying || this.anim.play("EnergyShieldIdle1");
      };
      EnergyShield.prototype.checkTargetIn = function(targetNode) {
        var x = this.entity.Transform.position.x - this.collider.w / 2 * this.node.scale;
        var y = this.entity.Transform.position.y - (this.collider.h / 2 - this.collider.offset.y) * this.node.scale;
        var w = this.collider.w * this.node.scale;
        var h = this.collider.h * this.node.scale;
        var rect = cc.rect(x, y, w, h);
        return rect.contains(cc.v2(targetNode.position.x, targetNode.position.y));
      };
      EnergyShield.prototype.takeDamage = function(damage, from) {
        var _this = this;
        if (!this.isShow || this.data.currentHealth <= 0) return false;
        AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_HIT);
        this.hitLight(true);
        this.scheduleOnce(function() {
          _this.hitLight(false);
        }, .15);
        this.data.currentHealth -= damage.getTotalDamage();
        this.changeColor();
        if (this.data.currentHealth <= 0) {
          this.data.currentHealth = 0;
          this.isShow = false;
          this.node.active = false;
          this.base.active = false;
          this.scheduleOnce(function() {
            _this.destroyEntityNode();
            _this.base.destroy();
          }, 1);
        }
        return true;
      };
      EnergyShield.prototype.changeColor = function() {
        var progress = Math.floor(255 * this.data.currentHealth / this.data.maxHealth);
        progress < 0 ? progress = 0 : progress > 255 && (progress = 255);
        this.cover.color = cc.color(255, progress, progress);
        this.element.color = cc.color(255, progress, progress);
        this.base.color = cc.color(255, progress, progress);
      };
      EnergyShield.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      EnergyShield.prototype.isRecoveryTimeDelay = function(dt) {
        this.recoveryTimeDelay += dt;
        if (this.recoveryTimeDelay > 2) {
          this.recoveryTimeDelay = 0;
          return true;
        }
        return false;
      };
      EnergyShield.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.changeIdle();
        this.isRecoveryTimeDelay(dt) && this.checkTargetIn(this.player.node) && this.player.updateDream(-1);
      };
      EnergyShield = __decorate([ ccclass ], EnergyShield);
      return EnergyShield;
    }(Building_1.default);
    exports.default = EnergyShield;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  EquipItemMapData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "07098CeVABLS7tmfNQ+b5t0", "EquipItemMapData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var EquipItemMapData = function() {
      function EquipItemMapData() {
        this.fromRoomPos = cc.v3(0, 0);
        this.fromPos = cc.v3(0, 0);
        this.resName = "";
      }
      EquipItemMapData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.fromRoomPos = data.fromRoomPos ? cc.v3(data.fromRoomPos.x, data.fromRoomPos.y) : cc.v3(0, 0);
        this.fromPos = data.fromPos ? cc.v3(data.fromPos.x, data.fromPos.y) : cc.v3(0, 0);
      };
      EquipItemMapData.prototype.clone = function() {
        var data = new EquipItemMapData();
        data.valueCopy(this);
        return data;
      };
      return EquipItemMapData;
    }();
    exports.default = EquipItemMapData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  EquipItemTalent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cdd67CinP5PjoHg4bK1OsCs", "EquipItemTalent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var FromData_1 = require("../data/FromData");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var Talent_1 = require("./Talent");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var StatusManager_1 = require("../manager/StatusManager");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var Boss_1 = require("../boss/Boss");
    var AreaOfEffectData_1 = require("../data/AreaOfEffectData");
    var NonPlayerManager_1 = require("../manager/NonPlayerManager");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var CoolDownView_1 = require("../ui/CoolDownView");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EquipItemTalent = function(_super) {
      __extends(EquipItemTalent, _super);
      function EquipItemTalent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.aoe = null;
        _this.fireball = null;
        _this.icethron = null;
        _this.fireGhost = null;
        _this.healingLight = null;
        _this.rageLight = null;
        _this.broomPrefab = null;
        _this.cookingPrefab = null;
        _this.swordLightPrefab = null;
        _this.smokePrefab = null;
        _this.skyhandPrefab = null;
        _this.daggerLightPrefab = null;
        return _this;
      }
      EquipItemTalent.prototype.onLoad = function() {};
      EquipItemTalent.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.coolDownId = CoolDownView_1.default.EQUIPITEM;
        var storePointMax = 1;
        this.initCoolDown(data, storePointMax);
      };
      EquipItemTalent.prototype.skillCanUse = function() {
        switch (this.data.resName) {
         case Talent_1.default.TALENT_000:
         case Talent_1.default.TALENT_010:
         case Talent_1.default.TALENT_015:
          return false;

         case Talent_1.default.TALENT_009:
          return this.canSteal();

         case Talent_1.default.TALENT_019:
          return this.player.CanJump && !this.player.sc.isJumping;
        }
        return true;
      };
      EquipItemTalent.prototype.doSkill = function() {
        this.excuteSkill(null);
        for (var _i = 0, _a = this.player.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          s.node && this.excuteSkill(s);
        }
      };
      EquipItemTalent.prototype.excuteSkill = function(shadowPlayer) {
        var shooterEx = shadowPlayer ? shadowPlayer.shooterEx : this.player.shooterEx;
        switch (this.data.resName) {
         case Talent_1.default.TALENT_200:
          this.addMonkey(shadowPlayer);
          break;

         case Talent_1.default.TALENT_201:
          this.addLighteningFall(true, 5 * this.player.data.getFinalAttackPoint().getTotalDamage());
        }
      };
      EquipItemTalent.prototype.addClearCircle = function(shooterEx) {
        this.player.stopAllDebuffs();
        this.player.dungeon.nonPlayerManager.isPetAlive() && this.player.dungeon.nonPlayerManager.pet.stopAllDebuffs();
        var aoe = shooterEx.fireAoe(this.aoe, new AreaOfEffectData_1.default().init(2, .2, 0, this.player.IsVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(this.player.getCenterPosition()), false, false, true, false, false, new DamageData_1.default(0), new FromData_1.default(), []), cc.v3(0, 32), 0, null, true);
        shooterEx.updateCustomAoe(aoe, [ Logic_1.default.spriteFrameRes("clearcircle1"), Logic_1.default.spriteFrameRes("clearcircle2"), Logic_1.default.spriteFrameRes("clearcircle3"), Logic_1.default.spriteFrameRes("clearcircle4") ], false, true, 4);
      };
      EquipItemTalent.prototype.addMonkey = function(shadowPlayer) {
        var _a;
        for (var i = 0; i < 3; i++) {
          var data = new NonPlayerData_1.default();
          AudioPlayer_1.default.play(AudioPlayer_1.default.SMOKE_BALL);
          data.valueCopy(Logic_1.default.nonplayers[NonPlayerManager_1.default.SHOP_MONKEY]);
          var fc = this.player.data.FinalCommon;
          data.Common.remoteDamage = this.player.data.getFinalRemoteDamage().getTotalDamage();
          data.Common.maxHealth = fc.MaxHealth;
          this.player.weaponRight.meleeWeapon.dungeon.nonPlayerManager.addNonPlayerFromData(data, shadowPlayer ? shadowPlayer.node.position : this.player.node.position, null === (_a = this.player.entity) || void 0 === _a ? void 0 : _a.Transform.z, this.player.weaponRight.meleeWeapon.dungeon);
        }
      };
      EquipItemTalent.prototype.healing = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        var light = cc.instantiate(this.healingLight);
        light.parent = this.player.node;
        light.position = cc.v3(0, 64);
        light.zIndex = IndexZ_1.default.OVERHEAD;
        this.player.addStatus(StatusManager_1.default.HEALING, new FromData_1.default());
        this.player.dungeon.nonPlayerManager.isPetAlive() && this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.HEALING, new FromData_1.default());
      };
      EquipItemTalent.prototype.rageShoot = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        var light = cc.instantiate(this.rageLight);
        light.parent = this.player.node;
        light.position = cc.v3(0, 64);
        light.zIndex = IndexZ_1.default.OVERHEAD;
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
          light && cc.isValid(light) && light.destroy();
        }, 3);
      };
      EquipItemTalent.prototype.flash = function(shadowPlayer) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.TAKEPHOTO);
        cc.tween(this.sprite.node).call(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_FLASH_SPEED, new FromData_1.default());
          _this.player.dungeon.nonPlayerManager.isPetAlive() && _this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.TALENT_FLASH_SPEED, new FromData_1.default());
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("flash");
          _this.sprite.node.width = 128;
          _this.sprite.node.height = 128;
          _this.sprite.node.opacity = 255;
          _this.sprite.node.position = cc.v3(0, 32);
        }).to(.1, {
          opacity: 0
        }).call(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("singleColor");
          _this.sprite.node.width = 2e3;
          _this.sprite.node.height = 2e3;
          _this.sprite.node.opacity = 255;
        }).to(.1, {
          opacity: 0
        }).call(function() {
          StatusManager_1.default.addStatus2NearEnemies(_this.player, shadowPlayer ? shadowPlayer.node : _this.player.node, StatusManager_1.default.TALENT_FLASH_DIZZ, _this.player.IsVariation ? 500 : 400, new FromData_1.default());
          _this.sprite.spriteFrame = null;
        }).start();
      };
      EquipItemTalent.prototype.aimedShoot = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.RELOAD);
        cc.tween(this.sprite.node).call(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_AIMED, new FromData_1.default());
          _this.player.dungeon.nonPlayerManager.isPetAlive() && _this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.TALENT_AIMED, new FromData_1.default());
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talentshoot");
          _this.sprite.node.width = 64;
          _this.sprite.node.height = 64;
          _this.sprite.node.opacity = 255;
          _this.sprite.node.scale = 1;
          _this.sprite.node.position = cc.v3(0, 128);
        }).repeat(5, cc.tween().to(1, {
          scale: 1.5
        }).to(1, {
          scale: 1
        })).call(function() {
          _this.sprite.spriteFrame = null;
        }).start();
      };
      EquipItemTalent.prototype.jump = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.JUMP_FALL);
        this.player.talentJump(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
          var d = _this.player.data.getFinalAttackPoint();
          d.isMelee = true;
          d.isCriticalStrike = true;
          var scale = 2;
          _this.player.IsVariation && (scale += 1);
          shooterEx.fireAoe(_this.skyhandPrefab, new AreaOfEffectData_1.default().init(0, .15, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, false, d, new FromData_1.default(), [ StatusManager_1.default.DIZZ ]));
          _this.talentSkill.IsExcuting = false;
        });
      };
      EquipItemTalent.prototype.canSteal = function() {
        var actor = ActorUtils_1.default.getNearestEnemyActor(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon);
        if (!actor) return false;
        var monster = actor.getComponent(NonPlayer_1.default);
        var boss = actor.getComponent(Boss_1.default);
        if (monster && monster.data.noLoot < 1) return true;
        if (boss) return true;
        return false;
      };
      EquipItemTalent.prototype.steal = function(shadowPlayer) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.FIREBALL);
        var node = ActorUtils_1.default.getNearestEnemyActor(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon);
        if (!node) return;
        var monster = node.getComponent(NonPlayer_1.default);
        var boss = node.getComponent(Boss_1.default);
        monster && monster.data.noLoot < 1 && monster.getLoot();
        boss && boss.getLoot();
        if (!shadowPlayer) {
          this.sprite.node.width = 128;
          this.sprite.node.height = 128;
          this.sprite.node.opacity = 255;
          this.sprite.node.scale = 1;
          this.sprite.node.position = cc.v3(0, 128);
          cc.tween(this.sprite.node).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand01");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand02");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand03");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand04");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = null;
          }).start();
        }
      };
      EquipItemTalent.prototype.showSmoke = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        var scale = 1;
        this.player.IsVariation && (scale += 1);
        this.shoot(shooterEx, 0, 0, "bullet041", this.smokePrefab, new AreaOfEffectData_1.default().init(7, .1, 0, scale, IndexZ_1.default.OVERHEAD, false, false, false, false, false, new DamageData_1.default(), new FromData_1.default(), [ StatusManager_1.default.WINE_CLOUD ]));
      };
      EquipItemTalent.prototype.showFireBall = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_FIREBALL);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        d.isMelee = true;
        var scale = 4;
        this.player.IsVariation && (scale += 1);
        shooterEx.fireAoe(this.fireball, new AreaOfEffectData_1.default().init(0, .1, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.BURNING ]));
      };
      EquipItemTalent.prototype.showIceThron = function(shooterEx) {
        this.scheduleOnce(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_ICETHRON);
        }, 1);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        d.isMelee = true;
        var offset1 = 100;
        var offset2 = 60;
        var scale = 3;
        if (this.player.IsVariation) {
          scale += 1;
          offset1 = 150;
          offset2 = 90;
        }
        var angles1 = [ 0, 45, 90, 135, 180, 225, 270, 315 ];
        var posRight = [ cc.v3(0, offset1), cc.v3(-offset2, offset2), cc.v3(-offset1, 0), cc.v3(-offset2, -offset2), cc.v3(0, -offset1), cc.v3(offset2, -offset2), cc.v3(offset1, 0), cc.v3(offset2, offset2) ];
        var posLeft = [ cc.v3(0, -offset1), cc.v3(-offset2, -offset2), cc.v3(-offset1, 0), cc.v3(-offset2, offset2), cc.v3(0, offset1), cc.v3(offset2, offset2), cc.v3(offset1, 0), cc.v3(offset2, -offset2) ];
        var a1 = [ angles1 ];
        var a = a1;
        var index = 0;
        for (var i = 0; i < a[index].length; i++) shooterEx.fireAoe(this.icethron, new AreaOfEffectData_1.default().init(0, 2, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.v3(posRight[i]), angles1[i], null, true);
      };
      EquipItemTalent.prototype.changePerformance = function() {};
      EquipItemTalent.prototype.takeDamage = function(damageData, from, actor) {
        return false;
      };
      EquipItemTalent.prototype.addLighteningFall = function(isArea, damagePoint) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_LIGHTENINGFALL, {
          pos: ActorUtils_1.default.getNearestEnemyPosition(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon, false),
          showArea: isArea,
          damage: damagePoint
        });
      };
      EquipItemTalent.prototype.addBroom = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        var scale = 1.5;
        this.player.IsVariation && (scale += 1);
        var aoe = shooterEx.fireAoe(this.broomPrefab, new AreaOfEffectData_1.default().init(0, .5, .2, scale, IndexZ_1.default.OVERHEAD, false, true, true, true, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.v3(0, 32 * this.player.node.scaleY));
        this.schedule(function() {
          aoe && aoe.entity && aoe.isValid && (aoe.entity.Transform.position = _this.player.node.position.clone());
        }, .02, 100);
      };
      EquipItemTalent.prototype.cooking = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        var scale = 1;
        this.player.IsVariation && (scale += 1);
        shooterEx.fireAoe(this.cookingPrefab, new AreaOfEffectData_1.default().init(0, 2, 0, scale, IndexZ_1.default.OVERHEAD, false, false, false, false, false, d, new FromData_1.default(), []), cc.v3(0, 32), 0, function(actor) {
          var monster = actor.node.getComponent(NonPlayer_1.default);
          monster && monster.dungeon.addItem(monster.node.position.clone(), "foodmonster" + monster.data.resName.replace("monster", ""));
          var boss = actor.node.getComponent(Boss_1.default);
          boss && boss.dungeon.addItem(boss.node.position.clone(), "foodboss" + boss.data.resName.replace("iconboss", ""));
        });
      };
      EquipItemTalent.prototype.addSwordLight = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SWORD_SHOW);
        var d = new DamageData_1.default();
        d.isMelee = true;
        var scale = 5;
        d.physicalDamage = 2 + Logic_1.default.playerData.OilGoldData.level;
        if (this.player.weaponRight.meleeWeapon.IsSword) {
          d = this.player.data.getFinalAttackPoint();
          scale = 6;
        }
        this.player.IsVariation && (scale += 1);
        var swordlight = shooterEx.fireAoe(this.swordLightPrefab, new AreaOfEffectData_1.default().init(0, .35, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]));
        var color = cc.color(255, 255, 255).fromHEX(this.player.inventoryMgr.equips[InventoryManager_1.default.WEAPON].lightcolor);
        swordlight.node.getChildByName("sprite").color = color;
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
        }, 1);
      };
      EquipItemTalent.prototype.addDaggerLight = function(shooterEx, shadowPlayer) {
        var _this = this;
        if (!this.player.weaponRight.meleeWeapon.IsDagger) {
          shadowPlayer || this.player.addStatus(StatusManager_1.default.TALENT_INVISIBLE, new FromData_1.default());
          return;
        }
        var duration = 2.4;
        shadowPlayer || this.scheduleOnce(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_INVISIBLE, new FromData_1.default());
        }, duration);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SWORD_SHOW);
        var scale = 2;
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        d.physicalDamage = d.physicalDamage / 2;
        this.player.IsVariation && (scale += 1);
        var swordlight = shooterEx.fireAoe(this.daggerLightPrefab, new AreaOfEffectData_1.default().init(0, duration / 10, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, false, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.Vec3.ZERO);
        var color = cc.color(255, 255, 255).fromHEX(this.player.inventoryMgr.equips[InventoryManager_1.default.WEAPON].lightcolor);
        for (var _i = 0, _a = swordlight.node.getComponentsInChildren(cc.Sprite); _i < _a.length; _i++) {
          var sprite = _a[_i];
          sprite.node.color = shadowPlayer ? cc.Color.BLACK : color;
          sprite.node.opacity = 200;
        }
        this.player.vanish(duration);
        shadowPlayer && shadowPlayer.vanish(duration);
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
        }, 3);
      };
      __decorate([ property(cc.Sprite) ], EquipItemTalent.prototype, "sprite", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "aoe", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "fireball", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "icethron", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "fireGhost", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "healingLight", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "rageLight", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "broomPrefab", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "cookingPrefab", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "swordLightPrefab", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "smokePrefab", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "skyhandPrefab", void 0);
      __decorate([ property(cc.Prefab) ], EquipItemTalent.prototype, "daggerLightPrefab", void 0);
      EquipItemTalent = __decorate([ ccclass ], EquipItemTalent);
      return EquipItemTalent;
    }(Talent_1.default);
    exports.default = EquipItemTalent;
    cc._RF.pop();
  }, {
    "../boss/Boss": "Boss",
    "../data/AreaOfEffectData": "AreaOfEffectData",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../data/NonPlayerData": "NonPlayerData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../logic/NonPlayer": "NonPlayer",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/NonPlayerManager": "NonPlayerManager",
    "../manager/StatusManager": "StatusManager",
    "../ui/CoolDownView": "CoolDownView",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "./Talent": "Talent"
  } ],
  EquipmentAndItemDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "af5ccf4cCpAz5dS6cSfKkBs", "EquipmentAndItemDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../../logic/Logic");
    var AffixManager_1 = require("../../manager/AffixManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EquipmentAndItemDialog = function(_super) {
      __extends(EquipmentAndItemDialog, _super);
      function EquipmentAndItemDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.layout = null;
        _this.labelTitle = null;
        _this.requireLevel = null;
        _this.price = null;
        _this.infoBase = null;
        _this.info1 = null;
        _this.info2 = null;
        _this.info3 = null;
        _this.extraInfo = null;
        _this.infoSuit1 = null;
        _this.infoSuit2 = null;
        _this.infoSuit3 = null;
        _this.infoDesc = null;
        _this.count = null;
        _this.arrowNoneBg = null;
        _this.arrowRightBg = null;
        _this.arrowDownBg = null;
        _this.arrowLeftBg = null;
        _this.bgType = 0;
        return _this;
      }
      EquipmentAndItemDialog_1 = EquipmentAndItemDialog;
      EquipmentAndItemDialog.prototype.onLoad = function() {};
      EquipmentAndItemDialog.prototype.changeBgAndAnchor = function(bgType) {
        this.bgType = bgType;
        var sprite = this.layout.getComponent(cc.Sprite);
        this.layout.anchorX = 1;
        this.layout.anchorY = 1;
        switch (this.bgType) {
         case EquipmentAndItemDialog_1.BG_TYPE_NONE:
          sprite.spriteFrame = null;
          break;

         case EquipmentAndItemDialog_1.BG_TYPE_ARROW_NONE:
          sprite.spriteFrame = this.arrowNoneBg;
          break;

         case EquipmentAndItemDialog_1.BG_TYPE_ARROW_RIGHT:
          sprite.spriteFrame = this.arrowRightBg;
          break;

         case EquipmentAndItemDialog_1.BG_TYPE_ARROW_DOWN:
          sprite.spriteFrame = this.arrowDownBg;
          this.layout.anchorX = 0;
          this.layout.anchorY = 0;
          break;

         case EquipmentAndItemDialog_1.BG_TYPE_ARROW_LEFT:
          sprite.spriteFrame = this.arrowLeftBg;
          this.layout.anchorX = 0;
          this.layout.anchorY = 1;
        }
      };
      EquipmentAndItemDialog.prototype.refreshEquipInfo = function(equipment) {
        this.layout.color = equipment.requireLevel > Logic_1.default.playerData.OilGoldData.level ? cc.Color.RED : this.layout.color.fromHEX(equipment.titlecolor);
        this.requireLevel.node.color = equipment.requireLevel > Logic_1.default.playerData.OilGoldData.level ? cc.Color.RED : cc.Color.WHITE;
        this.infoBase.node.active = true;
        this.requireLevel.node.active = true;
        this.info1.node.active = true;
        this.info2.node.active = true;
        this.info3.node.active = true;
        this.extraInfo.node.active = true;
        this.infoSuit1.node.active = true;
        this.infoSuit2.node.active = true;
        this.infoSuit3.node.active = true;
        this.requireLevel.string = "\u6240\u9700\u7b49\u7ea7\uff1a" + equipment.requireLevel;
        this.price.string = "\u4ef7\u683c\uff1a" + equipment.price;
        var prefix = AffixManager_1.default.QUALITY_NAMES[equipment.quality];
        for (var _i = 0, _a = equipment.affixs; _i < _a.length; _i++) {
          var affix = _a[_i];
          prefix += affix.name;
        }
        this.labelTitle.string = prefix + equipment.nameCn;
        this.labelTitle.node.color = this.labelTitle.node.color.fromHEX(equipment.titlecolor);
        this.infoBase.string = "" + equipment.infobase;
        this.infoBase.node.color = this.infoBase.node.color.fromHEX(equipment.infobasecolor);
        this.info1.string = equipment.info1;
        this.info1.node.color = this.info1.node.color.fromHEX(equipment.infocolor1);
        this.info2.string = equipment.info2;
        this.info2.node.color = this.info2.node.color.fromHEX(equipment.infocolor2);
        this.info3.string = equipment.info3;
        this.info3.node.color = this.info3.node.color.fromHEX(equipment.infocolor3);
        this.extraInfo.string = equipment.extraInfo;
        this.infoSuit1.string = equipment.suit1;
        this.infoSuit2.string = equipment.suit2;
        this.infoSuit3.string = equipment.suit3;
        this.infoSuit1.node.color = this.infoSuit1.node.color.fromHEX(equipment.suitcolor1);
        this.infoSuit2.node.color = this.infoSuit2.node.color.fromHEX(equipment.suitcolor2);
        this.infoSuit3.node.color = this.infoSuit3.node.color.fromHEX(equipment.suitcolor3);
        this.infoDesc.string = equipment.desc;
        this.infoBase.node.active = this.infoBase.string.length > 0;
        this.info1.node.active = this.info1.string.length > 0;
        this.info2.node.active = this.info2.string.length > 0;
        this.info3.node.active = this.info3.string.length > 0;
        this.extraInfo.node.active = this.extraInfo.string.length > 0;
        this.infoSuit1.node.active = this.infoSuit1.string.length > 0;
        this.infoSuit2.node.active = this.infoSuit2.string.length > 0;
        this.infoSuit3.node.active = this.infoSuit3.string.length > 0;
        this.count.string = "";
      };
      EquipmentAndItemDialog.prototype.showDialogEquipInfo = function(equipment, inventoryManager) {
        this.refreshEquipInfo(equipment);
        this.node.active = true;
        if (inventoryManager) {
          var count = 0;
          equipment.suitType.length > 0 && inventoryManager.suitMap[equipment.suitType] && (count = inventoryManager.suitMap[equipment.suitType].count);
          this.infoSuit1.node.opacity = count > 1 ? 255 : 50;
          this.infoSuit2.node.opacity = count > 2 ? 255 : 50;
          this.infoSuit3.node.opacity = count > 3 ? 255 : 50;
        }
      };
      EquipmentAndItemDialog.prototype.refreshItemInfo = function(item) {
        this.layout.color = cc.Color.WHITE;
        this.infoBase.node.active = true;
        this.info1.node.active = false;
        this.info2.node.active = false;
        this.info3.node.active = false;
        this.requireLevel.node.active = false;
        this.extraInfo.node.active = false;
        this.infoSuit1.node.active = false;
        this.infoSuit2.node.active = false;
        this.infoSuit3.node.active = false;
        this.labelTitle.string = "" + item.nameCn;
        var str = "\u4ef7\u683c\uff1a" + item.price + "\n" + item.info;
        item.solidSatiety > 0 && (str += "\n\u9971\u98df\u5ea6\uff1a" + item.solidSatiety);
        item.liquidSatiety > 0 && (str += "\n\u89e3\u6e34\u5ea6\uff1a" + item.liquidSatiety);
        this.infoBase.string = str;
        this.infoDesc.string = item.desc;
        this.count.string = item.count > 0 ? "\xd7" + item.count : "";
        this.labelTitle.node.color = this.labelTitle.node.color.fromHEX("#F4C021");
      };
      EquipmentAndItemDialog.prototype.showDialogItemInfo = function(item) {
        this.node.active = true;
        this.refreshItemInfo(item);
      };
      EquipmentAndItemDialog.prototype.showDialogNonPlayerInfo = function(data) {
        this.node.active = true;
        this.refreshNonPlayerInfo(data);
      };
      EquipmentAndItemDialog.prototype.refreshNonPlayerInfo = function(data) {
        this.layout.color = cc.Color.WHITE;
        this.infoBase.node.active = true;
        this.requireLevel.node.active = false;
        this.info1.node.active = false;
        this.info2.node.active = false;
        this.info3.node.active = false;
        this.extraInfo.node.active = false;
        this.infoSuit1.node.active = false;
        this.infoSuit2.node.active = false;
        this.infoSuit3.node.active = false;
        this.labelTitle.string = "" + data.nameCn;
        this.infoBase.string = "";
        this.infoDesc.string = "";
        this.count.string = "";
        this.labelTitle.node.color = this.labelTitle.node.color.fromHEX("#F4C021");
      };
      EquipmentAndItemDialog.prototype.showDialogFurnitureInfo = function(data) {
        this.node.active = true;
        this.refreshFurnitureInfo(data);
      };
      EquipmentAndItemDialog.prototype.refreshFurnitureInfo = function(data) {
        this.layout.color = cc.Color.WHITE;
        this.infoBase.node.active = true;
        this.info1.node.active = false;
        this.info2.node.active = false;
        this.info3.node.active = false;
        this.requireLevel.node.active = false;
        this.extraInfo.node.active = false;
        this.infoSuit1.node.active = false;
        this.infoSuit2.node.active = false;
        this.infoSuit3.node.active = false;
        this.labelTitle.string = "" + data.nameCn;
        this.infoBase.string = "\u4ef7\u683c\uff1a" + data.price + "\n" + data.info;
        this.infoDesc.string = "" + data.desc;
        this.count.string = "";
        this.labelTitle.node.color = this.labelTitle.node.color.fromHEX("#F4C021");
      };
      EquipmentAndItemDialog.prototype.showDialog = function(position, nonPlayerData, item, equipment, furniture, inventoryManager, bgType) {
        (bgType || 0 == bgType) && this.changeBgAndAnchor(bgType);
        this.node.position = position.clone();
        nonPlayerData ? this.showDialogNonPlayerInfo(nonPlayerData) : item ? this.showDialogItemInfo(item) : equipment ? this.showDialogEquipInfo(equipment, inventoryManager) : furniture && this.showDialogFurnitureInfo(furniture);
      };
      EquipmentAndItemDialog.prototype.hideDialog = function() {
        this.node.active = false;
      };
      var EquipmentAndItemDialog_1;
      EquipmentAndItemDialog.BG_TYPE_NONE = 0;
      EquipmentAndItemDialog.BG_TYPE_ARROW_NONE = 1;
      EquipmentAndItemDialog.BG_TYPE_ARROW_RIGHT = 2;
      EquipmentAndItemDialog.BG_TYPE_ARROW_DOWN = 3;
      EquipmentAndItemDialog.BG_TYPE_ARROW_LEFT = 4;
      __decorate([ property(cc.Node) ], EquipmentAndItemDialog.prototype, "layout", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "labelTitle", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "requireLevel", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "price", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoBase", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "info1", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "info2", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "info3", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "extraInfo", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoSuit1", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoSuit2", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoSuit3", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoDesc", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "count", void 0);
      __decorate([ property(cc.SpriteFrame) ], EquipmentAndItemDialog.prototype, "arrowNoneBg", void 0);
      __decorate([ property(cc.SpriteFrame) ], EquipmentAndItemDialog.prototype, "arrowRightBg", void 0);
      __decorate([ property(cc.SpriteFrame) ], EquipmentAndItemDialog.prototype, "arrowDownBg", void 0);
      __decorate([ property(cc.SpriteFrame) ], EquipmentAndItemDialog.prototype, "arrowLeftBg", void 0);
      EquipmentAndItemDialog = EquipmentAndItemDialog_1 = __decorate([ ccclass ], EquipmentAndItemDialog);
      return EquipmentAndItemDialog;
    }(cc.Component);
    exports.default = EquipmentAndItemDialog;
    cc._RF.pop();
  }, {
    "../../logic/Logic": "Logic",
    "../../manager/AffixManager": "AffixManager"
  } ],
  EquipmentData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5970exQi1ISK2QZd4VAwv9", "EquipmentData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __rest = this && this.__rest || function(s, e) {
      var t = {};
      for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
      if (null != s && "function" === typeof Object.getOwnPropertySymbols) for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
      return t;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CommonData_1 = require("./CommonData");
    var BaseData_1 = require("./BaseData");
    var TriggerData_1 = require("./TriggerData");
    var DataUtils_1 = require("../utils/DataUtils");
    var AffixData_1 = require("./AffixData");
    var EquipmentData = function(_super) {
      __extends(EquipmentData, _super);
      function EquipmentData() {
        var _this = _super.call(this) || this;
        _this.uuid = "";
        _this.id = 1e7;
        _this.nameCn = "";
        _this.nameEn = "";
        _this.quality = 0;
        _this.equipmetType = "empty";
        _this.equipmetTypeCn = "";
        _this.desc = "";
        _this.color = "#ffffff";
        _this.lightcolor = "#ffffff";
        _this.titlecolor = "#ffffff";
        _this.img = "emptyequipment";
        _this.mapKeyPos = "";
        _this.pos = cc.v3(0, 0);
        _this.requireLevel = 0;
        _this.stab = 0;
        _this.far = 0;
        _this.blunt = 0;
        _this.isLocked = 0;
        _this.isReflect = 0;
        _this.trouserslong = 0;
        _this.bulletType = "";
        _this.bulletSize = 0;
        _this.bulletArcExNum = 0;
        _this.bulletArcOffsetX = 0;
        _this.bulletLineExNum = 0;
        _this.bulletLineInterval = 0;
        _this.exBulletOffsetX = 0;
        _this.bulletExSpeed = 0;
        _this.showShooter = 0;
        _this.isHeavy = 0;
        _this.isLineAim = 0;
        _this.hideHair = 0;
        _this.exTriggers = [];
        _this.affixs = [];
        _this.ignoreTrap = 0;
        _this.remoteAudio = "";
        _this.exBeatBack = 0;
        _this.test = 0;
        _this.canUse = 0;
        _this.lastTime = 0;
        _this.cooldown = 0;
        _this.price = 0;
        _this.info1 = "";
        _this.info2 = "";
        _this.info3 = "";
        _this.extraInfo = "";
        _this.suitType = "";
        _this.suit1 = "";
        _this.suit2 = "";
        _this.suit3 = "";
        _this.infobase = "";
        _this.infocolor1 = "#ffffff";
        _this.infocolor2 = "#ffffff";
        _this.infocolor3 = "#ffffff";
        _this.suitcolor1 = "#ffffff";
        _this.suitcolor2 = "#ffffff";
        _this.suitcolor3 = "#ffffff";
        _this.infobasecolor = "#ffffff";
        _this.anim = 0;
        _this.common = new CommonData_1.default();
        _this.finalCommon = new CommonData_1.default();
        return _this;
      }
      Object.defineProperty(EquipmentData.prototype, "FinalCommon", {
        get: function() {
          return this.finalCommon;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(EquipmentData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      EquipmentData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        this.id = data.id ? data.id : 1e7;
        this.pos = data.pos ? cc.v3(data.pos.x, data.pos.y) : cc.v3(0, 0);
        this.common.valueCopy(data.common);
        this.color = data.color ? data.color : "#ffffff";
        this.titlecolor = data.titlecolor ? data.titlecolor : "#ffffff";
        this.lightcolor = data.lightcolor ? data.lightcolor : "#ffffff";
        this.img = data.img ? data.img : "emptyequipment";
        this.infocolor1 = data.infocolor1 ? data.infocolor1 : "#ffffff";
        this.infocolor2 = data.infocolor2 ? data.infocolor2 : "#ffffff";
        this.infocolor3 = data.infocolor3 ? data.infocolor3 : "#ffffff";
        this.suitcolor1 = data.suitcolor1 ? data.suitcolor1 : "#ffffff";
        this.suitcolor2 = data.suitcolor2 ? data.suitcolor2 : "#ffffff";
        this.suitcolor3 = data.suitcolor3 ? data.suitcolor3 : "#ffffff";
        this.infobasecolor = data.infobasecolor ? data.infobasecolor : "#ffffff";
        this.exTriggers = [];
        if (data.exTriggers) for (var _i = 0, _a = data.exTriggers; _i < _a.length; _i++) {
          var ex = _a[_i];
          var d = new TriggerData_1.default();
          d.valueCopy(ex);
          this.exTriggers.push(d);
        }
        this.affixs = DataUtils_1.default.copyListValue(data.affixs, function(arg0) {
          return new AffixData_1.default().valueCopy(arg0);
        });
        this.updateFinalCommon();
        return this;
      };
      EquipmentData.prototype.updateFinalCommon = function() {
        this.finalCommon = new CommonData_1.default();
        this.finalCommon.add(this.common);
        for (var _i = 0, _a = this.affixs; _i < _a.length; _i++) {
          var affix = _a[_i];
          this.finalCommon.add(affix.common);
        }
      };
      EquipmentData.prototype.clone = function() {
        var e = new EquipmentData();
        e.valueCopy(this);
        return e;
      };
      EquipmentData.prototype.add = function(data) {
        this.common = this.common.clone().add(data.common);
        this.ignoreTrap = this.ignoreTrap + data.ignoreTrap;
        this.exBeatBack = this.exBeatBack + data.exBeatBack;
        for (var _i = 0, _a = data.exTriggers; _i < _a.length; _i++) {
          var ex = _a[_i];
          this.exTriggers.push(ex);
        }
        for (var _b = 0, _c = data.affixs; _b < _c.length; _b++) {
          var affix = _c[_b];
          this.affixs.push(affix);
        }
        return this;
      };
      EquipmentData.prototype.toJSON = function() {
        var _a = this, finalCommon = _a.finalCommon, rest = __rest(_a, [ "finalCommon" ]);
        return rest;
      };
      return EquipmentData;
    }(BaseData_1.default);
    exports.default = EquipmentData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./AffixData": "AffixData",
    "./BaseData": "BaseData",
    "./CommonData": "CommonData",
    "./TriggerData": "TriggerData"
  } ],
  EquipmentDescData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7742jFusdGiIE+18obcC2k", "EquipmentDescData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CommonData_1 = require("./CommonData");
    var EquipmentDescData = function() {
      function EquipmentDescData() {
        this.nameCn = "";
        this.nameEn = "";
        this.titlecolor = "#ffffff";
        this.color = "#ffffff";
        this.prefix = "";
        this.level = 0;
        this.requireLevel = 0;
        this.common = new CommonData_1.default();
        this.info1 = "";
        this.info2 = "";
        this.info3 = "";
        this.suit1 = "";
        this.suit2 = "";
        this.suit3 = "";
        this.infobase = "";
        this.infocolor1 = "#ffffff";
        this.infocolor2 = "#ffffff";
        this.infocolor3 = "#ffffff";
        this.suitcolor1 = "#ffffff";
        this.suitcolor2 = "#ffffff";
        this.suitcolor3 = "#ffffff";
        this.infobasecolor = "#ffffff";
      }
      return EquipmentDescData;
    }();
    exports.default = EquipmentDescData;
    cc._RF.pop();
  }, {
    "./CommonData": "CommonData"
  } ],
  EquipmentManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "29c053rRnlLqrw1VkMXkISC", "EquipmentManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var EquipmentData_1 = require("../data/EquipmentData");
    var Equipment_1 = require("../equipment/Equipment");
    var IndexZ_1 = require("../utils/IndexZ");
    var BaseManager_1 = require("./BaseManager");
    var EventHelper_1 = require("../logic/EventHelper");
    var SuitData_1 = require("../data/SuitData");
    var DataUtils_1 = require("../utils/DataUtils");
    var AffixManager_1 = require("./AffixManager");
    var MapManager_1 = require("./MapManager");
    var AffixMapData_1 = require("../data/AffixMapData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EquipmentManager = function(_super) {
      __extends(EquipmentManager, _super);
      function EquipmentManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.equipment = null;
        _this.groundList = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      EquipmentManager_1 = EquipmentManager;
      EquipmentManager.prototype.clear = function() {
        this.groundList = [];
      };
      EquipmentManager.getRandomRange = function() {
        return 5 + Logic_1.default.chapterMaxIndex + Math.floor(Logic_1.default.playerData.OilGoldData.level / 5);
      };
      EquipmentManager.isTheEquipType = function(theType, types) {
        var isTheType = false;
        for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
          var t = types_1[_i];
          t == theType && (isTheType = true);
        }
        return isTheType;
      };
      EquipmentManager.getRandomQuality = function(chestQuality, rand4save) {
        var quality = 0;
        var rand = rand4save.rand();
        if (chestQuality && chestQuality > 0 && rand4save.getHalfChance()) return chestQuality;
        quality = rand < EquipmentManager_1.QUALITY_RATE[0] ? 0 : rand >= EquipmentManager_1.QUALITY_RATE[0] && rand < EquipmentManager_1.QUALITY_RATE[1] ? 1 : rand >= EquipmentManager_1.QUALITY_RATE[1] && rand < EquipmentManager_1.QUALITY_RATE[2] ? 2 : rand >= EquipmentManager_1.QUALITY_RATE[2] && rand < EquipmentManager_1.QUALITY_RATE[3] ? 3 : rand >= EquipmentManager_1.QUALITY_RATE[3] && rand < EquipmentManager_1.QUALITY_RATE[4] ? 4 : 5;
        chestQuality && chestQuality > 0 && quality < chestQuality && (quality = chestQuality);
        cc.log(rand);
        return quality;
      };
      EquipmentManager.prototype.getEquipment = function(equipType, pos, parent, equipData, chestQuality, shopTable) {
        var equipmentPrefab = cc.instantiate(this.equipment);
        equipmentPrefab.parent = parent;
        equipmentPrefab.position = pos;
        equipmentPrefab.zIndex = IndexZ_1.default.OVERHEAD;
        var equipment = equipmentPrefab.getComponent(Equipment_1.default);
        equipment.pos = Dungeon_1.default.getIndexInMap(pos);
        if (equipData) {
          if (shopTable) {
            equipment.shopTable = shopTable;
            shopTable.data.equipdata = equipData.clone();
          }
          equipment.refresh(equipData);
        } else {
          var data = EquipmentManager_1.getNewEquipData(equipType, false, chestQuality);
          if (shopTable) {
            equipment.shopTable = shopTable;
            shopTable.data.equipdata = data.clone();
            shopTable.data.price = data.price;
          }
          equipment.refresh(data);
        }
        this.groundList.push(equipment);
        return equipment;
      };
      EquipmentManager.getNewEquipData = function(equipType, isOriginal, chestQuality) {
        if (0 == equipType.length) return null;
        var data = new EquipmentData_1.default();
        data.valueCopy(Logic_1.default.equipments[equipType]);
        var tempid = data.img.substring(data.equipmetType.length);
        tempid.length > 0 && (data.id = data.id + parseInt(tempid));
        data.uuid = data.genNonDuplicateID();
        for (var _i = 0, _a = data.exTriggers; _i < _a.length; _i++) {
          var ex = _a[_i];
          ex.uuid = data.genNonDuplicateID();
        }
        if (!isOriginal) {
          var rand4save = Logic_1.default.mapManager.getCurrentRoomRandom4Save(MapManager_1.default.RANDOM_EQUIP);
          data.quality = EquipmentManager_1.getRandomQuality(chestQuality, rand4save);
          AffixManager_1.default.buildEquipmentAffixs(data, rand4save);
        }
        EquipmentManager_1.updateUpgradeEquipment(data);
        return data.clone();
      };
      EquipmentManager.updateUpgradeEquipment = function(data) {
        for (var _i = 0, _a = AffixManager_1.default.BASE_UPGRADE; _i < _a.length; _i++) {
          var i = _a[_i];
          var map = new AffixMapData_1.default().valueCopy(Logic_1.default.affixs[i]);
          data.Common[map.common] = data.Common[map.common] + data.Common[map.common] * map.factor * data.requireLevel;
        }
        for (var _b = 0, _c = data.affixs; _b < _c.length; _b++) {
          var affix = _c[_b];
          var map = new AffixMapData_1.default().valueCopy(Logic_1.default.affixs[affix.groupId]);
          AffixManager_1.default.buildAffixNameAndCommon(affix, map, data.requireLevel);
        }
        data.updateFinalCommon();
        data.price = EquipmentManager_1.getPrice(data);
        data.infobase = EquipmentManager_1.getInfoBase(data.Common);
        data.info1 = EquipmentManager_1.getInfo1(data.Common);
        data.info2 = EquipmentManager_1.getInfo2(data.Common, data);
        data.info3 = EquipmentManager_1.getInfo3(data.affixs);
        data.suit1 = EquipmentManager_1.getSuitDesc(data.suitType, 0);
        data.suit2 = EquipmentManager_1.getSuitDesc(data.suitType, 1);
        data.suit3 = EquipmentManager_1.getSuitDesc(data.suitType, 2);
        data.infobasecolor = "#fffff0";
        data.infocolor1 = "#9370DB";
        data.infocolor2 = "#87CEFA";
        data.infocolor3 = "#BC8F8F";
        data.suitcolor1 = "#FFD700";
        data.suitcolor2 = "#FFD700";
        data.suitcolor3 = "#FFD700";
      };
      EquipmentManager.upgradeEquipment = function(data) {
        if (data.requireLevel >= Logic_1.default.playerData.OilGoldData.level) return;
        data.requireLevel++;
        this.updateUpgradeEquipment(data);
      };
      EquipmentManager.getSuitDesc = function(suitType, suitIndex) {
        var suit = Logic_1.default.suits[suitType];
        if (!suit) return "";
        var data = new SuitData_1.default();
        data.valueCopy(Logic_1.default.suits[suitType]);
        if (suitIndex >= data.EquipList.length) return "";
        var info = "";
        var title = 0 == suitIndex ? data.nameCn + "\n" : "";
        var base = EquipmentManager_1.getInfoBase(data.EquipList[suitIndex].Common);
        var info1 = EquipmentManager_1.getInfo1(data.EquipList[suitIndex].Common);
        var info2 = EquipmentManager_1.getInfo2(data.EquipList[suitIndex].Common, data.EquipList[suitIndex]);
        info += base + " ";
        info += info1 + " ";
        info += info2 + " ";
        info += data.EquipList[suitIndex].extraInfo;
        return title + info.replace("\n", "");
      };
      EquipmentManager.getInfoBase = function(common) {
        var info = "";
        info += DataUtils_1.default.getinfoNum2String(0 == common.remoteDamage, "\u5b50\u5f39\u4f24\u5bb3", common.remoteDamage, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.remoteDamagePercent, "\u5b50\u5f39\u4f24\u5bb3" + (common.remoteDamagePercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.remoteDamagePercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.remoteCritRate, " \u5b50\u5f39\u66b4\u51fb\u7387", common.remoteCritRate, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.remoteCooldown, " \u88c5\u586b\u65f6\u95f4", common.remoteCooldown / 1e3, "s\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.remoteInterval, "\u5c04\u51fb\u95f4\u9694", common.remoteInterval / 1e3, "s\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.remoteAngle, "\u8bef\u5dee\u89d2\u5ea6", common.remoteAngle, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.maxAmmo, "\u5f39\u5939\u5bb9\u91cf" + (common.maxAmmo > 0 ? common.maxAmmo : "\u221e") + "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.ammoRecovery, "\u5f39\u5939\u56de\u590d", common.ammoRecovery, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.maxAmmoPercent, "\u5f39\u5939\u5bb9\u91cf" + (common.maxAmmoPercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.maxAmmoPercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.ammoRecoveryPercent, "\u5f39\u5939\u56de\u590d" + (common.ammoRecoveryPercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.ammoRecoveryPercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.damageMin, "\u653b\u51fb" + common.damageMin + " " + (0 != common.damageMax ? "\u6700\u5927\u653b\u51fb\u529b" + common.damageMax : "") + "\n");
        0 == common.damageMin && (info += DataUtils_1.default.getinfoNum2String(0 == common.damageMax, "\u6700\u5927\u653b\u51fb\u529b", common.damageMax, "\n"));
        info += DataUtils_1.default.getinfoNum2String(0 == common.damageMinPercent, "\u653b\u51fb" + (common.damageMin > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.damageMin, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.damageMaxPercent, "\u6700\u5927\u653b\u51fb\u529b" + (common.damageMaxPercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.damageMaxPercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.defence, "\u9632\u5fa1", common.defence, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.defencePercent, "\u9632\u5fa1" + (common.defencePercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.defencePercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.maxHealth, "\u751f\u547d", common.maxHealth, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.maxHealthPercent, "\u751f\u547d" + (common.maxHealthPercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.maxHealthPercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.maxDream, "\u68a6\u5883", common.maxDream, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.maxDreamPercent, "\u68a6\u5883" + (common.maxDreamPercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.maxDreamPercent, "%\n");
        info.length > 0 && -1 != info.lastIndexOf("\n") && (info = info.substring(0, info.lastIndexOf("\n")));
        info = info.replace("+-", "-");
        return info;
      };
      EquipmentManager.getInfo1 = function(common) {
        var info = "";
        info += DataUtils_1.default.getinfoNum2String(0 == common.criticalStrikeRate, "\u66b4\u51fb", common.criticalStrikeRate, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.lifeDrainRate, "\u5438\u8840", common.lifeDrainRate, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.damageBack, "\u80cc\u523a", common.damageBack, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.damageBackPercent, "\u80cc\u523a" + (common.damageBackPercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.damageBackPercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.moveSpeed, "\u79fb\u901f", common.moveSpeed, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.moveSpeedPercent, "\u79fb\u901f" + (common.moveSpeedPercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.moveSpeedPercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.attackSpeed, "\u653b\u901f" + common.attackSpeed + "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.attackSpeedPercent, "\u653b\u901f" + (common.attackSpeedPercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.attackSpeedPercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.dodgeRate, "\u95ea\u907f", common.dodgeRate, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.blockDamage, "\u5f39\u53cd\u4f24\u5bb3", common.blockDamage, "\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.blockPhysicalRate, "\u683c\u6321\u7269\u514d", common.blockPhysicalRate, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.blockMagicRate, "\u683c\u6321\u9b54\u514d", common.blockMagicRate, "%\n");
        info.length > 0 && -1 != info.lastIndexOf("\n") && (info = info.substring(0, info.lastIndexOf("\n")));
        info = info.replace("+-", "-");
        return info;
      };
      EquipmentManager.getInfo2 = function(common, data) {
        var info = "";
        info += data && data.isReflect > 0 ? "\u53cd\u5f39\u5b50\u5f39\n" : "";
        info += DataUtils_1.default.getinfoNum2String(0 == common.realDamage, "\u653b\u51fb\u9644\u52a0", common.realDamage, "\u70b9\u6d41\u8840\u4f24\u5bb3\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.realDamagePercent, "\u6d41\u8840\u4f24\u5bb3" + (common.realDamagePercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.realDamagePercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.realRate, "\u653b\u51fb\u6709", common.realRate, "%\u51e0\u7387\u91ca\u653e\u6d41\u8840\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.magicDamage, "\u653b\u51fb\u9644\u52a0", common.magicDamage, "\u70b9\u5143\u7d20\u4f24\u5bb3\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.magicDamagePercent, "\u5143\u7d20\u4f24\u5bb3" + (common.magicDamagePercent > 0 ? "\u63d0\u5347" : "\u964d\u4f4e"), common.magicDamagePercent, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.iceRate, "\u653b\u51fb\u6709", common.iceRate, "%\u51e0\u7387\u91ca\u653e\u51b0\u51bb\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.fireRate, "\u653b\u51fb\u6709", common.fireRate, "%\u51e0\u7387\u91ca\u653e\u71c3\u70e7\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.lighteningRate, "\u653b\u51fb\u6709", common.lighteningRate, "%\u51e0\u7387\u91ca\u653e\u95ea\u7535\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.toxicRate, "\u653b\u51fb\u6709", common.toxicRate, "%\u51e0\u7387\u91ca\u653e\u6bd2\u7d20\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.curseRate, "\u653b\u51fb\u6709", common.curseRate, "%\u51e0\u7387\u91ca\u653e\u8bc5\u5492\n");
        info += DataUtils_1.default.getinfoNum2String(0 == common.magicDefenceRate, "\u5143\u7d20\u6297\u6027", common.magicDefenceRate, "%\n");
        info.length > 0 && -1 != info.lastIndexOf("\n") && (info = info.substring(0, info.lastIndexOf("\n")));
        info = info.replace("+-", "-");
        return info;
      };
      EquipmentManager.getInfo3 = function(affixs) {
        var info = "";
        for (var _i = 0, affixs_1 = affixs; _i < affixs_1.length; _i++) {
          var affix = affixs_1[_i];
          info += affix.desc + "\n";
        }
        info.length > 0 && -1 != info.lastIndexOf("\n") && (info = info.substring(0, info.lastIndexOf("\n")));
        info = info.replace("+-", "-");
        return info;
      };
      EquipmentManager.prototype.start = function() {};
      EquipmentManager.getMixColor = function(color1, color2) {
        var c1 = cc.color().fromHEX(color1);
        var c2 = cc.color().fromHEX(color2);
        var c3 = cc.color();
        var r = c1.getR() + c2.getR();
        var g = c1.getG() + c2.getG();
        var b = c1.getB() + c2.getB();
        c3.setR(r > 255 ? 255 : r);
        c3.setG(g > 255 ? 255 : g);
        c3.setB(b > 255 ? 255 : b);
        return "#" + c3.toHEX("#rrggbb");
      };
      EquipmentManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      EquipmentManager.getPrice = function(data) {
        var price = 0;
        if (data.test > 0) return 0;
        var original = new EquipmentData_1.default();
        original.valueCopy(Logic_1.default.equipments[data.equipmetType]);
        price += original.price;
        price += 5 * data.FinalCommon.maxHealth;
        price += 10 * data.FinalCommon.maxDream;
        price += 10 * data.FinalCommon.damageMin;
        price += 5 * data.FinalCommon.damageMax;
        price += 5 * data.FinalCommon.damageBack;
        price += 3 * data.FinalCommon.criticalStrikeRate;
        price += 5 * data.FinalCommon.defence;
        price += data.FinalCommon.blockPhysicalRate / 2;
        price += data.FinalCommon.blockMagicRate / 2;
        price += 5 * data.FinalCommon.blockDamage;
        price += data.FinalCommon.lifeDrainRate;
        data.FinalCommon.moveSpeed < 0 ? price += -20 : price += 50 * data.FinalCommon.moveSpeed;
        data.FinalCommon.jumpSpeed < 0 ? price += -20 : price += 20 * data.FinalCommon.jumpSpeed;
        data.FinalCommon.jumpHeight < 0 ? price += -20 : price += 20 * data.FinalCommon.jumpHeight;
        data.FinalCommon.attackSpeed < 0 ? price += -10 : price += data.FinalCommon.attackSpeed;
        price += 2 * data.FinalCommon.dodgeRate;
        data.FinalCommon.remoteCooldown > 0 ? price += Math.floor(1e3 / data.FinalCommon.remoteCooldown * 20) : price += Math.floor(data.FinalCommon.remoteCooldown / 20);
        data.FinalCommon.remoteInterval > 0 ? price += Math.floor(1e3 / data.FinalCommon.remoteInterval * 20) : price += Math.floor(data.FinalCommon.remoteInterval / 20);
        price += 2 * data.FinalCommon.maxAmmo;
        price += 10 * data.FinalCommon.ammoRecovery;
        price += 30 * data.FinalCommon.remoteDamage;
        price += data.FinalCommon.remoteCritRate;
        price += 20 * data.FinalCommon.realDamage;
        price += 2 * data.FinalCommon.realRate;
        price += 10 * data.FinalCommon.magicDamage;
        price += data.FinalCommon.magicDefenceRate;
        price += data.FinalCommon.iceRate;
        price += 2 * data.FinalCommon.fireRate;
        price += data.FinalCommon.lighteningRate;
        price += 2 * data.FinalCommon.toxicRate;
        price += 2 * data.FinalCommon.curseRate;
        price += 10 * data.FinalCommon.maxHealthPercent;
        price += 10 * data.FinalCommon.maxDreamPercent;
        price += 10 * data.FinalCommon.maxAmmoPercent;
        price += 10 * data.FinalCommon.damageMinPercent;
        price += 10 * data.FinalCommon.damageMaxPercent;
        price += 10 * data.FinalCommon.damageBackPercent;
        price += 10 * data.FinalCommon.defencePercent;
        price += 10 * data.FinalCommon.moveSpeedPercent;
        price += 10 * data.FinalCommon.jumpSpeedPercent;
        price += 10 * data.FinalCommon.jumpHeightPercent;
        price += 10 * data.FinalCommon.attackSpeedPercent;
        price += 10 * data.FinalCommon.remoteDamagePercent;
        price += 10 * data.FinalCommon.realDamagePercent;
        price += 10 * data.FinalCommon.magicDamagePercent;
        return price > 0 ? Math.floor(price) : 0;
      };
      EquipmentManager.prototype.updateLogic = function(dt, player) {
        if (this.isCheckTimeDelay(dt)) {
          var distance = 200;
          var equip = null;
          for (var i = this.groundList.length - 1; i >= 0; i--) {
            var e = this.groundList[i];
            e.highLight(false);
            if (e.isTaken || !e.isValid) {
              this.groundList.splice(i, 1);
              continue;
            }
            var d = Logic_1.default.getDistanceNoSqrt(e.node.position, player.node.position);
            if (d < distance) {
              distance = d;
              equip = e;
            }
          }
          if (distance < 64 && equip) {
            equip.highLight(true);
            if (!this.lastGroundEquip || this.lastGroundEquip.uuid != equip.uuid) {
              cc.tween(equip.taketips).to(.2, {
                opacity: 255
              }).delay(1).to(.2, {
                opacity: 0
              }).start();
              EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_SHOW, {
                worldPos: equip.node.convertToWorldSpaceAR(cc.v3(64, 32)),
                equipData: equip.data
              });
            }
            this.lastGroundEquip = equip;
          } else {
            this.lastGroundEquip = null;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_HIDE);
          }
        }
      };
      var EquipmentManager_1;
      EquipmentManager.EMPTY = "emptyequipment";
      EquipmentManager.WEAPON_DINNERFORK = "weapon000";
      EquipmentManager.WEAPON_KNIFE = "weapon001";
      EquipmentManager.WEAPON_CHOPPER = "weapon002";
      EquipmentManager.WEAPON_HUGEBLADE = "weapon003";
      EquipmentManager.WEAPON_PITCHFORK = "weapon004";
      EquipmentManager.WEAPON_HUGEAXE = "weapon005";
      EquipmentManager.WEAPON_CROWBAR = "weapon006";
      EquipmentManager.WEAPON_KATANA = "weapon007";
      EquipmentManager.WEAPON_FRUITKNIFE = "weapon008";
      EquipmentManager.WEAPON_HAPPYFIRE = "weapon009";
      EquipmentManager.WEAPON_SADICE = "weapon010";
      EquipmentManager.WEAPON_EGYPTWAND = "weapon011";
      EquipmentManager.WEAPON_TOXICDAGGER = "weapon012";
      EquipmentManager.WEAPON_OLDROOTDAGGER = "weapon013";
      EquipmentManager.WEAPON_COOKCHOPPER = "weapon014";
      EquipmentManager.WEAPON_LIGHTENINGBLADE = "weapon015";
      EquipmentManager.WEAPON_JUNGLEFORK = "weapon016";
      EquipmentManager.WEAPON_KUNAI = "weapon017";
      EquipmentManager.WEAPON_DEATH = "weapon018";
      EquipmentManager.WEAPON_SHADOW = "weapon019";
      EquipmentManager.WEAPON_BLOOD = "weapon020";
      EquipmentManager.WEAPON_WINE_BOTTLE = "weapon032";
      EquipmentManager.WEAPON_WOOD_SWORD = "weapon039";
      EquipmentManager.WEAPON_WOOD_HAMMER = "weapon040";
      EquipmentManager.WEAPON_WOOD_DAGGER = "weapon041";
      EquipmentManager.WEAPON_WOOD_SPEAR = "weapon042";
      EquipmentManager.WEAPON_WOOD_LONG_STICK = "weapon043";
      EquipmentManager.WEAPON_WOOD_LONG_CROSS = "weapon044";
      EquipmentManager.WEAPON_BROKEN_GLASS = "weapon045";
      EquipmentManager.REMOTE_CROSSBOW = "remote001";
      EquipmentManager.REMOTE_LONGBOW = "remote002";
      EquipmentManager.REMOTE_WAND = "remote003";
      EquipmentManager.REMOTE_ALIENGUN = "remote004";
      EquipmentManager.REMOTE_WINCHESTER = "remote005";
      EquipmentManager.REMOTE_RPG = "remote006";
      EquipmentManager.REMOTE_SHURIKEN = "remote007";
      EquipmentManager.REMOTE_CHICKEN = "remote008";
      EquipmentManager.REMOTE_OLDGUN = "remote009";
      EquipmentManager.REMOTE_BASKETBALL = "remote011";
      EquipmentManager.SHIELD_CIRCLE = "shield000";
      EquipmentManager.SHIELD_CARDOOR = "shield001";
      EquipmentManager.SHIELD_POLICE = "shield002";
      EquipmentManager.CLOTHES_VEST = "clothes001";
      EquipmentManager.CLOTHES_SHIRT = "clothes002";
      EquipmentManager.CLOTHES_NAVY = "clothes003";
      EquipmentManager.CLOTHES_PIRATE = "clothes004";
      EquipmentManager.CLOTHES_BUCKET = "clothes005";
      EquipmentManager.CLOTHES_REDROBE = "clothes006";
      EquipmentManager.CLOTHES_WHITEROBE = "clothes007";
      EquipmentManager.CLOTHES_GENTLEMAN = "clothes008";
      EquipmentManager.CLOTHES_RADIATION = "clothes009";
      EquipmentManager.CLOTHES_JUNGLE = "clothes010";
      EquipmentManager.CLOTHES_PHARAOH = "clothes011";
      EquipmentManager.CLOTHES_KNIGHT = "clothes012";
      EquipmentManager.CLOTHES_DEATH = "clothes013";
      EquipmentManager.CLOTHES_ENERGY = "clothes014";
      EquipmentManager.CLOTHES_CAI = "clothes026";
      EquipmentManager.HELMET_BUCKETHAT = "helmet002";
      EquipmentManager.HELMET_PIRATEHAT = "helmet003";
      EquipmentManager.HELMET_REDHAT = "helmet004";
      EquipmentManager.HELMET_WHITEHAT = "helmet005";
      EquipmentManager.HELMET_PHARAOH = "helmet006";
      EquipmentManager.HELMET_CAT = "helmet007";
      EquipmentManager.HELMET_CHIEF = "helmet008";
      EquipmentManager.HELMET_HORUS = "helmet009";
      EquipmentManager.HELMET_GENTLEMAN = "helmet010";
      EquipmentManager.HELMET_CHICKEN = "helmet011";
      EquipmentManager.HELMET_DUCK = "helmet012";
      EquipmentManager.HELMET_GOOSE = "helmet013";
      EquipmentManager.HELMET_RADIATION = "helmet014";
      EquipmentManager.HELMET_JUNGLE = "helmet015";
      EquipmentManager.HELMET_ANUBIS = "helmet016";
      EquipmentManager.HELMET_KNIGHT = "helmet017";
      EquipmentManager.HELMET_DEATH = "helmet018";
      EquipmentManager.HELMET_ENERY = "helmet019";
      EquipmentManager.CLOAK_WARRIOR = "cloak001";
      EquipmentManager.TROUSERS_LONG = "trousers001";
      EquipmentManager.TROUSERS_SHORT = "trousers002";
      EquipmentManager.TROUSERS_RADIATION = "trousers003";
      EquipmentManager.TROUSERS_JUNGLE = "trousers004";
      EquipmentManager.TROUSERS_PHARAOH = "trousers005";
      EquipmentManager.TROUSERS_KNIGHT = "trousers006";
      EquipmentManager.TROUSERS_DEATH = "trousers007";
      EquipmentManager.TROUSERS_ENERGY = "trousers008";
      EquipmentManager.GLOVES_WARRIOR = "gloves001";
      EquipmentManager.GLOVES_DEMON = "gloves002";
      EquipmentManager.GLOVES_BLOODCRAW = "gloves003";
      EquipmentManager.GLOVES_RADIATION = "gloves004";
      EquipmentManager.GLOVES_JUNGLE = "gloves005";
      EquipmentManager.GLOVES_PHARAOH = "gloves006";
      EquipmentManager.GLOVES_KNIGHT = "gloves007";
      EquipmentManager.GLOVES_DEATH = "gloves008";
      EquipmentManager.GLOVES_ENERGY = "gloves009";
      EquipmentManager.SHOES_WARRIOR = "shoes001";
      EquipmentManager.SHOES_SKATEBOARD = "shoes002";
      EquipmentManager.SHOES_DEMON = "shoes003";
      EquipmentManager.SHOES_RADIATION = "shoes004";
      EquipmentManager.SHOES_JUNGLE = "shoes005";
      EquipmentManager.SHOES_PHARAOH = "shoes006";
      EquipmentManager.SHOES_KNIGHT = "shoes007";
      EquipmentManager.SHOES_DEATH = "shoes008";
      EquipmentManager.SHOES_ENERGY = "shoes009";
      EquipmentManager.COLOR_CRITICALSTRIKE = "#DC143C";
      EquipmentManager.COLOR_ATTACKSPPED = "#5F9EA0";
      EquipmentManager.COLOR_MOVESPEED = "#00BFFF";
      EquipmentManager.COLOR_DODGE = "#FFFF00";
      EquipmentManager.COLOR_STABLE = "#DEB887";
      EquipmentManager.COLOR_POWERFUL = "#ADFF2F";
      EquipmentManager.COLOR_HEALTHY = "#90EE90";
      EquipmentManager.COLOR_LIFEDRAIN = "#FFC0CB";
      EquipmentManager.COLOR_BACK = "#9370DB";
      EquipmentManager.COLOR_DREAM = "#800080";
      EquipmentManager.GREEN_AFFIX_RATE = [ .5, .85, .95, 1 ];
      EquipmentManager.BLUE_AFFIX_RATE = [ .4, .7, .9, 1 ];
      EquipmentManager.PURPLE_AFFIX_RATE = [ .3, .6, .8, 1 ];
      EquipmentManager.YELLOW_AFFIX_RATE = [ .2, .4, .7, 1 ];
      EquipmentManager.ORANGE_AFFIX_RATE = [ .1, .2, .5, 1 ];
      EquipmentManager.QUALITY_RATE = [ .81, .91, .96, .99, .999 ];
      EquipmentManager.QUALITY_WHITE = 0;
      EquipmentManager.QUALITY_GREEN = 1;
      EquipmentManager.QUALITY_BLUE = 2;
      EquipmentManager.QUALITY_PURPLE = 3;
      EquipmentManager.QUALITY_GOLD = 4;
      EquipmentManager.QUALITY_ORANGE = 5;
      EquipmentManager.QUALITY_RED = 6;
      __decorate([ property(cc.Prefab) ], EquipmentManager.prototype, "equipment", void 0);
      EquipmentManager = EquipmentManager_1 = __decorate([ ccclass ], EquipmentManager);
      return EquipmentManager;
    }(BaseManager_1.default);
    exports.default = EquipmentManager;
    cc._RF.pop();
  }, {
    "../data/AffixMapData": "AffixMapData",
    "../data/EquipmentData": "EquipmentData",
    "../data/SuitData": "SuitData",
    "../equipment/Equipment": "Equipment",
    "../logic/Dungeon": "Dungeon",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../utils/DataUtils": "DataUtils",
    "../utils/IndexZ": "IndexZ",
    "./AffixManager": "AffixManager",
    "./BaseManager": "BaseManager",
    "./MapManager": "MapManager"
  } ],
  EquipmentStringData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92198gP7T1AvKS5hasHWtsb", "EquipmentStringData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var EquipmentStringData = function() {
      function EquipmentStringData() {
        this.nameCn = "";
        this.nameEn = "";
        this.equipmetType = "empty";
        this.desc = "";
        this.img = "emptyequipment";
        this.maxHealth = 0;
        this.maxDream = 0;
        this.damageMin = 0;
        this.damageMax = 0;
        this.criticalStrikeRate = 0;
        this.defence = 0;
        this.lifeDrain = 0;
        this.damageBack = 0;
        this.moveSpeed = 0;
        this.attackSpeed = 0;
        this.jumpSpeed = 0;
        this.jumpHeight = 0;
        this.dodge = 0;
        this.remoteCooldown = 0;
        this.remoteDamage = 0;
        this.remoteCritRate = 0;
        this.remoteInterval = 0;
        this.realDamage = 0;
        this.realRate = 0;
        this.magicDamage = 0;
        this.magicDefence = 0;
        this.iceRate = 0;
        this.fireRate = 0;
        this.lighteningRate = 0;
        this.toxicRate = 0;
        this.curseRate = 0;
        this.stab = 0;
        this.far = 0;
        this.trouserslong = 0;
        this.bulletType = "";
        this.bulletSize = 0;
        this.bulletArcExNum = 0;
        this.bulletLineExNum = 0;
        this.bulletLineInterval = 0;
        this.showShooter = 0;
        this.isHeavy = 0;
        this.isLineAim = 0;
        this.hideHair = 0;
        this.bulletExSpeed = 0;
      }
      EquipmentStringData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.img = data.img ? data.img : "emptyequipment";
      };
      EquipmentStringData.prototype.valueCopySelf = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.img = data.img ? data.img : "emptyequipment";
      };
      EquipmentStringData.prototype.clone = function() {
        var e = new EquipmentStringData();
        e.valueCopySelf(this);
        return e;
      };
      return EquipmentStringData;
    }();
    exports.default = EquipmentStringData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  Equipment: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46d3aM6X2VOCJtzuWiGZaWE", "Equipment");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("./../ecs/component/MoveComponent");
    var Logic_1 = require("../logic/Logic");
    var EquipmentData_1 = require("../data/EquipmentData");
    var EventHelper_1 = require("../logic/EventHelper");
    var Dungeon_1 = require("../logic/Dungeon");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Achievement_1 = require("../logic/Achievement");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var BaseNodeComponent_1 = require("../base/BaseNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Equipment = function(_super) {
      __extends(Equipment, _super);
      function Equipment() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.root = null;
        _this.sprite = null;
        _this.shadow = null;
        _this.data = new EquipmentData_1.default();
        _this.pos = cc.v3(0, 0);
        _this.isTaken = false;
        return _this;
      }
      Equipment.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.isTaken = false;
        this.taketips = this.sprite.node.getChildByName("taketips");
        this.entity.NodeRender.root = this.root;
      };
      Equipment.prototype.refresh = function(data) {
        this.data.valueCopy(data);
        var spriteFrame = Logic_1.default.spriteFrameRes(this.data.img);
        data.equipmetType == InventoryManager_1.default.TROUSERS && (spriteFrame = 1 == data.trouserslong ? Logic_1.default.spriteFrameRes("trousers000") : spriteFrame);
        this.sprite.node.scale = 4;
        this.shadow.node.scale = 4;
        if (data.equipmetType == InventoryManager_1.default.CLOTHES) spriteFrame = Logic_1.default.spriteFrameRes(this.data.img + "anim0"); else if (data.equipmetType == InventoryManager_1.default.HELMET) spriteFrame = Logic_1.default.spriteFrameRes(this.data.img + "anim0"); else if (data.equipmetType == InventoryManager_1.default.REMOTE) spriteFrame = Logic_1.default.spriteFrameRes(this.data.img + "anim0"); else if (data.equipmetType == InventoryManager_1.default.WEAPON) {
          this.sprite.node.scale = 3;
          this.shadow.node.scale = 3;
        }
        this.sprite.spriteFrame = spriteFrame;
        this.sprite.node.width = spriteFrame.getOriginalSize().width;
        this.sprite.node.height = spriteFrame.getOriginalSize().height;
        this.shadow.spriteFrame = this.sprite.spriteFrame;
        var color = cc.color(255, 255, 255).fromHEX(this.data.color);
        this.sprite.node.color = color;
        this.mat = this.sprite.getMaterial(0);
        this.mat.setProperty("textureSizeWidth", spriteFrame.getTexture().width * this.sprite.node.scaleX);
        this.mat.setProperty("textureSizeHeight", spriteFrame.getTexture().height * this.sprite.node.scaleY);
        this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
        this.highLight(false);
        if ("remote" == data.equipmetType) {
          this.sprite.node.width = this.sprite.node.width / 2;
          this.sprite.node.height = this.sprite.node.height / 2;
        }
        this.shadow.node.width = this.sprite.node.width;
        this.shadow.node.height = this.sprite.node.height;
        this.data.pos = Dungeon_1.default.getIndexInMap(this.node.position.clone());
        this.entity.Move.linearVelocityZ = 6;
        this.shadow.node.angle = this.sprite.node.angle;
        this.entity.Transform.position = this.node.position.clone();
      };
      Equipment.prototype.fly = function(flag) {
        if (flag) {
          this.entity.Move.gravity = 0;
          this.entity.Transform.z <= 0 ? this.entity.Move.linearVelocityZ = 4 : this.entity.Transform.z > 32 && (this.entity.Move.linearVelocityZ = 0);
        } else this.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY;
      };
      Equipment.prototype.highLight = function(isHigh) {
        this.mat || (this.mat = this.sprite.getComponent(cc.Sprite).getMaterial(0));
        this.fly(isHigh);
        this.mat.setProperty("openOutline", isHigh ? 1 : 0);
      };
      Equipment.prototype.start = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      Equipment.prototype.onEnable = function() {};
      Equipment.prototype.taken = function(isReplace) {
        if (this.isTaken) return false;
        if (!this.shopTable) {
          this._taken(isReplace);
          return true;
        }
        if (Logic_1.default.coins >= this.data.price) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            count: -this.data.price
          });
          var arr = [ AudioPlayer_1.default.COIN, AudioPlayer_1.default.COIN1, AudioPlayer_1.default.COIN2 ];
          AudioPlayer_1.default.play(arr[Logic_1.default.getRandomNum(0, arr.length - 1)]);
          this.shopTable.sale(true);
          this._taken(isReplace);
          return true;
        }
        return false;
      };
      Equipment.prototype._taken = function(isReplace) {
        var _this = this;
        this.isTaken = true;
        this.anim.play("EquipmentTaken");
        Achievement_1.default.addEquipsAchievement(this.data.img);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_CHANGEEQUIPMENT, {
          equipmetType: this.data.equipmetType,
          equipData: this.data,
          isReplace: isReplace
        });
        this.node.getChildByName("shadow").active = false;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_HIDE);
        this.scheduleOnce(function() {
          _this.node && _this.destroyEntityNode();
        }, 1);
        var currequipments = Logic_1.default.mapManager.getCurrentMapEquipments();
        var newlist = new Array();
        if (currequipments) for (var _i = 0, currequipments_1 = currequipments; _i < currequipments_1.length; _i++) {
          var temp = currequipments_1[_i];
          temp.uuid && temp.uuid != this.data.uuid && newlist.push(temp);
        }
        Logic_1.default.mapManager.setCurrentEquipmentsArr(newlist);
        AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_UP);
      };
      __decorate([ property(cc.Node) ], Equipment.prototype, "root", void 0);
      __decorate([ property(cc.Sprite) ], Equipment.prototype, "sprite", void 0);
      __decorate([ property(cc.Sprite) ], Equipment.prototype, "shadow", void 0);
      Equipment = __decorate([ ccclass ], Equipment);
      return Equipment;
    }(BaseNodeComponent_1.default);
    exports.default = Equipment;
    cc._RF.pop();
  }, {
    "../base/BaseNodeComponent": "BaseNodeComponent",
    "../data/EquipmentData": "EquipmentData",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/InventoryManager": "InventoryManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "./../ecs/component/MoveComponent": "MoveComponent"
  } ],
  EventHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4128feS00VLAILEQToHDge5", "EventHelper");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventHelper = void 0;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EventHelper = function(_super) {
      __extends(EventHelper, _super);
      function EventHelper() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      EventHelper.emit = function(key, customDetail) {
        customDetail ? cc.director.emit(key, {
          detail: customDetail
        }) : cc.director.emit(key);
      };
      EventHelper.on = function(key, callback) {
        cc.director.on(key, function(event) {
          callback(event ? event.detail : {});
        });
      };
      EventHelper.off = function(key) {
        cc.director.off(key);
      };
      EventHelper.PLAYER_MOVE = "PLAYER_MOVE";
      EventHelper.PLAYER_ROTATE = "PLAYER_ROTATE";
      EventHelper.PLAYER_TRIGGER = "PLAYER_TRIGGER";
      EventHelper.PLAYER_USEITEM = "PLAYER_USEITEM";
      EventHelper.USEITEM_KEYBOARD = "USEITEM_KEYBOARD";
      EventHelper.KEYBOARD_INTERACT = "KEYBOARD_INTERACT";
      EventHelper.KEYBOARD_MOVE = "KEYBOARD_MOVE";
      EventHelper.PLAYER_SKILL = "PLAYER_SKILL";
      EventHelper.PLAYER_SKILL1 = "PLAYER_SKILL1";
      EventHelper.PLAYER_ATTACK = "PLAYER_ATTACK";
      EventHelper.PLAYER_REMOTEATTACK = "PLAYER_REMOTEATTACK";
      EventHelper.PLAYER_REMOTEATTACK_CANCEL = "PLAYER_REMOTEATTACK_CANCEL";
      EventHelper.PLAYER_JUMP = "PLAYER_JUMP";
      EventHelper.PLAYER_JUMP_CANCEL = "PLAYER_JUMP_CANCEL";
      EventHelper.PLAYER_DASH = "PLAYER_DASH";
      EventHelper.PLAYER_GETITEM = "PLAYER_GETITEM";
      EventHelper.PLAYER_USEDREAM = "PLAYER_USEDREAM";
      EventHelper.PLAYER_CHANGEITEM = "PLAYER_CHANGEITEM";
      EventHelper.PLAYER_CHANGEEQUIPMENT = "PLAYER_CHANGEEQUIPMENT";
      EventHelper.PLAYER_EQUIPMENT_REFRESH = "PLAYER_EQUIPMENT_REFRESH";
      EventHelper.PLAYER_EQUIPMENT_REFRESH_ALL = "PLAYER_EQUIPMENT_REFRESH_ALL";
      EventHelper.PLAYER_ITEM_REFRESH = "PLAYER_ITEM_REFRESH";
      EventHelper.PLAYER_STATUSUPDATE = "PLAYER_STATUSUPDATE";
      EventHelper.PLAYER_UPDATE_OILGOLD_DATA = "PLAYER_UPDATE_OILGOLD_DATA";
      EventHelper.PLAYER_SHOW_FLASHLIGHT = "PLAYER_SHOW_FLASHLIGHT";
      EventHelper.INVENTORY_CHANGEITEM = "INVENTORY_CHANGEITEM";
      EventHelper.CHANGE_MINIMAP = "CHANGE_MINIMAP";
      EventHelper.OPEN_MINIMAP = "OPEN_MINIMAP";
      EventHelper.HUD_ADD_COIN = "HUD_ADD_COIN";
      EventHelper.HUD_ADD_REAL_COIN = "HUD_ADD_REAL_COIN";
      EventHelper.HUD_ADD_OILGOLD = "HUD_ADD_OILGOLD";
      EventHelper.HUD_LOSE_OILGOLD = "HUD_LOSE_OILGOLD";
      EventHelper.HUD_OILGOLD_LOSE_SHOW = "HUD_OILGOLD_LOSE_SHOW";
      EventHelper.HUD_OILGOLD_RECOVERY_SHOW = "HUD_OILGOLD_RECOVERY_SHOW";
      EventHelper.HUD_STOP_COUNTTIME = "HUD_STOP_COUNTTIME";
      EventHelper.HUD_LIGHT_CONTROLLER = "HUD_LIGHT_CONTROLLER";
      EventHelper.HUD_CHANGE_CONTROLLER_SHIELD = "HUD_CHANGE_CONTROLLER_SHIELD";
      EventHelper.HUD_CONTROLLER_COOLDOWN = "HUD_CONTROLLER_COOLDOWN";
      EventHelper.HUD_CONTROLLER_UPDATE_GAMEPAD = "HUD_CONTROLLER_UPDATE_GAMEPAD";
      EventHelper.HUD_CONTROLLER_INTERACT_SHOW = "HUD_CONTROLLER_INTERACT_SHOW";
      EventHelper.HUD_CONTROLLER_REMOTE_SHOW = "HUD_CONTROLLER_REMOTE_SHOW";
      EventHelper.HUD_DAMAGE_CORNER_SHOW = "HUD_DAMAGE_CORNER_SHOW";
      EventHelper.HUD_GROUND_EQUIPMENT_INFO_SHOW = "HUD_GROUND_EQUIPMENT_INFO_SHOW";
      EventHelper.HUD_GROUND_EQUIPMENT_INFO_HIDE = "HUD_GROUND_EQUIPMENT_INFO_HIDE";
      EventHelper.HUD_GROUND_ITEM_INFO_SHOW = "HUD_GROUND_ITEM_INFO_SHOW";
      EventHelper.HUD_GROUND_ITEM_INFO_HIDE = "HUD_GROUND_ITEM_INFO_HIDE";
      EventHelper.HUD_FADE_IN = "HUD_FADE_IN";
      EventHelper.HUD_FADE_OUT = "HUD_FADE_OUT";
      EventHelper.HUD_COMPLETE_SHOW = "HUD_COMPLETE_SHOW";
      EventHelper.HUD_DOLL_MACHINE_DIALOG = "HUD_DOLL_MACHINE_DIALOG";
      EventHelper.HUD_QUEST_BOARD_SHOW = "HUD_QUEST_BOARD_SHOW";
      EventHelper.HUD_METAL_TALENT_SHOW = "HUD_METAL_TALENT_SHOW";
      EventHelper.HUD_MART_SHELVES_DIALOG = "HUD_MART_SHELVES_DIALOG";
      EventHelper.HUD_MART_SHELVES_DIALOG_PAY = "HUD_MART_SHELVES_DIALOG_BUY";
      EventHelper.HUD_CAMERA_ZOOM_IN = "HUD_CAMERA_ZOOM_IN";
      EventHelper.HUD_CAMERA_ZOOM_OUT = "HUD_CAMERA_ZOOM_OUT";
      EventHelper.HUD_CAMERA_ZOOM_IN_LOCK = "HUD_CAMERA_ZOOM_IN_LOCK";
      EventHelper.HUD_CANCEL_OR_PAUSE = "HUD_CANCEL_OR_PAUSE";
      EventHelper.HUD_DIALOGUE_SKIP = "HUD_DIALOGUE_SKIP";
      EventHelper.HUD_DIALOGUE_BUTTON = "HUD_DIALOGUE_BUTTON";
      EventHelper.DUNGEON_SETEQUIPMENT = "DUNGEON_SETEQUIPMENT";
      EventHelper.DUNGEON_ADD_ITEM = "DUNGEON_ADD_ITEM";
      EventHelper.DUNGEON_SHAKEONCE = "DUNGEON_SHAKEONCE";
      EventHelper.DUNGEON_ADD_COIN = "DUNGEON_ADD_COIN";
      EventHelper.DUNGEON_ADD_OILGOLD = "DUNGEON_ADD_OILGOLD";
      EventHelper.DUNGEON_ADD_FALLSTONE = "DUNGEON_ADD_FALLSTONE";
      EventHelper.DUNGEON_ADD_LIGHTENINGFALL = "DUNGEON_ADD_LIGHTENINGFALL";
      EventHelper.DUNGEON_ADD_FLOORPAPER = "DUNGEON_ADD_FLOORPAPER";
      EventHelper.DUNGEON_WALL_COLLIDER = "DUNGEON_WALL_COLLIDER";
      EventHelper.DUNGEON_DISAPPEAR = "DUNGEON_DISAPPEAR";
      EventHelper.MONSTER_STATUSUPDATE = "MONSTER_STATUSUPDATE";
      EventHelper.BOSS_ADDSLIME = "BOSS_ADDSLIME";
      EventHelper.HUD_UPDATE_PLAYER_INFODIALOG = "HUD_UPDATE_PLAYER_INFO_DIALOG";
      EventHelper.HUD_UPDATE_PLAYER_HEALTHBAR = "HUD_UPDATE_PLAYER_HEALTHBAR";
      EventHelper.HUD_UPDATE_PLAYER_DREAMBAR = "HUD_UPDATE_PLAYER_DREAMBAR";
      EventHelper.HUD_SHAKE_PLAYER_DREAMBAR = "HUD_SHAKE_PLAYER_DREAMBAR";
      EventHelper.HUD_UPDATE_PLAYER_LIFE_BAR = "HUD_UPDATE_PLAYER_LIFE_BAR";
      EventHelper.HUD_UPDATE_PLAYER_AMMO = "HUD_UPDATE_PLAYER_AMMO";
      EventHelper.HUD_INVENTORY_SHOW = "HUD_INVENTORY_SHOW";
      EventHelper.HUD_CELLPHONE_SHOW = "HUD_CELLPHONE_SHOW";
      EventHelper.HUD_ACTION_SETTING_DIALOG = "HUD_ACTION_SETTING_DIALOG";
      EventHelper.HUD_INVENTORY_SELECT_UPDATE = "HUD_INVENTORY_SELECT_UPDATE";
      EventHelper.HUD_INVENTORY_ITEM_UPDATE = "HUD_INVENTORY_ITEM_UPDATE";
      EventHelper.HUD_INVENTORY_EQUIP_UPDATE = "HUD_INVENTORY_EQUIP_UPDATE";
      EventHelper.HUD_INVENTORY_ALL_UPDATE = "HUD_INVENTORY_ALL_UPDATE";
      EventHelper.HUD_TOAST = "HUD_TOAST";
      EventHelper.HUD_TIME_TICK = "HUD_TIME_TICK";
      EventHelper.HUD_DIALOGUE_SHOW = "HUD_DIALOGUE_SHOW";
      EventHelper.HUD_FURNITURE_REFRESH = "HUD_FURNITURE_REFRESH";
      EventHelper.HUD_SHOW_FLOATING_LABEL = "HUD_SHOW_FLOATING_LABEL";
      EventHelper.POOL_DESTROY_LABEL = "POOL_DESTROY_LABEL";
      EventHelper.TALENT_TREE_UPDATE = "TALENT_TREE_UPDATE";
      EventHelper.TALENT_TREE_SELECT = "TALENT_TREE_SELECT";
      EventHelper.PLAY_AUDIO = "PLAY_AUDIO";
      EventHelper.STOP_ALL_AUDIO_EFFECT = "STOP_ALL_AUDIO_EFFECT";
      EventHelper.STOP_AUDIO_EFFECT = "STOP_AUDIO_EFFECT";
      EventHelper.CAMERA_SHAKE = "CAMERA_SHAKE";
      EventHelper.CAMERA_LOOK = "CAMERA_LOOK";
      EventHelper.CHUNK_LOAD = "CHUNK_LOAD";
      EventHelper.POOL_DESTORY_WALKSMOKE = "destorysmoke";
      EventHelper.POOL_DESTORY_BLOCKLIGHT = "destoryblocklight";
      EventHelper.POOL_DESTORY_FIREGHLOST = "destoryfireghost";
      EventHelper.POOL_DESTORY_REFLECTLIGHT = "destoryreflectlight";
      EventHelper.POOL_DESTORY_HIT_BLOOD = "POOL_DESTORY_HIT_BLOOD";
      EventHelper.TEST_SHOW_NODE_COUNT = "TEST_SHOW_NODE_COUNT";
      EventHelper.SETTINGS_LOW_POWER = "SETTINGS_LOW_POWER";
      EventHelper.LOADING_ICON = "LOADING_ICON";
      EventHelper.EDITOR_SHOW_SPRITE_INFO = "EDITOR_SHOW_SPRITE_INFO";
      EventHelper.DIALOG_ALERT_SHOW = "DIALOG_ALERT_SHOW";
      EventHelper.GAMEOVER_WAKEUP = "GAMEOVER_WAKEUP";
      EventHelper.SELECT_METAL_TALENT = "SELECT_METAL_TALENT";
      EventHelper.DELETE_SAVE_SLOT = "DELETE_SAVE_SLOT";
      EventHelper.eventHandler = new cc.Node();
      EventHelper = __decorate([ ccclass ], EventHelper);
      return EventHelper;
    }(cc.Component);
    exports.EventHelper = EventHelper;
    cc._RF.pop();
  }, {} ],
  EvilEye: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4c205mgXoJFWIARHvt3fCFo", "EvilEye");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Shooter_1 = require("../logic/Shooter");
    var DamageData_1 = require("../data/DamageData");
    var StatusManager_1 = require("../manager/StatusManager");
    var Boss_1 = require("./Boss");
    var NextStep_1 = require("../utils/NextStep");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var Logic_1 = require("../logic/Logic");
    var CCollider_1 = require("../collider/CCollider");
    var MoveComponent_1 = require("../ecs/component/MoveComponent");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EvilEye = function(_super) {
      __extends(EvilEye, _super);
      function EvilEye() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.viceEyesFireSkill = new NextStep_1.default();
        _this.mainEyesFireSkill = new NextStep_1.default();
        _this.dashSkill = new NextStep_1.default();
        _this.isHalfBlood = false;
        _this.actionTimeDelay = 0;
        return _this;
      }
      EvilEye.prototype.init = function(type) {
        throw new Error("Method not implemented.");
      };
      EvilEye.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.graphics = this.getComponent(cc.Graphics);
        this.anim = this.getComponent(cc.Animation);
        this.shooter = this.node.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.viceEyes = new Array();
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb1").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb2").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb3").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb4").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb5").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb6").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceShooters = new Array();
        this.viceShooters.push(this.node.getChildByName("Shooter1").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter2").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter3").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter4").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter5").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter6").getComponent(Shooter_1.default));
        var from = FromData_1.default.getClone(this.actorName(), "evileyeeye", this.node.position);
        this.shooter.from.valueCopy(from);
        for (var _i = 0, _a = this.viceShooters; _i < _a.length; _i++) {
          var vice = _a[_i];
          vice.from.valueCopy(from);
        }
      };
      EvilEye.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      EvilEye.prototype.takeDamage = function(damage) {
        var _this = this;
        if (this.sc.isDied || !this.sc.isShow || this.anim.getAnimationState("EvilEyeHurt").isPlaying) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        var isHalf = this.data.currentHealth < this.data.Common.MaxHealth / 2;
        if (isHalf && !this.isHalfBlood) {
          this.isHalfBlood = true;
          this.anim.play("EvilEyeHurt");
          this.scheduleOnce(function() {
            _this.anim.play("EvilEyeBite");
          }, 2.5);
        }
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      EvilEye.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        cc.tween(this.node).to(3, {
          opacity: 0
        }).start();
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      EvilEye.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.entity.Transform.position = Dungeon_1.default.fixOuterMap(this.entity.Transform.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position);
        this.changeZIndex();
        var pos = this.getMovePos();
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        var isHalf = this.data.currentHealth < this.data.Common.MaxHealth / 2;
        playerDis < 100 && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
        this.mainEyesFireSkill.IsExcuting || !isHalf || this.anim.getAnimationState("EvilEyeHurt").isPlaying || this.dash();
        this.fireWithViceEyes(isHalf);
        this.dashSkill.IsExcuting || this.fireWithMainEye();
        if (!pos.equals(cc.Vec3.ZERO) && playerDis > 100 && !this.shooter.isAiming && !this.dashSkill.IsExcuting) {
          pos = pos.normalizeSelf();
          this.move(pos, 1);
        }
      };
      EvilEye.prototype.getMovePos = function() {
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos);
        pos.y += 32;
        pos = pos.sub(this.entity.Transform.position);
        var h = pos.x;
        return pos;
      };
      EvilEye.prototype.fireWithViceEyes = function(isHalf) {
        var _this = this;
        this.viceEyesFireSkill.next(function() {
          _this.viceEyesFireSkill.IsExcuting = true;
          _this.scheduleOnce(function() {
            _this.viceEyesFireSkill.IsExcuting = false;
          }, 2);
          isHalf ? _this.schedule(function() {
            _this.fireViceBullet();
          }, .5, 2, 0) : _this.fireViceBullet();
        }, 2);
      };
      EvilEye.prototype.fireViceBullet = function() {
        for (var i = 0; i < this.viceShooters.length; i++) {
          var p = this.viceEyes[i].convertToWorldSpaceAR(cc.v3(0, 0));
          p = this.node.convertToNodeSpaceAR(p);
          this.viceShooters[i].node.setPosition(p);
          var pos = this.entity.Transform.position.clone().add(p);
          var hv = this.dungeon.player.getCenterPosition().sub(pos);
          if (!hv.equals(cc.Vec3.ZERO)) {
            this.viceShooters[i].setHv(cc.v2(hv).normalize());
            this.fireShooter(this.viceShooters[i], "bullet101", 0, 0, 0, cc.v3(0, 0));
          }
        }
      };
      EvilEye.prototype.fireWithMainEye = function() {
        var _this = this;
        this.mainEyesFireSkill.next(function() {
          _this.mainEyesFireSkill.IsExcuting = true;
          _this.scheduleOnce(function() {
            _this.mainEyesFireSkill.IsExcuting = false;
          }, 3);
          var p = _this.shooter.node.convertToWorldSpaceAR(cc.v3(0, 0));
          p = _this.node.convertToNodeSpaceAR(p);
          _this.shooter.node.setPosition(p);
          var pos = _this.entity.Transform.position.clone().add(p);
          var hv = _this.dungeon.player.getCenterPosition().sub(pos);
          if (!hv.equals(cc.Vec3.ZERO)) {
            _this.shooter.setHv(cc.v2(hv).normalize());
            _this.shooter.data.isLineAim = 1;
            _this.fireShooter(_this.shooter, "laser003", 0, 3, 0, cc.v3(0, 0));
            _this.anim.playAdditive("EvilEyeStone");
          }
        }, 7);
      };
      EvilEye.prototype.dash = function() {
        var _this = this;
        this.dashSkill.next(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          _this.dashSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("EvilEyeBite");
          var pos = _this.getMovePos();
          var h = pos.x;
          var v = pos.y;
          var movement = cc.v2(h, v);
          movement = movement.normalize().mul(Utils_1.default.getDashSpeedByDistance(1500 / MoveComponent_1.MoveComponent.PIXELS_PER_UNIT, _this.entity.Move.damping));
          _this.entity.Move.linearVelocity = movement;
          _this.scheduleOnce(function() {
            _this.dashSkill.IsExcuting = false;
          }, 2);
        }, 3, true);
      };
      EvilEye.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle, defaultPos) {
        shooter.dungeon = this.dungeon;
        shooter.actor = this;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.shootBaseHeight = 32;
        shooter.fireBullet(angle, defaultPos);
      };
      EvilEye.prototype.showBoss = function() {
        this.sc.isShow = true;
        this.entity.NodeRender.node = this.node;
        this.entity.Move.damping = 6;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      EvilEye.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      EvilEye.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.sc.isDied && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
      };
      EvilEye.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.mul(speed);
        this.entity.Move.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.changeZIndex();
      };
      EvilEye.prototype.onColliderEnter = function(other, self) {
        if (self.tag == CCollider_1.default.TAG.BOSS_HIT) {
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
          if (target && this.dashSkill.IsExcuting) {
            var d = new DamageData_1.default();
            d.physicalDamage = 15;
            var from = FromData_1.default.getClone(this.actorName(), "evileyeeye", this.node.position);
            target.takeDamage(d, from, this) && target.addStatus(StatusManager_1.default.BLEEDING, from);
          }
        }
      };
      EvilEye.prototype.actorName = function() {
        return "\u90aa\u773c";
      };
      EvilEye = __decorate([ ccclass ], EvilEye);
      return EvilEye;
    }(Boss_1.default);
    exports.default = EvilEye;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../ecs/component/MoveComponent": "MoveComponent",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/NextStep": "NextStep",
    "../utils/Utils": "Utils",
    "./Boss": "Boss"
  } ],
  ExitData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "76ad8SnMG9NL67Zj9BTup1j", "ExitData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var DataUtils_1 = require("../utils/DataUtils");
    var ExitData = function() {
      function ExitData() {
        this.fromRoomPos = cc.v3(0, 0);
        this.fromPos = cc.v3(0, 0);
        this.fromZ = 0;
        this.fromChapter = 0;
        this.fromLevel = 0;
        this.toChapter = 0;
        this.toLevel = 0;
        this.toPos = cc.v3(0, 0);
        this.toPosZ = 0;
        this.res = "";
      }
      ExitData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.fromRoomPos = data.fromRoomPos ? cc.v3(data.fromRoomPos.x, data.fromRoomPos.y) : cc.v3(0, 0);
        this.toPos = data.toPos ? cc.v3(data.toPos.x, data.toPos.y) : cc.v3(0, 0);
        this.fromPos = data.fromPos ? cc.v3(data.fromPos.x, data.fromPos.y) : cc.v3(0, 0);
      };
      ExitData.prototype.clone = function() {
        var data = new ExitData();
        data.valueCopy(this);
        return data;
      };
      ExitData.getRealWorldExitDataFromDream = function(fromChapter, fromLevel) {
        var data = new ExitData();
        data.fromChapter = fromChapter;
        data.fromLevel = fromLevel;
        data.toChapter = Logic_1.default.CHAPTER099;
        data.toLevel = 0;
        data.toPos = cc.v3(6, 16);
        return data;
      };
      ExitData.getDreamExitDataFromReal = function(chapterdata) {
        var data = new ExitData();
        data.fromChapter = Logic_1.default.CHAPTER099;
        data.fromLevel = 0;
        data.toChapter = chapterdata ? chapterdata.chapter : Logic_1.default.savePoinitData.chapter;
        data.toLevel = chapterdata ? chapterdata.level : Logic_1.default.savePoinitData.level;
        data.toPos = chapterdata ? cc.v3(chapterdata.x, chapterdata.y) : cc.v3(Logic_1.default.savePoinitData.x, Logic_1.default.savePoinitData.y);
        return data;
      };
      ExitData.getRealWorldExitDataFirst = function() {
        var data = new ExitData();
        data.fromChapter = Logic_1.default.CHAPTER099;
        data.fromLevel = 6;
        data.toChapter = Logic_1.default.CHAPTER099;
        data.toLevel = 6;
        data.toPos = cc.v3(0, 0);
        return data;
      };
      return ExitData;
    }();
    exports.default = ExitData;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "../utils/DataUtils": "DataUtils"
  } ],
  ExitDoor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "479c1KI84hEjY9sMAyTcSmq", "ExitDoor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Player_1 = require("../logic/Player");
    var Logic_1 = require("../logic/Logic");
    var Building_1 = require("./Building");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var ExitData_1 = require("../data/ExitData");
    var Dungeon_1 = require("../logic/Dungeon");
    var CCollider_1 = require("../collider/CCollider");
    var Random_1 = require("../utils/Random");
    var Vehicle_1 = require("./Vehicle");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ExitDoor = function(_super) {
      __extends(ExitDoor, _super);
      function ExitDoor() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.root = null;
        _this.isOpen = false;
        _this.isDoor = true;
        _this.bgSprite = null;
        _this.closeSprite = null;
        _this.openSprite = null;
        _this.spriteNode = null;
        _this.roof = null;
        _this.isBackToUpLevel = false;
        _this.dir = 0;
        _this.exitData = new ExitData_1.default();
        _this.type = 0;
        return _this;
      }
      ExitDoor.prototype.init = function(type, dir, exitData) {
        this.dir = dir;
        this.type = type;
        this.exitData.valueCopy(exitData);
        this.isBackToUpLevel = 2 == type || 3 == type;
        var collider = this.node.getComponent(CCollider_1.default);
        if (this.type % 2 == 1) {
          this.node.opacity = 0;
          this.roof.node.opacity = 0;
          var indexPos = this.data.defaultPos.clone();
          collider.setSize(cc.size(128, 128));
          collider.offset = cc.v2(0, 0);
          0 == this.dir && (indexPos.y += 1);
          1 == this.dir && (indexPos.y -= 1);
          2 == this.dir && (indexPos.x -= 1);
          3 == this.dir && (indexPos.x += 1);
          this.entity.Transform.position = Dungeon_1.default.getPosInMap(indexPos);
          this.node.position = this.entity.Transform.position.clone();
        }
        this.root.y = this.exitData.fromZ;
        this.entity.Transform.z = this.exitData.fromZ;
        var label = this.roof.getComponentInChildren(cc.Label);
        label.string = "-" + Logic_1.default.worldLoader.getLevelData(this.exitData.toChapter, this.exitData.toLevel).name;
      };
      ExitDoor.prototype.onLoad = function() {
        this.spriteNode = this.root.getChildByName("sprite");
        this.bgSprite = this.root.getChildByName("sprite").getChildByName("exitbg").getComponent(cc.Sprite);
        this.closeSprite = this.root.getChildByName("sprite").getChildByName("exitopen").getComponent(cc.Sprite);
        this.openSprite = this.root.getChildByName("sprite").getChildByName("exitclose").getComponent(cc.Sprite);
        this.roof = this.root.getChildByName("roof").getComponent(cc.Sprite);
        this.openSprite.node.zIndex = IndexZ_1.default.FLOOR;
        this.closeSprite.node.zIndex = IndexZ_1.default.ACTOR;
      };
      ExitDoor.prototype.start = function() {
        var _a;
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          this.changeRes("exit000");
          break;

         case Logic_1.default.CHAPTER01:
          this.changeRes("exit001");
          break;

         case Logic_1.default.CHAPTER02:
          this.changeRes("exit002");
          break;

         case Logic_1.default.CHAPTER03:
          this.changeRes("exit003");
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          this.changeRes("exit004");
          break;

         case Logic_1.default.CHAPTER099:
          this.changeRes("exit000");
        }
        (null === (_a = this.exitData.res) || void 0 === _a ? void 0 : _a.length) > 0 && this.changeRes(this.exitData.res);
        var subfix = "anim000";
        var spriteframe = Logic_1.default.spriteFrameRes("roof" + Logic_1.default.worldLoader.getCurrentLevelData().wallRes1 + subfix);
        (this.dir % 4 > 1 || this.dir > 7) && (spriteframe = null);
        this.type > 1 && (this.roof.getComponentInChildren(cc.Label).node.parent.active = false);
        this.roof.spriteFrame = spriteframe;
        this.roof.node.parent = this.node.parent;
        var p = this.root.convertToWorldSpaceAR(cc.v3(0, 128));
        this.roof.node.position = this.roof.node.parent.convertToNodeSpaceAR(p);
        this.roof.node.zIndex = IndexZ_1.default.OVERHEAD;
        this.roof.node.opacity = 255;
        this.dir % 4;
      };
      ExitDoor.prototype.openGate = function(immediately) {
        if (this.isOpen) return;
        this.isOpen = true;
        this.getComponent(CCollider_1.default).sensor = true;
        cc.tween(this.closeSprite.node).to(immediately ? 0 : 1, {
          opacity: 0
        }).start();
      };
      ExitDoor.prototype.closeGate = function(immediately) {
        if (!this.isOpen) return;
        this.isOpen = false;
        this.getComponent(CCollider_1.default).sensor = false;
        cc.tween(this.closeSprite.node).to(immediately ? 0 : 1, {
          opacity: 255
        }).start();
      };
      ExitDoor.prototype.onColliderEnter = function(other, self) {
        if (self.sensor && other.tag == CCollider_1.default.TAG.PLAYER) {
          var player = other.node.getComponent(Player_1.default);
          this.loadingNextLevel(player);
        } else if (self.sensor && other.tag == CCollider_1.default.TAG.VEHICLE) {
          var v = other.node.getComponent(Vehicle_1.default);
          v.dungeon && v.isPlayerIn && this.loadingNextLevel(v.dungeon.player);
        }
      };
      ExitDoor.prototype.loadingNextLevel = function(player) {
        if (player && this.isOpen) {
          this.isOpen = false;
          AudioPlayer_1.default.play(AudioPlayer_1.default.EXIT);
          Logic_1.default.loadingNextLevel(this.exitData);
        }
      };
      ExitDoor.prototype.changeRes = function(resName) {
        this.bgSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName + "bg");
        this.openSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName + "open");
        this.closeSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName + "close");
      };
      ExitDoor.prototype.disappear = function() {
        _super.prototype.disappear.call(this);
        cc.tween(this.roof.node).to(.5 + Random_1.default.rand(), {
          scaleY: 0
        }).start();
      };
      __decorate([ property(cc.Node) ], ExitDoor.prototype, "root", void 0);
      ExitDoor = __decorate([ ccclass ], ExitDoor);
      return ExitDoor;
    }(Building_1.default);
    exports.default = ExitDoor;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/ExitData": "ExitData",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Player": "Player",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/Random": "Random",
    "./Building": "Building",
    "./Vehicle": "Vehicle"
  } ],
  FallStone: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "606fd8guh5COozFgkmej6tZ", "FallStone");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var Building_1 = require("./Building");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FallStone = function(_super) {
      __extends(FallStone, _super);
      function FallStone() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isFall = false;
        _this.isAuto = true;
        _this.isFalling = false;
        return _this;
      }
      FallStone.prototype.onLoad = function() {
        this.isFall = false;
      };
      FallStone.prototype.fall = function(withFire) {
        if (withFire) {
          this.node.getChildByName("stone").getChildByName("fire").active = true;
          this.node.getChildByName("stone").color = cc.color(253, 122, 37);
        }
        this.anim = this.getComponent(cc.Animation);
        this.anim.play();
        this.isFalling = true;
      };
      FallStone.prototype.FallFinish = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
        this.isFall = true;
        this.scheduleOnce(function() {
          _this.isFall = false;
        }, .1);
        this.scheduleOnce(function() {
          _this.node && _this.destroyEntityNode();
        }, 2);
      };
      FallStone.prototype.onColliderEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        !target || this.isAuto || this.isFalling || this.fall();
      };
      FallStone.prototype.onColliderStay = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isFall && this.isValid) {
          this.isFall = false;
          target.takeDamage(new DamageData_1.default(2), FromData_1.default.getClone("\u843d\u77f3", "stone", this.node.position));
        }
        var monster = other.getComponent(NonPlayer_1.default);
        if (monster && this.isFall && this.isValid) {
          this.isFall = false;
          monster.takeDamage(new DamageData_1.default(2), FromData_1.default.getClone("\u843d\u77f3", "stone", this.node.position));
        }
      };
      FallStone = __decorate([ ccclass ], FallStone);
      return FallStone;
    }(Building_1.default);
    exports.default = FallStone;
    cc._RF.pop();
  }, {
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/NonPlayer": "NonPlayer",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  FileOperator: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87076LYz2VBBrD7MLVZ9/v3", "FileOperator");
    "use strict";
    var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = this && this.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FileOperator = function() {
      function FileOperator(showLog) {
        this.showLog = false;
        this.showLog = showLog;
      }
      FileOperator.prototype.clear = function() {
        this.fileHandle = null;
      };
      FileOperator.prototype.getFileHandle = function() {
        return this.fileHandle;
      };
      FileOperator.prototype.getCurrentFileName = function() {
        return this.fileHandle ? this.fileHandle.name : "";
      };
      FileOperator.prototype.openJsonFile = function() {
        var _this = this;
        return new Promise(function(resolve, reject) {
          window.showOpenFilePicker({
            multiple: false,
            excludeAcceptAllOption: true,
            types: [ {
              description: "\u9009\u62e9JSON\u6587\u4ef6",
              accept: {
                "application/json": [ ".json" ]
              }
            } ]
          }).then(function(fileHandles) {
            var fh = fileHandles[0];
            _this.fileHandle = fh;
            fh.getFile().then(function(file) {
              _this.showLog && console.log("file:", file);
              var reader = new FileReader();
              reader.onload = function(e) {
                _this.showLog && console.log("\u6253\u5f00\u6587\u4ef6: " + fh.name + "\n\u6587\u4ef6\u5185\u5bb9:\n\n%c" + e.target.result, "color:#35ccbf;fontsize: 20px;");
                resolve("" + e.target.result);
              };
              reader.readAsText(file);
            });
          }).catch(function(err) {
            if ("AbortError" == err.name) _this.showLog && console.log("\u53d6\u6d88\u4fdd\u5b58"); else {
              console.error("showOpenFilePicker\u6253\u5f00\u5931\u8d25: " + _this.fileHandle.name);
              _this.uploadForBrowser().then(function(value) {
                resolve(value);
              }).catch(function(err) {
                reject(err);
              });
            }
          });
        });
      };
      FileOperator.prototype.saveJsonFile = function(textToWrite, fileNameToSaveAs) {
        return __awaiter(this, void 0, void 0, function() {
          var _this = this;
          return __generator(this, function(_a) {
            return [ 2, new Promise(function(resolve, reject) {
              return __awaiter(_this, void 0, void 0, function() {
                var writableStream, error_1;
                return __generator(this, function(_a) {
                  switch (_a.label) {
                   case 0:
                    _a.trys.push([ 0, 4, , 5 ]);
                    if (!this.fileHandle) {
                      this.newFileWrite(textToWrite, fileNameToSaveAs).then(function(value) {
                        resolve(value);
                      }).catch(function(err) {
                        reject(err);
                      });
                      return [ 2 ];
                    }
                    return [ 4, this.fileHandle.createWritable() ];

                   case 1:
                    writableStream = _a.sent();
                    return [ 4, writableStream.write(textToWrite) ];

                   case 2:
                    _a.sent();
                    return [ 4, writableStream.close() ];

                   case 3:
                    _a.sent();
                    resolve("\u4fdd\u5b58\u6210\u529f: " + this.fileHandle.name);
                    this.showLog && console.log("\u4fdd\u5b58\u6210\u529f: " + this.fileHandle.name);
                    return [ 3, 5 ];

                   case 4:
                    error_1 = _a.sent();
                    if ("AbortError" == error_1.name) this.showLog && console.log("\u53d6\u6d88\u4fdd\u5b58"); else {
                      console.error("\u4fdd\u5b58\u5931\u8d25writableStream: " + this.fileHandle.name);
                      this.newFileWrite(textToWrite, fileNameToSaveAs).then(function(value) {
                        resolve(value);
                      }).catch(function(err) {
                        reject(err);
                      });
                    }
                    return [ 3, 5 ];

                   case 5:
                    return [ 2 ];
                  }
                });
              });
            }) ];
          });
        });
      };
      FileOperator.prototype.newFileWrite = function(textToWrite, fileNameToSaveAs) {
        var _this = this;
        return new Promise(function(resolve, reject) {
          return __awaiter(_this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              window.showSaveFilePicker({
                suggestedName: fileNameToSaveAs,
                types: [ {
                  description: "\u4fdd\u5b58JSON\u6587\u4ef6",
                  accept: {
                    "application/json": [ ".json" ]
                  }
                } ]
              }).then(function(writeHandle) {
                return __awaiter(_this, void 0, void 0, function() {
                  var writableStream;
                  return __generator(this, function(_a) {
                    switch (_a.label) {
                     case 0:
                      this.fileHandle = writeHandle;
                      return [ 4, writeHandle.createWritable() ];

                     case 1:
                      writableStream = _a.sent();
                      return [ 4, writableStream.write(textToWrite) ];

                     case 2:
                      _a.sent();
                      return [ 4, writableStream.close() ];

                     case 3:
                      _a.sent();
                      this.showLog && console.log("\u4fdd\u5b58\u6210\u529f: " + writeHandle.name);
                      resolve("\u4fdd\u5b58\u6210\u529f: " + writeHandle.name);
                      return [ 2 ];
                    }
                  });
                });
              }).catch(function(err) {
                if ("AbortError" == err.name) _this.showLog && console.log("\u53d6\u6d88\u4fdd\u5b58"); else {
                  console.error("showSaveFilePicker\u4fdd\u5b58\u5931\u8d25,\u5c1d\u8bd5\u4e0b\u8f7d\u65b9\u5f0f: ", err);
                  _this.saveForBrowser(textToWrite, fileNameToSaveAs).then(function(msg) {
                    resolve(msg);
                  }).catch(function(err) {
                    reject(err);
                  });
                }
              });
              return [ 2 ];
            });
          });
        });
      };
      FileOperator.prototype.uploadForBrowser = function() {
        return new Promise(function(resolve, reject) {
          try {
            var input = document.createElement("input");
            input.type = "file";
            input.onchange = function(e) {
              var files = e.target["files"];
              if (0 == files.length) return;
              var fileReader = new FileReader();
              fileReader.onload = function(e) {
                var dataURL = e.target.result;
                resolve("" + dataURL);
              };
              fileReader.readAsText(files[0], "utf-8");
            };
            input.click();
          } catch (error) {
            reject(error);
          }
        });
      };
      FileOperator.prototype.saveForBrowser = function(textToWrite, fileNameToSaveAs) {
        return new Promise(function(resolve, reject) {
          try {
            var textFileAsBlob = new Blob([ textToWrite ], {
              type: "text"
            });
            var downloadLink = document.createElement("a");
            downloadLink.download = fileNameToSaveAs;
            downloadLink.innerHTML = "Download File";
            if (null != window.webkitURL) downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob); else {
              downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
              downloadLink.onclick = function() {
                downloadLink && document.body.removeChild(downloadLink);
              };
              downloadLink.style.display = "none";
              document.body.appendChild(downloadLink);
            }
            downloadLink.click();
            resolve("\u4e0b\u8f7d\u6210\u529f: " + fileNameToSaveAs);
          } catch (error) {
            reject(error);
          }
        });
      };
      return FileOperator;
    }();
    exports.default = FileOperator;
    cc._RF.pop();
  }, {} ],
  FireGhost: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "63945bTi0VH3q4BT6nw6+98", "FireGhost");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var StatusManager_1 = require("../manager/StatusManager");
    var FromData_1 = require("../data/FromData");
    var Logic_1 = require("../logic/Logic");
    var IndexZ_1 = require("../utils/IndexZ");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FireGhost = function(_super) {
      __extends(FireGhost, _super);
      function FireGhost() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isRotating = false;
        _this.isAttacking = false;
        _this.angleOffset = 0;
        _this.angle = 0;
        _this.isDied = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      FireGhost.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      FireGhost.prototype.start = function() {};
      FireGhost.prototype.init = function(player, angleOffset) {
        var _this = this;
        this.player = player;
        this.node.setPosition(player.node.position.clone());
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
        this.angleOffset = angleOffset;
        this.scheduleOnce(function() {
          _this.node.setPosition(_this.getPlayerFarPosition(_this.player, 50, _this.angle + _this.angleOffset));
          _this.isRotating = true;
        }, .2);
      };
      FireGhost.prototype.getPlayerFarPosition = function(player, distance, angleOffset) {
        var hv = player.Hv.clone();
        var pos = cc.v3(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180).mul(distance));
        return player.node.position.clone().addSelf(cc.v3(8, 48).addSelf(pos));
      };
      FireGhost.prototype.onColliderEnter = function(other, self) {
        if (self.radius > 0 && this.isAttacking && this.isRotating) {
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other, true);
          if (target) {
            this.isAttacking = false;
            this.attacking(other.node);
          }
        }
      };
      FireGhost.prototype.attacking = function(attackTarget) {
        if (!attackTarget) return;
        var damage = new DamageData_1.default();
        var status = StatusManager_1.default.BURNING;
        var d = 1;
        damage.magicDamage = d;
        var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget, true);
        if (target && !target.sc.isDied) {
          target.takeDamage(damage, FromData_1.default.getClone("\u9b3c\u706b", "", this.node.position));
          target.addStatus(status, new FromData_1.default());
        }
        this.isDied = true;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.POOL_DESTORY_FIREGHLOST, {
          targetNode: this.node
        });
      };
      FireGhost.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      FireGhost.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        if (this.isCheckTimeDelay(dt)) {
          var pos = this.hasNearEnemy();
          if (pos.equals(cc.Vec3.ZERO)) {
            if (this.isRotating && this.player) {
              this.angle += 5;
              this.angle > 360 && (this.angle = 0);
              pos = this.getPlayerFarPosition(this.player, 50, this.angle + this.angleOffset);
              var ps = pos.sub(this.node.position).normalizeSelf().mulSelf(4);
              this.entity.Move.linearVelocity = cc.v2(ps.x, ps.y);
            }
          } else {
            this.isAttacking = true;
            var ps = pos.normalizeSelf().mulSelf(8);
            this.entity.Move.linearVelocity = cc.v2(ps.x, ps.y);
          }
        }
      };
      FireGhost.prototype.hasNearEnemy = function() {
        if (!this.player || !this.isRotating) return cc.Vec3.ZERO;
        return ActorUtils_1.default.getDirectionFromNearestEnemy(this.player.node.position, false, this.player.dungeon, false, 400);
      };
      FireGhost = __decorate([ ccclass ], FireGhost);
      return FireGhost;
    }(BaseColliderComponent_1.default);
    exports.default = FireGhost;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/IndexZ": "IndexZ"
  } ],
  FloatingLabelData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8f27wN8tBPFpbFtomBoQo+", "FloatingLabelData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var FloatingLabelData = function(_super) {
      __extends(FloatingLabelData, _super);
      function FloatingLabelData() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.worldPos = cc.v3(0, 0);
        _this.d = 0;
        _this.isDodge = false;
        _this.isMiss = false;
        _this.isCritical = false;
        _this.isBlock = false;
        _this.isBackStab = false;
        _this.isAvoidDeath = false;
        return _this;
      }
      FloatingLabelData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.worldPos = data.worldPos ? cc.v3(data.worldPos.x, data.worldPos.y) : cc.v3(0, 0);
      };
      FloatingLabelData.prototype.clone = function() {
        var e = new FloatingLabelData();
        e.valueCopy(this);
        return e;
      };
      FloatingLabelData.create = function(worldPos, d, isDodge, isMiss, isCritical, isBlock, isBackStab, isAvoidDeath) {
        var data = new FloatingLabelData();
        data.worldPos = cc.v3(worldPos.x, worldPos.y);
        data.d = d;
        data.isDodge = isDodge;
        data.isMiss = isMiss;
        data.isCritical = isCritical;
        data.isBlock = isBlock;
        data.isBackStab = isBackStab;
        data.isAvoidDeath = isAvoidDeath;
        return data;
      };
      return FloatingLabelData;
    }(BaseData_1.default);
    exports.default = FloatingLabelData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData"
  } ],
  FloatingLabelManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70be4qc1pdJGpxF0vSkBTb1", "FloatingLabelManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var FloatingLabel_1 = require("../ui/FloatingLabel");
    var IndexZ_1 = require("../utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloatinglabelManager = function(_super) {
      __extends(FloatinglabelManager, _super);
      function FloatinglabelManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        return _this;
      }
      FloatinglabelManager.prototype.clear = function() {};
      FloatinglabelManager.prototype.onLoad = function() {
        var _this = this;
        this.labelPool = new cc.NodePool();
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.POOL_DESTROY_LABEL, function(detail) {
          _this.node && _this.destroyLabel(detail.labelNode);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_SHOW_FLOATING_LABEL, function(detail) {
          _this.node && _this.showFloatFont(detail.data);
        });
      };
      FloatinglabelManager.prototype.showFloatFont = function(data) {
        var flabel = this.getFloaingLabel(data.worldPos);
        data.isDodge ? flabel.showDoge() : data.isMiss ? flabel.showMiss() : data.isBlock ? flabel.showBlock() : data.isAvoidDeath ? flabel.showAvoidDeath() : 0 != data.d && data.d ? flabel.showDamage(-data.d, data.isCritical, data.isBackStab) : flabel.hideLabel();
      };
      FloatinglabelManager.prototype.getFloaingLabel = function(worldPos) {
        var p = this.node.convertToNodeSpaceAR(worldPos);
        var labelPrefab = null;
        this.labelPool.size() > 0 && (labelPrefab = this.labelPool.get());
        labelPrefab && !labelPrefab.active || (labelPrefab = cc.instantiate(this.label));
        labelPrefab.parent = this.node;
        labelPrefab.position = p;
        var label = labelPrefab.getComponent(FloatingLabel_1.default);
        labelPrefab.zIndex = IndexZ_1.default.UI;
        labelPrefab.opacity = 255;
        labelPrefab.active = true;
        return label;
      };
      FloatinglabelManager.prototype.destroyLabel = function(labelNode) {
        labelNode.active = false;
        this.labelPool && this.labelPool.put(labelNode);
      };
      FloatinglabelManager.prototype.start = function() {};
      __decorate([ property(cc.Prefab) ], FloatinglabelManager.prototype, "label", void 0);
      FloatinglabelManager = __decorate([ ccclass ], FloatinglabelManager);
      return FloatinglabelManager;
    }(cc.Component);
    exports.default = FloatinglabelManager;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper",
    "../ui/FloatingLabel": "FloatingLabel",
    "../utils/IndexZ": "IndexZ"
  } ],
  FloatingLabel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cae6fbyiQhHL5VOrhWuq2d6", "FloatingLabel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloatingLabel = function(_super) {
      __extends(FloatingLabel, _super);
      function FloatingLabel() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FloatingLabel.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.label = this.node.getChildByName("label").getComponent(cc.Label);
      };
      FloatingLabel.prototype.start = function() {};
      FloatingLabel.prototype.showLabel = function(text, color, scale) {
        if (scale) {
          scale > 3 && (scale = 3);
          this.node.scale = scale;
        }
        var sc = this.node.scale;
        this.node.scale = 1.5 * sc;
        this.label.node.opacity = 255;
        this.label.node.position = cc.v3(0, 0);
        this.label.string = text;
        this.label.node.color = color;
        this.anim.play("FontFloating");
        cc.tween(this.node).to(.1, {
          scale: sc
        }).start();
      };
      FloatingLabel.prototype.showMiss = function() {
        this.showLabel("\u4e22\u5931", cc.color(255, 255, 255), 1);
      };
      FloatingLabel.prototype.showDoge = function() {
        this.showLabel("\u95ea\u907f", cc.color(255, 255, 255), 1);
      };
      FloatingLabel.prototype.showBlock = function() {
        this.showLabel("\u683c\u6321", cc.color(211, 211, 211), 1);
      };
      FloatingLabel.prototype.showAvoidDeath = function() {
        this.showLabel("\u683c\u6321\u81f4\u547d\u4f24", cc.color(255, 0, 0), 5);
      };
      FloatingLabel.prototype.showDamage = function(damage, isCritical, isBackStab) {
        var color = damage < 0 ? cc.color(255, 0, 0) : cc.color(0, 255, 0);
        var baseScale = 1;
        if (isCritical) {
          color = cc.color(255, 255, 0);
          baseScale = 2;
        }
        isBackStab && (color = cc.color(186, 85, 211));
        var absd = Math.abs(damage);
        var sd = parseFloat(damage.toFixed(1));
        this.showLabel((damage > 0 ? "+" : "") + (0 != sd ? sd : ""), color, baseScale + absd / 50);
      };
      FloatingLabel.prototype.hideLabel = function() {
        this.node.active = false;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.POOL_DESTROY_LABEL, {
          labelNode: this.node
        });
      };
      FloatingLabel.prototype.FloatingFinish = function() {
        this.hideLabel();
      };
      FloatingLabel = __decorate([ ccclass ], FloatingLabel);
      return FloatingLabel;
    }(cc.Component);
    exports.default = FloatingLabel;
    cc._RF.pop();
  }, {
    "./../logic/EventHelper": "EventHelper"
  } ],
  FloorPaper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a02buPxUlIgIX8vEcDbGVZ", "FloorPaper");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("./../ecs/component/MoveComponent");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var CCollider_1 = require("../collider/CCollider");
    var Logic_1 = require("../logic/Logic");
    var Random_1 = require("../utils/Random");
    var IndexZ_1 = require("../utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloorPaper = function(_super) {
      __extends(FloorPaper, _super);
      function FloorPaper() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.root = null;
        _this.shadow = null;
        _this.spriteIndex = 0;
        _this.rotateAngle = 0;
        _this.checkTimeDelay = 0;
        return _this;
      }
      FloorPaper_1 = FloorPaper;
      FloorPaper.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.init();
      };
      FloorPaper.prototype.onEnable = function() {
        this.init();
      };
      FloorPaper.prototype.init = function() {
        var _this = this;
        this.node.scale = 1.5 + Random_1.default.rand();
        this.spriteIndex = Logic_1.default.getRandomNum(0, FloorPaper_1.SPRITES.length - 1);
        this.rotateAngle = 0;
        var c = Logic_1.default.getRandomNum(180, 255);
        this.sprite.node.color = cc.color(c, c, c);
        this.updateSprite();
        this.unscheduleAllCallbacks();
        cc.tween(this.sprite.node).delay(30).to(.5, {
          opacity: 0
        }).call(function() {
          _this.destroyEntityNode();
        }).start();
      };
      FloorPaper.prototype.updateSprite = function() {
        this.spriteIndex > FloorPaper_1.SPRITES.length - 1 && (this.spriteIndex = 0);
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(FloorPaper_1.SPRITES[this.spriteIndex]);
        this.shadow.spriteFrame = Logic_1.default.spriteFrameRes(FloorPaper_1.SPRITES[this.spriteIndex]);
        this.spriteIndex++;
      };
      FloorPaper.prototype.rotateSprite = function() {
        this.rotateAngle > 360 && (this.rotateAngle = 0);
        this.sprite.node.angle = this.rotateAngle;
        this.shadow.node.angle = this.rotateAngle;
        this.rotateAngle++;
      };
      FloorPaper.prototype.changeZIndex = function() {
        var offsetY = this.entity.Transform.base;
        offsetY > 0 && (offsetY += 500);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(cc.v3(this.node.position.x, this.node.position.y - offsetY));
      };
      FloorPaper.prototype.update = function(dt) {
        var y = this.root.y - this.entity.Transform.base;
        y < 0 && (y = 0);
        var scale = 1 - y / 64;
        this.shadow.node.scale = scale < .5 ? .5 : scale;
        y > 0 && this.rotateSprite();
        if (this.isCheckTimeDelay(dt)) {
          this.changeZIndex();
          y > 0 && this.updateSprite();
        }
      };
      FloorPaper.prototype.fly = function(fromPos, isReverse) {
        this.entity.NodeRender.root = this.root;
        this.entity.Move.linearVelocityZ = 2;
        this.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY / 10;
        var speed = isReverse ? Logic_1.default.getRandomNum(5, 8) : Logic_1.default.getRandomNum(2, 5);
        var x = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        var y = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        if (fromPos) {
          var p = isReverse ? this.node.position.sub(fromPos) : fromPos.sub(this.node.position);
          if (!p.equals(cc.Vec3.ZERO)) {
            p = cc.v3(cc.v2(p.normalize()).rotate(Logic_1.default.getRandomNum(-45, 45) * Math.PI / 180)).normalize().mul(speed);
            x = p.x;
            y = p.y;
          }
        }
        this.entity.Move.linearVelocity = cc.v2(x, y);
        this.entity.Move.damping = 3;
      };
      FloorPaper.prototype.onColliderEnter = function(other, self) {
        other.sensor ? other.tag == CCollider_1.default.TAG.NONPLAYER || other.tag == CCollider_1.default.TAG.GOODNONPLAYER ? this.fly(other.entity.Transform.position) : other.tag != CCollider_1.default.TAG.PLAYER_HIT && other.tag != CCollider_1.default.TAG.AOE && other.tag != CCollider_1.default.TAG.NONPLAYER_HIT && other.tag != CCollider_1.default.TAG.GOODNONPLAYER_HIT || this.fly(this.node.parent.convertToNodeSpaceAR(cc.v3(other.w_center)), true) : other.isStatic ? this.entity.Move.linearVelocity = cc.Vec2.ZERO : this.fly(other.entity.Transform.position);
      };
      FloorPaper.prototype.onColliderStay = function(other, self) {
        !other.sensor && other.isStatic && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
      };
      FloorPaper.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      var FloorPaper_1;
      FloorPaper.SPRITES = [ "paper0", "paper1", "paper2", "paper3" ];
      __decorate([ property(cc.Sprite) ], FloorPaper.prototype, "sprite", void 0);
      __decorate([ property(cc.Node) ], FloorPaper.prototype, "root", void 0);
      __decorate([ property(cc.Sprite) ], FloorPaper.prototype, "shadow", void 0);
      FloorPaper = FloorPaper_1 = __decorate([ ccclass ], FloorPaper);
      return FloorPaper;
    }(BaseColliderComponent_1.default);
    exports.default = FloorPaper;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../collider/CCollider": "CCollider",
    "../logic/Logic": "Logic",
    "../utils/IndexZ": "IndexZ",
    "../utils/Random": "Random",
    "./../ecs/component/MoveComponent": "MoveComponent"
  } ],
  FootBoard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a20d6iwPAJLg7AtbBgYX0yS", "FootBoard");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../utils/IndexZ");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FootBoard = function(_super) {
      __extends(FootBoard, _super);
      function FootBoard() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.openSpriteFrame = null;
        _this.closeSpriteFrame = null;
        _this.isOpen = false;
        _this.hasActive = false;
        _this.pos = cc.v3(0, 0);
        _this.timeDelay = 0;
        return _this;
      }
      FootBoard.prototype.onLoad = function() {
        this.spriteNode = this.node.getChildByName("sprite");
        this.sprite = this.spriteNode.getComponent(cc.Sprite);
      };
      FootBoard.prototype.start = function() {};
      FootBoard.prototype.setPos = function(pos) {
        this.pos = pos;
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(pos);
        this.node.position = this.entity.Transform.position.clone();
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      FootBoard.prototype.openTrap = function() {
        if (this.isOpen) return;
        this.isOpen = true;
        this.sprite.spriteFrame = this.isOpen ? this.openSpriteFrame : this.closeSpriteFrame;
      };
      FootBoard.prototype.onColliderEnter = function(other, self) {
        if (other.tag == CCollider_1.default.TAG.BUILDING) {
          this.isOpen = true;
          this.hasActive = true;
        }
        if (other.tag == CCollider_1.default.TAG.PLAYER) {
          this.isOpen = true;
          this.hasActive = true;
        }
      };
      FootBoard.prototype.onColliderStay = function(other, self) {
        if (other.tag == CCollider_1.default.TAG.BUILDING) {
          this.isOpen = true;
          this.hasActive = true;
        }
        if (other.tag == CCollider_1.default.TAG.PLAYER) {
          this.isOpen = true;
          this.hasActive = true;
        }
      };
      FootBoard.prototype.onColliderExit = function(other, self) {
        other.tag == CCollider_1.default.TAG.BUILDING && (this.isOpen = false);
        other.tag == CCollider_1.default.TAG.PLAYER && (this.isOpen = false);
      };
      FootBoard.prototype.update = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .2) {
          this.timeDelay = 0;
          this.sprite.spriteFrame = this.isOpen ? this.openSpriteFrame : this.closeSpriteFrame;
        }
      };
      __decorate([ property(cc.SpriteFrame) ], FootBoard.prototype, "openSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], FootBoard.prototype, "closeSpriteFrame", void 0);
      FootBoard = __decorate([ ccclass ], FootBoard);
      return FootBoard;
    }(Building_1.default);
    exports.default = FootBoard;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../logic/Dungeon": "Dungeon",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  FrameAvatar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6d76f19AT1M2ZsAiPFqPBOs", "FrameAvatar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var AvatarData_1 = require("../data/AvatarData");
    var Utils_1 = require("../utils/Utils");
    var BaseAvatar_1 = require("../base/BaseAvatar");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FrameAvatar = function(_super) {
      __extends(FrameAvatar, _super);
      function FrameAvatar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.avatarNode = null;
        _this.spriteNode = null;
        _this.animFrameSprite = null;
        _this.waterY = 0;
        _this.isAnimFrame = false;
        _this.idleFrames = [ 0, 1 ];
        _this.walkFrames = [ 2, 5 ];
        _this.hitFrames = [ 6, 7 ];
        _this.dieFrames = [ 8 ];
        _this.attackFrames = [ 9, 10 ];
        _this.specialFrames = [ 12, 13 ];
        _this.disguiseFrames = [ 14 ];
        _this.resName = "";
        return _this;
      }
      FrameAvatar_1 = FrameAvatar;
      FrameAvatar.create = function(prefab, parent, data, resName) {
        var avatar = cc.instantiate(prefab).getComponent(FrameAvatar_1);
        avatar.node.parent = parent;
        avatar.node.zIndex = 0;
        avatar.init(data, resName);
        return avatar;
      };
      FrameAvatar.prototype.init = function(data, resName) {
        if (this.isInit) return;
        this.isInit = true;
        this.resName = resName;
        this.data = new AvatarData_1.default();
        this.data.valueCopy(data);
        this.anim = this.getComponent(cc.Animation);
        this.avatarNode = this.getSpriteChildNode([ "sprite", "avatar" ]);
        this.spriteNode = this.getSpriteChildNode([ "sprite" ]);
        this.animFrameSprite = this.getSpriteChildSprite([ "sprite", "animframe" ]);
        this.changeAvatarByDir(BaseAvatar_1.default.DIR_RIGHT);
      };
      FrameAvatar.prototype.playAnim = function(status, dir, speedScale, callback) {
        if (!this.isInit || this.isAniming || BaseAvatar_1.default.STATE_DIE == this.status) return;
        var scale = null !== speedScale && void 0 !== speedScale ? speedScale : 1;
        switch (status) {
         case BaseAvatar_1.default.STATE_IDLE:
          this.status != status && this.playIdle(scale);
          break;

         case BaseAvatar_1.default.STATE_WALK:
          this.status != status && BaseAvatar_1.default.STATE_ATTACK != this.status && BaseAvatar_1.default.STATE_AIRKICK != this.status && this.playWalk(scale);
          break;

         case BaseAvatar_1.default.STATE_ATTACK:
          this.playAttack(scale);
          break;

         case BaseAvatar_1.default.STATE_AIRKICK:
          this.playAirKick(scale);
          break;

         case BaseAvatar_1.default.STATE_DIE:
          this.playDie(scale);
          break;

         case BaseAvatar_1.default.STATE_FALL:
          this.playFall(scale);
          break;

         case BaseAvatar_1.default.STATE_JUMP_UP:
          this.status != status && this.playJumpUp(scale);
          break;

         case BaseAvatar_1.default.STATE_JUMP_DOWN:
          this.status != status && this.playJumpDown(scale);
          break;

         case BaseAvatar_1.default.STATE_DISGUISE:
          this.playDisguise(scale);
          break;

         case BaseAvatar_1.default.STATE_HIT:
          this.playHit(scale);
          break;

         case BaseAvatar_1.default.STATE_SPECIAL:
          this.playSpecial(scale);
        }
        this.status = status;
        4 != dir && (this.dir = dir);
      };
      FrameAvatar.prototype.playAnimFrames = function(frames, speedScale, loop, callback) {
        var _this = this;
        if (frames.length < 1) return;
        var _tween = cc.tween();
        var startFrame = frames[0];
        var keyFrame = frames[1];
        var endFrame = frames[frames.length - 1];
        var _loop_1 = function(i) {
          _tween.then(cc.tween().call(function() {
            _this.changeAnimFrames(_this.resName, "anim" + Utils_1.default.getNumberStr3(i));
            i == keyFrame && callback && callback();
          }).delay(.2 * speedScale));
        };
        for (var i = startFrame; i <= endFrame; i++) _loop_1(i);
        this.animFrameSprite.node.stopAllActions();
        loop && frames[1] > frames[0] ? cc.tween(this.animFrameSprite.node).repeatForever(_tween).start() : cc.tween(this.animFrameSprite.node).then(_tween).start();
      };
      FrameAvatar.prototype.changeAnimFrames = function(resName, suffix) {
        this.animFrameSprite || this.getSpriteChildSprite([ "sprite", "animframe" ]);
        var spriteFrame = this.getSpriteFrameByName(resName, suffix);
        if (spriteFrame) {
          this.animFrameSprite.spriteFrame = spriteFrame;
          this.animFrameSprite.node.width = spriteFrame.getOriginalSize().width;
          this.animFrameSprite.node.height = spriteFrame.getOriginalSize().height;
        } else this.animFrameSprite.spriteFrame = null;
      };
      FrameAvatar.prototype.getSpriteFrameByName = function(resName, suffix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(resName));
        return spriteFrame;
      };
      FrameAvatar.prototype.changeAvatarByDir = function(dir) {
        if (this.isAniming) return;
        4 != dir && (this.dir = dir);
      };
      FrameAvatar.prototype.showLegsWithWater = function(inWater, inWaterTile) {
        this.waterY = inWaterTile ? -32 : 0;
        this.node.y = Logic_1.default.lerp(this.node.y, this.waterY, .2);
        this.setInWaterMat(this.animFrameSprite, inWater);
      };
      FrameAvatar.prototype.setInWaterMat = function(sprite, inWater) {
        if (!sprite || !sprite.spriteFrame) return;
        var offset = sprite.spriteFrame.getOffset();
        var rect = sprite.spriteFrame.getRect();
        var texture = sprite.spriteFrame.getTexture();
        sprite.getMaterial(0).setProperty("rect", [ rect.x / texture.width, rect.y / texture.height, rect.width / texture.width, rect.height / texture.height ]);
        sprite.getMaterial(0).setProperty("hidebottom", inWater ? 1 : 0);
        if (!this.isAnimFrame) {
          sprite.getMaterial(0).setProperty("angularVelocity", 300);
          sprite.getMaterial(0).setProperty("amplitude", .001);
        }
        sprite.getMaterial(0).setProperty("isRotated", sprite.spriteFrame.isRotated() ? 1 : 0);
      };
      FrameAvatar.prototype.playJumpDown = function(speedScale) {
        this.playAnimFrames([], speedScale, false);
      };
      FrameAvatar.prototype.playJumpUp = function(speedScale) {
        this.playAnimFrames([], speedScale, false);
      };
      FrameAvatar.prototype.playDisguise = function(speedScale) {
        this.playAnimFrames(this.disguiseFrames, speedScale, false);
      };
      FrameAvatar.prototype.playHit = function(speedScale) {
        var arr = [ this.hitFrames[Logic_1.default.getRandomNum(0, this.hitFrames.length - 1)] ];
        this.playAnimFrames(arr, speedScale, false);
      };
      FrameAvatar.prototype.playSpecial = function(speedScale) {};
      FrameAvatar.prototype.playFall = function(speedScale) {
        this.playAnimFrames(this.hitFrames, speedScale, false);
      };
      FrameAvatar.prototype.playDie = function(speedScale) {
        this.playAnimFrames(this.dieFrames, speedScale, false);
      };
      FrameAvatar.prototype.playIdle = function(speedScale) {
        this.playAnimFrames(this.idleFrames, speedScale, true);
      };
      FrameAvatar.prototype.playWalk = function(speedScale) {
        this.playAnimFrames(this.walkFrames, speedScale, true);
      };
      FrameAvatar.prototype.playAttack = function(speedScale, callback) {
        this.playAnimFrames(this.attackFrames, speedScale, false, callback);
      };
      FrameAvatar.prototype.playAirKick = function(speedScale) {};
      FrameAvatar.prototype.playCooking = function() {};
      FrameAvatar.prototype.playDrink = function() {};
      FrameAvatar.prototype.playToilet = function() {};
      FrameAvatar.prototype.playSleep = function() {};
      FrameAvatar.prototype.playRead = function() {};
      var FrameAvatar_1;
      FrameAvatar = FrameAvatar_1 = __decorate([ ccclass ], FrameAvatar);
      return FrameAvatar;
    }(BaseAvatar_1.default);
    exports.default = FrameAvatar;
    cc._RF.pop();
  }, {
    "../base/BaseAvatar": "BaseAvatar",
    "../data/AvatarData": "AvatarData",
    "../utils/Utils": "Utils",
    "./Logic": "Logic"
  } ],
  FromData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf8a1Noa0FD6qIEI4bqHV5c", "FromData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var FromData = function() {
      function FromData() {
        this.name = "";
        this.res = "";
        this.seed = 0;
      }
      FromData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
      };
      FromData.getClone = function(name, res, pos, seed) {
        var e = new FromData();
        e.name = name;
        e.res = res;
        e.seed = seed;
        e.pos = cc.v3(pos.x, pos.y);
        return e;
      };
      FromData.prototype.clone = function() {
        var e = new FromData();
        e.valueCopy(this);
        return e;
      };
      return FromData;
    }();
    exports.default = FromData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  FsmEvent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b77f3K+NxhBaYwLRNLbbGxg", "FsmEvent");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FsmEvent = function() {
      function FsmEvent() {}
      return FsmEvent;
    }();
    exports.default = FsmEvent;
    cc._RF.pop();
  }, {} ],
  Furniture: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12170bzXSpDtaz5MoM+l14L", "Furniture");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./../logic/EventHelper");
    var Achievement_1 = require("../logic/Achievement");
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var Tips_1 = require("../ui/Tips");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var LocalStorage_1 = require("../utils/LocalStorage");
    var Utils_1 = require("../utils/Utils");
    var Building_1 = require("./Building");
    var RoomFishtank_1 = require("./RoomFishtank");
    var RoomStool_1 = require("./RoomStool");
    var RoomTv_1 = require("./RoomTv");
    var CCollider_1 = require("../collider/CCollider");
    var NextStep_1 = require("../utils/NextStep");
    var InventoryData_1 = require("../data/InventoryData");
    var RoomWaterDispenser_1 = require("./RoomWaterDispenser");
    var RoomTrashCan_1 = require("./RoomTrashCan");
    var RoomKitchen_1 = require("./RoomKitchen");
    var IndexZ_1 = require("../utils/IndexZ");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Furniture = function(_super) {
      __extends(Furniture, _super);
      function Furniture() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isNormal = false;
        _this.unlockStep = new NextStep_1.default();
        _this.bookStep = new NextStep_1.default();
        return _this;
      }
      Furniture_1 = Furniture;
      Furniture.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.lock = this.node.getChildByName("lock").getComponent(cc.Sprite);
        this.tips = this.getComponentInChildren(Tips_1.default);
        this.tips.onInteract(function(isLongPress, player) {
          _this.node && (_this.data.purchased ? _this.interact(player) : _this.unlockStep.next(function() {
            _this.getComponent(cc.Animation).play("FurnitureUnlock");
            AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
            Utils_1.default.toast("\u6682\u672a\u89e3\u9501\uff0c\u8bf7\u4e0b\u5355\u8d2d\u4e70:-D", true, true);
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CELLPHONE_SHOW);
          }, 3, true));
        });
        this.tips.onEnter(function() {
          _this.node && _this.data.purchased && _this.onTipsEnter(true);
        });
        this.tips.onExit(function() {
          _this.node && _this.data.purchased && _this.onTipsExit(true);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_FURNITURE_REFRESH, function(detail) {
          _this.node && detail.id == _this.data.id && _this.init(_this.data, _this.isNormal);
        });
      };
      Furniture.prototype.interact = function(player) {
        switch (this.data.id) {
         case Furniture_1.TV:
          var tv = this.getComponent(RoomTv_1.default);
          tv && tv.interact(player);
          break;

         case Furniture_1.STOOL:
          var stool = this.getComponent(RoomStool_1.default);
          stool && stool.open();
          break;

         case Furniture_1.FISHTANK:
          var fishtank = this.getComponent(RoomFishtank_1.default);
          fishtank && fishtank.feed(player);
          break;

         case Furniture_1.WATERDISPENER:
          var waterdispenser = this.getComponent(RoomWaterDispenser_1.default);
          waterdispenser && waterdispenser.getWater(player);
          break;

         case Furniture_1.CUPBOARD:
          var equips = [ EquipmentManager_1.default.getNewEquipData(EquipmentManager_1.default.CLOTHES_VEST), EquipmentManager_1.default.getNewEquipData(EquipmentManager_1.default.TROUSERS_LONG), EquipmentManager_1.default.getNewEquipData(EquipmentManager_1.default.TROUSERS_SHORT), EquipmentManager_1.default.getNewEquipData(EquipmentManager_1.default.CLOTHES_SHIRT), EquipmentManager_1.default.getNewEquipData(EquipmentManager_1.default.SHOES_SKATEBOARD) ];
          if (this.data.storageList.length < 1) {
            for (var i = 0; i < this.data.storage; i++) {
              var data = new InventoryData_1.default();
              i < equips.length && this.data.triggerCount < 1 && (data = InventoryManager_1.default.buildEquipInventoryData(equips[i]));
              this.data.storageList.push(data);
            }
            LocalStorage_1.default.saveFurnitureData(this.data);
          }
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_SHOW, {
            id: this.data.id
          });
          break;

         case Furniture_1.LITTLE_TABLE_2:
          Utils_1.default.toast("\u73b0\u5728\u662f" + Utils_1.default.getYear(Logic_1.default.realTime) + Utils_1.default.getDay(Logic_1.default.realTime) + Utils_1.default.getHour(Logic_1.default.realTime), false, true);
          break;

         case Furniture_1.TRASHCAN:
          var trashCan = this.getComponent(RoomTrashCan_1.default);
          trashCan && trashCan.getTrash();
          break;

         case Furniture_1.BOOKSHELF:
          this.bookStep.next(function() {
            player.read();
          }, 5);
          break;

         case Furniture_1.COOKING_BENCH:
          var kitchen = this.getComponent(RoomKitchen_1.default);
          kitchen && kitchen.getFood(player);
          break;

         case Furniture_1.DOLL_MACHINE:
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DOLL_MACHINE_DIALOG);
          break;

         default:
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
          Utils_1.default.toast("\u68a6\u5883\u5f00\u53d1\u4e2d,\u65e0\u6cd5\u4f7f\u7528\u3002");
        }
        this.data.triggerCount++;
        Logic_1.default.mapManager.setCurrentBuildingData(this.data.clone());
      };
      Furniture.prototype.onTipsEnter = function(isTips) {
        switch (this.data.id) {
         case Furniture_1.FISHTANK:
          var fishtank = this.getComponent(RoomFishtank_1.default);
          fishtank && fishtank.zoomCamera(true);
          break;

         case Furniture_1.LITTLE_TABLE_2:
         case Furniture_1.WATERDISPENER:
         case Furniture_1.TRASHCAN:
          this.zoomCamera(true);
        }
      };
      Furniture.prototype.onTipsExit = function(isTips) {
        switch (this.data.id) {
         case Furniture_1.FISHTANK:
          var fishtank = this.getComponent(RoomFishtank_1.default);
          fishtank && fishtank.zoomCamera(false);
          break;

         case Furniture_1.TV:
          var tv = this.getComponent(RoomTv_1.default);
          tv && tv.close();
          break;

         case Furniture_1.LITTLE_TABLE_2:
         case Furniture_1.WATERDISPENER:
         case Furniture_1.TRASHCAN:
          this.zoomCamera(false);
        }
      };
      Furniture.prototype.init = function(furnitureData, isNormal) {
        this.isNormal = isNormal;
        var save = LocalStorage_1.default.getFurnitureData(furnitureData.id);
        if (save) {
          furnitureData.triggerCount = save.triggerCount;
          furnitureData.purchased = save.purchased;
          furnitureData.storage = save.storage ? save.storage : furnitureData.storage;
          furnitureData.storageList = [];
          if (save.storageList && save.storageList.length > 0) for (var _i = 0, _a = save.storageList; _i < _a.length; _i++) {
            var s = _a[_i];
            s.itemData ? furnitureData.storageList.push(InventoryManager_1.default.buildItemInventoryData(s.itemData)) : s.equipmentData && furnitureData.storageList.push(InventoryManager_1.default.buildEquipInventoryData(s.equipmentData));
          }
        }
        furnitureData.price <= 0 && (furnitureData.purchased = true);
        this.data.valueCopy(furnitureData);
        Logic_1.default.furnitureMap.set(furnitureData.id, this.data);
        if (this.data.purchased) {
          this.sprite.node.color = cc.color(255, 255, 255, 255);
          this.sprite.node.opacity = 255;
          this.lock.node.active = false;
        } else {
          this.sprite.node.color = cc.color(128, 128, 128, 255);
          this.sprite.node.opacity = 128;
          this.lock.node.active = true;
        }
        this.changeRes(this.data.resName, isNormal);
        var pcollider = this.getComponent(CCollider_1.default);
        if (isNormal) {
          if (this.data.collider.length > 0) {
            var arr = this.data.collider.split(",");
            pcollider.offset = cc.v2(parseInt(arr[0]), parseInt(arr[1]));
            pcollider.setSize(cc.size(parseInt(arr[2]), parseInt(arr[3])), parseInt(arr[4]));
          }
          if (this.data.spritePos.length > 0) {
            var arr = this.data.spritePos.split(",");
            this.sprite.node.x = parseInt(arr[0]);
            this.sprite.node.y = parseInt(arr[1]);
          }
        }
        LocalStorage_1.default.saveFurnitureData(this.data);
        Achievement_1.default.addFurnituresAchievement(this.data.id);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(cc.v3(this.node.position.x, this.node.position.y + pcollider.offset.y));
      };
      Furniture.prototype.changeRes = function(resName, isNormal) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        if (spriteFrame && isNormal) {
          this.sprite.spriteFrame = spriteFrame;
          this.sprite.node.width = spriteFrame.getOriginalSize().width;
          this.sprite.node.height = spriteFrame.getOriginalSize().height;
          this.sprite.node.scale = this.data.scale;
          this.tips.node.scale = 2;
          var width = this.sprite.node.width * this.sprite.node.scale;
          var height = this.sprite.node.height * this.sprite.node.scale;
          this.tips.node.position = cc.v3(width / 2 - Dungeon_1.default.TILE_SIZE / 2, Dungeon_1.default.TILE_SIZE);
          this.lock.node.position = cc.v3(width / 2 - Dungeon_1.default.TILE_SIZE / 2, height / 2 - Dungeon_1.default.TILE_SIZE / 2);
          var collider = this.tips.node.getComponent(CCollider_1.default);
          collider.radius = width > height ? height / 4 : width / 4;
          if (width > height) {
            collider.radius = height / 4;
            collider.offset = cc.v2(0, -Dungeon_1.default.TILE_SIZE / 2);
          } else {
            collider.radius = width / 4;
            collider.offset = cc.v2(0, -Dungeon_1.default.TILE_SIZE / 2);
          }
        }
      };
      Furniture.prototype.zoomCamera = function(zoomIn) {
        EventHelper_1.EventHelper.emit(zoomIn ? EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN : EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_OUT);
      };
      Furniture.prototype.start = function() {
        this.changeRes(this.data.resName, this.isNormal);
      };
      Furniture.prototype.onColliderEnter = function(other, self) {};
      Furniture.prototype.onColliderStay = function(other, self) {};
      Furniture.prototype.onColliderExit = function(other, self) {};
      Furniture.prototype.onColliderPreSolve = function(other, self) {};
      var Furniture_1;
      Furniture.SOFA = "furniture001";
      Furniture.BATH = "furniture002";
      Furniture.DINNER_TABLE = "furniture003";
      Furniture.WASHING_MACHINE = "furniture004";
      Furniture.COOKING_BENCH = "furniture005";
      Furniture.DOLL_MACHINE = "furniture006";
      Furniture.COOKING_BENCH_2 = "furniture007";
      Furniture.COOKING_BENCH_3 = "furniture008";
      Furniture.FRIDGE = "furniture009";
      Furniture.DESK = "furniture010";
      Furniture.CUPBOARD = "furniture011";
      Furniture.LITTLE_TABLE = "furniture012";
      Furniture.LITTLE_TABLE_1 = "furniture013";
      Furniture.LITTLE_TABLE_2 = "furniture014";
      Furniture.STOOL = "furniture015";
      Furniture.TV = "furniture016";
      Furniture.FISHTANK = "furniture017";
      Furniture.BOOKSHELF = "furniture018";
      Furniture.WATERDISPENER = "furniture019";
      Furniture.TRASHCAN = "furniture020";
      Furniture = Furniture_1 = __decorate([ ccclass ], Furniture);
      return Furniture;
    }(Building_1.default);
    exports.default = Furniture;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/InventoryData": "InventoryData",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../manager/EquipmentManager": "EquipmentManager",
    "../manager/InventoryManager": "InventoryManager",
    "../ui/Tips": "Tips",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/LocalStorage": "LocalStorage",
    "../utils/NextStep": "NextStep",
    "../utils/Utils": "Utils",
    "./../logic/EventHelper": "EventHelper",
    "./Building": "Building",
    "./RoomFishtank": "RoomFishtank",
    "./RoomKitchen": "RoomKitchen",
    "./RoomStool": "RoomStool",
    "./RoomTrashCan": "RoomTrashCan",
    "./RoomTv": "RoomTv",
    "./RoomWaterDispenser": "RoomWaterDispenser"
  } ],
  GameAlertDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "596d8lCmAZH6JVs8zYyXkMe", "GameAlertDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../../logic/EventHelper");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var BaseDialog_1 = require("./BaseDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameAlertDialog = function(_super) {
      __extends(GameAlertDialog, _super);
      function GameAlertDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.msg = null;
        _this.ok = null;
        _this.cancel = null;
        return _this;
      }
      GameAlertDialog_1 = GameAlertDialog;
      GameAlertDialog.prototype.init = function(msg, ok, cancel) {
        this.msg.string = msg;
        this.ok.getComponentInChildren(cc.Label).string = ok;
        this.cancel.node.active = cancel.length > 0;
        this.cancel.getComponentInChildren(cc.Label).string = cancel;
      };
      GameAlertDialog.show = function(msg, ok, cancel, callback) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DIALOG_ALERT_SHOW, {
          msg: msg,
          ok: ok,
          cancel: cancel
        });
        callback && (GameAlertDialog_1.callback = callback);
      };
      GameAlertDialog.prototype.show = function() {
        _super.prototype.show.call(this);
      };
      GameAlertDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      GameAlertDialog.prototype.clickOk = function() {
        GameAlertDialog_1.callback && GameAlertDialog_1.callback(true);
        this.close();
      };
      GameAlertDialog.prototype.clickCancel = function() {
        GameAlertDialog_1.callback && GameAlertDialog_1.callback(false);
        this.close();
      };
      var GameAlertDialog_1;
      __decorate([ property(cc.Label) ], GameAlertDialog.prototype, "msg", void 0);
      __decorate([ property(cc.Button) ], GameAlertDialog.prototype, "ok", void 0);
      __decorate([ property(cc.Button) ], GameAlertDialog.prototype, "cancel", void 0);
      GameAlertDialog = GameAlertDialog_1 = __decorate([ ccclass ], GameAlertDialog);
      return GameAlertDialog;
    }(BaseDialog_1.default);
    exports.default = GameAlertDialog;
    cc._RF.pop();
  }, {
    "../../logic/EventHelper": "EventHelper",
    "../../utils/AudioPlayer": "AudioPlayer",
    "./BaseDialog": "BaseDialog"
  } ],
  GameFinish: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "98577N+o/RGi4cE+Wsz8Pp4", "GameFinish");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var WxHelper_1 = require("./WxHelper");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var StartBackground_1 = require("../ui/StartBackground");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NewClass = function(_super) {
      __extends(NewClass, _super);
      function NewClass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.wxhelper = null;
        _this.level = null;
        _this.clock = null;
        _this.cursorAreaPrefab = null;
        return _this;
      }
      NewClass.prototype.onLoad = function() {};
      NewClass.prototype.start = function() {
        this.clock && (this.clock.string = "" + Utils_1.default.getPlayTime(Logic_1.default.totalTime));
        this.level && (this.level.string = "Level " + (Logic_1.default.chapterIndex + 1) + "-" + Logic_1.default.level);
      };
      NewClass.prototype.retry = function() {
        Logic_1.default.resetData();
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        var bg = this.getComponentInChildren(StartBackground_1.default);
        bg && bg.startPressed();
        this.scheduleOnce(function() {
          cc.director.loadScene("loading");
        }, 1);
      };
      NewClass.prototype.home = function() {
        this.wxhelper && this.wxhelper.CloseDialog();
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        var bg = this.getComponentInChildren(StartBackground_1.default);
        bg && bg.startPressed();
        this.scheduleOnce(function() {
          cc.director.loadScene("start");
        }, 1);
      };
      __decorate([ property(WxHelper_1.default) ], NewClass.prototype, "wxhelper", void 0);
      __decorate([ property(cc.Label) ], NewClass.prototype, "level", void 0);
      __decorate([ property(cc.Label) ], NewClass.prototype, "clock", void 0);
      __decorate([ property(cc.Prefab) ], NewClass.prototype, "cursorAreaPrefab", void 0);
      NewClass = __decorate([ ccclass ], NewClass);
      return NewClass;
    }(cc.Component);
    exports.default = NewClass;
    cc._RF.pop();
  }, {
    "../ui/StartBackground": "StartBackground",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils",
    "./Logic": "Logic",
    "./WxHelper": "WxHelper"
  } ],
  GameHud: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34bc5nmZdpM3J3SaZigF3c3", "GameHud");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./../logic/EventHelper");
    var PlayerInfoDialog_1 = require("./PlayerInfoDialog");
    var HealthBar_1 = require("../logic/HealthBar");
    var Logic_1 = require("../logic/Logic");
    var SettingsDialog_1 = require("./dialog/SettingsDialog");
    var MartShelvesDialog_1 = require("./dialog/MartShelvesDialog");
    var InventoryDialog_1 = require("./dialog/InventoryDialog");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var SatietyView_1 = require("./SatietyView");
    var DollMachineDialog_1 = require("./dialog/DollMachineDialog");
    var Dialogue_1 = require("./Dialogue");
    var CellphoneDialog_1 = require("./dialog/CellphoneDialog");
    var ActionSettingDialog_1 = require("./dialog/ActionSettingDialog");
    var Utils_1 = require("../utils/Utils");
    var QuestBoardDialog_1 = require("./dialog/QuestBoardDialog");
    var GameAlertDialog_1 = require("./dialog/GameAlertDialog");
    var MetalTalentDialog_1 = require("./dialog/MetalTalentDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameHud = function(_super) {
      __extends(GameHud, _super);
      function GameHud() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.healthBar = null;
        _this.dreamBar = null;
        _this.bossHealthBar = null;
        _this.playerInfoDialog = null;
        _this.level = null;
        _this.clock = null;
        _this.damageCorner = null;
        _this.pasueButton = null;
        _this.zoomButton = null;
        _this.settingsDialog = null;
        _this.martShelvesDialog = null;
        _this.completeLabel = null;
        _this.oilGoldLabel = null;
        _this.inventoryDialog = null;
        _this.followArrows = null;
        _this.satietyView = null;
        _this.dollMachineDialog = null;
        _this.AmmoLabel = null;
        _this.dialogue = null;
        _this.cellphoneDialog = null;
        _this.actionSettingDialog = null;
        _this.questBoardDialog = null;
        _this.metalTalentDialog = null;
        _this.gameAlertDialog = null;
        _this.arrowList = [];
        _this.isCompleteShowed = false;
        _this.checkTimeDelay = 0;
        _this.startCountTime = true;
        return _this;
      }
      GameHud.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_INFODIALOG, function(detail) {
          _this.statusUpdate(detail.dataId);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_HEALTHBAR, function(detail) {
          _this.healthBarUpdate(detail.x, detail.y);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_DREAMBAR, function(detail) {
          _this.dreamBarUpdate(detail.x, detail.y);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_SHAKE_PLAYER_DREAMBAR, function(detail) {
          _this.dreamBar && _this.dreamBar.shake();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_LIFE_BAR, function(detail) {
          _this.lifeBarUpdate(detail.sanity, detail.solid, detail.poo, detail.liquid, detail.pee);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_DAMAGE_CORNER_SHOW, function(detail) {
          _this.showDamageCorner();
          _this.healthBar && _this.healthBar.shake();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_MART_SHELVES_DIALOG, function(detail) {
          _this.showMartShelvesDialog(detail.type, detail.goodsNameList);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_COMPLETE_SHOW, function(detail) {
          _this.showComplete(detail.map);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_OILGOLD_LOSE_SHOW, function(detail) {
          _this.showOilGoldInfo(true);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_OILGOLD_RECOVERY_SHOW, function(detail) {
          _this.showOilGoldInfo(false);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_INVENTORY_SHOW, function(detail) {
          _this.showInventoryDialog(detail.id, detail.isCast);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CANCEL_OR_PAUSE, function(detail) {
          _this.cancelOrPause();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_STOP_COUNTTIME, function(detail) {
          _this.startCountTime = false;
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_FADE_IN, function(detail) {
          _this.fadeIn();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_FADE_OUT, function(detail) {
          _this.fadeOut();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_DOLL_MACHINE_DIALOG, function(detail) {
          _this.showDollMachineDialog();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_AMMO, function(detail) {
          _this.ammoUpdate(detail.x, detail.y);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CELLPHONE_SHOW, function(detail) {
          _this.showCellphoneDialog();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_ACTION_SETTING_DIALOG, function(detail) {
          _this.showActionSettingDialog();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_QUEST_BOARD_SHOW, function(detail) {
          _this.showQuestBoardDialog();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_METAL_TALENT_SHOW, function(detail) {
          _this.showMetalTalentDialog();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DIALOG_ALERT_SHOW, function(detail) {
          if (_this.gameAlertDialog) {
            _this.gameAlertDialog.init(detail.msg, detail.ok, detail.cancel);
            _this.gameAlertDialog.show();
          }
        });
        this.clock && (this.clock.string = "" + Utils_1.default.getPlayTime(Logic_1.default.totalTime));
        this.level && (this.level.string = "" + Logic_1.default.worldLoader.getCurrentLevelData().name);
        this.damageCorner && (this.damageCorner.opacity = 0);
        this.pasueButton.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.pauseGame();
        });
        this.zoomButton.on(cc.Node.EventType.TOUCH_START, function(event) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN, {});
        });
        this.zoomButton.on(cc.Node.EventType.TOUCH_END, function(event) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_OUT, {});
        });
        this.zoomButton.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_OUT, {});
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.TEST_SHOW_NODE_COUNT);
        });
        var finalData = Logic_1.default.playerData.FinalCommon;
        this.healthBarUpdate(Logic_1.default.playerData.currentHealth, Logic_1.default.playerData.getHealth(finalData).y);
        this.dreamBarUpdate(Logic_1.default.playerData.currentDream, Logic_1.default.playerData.getDream(finalData).y);
        this.ammoUpdate(Logic_1.default.playerData.currentAmmo, finalData.MaxAmmo);
        this.fadeIn();
        this.initFollowArrows();
      };
      GameHud.prototype.initFollowArrows = function() {
        this.arrowList.push(this.followArrows.getChildByName("arrow0"));
        this.arrowList.push(this.followArrows.getChildByName("arrow1"));
        this.arrowList.push(this.followArrows.getChildByName("arrow2"));
        this.arrowList.push(this.followArrows.getChildByName("arrow3"));
        for (var _i = 0, _a = this.arrowList; _i < _a.length; _i++) {
          var arrow = _a[_i];
          arrow.active = false;
        }
      };
      GameHud.prototype.showOilGoldInfo = function(isLose) {
        var _this = this;
        if (!this.oilGoldLabel) return;
        var arr0 = [ "\u788e", "\u788e\u7247", "\u788e\u7247\u4e22", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22", "\u788e\u7247", "\u788e", "" ];
        var arr1 = [ "\u788e", "\u788e\u7247", "\u788e\u7247\u627e", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e", "\u788e\u7247", "\u788e", "" ];
        isLose || AudioPlayer_1.default.play(AudioPlayer_1.default.COMPLETE);
        var arr = isLose ? arr0 : arr1;
        this.oilGoldLabel.node.color = isLose ? cc.Color.RED : cc.color().fromHEX("#EDB411");
        this.oilGoldLabel.node.parent.color = isLose ? cc.Color.RED : cc.color().fromHEX("#EDB411");
        var i = 0;
        this.oilGoldLabel.string = "";
        this.oilGoldLabel.unscheduleAllCallbacks();
        var itl = .15;
        cc.tween(this.oilGoldLabel.node.parent).to(itl, {
          height: 80,
          width: 80
        }).to(3 * itl, {
          width: 1e3
        }).delay(itl * arr.length).to(itl, {
          height: 0
        }).start();
        this.oilGoldLabel.schedule(function() {
          i < arr.length && (_this.oilGoldLabel.string = arr[i++]);
        }, itl, arr.length);
      };
      GameHud.prototype.showComplete = function(map) {
        var _this = this;
        if (!this.completeLabel || this.isCompleteShowed) return;
        var arr = [ "\u6e05", "\u6e05\u7406", "\u6e05\u7406\u5b8c", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c", "\u6e05\u7406", "\u6e05", "" ];
        var i = 0;
        this.completeLabel.string = "";
        this.completeLabel.unscheduleAllCallbacks();
        this.isCompleteShowed = true;
        var itl = .1;
        var delay = .5;
        cc.tween(this.completeLabel.node.parent).to(itl, {
          height: 80,
          width: 80
        }).call(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.COMPLETE);
        }).to(3 * itl, {
          width: 1e3
        }).delay(itl * arr.length).to(itl, {
          height: 0
        }).start();
        this.completeLabel.schedule(function() {
          i < arr.length && (_this.completeLabel.string = arr[i++]);
        }, itl, arr.length, delay);
        if (map && map.size > 0) for (var i_1 = 0; i_1 < 4; i_1++) if (map.has(i_1)) {
          this.arrowList[i_1].active = true;
          this.arrowList[i_1].getChildByName("sprite").color = map.get(i_1) ? cc.Color.WHITE : cc.color(55, 55, 55, 255);
        } else this.arrowList[i_1].active = false;
      };
      GameHud.prototype.fadeOut = function() {
        if (!this.node) return;
        this.node.opacity = 255;
        cc.tween(this.node).to(.5, {
          opacity: 0
        }).start();
      };
      GameHud.prototype.fadeIn = function() {
        if (!this.node) return;
        this.node.opacity = 0;
        cc.tween(this.node).to(3, {
          opacity: 255
        }).start();
      };
      GameHud.prototype.statusUpdate = function(dataId) {
        if (!this.playerInfoDialog) return;
        var data = Logic_1.default.getPlayerDataById(dataId);
        this.playerInfoDialog.refreshDialog(data, data.EquipmentTotalData, data.StatusTotalData);
      };
      GameHud.prototype.showDamageCorner = function() {
        if (!this.damageCorner) return;
        this.damageCorner.stopAllActions();
        this.damageCorner.opacity = 255;
        this.damageCorner.scale = 1;
        cc.tween(this.damageCorner).parallel(cc.tween(this.damageCorner).to(.5, {
          scale: 1.05
        }), cc.tween(this.damageCorner).to(1, {
          opacity: 0
        })).start();
      };
      GameHud.prototype.ammoUpdate = function(current, max) {
        if (this.AmmoLabel) {
          this.AmmoLabel.string = (current <= 0 ? "-" : current) + "/" + (max <= 0 ? "-" : max);
          cc.tween(this.AmmoLabel.node).to(.05, {
            scale: 1.05
          }).to(.05, {
            scale: .95
          }).to(.1, {
            scale: 1.05
          }).to(.05, {
            scale: 1
          }).start();
        }
      };
      GameHud.prototype.healthBarUpdate = function(currentHealth, maxHealth) {
        this.healthBar && this.healthBar.refreshHealth(currentHealth, maxHealth);
      };
      GameHud.prototype.dreamBarUpdate = function(currentHealth, maxHealth) {
        this.dreamBar && this.dreamBar.refreshHealth(currentHealth, maxHealth);
      };
      GameHud.prototype.lifeBarUpdate = function(sanity, solid, poo, liquid, pee) {
        this.satietyView && this.satietyView.refreshPercent(sanity, solid, poo, liquid, pee);
      };
      GameHud.prototype.start = function() {};
      GameHud.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      Object.defineProperty(GameHud.prototype, "HasModalDialogShow", {
        get: function() {
          return this.settingsDialog.node.active || this.martShelvesDialog.node.active || this.cellphoneDialog.node.active || this.actionSettingDialog.node.active || this.dollMachineDialog.node.active || this.questBoardDialog.node.active || this.metalTalentDialog.node.active || this.dialogue.isShow || this.inventoryDialog.node.active;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GameHud.prototype, "IsTimeCountDialogShow", {
        get: function() {
          return this.cellphoneDialog.node.active;
        },
        enumerable: false,
        configurable: true
      });
      GameHud.prototype.closeCurrentOtherDialog = function() {
        if (this.martShelvesDialog.isShow) {
          this.martShelvesDialog.dismiss();
          return true;
        }
        if (this.cellphoneDialog.isShow) {
          this.cellphoneDialog.dismiss();
          return true;
        }
        if (this.actionSettingDialog.isShow) {
          this.actionSettingDialog.dismiss();
          return true;
        }
        if (this.dollMachineDialog.isShow) {
          this.dollMachineDialog.dismiss();
          return true;
        }
        if (this.questBoardDialog.isShow) {
          this.questBoardDialog.dismiss();
          return true;
        }
        if (this.metalTalentDialog.isShow) {
          this.metalTalentDialog.dismiss();
          return true;
        }
        if (this.inventoryDialog.isShow) {
          this.inventoryDialog.dismiss();
          return true;
        }
        if (this.dialogue.isShow) return true;
        return false;
      };
      GameHud.prototype.update = function(dt) {
        if (this.isCheckTimeDelay(dt) && this.clock && this.startCountTime) {
          this.changeTime();
          this.clock.string = "" + Utils_1.default.getPlayTime(Logic_1.default.totalTime);
        }
        this.HasModalDialogShow ? Logic_1.default.isGamePause = true : Logic_1.default.isGamePause = false;
      };
      GameHud.prototype.useItem = function() {};
      GameHud.prototype.changeTime = function() {
        if (Logic_1.default.isGamePause && !this.IsTimeCountDialogShow) return;
        Logic_1.default.totalTime += 1e3;
        Logic_1.default.isDreaming() ? Logic_1.default.dreamTime += 6e4 : Logic_1.default.realTime += 1e4;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_TIME_TICK);
      };
      GameHud.prototype.cancelOrPause = function() {
        if (!this.node) return;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        if (this.closeCurrentOtherDialog()) return;
        this.showSettingsDialog();
      };
      GameHud.prototype.showCellphoneDialog = function() {
        if (!this.cellphoneDialog) return;
        this.cellphoneDialog.isShow ? this.cellphoneDialog.dismiss() : this.cellphoneDialog.show();
      };
      GameHud.prototype.showActionSettingDialog = function() {
        if (!this.actionSettingDialog) return;
        this.actionSettingDialog.isShow ? this.actionSettingDialog.dismiss() : this.actionSettingDialog.show();
      };
      GameHud.prototype.pauseGame = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.showSettingsDialog();
      };
      GameHud.prototype.showInventoryDialog = function(id, isCast) {
        if (!this.node) return;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.inventoryDialog.isShow ? this.inventoryDialog.dismiss() : id && id.length > 0 ? this.inventoryDialog.showFurniture(id) : isCast ? this.inventoryDialog.showCast() : this.inventoryDialog.show();
      };
      GameHud.prototype.showSettingsDialog = function() {
        var _this = this;
        if (!this.node) return;
        if (this.settingsDialog.isShow) {
          this.settingsDialog.dismiss();
          cc.director.getScheduler().setTimeScale(1);
        } else {
          this.scheduleOnce(function() {
            _this.settingsDialog.isShow && !_this.settingsDialog.isAniming ? cc.director.getScheduler().setTimeScale(0) : cc.director.getScheduler().setTimeScale(1);
          }, 1);
          this.settingsDialog.show();
        }
      };
      GameHud.prototype.showMartShelvesDialog = function(type, goodsList) {
        if (!this.martShelvesDialog) return;
        if (this.martShelvesDialog.isShow) this.martShelvesDialog.dismiss(); else {
          this.martShelvesDialog.updateUI(type, goodsList);
          this.martShelvesDialog.show();
        }
      };
      GameHud.prototype.showDollMachineDialog = function() {
        if (!this.dollMachineDialog) return;
        this.dollMachineDialog.isShow ? this.dollMachineDialog.dismiss() : this.dollMachineDialog.show();
      };
      GameHud.prototype.showQuestBoardDialog = function() {
        if (!this.questBoardDialog) return;
        this.questBoardDialog.isShow ? this.questBoardDialog.dismiss() : this.questBoardDialog.show();
      };
      GameHud.prototype.showMetalTalentDialog = function() {
        if (!this.metalTalentDialog) return;
        this.metalTalentDialog.isShow ? this.metalTalentDialog.dismiss() : this.metalTalentDialog.show();
      };
      __decorate([ property(HealthBar_1.default) ], GameHud.prototype, "healthBar", void 0);
      __decorate([ property(HealthBar_1.default) ], GameHud.prototype, "dreamBar", void 0);
      __decorate([ property(HealthBar_1.default) ], GameHud.prototype, "bossHealthBar", void 0);
      __decorate([ property(PlayerInfoDialog_1.default) ], GameHud.prototype, "playerInfoDialog", void 0);
      __decorate([ property(cc.Label) ], GameHud.prototype, "level", void 0);
      __decorate([ property(cc.Label) ], GameHud.prototype, "clock", void 0);
      __decorate([ property(cc.Node) ], GameHud.prototype, "damageCorner", void 0);
      __decorate([ property(cc.Node) ], GameHud.prototype, "pasueButton", void 0);
      __decorate([ property(cc.Node) ], GameHud.prototype, "zoomButton", void 0);
      __decorate([ property(SettingsDialog_1.default) ], GameHud.prototype, "settingsDialog", void 0);
      __decorate([ property(MartShelvesDialog_1.default) ], GameHud.prototype, "martShelvesDialog", void 0);
      __decorate([ property(cc.Label) ], GameHud.prototype, "completeLabel", void 0);
      __decorate([ property(cc.Label) ], GameHud.prototype, "oilGoldLabel", void 0);
      __decorate([ property(InventoryDialog_1.default) ], GameHud.prototype, "inventoryDialog", void 0);
      __decorate([ property(cc.Node) ], GameHud.prototype, "followArrows", void 0);
      __decorate([ property(SatietyView_1.default) ], GameHud.prototype, "satietyView", void 0);
      __decorate([ property(DollMachineDialog_1.default) ], GameHud.prototype, "dollMachineDialog", void 0);
      __decorate([ property(cc.Label) ], GameHud.prototype, "AmmoLabel", void 0);
      __decorate([ property(Dialogue_1.default) ], GameHud.prototype, "dialogue", void 0);
      __decorate([ property(CellphoneDialog_1.default) ], GameHud.prototype, "cellphoneDialog", void 0);
      __decorate([ property(ActionSettingDialog_1.default) ], GameHud.prototype, "actionSettingDialog", void 0);
      __decorate([ property(QuestBoardDialog_1.default) ], GameHud.prototype, "questBoardDialog", void 0);
      __decorate([ property(MetalTalentDialog_1.default) ], GameHud.prototype, "metalTalentDialog", void 0);
      __decorate([ property(GameAlertDialog_1.default) ], GameHud.prototype, "gameAlertDialog", void 0);
      GameHud = __decorate([ ccclass ], GameHud);
      return GameHud;
    }(cc.Component);
    exports.default = GameHud;
    cc._RF.pop();
  }, {
    "../logic/HealthBar": "HealthBar",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils",
    "./../logic/EventHelper": "EventHelper",
    "./Dialogue": "Dialogue",
    "./PlayerInfoDialog": "PlayerInfoDialog",
    "./SatietyView": "SatietyView",
    "./dialog/ActionSettingDialog": "ActionSettingDialog",
    "./dialog/CellphoneDialog": "CellphoneDialog",
    "./dialog/DollMachineDialog": "DollMachineDialog",
    "./dialog/GameAlertDialog": "GameAlertDialog",
    "./dialog/InventoryDialog": "InventoryDialog",
    "./dialog/MartShelvesDialog": "MartShelvesDialog",
    "./dialog/MetalTalentDialog": "MetalTalentDialog",
    "./dialog/QuestBoardDialog": "QuestBoardDialog",
    "./dialog/SettingsDialog": "SettingsDialog"
  } ],
  GameOver: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0e28bkl25dNTqUQmquXpqGi", "GameOver");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Random_1 = require("../utils/Random");
    var ExitData_1 = require("../data/ExitData");
    var LocalStorage_1 = require("../utils/LocalStorage");
    var Utils_1 = require("../utils/Utils");
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameOver = function(_super) {
      __extends(GameOver, _super);
      function GameOver() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.info = null;
        _this.infoIcon = null;
        _this.level = null;
        _this.clock = null;
        _this.tips = null;
        _this.cursorAreaPrefab = null;
        _this.tipsStr = "";
        return _this;
      }
      GameOver_1 = GameOver;
      GameOver.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.GAMEOVER_WAKEUP, function(detail) {
          _this.node && _this.retry();
        });
      };
      GameOver.prototype.start = function() {
        var _this = this;
        var ach = LocalStorage_1.default.getAchievementData();
        this.clock && (this.clock.string = "\u5b58\u6d3b\u65f6\u95f4\uff1a" + Utils_1.default.getPlayTime(Logic_1.default.totalTime));
        this.level && (this.level.string = "");
        var dieinfo = "\u6b7b\u4e8e\u975e\u547d";
        Logic_1.default.dieFrom.name.length > 0 && (dieinfo = "\u7b2c" + ach.playerLifes + "\u6b21\u6b7b\u4ea1\uff0c\u5728 " + Logic_1.default.worldLoader.getCurrentLevelData().name + " \u88ab " + Logic_1.default.dieFrom.name + " \u51fb\u5012");
        if (this.infoIcon && Logic_1.default.dieFrom.res.length > 0) {
          this.infoIcon.spriteFrame = Logic_1.default.spriteFrameRes(Logic_1.default.dieFrom.res);
          this.infoIcon.node.width = 64;
          this.infoIcon.node.height = 64 / this.infoIcon.spriteFrame.getOriginalSize().width * this.infoIcon.spriteFrame.getOriginalSize().height;
        }
        this.info && (this.info.string = dieinfo);
        if (this.tips) {
          var count_1 = 0;
          this.tips.string = "";
          var str_1 = GameOver_1.TIPS[Random_1.default.getRandomNum(0, GameOver_1.TIPS.length - 1)];
          this.schedule(function() {
            count_1++;
            count_1 > str_1.length && (count_1 = str_1.length);
            _this.tips.string = str_1.substr(0, count_1);
          }, .05, str_1.length, .2);
        }
      };
      GameOver.prototype.retry = function() {
        Logic_1.default.resetData();
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.loadingNextLevel(ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level));
      };
      GameOver.prototype.home = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.loadScene("start");
      };
      GameOver.prototype.resetWorld = function() {};
      var GameOver_1;
      GameOver.TIPS = [ "\u5f53\u4f60\u51dd\u89c6\u6df1\u6e0a\u7684\u65f6\u5019,\u6df1\u6e0a\u4e5f\u5728\u51dd\u89c6\u7740\u4f60", "\u4e0a\u9501\u7684\u95e8\u9700\u8981\u4ece\u53e6\u4e00\u9762\u624d\u80fd\u6253\u5f00", "\u68a6\u9192\u53ef\u4ee5\u8eba\u5728\u5e8a\u4e0a\u56de\u5230\u4e0a\u4e00\u4e2a\u7fe0\u91d1\u70b9", "\u76fe\u724c\u53ef\u4ee5\u683c\u6321\u5b50\u5f39\uff0c\u751a\u81f3\u5f39\u53cd\u5bf9\u9762", "\u7fe0\u6e56\u7684\u6c34\u5f88\u51b0\u51b7", "\u5408\u7406\u4f7f\u7528\u7269\u54c1\u6765\u589e\u5f3a\u81ea\u5df1", "\u4f60\u6c89\u6c89\u5730\u7761\u7740\u4e86", "\u7535\u773c\u4f1a\u9ebb\u75f9\u4f60\u7684\u601d\u7ef4", "\u7fe0\u91d1\u70b9\u662f\u7528\u6765\u81ea\u52a8\u4fdd\u5b58\u8fdb\u5ea6\u7684", "\u6fc0\u5149\u6709\u4e00\u4e2a\u77ed\u6682\u7684\u7784\u51c6\u671f\uff0c\u6293\u4f4f\u673a\u4f1a\u518d\u8865\u4e00\u5200", "\u51b0\u9b54\u7684\u523a\u4f1a\u963b\u6321\u4f60\u7684\u884c\u52a8", "\u6b66\u58eb\u5200\u53ef\u4ee5\u53cd\u51fb\u5b50\u5f39", "\u4f60\u7684\u5934\u76d6\u9aa8\u88ab\u505a\u6210\u4e86\u7897", "\u5e7d\u5149\u5728\u547c\u5524\u7740\u4f60" ];
      __decorate([ property(cc.Label) ], GameOver.prototype, "info", void 0);
      __decorate([ property(cc.Sprite) ], GameOver.prototype, "infoIcon", void 0);
      __decorate([ property(cc.Label) ], GameOver.prototype, "level", void 0);
      __decorate([ property(cc.Label) ], GameOver.prototype, "clock", void 0);
      __decorate([ property(cc.Label) ], GameOver.prototype, "tips", void 0);
      __decorate([ property(cc.Prefab) ], GameOver.prototype, "cursorAreaPrefab", void 0);
      GameOver = GameOver_1 = __decorate([ ccclass ], GameOver);
      return GameOver;
    }(cc.Component);
    exports.default = GameOver;
    cc._RF.pop();
  }, {
    "../data/ExitData": "ExitData",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/LocalStorage": "LocalStorage",
    "../utils/Random": "Random",
    "../utils/Utils": "Utils",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  GameWorldSystem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a00e4kRmPFPe6A8ApaCWdtB", "GameWorldSystem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ECS_1 = require("../ECS");
    var ColliderSystem_1 = require("./ColliderSystem");
    var MoveSystem_1 = require("./MoveSystem");
    var GameWorldSystem = function(_super) {
      __extends(GameWorldSystem, _super);
      function GameWorldSystem(bounds, graphics) {
        var _this = _super.call(this) || this;
        GameWorldSystem.colliderSystem = new ColliderSystem_1.default(bounds, graphics);
        _this.add(GameWorldSystem.colliderSystem);
        _this.add(new MoveSystem_1.default());
        return _this;
      }
      return GameWorldSystem;
    }(ECS_1.ecs.RootSystem);
    exports.default = GameWorldSystem;
    cc._RF.pop();
  }, {
    "../ECS": "ECS",
    "./ColliderSystem": "ColliderSystem",
    "./MoveSystem": "MoveSystem"
  } ],
  GameWorld: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf0d2aiaG9EvZLNdlduf8fH", "GameWorld");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameWorld = function(_super) {
      __extends(GameWorld, _super);
      function GameWorld() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      GameWorld.prototype.start = function() {};
      GameWorld = __decorate([ ccclass ], GameWorld);
      return GameWorld;
    }(cc.Component);
    exports.default = GameWorld;
    cc._RF.pop();
  }, {} ],
  Game: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c30ffLX6hVIjoNslRhRCM7w", "Game");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("./Dungeon");
    var Logic_1 = require("./Logic");
    var GameHud_1 = require("../ui/GameHud");
    var LocalStorage_1 = require("../utils/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Game = function(_super) {
      __extends(Game, _super);
      function Game() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Game.prototype.onLoad = function() {
        Logic_1.default.settings.valueCopy(LocalStorage_1.default.getSystemSettings());
        cc.director.getScheduler().setTimeScale(1);
      };
      Object.defineProperty(Game.prototype, "Dungeon", {
        get: function() {
          this.dungeonBase || (this.dungeonBase = this.getComponentInChildren(Dungeon_1.default));
          return this.dungeonBase;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Game.prototype, "hud", {
        get: function() {
          this.hudBase || (this.hudBase = this.getComponentInChildren(GameHud_1.default));
          return this.hudBase;
        },
        enumerable: false,
        configurable: true
      });
      Game.prototype.update = function(dt) {
        this.node;
      };
      Game = __decorate([ ccclass ], Game);
      return Game;
    }(cc.Component);
    exports.default = Game;
    cc._RF.pop();
  }, {
    "../ui/GameHud": "GameHud",
    "../utils/LocalStorage": "LocalStorage",
    "./Dungeon": "Dungeon",
    "./Logic": "Logic"
  } ],
  GoodsData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9eba4cjM5REaKZZ0yKseRh9", "GoodsData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var ItemData_1 = require("./ItemData");
    var GoodsData = function(_super) {
      __extends(GoodsData, _super);
      function GoodsData() {
        var _this = _super.call(this) || this;
        _this.uuid = "";
        _this.count = 10;
        _this.item = new ItemData_1.default();
        return _this;
      }
      GoodsData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.item.valueCopy(data.item);
      };
      GoodsData.prototype.clone = function() {
        var e = new GoodsData();
        e.valueCopy(this);
        return e;
      };
      return GoodsData;
    }(BaseData_1.default);
    exports.default = GoodsData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData",
    "./ItemData": "ItemData"
  } ],
  Goods: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1cb63YYvfBC97O0f5MEeafg", "Goods");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GoodsData_1 = require("../data/GoodsData");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Goods = function(_super) {
      __extends(Goods, _super);
      function Goods() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.data = new GoodsData_1.default();
        return _this;
      }
      Goods.prototype.onLoad = function() {
        var _this = this;
        this.sprite1 = this.node.getChildByName("sprite1").getComponent(cc.Sprite);
        this.sprite2 = this.node.getChildByName("sprite2").getComponent(cc.Sprite);
        this.sprite3 = this.node.getChildByName("sprite3").getComponent(cc.Sprite);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_MART_SHELVES_DIALOG_PAY, {
            data: _this.data
          });
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        });
      };
      Goods.prototype.init = function(data) {
        this.data = data;
        this.updateSprite();
      };
      Goods.prototype.updateSprite = function() {
        if (!this.sprite1) {
          this.sprite1 = this.node.getChildByName("sprite1").getComponent(cc.Sprite);
          this.sprite2 = this.node.getChildByName("sprite2").getComponent(cc.Sprite);
          this.sprite3 = this.node.getChildByName("sprite3").getComponent(cc.Sprite);
        }
        this.sprite1.node.opacity = 255;
        this.sprite2.node.opacity = 255;
        this.sprite3.node.opacity = 255;
        this.sprite1.spriteFrame = Logic_1.default.spriteFrameRes(this.data.item.resName);
        this.sprite2.spriteFrame = Logic_1.default.spriteFrameRes(this.data.item.resName);
        this.sprite3.spriteFrame = Logic_1.default.spriteFrameRes(this.data.item.resName);
        this.sprite1.node.width = this.sprite1.spriteFrame.getRect().width;
        this.sprite2.node.width = this.sprite2.spriteFrame.getRect().width;
        this.sprite2.node.width = this.sprite2.spriteFrame.getRect().width;
        this.sprite1.node.height = this.sprite1.spriteFrame.getRect().height;
        this.sprite2.node.height = this.sprite2.spriteFrame.getRect().height;
        this.sprite2.node.height = this.sprite2.spriteFrame.getRect().height;
        this.label.string = this.data.item.nameCn + "\n$:" + this.data.item.price;
        if (2 == this.data.count) this.sprite1.node.opacity = 0; else if (1 == this.data.count) {
          this.sprite2.node.opacity = 0;
          this.sprite1.node.opacity = 0;
        } else if (this.data.count <= 0) {
          this.sprite1.node.opacity = 0;
          this.sprite2.node.opacity = 0;
          this.sprite3.node.opacity = 0;
        }
      };
      Goods.prototype.click = function() {};
      __decorate([ property(cc.Label) ], Goods.prototype, "label", void 0);
      Goods = __decorate([ ccclass ], Goods);
      return Goods;
    }(cc.Component);
    exports.default = Goods;
    cc._RF.pop();
  }, {
    "../data/GoodsData": "GoodsData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer"
  } ],
  GroundOilGoldData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "06da22NYo5DOLe6uR2c2v0D", "GroundOilGoldData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var GroundOilGoldData = function() {
      function GroundOilGoldData() {
        this.x = 0;
        this.y = 0;
        this.chapter = 0;
        this.level = 0;
        this.value = 0;
      }
      GroundOilGoldData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
      };
      GroundOilGoldData.prototype.clone = function() {
        var data = new GroundOilGoldData();
        data.valueCopy(this);
        return data;
      };
      return GroundOilGoldData;
    }();
    exports.default = GroundOilGoldData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  HealthBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4298eVZsIJFhKykTJYXRBP0", "HealthBar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HealthBar = function(_super) {
      __extends(HealthBar, _super);
      function HealthBar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.backbar = null;
        _this.label = null;
        _this.isPlayer = false;
        _this.timeDelay = 0;
        _this.hideWhenFull = false;
        return _this;
      }
      HealthBar_1 = HealthBar;
      HealthBar.prototype.onLoad = function() {
        this.progressBar = this.getComponent(cc.ProgressBar);
        this.progressBar.progress = 1;
      };
      HealthBar.prototype.start = function() {};
      HealthBar.prototype.refreshHealth = function(currentHealth, maxHealth) {
        if (this.progressBar) {
          if (this.isPlayer) {
            var length = maxHealth * HealthBar_1.ICON_SIZE;
            this.progressBar.totalLength = length < 200 ? length : 200;
            this.node.width = this.progressBar.totalLength;
          }
          this.progressBar.progress = currentHealth / maxHealth;
          this.label && (this.label.string = parseFloat(currentHealth.toFixed(1)) + "/" + maxHealth);
        }
      };
      HealthBar.prototype.shake = function() {
        cc.tween(this.node).to(.05, {
          scale: 1.05
        }).to(.05, {
          scale: .95
        }).to(.1, {
          scale: 1.05
        }).to(.05, {
          scale: 1
        }).start();
      };
      HealthBar.prototype.update = function(dt) {
        this.backbar.width = this.lerp(this.backbar.width, this.progressBar.barSprite.node.width, 1 * dt);
        this.hideWhenFull && (1 == this.progressBar.progress ? this.node.opacity = 0 : this.node.opacity = 255);
      };
      HealthBar.prototype.lerp = function(a, b, r) {
        return a + (b - a) * r;
      };
      var HealthBar_1;
      HealthBar.ICON_SIZE = 10;
      __decorate([ property(cc.Node) ], HealthBar.prototype, "backbar", void 0);
      __decorate([ property(cc.Label) ], HealthBar.prototype, "label", void 0);
      __decorate([ property ], HealthBar.prototype, "isPlayer", void 0);
      HealthBar = HealthBar_1 = __decorate([ ccclass ], HealthBar);
      return HealthBar;
    }(cc.Component);
    exports.default = HealthBar;
    cc._RF.pop();
  }, {} ],
  HighPrecisionSlider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8addeu2qsJM5LwgLht1N7Nb", "HighPrecisionSlider");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HighPrecisionSlider = function(_super) {
      __extends(HighPrecisionSlider, _super);
      function HighPrecisionSlider() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bar = null;
        _this.handle = null;
        _this.startPos = cc.v3(0, 0);
        _this.touchPos = cc.v2(0, 0);
        return _this;
      }
      Object.defineProperty(HighPrecisionSlider.prototype, "progress", {
        get: function() {
          return this.handle.x / this.bar.width + .5;
        },
        set: function(value) {
          this.handle.setPosition(cc.v3(this.bar.width * (Utils_1.default.clamp(value, 1, 0) - .5), this.handle.y));
          this.updateAttribute();
        },
        enumerable: false,
        configurable: true
      });
      HighPrecisionSlider.prototype.onLoad = function() {
        var _this = this;
        this.handle.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.touchPos = event.getLocation();
          _this.startPos = _this.handle.position.clone();
        });
        this.handle.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var offset = event.getLocation().sub(_this.touchPos);
          var x = Utils_1.default.clamp(_this.startPos.x + offset.x / _this.node.parent.scale, _this.bar.width / 2, -_this.bar.width / 2);
          _this.handle.setPosition(x, 0);
          _this.updateAttribute();
        });
      };
      HighPrecisionSlider.prototype.init = function() {};
      HighPrecisionSlider.prototype.setSelectorCallback = function(callback) {
        this.selectorCallback = callback;
        this.updateAttribute();
      };
      HighPrecisionSlider.prototype.selectRandom = function() {
        this.handle.x = this.bar.width * (Math.random() - .5);
        this.updateAttribute();
      };
      HighPrecisionSlider.prototype.updateAttribute = function() {
        this.selectorCallback && this.selectorCallback(this.handle.x / this.bar.width + .5);
      };
      __decorate([ property(cc.Node) ], HighPrecisionSlider.prototype, "bar", void 0);
      __decorate([ property(cc.Node) ], HighPrecisionSlider.prototype, "handle", void 0);
      HighPrecisionSlider = __decorate([ ccclass ], HighPrecisionSlider);
      return HighPrecisionSlider;
    }(cc.Component);
    exports.default = HighPrecisionSlider;
    cc._RF.pop();
  }, {
    "../utils/Utils": "Utils"
  } ],
  HitBlood: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7c05ko9rFCI4QiNRcOjHhC", "HitBlood");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("../ecs/component/MoveComponent");
    var Logic_1 = require("../logic/Logic");
    var Random_1 = require("../utils/Random");
    var IndexZ_1 = require("../utils/IndexZ");
    var EventHelper_1 = require("../logic/EventHelper");
    var BaseNodeComponent_1 = require("../base/BaseNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HitBlood = function(_super) {
      __extends(HitBlood, _super);
      function HitBlood() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.root = null;
        _this.shadow = null;
        _this.spriteIndex = 0;
        _this.rotateAngle = 0;
        _this.checkTimeDelay = 0;
        return _this;
      }
      HitBlood_1 = HitBlood;
      HitBlood.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.init();
      };
      HitBlood.prototype.onEnable = function() {
        this.init();
      };
      HitBlood.prototype.init = function() {
        var _this = this;
        this.node.scale = .5 + Random_1.default.rand();
        this.spriteIndex = Logic_1.default.getRandomNum(0, HitBlood_1.SPRITES.length - 1);
        this.rotateAngle = 0;
        var r = Logic_1.default.getRandomNum(200, 255);
        var g = Logic_1.default.getRandomNum(0, 55);
        var b = Logic_1.default.getRandomNum(0, 55);
        this.sprite.node.color = cc.color(r, g, b);
        this.sprite.node.opacity = 255;
        this.updateSprite();
        this.unscheduleAllCallbacks();
        cc.tween(this.sprite.node).delay(5).to(.5, {
          opacity: 0
        }).call(function() {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.POOL_DESTORY_HIT_BLOOD, {
            paperNode: _this.node
          });
        }).start();
      };
      HitBlood.prototype.randomColor = function() {};
      HitBlood.prototype.updateSprite = function() {
        this.spriteIndex > HitBlood_1.SPRITES.length - 1 && (this.spriteIndex = 0);
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(HitBlood_1.SPRITES[this.spriteIndex]);
        this.shadow.spriteFrame = Logic_1.default.spriteFrameRes(HitBlood_1.SPRITES[this.spriteIndex]);
        this.spriteIndex++;
      };
      HitBlood.prototype.rotateSprite = function() {
        this.rotateAngle > 360 && (this.rotateAngle = 0);
        this.sprite.node.angle = this.rotateAngle;
        this.shadow.node.angle = this.rotateAngle;
        this.rotateAngle++;
      };
      HitBlood.prototype.changeZIndex = function() {
        var offsetY = this.entity.Transform.base;
        offsetY > 0 && (offsetY += 500);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(cc.v3(this.node.position.x, this.node.position.y - offsetY));
      };
      HitBlood.prototype.update = function(dt) {
        var y = this.root.y - this.entity.Transform.base;
        y < 0 && (y = 0);
        var scale = 1 - y / 64;
        this.shadow.node.scale = scale < .5 ? .5 : scale;
        y > 0 && this.rotateSprite();
        this.isCheckTimeDelay(dt) && y > 0 && this.updateSprite();
      };
      HitBlood.prototype.fly = function(fromPos, isReverse) {
        this.changeZIndex();
        this.entity.NodeRender.root = this.root;
        this.entity.Move.linearVelocityZ = 2;
        this.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY / 10;
        var speed = isReverse ? Logic_1.default.getRandomNum(5, 8) : Logic_1.default.getRandomNum(2, 5);
        var x = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        var y = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        if (fromPos) {
          var p = isReverse ? this.node.position.sub(fromPos) : fromPos.sub(this.node.position);
          p = cc.v3(cc.v2(p.normalize()).rotate(Logic_1.default.getRandomNum(-45, 45) * Math.PI / 180)).normalize().mul(speed);
          x = p.x;
          y = p.y;
        }
        this.entity.Move.linearVelocity = cc.v2(x, y);
        this.entity.Move.damping = 3;
      };
      HitBlood.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      var HitBlood_1;
      HitBlood.SPRITES = [ "paper0", "paper1", "paper2", "paper3" ];
      __decorate([ property(cc.Sprite) ], HitBlood.prototype, "sprite", void 0);
      __decorate([ property(cc.Node) ], HitBlood.prototype, "root", void 0);
      __decorate([ property(cc.Sprite) ], HitBlood.prototype, "shadow", void 0);
      HitBlood = HitBlood_1 = __decorate([ ccclass ], HitBlood);
      return HitBlood;
    }(BaseNodeComponent_1.default);
    exports.default = HitBlood;
    cc._RF.pop();
  }, {
    "../base/BaseNodeComponent": "BaseNodeComponent",
    "../ecs/component/MoveComponent": "MoveComponent",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../utils/IndexZ": "IndexZ",
    "../utils/Random": "Random"
  } ],
  IceDemonThron: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "24e5dr3bslGlZZLL6MjYCjj", "IceDemonThron");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var StatusManager_1 = require("../manager/StatusManager");
    var FromData_1 = require("../data/FromData");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var IceDemonThron = function(_super) {
      __extends(IceDemonThron, _super);
      function IceDemonThron() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isUp = false;
        _this.isAuto = true;
        _this.isUping = false;
        return _this;
      }
      IceDemonThron.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.isUp = false;
        var mat = this.node.getChildByName("thron").getComponent(cc.Sprite).getMaterial(0);
        mat.setProperty("addColor", cc.color(194, 255, 255));
        this.entity && this.entity.Move && (this.entity.Move.isStatic = true);
      };
      IceDemonThron.prototype.fall = function() {
        this.anim = this.getComponent(cc.Animation);
        this.anim.play();
        this.isUping = true;
      };
      IceDemonThron.prototype.ThronUp = function() {
        var _this = this;
        this.isUp = true;
        this.scheduleOnce(function() {
          _this.isUp = false;
        }, .1);
        this.scheduleOnce(function() {
          _this.node && _this.destroyEntityNode();
        }, 2);
      };
      IceDemonThron.prototype.start = function() {};
      IceDemonThron.prototype.onColliderEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        !target || this.isAuto || this.isUping || this.fall();
      };
      IceDemonThron.prototype.onColliderStay = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isUp && this.isValid) {
          this.isUp = false;
          var from = FromData_1.default.getClone("\u51b0\u523a", "bossicethron02", this.node.position);
          target.takeDamage(new DamageData_1.default(3), from) && target.addStatus(StatusManager_1.default.FROZEN, from);
        }
      };
      IceDemonThron = __decorate([ ccclass ], IceDemonThron);
      return IceDemonThron;
    }(BaseColliderComponent_1.default);
    exports.default = IceDemonThron;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils"
  } ],
  IceDemon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4043fv41gFB1o18Orugu9B9", "IceDemon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("./../ecs/component/MoveComponent");
    var Dungeon_1 = require("../logic/Dungeon");
    var Shooter_1 = require("../logic/Shooter");
    var DamageData_1 = require("../data/DamageData");
    var StatusManager_1 = require("../manager/StatusManager");
    var Boss_1 = require("./Boss");
    var NextStep_1 = require("../utils/NextStep");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var AreaOfEffectData_1 = require("../data/AreaOfEffectData");
    var IndexZ_1 = require("../utils/IndexZ");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var MagicIce_1 = require("../talent/MagicIce");
    var Logic_1 = require("../logic/Logic");
    var CCollider_1 = require("../collider/CCollider");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var IceDemon = function(_super) {
      __extends(IceDemon, _super);
      function IceDemon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isFaceRight = true;
        _this.isMoving = false;
        _this.dashSkill = new NextStep_1.default();
        _this.thronSkill = new NextStep_1.default();
        _this.defenceSkill = new NextStep_1.default();
        _this.meleeSkill = new NextStep_1.default();
        _this.groundThron = null;
        _this.selfThron = null;
        _this.magicice = null;
        _this.actionTimeDelay = 0;
        return _this;
      }
      IceDemon.prototype.init = function(type) {};
      IceDemon.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter = this.node.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.shooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "bossicepart01", this.node.position));
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
      };
      IceDemon.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      IceDemon.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        var isHalf = this.data.currentHealth < this.data.Common.MaxHealth / 2;
        this.defence(isHalf);
        if (this.defenceSkill.IsExcuting) AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_HIT); else {
          var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
          AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        }
        return true;
      };
      IceDemon.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        cc.tween(this.node).to(3, {
          opacity: 0
        }).start();
        this.sc.isDied = true;
        this.anim.play("IceDemonDefence");
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      IceDemon.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.entity.Transform.position = Dungeon_1.default.fixOuterMap(this.entity.Transform.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position);
        this.changeZIndex();
        var pos = this.getMovePos();
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        var isHalf = this.data.currentHealth < this.data.Common.MaxHealth / 2;
        playerDis < 100 && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
        !isHalf || this.magicice.isShow || this.defenceSkill.IsInCooling || this.magicice.showIce();
        !(playerDis < 200) || this.defenceSkill.IsExcuting || this.meleeSkill.IsExcuting || this.thronSkill.IsExcuting || this.dashSkill.IsExcuting || this.attack();
        this.meleeSkill.IsExcuting || this.defenceSkill.IsExcuting || this.thronSkill.IsExcuting || this.dash();
        this.meleeSkill.IsExcuting || this.defenceSkill.IsExcuting || this.dashSkill.IsExcuting || this.thronGround(isHalf);
        if (!pos.equals(cc.Vec3.ZERO) && !this.meleeSkill.IsExcuting && !this.defenceSkill.IsExcuting && !this.thronSkill.IsExcuting && !this.dashSkill.IsExcuting && playerDis > 60) {
          pos = pos.normalizeSelf();
          this.move(pos, 5);
        }
      };
      IceDemon.prototype.getMovePos = function() {
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos);
        pos.y += 32;
        pos = pos.sub(this.node.position);
        var h = pos.x;
        this.isFaceRight = h > 0;
        return pos;
      };
      IceDemon.prototype.thronGround = function(isHalf) {
        var _this = this;
        this.thronSkill.next(function() {
          _this.thronSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("IceDemonThron");
          var count = 1;
          _this.scheduleOnce(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_THRON);
          }, 1);
          _this.scheduleOnce(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_THRON);
          }, 2);
          _this.schedule(function() {
            var p = _this.pos.clone();
            var ps = [ cc.v3(p.x, p.y + count), cc.v3(p.x, p.y - count), cc.v3(p.x + count, p.y + count), cc.v3(p.x + count, p.y - count), cc.v3(p.x + count, p.y), cc.v3(p.x - count, p.y), cc.v3(p.x - count, p.y + count), cc.v3(p.x - count, p.y - count) ];
            for (var i = 0; i < ps.length; i++) {
              var d = new DamageData_1.default();
              var pos = Dungeon_1.default.getPosInMap(ps[i]).subSelf(_this.getCenterPosition());
              d.physicalDamage = 5;
              _this.shooter.dungeon = _this.dungeon;
              _this.shooter.actor = _this;
              _this.shooter.fireAoe(_this.selfThron, new AreaOfEffectData_1.default().init(0, 2, .4, 4, IndexZ_1.default.getActorZIndex(Dungeon_1.default.getPosInMap(ps[i])), true, true, true, false, true, d, FromData_1.default.getClone("\u51b0\u523a", "bossicethron02", pos), [ StatusManager_1.default.FROZEN ]), pos, 0, null, true);
            }
            count++;
          }, .2, isHalf ? 7 : 5, 1);
          isHalf && _this.scheduleOnce(function() {
            var p = _this.pos.clone();
            var ps = [ cc.v3(p.x + 2, p.y + 1), cc.v3(p.x + 2, p.y - 1), cc.v3(p.x - 2, p.y + 1), cc.v3(p.x - 2, p.y - 1), cc.v3(p.x + 4, p.y + 2), cc.v3(p.x + 4, p.y - 2), cc.v3(p.x - 4, p.y + 2), cc.v3(p.x - 4, p.y - 2), cc.v3(p.x + 5, p.y + 3), cc.v3(p.x + 5, p.y - 3), cc.v3(p.x - 5, p.y + 3), cc.v3(p.x - 5, p.y - 3), cc.v3(p.x + 6, p.y + 2), cc.v3(p.x + 6, p.y - 2), cc.v3(p.x - 6, p.y + 2), cc.v3(p.x - 6, p.y - 2), cc.v3(p.x + 6, p.y + 4), cc.v3(p.x + 6, p.y - 4), cc.v3(p.x - 6, p.y + 4), cc.v3(p.x - 6, p.y - 4), cc.v3(p.x + 1, p.y + 2), cc.v3(p.x + 1, p.y - 2), cc.v3(p.x - 1, p.y + 2), cc.v3(p.x - 1, p.y - 2), cc.v3(p.x + 2, p.y + 4), cc.v3(p.x + 2, p.y - 4), cc.v3(p.x - 2, p.y + 4), cc.v3(p.x - 2, p.y - 4), cc.v3(p.x + 3, p.y + 5), cc.v3(p.x + 3, p.y - 5), cc.v3(p.x - 3, p.y + 5), cc.v3(p.x - 3, p.y - 5), cc.v3(p.x + 2, p.y + 6), cc.v3(p.x + 2, p.y - 6), cc.v3(p.x - 2, p.y + 6), cc.v3(p.x - 2, p.y - 6), cc.v3(p.x + 4, p.y + 6), cc.v3(p.x + 4, p.y - 6), cc.v3(p.x - 4, p.y + 6), cc.v3(p.x - 4, p.y - 6) ];
            for (var i = 0; i < ps.length; i++) {
              var d = new DamageData_1.default();
              var pos = Dungeon_1.default.getPosInMap(ps[i]).subSelf(_this.getCenterPosition());
              d.physicalDamage = 5;
              _this.shooter.dungeon = _this.dungeon;
              _this.shooter.actor = _this;
              _this.shooter.fireAoe(_this.selfThron, new AreaOfEffectData_1.default().init(0, 2, .4, 4, IndexZ_1.default.getActorZIndex(Dungeon_1.default.getPosInMap(ps[i])), true, true, true, false, true, d, FromData_1.default.getClone("\u51b0\u523a", "bossicethron02", pos), [ StatusManager_1.default.FROZEN ]), pos, 0, null, true);
            }
          }, 1.5);
          _this.scheduleOnce(function() {
            _this.thronSkill.IsExcuting = false;
          }, 4);
        }, 15, true);
      };
      IceDemon.prototype.thronSelf = function() {
        this.scheduleOnce(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_ICETHRON);
        }, 1);
        var angles = [ 0, 45, 90, 135, 180, 225, 270, 315 ];
        var disdance = 40;
        var posRight = [ cc.v3(0, disdance), cc.v3(-disdance / 2, disdance / 2), cc.v3(-disdance, 0), cc.v3(-disdance / 2, -disdance / 2), cc.v3(0, -disdance), cc.v3(disdance / 2, -disdance / 2), cc.v3(disdance, 0), cc.v3(disdance / 2, disdance / 2) ];
        var posLeft = [ cc.v3(0, -disdance), cc.v3(-disdance / 2, -disdance / 2), cc.v3(-disdance, 0), cc.v3(-disdance / 2, disdance / 2), cc.v3(0, disdance), cc.v3(disdance / 2, disdance / 2), cc.v3(disdance, 0), cc.v3(disdance / 2, -disdance / 2) ];
        var d = new DamageData_1.default();
        d.magicDamage = 2;
        for (var i = 0; i < angles.length; i++) {
          this.shooter.dungeon = this.dungeon;
          this.shooter.actor = this;
          this.shooter.fireAoe(this.selfThron, new AreaOfEffectData_1.default().init(0, 2, .4, 3, IndexZ_1.default.OVERHEAD, true, true, true, false, true, d, FromData_1.default.getClone(this.actorName(), "bossicepart01", cc.v3(posRight[i])), [ StatusManager_1.default.FROZEN ]), cc.v3(posRight[i]), angles[i], null, true);
        }
      };
      IceDemon.prototype.attack = function() {
        var _this = this;
        this.meleeSkill.next(function() {
          _this.meleeSkill.IsExcuting = true;
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("IceDemonAttack001");
          _this.scheduleOnce(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_ATTACK);
            var pos = _this.getMovePos();
            var h = pos.x;
            var v = pos.y;
            var movement = cc.v2(h, v);
            movement = movement.normalize().mul(Utils_1.default.getDashSpeedByDistance(300 / MoveComponent_1.MoveComponent.PIXELS_PER_UNIT, _this.entity.Move.damping));
            _this.entity.Move.linearVelocity = movement;
          }, 1);
          _this.scheduleOnce(function() {
            _this.meleeSkill.IsExcuting = false;
          }, 2);
        }, 3, true);
      };
      IceDemon.prototype.dash = function() {
        var _this = this;
        this.dashSkill.next(function() {
          _this.dashSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.scheduleOnce(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_DASH);
          }, 2.5);
          _this.anim.play("IceDemonDash");
          _this.scheduleOnce(function() {
            var pos = _this.getMovePos();
            var h = pos.x;
            var v = pos.y;
            var movement = cc.v2(h, v);
            movement = movement.normalize().mul(Utils_1.default.getDashSpeedByDistance(1200 / MoveComponent_1.MoveComponent.PIXELS_PER_UNIT, _this.entity.Move.damping));
            _this.entity.Move.linearVelocity = movement;
          }, 2.4);
          _this.scheduleOnce(function() {
            _this.dashSkill.IsExcuting = false;
          }, 3);
        }, 8, true);
      };
      IceDemon.prototype.defence = function(isHalf) {
        var _this = this;
        this.defenceSkill.next(function() {
          _this.defenceSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("IceDemonDefence");
          _this.data.Common.defence = 9999;
          _this.data.Common.magicDefenceRate = 9999;
          _this.updateData();
          AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_DEFEND);
          _this.scheduleOnce(function() {
            _this.defenceSkill.IsExcuting = false;
            _this.data.Common.defence = 0;
            _this.data.Common.magicDefenceRate = 0;
            _this.updateData();
          }, 3);
          if (isHalf) {
            _this.magicice.isShow && _this.magicice.breakIce();
            _this.thronSelf();
          }
        }, 6, true);
      };
      IceDemon.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.actor = this;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle);
      };
      IceDemon.prototype.showBoss = function() {
        this.sc.isShow = true;
        this.entity.NodeRender.node = this.node;
        this.entity.Move.damping = 6;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      IceDemon.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      IceDemon.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.sc.isDied && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
        this.node.scaleX = this.isFaceRight ? 1 : -1;
      };
      IceDemon.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.node.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.normalize().mul(speed);
        this.entity.Move.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.isMoving ? this.anim.getAnimationState("IceDemonWalk").isPlaying || this.anim.playAdditive("IceDemonWalk") : this.anim.getAnimationState("IceDemonWalk").isPlaying && this.anim.play("IceDemonIdle");
        this.changeZIndex();
      };
      IceDemon.prototype.onColliderEnter = function(other, self) {
        if (self.tag == CCollider_1.default.TAG.BOSS_HIT) {
          if (other.tag == CCollider_1.default.TAG.PLAYER_HIT) return;
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
          if (target && (this.meleeSkill.IsExcuting || this.dashSkill.IsExcuting) && !this.sc.isDied) {
            var d = new DamageData_1.default();
            d.physicalDamage = 8;
            var from = FromData_1.default.getClone(this.actorName(), "bossicepart01", this.node.position);
            target.takeDamage(d, from, this) && target.addStatus(StatusManager_1.default.FROZEN, from);
          }
        }
      };
      IceDemon.prototype.actorName = function() {
        return "\u51b0\u9b54";
      };
      __decorate([ property(cc.Prefab) ], IceDemon.prototype, "groundThron", void 0);
      __decorate([ property(cc.Prefab) ], IceDemon.prototype, "selfThron", void 0);
      __decorate([ property(MagicIce_1.default) ], IceDemon.prototype, "magicice", void 0);
      IceDemon = __decorate([ ccclass ], IceDemon);
      return IceDemon;
    }(Boss_1.default);
    exports.default = IceDemon;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/AreaOfEffectData": "AreaOfEffectData",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../manager/StatusManager": "StatusManager",
    "../talent/MagicIce": "MagicIce",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/NextStep": "NextStep",
    "../utils/Utils": "Utils",
    "./../ecs/component/MoveComponent": "MoveComponent",
    "./Boss": "Boss"
  } ],
  IceThron: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "732e0QfOMxFu5eXTn+nHJEI", "IceThron");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var FromData_1 = require("../data/FromData");
    var StatusManager_1 = require("../manager/StatusManager");
    var IndexZ_1 = require("../utils/IndexZ");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var IceThron = function(_super) {
      __extends(IceThron, _super);
      function IceThron() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hasTargetMap = new Map();
        _this.isAttacking = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      IceThron.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.entity && this.entity.Move && (this.entity.Move.isStatic = true);
      };
      IceThron.prototype.start = function() {};
      IceThron.prototype.AnimFinish = function() {
        var _this = this;
        this.isAttacking = false;
        this.scheduleOnce(function() {
          _this.node && _this.destroyEntityNode();
        }, 1);
      };
      IceThron.prototype.show = function(player, angle, distance, scale) {
        this.player = player;
        this.node.active = true;
        this.node.parent = player.node.parent;
        this.node.setPosition(this.getPlayerPosition(player, angle, distance));
        this.node.scale = scale;
        angle > 90 && angle < 270 && (this.node.scaleX = -this.node.scaleX);
        this.isAttacking = true;
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      IceThron.prototype.getPlayerPosition = function(player, angleOffset, distance) {
        var hv = player.Hv.clone();
        var pos = cc.v3(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180)).normalizeSelf();
        return player.node.position.clone().addSelf(pos.mulSelf(distance));
      };
      IceThron.prototype.onColliderStay = function(other, self) {
        if (self.radius > 0 && this.isAttacking) if (this.hasTargetMap.has(other.id) && this.hasTargetMap.get(other.id) > 0) this.hasTargetMap.set(other.id, this.hasTargetMap.get(other.id) + 1); else {
          this.hasTargetMap.set(other.id, 1);
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other, true);
          target && this.attacking(other.node);
        }
      };
      IceThron.prototype.attacking = function(attackTarget) {
        if (!attackTarget) return;
        var damage = new DamageData_1.default();
        var status = StatusManager_1.default.FROZEN;
        var d = 4;
        damage.magicDamage = d;
        var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget, true);
        if (target && !target.sc.isDied) {
          var fromData = FromData_1.default.getClone("\u51b0\u523a", "bossicethron02", this.node.position);
          target.takeDamage(damage, fromData);
          target.addStatus(status, fromData);
        }
      };
      IceThron.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .5) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      IceThron.prototype.update = function(dt) {
        this.isCheckTimeDelay(dt) && this.hasTargetMap.clear();
      };
      IceThron = __decorate([ ccclass ], IceThron);
      return IceThron;
    }(BaseColliderComponent_1.default);
    exports.default = IceThron;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/IndexZ": "IndexZ"
  } ],
  IndexZ: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee2b0v0Hy5Er7bVWcKf3jFS", "IndexZ");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IndexZ = function() {
      function IndexZ() {}
      IndexZ.getActorZIndex = function(pos) {
        var index = IndexZ.ACTOR + 3e3 - pos.y;
        return index;
      };
      IndexZ.BACKGROUND = 100;
      IndexZ.BACKGROUNDFLOOR = 300;
      IndexZ.DOORWALLBEHIND = 400;
      IndexZ.BASE = 500;
      IndexZ.FLOOR = 600;
      IndexZ.WATER = 610;
      IndexZ.KRAKENBODY = 520;
      IndexZ.DARKNESS = 650;
      IndexZ.WALL = 700;
      IndexZ.WALLCORNER = 800;
      IndexZ.WALLINTERNAL = 900;
      IndexZ.ACTOR = 2e3;
      IndexZ.OVERHEAD = 6e3;
      IndexZ.ROOF = 6100;
      IndexZ.SHADOW = 6200;
      IndexZ.FOG = 6500;
      IndexZ.UI = 7e3;
      return IndexZ;
    }();
    exports.default = IndexZ;
    cc._RF.pop();
  }, {} ],
  InputComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9625ac+//dMqqAiex6GDUXi", "InputComponent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.InputComponent = void 0;
    var ECS_1 = require("../ECS");
    var InputComponent = function(_super) {
      __extends(InputComponent, _super);
      function InputComponent() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      InputComponent.prototype.reset = function() {};
      InputComponent = __decorate([ ECS_1.ecs.register("Input") ], InputComponent);
      return InputComponent;
    }(ECS_1.ecs.IComponent);
    exports.InputComponent = InputComponent;
    cc._RF.pop();
  }, {
    "../ECS": "ECS"
  } ],
  InputSystem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "457d5Kq4DZGLqTyaRpFcFFM", "InputSystem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../../logic/EventHelper");
    var InputComponent_1 = require("../component/InputComponent");
    var ECS_1 = require("../ECS");
    var InputSystem = function(_super) {
      __extends(InputSystem, _super);
      function InputSystem() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      InputSystem.prototype.init = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_MOVE, function(detail) {
          _this.playerAction(detail.dir, detail.pos, detail.dt);
        });
      };
      InputSystem.prototype.filter = function() {
        return ECS_1.ecs.allOf(InputComponent_1.InputComponent);
      };
      InputSystem.prototype.update = function(entities) {};
      InputSystem.prototype.playerAction = function(dir, pos, dt) {};
      return InputSystem;
    }(ECS_1.ecs.ComblockSystem);
    exports.default = InputSystem;
    cc._RF.pop();
  }, {
    "../../logic/EventHelper": "EventHelper",
    "../ECS": "ECS",
    "../component/InputComponent": "InputComponent"
  } ],
  InteractBuilding: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7b8abAQqgxLbKCSpiTgLOQk", "InteractBuilding");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var Building_1 = require("./Building");
    var EventHelper_1 = require("../logic/EventHelper");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Item_1 = require("../item/Item");
    var IndexZ_1 = require("../utils/IndexZ");
    var DamageData_1 = require("../data/DamageData");
    var Boss_1 = require("../boss/Boss");
    var AvatarData_1 = require("../data/AvatarData");
    var CommonData_1 = require("../data/CommonData");
    var FromData_1 = require("../data/FromData");
    var StatusManager_1 = require("../manager/StatusManager");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var Box_1 = require("./Box");
    var CCollider_1 = require("../collider/CCollider");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var NormalBuilding_1 = require("./NormalBuilding");
    var MapManager_1 = require("../manager/MapManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var InteractBuilding = function(_super) {
      __extends(InteractBuilding, _super);
      function InteractBuilding() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.decorateType = 0;
        _this.resName = "decorate000";
        _this.root = null;
        _this.shadow = null;
        _this.isTaken = false;
        _this.isAttacking = false;
        _this.isThrowing = false;
        _this.isLift = false;
        _this.isAniming = false;
        _this.hasTargetMap = new Map();
        _this.saveTimeDelay = 0;
        return _this;
      }
      InteractBuilding.prototype.onLoad = function() {
        this.sprite = this.root.getChildByName("sprite").getComponent(cc.Sprite);
        this.shadow = this.node.getChildByName("shadow");
      };
      InteractBuilding.prototype.start = function() {};
      InteractBuilding.prototype.init = function(isInteract, decorateType) {
        this.decorateType = decorateType;
        this.data.interact = isInteract ? 1 : 0;
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          this.resName = "decorate000" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER01:
          this.resName = "decorate010" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER02:
          this.resName = "decorate020" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER03:
          this.resName = "decorate030" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          this.resName = "decorate040" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER099:
          this.resName = "decorate000" + this.decorateType;
        }
        this.updateCollider();
        this.changeRes(this.resName);
      };
      InteractBuilding.prototype.updateCollider = function() {
        var spriteFrame = Logic_1.default.spriteFrameRes(this.resName);
        var width = spriteFrame.getOriginalSize().width * this.sprite.node.scale;
        var height = spriteFrame.getOriginalSize().height * this.sprite.node.scale / 3;
        var physicCollider = this.getComponent(CCollider_1.default);
        0 == this.sprite.node.angle ? physicCollider.setSize(cc.size(width, height), height) : physicCollider.setSize(cc.size(height, width), width);
        this.entity.Move.damping = this.isThrowing ? 1 : 2;
        physicCollider.sensor = this.data.currentHealth <= 0;
        physicCollider.bounce = 2;
        this.entity.NodeRender.root = this.root;
      };
      InteractBuilding.prototype.changeRes = function(resName, suffix) {
        this.sprite || (this.sprite = this.root.getChildByName("sprite").getComponent(cc.Sprite));
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        suffix && Logic_1.default.spriteFrameRes(resName + suffix) && (spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix));
        this.sprite.node.opacity = 255;
        this.sprite.spriteFrame = spriteFrame;
        this.mat || (this.mat = this.root.getChildByName("sprite").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("textureSizeWidth", spriteFrame.getTexture().width * this.sprite.node.scaleX);
        this.mat.setProperty("textureSizeHeight", spriteFrame.getTexture().height * this.sprite.node.scaleY);
        this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
        this.sprite.node.angle = this.data.rollover > 0 ? 90 : 0;
      };
      InteractBuilding.prototype.hitLight = function(isHit) {
        this.mat || (this.mat = this.root.getChildByName("sprite").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
      };
      InteractBuilding.prototype.highLight = function(isHigh) {
        this.mat || (this.mat = this.root.getChildByName("sprite").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("openOutline", isHigh ? 1 : 0);
      };
      InteractBuilding.prototype.takeDamage = function(damage, from, actor) {
        var _this = this;
        if (this.data.currentHealth <= 0) return;
        this.data.currentHealth -= damage.getTotalDamage();
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        if (this.data.currentHealth > 0) {
          this.hitLight(true);
          this.scheduleOnce(function() {
            _this.hitLight(false);
          }, .1);
          return true;
        }
        var pos = this.node.position.clone();
        actor && (pos = actor.node.position.clone());
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_FLOORPAPER, {
          fromPos: pos,
          targetPos: this.node.position,
          count: Logic_1.default.getRandomNum(3, 6)
        });
        this.isTaken = false;
        this.isAttacking = false;
        cc.tween(this.sprite.node).call(function() {
          _this.changeRes(_this.resName, "anim001");
          _this.hitLight(true);
        }).delay(.1).call(function() {
          _this.hitLight(false);
          _this.changeRes(_this.resName, "anim002");
        }).delay(.1).call(function() {
          _this.changeRes(_this.resName, "anim003");
        }).delay(.1).call(function() {
          _this.changeRes(_this.resName, "anim004");
          _this.sprite.node.angle = 0;
          _this.updateCollider();
          var rand4save = Logic_1.default.mapManager.getRandom4Save(Logic_1.default.mapManager.getRebornSeed(_this.seed), MapManager_1.default.RANDOM_BUILDING);
          var rand = rand4save.rand();
          rand > .6 && rand < .8 ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
            pos: _this.entity.Transform.position,
            count: rand4save.getRandomNum(1, 3)
          }) : rand >= .8 && rand < .85 ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
            pos: _this.entity.Transform.position,
            res: Item_1.default.HEART
          }) : rand >= .85 && rand < .9 && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
            pos: _this.entity.Transform.position,
            res: Item_1.default.DREAM
          });
        }).delay(10).call(function() {
          _this.reset();
        }).start();
        return true;
      };
      InteractBuilding.prototype.reset = function() {
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(cc.v3(-10, -10));
        this.node.position = this.entity.Transform.position.clone();
        this.data.currentHealth = this.data.maxHealth;
      };
      InteractBuilding.prototype.rollover = function() {
        this.data.rollover = this.data.rollover > 0 ? 0 : 1;
        cc.tween(this.sprite.node).to(.5, {
          angle: this.data.rollover > 0 ? 90 : 0
        }, {
          easing: "bounceOut"
        }).start();
        this.updateCollider();
      };
      InteractBuilding.prototype.interact = function(player, isLongPress, isAttack, isRemote) {
        if (this.data.interact < 1 || this.isAniming) return false;
        this.player = player;
        return isAttack ? this.attack() : isRemote ? this.throwOrKick() : isLongPress ? this.putDown() : this.switchMode();
      };
      InteractBuilding.prototype.taken = function(player, isLongPress) {
        if (this.data.interact < 1 || this.isAniming) return;
        this.player = player;
        if (this.isTaken) return false;
        if (isLongPress) {
          this.rollover();
          return false;
        }
        this._taken();
        return true;
      };
      InteractBuilding.prototype._taken = function() {
        if (this.isAniming) return;
        this.isTaken = true;
        this.isLift = true;
        return true;
      };
      InteractBuilding.prototype.putDown = function() {
        if (this.isAniming) return;
        this.isTaken = false;
        return true;
      };
      InteractBuilding.prototype.switchMode = function() {
        if (this.isAniming) return;
        this.isLift = !this.isLift;
        return true;
      };
      InteractBuilding.prototype.throwOrKick = function() {
        var _this = this;
        if (this.isAniming || this.isThrowing) return;
        this.isAttacking = true;
        this.isThrowing = true;
        this.isAniming = true;
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
        this.updateCollider();
        this.beatBack(this, this.player.Hv.clone(), this.isLift ? 10 : 20);
        this.scheduleOnce(function() {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            isHeavyShaking: false
          });
        }, this.isLift ? .5 : 0);
        if (this.isLift) {
          cc.tween(this.sprite.node).to(.2, {
            position: cc.v3(0, 128)
          }).to(.2, {
            position: cc.v3(0, 0)
          }, {
            easing: "bounceOut"
          }).start();
          cc.tween(this.shadow).to(.5, {
            scale: 3
          }).to(.5, {
            scale: 4
          }).start();
        }
        this.scheduleOnce(function() {
          _this.isAniming = false;
          _this.isAttacking = false;
          _this.isTaken = false;
          _this.isThrowing = false;
          _this.updateCollider();
        }, 1);
        return true;
      };
      InteractBuilding.prototype.attack = function() {
        var _this = this;
        if (!this.isTaken || this.isAniming || !this.player) return false;
        this.isAniming = true;
        this.hasTargetMap.clear();
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
        var o = 64;
        if (this.isLift) {
          var p1 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(-o / 2, 0)));
          var p2 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(o, 0)));
          cc.tween(this.sprite.node).to(.2, {
            position: cc.v3(0, 64)
          }).call(function() {
            _this.isAttacking = true;
          }).to(.1, {
            position: cc.v3(0, 96)
          }).to(.1, {
            position: cc.v3(0, 0)
          }).call(function() {
            _this.isAttacking = false;
          }).to(.2, {
            position: cc.v3(0, 96)
          }).call(function() {
            _this.isAniming = false;
          }).start();
          cc.tween(this.node).to(.2, {
            position: p1
          }).to(.2, {
            position: p2
          }).start();
        } else {
          var p1 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(0, o)));
          var p2 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(.7 * o, .7 * o)));
          var p3 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(o, 0)));
          var p4 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(.7 * o, .7 * -o)));
          var p5 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(0, -o)));
          cc.tween(this.node).to(.15, {
            position: p1
          }).call(function() {
            _this.isAttacking = true;
          }).to(.1, {
            position: p2
          }).to(.1, {
            position: p3
          }).to(.1, {
            position: p4
          }).to(.1, {
            position: p5
          }).to(.1, {
            position: p4
          }).to(.1, {
            position: p3
          }).call(function() {
            _this.isAttacking = false;
            _this.isAniming = false;
          }).start();
        }
        return true;
      };
      InteractBuilding.prototype.onColliderPreSolve = function(other, self) {
        other.tag == CCollider_1.default.TAG.PLAYER && (this.isTaken || this.isAttacking) && (self.disabledOnce = true);
      };
      InteractBuilding.prototype.onColliderStay = function(other, self) {
        if (other.tag != CCollider_1.default.TAG.PLAYER && this.player && this.isTaken && this.isAttacking) {
          other.tag != CCollider_1.default.TAG.BUILDING && other.tag != CCollider_1.default.TAG.WALL && other.tag != CCollider_1.default.TAG.WALL_TOP || this.isThrowing && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
          if (this.hasTargetMap.has(other.id) && this.hasTargetMap.get(other.id) > 0) {
            this.hasTargetMap.set(other.id, this.hasTargetMap.get(other.id) + 1);
            return false;
          }
          this.hasTargetMap.set(other.id, 1);
          return this.attacking(other);
        }
      };
      InteractBuilding.prototype.updatePosition = function() {
        this.shadow.opacity = 255;
        if (this.player && this.isTaken) {
          this.shadow.opacity = this.isThrowing ? 255 : 0;
          if (!this.isAniming) if (this.isLift) {
            this.sprite.node.position = Logic_1.default.lerpPos(this.sprite.node.position, cc.v3(0, 96), .1);
            this.entity.Transform.position = this.player.node.position.clone();
          } else {
            var p = this.player.Hv.clone().mul(64);
            var pos = this.player.node.position.add(cc.v3(p));
            this.sprite.node.position = Logic_1.default.lerpPos(this.sprite.node.position, cc.v3(0, 0), .1);
            this.entity.Transform.position = Logic_1.default.lerpPos(this.entity.Transform.position, pos, .1);
          }
        }
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.entity.Transform.position);
      };
      InteractBuilding.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      InteractBuilding.prototype.isSaveTimeDelay = function(dt) {
        this.saveTimeDelay += dt;
        if (this.saveTimeDelay > .2) {
          this.saveTimeDelay = 0;
          return true;
        }
        return false;
      };
      InteractBuilding.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.updatePosition();
        if (this.isSaveTimeDelay(dt)) {
          this.data.position = this.entity.Transform.position;
          var saveDecorate = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
          saveDecorate && saveDecorate.valueCopy(this.data);
        }
        var y = this.root.y - this.entity.Transform.base;
        y < 0 && (y = 0);
        var scale = 1 - y / 64;
        this.shadow.scale = scale < .5 ? .5 : scale;
        this.shadow.y = this.entity.Transform.base;
      };
      InteractBuilding.prototype.beatBack = function(node, hv, power) {
        var pos = hv;
        pos.equals(cc.Vec2.ZERO) && (pos = cc.v2(1, 0));
        pos = pos.normalize().mul(power);
        this.scheduleOnce(function() {
          node.entity.Move.linearVelocity = cc.v2(pos.x, pos.y);
        }, .1);
      };
      InteractBuilding.prototype.attacking = function(attackTarget) {
        if (!attackTarget || !this.isAttacking) return false;
        var damage = new DamageData_1.default();
        var common = new CommonData_1.default();
        if (this.player) {
          damage = this.player.data.getFinalAttackPoint();
          if (this.player.data.LifeData.sanity <= 0) {
            damage.physicalDamage = damage.physicalDamage > 1 ? 1 : damage.physicalDamage;
            damage.magicDamage = damage.magicDamage > 1 ? 1 : damage.magicDamage;
            damage.realDamage = damage.realDamage > 1 ? 1 : damage.realDamage;
          }
          common = this.player.data.FinalCommon;
        }
        damage.isMelee = true;
        damage.physicalDamage += this.isThrowing ? 5 : 3;
        var damageSuccess = false;
        var attackSuccess = false;
        if (attackTarget.tag == CCollider_1.default.TAG.NONPLAYER) {
          var monster = attackTarget.node.getComponent(NonPlayer_1.default);
          if (monster && !monster.sc.isDied && monster.data.isEnemy > 0) {
            damage.isBackAttack = ActorUtils_1.default.isBehindTarget(this.player, monster) && common.DamageBack > 0;
            damage.isBackAttack && (damage.realDamage += common.DamageBack);
            damageSuccess = monster.takeDamage(damage, FromData_1.default.getClone(this.actorName(), this.resName, this.node.position));
            if (damageSuccess) {
              this.beatBack(monster, this.player.Hv.clone(), 200);
              this.addTargetAllStatus(common, monster);
            }
          }
        } else if (attackTarget.tag == CCollider_1.default.TAG.BOSS) {
          var boss = attackTarget.node.getComponent(Boss_1.default);
          if (boss && !boss.sc.isDied) {
            damageSuccess = boss.takeDamage(damage, FromData_1.default.getClone(this.actorName(), this.resName, this.node.position));
            damageSuccess && this.addTargetAllStatus(common, boss);
          }
        } else if (attackTarget.tag == CCollider_1.default.TAG.BUILDING || attackTarget.tag == CCollider_1.default.TAG.WALL) {
          var box = attackTarget.node.getComponent(Box_1.default);
          if (box) {
            attackSuccess = true;
            box.breakBox();
          }
          if (!attackSuccess) {
            var hitBuilding = attackTarget.node.getComponent(NormalBuilding_1.default);
            if (hitBuilding) {
              attackSuccess = true;
              hitBuilding.takeDamage(damage, FromData_1.default.getClone(this.actorName(), this.resName, this.node.position));
            }
          }
        }
        (damageSuccess || attackSuccess) && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
          isHeavyShaking: false
        });
        damageSuccess && this.player.data.AvatarData.organizationIndex == AvatarData_1.default.TECH && this.player.updateDream(-1);
        return damageSuccess || attackSuccess;
      };
      InteractBuilding.prototype.addTargetAllStatus = function(data, target) {
        this.addTargetStatus(data.iceRate, target, StatusManager_1.default.FROZEN);
        this.addTargetStatus(data.fireRate, target, StatusManager_1.default.BURNING);
        this.addTargetStatus(data.lighteningRate, target, StatusManager_1.default.DIZZ);
        this.addTargetStatus(data.toxicRate, target, StatusManager_1.default.TOXICOSIS);
        this.addTargetStatus(data.curseRate, target, StatusManager_1.default.CURSING);
        this.addTargetStatus(data.realRate, target, StatusManager_1.default.BLEEDING);
      };
      InteractBuilding.prototype.addTargetStatus = function(rate, target, statusType) {
        Logic_1.default.getRandomNum(0, 100) < rate && target.addStatus(statusType, new FromData_1.default());
      };
      InteractBuilding.BOX = 0;
      InteractBuilding.PLANT = 1;
      InteractBuilding.BOXBREAKABLE = 2;
      __decorate([ property(cc.Node) ], InteractBuilding.prototype, "root", void 0);
      __decorate([ property(cc.Node) ], InteractBuilding.prototype, "shadow", void 0);
      InteractBuilding = __decorate([ ccclass ], InteractBuilding);
      return InteractBuilding;
    }(Building_1.default);
    exports.default = InteractBuilding;
    cc._RF.pop();
  }, {
    "../boss/Boss": "Boss",
    "../collider/CCollider": "CCollider",
    "../data/AvatarData": "AvatarData",
    "../data/CommonData": "CommonData",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../item/Item": "Item",
    "../logic/Dungeon": "Dungeon",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../logic/NonPlayer": "NonPlayer",
    "../manager/MapManager": "MapManager",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "./Box": "Box",
    "./Building": "Building",
    "./NormalBuilding": "NormalBuilding"
  } ],
  InventoryData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8d617FHrhNC9JdBH0sgyrgd", "InventoryData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var EquipmentData_1 = require("./EquipmentData");
    var ItemData_1 = require("./ItemData");
    var InventoryData = function(_super) {
      __extends(InventoryData, _super);
      function InventoryData() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.id = 0;
        _this.createTime = 0;
        _this.quality = 0;
        _this.type = 0;
        return _this;
      }
      InventoryData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        if (data.equipmentData) {
          this.equipmentData = new EquipmentData_1.default();
          this.equipmentData.valueCopy(data.equipmentData);
          this.price = this.equipmentData.price;
          this.id = this.equipmentData.id;
          this.quality = this.equipmentData.quality;
        }
        this.equipmentData = data.equipmentData;
        if (data.itemData) {
          this.itemData = new ItemData_1.default();
          this.itemData.valueCopy(data.itemData);
          this.price = this.itemData.price;
          this.id = this.itemData.id;
          this.quality = 0;
        }
        this.itemData = data.itemData;
        return this;
      };
      InventoryData.prototype.clone = function() {
        var e = new InventoryData();
        e.valueCopy(this);
        return e;
      };
      InventoryData.prototype.setEmpty = function() {
        this.type = 0;
        this.equipmentData = null;
        this.itemData = null;
        this.createTime = 0;
        this.id = 0;
        this.price = 0;
        this.quality = 0;
      };
      return InventoryData;
    }(BaseData_1.default);
    exports.default = InventoryData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData",
    "./EquipmentData": "EquipmentData",
    "./ItemData": "ItemData"
  } ],
  InventoryDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "66439SRIlRDCK2s/WLS+qDi", "InventoryDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AvatarData_1 = require("../../data/AvatarData");
    var InventoryData_1 = require("../../data/InventoryData");
    var EventHelper_1 = require("../../logic/EventHelper");
    var Item_1 = require("../../item/Item");
    var Logic_1 = require("../../logic/Logic");
    var InventoryManager_1 = require("../../manager/InventoryManager");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var InventoryItem_1 = require("../InventoryItem");
    var BaseDialog_1 = require("./BaseDialog");
    var EquipmentAndItemDialog_1 = require("./EquipmentAndItemDialog");
    var Utils_1 = require("../../utils/Utils");
    var Talent_1 = require("../../talent/Talent");
    var EquipmentData_1 = require("../../data/EquipmentData");
    var ItemData_1 = require("../../data/ItemData");
    var GameAlertDialog_1 = require("./GameAlertDialog");
    var MapManager_1 = require("../../manager/MapManager");
    var AffixManager_1 = require("../../manager/AffixManager");
    var EquipmentManager_1 = require("../../manager/EquipmentManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var InventoryDialog = function(_super) {
      __extends(InventoryDialog, _super);
      function InventoryDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.item = null;
        _this.layer = null;
        _this.layout = null;
        _this.layoutEquip = null;
        _this.layoutItem = null;
        _this.layoutOther = null;
        _this.layoutCast = null;
        _this.otherDialog = null;
        _this.castDialog = null;
        _this.toggleContainer = null;
        _this.equipmentAndItemDialogPrefab = null;
        _this.useButton = null;
        _this.dropButton = null;
        _this.saleButton = null;
        _this.castButton = null;
        _this.strengthenButton = null;
        _this.upgradeButton = null;
        _this.list = [];
        _this.equipList = [];
        _this.itemList = [];
        _this.otherList = [];
        _this.furnitureId = "";
        _this.select = null;
        _this.discountLabel = null;
        _this.currentAffixSelectIndex = -1;
        _this.discount = .5;
        _this.equipmentAndItemDialog = null;
        return _this;
      }
      InventoryDialog_1 = InventoryDialog;
      InventoryDialog.prototype.onLoad = function() {
        var _this = this;
        this.select.opacity = 0;
        this.equipmentAndItemDialog = this.initDialog();
        this.initLayout(this.layout, this.list, InventoryManager_1.default.MAX_BAG, 0);
        this.initLayout(this.layoutEquip, this.equipList, InventoryManager_1.default.MAX_EQUIP, InventoryManager_1.default.MAX_BAG);
        this.initLayout(this.layoutItem, this.itemList, InventoryManager_1.default.MAX_ITEM, InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP);
        this.initLayout(this.layoutOther, this.otherList, 0, 0);
        this.initCastLayout();
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_INVENTORY_ALL_UPDATE, function(detail) {
          if (_this.node) {
            _this.updateList(Logic_1.default.bagSortIndex);
            _this.updateEquipList();
            _this.updateItemList();
            _this.furnitureId.length > 0 && _this.updateOtherList(Logic_1.default.sortIndexs[_this.furnitureId]);
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_INVENTORY_EQUIP_UPDATE, function(detail) {
          _this.node && _this.updateEquipList();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_INVENTORY_ITEM_UPDATE, function(detail) {
          _this.node && _this.updateItemList();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_INVENTORY_SELECT_UPDATE, function(detail) {
          if (_this.node) {
            var data = Logic_1.default.inventoryMgr.inventoryList[detail.index];
            var furnitureId = detail.furnitureId;
            if (furnitureId && furnitureId.length > 0) {
              data = Logic_1.default.furnitureMap.get(furnitureId).storageList[detail.index];
              _this.otherList[detail.index].updateData(data);
            } else _this.list[detail.index].updateData(data);
          }
        });
        this.toggleContainer.toggleItems[Logic_1.default.bagSortIndex].isChecked = true;
        Logic_1.default.playerData.AvatarData.organizationIndex == AvatarData_1.default.HUNTER && (this.discount += .1);
        Talent_1.default.TALENT_010 == Logic_1.default.playerData.AvatarData.professionData.talent && (this.discount += .1);
      };
      InventoryDialog.prototype.initDialog = function() {
        var node = cc.instantiate(this.equipmentAndItemDialogPrefab);
        node.parent = this.node.getChildByName("layer");
        var dialog = node.getComponent(EquipmentAndItemDialog_1.default);
        dialog.changeBgAndAnchor(EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_NONE);
        dialog.hideDialog();
        return dialog;
      };
      InventoryDialog.prototype.initLayout = function(layout, inventoryItemList, max, extraMax) {
        layout.removeAllChildren();
        for (var i = 0; i < max; i++) {
          var data = new InventoryData_1.default();
          data.createTime = new Date().getTime();
          inventoryItemList.push(this.getItem(extraMax + i, data, layout));
        }
      };
      InventoryDialog.prototype.getItem = function(index, data, layout) {
        var prefab = cc.instantiate(this.item);
        prefab.parent = layout;
        var item = prefab.getComponent(InventoryItem_1.default);
        item.init(this, index, data);
        return item;
      };
      InventoryDialog.prototype.show = function() {
        this._show("", false);
      };
      InventoryDialog.prototype.showCast = function() {
        this._show("", true);
      };
      InventoryDialog.prototype.showFurniture = function(id) {
        this._show(id, false);
      };
      InventoryDialog.prototype._show = function(id, isCast) {
        this.layer.x = 0;
        var isFuriniture = id && id.length > 0 && !isCast;
        this.otherDialog.active = isFuriniture;
        this.furnitureId = isFuriniture ? id : "";
        this.castDialog.active = isCast;
        _super.prototype.show.call(this);
        this.updateList(Logic_1.default.bagSortIndex);
        this.updateEquipList();
        this.updateItemList();
        this.updateOtherList(isFuriniture ? Logic_1.default.sortIndexs[id] : 0);
        isFuriniture ? cc.tween(this.layer).delay(.3).to(.5, {
          x: 145
        }).start() : isCast && cc.tween(this.layer).delay(.3).to(.5, {
          x: -180
        }).start();
      };
      InventoryDialog.prototype.changeSort = function(toggle, index) {
        Logic_1.default.bagSortIndex = index;
        this.updateList(index);
      };
      InventoryDialog.prototype.changeFurnitureSort = function(toggle, index) {
        Logic_1.default.sortIndexs[this.furnitureId] = index;
        this.updateOtherList(index);
      };
      InventoryDialog.prototype.clearSelect = function() {
        this.currentSelectIndex = -1;
        this.equipmentAndItemDialog.hideDialog();
        this.useButton.active = false;
        this.dropButton.active = false;
        this.saleButton.active = false;
        this.hideCastInfo();
        this.select.opacity = 0;
      };
      InventoryDialog.prototype.showSelect = function(item) {
        this.currentSelectIndex = item.index;
        this.select.position = this.node.convertToNodeSpaceAR(item.node.convertToWorldSpaceAR(cc.Vec3.ZERO));
        this.select.opacity = 200;
        this.useButton.getComponentInChildren(cc.Label).string = this.currentSelectIndex >= InventoryManager_1.default.MAX_BAG ? "\u5378\u4e0b" : "\u88c5\u5907";
        if (this.furnitureId.length > 0) if (this.currentSelectIndex >= InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP + InventoryManager_1.default.MAX_ITEM) {
          this.dropButton.getComponentInChildren(cc.Label).string = "\u53d6\u51fa";
          this.useButton.getComponentInChildren(cc.Label).string = "\u88c5\u5907";
        } else this.dropButton.getComponentInChildren(cc.Label).string = "\u5b58\u5165"; else this.dropButton.getComponentInChildren(cc.Label).string = "\u653e\u4e0b";
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        if (item.data.type == InventoryItem_1.default.TYPE_EQUIP) {
          this.discountLabel.string = "-" + 100 * this.discount + "%(" + Math.floor(item.data.equipmentData.price * this.discount) + ")";
          this.useButton.active = true;
          this.dropButton.active = true;
          this.saleButton.active = true;
          this.showCastInfo(item.data.equipmentData);
          this.equipmentAndItemDialog.showDialog(cc.v3(420, 260), null, null, item.data.equipmentData, null);
        } else {
          this.discountLabel.string = "-" + 100 * this.discount + "%(" + Math.floor(item.data.itemData.count > 1 ? item.data.itemData.price * item.data.itemData.count * this.discount : item.data.itemData.price * this.discount) + ")";
          this.useButton.active = true;
          this.dropButton.active = true;
          this.saleButton.active = true;
          this.hideCastInfo();
          this.equipmentAndItemDialog.showDialog(cc.v3(420, 160), null, item.data.itemData, null, null);
        }
      };
      InventoryDialog.prototype.updateItemList = function() {
        var list = [];
        for (var _i = 0, _a = Logic_1.default.inventoryMgr.itemList; _i < _a.length; _i++) {
          var itemdata = _a[_i];
          var data = InventoryManager_1.default.buildItemInventoryData(itemdata);
          list.push(data);
        }
        for (var i = 0; i < InventoryManager_1.default.MAX_ITEM; i++) if (i < list.length && list[i].type != InventoryItem_1.default.TYPE_EMPTY) {
          var data = list[i];
          this.itemList[i].updateData(data);
        } else this.itemList[i].setEmpty();
      };
      InventoryDialog.prototype.updateEquipList = function() {
        var list = [];
        for (var key in Logic_1.default.inventoryMgr.equips) {
          var equipdata = Logic_1.default.inventoryMgr.equips[key];
          var needAdd = false;
          key != InventoryManager_1.default.REMOTE && key != InventoryManager_1.default.SHIELD ? needAdd = true : key == InventoryManager_1.default.REMOTE ? equipdata.equipmetType != InventoryManager_1.default.REMOTE && Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.SHIELD].equipmetType != InventoryManager_1.default.EMPTY || (needAdd = true) : key == InventoryManager_1.default.SHIELD && equipdata.equipmetType == InventoryManager_1.default.SHIELD && (needAdd = true);
          if (needAdd) {
            var data = InventoryManager_1.default.buildEquipInventoryData(equipdata);
            list.push(data);
          }
        }
        for (var i = 0; i < InventoryManager_1.default.MAX_EQUIP; i++) if (i < list.length && list[i].type != InventoryItem_1.default.TYPE_EMPTY) {
          var data = list[i];
          this.equipList[i].updateData(data);
        } else this.equipList[i].setEmpty();
      };
      InventoryDialog.prototype.updateOtherList = function(sortIndex) {
        this.clearSelect();
        this.otherList = [];
        this.layoutOther.removeAllChildren();
        if (this.furnitureId.length < 1) return;
        var furnitureData = Logic_1.default.furnitureMap.get(this.furnitureId);
        if (!furnitureData) return;
        for (var i = 0; i < furnitureData.storage; i++) {
          var data = new InventoryData_1.default();
          i < furnitureData.storageList.length && data.valueCopy(furnitureData.storageList[i]);
          this.otherList.push(this.getItem(InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP + InventoryManager_1.default.MAX_ITEM + i, data, this.layoutOther));
        }
        var list = this.getSortList(sortIndex, furnitureData.storageList);
        for (var i = 0; i < furnitureData.storage; i++) if (i < list.length && list[i].type != InventoryItem_1.default.TYPE_EMPTY) {
          var data = list[i];
          this.otherList[i].updateData(data);
        } else this.otherList[i].setEmpty();
        furnitureData.storageList = list;
      };
      InventoryDialog.prototype.updateList = function(sortIndex) {
        var _a;
        this.clearSelect();
        var list = this.getSortList(sortIndex, Logic_1.default.inventoryMgr.inventoryList);
        for (var i = 0; i < InventoryManager_1.default.MAX_BAG; i++) if (i < list.length && list[i].type != InventoryItem_1.default.TYPE_EMPTY) {
          var data = list[i];
          this.list[i].updateData(data);
        } else this.list[i].setEmpty();
        Logic_1.default.inventoryMgr.inventoryList.splice(0);
        (_a = Logic_1.default.inventoryMgr.inventoryList).push.apply(_a, list);
      };
      InventoryDialog.prototype.getSortList = function(sortIndex, inventoryList) {
        var itemlist = [];
        var equiplist = [];
        var list = [];
        for (var i = 0; i < inventoryList.length; i++) {
          var data = inventoryList[i];
          if (data.type != InventoryItem_1.default.TYPE_EMPTY) {
            list.push(data);
            data.type == InventoryItem_1.default.TYPE_EQUIP ? equiplist.push(data) : data.type == InventoryItem_1.default.TYPE_ITEM && itemlist.push(data);
          }
        }
        if (0 == sortIndex) list.sort(function(a, b) {
          return a.createTime - b.createTime;
        }); else if (1 == sortIndex) list.sort(function(a, b) {
          return a.id - b.id;
        }); else if (2 == sortIndex) {
          itemlist.sort(function(a, b) {
            return a.id - b.id;
          });
          equiplist.sort(function(a, b) {
            return b.equipmentData.quality - a.equipmentData.quality;
          });
          list = equiplist.concat(itemlist);
        } else 3 == sortIndex && list.sort(function(a, b) {
          return b.price - a.price;
        });
        return list;
      };
      InventoryDialog.getItemInsertIndex = function(itemData, list, max) {
        var insertIndex = list.length < max ? list.length : -1;
        for (var i = 0; i < list.length; i++) {
          var idata = list[i];
          if (InventoryManager_1.default.isItemEqualCanAdd(idata.itemData, itemData)) {
            insertIndex = i;
            break;
          }
        }
        if (-1 == insertIndex) return InventoryDialog_1.getEmptyInsertIndex(list, max);
        return insertIndex;
      };
      InventoryDialog.getEmptyInsertIndex = function(list, max) {
        var insertIndex = list.length < max ? list.length : -1;
        for (var i = 0; i < list.length; i++) {
          var idata = list[i];
          if (idata.type == InventoryItem_1.default.TYPE_EMPTY) {
            insertIndex = i;
            break;
          }
        }
        return insertIndex;
      };
      InventoryDialog.addEquipOrItemToBag = function(data, dataList, max, isItem, inventoryItemList) {
        var insertIndex = isItem ? this.getItemInsertIndex(data.itemData, dataList, max) : this.getEmptyInsertIndex(dataList, max);
        if (-1 == insertIndex) return false;
        var d = new InventoryData_1.default();
        d.valueCopy(data);
        if (insertIndex < dataList.length) {
          if (isItem) {
            var item1 = d.itemData;
            var item2 = dataList[insertIndex].itemData;
            if (InventoryManager_1.default.isItemEqualCanAdd(item1, item2)) {
              var count = item1.count + item2.count;
              d.itemData.valueCopy(item2);
              d.itemData.count = count;
            }
          }
          dataList[insertIndex] = d;
          inventoryItemList && inventoryItemList[insertIndex].updateData(d);
        } else {
          dataList.push(d);
          inventoryItemList && inventoryItemList[dataList.length - 1].updateData(d);
        }
        return true;
      };
      InventoryDialog.prototype.takeOffEquip = function(isDrop, isSale) {
        var isSelectEquip = this.currentSelectIndex >= InventoryManager_1.default.MAX_BAG && this.currentSelectIndex < InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP;
        if (!isSelectEquip) return false;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        var current = this.equipList[this.currentSelectIndex - InventoryManager_1.default.MAX_BAG];
        if (current.data.type == InventoryItem_1.default.TYPE_EMPTY) return false;
        var equipData = new EquipmentData_1.default();
        equipData.valueCopy(current.data.equipmentData);
        var list = Logic_1.default.inventoryMgr.inventoryList;
        if (isSale) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            count: Math.floor(equipData.price * this.discount)
          });
          AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
        } else {
          var isAdded = false;
          isDrop || (isAdded = InventoryDialog_1.addEquipOrItemToBag(current.data, list, this.list.length, false, this.list));
          if (!isAdded && this.furnitureId && this.furnitureId.length > 0) {
            list = Logic_1.default.furnitureMap.get(this.furnitureId).storageList;
            isAdded = InventoryDialog_1.addEquipOrItemToBag(current.data, list, this.otherList.length, false, this.otherList);
          }
          if (!isAdded) {
            isDrop || Utils_1.default.toast("\u7269\u54c1\u680f\u5df2\u6ee1");
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_SETEQUIPMENT, {
              res: equipData.img,
              equipmentData: equipData
            });
          }
        }
        Logic_1.default.inventoryMgr.equips[equipData.equipmetType] = new EquipmentData_1.default();
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_EQUIPMENT_REFRESH, {
          equipmetType: equipData.equipmetType
        });
        current.setEmpty();
        this.clearSelect();
        return true;
      };
      InventoryDialog.prototype.takeOffItem = function(isDrop, isSale) {
        var isSelectItem = this.currentSelectIndex >= InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP && this.currentSelectIndex < InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP + InventoryManager_1.default.MAX_ITEM;
        if (!isSelectItem) return false;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        var current = this.itemList[this.currentSelectIndex - InventoryManager_1.default.MAX_BAG - InventoryManager_1.default.MAX_EQUIP];
        if (current.data.type == InventoryItem_1.default.TYPE_EMPTY) return false;
        var itemData = new ItemData_1.default();
        itemData.valueCopy(current.data.itemData);
        var list = Logic_1.default.inventoryMgr.inventoryList;
        if (isSale) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            count: Math.floor(itemData.count > 1 ? itemData.price * itemData.count * this.discount : itemData.price * this.discount)
          });
          AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
        } else {
          var isAdded = false;
          isDrop || (isAdded = InventoryDialog_1.addEquipOrItemToBag(current.data, list, this.list.length, true, this.list));
          if (!isAdded && this.furnitureId && this.furnitureId.length > 0) {
            list = Logic_1.default.furnitureMap.get(this.furnitureId).storageList;
            isAdded = InventoryDialog_1.addEquipOrItemToBag(current.data, list, this.otherList.length, true, this.otherList);
          }
          if (!isAdded) {
            isDrop || Utils_1.default.toast("\u7269\u54c1\u680f\u5df2\u6ee1");
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              res: itemData.resName,
              count: itemData.count
            });
          }
        }
        Logic_1.default.inventoryMgr.itemList[this.currentSelectIndex - InventoryManager_1.default.MAX_BAG - InventoryManager_1.default.MAX_EQUIP] = new ItemData_1.default();
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_ITEM_REFRESH);
        current.setEmpty();
        this.clearSelect();
        return true;
      };
      InventoryDialog.prototype.takeOnEquipOrItem = function(_a) {
        var selectIndex = _a[0], dataList = _a[1], inventoryItemList = _a[2];
        if (inventoryItemList[selectIndex].data.type == InventoryItem_1.default.TYPE_EMPTY) return;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        var current = inventoryItemList[selectIndex];
        if (current.data.type == InventoryItem_1.default.TYPE_EQUIP) {
          var equipData = new EquipmentData_1.default();
          equipData.valueCopy(current.data.equipmentData);
          if (equipData.equipmetType != InventoryManager_1.default.EMPTY) {
            if (equipData.requireLevel > Logic_1.default.playerData.OilGoldData.level) {
              Utils_1.default.toast("\u5f53\u524d\u4eba\u7269\u7b49\u7ea7\u592a\u4f4e\uff0c\u65e0\u6cd5\u88c5\u5907");
              return;
            }
            current.setEmpty();
            dataList[selectIndex].setEmpty();
            if (equipData.equipmetType == InventoryManager_1.default.REMOTE) {
              InventoryDialog_1.addEquipOrItemToBag(InventoryManager_1.default.buildEquipInventoryData(Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.REMOTE]), dataList, inventoryItemList.length, false, inventoryItemList);
              InventoryDialog_1.addEquipOrItemToBag(InventoryManager_1.default.buildEquipInventoryData(Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.SHIELD]), dataList, inventoryItemList.length, false, inventoryItemList);
              Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.SHIELD].valueCopy(new EquipmentData_1.default());
              EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_EQUIPMENT_REFRESH, {
                equipmetType: InventoryManager_1.default.SHIELD
              });
            } else if (equipData.equipmetType == InventoryManager_1.default.SHIELD) {
              InventoryDialog_1.addEquipOrItemToBag(InventoryManager_1.default.buildEquipInventoryData(Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.REMOTE]), dataList, inventoryItemList.length, false, inventoryItemList);
              InventoryDialog_1.addEquipOrItemToBag(InventoryManager_1.default.buildEquipInventoryData(Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.SHIELD]), dataList, inventoryItemList.length, false, inventoryItemList);
              Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.REMOTE].valueCopy(new EquipmentData_1.default());
              EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_EQUIPMENT_REFRESH, {
                equipmetType: InventoryManager_1.default.REMOTE
              });
            } else InventoryDialog_1.addEquipOrItemToBag(InventoryManager_1.default.buildEquipInventoryData(Logic_1.default.inventoryMgr.equips[equipData.equipmetType]), dataList, inventoryItemList.length, false, inventoryItemList);
            Logic_1.default.inventoryMgr.equips[equipData.equipmetType] = equipData;
            this.updateEquipList();
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_EQUIPMENT_REFRESH, {
              equipmetType: equipData.equipmetType
            });
          }
        } else {
          var itemData = new ItemData_1.default();
          itemData.valueCopy(current.data.itemData);
          if (itemData.resName != Item_1.default.EMPTY) {
            current.setEmpty();
            dataList[selectIndex].setEmpty();
            var isRefreshed = false;
            for (var i = 0; i < Logic_1.default.inventoryMgr.itemList.length; i++) {
              var item = Logic_1.default.inventoryMgr.itemList[i];
              if (InventoryManager_1.default.isItemEqualCanAdd(item, itemData)) {
                var count = item.count + itemData.count;
                item.valueCopy(itemData);
                item.count = count;
                isRefreshed = true;
                break;
              }
            }
            if (!isRefreshed) for (var i = 0; i < Logic_1.default.inventoryMgr.itemList.length; i++) {
              var item = Logic_1.default.inventoryMgr.itemList[i];
              if (item.resName == Item_1.default.EMPTY) {
                item.valueCopy(itemData);
                isRefreshed = true;
                break;
              }
            }
            if (!isRefreshed) {
              var item0 = Logic_1.default.inventoryMgr.itemList[0].clone();
              var arr = new Array();
              for (var i = 1; i < Logic_1.default.inventoryMgr.itemList.length; i++) arr.push(Logic_1.default.inventoryMgr.itemList[i]);
              arr.push(itemData);
              for (var i = 0; i < Logic_1.default.inventoryMgr.itemList.length; i++) Logic_1.default.inventoryMgr.itemList[i].valueCopy(arr[i]);
              InventoryDialog_1.addEquipOrItemToBag(InventoryManager_1.default.buildItemInventoryData(item0), dataList, inventoryItemList.length, true, inventoryItemList);
            }
            this.updateItemList();
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_ITEM_REFRESH);
          }
        }
        this.clearSelect();
      };
      InventoryDialog.prototype.dropEquipOrItem = function(_a, isOther, isSale) {
        var selectIndex = _a[0], dataList = _a[1], inventoryItemList = _a[2];
        if (inventoryItemList[selectIndex].data.type == InventoryItem_1.default.TYPE_EMPTY) return;
        var isAdded = false;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        var current = inventoryItemList[selectIndex];
        if (current.data.type == InventoryItem_1.default.TYPE_EQUIP) {
          var equipData = new EquipmentData_1.default();
          equipData.valueCopy(current.data.equipmentData);
          if (equipData.equipmetType != InventoryManager_1.default.EMPTY) if (isSale) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
              count: Math.floor(equipData.price * this.discount)
            });
            AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
          } else {
            isOther ? isAdded = InventoryDialog_1.addEquipOrItemToBag(current.data, Logic_1.default.inventoryMgr.inventoryList, this.list.length, false, this.list) : this.furnitureId && this.furnitureId.length > 0 && (isAdded = InventoryDialog_1.addEquipOrItemToBag(current.data, Logic_1.default.furnitureMap.get(this.furnitureId).storageList, this.otherList.length, false, this.otherList));
            isAdded || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_SETEQUIPMENT, {
              res: equipData.img,
              equipmentData: equipData
            });
          }
        } else {
          var itemData = new ItemData_1.default();
          itemData.valueCopy(current.data.itemData);
          if (itemData.resName != Item_1.default.EMPTY) if (isSale) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
              count: Math.floor(itemData.count > 1 ? itemData.price * itemData.count * this.discount : itemData.price * this.discount)
            });
            AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
          } else {
            isOther ? isAdded = InventoryDialog_1.addEquipOrItemToBag(current.data, Logic_1.default.inventoryMgr.inventoryList, this.list.length, true, this.list) : this.furnitureId && this.furnitureId.length > 0 && (isAdded = InventoryDialog_1.addEquipOrItemToBag(current.data, Logic_1.default.furnitureMap.get(this.furnitureId).storageList, this.otherList.length, true, this.otherList));
            isAdded || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              res: itemData.resName,
              count: itemData.count
            });
          }
        }
        inventoryItemList[selectIndex].setEmpty();
        dataList[selectIndex].setEmpty();
        this.clearSelect();
      };
      InventoryDialog.prototype.getSelectInfo = function() {
        var inventoryItemList = this.list;
        var dataList = Logic_1.default.inventoryMgr.inventoryList;
        var selectIndex = this.currentSelectIndex;
        var isOther = this.currentSelectIndex >= InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP + InventoryManager_1.default.MAX_ITEM;
        if (isOther) {
          inventoryItemList = this.otherList;
          dataList = Logic_1.default.furnitureMap.get(this.furnitureId).storageList;
          selectIndex = this.currentSelectIndex - InventoryManager_1.default.MAX_BAG - InventoryManager_1.default.MAX_EQUIP - InventoryManager_1.default.MAX_ITEM;
        }
        return [ selectIndex, dataList, inventoryItemList ];
      };
      InventoryDialog.prototype.use = function() {
        if (-1 == this.currentSelectIndex) return;
        if (this.takeOffEquip(false, false)) return;
        if (this.takeOffItem(false, false)) return;
        this.takeOnEquipOrItem(this.getSelectInfo());
      };
      InventoryDialog.prototype.drop = function() {
        if (-1 == this.currentSelectIndex) return;
        if (this.takeOffEquip(true, false)) return;
        if (this.takeOffItem(true, false)) return;
        var isOther = this.currentSelectIndex >= InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP + InventoryManager_1.default.MAX_ITEM;
        this.dropEquipOrItem(this.getSelectInfo(), isOther, false);
      };
      InventoryDialog.prototype.sale = function() {
        if (-1 == this.currentSelectIndex) return;
        if (this.takeOffEquip(false, true)) return;
        if (this.takeOffItem(false, true)) return;
        var isOther = this.currentSelectIndex >= InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP + InventoryManager_1.default.MAX_ITEM;
        this.dropEquipOrItem(this.getSelectInfo(), isOther, true);
      };
      InventoryDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      InventoryDialog.prototype.castUpgradeStrengthenEquip = function(operatorType) {
        var _this = this;
        var isSelectEquip = this.currentSelectIndex >= InventoryManager_1.default.MAX_BAG && this.currentSelectIndex < InventoryManager_1.default.MAX_BAG + InventoryManager_1.default.MAX_EQUIP;
        var current;
        var currentData;
        if (isSelectEquip) {
          current = this.equipList[this.currentSelectIndex - InventoryManager_1.default.MAX_BAG];
          if (current.data.type == InventoryItem_1.default.TYPE_EMPTY) return;
        } else {
          var _a = this.getSelectInfo(), selectIndex = _a[0], dataList = _a[1], inventoryItemList = _a[2];
          if (-1 == this.currentSelectIndex) return;
          current = inventoryItemList[selectIndex];
          currentData = dataList[selectIndex];
        }
        AudioPlayer_1.default.play(AudioPlayer_1.default.STRIKEIRON);
        if (current.data.type == InventoryItem_1.default.TYPE_EQUIP) {
          var equipData_1 = new EquipmentData_1.default();
          equipData_1.valueCopy(current.data.equipmentData);
          if (equipData_1.equipmetType != InventoryManager_1.default.EMPTY) {
            var rand4save_1 = Logic_1.default.mapManager.getCurrentRoomRandom4Save(MapManager_1.default.RANDOM_EQUIP);
            var msg = "";
            var price_1 = 0;
            var affix = equipData_1.affixs[this.currentAffixSelectIndex];
            switch (operatorType) {
             case InventoryDialog_1.OPERATOR_CAST:
              price_1 = 1e3 * (affix.index + 1);
              msg = "\u5f53\u524d\u62e5\u6709" + Logic_1.default.coins + "\u91d1\u5e01\n\u662f\u5426\u82b1\u8d39" + price_1 + "\u91d1\u5e01\u91cd\u94f8\u8be5\u8bcd\u7f00";
              break;

             case InventoryDialog_1.OPERATOR_STRENGTHEN:
              price_1 = 1e3 * (affix.index + 1);
              msg = "\u5f53\u524d\u62e5\u6709" + Logic_1.default.coins + "\u91d1\u5e01\n\u662f\u5426\u82b1\u8d39" + price_1 + "\u91d1\u5e01\u5f3a\u5316\u8be5\u8bcd\u7f00";
              if (affix.index >= 9) {
                Utils_1.default.toast("\u5f3a\u5316\u7b49\u7ea7\u5df2\u7ecf\u6700\u9ad8", true, true);
                return;
              }
              break;

             case InventoryDialog_1.OPERATOR_UPGRADE:
              price_1 = 1e3 * (equipData_1.requireLevel + 1);
              msg = "\u5f53\u524d\u62e5\u6709" + Logic_1.default.coins + "\u91d1\u5e01\n\u662f\u5426\u82b1\u8d39" + price_1 + "\u91d1\u5e01\u5347\u7ea7\u8be5\u88c5\u5907";
              if (equipData_1.requireLevel >= Logic_1.default.playerData.OilGoldData.level) {
                Utils_1.default.toast("\u88c5\u5907\u7b49\u7ea7\u65e0\u6cd5\u9ad8\u4e8e\u4eba\u7269\u7b49\u7ea7", true, true);
                return;
              }
            }
            GameAlertDialog_1.default.show(msg, "\u786e\u5b9a", "\u53d6\u6d88", function(flag) {
              if (flag) {
                if (Logic_1.default.coins < price_1) {
                  Utils_1.default.toast("\u91d1\u5e01\u4e0d\u8db3", true, true);
                  return;
                }
                EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
                  count: -price_1
                });
                var arr = [ AudioPlayer_1.default.COIN, AudioPlayer_1.default.COIN1, AudioPlayer_1.default.COIN2 ];
                AudioPlayer_1.default.play(arr[Logic_1.default.getRandomNum(0, arr.length - 1)]);
                switch (operatorType) {
                 case InventoryDialog_1.OPERATOR_CAST:
                  AffixManager_1.default.recastEquipmentAffixs(equipData_1, _this.currentAffixSelectIndex, rand4save_1);
                  break;

                 case InventoryDialog_1.OPERATOR_STRENGTHEN:
                  AffixManager_1.default.strengthenEquipmentAffixs(equipData_1, _this.currentAffixSelectIndex);
                  break;

                 case InventoryDialog_1.OPERATOR_UPGRADE:
                  EquipmentManager_1.default.upgradeEquipment(equipData_1);
                }
                _this.updateSelectChangeEquipInfo(isSelectEquip, equipData_1, current, currentData);
                AudioPlayer_1.default.play(AudioPlayer_1.default.STRIKEIRON);
                _this.scheduleOnce(function() {
                  AudioPlayer_1.default.play(AudioPlayer_1.default.STRIKEIRON);
                  _this.scheduleOnce(function() {
                    AudioPlayer_1.default.play(AudioPlayer_1.default.STRIKEIRON1);
                    _this.scheduleOnce(function() {
                      AudioPlayer_1.default.play(AudioPlayer_1.default.STRIKEIRON);
                    }, .2);
                  }, .2);
                }, .1);
              }
            });
          }
        }
      };
      InventoryDialog.prototype.updateSelectChangeEquipInfo = function(isSelectEquip, equipmentData, inventoryItem, inventoryData) {
        if (isSelectEquip) {
          inventoryItem.data.equipmentData.valueCopy(equipmentData);
          Logic_1.default.inventoryMgr.equips[equipmentData.equipmetType].valueCopy(equipmentData);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_EQUIPMENT_REFRESH, {
            equipmetType: equipmentData.equipmetType
          });
        } else {
          inventoryItem.data.equipmentData = equipmentData.clone();
          inventoryData.equipmentData = equipmentData.clone();
        }
        this.equipmentAndItemDialog.showDialogEquipInfo(equipmentData);
        this.showCastInfo(equipmentData);
        this.selectCastAffix(this.currentAffixSelectIndex);
      };
      InventoryDialog.prototype.initCastLayout = function() {
        var _this = this;
        var _loop_1 = function(i) {
          var affix = this_1.layoutCast.children[i];
          affix.on(cc.Node.EventType.TOUCH_END, function(event) {
            AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
            _this.selectCastAffix(i);
          }, this_1);
        };
        var this_1 = this;
        for (var i = 0; i < this.layoutCast.children.length; i++) _loop_1(i);
      };
      InventoryDialog.prototype.selectCastAffix = function(index) {
        this.currentAffixSelectIndex = index;
        for (var i = 0; i < this.layoutCast.children.length; i++) {
          var affix = this.layoutCast.children[i];
          if (index == i) {
            affix.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("itemselect");
            this.castButton.active = true;
            this.strengthenButton.active = true;
          } else affix.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("dialogbggray");
        }
      };
      InventoryDialog.prototype.showCastInfo = function(data) {
        for (var _i = 0, _a = this.layoutCast.children; _i < _a.length; _i++) {
          var affix = _a[_i];
          affix.active = false;
          affix.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("dialogbggray");
          affix.getChildByName("label").getComponent(cc.Label).string = "";
        }
        for (var i = 0; i < data.affixs.length; i++) {
          this.layoutCast.children[i].active = true;
          var affix = data.affixs[i];
          this.layoutCast.children[i].getChildByName("label").getComponent(cc.Label).string = "Lv." + (9 == affix.index ? "MAX" : affix.index) + " " + affix.desc;
        }
        this.upgradeButton.active = data.requireLevel < Logic_1.default.playerData.OilGoldData.level;
        this.layoutCast.active = true;
      };
      InventoryDialog.prototype.hideCastInfo = function() {
        this.castButton.active = false;
        this.upgradeButton.active = false;
        this.strengthenButton.active = false;
        this.layoutCast.active = false;
        this.currentAffixSelectIndex = -1;
      };
      InventoryDialog.prototype.clickCast = function() {
        this.castUpgradeStrengthenEquip(InventoryDialog_1.OPERATOR_CAST);
      };
      InventoryDialog.prototype.clickStrengthen = function() {
        this.castUpgradeStrengthenEquip(InventoryDialog_1.OPERATOR_STRENGTHEN);
      };
      InventoryDialog.prototype.clickUpgrade = function() {
        this.castUpgradeStrengthenEquip(InventoryDialog_1.OPERATOR_UPGRADE);
      };
      var InventoryDialog_1;
      InventoryDialog.OPERATOR_CAST = 0;
      InventoryDialog.OPERATOR_STRENGTHEN = 1;
      InventoryDialog.OPERATOR_UPGRADE = 2;
      __decorate([ property(cc.Prefab) ], InventoryDialog.prototype, "item", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "layer", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "layout", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "layoutEquip", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "layoutItem", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "layoutOther", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "layoutCast", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "otherDialog", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "castDialog", void 0);
      __decorate([ property(cc.ToggleContainer) ], InventoryDialog.prototype, "toggleContainer", void 0);
      __decorate([ property(cc.Prefab) ], InventoryDialog.prototype, "equipmentAndItemDialogPrefab", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "useButton", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "dropButton", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "saleButton", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "castButton", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "strengthenButton", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "upgradeButton", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "select", void 0);
      __decorate([ property(cc.Label) ], InventoryDialog.prototype, "discountLabel", void 0);
      InventoryDialog = InventoryDialog_1 = __decorate([ ccclass ], InventoryDialog);
      return InventoryDialog;
    }(BaseDialog_1.default);
    exports.default = InventoryDialog;
    cc._RF.pop();
  }, {
    "../../data/AvatarData": "AvatarData",
    "../../data/EquipmentData": "EquipmentData",
    "../../data/InventoryData": "InventoryData",
    "../../data/ItemData": "ItemData",
    "../../item/Item": "Item",
    "../../logic/EventHelper": "EventHelper",
    "../../logic/Logic": "Logic",
    "../../manager/AffixManager": "AffixManager",
    "../../manager/EquipmentManager": "EquipmentManager",
    "../../manager/InventoryManager": "InventoryManager",
    "../../manager/MapManager": "MapManager",
    "../../talent/Talent": "Talent",
    "../../utils/AudioPlayer": "AudioPlayer",
    "../../utils/Utils": "Utils",
    "../InventoryItem": "InventoryItem",
    "./BaseDialog": "BaseDialog",
    "./EquipmentAndItemDialog": "EquipmentAndItemDialog",
    "./GameAlertDialog": "GameAlertDialog"
  } ],
  InventoryItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "51ad8KPmpFIULMuWCViUiMp", "InventoryItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var InventoryData_1 = require("../data/InventoryData");
    var Logic_1 = require("../logic/Logic");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var InventoryItem = function(_super) {
      __extends(InventoryItem, _super);
      function InventoryItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isSelect = false;
        _this.sprite = null;
        _this.label = null;
        _this.index = 0;
        _this.data = new InventoryData_1.default();
        return _this;
      }
      InventoryItem_1 = InventoryItem;
      InventoryItem.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.isSelect && _this.index == _this.dialog.currentSelectIndex ? _this.isSelect = false : _this.isSelect = _this.data.type != InventoryItem_1.TYPE_EMPTY;
          _this.dialog.clearSelect();
          _this.isSelect && _this.dialog.showSelect(_this);
        }, this);
      };
      InventoryItem.prototype.init = function(inventoryDialog, index, data) {
        this.dialog = inventoryDialog;
        this.index = index;
        this.isSelect = false;
        this.updateData(data);
      };
      InventoryItem.prototype.updateData = function(data) {
        this.isSelect = false;
        this.data.valueCopy(data);
        this.label.string = "";
        this.sprite.spriteFrame = null;
        this.node.color = cc.Color.WHITE;
        if (this.data.type == InventoryItem_1.TYPE_ITEM && this.data.itemData) {
          this.label.string = data.itemData.count > 0 ? "x" + data.itemData.count : "";
          this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(this.data.itemData.resName);
        } else if (this.data.equipmentData) {
          var spriteFrame = Logic_1.default.spriteFrameRes(this.data.equipmentData.img);
          this.data.equipmentData.equipmetType == InventoryManager_1.default.CLOTHES ? spriteFrame = Logic_1.default.spriteFrameRes(this.data.equipmentData.img + "anim0") : this.data.equipmentData.equipmetType == InventoryManager_1.default.HELMET ? spriteFrame = Logic_1.default.spriteFrameRes(this.data.equipmentData.img + "anim0") : this.data.equipmentData.equipmetType == InventoryManager_1.default.REMOTE && (spriteFrame = Logic_1.default.spriteFrameRes(this.data.equipmentData.img + "anim0"));
          this.sprite.spriteFrame = spriteFrame;
          var color1 = cc.color(255, 255, 255).fromHEX(this.data.equipmentData.color);
          var color2 = cc.color(255, 255, 255).fromHEX(this.data.equipmentData.titlecolor);
          this.sprite.node.color = color1;
          this.node.color = color2;
        }
      };
      InventoryItem.prototype.setEmpty = function() {
        this.data.setEmpty();
        this.label.string = "";
        this.sprite.spriteFrame = null;
        this.node.color = cc.Color.WHITE;
      };
      InventoryItem.prototype.start = function() {};
      var InventoryItem_1;
      InventoryItem.TYPE_EMPTY = 0;
      InventoryItem.TYPE_EQUIP = 1;
      InventoryItem.TYPE_ITEM = 2;
      __decorate([ property(cc.Sprite) ], InventoryItem.prototype, "sprite", void 0);
      __decorate([ property(cc.Label) ], InventoryItem.prototype, "label", void 0);
      InventoryItem = InventoryItem_1 = __decorate([ ccclass ], InventoryItem);
      return InventoryItem;
    }(cc.Component);
    exports.default = InventoryItem;
    cc._RF.pop();
  }, {
    "../data/InventoryData": "InventoryData",
    "../logic/Logic": "Logic",
    "../manager/InventoryManager": "InventoryManager"
  } ],
  InventoryManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1dc08IgWM1D6q2nqBDxwhzD", "InventoryManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentData_1 = require("../data/EquipmentData");
    var InventoryData_1 = require("../data/InventoryData");
    var ItemData_1 = require("../data/ItemData");
    var SuitData_1 = require("../data/SuitData");
    var InventoryItem_1 = require("../ui/InventoryItem");
    var Item_1 = require("../item/Item");
    var Logic_1 = require("../logic/Logic");
    var TriggerData_1 = require("../data/TriggerData");
    var FromData_1 = require("../data/FromData");
    var InventoryManager = function() {
      function InventoryManager(id) {
        this.buffer = new EquipmentData_1.default();
        this.id = "";
        this.suitMap = {};
        this.suitEquipMap = {};
        this.emptyEquipData = new EquipmentData_1.default();
        this.totalEquipData = new EquipmentData_1.default();
        this.equipAndItemTimeDelays = new Map();
        this.id = id;
        this.emptyEquipData = new EquipmentData_1.default();
        this.totalEquipData = new EquipmentData_1.default();
        this.suitMap = {};
        this.suitEquipMap = {};
        for (var _i = 0, _a = InventoryManager.EQUIP_TAGS; _i < _a.length; _i++) {
          var name = _a[_i];
          this.equips[name] || (this.equips[name] = new EquipmentData_1.default());
        }
        for (var i = 0; i < InventoryManager.MAX_ITEM; i++) if (i >= this.itemList.length) {
          var data = new ItemData_1.default();
          data.count = -1;
          this.itemList.push(data);
        }
      }
      Object.defineProperty(InventoryManager.prototype, "itemList", {
        get: function() {
          return Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099 ? Logic_1.default.playerDatas[this.id].playerItemListReality : Logic_1.default.playerDatas[this.id].playerItemList;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(InventoryManager.prototype, "inventoryList", {
        get: function() {
          return Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099 ? Logic_1.default.playerDatas[this.id].playerInventoryListReality : Logic_1.default.playerDatas[this.id].playerInventoryList;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(InventoryManager.prototype, "equips", {
        get: function() {
          return Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099 ? Logic_1.default.playerDatas[this.id].playerEquipsReality : Logic_1.default.playerDatas[this.id].playerEquips;
        },
        enumerable: false,
        configurable: true
      });
      InventoryManager.prototype.clear = function() {};
      InventoryManager.prototype.getEquipBySuit = function(e) {
        if (e && this.suitEquipMap[e.suitType]) return this.suitEquipMap[e.suitType];
        return this.emptyEquipData;
      };
      Object.defineProperty(InventoryManager.prototype, "TotalEquipData", {
        get: function() {
          return this.totalEquipData;
        },
        enumerable: false,
        configurable: true
      });
      InventoryManager.prototype.updateTotalEquipData = function() {
        var e = new EquipmentData_1.default();
        var exTriggers = [];
        var affixs = [];
        for (var key in this.equips) {
          var equip = this.equips[key];
          e.Common.add(equip.Common);
          for (var _i = 0, _a = equip.exTriggers; _i < _a.length; _i++) {
            var ex = _a[_i];
            exTriggers.push(ex);
          }
          for (var _b = 0, _c = equip.affixs; _b < _c.length; _b++) {
            var affix = _c[_b];
            affixs.push(affix);
          }
        }
        e.Common.add(this.buffer.Common);
        for (var key in this.suitEquipMap) {
          var equip = this.suitEquipMap[key];
          if (equip) {
            e.Common.add(equip.Common);
            for (var _d = 0, _e = equip.exTriggers; _d < _e.length; _d++) {
              var ex = _e[_d];
              exTriggers.push(ex);
            }
          }
        }
        e.exTriggers = exTriggers;
        e.affixs = affixs;
        e.updateFinalCommon();
        this.totalEquipData = e;
      };
      InventoryManager.prototype.refreshSuits = function() {
        this.suitMap = {};
        this.suitEquipMap = {};
        for (var key in this.equips) {
          var equip = this.equips[key];
          if (equip.suitType.length < 1) continue;
          if (this.suitMap[equip.suitType]) this.suitMap[equip.suitType].count++; else {
            var data = new SuitData_1.default();
            data.valueCopy(Logic_1.default.suits[equip.suitType]);
            data.count = 1;
            this.suitMap[equip.suitType] = data;
          }
        }
        for (var key in this.suitMap) {
          var suit = this.suitMap[key];
          var e = new EquipmentData_1.default();
          if (suit) {
            for (var i = 0; i < suit.count - 1; i++) i < suit.EquipList.length && e.add(suit.EquipList[i]);
            this.suitEquipMap[key] = e;
          }
        }
      };
      InventoryManager.isEquipTag = function(str) {
        if (!str || str.length < 1) return false;
        for (var _i = 0, _a = InventoryManager.EQUIP_TAGS; _i < _a.length; _i++) {
          var name = _a[_i];
          if (str.indexOf(name) > -1) return true;
        }
        return false;
      };
      InventoryManager.buildItemInventoryData = function(itemData) {
        var newdata = new InventoryData_1.default();
        newdata.itemData = new ItemData_1.default();
        newdata.itemData.valueCopy(itemData);
        newdata.type = itemData.resName == Item_1.default.EMPTY ? InventoryItem_1.default.TYPE_EMPTY : InventoryItem_1.default.TYPE_ITEM;
        newdata.createTime = new Date().getTime();
        newdata.id = newdata.itemData.id;
        return newdata;
      };
      InventoryManager.buildEquipInventoryData = function(equipmentData) {
        var newdata = new InventoryData_1.default();
        newdata.equipmentData = new EquipmentData_1.default();
        newdata.equipmentData.valueCopy(equipmentData);
        newdata.type = equipmentData.equipmetType == InventoryManager.EMPTY ? InventoryItem_1.default.TYPE_EMPTY : InventoryItem_1.default.TYPE_EQUIP;
        newdata.price = newdata.equipmentData.price;
        newdata.createTime = new Date().getTime();
        newdata.id = newdata.equipmentData.id;
        return newdata;
      };
      InventoryManager.isItemEqualCanAdd = function(item1, item2) {
        return item1 && item2 && item1.resName != Item_1.default.EMPTY && item1.resName == item2.resName && item1.count > 0 && item2.count > 0;
      };
      InventoryManager.prototype.getTimeDelay = function(timeDelay, interval, dt) {
        timeDelay || (timeDelay = 0);
        timeDelay += dt;
        if (timeDelay > interval) {
          timeDelay = 0;
          return timeDelay;
        }
        return timeDelay;
      };
      InventoryManager.prototype.isTimeDelay = function(dt, key, interval) {
        if (interval <= 0) return false;
        var timeDelay = -1;
        this.equipAndItemTimeDelays.set(key, this.getTimeDelay(this.equipAndItemTimeDelays.get(key), interval, dt));
        timeDelay = this.equipAndItemTimeDelays.get(key);
        return 0 == timeDelay;
      };
      InventoryManager.prototype.updateLogic = function(dt, player) {
        if (!Logic_1.default.isGamePause && player) {
          var totalData = this.TotalEquipData;
          for (var _i = 0, _a = totalData.exTriggers; _i < _a.length; _i++) {
            var d = _a[_i];
            this.isTimeDelay(dt, d.uuid, d.autoInterval) && player && player.exTriggerDo(d, TriggerData_1.default.GROUP_AUTO, TriggerData_1.default.TYPE_AUTO, FromData_1.default.getClone(totalData.nameCn, totalData.img, player.node.position), null);
          }
          for (var i = 0; i < this.itemList.length; i++) {
            var data = this.itemList[i];
            for (var _b = 0, _c = data.exTriggers; _b < _c.length; _b++) {
              var d = _c[_b];
              this.isTimeDelay(dt, "itemIndex" + i, d.autoInterval) && player && player.exTriggerDo(d, TriggerData_1.default.GROUP_AUTO, TriggerData_1.default.TYPE_AUTO, FromData_1.default.getClone(data.nameCn, data.resName, player.node.position), null);
            }
          }
        }
      };
      InventoryManager.MAX_BAG = 32;
      InventoryManager.MAX_EQUIP = 8;
      InventoryManager.MAX_ITEM = 6;
      InventoryManager.EMPTY = "empty";
      InventoryManager.WEAPON = "weapon";
      InventoryManager.REMOTE = "remote";
      InventoryManager.SHIELD = "shield";
      InventoryManager.HELMET = "helmet";
      InventoryManager.CLOTHES = "clothes";
      InventoryManager.TROUSERS = "trousers";
      InventoryManager.GLOVES = "gloves";
      InventoryManager.SHOES = "shoes";
      InventoryManager.CLOAK = "cloak";
      InventoryManager.EQUIP_TAGS = [ InventoryManager.WEAPON, InventoryManager.REMOTE, InventoryManager.SHIELD, InventoryManager.HELMET, InventoryManager.CLOTHES, InventoryManager.TROUSERS, InventoryManager.GLOVES, InventoryManager.SHOES, InventoryManager.CLOAK ];
      InventoryManager.TAG = cc.Enum({
        DEFAULT: 0,
        EQUIP: 1,
        ITEM: 2,
        CUPBOARD: 3
      });
      return InventoryManager;
    }();
    exports.default = InventoryManager;
    cc._RF.pop();
  }, {
    "../data/EquipmentData": "EquipmentData",
    "../data/FromData": "FromData",
    "../data/InventoryData": "InventoryData",
    "../data/ItemData": "ItemData",
    "../data/SuitData": "SuitData",
    "../data/TriggerData": "TriggerData",
    "../item/Item": "Item",
    "../logic/Logic": "Logic",
    "../ui/InventoryItem": "InventoryItem"
  } ],
  Inventory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b411lPIzZAv7ApO4pixeng", "Inventory");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EventHelper_1 = require("./EventHelper");
    var Logic_1 = require("./Logic");
    var EquipmentData_1 = require("../data/EquipmentData");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var Dungeon_1 = require("./Dungeon");
    var Item_1 = require("../item/Item");
    var EquipmentAndItemDialog_1 = require("../ui/dialog/EquipmentAndItemDialog");
    var LocalStorage_1 = require("../utils/LocalStorage");
    var Utils_1 = require("../utils/Utils");
    var InventoryDialog_1 = require("../ui/dialog/InventoryDialog");
    var Inventory = function(_super) {
      __extends(Inventory, _super);
      function Inventory() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.dungeon = null;
        _this.weapon = null;
        _this.remote = null;
        _this.shield = null;
        _this.helmet = null;
        _this.clothes = null;
        _this.trousers = null;
        _this.gloves = null;
        _this.shoes = null;
        _this.cloak = null;
        _this.itemsprite1 = null;
        _this.itemsprite2 = null;
        _this.itemsprite3 = null;
        _this.itemsprite4 = null;
        _this.itemsprite5 = null;
        _this.itemsprite6 = null;
        _this.itemlabel1 = null;
        _this.itemlabel2 = null;
        _this.itemlabel3 = null;
        _this.itemlabel4 = null;
        _this.itemlabel5 = null;
        _this.itemlabel6 = null;
        _this.equipmentAndItemDialogPrefab = null;
        _this.mainCamera = null;
        _this.equipmentNode = null;
        _this.dialogNode = null;
        _this.equipmentAndItemDialog = null;
        _this.equipmentGroundDialog = null;
        _this.itemGroundDialog = null;
        _this.graphics = null;
        _this.equipAndItemTimeDelays = new Map();
        _this.equipSprites = new Map();
        _this.equipCovers = new Map();
        _this.itemPositions = [];
        _this.itemCovers = [];
        _this.isInitFinish = false;
        return _this;
      }
      Inventory.prototype.onLoad = function() {
        var _this = this;
        this.equipmentNode.active = Logic_1.default.settings.showEquipDialog;
        this.equipmentGroundDialog = this.initDialog(true);
        this.itemGroundDialog = this.initDialog(true);
        this.equipmentAndItemDialog = this.initDialog(false);
        this.graphics = this.getComponent(cc.Graphics);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_CHANGEEQUIPMENT, function(detail) {
          if (_this.node) {
            _this.refreshEquipment(detail.equipmetType, detail.equipData, false, detail.isReplace);
            Logic_1.default.inventoryMgr.refreshSuits();
            Logic_1.default.inventoryMgr.updateTotalEquipData();
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_EQUIPMENT_REFRESH, function(detail) {
          if (_this.node) {
            _this.refreshEquipmentRes(detail.equipmetType);
            Logic_1.default.inventoryMgr.refreshSuits();
            Logic_1.default.inventoryMgr.updateTotalEquipData();
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_ITEM_REFRESH, function(detail) {
          _this.node && _this.refreshItemRes(Logic_1.default.inventoryMgr.itemList);
        });
        this.equipmentGroundDialog && this.equipmentGroundDialog.hideDialog();
        this.itemGroundDialog && this.itemGroundDialog.hideDialog();
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_CHANGEITEM, function(detail) {
          _this.node && _this.refreshItem(detail.itemData, detail.isReplace);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_SHOW, function(detail) {
          if (_this.equipmentGroundDialog) {
            var worldPos = detail.worldPos;
            var pos = _this.node.convertToNodeSpaceAR(worldPos);
            _this.equipmentGroundDialog.showDialog(pos.sub(_this.mainCamera.node.position), null, detail.itemData, detail.equipData, null);
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_HIDE, function(detail) {
          _this.equipmentGroundDialog && _this.equipmentGroundDialog.hideDialog();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_SHOW, function(detail) {
          if (_this.itemGroundDialog) {
            var worldPos = detail.worldPos;
            var pos = _this.node.convertToNodeSpaceAR(worldPos);
            _this.itemGroundDialog.showDialog(pos.sub(_this.mainCamera.node.position), null, detail.itemData, null, null);
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_HIDE, function(detail) {
          _this.itemGroundDialog && _this.itemGroundDialog.hideDialog();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.USEITEM_KEYBOARD, function(detail) {
          _this.userItem(detail.index);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_FADE_IN, function(detail) {
          _this.fadeIn();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_FADE_OUT, function(detail) {
          _this.fadeOut();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_EQUIPMENT_REFRESH_ALL, function(detail) {
          for (var key in Logic_1.default.inventoryMgr.equips) _this.refreshEquipment(key, Logic_1.default.inventoryMgr.equips[key].clone(), true, false);
        });
        this.remote.node.parent.active = true;
        this.shield.node.parent.active = false;
        for (var _i = 0, _a = InventoryManager_1.default.EQUIP_TAGS; _i < _a.length; _i++) {
          var name = _a[_i];
          this.equipAndItemTimeDelays.set(name, 0);
        }
        this.equipSprites.set(InventoryManager_1.default.WEAPON, this.weapon);
        this.equipSprites.set(InventoryManager_1.default.REMOTE, this.remote);
        this.equipSprites.set(InventoryManager_1.default.SHIELD, this.shield);
        this.equipSprites.set(InventoryManager_1.default.HELMET, this.helmet);
        this.equipSprites.set(InventoryManager_1.default.CLOTHES, this.clothes);
        this.equipSprites.set(InventoryManager_1.default.TROUSERS, this.trousers);
        this.equipSprites.set(InventoryManager_1.default.GLOVES, this.gloves);
        this.equipSprites.set(InventoryManager_1.default.SHOES, this.shoes);
        this.equipSprites.set(InventoryManager_1.default.CLOAK, this.cloak);
        this.isInitFinish = true;
      };
      Inventory.prototype.initDialog = function(isGround) {
        var node = cc.instantiate(this.equipmentAndItemDialogPrefab);
        node.parent = this.node;
        var dialog = node.getComponent(EquipmentAndItemDialog_1.default);
        dialog.changeBgAndAnchor(isGround ? EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_DOWN : EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_RIGHT);
        dialog.hideDialog();
        isGround || (node.parent = this.dialogNode);
        return dialog;
      };
      Inventory.prototype.showEquipment = function() {
        this.equipmentNode.active = !this.equipmentNode.active;
        Logic_1.default.settings.showEquipDialog = this.equipmentNode.active;
        LocalStorage_1.default.saveSystemSettings(Logic_1.default.settings);
      };
      Inventory.prototype.fadeOut = function() {
        if (!this.equipmentNode) return;
        this.node.opacity = 255;
        cc.tween(this.equipmentNode).to(.5, {
          opacity: 0
        }).start();
      };
      Inventory.prototype.fadeIn = function() {
        if (!this.equipmentNode) return;
        this.node.opacity = 0;
        cc.tween(this.equipmentNode).to(3, {
          opacity: 255
        }).start();
      };
      Inventory.prototype.start = function() {
        var _this = this;
        this.equipSprites.forEach(function(sprite, key) {
          sprite.spriteFrame = null;
          _this.addEquipSpriteTouchEvent(sprite, key);
          _this.equipCovers.set(key, sprite.node.parent.getChildByName("cover"));
        });
        this.refreshItemRes(Logic_1.default.inventoryMgr.itemList);
        var itemSpriteList = [ this.itemsprite1, this.itemsprite2, this.itemsprite3, this.itemsprite4, this.itemsprite5, this.itemsprite6 ];
        var itemLabelList = [ this.itemlabel1, this.itemlabel2, this.itemlabel3, this.itemlabel4, this.itemlabel5, this.itemlabel6 ];
        for (var i = 0; i < itemLabelList.length; i++) {
          this.itemPositions[i] = itemSpriteList[i].node.convertToWorldSpaceAR(cc.Vec3.ZERO);
          this.addItemSpriteTouchEvent(itemSpriteList[i], itemLabelList[i].node.parent, i);
          this.itemCovers.push(itemLabelList[i].node.parent.getChildByName("cover"));
        }
        Logic_1.default.inventoryMgr.refreshSuits();
        Logic_1.default.inventoryMgr.updateTotalEquipData();
      };
      Inventory.prototype.addEquipSpriteTouchEvent = function(sprite, equipmetType) {
        var _this = this;
        sprite.node.parent.on(cc.Node.EventType.TOUCH_START, function() {
          _this.showEquipDialog(equipmetType, sprite);
        });
        sprite.node.parent.on(cc.Node.EventType.TOUCH_END, function() {
          _this.equipmentAndItemDialog.hideDialog();
        });
        sprite.node.parent.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          _this.equipmentAndItemDialog.hideDialog();
        });
        sprite.node.parent.on(cc.Node.EventType.MOUSE_ENTER, function() {
          _this.showEquipDialog(equipmetType, sprite);
        });
        sprite.node.parent.on(cc.Node.EventType.MOUSE_LEAVE, function() {
          _this.equipmentAndItemDialog.hideDialog();
        });
      };
      Inventory.prototype.showEquipDialog = function(equipmetType, sprite) {
        if (null == sprite.spriteFrame) return;
        var equipData = new EquipmentData_1.default();
        Logic_1.default.inventoryMgr.equips[equipmetType] && (equipData = Logic_1.default.inventoryMgr.equips[equipmetType].clone());
        if (equipData.equipmetType == InventoryManager_1.default.EMPTY) return;
        var pos = this.node.convertToNodeSpaceAR(sprite.node.parent.convertToWorldSpaceAR(cc.Vec3.ZERO));
        this.equipmentAndItemDialog.showDialog(pos.add(cc.v3(-32, 0)), null, null, equipData, null, Logic_1.default.inventoryMgr, EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_RIGHT);
      };
      Inventory.prototype.addItemSpriteTouchEvent = function(sprite, node, itemIndex) {
        var _this = this;
        var isLongPress = false;
        var touchStart = false;
        node.on(cc.Node.EventType.TOUCH_START, function() {
          if (null == sprite.spriteFrame) return;
          touchStart = true;
          _this.scheduleOnce(function() {
            if (!touchStart || !Logic_1.default.inventoryMgr || !Logic_1.default.inventoryMgr.itemList || itemIndex > Logic_1.default.inventoryMgr.itemList.length - 1) return;
            isLongPress = true;
            var item = Logic_1.default.inventoryMgr.itemList[itemIndex].clone();
            if (item.resName == Item_1.default.EMPTY) return;
            var pos = _this.node.convertToNodeSpaceAR(node.convertToWorldSpaceAR(cc.Vec3.ZERO));
            _this.equipmentAndItemDialog.showDialog(pos.add(cc.v3(32, 0)), null, item, null, null, null, EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_LEFT);
          }, .3);
        });
        node.on(cc.Node.EventType.TOUCH_END, function() {
          _this.equipmentAndItemDialog.hideDialog();
          isLongPress || _this.userItem(itemIndex);
          touchStart = false;
          isLongPress = false;
        });
        node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          _this.equipmentAndItemDialog.hideDialog();
          touchStart = false;
          isLongPress = false;
        });
        node.on(cc.Node.EventType.MOUSE_ENTER, function() {
          var item = Logic_1.default.inventoryMgr.itemList[itemIndex].clone();
          if (item.resName == Item_1.default.EMPTY) return;
          var pos = _this.node.convertToNodeSpaceAR(node.convertToWorldSpaceAR(cc.Vec3.ZERO));
          _this.equipmentAndItemDialog.showDialog(pos.add(cc.v3(32, 0)), null, item, null, null, null, EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_LEFT);
        });
        node.on(cc.Node.EventType.MOUSE_LEAVE, function() {
          _this.equipmentAndItemDialog.hideDialog();
        });
      };
      Inventory.prototype.refreshEquipmentRes = function(equipmetType) {
        if (!equipmetType) return;
        var equip = Logic_1.default.inventoryMgr.equips[equipmetType];
        var color = cc.color(255, 255, 255).fromHEX(equip.color);
        var spriteFrame = Logic_1.default.spriteFrameRes(equip.img);
        equip.equipmetType == InventoryManager_1.default.CLOTHES ? spriteFrame = Logic_1.default.spriteFrameRes(equip.img + "anim0") : equip.equipmetType == InventoryManager_1.default.HELMET ? spriteFrame = Logic_1.default.spriteFrameRes(equip.img + "anim0") : equip.equipmetType == InventoryManager_1.default.REMOTE && (spriteFrame = Logic_1.default.spriteFrameRes(equip.img + "anim0"));
        var sprite = this.equipSprites.get(equipmetType);
        if (sprite) {
          sprite.node.color = color;
          sprite.spriteFrame = 1 == equip.trouserslong ? Logic_1.default.spriteFrameRes("trousers000") : spriteFrame;
          equipmetType == InventoryManager_1.default.TROUSERS && 1 == equip.trouserslong && (sprite.spriteFrame = Logic_1.default.spriteFrameRes("trousers000"));
        }
        switch (equipmetType) {
         case InventoryManager_1.default.REMOTE:
          this.remote.node.parent.active = true;
          this.shield.node.parent.active = true;
          equip.equipmetType != InventoryManager_1.default.EMPTY && (this.shield.node.parent.active = false);
          break;

         case InventoryManager_1.default.SHIELD:
          this.remote.node.parent.active = true;
          this.shield.node.parent.active = true;
          if (equip.equipmetType != InventoryManager_1.default.EMPTY) {
            this.remote.node.parent.active = false;
            this.shield.node.parent.active = true;
          } else {
            this.remote.node.parent.active = true;
            this.shield.node.parent.active = false;
          }
        }
        this.dungeon && this.dungeon.player && this.dungeon.player.changeEquipment(equipmetType, equip, spriteFrame);
      };
      Inventory.prototype.refreshEquipment = function(equipmetType, equipDataNew, isInit, isReplace) {
        if (!equipDataNew || !this.weapon || !equipmetType) return;
        var equip = Logic_1.default.inventoryMgr.equips[equipmetType];
        var hasEquip = equip && equip.equipmetType != InventoryManager_1.default.EMPTY;
        if (!hasEquip) {
          equipmetType == InventoryManager_1.default.REMOTE && Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.SHIELD].equipmetType != InventoryManager_1.default.EMPTY && (hasEquip = true);
          equipmetType == InventoryManager_1.default.SHIELD && Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.REMOTE].equipmetType != InventoryManager_1.default.EMPTY && (hasEquip = true);
        }
        if (!isReplace && !isInit && equip && hasEquip || equipDataNew.requireLevel > Logic_1.default.playerData.OilGoldData.level) {
          this.setEquipmentToBag(equipDataNew, isInit, Logic_1.default.inventoryMgr.inventoryList);
          return;
        }
        if (equip) {
          this.setEquipmentToBag(equip, isInit, Logic_1.default.inventoryMgr.inventoryList);
          equip.valueCopy(equipDataNew);
          isInit || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_EQUIP_UPDATE);
        }
        switch (equipmetType) {
         case InventoryManager_1.default.REMOTE:
          if (Logic_1.default.inventoryMgr.equips[equipmetType].equipmetType != InventoryManager_1.default.EMPTY) {
            this.setEquipmentToBag(Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.SHIELD], isInit, Logic_1.default.inventoryMgr.inventoryList);
            Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.SHIELD].valueCopy(new EquipmentData_1.default());
            this.refreshEquipmentRes(InventoryManager_1.default.SHIELD);
          }
          break;

         case InventoryManager_1.default.SHIELD:
          if (Logic_1.default.inventoryMgr.equips[equipmetType].equipmetType != InventoryManager_1.default.EMPTY) {
            this.setEquipmentToBag(Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.REMOTE], isInit, Logic_1.default.inventoryMgr.inventoryList);
            Logic_1.default.inventoryMgr.equips[InventoryManager_1.default.REMOTE].valueCopy(new EquipmentData_1.default());
            this.refreshEquipmentRes(InventoryManager_1.default.REMOTE);
          }
        }
        this.refreshEquipmentRes(equipmetType);
      };
      Inventory.prototype.getTimeDelay = function(timeDelay, interval, dt) {
        timeDelay || (timeDelay = 0);
        timeDelay += dt;
        if (timeDelay > interval) {
          timeDelay = 0;
          return timeDelay;
        }
        return timeDelay;
      };
      Inventory.prototype.isTimeDelay = function(dt, key, interval) {
        if (interval <= 0) return false;
        var timeDelay = -1;
        this.equipAndItemTimeDelays.set(key, this.getTimeDelay(this.equipAndItemTimeDelays.get(key), interval, dt));
        timeDelay = this.equipAndItemTimeDelays.get(key);
        return 0 == timeDelay;
      };
      Inventory.prototype.update = function(dt) {
        if (!Logic_1.default.isGamePause) {
          var currentTime_1 = Date.now();
          this.equipCovers.forEach(function(value, key) {
            var data = Logic_1.default.inventoryMgr.equips[key];
            if (data) {
              var percent = (currentTime_1 - data.lastTime) / (1e3 * data.cooldown);
              percent > 1 && (percent = 1);
              value.height = value.width * (1 - percent);
            }
          });
          for (var i = 0; i < Logic_1.default.inventoryMgr.itemList.length; i++) {
            var data = Logic_1.default.inventoryMgr.itemList[i];
            var percent = (currentTime_1 - data.lastTime) / (1e3 * data.cooldown);
            percent > 1 && (percent = 1);
            this.itemCovers[i].height = this.itemCovers[i].width * (1 - percent);
          }
        }
      };
      Inventory.prototype.userItem = function(itemIndex) {
        if (!Logic_1.default.inventoryMgr || !Logic_1.default.inventoryMgr.itemList || itemIndex > Logic_1.default.inventoryMgr.itemList.length - 1) return;
        var item = Logic_1.default.inventoryMgr.itemList[itemIndex].clone();
        if (item.resName == Item_1.default.EMPTY) return;
        if (!this.dungeon.player.canEatOrDrink(item)) return;
        var currentTime = Date.now();
        if (currentTime - item.lastTime > 1e3 * item.cooldown) {
          item.lastTime = currentTime;
          -1 != item.count && item.count--;
          item.count <= 0 && -1 != item.count ? Logic_1.default.inventoryMgr.itemList[itemIndex].valueCopy(Logic_1.default.items[Item_1.default.EMPTY]) : Logic_1.default.inventoryMgr.itemList[itemIndex].valueCopy(item);
          this.refreshItemRes(Logic_1.default.inventoryMgr.itemList);
          item.resName != Item_1.default.EMPTY && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_USEITEM, {
            itemData: item
          });
        }
      };
      Inventory.prototype.refreshItem = function(itemDataNew, isReplace) {
        if (!this.node) return;
        var isRefreshed = false;
        for (var i = 0; i < Logic_1.default.inventoryMgr.itemList.length; i++) {
          var item = Logic_1.default.inventoryMgr.itemList[i];
          if (InventoryManager_1.default.isItemEqualCanAdd(item, itemDataNew)) {
            var count = item.count + itemDataNew.count;
            item.valueCopy(itemDataNew);
            item.count = count;
            isRefreshed = true;
            break;
          }
        }
        if (!isRefreshed) for (var i = 0; i < Logic_1.default.inventoryMgr.itemList.length; i++) {
          var item = Logic_1.default.inventoryMgr.itemList[i];
          if (item.resName == Item_1.default.EMPTY) {
            item.valueCopy(itemDataNew);
            isRefreshed = true;
            break;
          }
        }
        if (!isRefreshed) if (isReplace) {
          var item0 = Logic_1.default.inventoryMgr.itemList[0].clone();
          var arr = new Array();
          for (var i = 1; i < Logic_1.default.inventoryMgr.itemList.length; i++) arr.push(Logic_1.default.inventoryMgr.itemList[i]);
          arr.push(itemDataNew);
          for (var i = 0; i < Logic_1.default.inventoryMgr.itemList.length; i++) Logic_1.default.inventoryMgr.itemList[i].valueCopy(arr[i]);
          this.setItemToBag(item0, Logic_1.default.inventoryMgr.inventoryList);
        } else this.setItemToBag(itemDataNew, Logic_1.default.inventoryMgr.inventoryList);
        this.refreshItemRes(Logic_1.default.inventoryMgr.itemList);
      };
      Inventory.prototype.refreshItemRes = function(itemList) {
        var itemSpriteList = [ this.itemsprite1, this.itemsprite2, this.itemsprite3, this.itemsprite4, this.itemsprite5, this.itemsprite6 ];
        var itemLabelList = [ this.itemlabel1, this.itemlabel2, this.itemlabel3, this.itemlabel4, this.itemlabel5, this.itemlabel6 ];
        for (var i = 0; i < itemSpriteList.length; i++) {
          var item = itemList[i];
          itemSpriteList[i].spriteFrame = Logic_1.default.spriteFrameRes(item.resName);
          itemLabelList[i].string = item.count > 0 ? "x" + item.count : "";
        }
      };
      Inventory.prototype.setEquipmentToBag = function(equipData, isInit, inventoryList) {
        if (isInit || equipData.equipmetType == InventoryManager_1.default.EMPTY) return;
        var data = InventoryManager_1.default.buildEquipInventoryData(equipData);
        var isAdded = InventoryDialog_1.default.addEquipOrItemToBag(data, inventoryList, InventoryManager_1.default.MAX_BAG, false, null);
        if (!isAdded) {
          Utils_1.default.toast("\u7269\u54c1\u680f\u5df2\u6ee1\uff01");
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_SETEQUIPMENT, {
            res: equipData.img,
            equipmentData: equipData
          });
        }
      };
      Inventory.prototype.setItemToBag = function(itemData, inventoryList) {
        var data = InventoryManager_1.default.buildItemInventoryData(itemData);
        var isAdded = InventoryDialog_1.default.addEquipOrItemToBag(data, inventoryList, InventoryManager_1.default.MAX_BAG, true, null);
        if (!isAdded) {
          Utils_1.default.toast("\u7269\u54c1\u680f\u5df2\u6ee1\uff01");
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
            res: itemData.resName,
            count: itemData.count
          });
        }
      };
      __decorate([ property(Dungeon_1.default) ], Inventory.prototype, "dungeon", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "weapon", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "remote", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "shield", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "helmet", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "clothes", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "trousers", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "gloves", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "shoes", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "cloak", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "itemsprite1", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "itemsprite2", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "itemsprite3", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "itemsprite4", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "itemsprite5", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "itemsprite6", void 0);
      __decorate([ property(cc.Label) ], Inventory.prototype, "itemlabel1", void 0);
      __decorate([ property(cc.Label) ], Inventory.prototype, "itemlabel2", void 0);
      __decorate([ property(cc.Label) ], Inventory.prototype, "itemlabel3", void 0);
      __decorate([ property(cc.Label) ], Inventory.prototype, "itemlabel4", void 0);
      __decorate([ property(cc.Label) ], Inventory.prototype, "itemlabel5", void 0);
      __decorate([ property(cc.Label) ], Inventory.prototype, "itemlabel6", void 0);
      __decorate([ property(cc.Prefab) ], Inventory.prototype, "equipmentAndItemDialogPrefab", void 0);
      __decorate([ property(cc.Camera) ], Inventory.prototype, "mainCamera", void 0);
      __decorate([ property(cc.Node) ], Inventory.prototype, "equipmentNode", void 0);
      __decorate([ property(cc.Node) ], Inventory.prototype, "dialogNode", void 0);
      Inventory = __decorate([ ccclass ], Inventory);
      return Inventory;
    }(cc.Component);
    exports.default = Inventory;
    cc._RF.pop();
  }, {
    "../data/EquipmentData": "EquipmentData",
    "../item/Item": "Item",
    "../manager/InventoryManager": "InventoryManager",
    "../ui/dialog/EquipmentAndItemDialog": "EquipmentAndItemDialog",
    "../ui/dialog/InventoryDialog": "InventoryDialog",
    "../utils/LocalStorage": "LocalStorage",
    "../utils/Utils": "Utils",
    "./Dungeon": "Dungeon",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  ItemData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "371e21tzPlAtY0KmtggGqZV", "ItemData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var CommonData_1 = require("./CommonData");
    var ItemData = function(_super) {
      __extends(ItemData, _super);
      function ItemData() {
        var _this = _super.call(this) || this;
        _this.uuid = "";
        _this.id = 2e7;
        _this.pos = cc.v3(0, 0);
        _this.nameCn = "";
        _this.nameEn = "";
        _this.duration = 0;
        _this.desc = "";
        _this.info = "";
        _this.resName = "emptyitem";
        _this.price = 0;
        _this.isTaken = false;
        _this.count = 1;
        _this.cooldown = 1;
        _this.statusList = "";
        _this.canSave = 0;
        _this.sanity = 0;
        _this.solidSatiety = 0;
        _this.liquidSatiety = 0;
        _this.lastTime = 0;
        _this.exTriggers = [];
        _this.common = new CommonData_1.default();
        return _this;
      }
      Object.defineProperty(ItemData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      ItemData.prototype.valueCopy = function(data) {
        if (!data) return this;
        var name = this.nameCn;
        DataUtils_1.default.baseCopy(this, data);
        this.id = data.id ? data.id : 2e7;
        this.common.valueCopy(data.common);
        this.pos = data.pos ? cc.v3(data.pos.x, data.pos.y) : cc.v3(0, 0);
        this.nameCn = data.nameCn ? data.nameCn : name;
        this.resName = data.resName ? data.resName : "emptyitem";
        this.count = data.count ? data.count : 1;
        this.cooldown = data.cooldown ? data.cooldown : 1;
        this.exTriggers = data.exTriggers ? data.exTriggers : [];
        return this;
      };
      ItemData.prototype.clone = function() {
        var e = new ItemData();
        e.valueCopy(this);
        return e;
      };
      return ItemData;
    }(BaseData_1.default);
    exports.default = ItemData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData",
    "./CommonData": "CommonData"
  } ],
  ItemManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9211357HjhKqavyVFqZ4zof", "ItemManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Coin_1 = require("../item/Coin");
    var Dungeon_1 = require("../logic/Dungeon");
    var OilGold_1 = require("../item/OilGold");
    var IndexZ_1 = require("../utils/IndexZ");
    var BaseManager_1 = require("./BaseManager");
    var Logic_1 = require("../logic/Logic");
    var Item_1 = require("../item/Item");
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemManager = function(_super) {
      __extends(ItemManager, _super);
      function ItemManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.coin = null;
        _this.oilGold = null;
        _this.item = null;
        _this.groundList = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      ItemManager.prototype.onLoad = function() {
        var _this = this;
        this.coinPool = new cc.NodePool();
        this.oilPool = new cc.NodePool();
        EventHelper_1.EventHelper.on("destorycoin", function(detail) {
          _this.destroyCoin(detail.coinNode);
        });
        EventHelper_1.EventHelper.on("destoryoilgold", function(detail) {
          _this.destroyOilGold(detail.oilGoldNode);
        });
      };
      ItemManager.prototype.clear = function() {
        if (this.coinPool) {
          this.coinPool.clear();
          this.oilPool.clear();
        }
        this.groundList = [];
      };
      ItemManager.prototype.getValueCoin = function(count, pos, parentNode, isReal) {
        var updateValue = Coin_1.default.FACE_VALUE;
        var v = count % updateValue;
        for (var i = 0; i < v; i++) this.getCoinItem(1, pos, parentNode, true, isReal);
        var v1 = (count - v) / updateValue;
        for (var i = 0; i < v1; i++) this.getCoinItem(updateValue, pos, parentNode, true, isReal);
      };
      ItemManager.prototype.getValueOilGold = function(count, pos, parentNode) {
        var updateValue = OilGold_1.default.FACE_VALUE;
        var v = count % updateValue;
        for (var i = 0; i < v; i++) this.getCoinItem(1, pos, parentNode, false, false);
        var v1 = (count - v) / updateValue;
        for (var i = 0; i < v1; i++) this.getCoinItem(updateValue, pos, parentNode, false, false);
      };
      ItemManager.prototype.getCoinItem = function(value, pos, parentNode, isCoin, isReal) {
        var pool = isCoin ? this.coinPool : this.oilPool;
        var prefab = isCoin ? this.coin : this.oilGold;
        this.dungeon || (this.dungeon = parentNode.getComponent(Dungeon_1.default));
        var itemPrefab = null;
        pool.size() > 0 && (itemPrefab = pool.get());
        itemPrefab && !itemPrefab.active || (itemPrefab = cc.instantiate(prefab));
        itemPrefab.parent = parentNode;
        var p = cc.v3(pos.x + Logic_1.default.getRandomNum(-50, 50), pos.y + Logic_1.default.getRandomNum(-50, 50));
        itemPrefab.position = p;
        var item = isCoin ? itemPrefab.getComponent(Coin_1.default) : itemPrefab.getComponent(OilGold_1.default);
        item.entity.Transform.position = p;
        item.player = this.dungeon.player;
        item.isReal = isReal;
        item.changeValue(value);
        item.node.zIndex = IndexZ_1.default.OVERHEAD;
        itemPrefab.active = true;
      };
      ItemManager.prototype.destroyCoin = function(coinNode) {
        coinNode.active = false;
        this.coinPool && this.coinPool.put(coinNode);
      };
      ItemManager.prototype.destroyOilGold = function(oilGoldNode) {
        oilGoldNode.active = false;
        this.oilPool && this.oilPool.put(oilGoldNode);
      };
      ItemManager.prototype.addItem = function(pos, resName, count, shopTable) {
        if (!this.item || !Logic_1.default.items[resName]) return;
        var item = cc.instantiate(this.item);
        item.parent = this.node;
        item.position = pos;
        var indexpos = Dungeon_1.default.getIndexInMap(pos);
        item.zIndex = IndexZ_1.default.OVERHEAD;
        var itemScript = item.getComponent(Item_1.default);
        itemScript.init(resName, indexpos.clone(), count, shopTable);
        var data = item.getComponent(Item_1.default).data;
        this.groundList.push(itemScript);
        if (shopTable) return;
        var curritems = Logic_1.default.mapManager.getCurrentMapItems();
        if (curritems) curritems.push(data); else {
          curritems = new Array();
          curritems.push(data);
          Logic_1.default.mapManager.setCurrentItemsArr(curritems);
        }
      };
      ItemManager.prototype.addItemFromMap = function(mapStr, indexPos) {
        "A0" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.HEART);
        "A1" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.DREAM);
        "A3" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.REDCAPSULE);
        "A1" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BLUECAPSULE);
        "A4" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.SHIELD);
        "A5" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.GOLDAPPLE);
        "Aa" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_HEALING);
        "Ab" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_MOVESPEED);
        "Ac" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_ATTACK);
        "Ad" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_DREAM);
        "Ae" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_REMOTE);
        "Af" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_JUMP);
      };
      ItemManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      ItemManager.prototype.updateLogic = function(dt, player) {
        if (this.isCheckTimeDelay(dt)) {
          var distance = 200;
          var item = null;
          for (var i = this.groundList.length - 1; i >= 0; i--) {
            var e = this.groundList[i];
            e.highLight(false);
            if (!e.isValid || e.data.isTaken) {
              this.groundList.splice(i, 1);
              continue;
            }
            var d = Logic_1.default.getDistanceNoSqrt(e.node.position, player.node.position);
            if (d < distance) {
              distance = d;
              item = e;
            }
          }
          var min = item && item.data.canSave ? 64 : 48;
          if (distance < min && item) {
            item.highLight(true);
            if (item.data.canSave) {
              if (!this.lastGroundItem || this.lastGroundItem.uuid != item.uuid) {
                cc.tween(item.taketips).to(.2, {
                  opacity: 255
                }).delay(1).to(.2, {
                  opacity: 0
                }).start();
                EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_SHOW, {
                  worldPos: item.node.convertToWorldSpaceAR(cc.v3(0, 32)),
                  itemData: item.data
                });
              }
              this.lastGroundItem = item;
            } else if (player && player.canEatOrDrink(item.data)) {
              item.taken(player, false);
              this.lastGroundItem = null;
            }
          } else {
            this.lastGroundItem = null;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_HIDE);
          }
        }
      };
      __decorate([ property(cc.Prefab) ], ItemManager.prototype, "coin", void 0);
      __decorate([ property(cc.Prefab) ], ItemManager.prototype, "oilGold", void 0);
      __decorate([ property(cc.Prefab) ], ItemManager.prototype, "item", void 0);
      ItemManager = __decorate([ ccclass ], ItemManager);
      return ItemManager;
    }(BaseManager_1.default);
    exports.default = ItemManager;
    cc._RF.pop();
  }, {
    "../item/Coin": "Coin",
    "../item/Item": "Item",
    "../item/OilGold": "OilGold",
    "../logic/Dungeon": "Dungeon",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../utils/IndexZ": "IndexZ",
    "./BaseManager": "BaseManager"
  } ],
  Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce4de5SY9BKg5Ay5wKpP9r7", "Item");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("./../ecs/component/MoveComponent");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var ItemData_1 = require("../data/ItemData");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var StatusData_1 = require("../data/StatusData");
    var StatusManager_1 = require("../manager/StatusManager");
    var BaseNodeComponent_1 = require("../base/BaseNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Item = function(_super) {
      __extends(Item, _super);
      function Item() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.root = null;
        _this.sprite = null;
        _this.shadow = null;
        _this.data = new ItemData_1.default();
        return _this;
      }
      Item_1 = Item;
      Item.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.taketips = this.sprite.node.getChildByName("taketips");
        this.entity.NodeRender.root = this.root;
      };
      Item.prototype.start = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      Item.prototype.init = function(resName, pos, count, shopTable) {
        this.data.valueCopy(Logic_1.default.items[resName]);
        this.data.uuid = this.data.genNonDuplicateID();
        for (var _i = 0, _a = this.data.exTriggers; _i < _a.length; _i++) {
          var ex = _a[_i];
          ex.uuid = this.data.genNonDuplicateID();
        }
        this.data.pos = pos;
        this.data.count = count || this.data.count;
        if (shopTable) {
          this.shopTable = shopTable;
          shopTable.data.itemdata = new ItemData_1.default();
          shopTable.data.itemdata.valueCopy(Logic_1.default.items[resName]);
          shopTable.data.price = this.data.price;
        }
        var spriteFrame = Logic_1.default.spriteFrameRes(this.data.resName);
        if (spriteFrame) {
          this.sprite.spriteFrame = spriteFrame;
          this.sprite.node.width = spriteFrame.getOriginalSize().width;
          this.sprite.node.height = spriteFrame.getOriginalSize().height;
          this.mat = this.sprite.getComponent(cc.Sprite).getMaterial(0);
          this.mat.setProperty("textureSizeWidth", spriteFrame.getTexture().width * this.sprite.node.scaleX);
          this.mat.setProperty("textureSizeHeight", spriteFrame.getTexture().height * this.sprite.node.scaleY);
          this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
          this.highLight(false);
          this.shadow.spriteFrame = spriteFrame;
          this.shadow.node.width = this.sprite.node.width;
          this.shadow.node.height = this.sprite.node.height;
          this.entity.Move.linearVelocityZ = 6;
          this.entity.Transform.position = this.node.position.clone();
        }
      };
      Item.prototype.fly = function(flag) {
        if (flag) {
          this.entity.Move.gravity = 0;
          this.entity.Transform.z <= 0 ? this.entity.Move.linearVelocityZ = 4 : this.entity.Transform.z > 32 && (this.entity.Move.linearVelocityZ = 0);
        } else this.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY;
      };
      Item.prototype.highLight = function(isHigh) {
        this.mat || (this.mat = this.sprite.getComponent(cc.Sprite).getMaterial(0));
        this.fly(isHigh);
        this.mat.setProperty("openOutline", isHigh ? 1 : 0);
      };
      Item.prototype.taken = function(player, isReplace) {
        if (this.data.isTaken) return false;
        if (!this.data.canSave) {
          this._taken(player, isReplace);
          return true;
        }
        if (!this.shopTable) {
          this._taken(player, isReplace);
          return true;
        }
        if (Logic_1.default.coins >= this.data.price) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            count: -this.data.price
          });
          var arr = [ AudioPlayer_1.default.COIN, AudioPlayer_1.default.COIN1, AudioPlayer_1.default.COIN2 ];
          AudioPlayer_1.default.play(arr[Logic_1.default.getRandomNum(0, arr.length - 1)]);
          this._taken(player, isReplace);
          this.shopTable.sale(true);
          return true;
        }
        return false;
      };
      Item.prototype._taken = function(player, isReplace) {
        var _this = this;
        if (!this.data.isTaken && this.anim) {
          this.anim.play("ItemTaken");
          Achievement_1.default.addItemAchievement(this.data.resName);
          this.data.isTaken = true;
          AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
          this.data.canSave < 1 ? Item_1.userIt(this.data, player) : EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_CHANGEITEM, {
            itemData: this.data,
            isReplace: isReplace
          });
          this.scheduleOnce(function() {
            _this.node && _this.destroyEntityNode();
          }, 3);
        }
        var curritems = Logic_1.default.mapManager.getCurrentMapItems();
        var newlist = new Array();
        if (curritems) for (var _i = 0, curritems_1 = curritems; _i < curritems_1.length; _i++) {
          var temp = curritems_1[_i];
          temp.uuid && temp.uuid != this.data.uuid && newlist.push(temp);
        }
        Logic_1.default.mapManager.setCurrentItemsArr(newlist);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_HIDE);
      };
      Item.userIt = function(data, player) {
        var from = FromData_1.default.getClone(data.nameCn, data.resName, player.node.position);
        data.resName != Item_1.EMPTY && data.canSave && AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        switch (data.resName) {
         case Item_1.GOLDFINGER:
          player.stopAllDebuffs();
        }
        if (data.statusList.length > 0) {
          var arr = data.statusList.split(",");
          for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var status = arr_1[_i];
            player.addStatus(status, from);
            player.dungeon.nonPlayerManager.isPetAlive() && player.dungeon.nonPlayerManager.pet.addStatus(status, from);
          }
        }
        player.sanityChange(data.sanity);
        if (data.solidSatiety > 0 || data.liquidSatiety > 0) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.DRINK);
          if (data.solidSatiety) {
            var sd = new StatusData_1.default();
            sd.valueCopy(Logic_1.default.status[StatusManager_1.default.EAT]);
            sd.solidDirect = data.solidSatiety;
            player.addCustomStatus(sd, from);
          }
          if (data.liquidSatiety) {
            var sd = new StatusData_1.default();
            sd.valueCopy(Logic_1.default.status[StatusManager_1.default.DRINK]);
            sd.liquidDirect = data.liquidSatiety;
            player.addCustomStatus(sd, from);
          }
        }
      };
      var Item_1;
      Item.EMPTY = "emptyitem";
      Item.HEART = "heart";
      Item.DREAM = "dream";
      Item.BOTTLE_HEALING = "bottle001";
      Item.BOTTLE_MOVESPEED = "bottle002";
      Item.BOTTLE_ATTACK = "bottle003";
      Item.BOTTLE_DREAM = "bottle004";
      Item.BOTTLE_REMOTE = "bottle005";
      Item.BOTTLE_JUMP = "bottle006";
      Item.REDCAPSULE = "redcapsule";
      Item.BLUECAPSULE = "bluecapsule";
      Item.SHIELD = "shield";
      Item.GOLDAPPLE = "goldapple";
      Item.GOLDFINGER = "goldfinger";
      Item.FRIEDRICE = "food000";
      __decorate([ property(cc.Node) ], Item.prototype, "root", void 0);
      __decorate([ property(cc.Sprite) ], Item.prototype, "sprite", void 0);
      __decorate([ property(cc.Sprite) ], Item.prototype, "shadow", void 0);
      Item = Item_1 = __decorate([ ccclass ], Item);
      return Item;
    }(BaseNodeComponent_1.default);
    exports.default = Item;
    cc._RF.pop();
  }, {
    "../base/BaseNodeComponent": "BaseNodeComponent",
    "../data/FromData": "FromData",
    "../data/ItemData": "ItemData",
    "../data/StatusData": "StatusData",
    "../logic/Achievement": "Achievement",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/StatusManager": "StatusManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "./../ecs/component/MoveComponent": "MoveComponent"
  } ],
  JoyController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "246e3R5w7RM/68kAxSEZZAX", "JoyController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var JoyController = function(_super) {
      __extends(JoyController, _super);
      function JoyController() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.anglePreDirQuadrant = 23;
        _this.fixedPoint = null;
        _this.movePoint = null;
        _this.movePointMoveRadius = 100;
        _this.timeDelay = 0;
        return _this;
      }
      JoyController.prototype.onLoad = function() {
        var nodeSize = this.node.getContentSize();
        this.touchArea = new cc.Vec3(nodeSize.width, nodeSize.height);
        this.fixedPointMoveCenterPos = cc.v3(0, 0);
        this.fixedPointMoveRadius = this.touchArea.x / 2 - this.movePointMoveRadius;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (-1 == this.touchID) {
            var touchStartPos = event.getLocation();
            var _pos = new cc.Vec3(touchStartPos.x, touchStartPos.y);
            _pos.subSelf(this.node.position);
            var pos = this.clampPos(_pos, this.fixedPointMoveCenterPos, this.fixedPointMoveRadius);
            this.movePointMoveCenterPos = pos;
            this.setFixedPointPos(pos);
            this.touchID = event.getID();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          if (this.touchID == event.getID()) {
            var nowPos = event.getLocation();
            var _pos = new cc.Vec3(nowPos.x, nowPos.y);
            _pos.subSelf(this.node.position);
            var pos = this.clampPos(_pos, this.movePointMoveCenterPos, this.movePointMoveRadius);
            console.log(pos);
            this.setMovePointPos(pos);
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.init();
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_ATTACK);
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.init();
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_ATTACK);
        }, this);
        this.init();
      };
      JoyController.prototype.init = function() {
        this.touchID = -1;
        this.joystickInputDir = new cc.Vec3();
        this.setFixedPointPos(this.fixedPointMoveCenterPos);
        this.setMovePointPos(this.fixedPointMoveCenterPos);
      };
      JoyController.prototype.setFixedPointPos = function(pos) {
        this.fixedPoint.setPosition(cc.v3(0, 0));
      };
      JoyController.prototype.getFixedPointPos = function() {
        return this.fixedPoint.getPosition();
      };
      JoyController.prototype.setMovePointPos = function(pos) {
        this.movePoint.setPosition(pos);
      };
      JoyController.prototype.getMovePointPos = function() {
        return this.movePoint.getPosition();
      };
      JoyController.prototype.clampPos = function(pos, centerPos, radius) {
        var dpos = pos.sub(centerPos);
        return dpos.mag() > radius ? dpos.normalize().mul(radius).add(centerPos) : pos;
      };
      JoyController.prototype.getInputDir = function() {
        var dir = this.movePoint.getPosition().sub(this.fixedPoint.getPosition());
        dir.mag() > 0 && dir.normalizeSelf();
        return dir;
      };
      JoyController.prototype.getInputQuadrantDir = function() {
        return this.getVec2ByQuadrant(this.getDirQuadrant(this.getInputDir()));
      };
      JoyController.prototype.getDirQuadrant = function(vec) {
        var dirQuadrant = null;
        vec.mag() > 0 && (dirQuadrant = Math.floor(this.getAngleByVec2(vec) / this.anglePreDirQuadrant));
        return dirQuadrant;
      };
      JoyController.prototype.getAngleByVec2 = function(vec) {
        return 180 * -Math.atan2(vec.y, vec.x) / Math.PI + this.anglePreDirQuadrant / 2;
      };
      JoyController.prototype.getVec2ByAngle = function(angle) {
        var dir = new cc.Vec2();
        var rad = (this.anglePreDirQuadrant / 2 - angle) * (Math.PI / 180);
        dir.x = Math.cos(rad);
        dir.y = Math.sin(rad);
        return dir.normalizeSelf();
      };
      JoyController.prototype.getVec2ByQuadrant = function(dirQuadrant) {
        if (null != dirQuadrant) {
          var angle = dirQuadrant * this.anglePreDirQuadrant;
          angle += this.anglePreDirQuadrant / 2;
          return this.getVec2ByAngle(angle);
        }
        return cc.Vec2.ZERO;
      };
      JoyController.prototype.sendMoveMessageToPlayer = function(dt) {
        var v = this.getInputQuadrantDir();
        var dir = 4;
        if (Math.abs(v.x) < Math.abs(v.y)) {
          v.y > .3 && (dir = 0);
          v.y < -.3 && (dir = 1);
        }
        if (Math.abs(v.x) > Math.abs(v.y)) {
          v.x < -.3 && (dir = 2);
          v.x > .3 && (dir = 3);
        }
        var pos = this.getInputDir();
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_ROTATE, {
          dir: dir,
          pos: pos,
          dt: dt
        });
      };
      JoyController.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      JoyController.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.sendMoveMessageToPlayer(dt);
      };
      __decorate([ property(cc.Integer) ], JoyController.prototype, "anglePreDirQuadrant", void 0);
      __decorate([ property(cc.Node) ], JoyController.prototype, "fixedPoint", void 0);
      __decorate([ property(cc.Node) ], JoyController.prototype, "movePoint", void 0);
      __decorate([ property ], JoyController.prototype, "movePointMoveRadius", void 0);
      JoyController = __decorate([ ccclass ], JoyController);
      return JoyController;
    }(cc.Component);
    exports.default = JoyController;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper"
  } ],
  Joystick: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3868eVgi9Ewpbgxpufia3p", "Joystick");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Controller_1 = require("./Controller");
    var EventHelper_1 = require("./EventHelper");
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Joystick = function(_super) {
      __extends(Joystick, _super);
      function Joystick() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.anglePreDirQuadrant = 23;
        _this.fixedPoint = null;
        _this.movePoint = null;
        _this.movePointMoveRadius = 100;
        _this.stopCount = 0;
        _this.timeDelay = 0;
        return _this;
      }
      Joystick.prototype.onLoad = function() {
        var _this = this;
        var nodeSize = this.node.getContentSize();
        this.touchArea = new cc.Vec3(nodeSize.width, nodeSize.height);
        this.fixedPointMoveCenterPos = this.touchArea.div(0, this.touchArea);
        this.fixedPointMoveRadius = this.touchArea.x / 2 - this.movePointMoveRadius;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (Controller_1.default.isMouseMode()) return;
          if (-1 == _this.touchID) {
            var touchStartPos = event.getLocation();
            var _pos = new cc.Vec3(touchStartPos.x, touchStartPos.y);
            var pos = _this.clampPos(_pos, _this.fixedPointMoveCenterPos, _this.fixedPointMoveRadius);
            _this.movePointMoveCenterPos = pos;
            _this.setFixedPointPos(pos);
            _this.setMovePointPos(pos);
            _this.touchID = event.getID();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          if (Controller_1.default.isMouseMode()) return;
          if (_this.touchID == event.getID()) {
            var nowPos = event.getLocation();
            var _pos = new cc.Vec3(nowPos.x, nowPos.y);
            var pos = _this.clampPos(_pos, _this.movePointMoveCenterPos, _this.movePointMoveRadius);
            _this.setMovePointPos(pos);
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          if (Controller_1.default.isMouseMode()) return;
          _this.init();
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          if (Controller_1.default.isMouseMode()) return;
          _this.init();
        }, this);
        this.init();
      };
      Joystick.prototype.init = function() {
        this.touchID = -1;
        this.joystickInputDir = new cc.Vec3();
        this.setFixedPointPos(this.fixedPointMoveCenterPos);
        this.setMovePointPos(this.fixedPointMoveCenterPos);
      };
      Joystick.prototype.setFixedPointPos = function(pos) {
        this.fixedPoint.setPosition(this.node.convertToNodeSpaceAR(pos));
      };
      Joystick.prototype.getFixedPointPos = function() {
        return this.fixedPoint.getPosition();
      };
      Joystick.prototype.setMovePointPos = function(pos) {
        this.movePoint.setPosition(this.node.convertToNodeSpaceAR(pos));
      };
      Joystick.prototype.getMovePointPos = function() {
        return this.movePoint.getPosition();
      };
      Joystick.prototype.clampPos = function(pos, centerPos, radius) {
        var dpos = pos.sub(centerPos);
        return dpos.mag() > radius ? dpos.normalize().mul(radius).add(centerPos) : pos;
      };
      Joystick.prototype.getInputDir = function() {
        var dir = this.movePoint.getPosition().sub(this.fixedPoint.getPosition());
        (isNaN(dir.x) || isNaN(dir.y)) && (dir = cc.v2(0, 0));
        dir.mag() > 0 && dir.normalizeSelf();
        return dir;
      };
      Joystick.prototype.getInputQuadrantDir = function() {
        return this.getVec2ByQuadrant(this.getDirQuadrant(this.getInputDir()));
      };
      Joystick.prototype.getDirQuadrant = function(vec) {
        var dirQuadrant = null;
        vec.mag() > 0 && (dirQuadrant = Math.floor(this.getAngleByVec2(vec) / this.anglePreDirQuadrant));
        return dirQuadrant;
      };
      Joystick.prototype.getAngleByVec2 = function(vec) {
        return 180 * -Math.atan2(vec.y, vec.x) / Math.PI + this.anglePreDirQuadrant / 2;
      };
      Joystick.prototype.getVec2ByAngle = function(angle) {
        var dir = new cc.Vec2();
        var rad = (this.anglePreDirQuadrant / 2 - angle) * (Math.PI / 180);
        dir.x = Math.cos(rad);
        dir.y = Math.sin(rad);
        return dir.normalizeSelf();
      };
      Joystick.prototype.getVec2ByQuadrant = function(dirQuadrant) {
        if (null != dirQuadrant) {
          var angle = dirQuadrant * this.anglePreDirQuadrant;
          angle += this.anglePreDirQuadrant / 2;
          return this.getVec2ByAngle(angle);
        }
        return cc.Vec2.ZERO;
      };
      Joystick.prototype.sendMoveMessageToPlayer = function(dt) {
        if (Logic_1.default.isGamePause) return;
        var v = this.getInputQuadrantDir();
        var dir = 4;
        if (Math.abs(v.x) < Math.abs(v.y)) {
          v.y > .3 && (dir = 0);
          v.y < -.3 && (dir = 1);
        }
        if (Math.abs(v.x) > Math.abs(v.y)) {
          v.x < -.3 && (dir = 2);
          v.x > .3 && (dir = 3);
        }
        var pos = this.getInputDir();
        pos.equals(cc.Vec2.ZERO) ? this.stopCount++ : this.stopCount = 0;
        this.stopCount < 2 && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_MOVE, {
          dir: dir,
          pos: pos,
          dt: dt
        });
      };
      Joystick.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      Joystick.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.sendMoveMessageToPlayer(dt);
      };
      __decorate([ property(cc.Integer) ], Joystick.prototype, "anglePreDirQuadrant", void 0);
      __decorate([ property(cc.Node) ], Joystick.prototype, "fixedPoint", void 0);
      __decorate([ property(cc.Node) ], Joystick.prototype, "movePoint", void 0);
      __decorate([ property ], Joystick.prototype, "movePointMoveRadius", void 0);
      Joystick = __decorate([ ccclass ], Joystick);
      return Joystick;
    }(cc.Component);
    exports.default = Joystick;
    cc._RF.pop();
  }, {
    "./Controller": "Controller",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  JsCallAndroid: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1fb3dqsYKZLlqO7Hrvwv2WI", "JsCallAndroid");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var JsCallAndroid = function() {
      function JsCallAndroid() {
        this.players = {};
      }
      JsCallAndroid.prototype.loadPlayers = function() {
        if (!window.android) return;
        var json = window.android.getLocalJson("players.json");
        if (json && json.length > 0) {
          this.players = JSON.parse(json);
          for (var key in this.players) this.players[key].id = key;
        }
      };
      JsCallAndroid.prototype.getPlayerDataById = function(id) {
        return this.players && this.players[id] ? this.players[id] : null;
      };
      JsCallAndroid.prototype.savePlayerDataById = function(data) {
        if (!window.android) return false;
        this.players[data.id] = data;
        return window.android.saveJsonData("players.json", JSON.stringify(this.players));
      };
      return JsCallAndroid;
    }();
    exports.default = JsCallAndroid;
    cc._RF.pop();
  }, {} ],
  JumpingAbility: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "564dcom86FNkLRCoy3EfPyP", "JumpingAbility");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("./../ecs/component/MoveComponent");
    var TriggerData_1 = require("../data/TriggerData");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var JumpingAbility = function(_super) {
      __extends(JumpingAbility, _super);
      function JumpingAbility() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isAcceleratedFall = false;
        _this.currentJumpCount = 1;
        _this.maxJumpCount = 1;
        _this.lastLinearVelocityZ = 0;
        _this.lastZ = 0;
        _this.callbacks = new Map();
        _this.isJumpPressed = false;
        _this.isAirPause = false;
        _this.maxJumpHeight = 0;
        _this.maxFlyHeight = 0;
        _this.flySpeed = 0;
        return _this;
      }
      JumpingAbility.prototype.init = function(actor, maxJumpCount, callbackKey, callback) {
        this.actor = actor;
        if (maxJumpCount && maxJumpCount > 0) {
          this.currentJumpCount = maxJumpCount;
          this.maxJumpCount = maxJumpCount;
        }
        callback && this.callbacks.set(callbackKey, callback);
      };
      JumpingAbility.prototype.jump = function(speed, maxJumpHeightUnit, callbackKey, callback) {
        var _this = this;
        if (this.isJumpPressed) return;
        if (this.isAcceleratedFall) return;
        if (this.currentJumpCount < 1) return;
        callback && this.callbacks.set(callbackKey, callback);
        var ajustSpeed = speed;
        if (maxJumpHeightUnit && maxJumpHeightUnit > 0) {
          this.maxJumpHeight = maxJumpHeightUnit * MoveComponent_1.MoveComponent.PIXELS_PER_UNIT + this.actor.entity.Transform.z;
          var tempSpeed = Utils_1.default.getDashSpeedByDistance(this.maxJumpHeight, this.actor.entity.Move.gravity);
          ajustSpeed > tempSpeed && (ajustSpeed = tempSpeed);
        }
        this.currentJumpCount--;
        this.isJumpPressed = true;
        this.isAirPause = false;
        AudioPlayer_1.default.play(AudioPlayer_1.default.JUMP);
        var second = Utils_1.default.getJumpTimeBySpeedDistance(maxJumpHeightUnit, ajustSpeed, this.actor.entity.Move.gravity);
        this.unscheduleAllCallbacks();
        this.scheduleOnce(function() {
          _this.actor.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY;
        }, second);
        this.actor.entity.Move.gravity = 0;
        this.actor.entity.Move.linearVelocityZ = ajustSpeed;
        this.callbacks.forEach(function(callback, key) {
          callback(TriggerData_1.default.GROUP_JUMP, TriggerData_1.default.TYPE_JUMP_START);
        });
        this.actor.sc.isJumping = true;
      };
      JumpingAbility.prototype.airPause = function(speed, duration, callbackKey, callback) {
        var _this = this;
        this.actor.entity.Move.gravity = 0;
        this.actor.entity.Move.linearVelocityZ = speed;
        this.actor.sc.isJumping = true;
        this.isAirPause = true;
        callback && this.callbacks.set(callbackKey, callback);
        this.unscheduleAllCallbacks();
        this.scheduleOnce(function() {
          _this.actor.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY;
          _this.isAirPause = false;
        }, duration);
      };
      JumpingAbility.prototype.acceleratedFall = function(gravityScale) {
        this.isAcceleratedFall = true;
        var scale = gravityScale > 0 ? gravityScale : 1;
        this.actor.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY * scale;
        this.actor.entity.Move.linearVelocityZ > 0 && (this.actor.entity.Move.linearVelocityZ = 0);
      };
      JumpingAbility.prototype.cancel = function() {
        this.isJumpPressed = false;
        this.isAcceleratedFall || (this.actor.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY);
      };
      JumpingAbility.prototype.fly = function(flySpeed, maxFlyHeightUnit) {
        this.flySpeed = flySpeed;
        this.actor.entity.Move.linearVelocityZ = flySpeed;
        this.maxFlyHeight = maxFlyHeightUnit * MoveComponent_1.MoveComponent.PIXELS_PER_UNIT;
        this.actor.sc.isFlying = true;
      };
      JumpingAbility.prototype.flyCancel = function(gravityScale) {
        this.actor.sc.isFlying = false;
        this.acceleratedFall(gravityScale);
      };
      JumpingAbility.prototype.updateLogic = function() {
        if (this.actor.entity.Move.linearVelocityZ <= 0 && this.lastLinearVelocityZ > 0 || this.maxJumpHeight > 0 && this.actor.entity.Transform.z > this.maxJumpHeight) {
          this.callbacks.forEach(function(callback, key) {
            callback(TriggerData_1.default.GROUP_JUMP, TriggerData_1.default.TYPE_JUMP_HIGHEST);
          });
          if (!this.isAirPause && !this.actor.sc.isFlying && !this.isAcceleratedFall) {
            this.actor.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY;
            this.actor.entity.Move.linearVelocityZ > 0 && (this.actor.entity.Move.linearVelocityZ = 0);
          }
        }
        if (this.lastZ > this.actor.entity.Transform.base && this.actor.entity.Transform.z <= this.actor.entity.Transform.base) {
          this.callbacks.forEach(function(callback, key) {
            callback(TriggerData_1.default.GROUP_JUMP, TriggerData_1.default.TYPE_JUMP_END);
          });
          this.isAcceleratedFall = false;
          this.actor.sc.isJumping = false;
          this.currentJumpCount = this.maxJumpCount;
          this.actor.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY;
          this.isJumpPressed = false;
          this.isAirPause = false;
        }
        this.lastLinearVelocityZ = this.actor.entity.Move.linearVelocityZ;
        this.lastZ = this.actor.entity.Transform.z;
        this.actor.sc.isFlying && (this.actor.entity.Move.linearVelocityZ = this.actor.entity.Transform.z > this.maxFlyHeight ? 0 : this.flySpeed);
      };
      JumpingAbility.prototype.removeCallback = function(key) {
        this.callbacks.has(key) && this.callbacks.delete(key);
      };
      JumpingAbility.CALLBACK_INIT = 0;
      JumpingAbility.CALLBACK_JUMP = 1;
      JumpingAbility.CALLBACK_AIR_PAUSE = 2;
      JumpingAbility = __decorate([ ccclass ], JumpingAbility);
      return JumpingAbility;
    }(cc.Component);
    exports.default = JumpingAbility;
    cc._RF.pop();
  }, {
    "../data/TriggerData": "TriggerData",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils",
    "./../ecs/component/MoveComponent": "MoveComponent"
  } ],
  KeyboardController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b57f7ePcl9JD6/oAh/+vpUg", "KeyboardController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CellphoneDialog_1 = require("../ui/dialog/CellphoneDialog");
    var Controller_1 = require("./Controller");
    var EventHelper_1 = require("./EventHelper");
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var KeyboardController = function(_super) {
      __extends(KeyboardController, _super);
      function KeyboardController() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.stopCount = 0;
        _this.isUp = false;
        _this.isDown = false;
        _this.isLeft = false;
        _this.isRight = false;
        _this.isA = false;
        _this.isB = false;
        _this.isD = false;
        _this.isE = false;
        _this.isR = false;
        _this.isF = false;
        _this.isJ = false;
        _this.isLongPress = false;
        _this.touchStart = false;
        _this.timeDelay = 0;
        return _this;
      }
      KeyboardController.prototype.onLoad = function() {
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
      };
      KeyboardController.prototype.start = function() {};
      KeyboardController.prototype.onKeyDown = function(event) {
        var _this = this;
        switch (event.keyCode) {
         case cc.macro.KEY.w:
          this.isUp = true;
          break;

         case cc.macro.KEY.s:
          this.isDown = true;
          break;

         case cc.macro.KEY.a:
          this.isLeft = true;
          break;

         case cc.macro.KEY.d:
          this.isRight = true;
          break;

         case cc.macro.KEY.i:
          this.openInventory();
          break;

         case cc.macro.KEY.u:
          this.openCellphone();
          break;

         case cc.macro.KEY.q:
          this.openQuestBoard();
          break;

         case cc.macro.KEY.t:
          CellphoneDialog_1.default.changeFlashLight();
          break;

         case cc.macro.KEY.j:
          this.isA = true;
          break;

         case cc.macro.KEY.space:
          Controller_1.default.isMouseMode() ? this.isJ = true : this.isB = true;
          break;

         case cc.macro.KEY.shift:
         case cc.macro.KEY.k:
          this.isD = true;
          break;

         case cc.macro.KEY.l:
          this.isJ = true;
          break;

         case cc.macro.KEY.e:
          this.isE = true;
          this.touchStart = true;
          this.scheduleOnce(function() {
            if (!_this.touchStart) return;
            _this.isLongPress = true;
            _this.trigger(true);
          }, .3);
          break;

         case cc.macro.KEY.r:
          this.isR = true;
          break;

         case cc.macro.KEY.f:
          this.isF = true;
          break;

         case cc.macro.KEY.num1:
          this.useItem(0);
          break;

         case cc.macro.KEY.num2:
          this.useItem(1);
          break;

         case cc.macro.KEY.num3:
          this.useItem(2);
          break;

         case cc.macro.KEY.num4:
          this.useItem(3);
          break;

         case cc.macro.KEY.num5:
          this.useItem(4);
          break;

         case cc.macro.KEY.num6:
          this.useItem(5);
          break;

         case 49:
          this.useItem(0);
          Logic_1.default.isGamePause && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DIALOGUE_BUTTON, {
            index: 0
          });
          break;

         case 50:
          this.useItem(1);
          Logic_1.default.isGamePause && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DIALOGUE_BUTTON, {
            index: 1
          });
          break;

         case 51:
          this.useItem(2);
          Logic_1.default.isGamePause && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DIALOGUE_BUTTON, {
            index: 2
          });
          break;

         case 52:
          this.useItem(3);
          Logic_1.default.isGamePause && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DIALOGUE_BUTTON, {
            index: 3
          });
          break;

         case 53:
          this.useItem(4);
          break;

         case 54:
          this.useItem(5);
          break;

         case cc.macro.KEY.escape:
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CANCEL_OR_PAUSE);
          Logic_1.default.isGamePause && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DIALOGUE_SKIP);
          break;

         case cc.macro.KEY.m:
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.OPEN_MINIMAP);
        }
      };
      KeyboardController.prototype.trigger = function(isLongPress) {
        Logic_1.default.isGamePause || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_TRIGGER, {
          isLongPress: isLongPress
        });
      };
      KeyboardController.prototype.openInventory = function() {
        Logic_1.default.isGamePause || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_SHOW);
      };
      KeyboardController.prototype.openCellphone = function() {
        Logic_1.default.isGamePause || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CELLPHONE_SHOW);
      };
      KeyboardController.prototype.openQuestBoard = function() {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_QUEST_BOARD_SHOW);
      };
      KeyboardController.prototype.useItem = function(index) {
        Logic_1.default.isGamePause || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.USEITEM_KEYBOARD, {
          index: index
        });
      };
      KeyboardController.prototype.onKeyUp = function(event) {
        switch (event.keyCode) {
         case cc.macro.KEY.w:
          this.isUp = false;
          break;

         case cc.macro.KEY.s:
          this.isDown = false;
          break;

         case cc.macro.KEY.a:
          this.isLeft = false;
          break;

         case cc.macro.KEY.d:
          this.isRight = false;
          break;

         case cc.macro.KEY.j:
          this.isA = false;
          break;

         case cc.macro.KEY.space:
          if (Controller_1.default.isMouseMode()) {
            this.isJ = false;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_JUMP_CANCEL);
          } else {
            this.isB = false;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK_CANCEL);
          }
          Logic_1.default.isGamePause && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DIALOGUE_SKIP);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.GAMEOVER_WAKEUP);
          break;

         case cc.macro.KEY.shift:
         case cc.macro.KEY.k:
          this.isD = false;
          break;

         case cc.macro.KEY.l:
          this.isJ = false;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_JUMP_CANCEL);
          break;

         case cc.macro.KEY.e:
          this.isE = false;
          this.isLongPress || this.trigger();
          this.touchStart = false;
          this.isLongPress = false;
          break;

         case cc.macro.KEY.r:
          this.isR = false;
          break;

         case cc.macro.KEY.f:
          this.isF = false;
        }
      };
      KeyboardController.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.sendMoveMessageToPlayer(dt);
      };
      KeyboardController.prototype.sendMoveMessageToPlayer = function(dt) {
        var pos = cc.v3(0, 0);
        this.isUp && pos.addSelf(cc.v3(0, .9));
        this.isDown && pos.addSelf(cc.v3(0, -.9));
        this.isLeft && pos.addSelf(cc.v3(-.9, 0));
        this.isRight && pos.addSelf(cc.v3(.9, 0));
        pos.mag() > 0 && pos.normalizeSelf();
        var dir = 4;
        if (Math.abs(pos.x) < Math.abs(pos.y)) {
          pos.y > .3 && (dir = 0);
          pos.y < -.3 && (dir = 1);
        }
        if (Math.abs(pos.x) > Math.abs(pos.y)) {
          pos.x < -.3 && (dir = 2);
          pos.x > .3 && (dir = 3);
        }
        pos.equals(cc.Vec3.ZERO) ? this.stopCount++ : this.stopCount = 0;
        if (Logic_1.default.isGamePause) {
          this.isA && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.KEYBOARD_INTERACT);
          this.stopCount < 2 && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.KEYBOARD_MOVE, {
            dir: dir,
            pos: pos,
            dt: dt
          });
          return;
        }
        this.stopCount < 2 && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_MOVE, {
          dir: dir,
          pos: pos,
          dt: dt
        });
        this.isA && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_ATTACK);
        this.isB && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK);
        if (this.isR) {
          this.isR = false;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_SKILL);
        }
        if (this.isF) {
          this.isF = false;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_SKILL1);
        }
        this.isJ && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_JUMP);
        this.isD && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_DASH);
      };
      KeyboardController.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .03) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      KeyboardController = __decorate([ ccclass ], KeyboardController);
      return KeyboardController;
    }(cc.Component);
    exports.default = KeyboardController;
    cc._RF.pop();
  }, {
    "../ui/dialog/CellphoneDialog": "CellphoneDialog",
    "./Controller": "Controller",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  KrakenSwingHand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15ea4rtPQxD8pcJLX7yPozV", "KrakenSwingHand");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var FromData_1 = require("../data/FromData");
    var Kraken_1 = require("./Kraken");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var KrakenSwingHand = function(_super) {
      __extends(KrakenSwingHand, _super);
      function KrakenSwingHand() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.damage = 8;
        _this.isShow = false;
        return _this;
      }
      KrakenSwingHand.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.anim = this.node.parent.getComponent(cc.Animation);
        this.entity && this.entity.Move && (this.entity.Move.isStatic = true);
      };
      KrakenSwingHand.prototype.swing = function() {
        this.anim.play();
      };
      KrakenSwingHand.prototype.start = function() {
        this.isShow = false;
      };
      KrakenSwingHand.prototype.onColliderEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isShow && this.node.active) {
          this.node.stopAllActions();
          var dd = new DamageData_1.default();
          dd.physicalDamage = this.damage;
          target.takeDamage(dd, FromData_1.default.getClone(this.actorName(), "boss001", this.node.position), this.node.parent.getComponent(Kraken_1.default));
        }
      };
      KrakenSwingHand.prototype.actorName = function() {
        return "\u6d77\u5996";
      };
      __decorate([ property ], KrakenSwingHand.prototype, "damage", void 0);
      KrakenSwingHand = __decorate([ ccclass ], KrakenSwingHand);
      return KrakenSwingHand;
    }(BaseColliderComponent_1.default);
    exports.default = KrakenSwingHand;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../utils/ActorUtils": "ActorUtils",
    "./Kraken": "Kraken"
  } ],
  Kraken: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cbbb1U+Yy5Jtb8PV4hyvH/c", "Kraken");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Shooter_1 = require("../logic/Shooter");
    var EventHelper_1 = require("../logic/EventHelper");
    var KrakenSwingHand_1 = require("./KrakenSwingHand");
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var Boss_1 = require("./Boss");
    var NextStep_1 = require("../utils/NextStep");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var IndexZ_1 = require("../utils/IndexZ");
    var Item_1 = require("../item/Item");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var MapManager_1 = require("../manager/MapManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Kraken = function(_super) {
      __extends(Kraken, _super);
      function Kraken() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.swingHand = null;
        _this.timeDelay = 0;
        _this.remoteSkill = new NextStep_1.default();
        _this.handSkill = new NextStep_1.default();
        _this.nearHandSkill = new NextStep_1.default();
        _this.hands = [];
        _this.actionTimeDelay = 0;
        return _this;
      }
      Kraken.prototype.init = function(type) {
        throw new Error("Method not implemented.");
      };
      Kraken.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.shooter = this.getComponentInChildren(Shooter_1.default);
        this.shooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "boss001", this.node.position));
        this.anim = this.getComponent(cc.Animation);
      };
      Kraken.prototype.ShowFinish = function() {
        this.anim.play("KrakenHeadIdle");
        this.sc.isShow = true;
        var pos1 = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE, -4));
        var pos2 = Dungeon_1.default.getPosInMap(cc.v3(-2, -4));
        var pos3 = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE, Dungeon_1.default.HEIGHT_SIZE));
        var pos4 = Dungeon_1.default.getPosInMap(cc.v3(-2, Dungeon_1.default.HEIGHT_SIZE));
        this.hand01 = this.addHand(pos1, true, true);
        this.hand02 = this.addHand(pos2, false, true);
        this.hand03 = this.addHand(pos3, true, false);
        this.hand04 = this.addHand(pos4, false, false);
      };
      Kraken.prototype.addHand = function(pos, isReverse, isUp) {
        var hand = cc.instantiate(this.swingHand);
        this.dungeon.node.addChild(hand);
        hand.setPosition(pos);
        hand.scaleX = isReverse ? -80 : 80;
        hand.scaleY = isUp ? -80 : 80;
        hand.zIndex = IndexZ_1.default.OVERHEAD;
        var h = hand.getComponentInChildren(KrakenSwingHand_1.default);
        this.scheduleOnce(function() {
          h.isShow = true;
        }, 2);
        this.hands.push(h);
        return h;
      };
      Kraken.prototype.updatePlayerPos = function() {
        var pos = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE / 2, Dungeon_1.default.HEIGHT_SIZE + 2));
        this.entity.Transform.position = pos;
        this.node.setPosition(pos);
      };
      Kraken.prototype.changeZIndex = function() {
        this.node.zIndex = IndexZ_1.default.KRAKENBODY;
      };
      Kraken.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      Kraken.prototype.takeDamage = function(damage) {
        var _this = this;
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        this.nearHandSkill.next(function() {
          _this.dungeon.player.pos.x > Dungeon_1.default.WIDTH_SIZE / 2 ? _this.hand03 && _this.hand03.swing() : _this.hand04 && _this.hand04.swing();
        }, 5);
        return true;
      };
      Kraken.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.changeZIndex();
        for (var _i = 0, _a = this.hands; _i < _a.length; _i++) {
          var hand = _a[_i];
          hand.isShow = false;
          hand.node.active = false;
        }
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Kraken.prototype.getLoot = function(isSteal) {
        if (this.dungeon) {
          var rand4save = Logic_1.default.mapManager.getRandom4Save(this.seed, MapManager_1.default.RANDOM_BOSS);
          var p = cc.v3(Math.floor(Dungeon_1.default.WIDTH_SIZE / 2), Math.floor(Dungeon_1.default.HEIGHT_SIZE / 2));
          var pos = Dungeon_1.default.getPosInMap(p);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
            pos: pos,
            count: 19
          });
          isSteal || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, {
            pos: this.entity.Transform.position,
            count: 100
          });
          var chance = Logic_1.default.getHalfChance() && isSteal || !isSteal;
          if (chance) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              pos: this.entity.Transform.position,
              res: Item_1.default.HEART
            });
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              pos: this.entity.Transform.position,
              res: Item_1.default.DREAM
            });
          }
          this.dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(p), null, EquipmentManager_1.default.QUALITY_ORANGE);
        }
      };
      Kraken.prototype.showBoss = function() {
        this.entity.NodeRender.node = this.node;
        this.changeZIndex();
        this.entity.Move.damping = 6;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("KrakenHeadShow");
      };
      Kraken.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Kraken.prototype.updateLogic = function(dt) {
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.label && (this.label.string = "" + this.node.zIndex);
        this.healthBar.node.active = !this.sc.isDied;
      };
      Kraken.prototype.bossAction = function() {
        var _this = this;
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.hand01 && (this.hand01.node.parent.y = Logic_1.default.lerp(this.hand01.node.y, this.dungeon.player.node.y, .1));
        this.hand02 && (this.hand02.node.parent.y = Logic_1.default.lerp(this.hand02.node.y, this.dungeon.player.node.y, .1));
        this.shooter && this.remoteSkill.next(function() {
          var pos = _this.entity.Transform.position.clone().add(_this.shooter.node.position);
          var hv = _this.dungeon.player.getCenterPosition().sub(pos);
          if (!hv.equals(cc.Vec3.ZERO)) {
            _this.shooter.setHv(cc.v2(hv).normalize());
            _this.shooter.dungeon = _this.dungeon;
            _this.shooter.actor = _this;
            _this.shooter.ignoreEmptyWall = true;
            _this.shooter.data.bulletType = "bullet004";
            _this.shooter.fireBullet();
            _this.shooter.fireBullet(30);
            _this.shooter.fireBullet(-30);
          }
          if (_this.data.currentHealth < _this.data.Common.MaxHealth / 2) {
            _this.dungeon.addFallStone(_this.dungeon.player.node.position, true);
            _this.shooter.fireBullet(30);
            _this.shooter.fireBullet(-30);
            _this.shooter.fireBullet(15);
            _this.shooter.fireBullet(-15);
          }
        }, 3);
        this.handSkill.next(function() {
          _this.dungeon.player.pos.x > Dungeon_1.default.WIDTH_SIZE / 2 ? _this.hand01 && _this.hand01.swing() : _this.hand02 && _this.hand02.swing();
        }, 10);
      };
      Kraken.prototype.actorName = function() {
        return "\u6d77\u5996";
      };
      __decorate([ property(cc.Label) ], Kraken.prototype, "label", void 0);
      __decorate([ property(cc.Prefab) ], Kraken.prototype, "swingHand", void 0);
      Kraken = __decorate([ ccclass ], Kraken);
      return Kraken;
    }(Boss_1.default);
    exports.default = Kraken;
    cc._RF.pop();
  }, {
    "../data/FromData": "FromData",
    "../item/Item": "Item",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../manager/EquipmentManager": "EquipmentManager",
    "../manager/MapManager": "MapManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/NextStep": "NextStep",
    "./Boss": "Boss",
    "./KrakenSwingHand": "KrakenSwingHand"
  } ],
  Ladder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4c910QJu91E2qesuKf+AEbE", "Ladder");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CCollider_1 = require("../collider/CCollider");
    var MoveComponent_1 = require("../ecs/component/MoveComponent");
    var Dungeon_1 = require("../logic/Dungeon");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Ladder = function(_super) {
      __extends(Ladder, _super);
      function Ladder() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        return _this;
      }
      Ladder.prototype.onLoad = function() {
        this.collider = this.getComponent(CCollider_1.default);
      };
      Ladder.prototype.init = function(mapStr) {
        var z = (parseInt(mapStr[1]) + 1) * Dungeon_1.default.TILE_SIZE / 2;
        for (var _i = 0, _a = this.ccolliders; _i < _a.length; _i++) {
          var collider = _a[_i];
          collider.zHeight = z;
        }
        this.sprite.node.height = z / 4 + 4;
      };
      Ladder.prototype.onColliderExit = function(other, self) {
        other.tag != CCollider_1.default.TAG.PLAYER && other.tag != CCollider_1.default.TAG.NONPLAYER && other.tag != CCollider_1.default.TAG.GOODNONPLAYER || (other.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY);
      };
      Ladder.prototype.onColliderStay = function(other, self) {
        if (other.tag == CCollider_1.default.TAG.PLAYER || other.tag == CCollider_1.default.TAG.NONPLAYER || other.tag == CCollider_1.default.TAG.GOODNONPLAYER) {
          var y = other.entity.Move.linearVelocity.y;
          if (y > 0) {
            other.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY;
            other.entity.Move.linearVelocity.y = 0;
            other.entity.Move.linearVelocityZ < 5 && (other.entity.Move.linearVelocityZ = 5);
          } else other.entity.Move.gravity = MoveComponent_1.MoveComponent.DEFAULT_GRAVITY / 5;
        }
      };
      __decorate([ property(cc.Sprite) ], Ladder.prototype, "sprite", void 0);
      Ladder = __decorate([ ccclass ], Ladder);
      return Ladder;
    }(Building_1.default);
    exports.default = Ladder;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../ecs/component/MoveComponent": "MoveComponent",
    "../logic/Dungeon": "Dungeon",
    "./Building": "Building"
  } ],
  Laser: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5c9a5lk5itEM7gD+Oy8SkoT", "Laser");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NonPlayer_1 = require("../logic/NonPlayer");
    var Player_1 = require("../logic/Player");
    var DamageData_1 = require("../data/DamageData");
    var Logic_1 = require("../logic/Logic");
    var Boss_1 = require("../boss/Boss");
    var BulletData_1 = require("../data/BulletData");
    var StatusManager_1 = require("../manager/StatusManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Actor_1 = require("../base/Actor");
    var InteractBuilding_1 = require("../building/InteractBuilding");
    var EnergyShield_1 = require("../building/EnergyShield");
    var Utils_1 = require("../utils/Utils");
    var MeleeShadowWeapon_1 = require("../logic/MeleeShadowWeapon");
    var Shield_1 = require("../logic/Shield");
    var CCollider_1 = require("../collider/CCollider");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var GameWorldSystem_1 = require("../ecs/system/GameWorldSystem");
    var MeleeCollideHelper_1 = require("../logic/MeleeCollideHelper");
    var ShadowOfSight_1 = require("../effect/ShadowOfSight");
    var LightManager_1 = require("../manager/LightManager");
    var NormalBuilding_1 = require("../building/NormalBuilding");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Laser = function(_super) {
      __extends(Laser, _super);
      function Laser() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.root = null;
        _this.shadow = null;
        _this.data = new BulletData_1.default();
        _this.dir = 0;
        _this.tagetPos = cc.v3(0, 0);
        _this.hv = cc.v2(0, 0);
        _this.isFromPlayer = false;
        _this.isReserved = false;
        _this.isStop = false;
        _this.targetMap = new Map();
        _this.sensorTargetMap = new Map();
        _this.ignoreMap = new Map();
        _this.startPos = cc.v2(0, 0);
        _this.angleOffset = 0;
        _this.lights = [];
        _this.timeDelay = 0;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Laser.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.initSpriteNode();
        var aimArr = [ CCollider_1.default.TAG.BOSS, CCollider_1.default.TAG.BUILDING, CCollider_1.default.TAG.ENERGY_SHIELD, CCollider_1.default.TAG.WALL, CCollider_1.default.TAG.WALL_TOP ];
        for (var _i = 0, aimArr_1 = aimArr; _i < aimArr_1.length; _i++) {
          var key = aimArr_1[_i];
          this.targetMap.set(key, true);
        }
        var sensorArr = [ CCollider_1.default.TAG.ENERGY_SHIELD ];
        for (var _a = 0, sensorArr_1 = sensorArr; _a < sensorArr_1.length; _a++) {
          var key = sensorArr_1[_a];
          this.sensorTargetMap.set(key, true);
        }
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
        LightManager_1.default.registerLight(this.lights, this.node);
      };
      Laser.prototype.initIgnoreMap = function(actor) {
        if (!actor) return false;
        this.ignoreMap.clear();
        var arr = actor.node.getComponentsInChildren(CCollider_1.default);
        if (arr && arr.length > 0) for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var c = arr_1[_i];
          this.ignoreMap.set(c.id, true);
        }
        return true;
      };
      Laser.prototype.initSpriteNode = function() {
        if (this.sprite) return;
        this.sprite = this.root.getChildByName("sprite");
        this.lineNode = this.sprite.getChildByName("line");
        this.lightSprite = this.sprite.getChildByName("light").getComponent(cc.Sprite);
        this.lightCenterSprite = this.sprite.getChildByName("light").getChildByName("center").getComponent(cc.Sprite);
        this.headSprite = this.sprite.getChildByName("head").getComponent(cc.Sprite);
        this.graphics = this.root.getComponent(cc.Graphics);
      };
      Laser.prototype.onEnable = function() {
        this.tagetPos = cc.v3(0, 0);
        this.entity.NodeRender.node = this.node;
        this.entity.Move.linearVelocity = cc.v2(0, 0);
        this.initSpriteNode();
        this.isReserved = false;
        LightManager_1.default.unRegisterLight(this.lights);
        LightManager_1.default.registerLight(this.lights, this.node);
      };
      Laser.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) {
          this.entity.Move.linearVelocity = cc.v2(0, 0);
          return;
        }
        this.updatePos();
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .15) {
          this.updateLaser();
          this.checkTimeDelay = 0;
        }
        var y = this.root.y - this.entity.Transform.base;
        y < 0 && (y = 0);
        var scale = 1 - y / 64;
        this.shadow.scaleY = scale < .5 ? .5 : scale;
      };
      Laser.prototype.changeBullet = function(data, zHeight) {
        this.entity.NodeRender.node = this.node;
        this.entity.NodeRender.root = this.root;
        this.entity.Move.gravity = 0;
        this.data = data;
        this.node.scale = data.size > 0 ? data.size : 1;
        this.root.scale = 1;
        this.node.stopAllActions();
        this.initSpriteNode();
        this.initIgnoreMap(this.shooter.getParentNode().getComponent(Actor_1.default));
        if (this.shooter && this.shooter.actor) {
          this.entity.Transform.base = this.shooter.actor.entity.Transform.base;
          this.entity.Transform.z = zHeight / this.node.scale;
        }
      };
      Laser.prototype.fire = function(hv, angleOffset) {
        var _this = this;
        this.hv = hv;
        this.angleOffset = angleOffset;
        this.node.stopAllActions();
        this.unscheduleAllCallbacks();
        this.rotateCollider(cc.v2(this.hv.x, this.hv.y));
        this.isStop = false;
        this.data.lifeTime > 0 ? this.scheduleOnce(function() {
          _this.stopLaser();
        }, this.data.lifeTime) : this.scheduleOnce(function() {
          _this.stopLaser();
        }, 5);
        this.lightSprite.node.color = cc.color(255, 255, 255).fromHEX(this.data.lightColor);
        cc.tween(this.lightSprite.node).repeatForever(cc.tween().delay(.05).call(function() {
          _this.lightSprite.spriteFrame = _this.getSpriteFrameByName("laser000light001");
          _this.lightCenterSprite.spriteFrame = _this.getSpriteFrameByName("laser000light001");
        }).delay(.05).call(function() {
          _this.lightSprite.spriteFrame = _this.getSpriteFrameByName("laser000light002");
          _this.lightCenterSprite.spriteFrame = _this.getSpriteFrameByName("laser000light002");
        }).delay(.05).call(function() {
          _this.lightSprite.spriteFrame = _this.getSpriteFrameByName("laser000light003");
          _this.lightCenterSprite.spriteFrame = _this.getSpriteFrameByName("laser000light003");
        })).start();
        cc.tween(this.sprite).repeatForever(cc.tween(this.sprite).to(.1, {
          scaleY: .9
        }).to(.1, {
          scaleY: 1.1
        })).start();
        if (this.isFromPlayer) {
          this.targetMap.has(CCollider_1.default.TAG.PLAYER) && this.targetMap.delete(CCollider_1.default.TAG.PLAYER);
          this.targetMap.has(CCollider_1.default.TAG.GOODNONPLAYER) && this.targetMap.delete(CCollider_1.default.TAG.GOODNONPLAYER);
          this.sensorTargetMap.has(CCollider_1.default.TAG.ENERGY_SHIELD) && this.sensorTargetMap.delete(CCollider_1.default.TAG.ENERGY_SHIELD);
          this.sensorTargetMap.has(CCollider_1.default.TAG.PLAYER_HIT) && this.sensorTargetMap.delete(CCollider_1.default.TAG.PLAYER_HIT);
          this.targetMap.set(CCollider_1.default.TAG.NONPLAYER, true);
          this.targetMap.set(CCollider_1.default.TAG.BOSS, true);
        } else {
          this.targetMap.has(CCollider_1.default.TAG.NONPLAYER) && this.targetMap.delete(CCollider_1.default.TAG.PLAYER);
          this.targetMap.has(CCollider_1.default.TAG.BOSS) && this.targetMap.delete(CCollider_1.default.TAG.BOSS);
          this.targetMap.set(CCollider_1.default.TAG.PLAYER, true);
          this.targetMap.set(CCollider_1.default.TAG.GOODNONPLAYER, true);
          this.sensorTargetMap.set(CCollider_1.default.TAG.ENERGY_SHIELD, true);
          this.sensorTargetMap.set(CCollider_1.default.TAG.PLAYER_HIT, true);
        }
        this.updatePos();
        this.updateLaser();
        AudioPlayer_1.default.play(AudioPlayer_1.default.LASER);
      };
      Laser.prototype.updatePos = function() {
        if (this.shooter && this.shooter.actor) {
          var p = this.shooter.getFireBasePos(this.shooter.defaultPos);
          var z = p.z;
          var pos = cc.v3(p.x, p.y);
          this.startPos = cc.v2(this.dungeon.node.convertToWorldSpaceAR(pos));
          this.entity.Transform.position = pos;
          this.shadow.y = this.entity.Transform.base;
          this.node.position = pos;
          this.hv = cc.v2(this.shooter.Hv).rotateSelf(this.angleOffset * Math.PI / 180);
          this.rotateCollider(cc.v2(this.hv.x, this.hv.y));
          this.entity.Transform.base = this.shooter.actor.entity.Transform.base;
          this.entity.Transform.z = z / this.node.scale;
        }
      };
      Laser.prototype.changeAngle = function(angle) {
        this.root.angle = angle;
        this.shadow.angle = angle;
      };
      Laser.prototype.updateLaser = function() {
        if (!this.shooter || this.isStop) return;
        var endPos = this.shadow.convertToWorldSpaceAR(cc.v2(this.data.laserRange > 0 ? this.data.laserRange : 2e3, 0));
        var result = GameWorldSystem_1.default.colliderSystem.nearestRayCast(this.startPos, endPos, this.shooter.actor.entity.Transform.z, 32, this.targetMap, this.sensorTargetMap, this.ignoreMap);
        result && (endPos = result.point);
        var distance = Logic_1.default.getDistance(this.startPos, endPos);
        distance <= 0 && (distance = 0);
        var finalwidth = distance;
        this.lineNode.width = finalwidth / this.node.scaleY;
        this.lightSprite.node.setPosition(this.lineNode.width, 0);
        this.shadow.width = finalwidth / this.node.scaleY;
        this.graphics.clear();
        var color = cc.color(255, 255, 255).fromHEX(this.data.lightColor);
        var lineWidth = 32;
        this.graphics.strokeColor = color;
        this.graphics.lineWidth = lineWidth;
        this.graphics.moveTo(0, 0);
        this.graphics.lineTo(this.lightSprite.node.position.x + lineWidth, 0);
        this.graphics.stroke();
        this.graphics.lineWidth = 2 * lineWidth;
        this.graphics.moveTo(0, 0);
        this.graphics.lineTo(1, 0);
        this.graphics.stroke();
        this.graphics.moveTo(this.lightSprite.node.position.x + lineWidth, 0);
        this.graphics.lineTo(this.lightSprite.node.position.x + lineWidth + 1, 0);
        this.graphics.stroke();
        result && this.attacking(result.collider.node, result.collider.tag);
        this.lights.length > 0 && this.lights[0].setCustomColliderStyle(true, this.lineNode.width, 2 * lineWidth, 0, this.lineNode.width / 2, 0);
      };
      Laser.prototype.stopLaser = function() {
        var _this = this;
        this.isStop = true;
        cc.tween(this.root).to(.2, {
          scaleY: 0
        }).to(.1, {
          scaleX: 0
        }).call(function() {
          LightManager_1.default.unRegisterLight(_this.lights);
          _this.shooter.addDestroyBullet(_this.node, true);
        }).start();
      };
      Laser.prototype.getSpriteFrameByName = function(resName, suffix, needDefaultSuffix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(needDefaultSuffix ? resName + "anim000" : resName));
        return spriteFrame;
      };
      Laser.prototype.attacking = function(attackTarget, tag) {
        if (!attackTarget) return;
        var damage = new DamageData_1.default();
        var damageSuccess = false;
        damage.valueCopy(this.data.damage);
        damage.isRemote = true;
        this.data.from.pos = this.node.position;
        if (tag == CCollider_1.default.TAG.NONPLAYER || tag == CCollider_1.default.TAG.GOODNONPLAYER) {
          var monster = attackTarget.getComponent(NonPlayer_1.default);
          if (monster && !monster.sc.isDied) {
            damageSuccess = monster.takeDamage(damage, this.data.from);
            damageSuccess && this.addTargetAllStatus(monster, new FromData_1.default());
          }
        } else if (tag == CCollider_1.default.TAG.PLAYER) {
          var player = attackTarget.getComponent(Player_1.default);
          if (player && !player.sc.isDied) {
            var isReverse = false;
            player.shield.Status == Shield_1.default.STATUS_PARRY && 1 == player.shield.data.isReflect && (isReverse = this.revserseBullet(player.node.convertToWorldSpaceAR(cc.Vec2.ZERO)));
            if (!isReverse) {
              damageSuccess = player.takeDamage(damage, this.data.from);
              damageSuccess && this.addTargetAllStatus(player, this.data.from);
            }
          }
        } else if (tag == CCollider_1.default.TAG.BOSS) {
          var boss = attackTarget.getComponent(Boss_1.default);
          if (boss && !boss.sc.isDied) {
            damageSuccess = boss.takeDamage(damage, this.data.from);
            damageSuccess && this.addTargetAllStatus(boss, new FromData_1.default());
          }
        } else if (tag == CCollider_1.default.TAG.PLAYER_HIT) {
          var helper = attackTarget.getComponent(MeleeCollideHelper_1.default);
          var meleeWeapon = void 0;
          helper && (meleeWeapon = helper.meleeWeapon);
          var shadowWeapon = void 0;
          if (!meleeWeapon) {
            shadowWeapon = attackTarget.getComponent(MeleeShadowWeapon_1.default);
            shadowWeapon && (meleeWeapon = shadowWeapon.meleeWeapon);
          }
          if (meleeWeapon && meleeWeapon.IsAttacking && !this.isFromPlayer) {
            var isReverse = false;
            if (meleeWeapon.IsReflect) {
              var n = shadowWeapon ? shadowWeapon.meleeWeapon.node : meleeWeapon.node;
              isReverse = this.revserseBullet(n.convertToWorldSpaceAR(cc.Vec2.ZERO));
            }
          }
        } else if (tag == CCollider_1.default.TAG.BUILDING || tag == CCollider_1.default.TAG.WALL || tag == CCollider_1.default.TAG.WALL_TOP) {
          var interactBuilding = attackTarget.getComponent(InteractBuilding_1.default);
          if (1 == this.data.canBreakBuilding && interactBuilding) {
            damageSuccess = true;
            interactBuilding.takeDamage(damage, this.data.from);
          }
          if (!damageSuccess) {
            var hitBuilding = attackTarget.getComponent(NormalBuilding_1.default);
            if (1 == this.data.canBreakBuilding && hitBuilding) {
              damageSuccess = true;
              hitBuilding.takeDamage(damage, this.data.from);
            }
          }
        } else if (!this.isFromPlayer && tag == CCollider_1.default.TAG.ENERGY_SHIELD) {
          var shield = attackTarget.getComponent(EnergyShield_1.default);
          shield && shield.isValid && (damageSuccess = shield.takeDamage(damage, this.data.from));
        }
      };
      Laser.prototype.revserseBullet = function(targetWorldPos) {
        if (this.isReserved) {
          this.isReserved = true;
          return false;
        }
        if (1 != this.data.isLaser) {
          var angle = -180 + Logic_1.default.getRandomNum(0, 10) - 20;
          this.changeAngle(this.root.angle + angle);
          this.isFromPlayer = true;
          this.data.isTracking = 0;
          return true;
        }
        return false;
      };
      Laser.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        if (1 == this.data.fixedRotation) return;
        this.changeAngle(Utils_1.default.getRotateAngle(direction, false));
      };
      Laser.prototype.addTargetAllStatus = function(target, from) {
        this.addTargetStatus(this.data.damage.iceRate, target, StatusManager_1.default.FROZEN, from);
        this.addTargetStatus(this.data.damage.fireRate, target, StatusManager_1.default.BURNING, from);
        this.addTargetStatus(this.data.damage.lighteningRate, target, StatusManager_1.default.DIZZ, from);
        this.addTargetStatus(this.data.damage.toxicRate, target, StatusManager_1.default.TOXICOSIS, from);
        this.addTargetStatus(this.data.damage.curseRate, target, StatusManager_1.default.CURSING, from);
        this.addTargetStatus(this.data.damage.realRate, target, StatusManager_1.default.BLEEDING, from);
        this.addTargetStatus(this.data.statusRate, target, this.data.statusType, from);
      };
      Laser.prototype.addTargetStatus = function(rate, target, statusType, from) {
        Logic_1.default.getRandomNum(0, 100) < rate && target.addStatus(statusType, from);
      };
      __decorate([ property(cc.Node) ], Laser.prototype, "root", void 0);
      __decorate([ property(cc.Node) ], Laser.prototype, "shadow", void 0);
      Laser = __decorate([ ccclass ], Laser);
      return Laser;
    }(BaseColliderComponent_1.default);
    exports.default = Laser;
    cc._RF.pop();
  }, {
    "../base/Actor": "Actor",
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../boss/Boss": "Boss",
    "../building/EnergyShield": "EnergyShield",
    "../building/InteractBuilding": "InteractBuilding",
    "../building/NormalBuilding": "NormalBuilding",
    "../collider/CCollider": "CCollider",
    "../data/BulletData": "BulletData",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../ecs/system/GameWorldSystem": "GameWorldSystem",
    "../effect/ShadowOfSight": "ShadowOfSight",
    "../logic/Logic": "Logic",
    "../logic/MeleeCollideHelper": "MeleeCollideHelper",
    "../logic/MeleeShadowWeapon": "MeleeShadowWeapon",
    "../logic/NonPlayer": "NonPlayer",
    "../logic/Player": "Player",
    "../logic/Shield": "Shield",
    "../manager/LightManager": "LightManager",
    "../manager/StatusManager": "StatusManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils"
  } ],
  LdtkUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6f90dQu+VJ+poUz+EwYnMZ", "LdtkUtils");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Ldtk_1 = require("./Ldtk");
    var LdtkUtils = function() {
      function LdtkUtils() {}
      LdtkUtils.prototype.load = function() {
        cc.resources.load("Data/world/map/chapter00", function(err, resource) {
          if (err) cc.error(err); else {
            var ldtk = Ldtk_1.Convert.ldtkToJson(resource.json);
            cc.log(ldtk);
          }
        });
      };
      return LdtkUtils;
    }();
    exports.default = LdtkUtils;
    cc._RF.pop();
  }, {
    "./Ldtk": "Ldtk"
  } ],
  Ldtk: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eeca8EQoCZMWLsoULMA2gzB", "Ldtk");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Convert = exports.ImageExportMode = exports.IdentifierStyle = exports.Flag = exports.WorldLayout = exports.BgPos = exports.EmbedAtlas = exports.Type = exports.TileRenderMode = exports.RenderMode = exports.LimitScope = exports.LimitBehavior = exports.TextLanguageMode = exports.EditorDisplayPos = exports.EditorDisplayMode = exports.AllowedRefs = exports.TileMode = exports.Checker = void 0;
    var Checker;
    (function(Checker) {
      Checker["Horizontal"] = "Horizontal";
      Checker["None"] = "None";
      Checker["Vertical"] = "Vertical";
    })(Checker = exports.Checker || (exports.Checker = {}));
    var TileMode;
    (function(TileMode) {
      TileMode["Single"] = "Single";
      TileMode["Stamp"] = "Stamp";
    })(TileMode = exports.TileMode || (exports.TileMode = {}));
    var AllowedRefs;
    (function(AllowedRefs) {
      AllowedRefs["Any"] = "Any";
      AllowedRefs["OnlySame"] = "OnlySame";
      AllowedRefs["OnlyTags"] = "OnlyTags";
    })(AllowedRefs = exports.AllowedRefs || (exports.AllowedRefs = {}));
    var EditorDisplayMode;
    (function(EditorDisplayMode) {
      EditorDisplayMode["ArrayCountNoLabel"] = "ArrayCountNoLabel";
      EditorDisplayMode["ArrayCountWithLabel"] = "ArrayCountWithLabel";
      EditorDisplayMode["EntityTile"] = "EntityTile";
      EditorDisplayMode["Hidden"] = "Hidden";
      EditorDisplayMode["NameAndValue"] = "NameAndValue";
      EditorDisplayMode["PointPath"] = "PointPath";
      EditorDisplayMode["PointPathLoop"] = "PointPathLoop";
      EditorDisplayMode["PointStar"] = "PointStar";
      EditorDisplayMode["Points"] = "Points";
      EditorDisplayMode["RadiusGrid"] = "RadiusGrid";
      EditorDisplayMode["RadiusPx"] = "RadiusPx";
      EditorDisplayMode["RefLinkBetweenCenters"] = "RefLinkBetweenCenters";
      EditorDisplayMode["RefLinkBetweenPivots"] = "RefLinkBetweenPivots";
      EditorDisplayMode["ValueOnly"] = "ValueOnly";
    })(EditorDisplayMode = exports.EditorDisplayMode || (exports.EditorDisplayMode = {}));
    var EditorDisplayPos;
    (function(EditorDisplayPos) {
      EditorDisplayPos["Above"] = "Above";
      EditorDisplayPos["Beneath"] = "Beneath";
      EditorDisplayPos["Center"] = "Center";
    })(EditorDisplayPos = exports.EditorDisplayPos || (exports.EditorDisplayPos = {}));
    var TextLanguageMode;
    (function(TextLanguageMode) {
      TextLanguageMode["LangC"] = "LangC";
      TextLanguageMode["LangHaxe"] = "LangHaxe";
      TextLanguageMode["LangJS"] = "LangJS";
      TextLanguageMode["LangJSON"] = "LangJson";
      TextLanguageMode["LangLog"] = "LangLog";
      TextLanguageMode["LangLua"] = "LangLua";
      TextLanguageMode["LangMarkdown"] = "LangMarkdown";
      TextLanguageMode["LangPython"] = "LangPython";
      TextLanguageMode["LangRuby"] = "LangRuby";
      TextLanguageMode["LangXML"] = "LangXml";
    })(TextLanguageMode = exports.TextLanguageMode || (exports.TextLanguageMode = {}));
    var LimitBehavior;
    (function(LimitBehavior) {
      LimitBehavior["DiscardOldOnes"] = "DiscardOldOnes";
      LimitBehavior["MoveLastOne"] = "MoveLastOne";
      LimitBehavior["PreventAdding"] = "PreventAdding";
    })(LimitBehavior = exports.LimitBehavior || (exports.LimitBehavior = {}));
    var LimitScope;
    (function(LimitScope) {
      LimitScope["PerLayer"] = "PerLayer";
      LimitScope["PerLevel"] = "PerLevel";
      LimitScope["PerWorld"] = "PerWorld";
    })(LimitScope = exports.LimitScope || (exports.LimitScope = {}));
    var RenderMode;
    (function(RenderMode) {
      RenderMode["Cross"] = "Cross";
      RenderMode["Ellipse"] = "Ellipse";
      RenderMode["Rectangle"] = "Rectangle";
      RenderMode["Tile"] = "Tile";
    })(RenderMode = exports.RenderMode || (exports.RenderMode = {}));
    var TileRenderMode;
    (function(TileRenderMode) {
      TileRenderMode["Cover"] = "Cover";
      TileRenderMode["FitInside"] = "FitInside";
      TileRenderMode["FullSizeCropped"] = "FullSizeCropped";
      TileRenderMode["FullSizeUncropped"] = "FullSizeUncropped";
      TileRenderMode["NineSlice"] = "NineSlice";
      TileRenderMode["Repeat"] = "Repeat";
      TileRenderMode["Stretch"] = "Stretch";
    })(TileRenderMode = exports.TileRenderMode || (exports.TileRenderMode = {}));
    var Type;
    (function(Type) {
      Type["AutoLayer"] = "AutoLayer";
      Type["Entities"] = "Entities";
      Type["IntGrid"] = "IntGrid";
      Type["Tiles"] = "Tiles";
    })(Type = exports.Type || (exports.Type = {}));
    var EmbedAtlas;
    (function(EmbedAtlas) {
      EmbedAtlas["LdtkIcons"] = "LdtkIcons";
    })(EmbedAtlas = exports.EmbedAtlas || (exports.EmbedAtlas = {}));
    var BgPos;
    (function(BgPos) {
      BgPos["Contain"] = "Contain";
      BgPos["Cover"] = "Cover";
      BgPos["CoverDirty"] = "CoverDirty";
      BgPos["Unscaled"] = "Unscaled";
    })(BgPos = exports.BgPos || (exports.BgPos = {}));
    var WorldLayout;
    (function(WorldLayout) {
      WorldLayout["Free"] = "Free";
      WorldLayout["GridVania"] = "GridVania";
      WorldLayout["LinearHorizontal"] = "LinearHorizontal";
      WorldLayout["LinearVertical"] = "LinearVertical";
    })(WorldLayout = exports.WorldLayout || (exports.WorldLayout = {}));
    var Flag;
    (function(Flag) {
      Flag["DiscardPreCSVIntGrid"] = "DiscardPreCsvIntGrid";
      Flag["ExportPreCSVIntGridFormat"] = "ExportPreCsvIntGridFormat";
      Flag["IgnoreBackupSuggest"] = "IgnoreBackupSuggest";
      Flag["MultiWorlds"] = "MultiWorlds";
      Flag["PrependIndexToLevelFileNames"] = "PrependIndexToLevelFileNames";
      Flag["UseMultilinesType"] = "UseMultilinesType";
    })(Flag = exports.Flag || (exports.Flag = {}));
    var IdentifierStyle;
    (function(IdentifierStyle) {
      IdentifierStyle["Capitalize"] = "Capitalize";
      IdentifierStyle["Free"] = "Free";
      IdentifierStyle["Lowercase"] = "Lowercase";
      IdentifierStyle["Uppercase"] = "Uppercase";
    })(IdentifierStyle = exports.IdentifierStyle || (exports.IdentifierStyle = {}));
    var ImageExportMode;
    (function(ImageExportMode) {
      ImageExportMode["LayersAndLevels"] = "LayersAndLevels";
      ImageExportMode["None"] = "None";
      ImageExportMode["OneImagePerLayer"] = "OneImagePerLayer";
      ImageExportMode["OneImagePerLevel"] = "OneImagePerLevel";
    })(ImageExportMode = exports.ImageExportMode || (exports.ImageExportMode = {}));
    var Convert = function() {
      function Convert() {}
      Convert.toLdtk = function(json) {
        return cast(JSON.parse(json), r("Ldtk"));
      };
      Convert.ldtkToJson = function(value) {
        return JSON.stringify(uncast(value, r("Ldtk")), null, 2);
      };
      return Convert;
    }();
    exports.Convert = Convert;
    function invalidValue(typ, val, key) {
      void 0 === key && (key = "");
      if (key) throw Error('Invalid value for key "' + key + '". Expected type ' + JSON.stringify(typ) + " but got " + JSON.stringify(val));
      throw Error("Invalid value " + JSON.stringify(val) + " for type " + JSON.stringify(typ));
    }
    function jsonToJSProps(typ) {
      if (void 0 === typ.jsonToJS) {
        var map_1 = {};
        typ.props.forEach(function(p) {
          return map_1[p.json] = {
            key: p.js,
            typ: p.typ
          };
        });
        typ.jsonToJS = map_1;
      }
      return typ.jsonToJS;
    }
    function jsToJSONProps(typ) {
      if (void 0 === typ.jsToJSON) {
        var map_2 = {};
        typ.props.forEach(function(p) {
          return map_2[p.js] = {
            key: p.json,
            typ: p.typ
          };
        });
        typ.jsToJSON = map_2;
      }
      return typ.jsToJSON;
    }
    function transform(val, typ, getProps, key) {
      void 0 === key && (key = "");
      function transformPrimitive(typ, val) {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val, key);
      }
      function transformUnion(typs, val) {
        var l = typs.length;
        for (var i = 0; i < l; i++) {
          var typ_1 = typs[i];
          try {
            return transform(val, typ_1, getProps);
          } catch (_) {}
        }
        return invalidValue(typs, val);
      }
      function transformEnum(cases, val) {
        if (-1 !== cases.indexOf(val)) return val;
        return invalidValue(cases, val);
      }
      function transformArray(typ, val) {
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(function(el) {
          return transform(el, typ, getProps);
        });
      }
      function transformDate(val) {
        if (null === val) return null;
        var d = new Date(val);
        if (isNaN(d.valueOf())) return invalidValue("Date", val);
        return d;
      }
      function transformObject(props, additional, val) {
        if (null === val || "object" !== typeof val || Array.isArray(val)) return invalidValue("object", val);
        var result = {};
        Object.getOwnPropertyNames(props).forEach(function(key) {
          var prop = props[key];
          var v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : void 0;
          result[prop.key] = transform(v, prop.typ, getProps, prop.key);
        });
        Object.getOwnPropertyNames(val).forEach(function(key) {
          Object.prototype.hasOwnProperty.call(props, key) || (result[key] = transform(val[key], additional, getProps, key));
        });
        return result;
      }
      if ("any" === typ) return val;
      if (null === typ) {
        if (null === val) return val;
        return invalidValue(typ, val);
      }
      if (false === typ) return invalidValue(typ, val);
      while ("object" === typeof typ && void 0 !== typ.ref) typ = typeMap[typ.ref];
      if (Array.isArray(typ)) return transformEnum(typ, val);
      if ("object" === typeof typ) return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val) : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val) : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val) : invalidValue(typ, val);
      if (typ === Date && "number" !== typeof val) return transformDate(val);
      return transformPrimitive(typ, val);
    }
    function cast(val, typ) {
      return transform(val, typ, jsonToJSProps);
    }
    function uncast(val, typ) {
      return transform(val, typ, jsToJSONProps);
    }
    function a(typ) {
      return {
        arrayItems: typ
      };
    }
    function u() {
      var typs = [];
      for (var _i = 0; _i < arguments.length; _i++) typs[_i] = arguments[_i];
      return {
        unionMembers: typs
      };
    }
    function o(props, additional) {
      return {
        props: props,
        additional: additional
      };
    }
    function m(additional) {
      return {
        props: [],
        additional: additional
      };
    }
    function r(name) {
      return {
        ref: name
      };
    }
    var typeMap = {
      Ldtk: o([ {
        json: "__FORCED_REFS",
        js: "__FORCED_REFS",
        typ: u(void 0, r("ForcedRefs"))
      }, {
        json: "appBuildId",
        js: "appBuildId",
        typ: 3.14
      }, {
        json: "backupLimit",
        js: "backupLimit",
        typ: 0
      }, {
        json: "backupOnSave",
        js: "backupOnSave",
        typ: true
      }, {
        json: "bgColor",
        js: "bgColor",
        typ: ""
      }, {
        json: "defaultGridSize",
        js: "defaultGridSize",
        typ: 0
      }, {
        json: "defaultLevelBgColor",
        js: "defaultLevelBgColor",
        typ: ""
      }, {
        json: "defaultLevelHeight",
        js: "defaultLevelHeight",
        typ: u(void 0, u(0, null))
      }, {
        json: "defaultLevelWidth",
        js: "defaultLevelWidth",
        typ: u(void 0, u(0, null))
      }, {
        json: "defaultPivotX",
        js: "defaultPivotX",
        typ: 3.14
      }, {
        json: "defaultPivotY",
        js: "defaultPivotY",
        typ: 3.14
      }, {
        json: "defs",
        js: "defs",
        typ: r("Definitions")
      }, {
        json: "exportPng",
        js: "exportPng",
        typ: u(void 0, u(true, null))
      }, {
        json: "exportTiled",
        js: "exportTiled",
        typ: true
      }, {
        json: "externalLevels",
        js: "externalLevels",
        typ: true
      }, {
        json: "flags",
        js: "flags",
        typ: a(r("Flag"))
      }, {
        json: "identifierStyle",
        js: "identifierStyle",
        typ: r("IdentifierStyle")
      }, {
        json: "imageExportMode",
        js: "imageExportMode",
        typ: r("ImageExportMode")
      }, {
        json: "jsonVersion",
        js: "jsonVersion",
        typ: ""
      }, {
        json: "levelNamePattern",
        js: "levelNamePattern",
        typ: ""
      }, {
        json: "levels",
        js: "levels",
        typ: a(r("Level"))
      }, {
        json: "minifyJson",
        js: "minifyJson",
        typ: true
      }, {
        json: "nextUid",
        js: "nextUid",
        typ: 0
      }, {
        json: "pngFilePattern",
        js: "pngFilePattern",
        typ: u(void 0, u(null, ""))
      }, {
        json: "simplifiedExport",
        js: "simplifiedExport",
        typ: true
      }, {
        json: "tutorialDesc",
        js: "tutorialDesc",
        typ: u(void 0, u(null, ""))
      }, {
        json: "worldGridHeight",
        js: "worldGridHeight",
        typ: u(void 0, u(0, null))
      }, {
        json: "worldGridWidth",
        js: "worldGridWidth",
        typ: u(void 0, u(0, null))
      }, {
        json: "worldLayout",
        js: "worldLayout",
        typ: u(void 0, u(r("WorldLayout"), null))
      }, {
        json: "worlds",
        js: "worlds",
        typ: a(r("World"))
      } ], "any"),
      ForcedRefs: o([ {
        json: "AutoLayerRuleGroup",
        js: "AutoLayerRuleGroup",
        typ: u(void 0, r("AutoLayerRuleGroup"))
      }, {
        json: "AutoRuleDef",
        js: "AutoRuleDef",
        typ: u(void 0, r("AutoLayerRuleDefinition"))
      }, {
        json: "Definitions",
        js: "Definitions",
        typ: u(void 0, r("Definitions"))
      }, {
        json: "EntityDef",
        js: "EntityDef",
        typ: u(void 0, r("EntityDefinition"))
      }, {
        json: "EntityInstance",
        js: "EntityInstance",
        typ: u(void 0, r("EntityInstance"))
      }, {
        json: "EntityReferenceInfos",
        js: "EntityReferenceInfos",
        typ: u(void 0, r("FieldInstanceEntityReference"))
      }, {
        json: "EnumDef",
        js: "EnumDef",
        typ: u(void 0, r("EnumDefinition"))
      }, {
        json: "EnumDefValues",
        js: "EnumDefValues",
        typ: u(void 0, r("EnumValueDefinition"))
      }, {
        json: "EnumTagValue",
        js: "EnumTagValue",
        typ: u(void 0, r("EnumTagValue"))
      }, {
        json: "FieldDef",
        js: "FieldDef",
        typ: u(void 0, r("FieldDefinition"))
      }, {
        json: "FieldInstance",
        js: "FieldInstance",
        typ: u(void 0, r("FieldInstance"))
      }, {
        json: "GridPoint",
        js: "GridPoint",
        typ: u(void 0, r("FieldInstanceGridPoint"))
      }, {
        json: "IntGridValueDef",
        js: "IntGridValueDef",
        typ: u(void 0, r("IntGridValueDefinition"))
      }, {
        json: "IntGridValueInstance",
        js: "IntGridValueInstance",
        typ: u(void 0, r("IntGridValueInstance"))
      }, {
        json: "LayerDef",
        js: "LayerDef",
        typ: u(void 0, r("LayerDefinition"))
      }, {
        json: "LayerInstance",
        js: "LayerInstance",
        typ: u(void 0, r("LayerInstance"))
      }, {
        json: "Level",
        js: "Level",
        typ: u(void 0, r("Level"))
      }, {
        json: "LevelBgPosInfos",
        js: "LevelBgPosInfos",
        typ: u(void 0, r("LevelBackgroundPosition"))
      }, {
        json: "NeighbourLevel",
        js: "NeighbourLevel",
        typ: u(void 0, r("NeighbourLevel"))
      }, {
        json: "Tile",
        js: "Tile",
        typ: u(void 0, r("TileInstance"))
      }, {
        json: "TileCustomMetadata",
        js: "TileCustomMetadata",
        typ: u(void 0, r("TileCustomMetadata"))
      }, {
        json: "TilesetDef",
        js: "TilesetDef",
        typ: u(void 0, r("TilesetDefinition"))
      }, {
        json: "TilesetRect",
        js: "TilesetRect",
        typ: u(void 0, r("TilesetRectangle"))
      }, {
        json: "World",
        js: "World",
        typ: u(void 0, r("World"))
      } ], "any"),
      AutoLayerRuleGroup: o([ {
        json: "active",
        js: "active",
        typ: true
      }, {
        json: "collapsed",
        js: "collapsed",
        typ: u(void 0, u(true, null))
      }, {
        json: "isOptional",
        js: "isOptional",
        typ: true
      }, {
        json: "name",
        js: "name",
        typ: ""
      }, {
        json: "rules",
        js: "rules",
        typ: a(r("AutoLayerRuleDefinition"))
      }, {
        json: "uid",
        js: "uid",
        typ: 0
      } ], false),
      AutoLayerRuleDefinition: o([ {
        json: "active",
        js: "active",
        typ: true
      }, {
        json: "breakOnMatch",
        js: "breakOnMatch",
        typ: true
      }, {
        json: "chance",
        js: "chance",
        typ: 3.14
      }, {
        json: "checker",
        js: "checker",
        typ: r("Checker")
      }, {
        json: "flipX",
        js: "flipX",
        typ: true
      }, {
        json: "flipY",
        js: "flipY",
        typ: true
      }, {
        json: "outOfBoundsValue",
        js: "outOfBoundsValue",
        typ: u(void 0, u(0, null))
      }, {
        json: "pattern",
        js: "pattern",
        typ: a(0)
      }, {
        json: "perlinActive",
        js: "perlinActive",
        typ: true
      }, {
        json: "perlinOctaves",
        js: "perlinOctaves",
        typ: 3.14
      }, {
        json: "perlinScale",
        js: "perlinScale",
        typ: 3.14
      }, {
        json: "perlinSeed",
        js: "perlinSeed",
        typ: 3.14
      }, {
        json: "pivotX",
        js: "pivotX",
        typ: 3.14
      }, {
        json: "pivotY",
        js: "pivotY",
        typ: 3.14
      }, {
        json: "size",
        js: "size",
        typ: 0
      }, {
        json: "tileIds",
        js: "tileIds",
        typ: a(0)
      }, {
        json: "tileMode",
        js: "tileMode",
        typ: r("TileMode")
      }, {
        json: "uid",
        js: "uid",
        typ: 0
      }, {
        json: "xModulo",
        js: "xModulo",
        typ: 0
      }, {
        json: "xOffset",
        js: "xOffset",
        typ: 0
      }, {
        json: "yModulo",
        js: "yModulo",
        typ: 0
      }, {
        json: "yOffset",
        js: "yOffset",
        typ: 0
      } ], false),
      Definitions: o([ {
        json: "entities",
        js: "entities",
        typ: a(r("EntityDefinition"))
      }, {
        json: "enums",
        js: "enums",
        typ: a(r("EnumDefinition"))
      }, {
        json: "externalEnums",
        js: "externalEnums",
        typ: a(r("EnumDefinition"))
      }, {
        json: "layers",
        js: "layers",
        typ: a(r("LayerDefinition"))
      }, {
        json: "levelFields",
        js: "levelFields",
        typ: a(r("FieldDefinition"))
      }, {
        json: "tilesets",
        js: "tilesets",
        typ: a(r("TilesetDefinition"))
      } ], false),
      EntityDefinition: o([ {
        json: "color",
        js: "color",
        typ: ""
      }, {
        json: "fieldDefs",
        js: "fieldDefs",
        typ: a(r("FieldDefinition"))
      }, {
        json: "fillOpacity",
        js: "fillOpacity",
        typ: 3.14
      }, {
        json: "height",
        js: "height",
        typ: 0
      }, {
        json: "hollow",
        js: "hollow",
        typ: true
      }, {
        json: "identifier",
        js: "identifier",
        typ: ""
      }, {
        json: "keepAspectRatio",
        js: "keepAspectRatio",
        typ: true
      }, {
        json: "limitBehavior",
        js: "limitBehavior",
        typ: r("LimitBehavior")
      }, {
        json: "limitScope",
        js: "limitScope",
        typ: r("LimitScope")
      }, {
        json: "lineOpacity",
        js: "lineOpacity",
        typ: 3.14
      }, {
        json: "maxCount",
        js: "maxCount",
        typ: 0
      }, {
        json: "nineSliceBorders",
        js: "nineSliceBorders",
        typ: a(0)
      }, {
        json: "pivotX",
        js: "pivotX",
        typ: 3.14
      }, {
        json: "pivotY",
        js: "pivotY",
        typ: 3.14
      }, {
        json: "renderMode",
        js: "renderMode",
        typ: r("RenderMode")
      }, {
        json: "resizableX",
        js: "resizableX",
        typ: true
      }, {
        json: "resizableY",
        js: "resizableY",
        typ: true
      }, {
        json: "showName",
        js: "showName",
        typ: true
      }, {
        json: "tags",
        js: "tags",
        typ: a("")
      }, {
        json: "tileId",
        js: "tileId",
        typ: u(void 0, u(0, null))
      }, {
        json: "tileOpacity",
        js: "tileOpacity",
        typ: 3.14
      }, {
        json: "tileRect",
        js: "tileRect",
        typ: u(void 0, u(r("TilesetRectangle"), null))
      }, {
        json: "tileRenderMode",
        js: "tileRenderMode",
        typ: r("TileRenderMode")
      }, {
        json: "tilesetId",
        js: "tilesetId",
        typ: u(void 0, u(0, null))
      }, {
        json: "uid",
        js: "uid",
        typ: 0
      }, {
        json: "width",
        js: "width",
        typ: 0
      } ], false),
      FieldDefinition: o([ {
        json: "__type",
        js: "__type",
        typ: ""
      }, {
        json: "acceptFileTypes",
        js: "acceptFileTypes",
        typ: u(void 0, u(a(""), null))
      }, {
        json: "allowedRefs",
        js: "allowedRefs",
        typ: r("AllowedRefs")
      }, {
        json: "allowedRefTags",
        js: "allowedRefTags",
        typ: a("")
      }, {
        json: "allowOutOfLevelRef",
        js: "allowOutOfLevelRef",
        typ: true
      }, {
        json: "arrayMaxLength",
        js: "arrayMaxLength",
        typ: u(void 0, u(0, null))
      }, {
        json: "arrayMinLength",
        js: "arrayMinLength",
        typ: u(void 0, u(0, null))
      }, {
        json: "autoChainRef",
        js: "autoChainRef",
        typ: true
      }, {
        json: "canBeNull",
        js: "canBeNull",
        typ: true
      }, {
        json: "defaultOverride",
        js: "defaultOverride",
        typ: u(void 0, "any")
      }, {
        json: "editorAlwaysShow",
        js: "editorAlwaysShow",
        typ: true
      }, {
        json: "editorCutLongValues",
        js: "editorCutLongValues",
        typ: true
      }, {
        json: "editorDisplayMode",
        js: "editorDisplayMode",
        typ: r("EditorDisplayMode")
      }, {
        json: "editorDisplayPos",
        js: "editorDisplayPos",
        typ: r("EditorDisplayPos")
      }, {
        json: "editorTextPrefix",
        js: "editorTextPrefix",
        typ: u(void 0, u(null, ""))
      }, {
        json: "editorTextSuffix",
        js: "editorTextSuffix",
        typ: u(void 0, u(null, ""))
      }, {
        json: "identifier",
        js: "identifier",
        typ: ""
      }, {
        json: "isArray",
        js: "isArray",
        typ: true
      }, {
        json: "max",
        js: "max",
        typ: u(void 0, u(3.14, null))
      }, {
        json: "min",
        js: "min",
        typ: u(void 0, u(3.14, null))
      }, {
        json: "regex",
        js: "regex",
        typ: u(void 0, u(null, ""))
      }, {
        json: "symmetricalRef",
        js: "symmetricalRef",
        typ: true
      }, {
        json: "textLanguageMode",
        js: "textLanguageMode",
        typ: u(void 0, u(r("TextLanguageMode"), null))
      }, {
        json: "tilesetUid",
        js: "tilesetUid",
        typ: u(void 0, u(0, null))
      }, {
        json: "type",
        js: "type",
        typ: ""
      }, {
        json: "uid",
        js: "uid",
        typ: 0
      }, {
        json: "useForSmartColor",
        js: "useForSmartColor",
        typ: true
      } ], false),
      TilesetRectangle: o([ {
        json: "h",
        js: "h",
        typ: 0
      }, {
        json: "tilesetUid",
        js: "tilesetUid",
        typ: 0
      }, {
        json: "w",
        js: "w",
        typ: 0
      }, {
        json: "x",
        js: "x",
        typ: 0
      }, {
        json: "y",
        js: "y",
        typ: 0
      } ], false),
      EnumDefinition: o([ {
        json: "externalFileChecksum",
        js: "externalFileChecksum",
        typ: u(void 0, u(null, ""))
      }, {
        json: "externalRelPath",
        js: "externalRelPath",
        typ: u(void 0, u(null, ""))
      }, {
        json: "iconTilesetUid",
        js: "iconTilesetUid",
        typ: u(void 0, u(0, null))
      }, {
        json: "identifier",
        js: "identifier",
        typ: ""
      }, {
        json: "tags",
        js: "tags",
        typ: a("")
      }, {
        json: "uid",
        js: "uid",
        typ: 0
      }, {
        json: "values",
        js: "values",
        typ: a(r("EnumValueDefinition"))
      } ], false),
      EnumValueDefinition: o([ {
        json: "__tileSrcRect",
        js: "__tileSrcRect",
        typ: u(void 0, u(a(0), null))
      }, {
        json: "color",
        js: "color",
        typ: 0
      }, {
        json: "id",
        js: "id",
        typ: ""
      }, {
        json: "tileId",
        js: "tileId",
        typ: u(void 0, u(0, null))
      } ], false),
      LayerDefinition: o([ {
        json: "__type",
        js: "__type",
        typ: ""
      }, {
        json: "autoRuleGroups",
        js: "autoRuleGroups",
        typ: a(r("AutoLayerRuleGroup"))
      }, {
        json: "autoSourceLayerDefUid",
        js: "autoSourceLayerDefUid",
        typ: u(void 0, u(0, null))
      }, {
        json: "autoTilesetDefUid",
        js: "autoTilesetDefUid",
        typ: u(void 0, u(0, null))
      }, {
        json: "displayOpacity",
        js: "displayOpacity",
        typ: 3.14
      }, {
        json: "excludedTags",
        js: "excludedTags",
        typ: a("")
      }, {
        json: "gridSize",
        js: "gridSize",
        typ: 0
      }, {
        json: "guideGridHei",
        js: "guideGridHei",
        typ: 0
      }, {
        json: "guideGridWid",
        js: "guideGridWid",
        typ: 0
      }, {
        json: "hideFieldsWhenInactive",
        js: "hideFieldsWhenInactive",
        typ: true
      }, {
        json: "hideInList",
        js: "hideInList",
        typ: true
      }, {
        json: "identifier",
        js: "identifier",
        typ: ""
      }, {
        json: "inactiveOpacity",
        js: "inactiveOpacity",
        typ: 3.14
      }, {
        json: "intGridValues",
        js: "intGridValues",
        typ: a(r("IntGridValueDefinition"))
      }, {
        json: "parallaxFactorX",
        js: "parallaxFactorX",
        typ: 3.14
      }, {
        json: "parallaxFactorY",
        js: "parallaxFactorY",
        typ: 3.14
      }, {
        json: "parallaxScaling",
        js: "parallaxScaling",
        typ: true
      }, {
        json: "pxOffsetX",
        js: "pxOffsetX",
        typ: 0
      }, {
        json: "pxOffsetY",
        js: "pxOffsetY",
        typ: 0
      }, {
        json: "requiredTags",
        js: "requiredTags",
        typ: a("")
      }, {
        json: "tilePivotX",
        js: "tilePivotX",
        typ: 3.14
      }, {
        json: "tilePivotY",
        js: "tilePivotY",
        typ: 3.14
      }, {
        json: "tilesetDefUid",
        js: "tilesetDefUid",
        typ: u(void 0, u(0, null))
      }, {
        json: "type",
        js: "type",
        typ: r("Type")
      }, {
        json: "uid",
        js: "uid",
        typ: 0
      } ], false),
      IntGridValueDefinition: o([ {
        json: "color",
        js: "color",
        typ: ""
      }, {
        json: "identifier",
        js: "identifier",
        typ: u(void 0, u(null, ""))
      }, {
        json: "value",
        js: "value",
        typ: 0
      } ], false),
      TilesetDefinition: o([ {
        json: "__cHei",
        js: "__cHei",
        typ: 0
      }, {
        json: "__cWid",
        js: "__cWid",
        typ: 0
      }, {
        json: "cachedPixelData",
        js: "cachedPixelData",
        typ: u(void 0, u(m("any"), null))
      }, {
        json: "customData",
        js: "customData",
        typ: a(r("TileCustomMetadata"))
      }, {
        json: "embedAtlas",
        js: "embedAtlas",
        typ: u(void 0, u(r("EmbedAtlas"), null))
      }, {
        json: "enumTags",
        js: "enumTags",
        typ: a(r("EnumTagValue"))
      }, {
        json: "identifier",
        js: "identifier",
        typ: ""
      }, {
        json: "padding",
        js: "padding",
        typ: 0
      }, {
        json: "pxHei",
        js: "pxHei",
        typ: 0
      }, {
        json: "pxWid",
        js: "pxWid",
        typ: 0
      }, {
        json: "relPath",
        js: "relPath",
        typ: u(void 0, u(null, ""))
      }, {
        json: "savedSelections",
        js: "savedSelections",
        typ: a(m("any"))
      }, {
        json: "spacing",
        js: "spacing",
        typ: 0
      }, {
        json: "tags",
        js: "tags",
        typ: a("")
      }, {
        json: "tagsSourceEnumUid",
        js: "tagsSourceEnumUid",
        typ: u(void 0, u(0, null))
      }, {
        json: "tileGridSize",
        js: "tileGridSize",
        typ: 0
      }, {
        json: "uid",
        js: "uid",
        typ: 0
      } ], false),
      TileCustomMetadata: o([ {
        json: "data",
        js: "data",
        typ: ""
      }, {
        json: "tileId",
        js: "tileId",
        typ: 0
      } ], false),
      EnumTagValue: o([ {
        json: "enumValueId",
        js: "enumValueId",
        typ: ""
      }, {
        json: "tileIds",
        js: "tileIds",
        typ: a(0)
      } ], false),
      EntityInstance: o([ {
        json: "__grid",
        js: "__grid",
        typ: a(0)
      }, {
        json: "__identifier",
        js: "__identifier",
        typ: ""
      }, {
        json: "__pivot",
        js: "__pivot",
        typ: a(3.14)
      }, {
        json: "__smartColor",
        js: "__smartColor",
        typ: ""
      }, {
        json: "__tags",
        js: "__tags",
        typ: a("")
      }, {
        json: "__tile",
        js: "__tile",
        typ: u(void 0, u(r("TilesetRectangle"), null))
      }, {
        json: "defUid",
        js: "defUid",
        typ: 0
      }, {
        json: "fieldInstances",
        js: "fieldInstances",
        typ: a(r("FieldInstance"))
      }, {
        json: "height",
        js: "height",
        typ: 0
      }, {
        json: "iid",
        js: "iid",
        typ: ""
      }, {
        json: "px",
        js: "px",
        typ: a(0)
      }, {
        json: "width",
        js: "width",
        typ: 0
      } ], false),
      FieldInstance: o([ {
        json: "__identifier",
        js: "__identifier",
        typ: ""
      }, {
        json: "__tile",
        js: "__tile",
        typ: u(void 0, u(r("TilesetRectangle"), null))
      }, {
        json: "__type",
        js: "__type",
        typ: ""
      }, {
        json: "__value",
        js: "__value",
        typ: "any"
      }, {
        json: "defUid",
        js: "defUid",
        typ: 0
      }, {
        json: "realEditorValues",
        js: "realEditorValues",
        typ: a("any")
      } ], false),
      FieldInstanceEntityReference: o([ {
        json: "entityIid",
        js: "entityIid",
        typ: ""
      }, {
        json: "layerIid",
        js: "layerIid",
        typ: ""
      }, {
        json: "levelIid",
        js: "levelIid",
        typ: ""
      }, {
        json: "worldIid",
        js: "worldIid",
        typ: ""
      } ], false),
      FieldInstanceGridPoint: o([ {
        json: "cx",
        js: "cx",
        typ: 0
      }, {
        json: "cy",
        js: "cy",
        typ: 0
      } ], false),
      IntGridValueInstance: o([ {
        json: "coordId",
        js: "coordId",
        typ: 0
      }, {
        json: "v",
        js: "v",
        typ: 0
      } ], false),
      LayerInstance: o([ {
        json: "__cHei",
        js: "__cHei",
        typ: 0
      }, {
        json: "__cWid",
        js: "__cWid",
        typ: 0
      }, {
        json: "__gridSize",
        js: "__gridSize",
        typ: 0
      }, {
        json: "__identifier",
        js: "__identifier",
        typ: ""
      }, {
        json: "__opacity",
        js: "__opacity",
        typ: 3.14
      }, {
        json: "__pxTotalOffsetX",
        js: "__pxTotalOffsetX",
        typ: 0
      }, {
        json: "__pxTotalOffsetY",
        js: "__pxTotalOffsetY",
        typ: 0
      }, {
        json: "__tilesetDefUid",
        js: "__tilesetDefUid",
        typ: u(void 0, u(0, null))
      }, {
        json: "__tilesetRelPath",
        js: "__tilesetRelPath",
        typ: u(void 0, u(null, ""))
      }, {
        json: "__type",
        js: "__type",
        typ: ""
      }, {
        json: "autoLayerTiles",
        js: "autoLayerTiles",
        typ: a(r("TileInstance"))
      }, {
        json: "entityInstances",
        js: "entityInstances",
        typ: a(r("EntityInstance"))
      }, {
        json: "gridTiles",
        js: "gridTiles",
        typ: a(r("TileInstance"))
      }, {
        json: "iid",
        js: "iid",
        typ: ""
      }, {
        json: "intGrid",
        js: "intGrid",
        typ: u(void 0, u(a(r("IntGridValueInstance")), null))
      }, {
        json: "intGridCsv",
        js: "intGridCsv",
        typ: a(0)
      }, {
        json: "layerDefUid",
        js: "layerDefUid",
        typ: 0
      }, {
        json: "levelId",
        js: "levelId",
        typ: 0
      }, {
        json: "optionalRules",
        js: "optionalRules",
        typ: a(0)
      }, {
        json: "overrideTilesetUid",
        js: "overrideTilesetUid",
        typ: u(void 0, u(0, null))
      }, {
        json: "pxOffsetX",
        js: "pxOffsetX",
        typ: 0
      }, {
        json: "pxOffsetY",
        js: "pxOffsetY",
        typ: 0
      }, {
        json: "seed",
        js: "seed",
        typ: 0
      }, {
        json: "visible",
        js: "visible",
        typ: true
      } ], false),
      TileInstance: o([ {
        json: "d",
        js: "d",
        typ: a(0)
      }, {
        json: "f",
        js: "f",
        typ: 0
      }, {
        json: "px",
        js: "px",
        typ: a(0)
      }, {
        json: "src",
        js: "src",
        typ: a(0)
      }, {
        json: "t",
        js: "t",
        typ: 0
      } ], false),
      Level: o([ {
        json: "__bgColor",
        js: "__bgColor",
        typ: ""
      }, {
        json: "__bgPos",
        js: "__bgPos",
        typ: u(void 0, u(r("LevelBackgroundPosition"), null))
      }, {
        json: "__neighbours",
        js: "__neighbours",
        typ: a(r("NeighbourLevel"))
      }, {
        json: "__smartColor",
        js: "__smartColor",
        typ: ""
      }, {
        json: "bgColor",
        js: "bgColor",
        typ: u(void 0, u(null, ""))
      }, {
        json: "bgPivotX",
        js: "bgPivotX",
        typ: 3.14
      }, {
        json: "bgPivotY",
        js: "bgPivotY",
        typ: 3.14
      }, {
        json: "bgPos",
        js: "bgPos",
        typ: u(void 0, u(r("BgPos"), null))
      }, {
        json: "bgRelPath",
        js: "bgRelPath",
        typ: u(void 0, u(null, ""))
      }, {
        json: "externalRelPath",
        js: "externalRelPath",
        typ: u(void 0, u(null, ""))
      }, {
        json: "fieldInstances",
        js: "fieldInstances",
        typ: a(r("FieldInstance"))
      }, {
        json: "identifier",
        js: "identifier",
        typ: ""
      }, {
        json: "iid",
        js: "iid",
        typ: ""
      }, {
        json: "layerInstances",
        js: "layerInstances",
        typ: u(void 0, u(a(r("LayerInstance")), null))
      }, {
        json: "pxHei",
        js: "pxHei",
        typ: 0
      }, {
        json: "pxWid",
        js: "pxWid",
        typ: 0
      }, {
        json: "uid",
        js: "uid",
        typ: 0
      }, {
        json: "useAutoIdentifier",
        js: "useAutoIdentifier",
        typ: true
      }, {
        json: "worldDepth",
        js: "worldDepth",
        typ: 0
      }, {
        json: "worldX",
        js: "worldX",
        typ: 0
      }, {
        json: "worldY",
        js: "worldY",
        typ: 0
      } ], false),
      LevelBackgroundPosition: o([ {
        json: "cropRect",
        js: "cropRect",
        typ: a(3.14)
      }, {
        json: "scale",
        js: "scale",
        typ: a(3.14)
      }, {
        json: "topLeftPx",
        js: "topLeftPx",
        typ: a(0)
      } ], false),
      NeighbourLevel: o([ {
        json: "dir",
        js: "dir",
        typ: ""
      }, {
        json: "levelIid",
        js: "levelIid",
        typ: ""
      }, {
        json: "levelUid",
        js: "levelUid",
        typ: u(void 0, 0)
      } ], false),
      World: o([ {
        json: "defaultLevelHeight",
        js: "defaultLevelHeight",
        typ: 0
      }, {
        json: "defaultLevelWidth",
        js: "defaultLevelWidth",
        typ: 0
      }, {
        json: "identifier",
        js: "identifier",
        typ: ""
      }, {
        json: "iid",
        js: "iid",
        typ: ""
      }, {
        json: "levels",
        js: "levels",
        typ: a(r("Level"))
      }, {
        json: "worldGridHeight",
        js: "worldGridHeight",
        typ: 0
      }, {
        json: "worldGridWidth",
        js: "worldGridWidth",
        typ: 0
      }, {
        json: "worldLayout",
        js: "worldLayout",
        typ: u(r("WorldLayout"), null)
      } ], false),
      Checker: [ "Horizontal", "None", "Vertical" ],
      TileMode: [ "Single", "Stamp" ],
      AllowedRefs: [ "Any", "OnlySame", "OnlyTags" ],
      EditorDisplayMode: [ "ArrayCountNoLabel", "ArrayCountWithLabel", "EntityTile", "Hidden", "NameAndValue", "PointPath", "PointPathLoop", "PointStar", "Points", "RadiusGrid", "RadiusPx", "RefLinkBetweenCenters", "RefLinkBetweenPivots", "ValueOnly" ],
      EditorDisplayPos: [ "Above", "Beneath", "Center" ],
      TextLanguageMode: [ "LangC", "LangHaxe", "LangJS", "LangJson", "LangLog", "LangLua", "LangMarkdown", "LangPython", "LangRuby", "LangXml" ],
      LimitBehavior: [ "DiscardOldOnes", "MoveLastOne", "PreventAdding" ],
      LimitScope: [ "PerLayer", "PerLevel", "PerWorld" ],
      RenderMode: [ "Cross", "Ellipse", "Rectangle", "Tile" ],
      TileRenderMode: [ "Cover", "FitInside", "FullSizeCropped", "FullSizeUncropped", "NineSlice", "Repeat", "Stretch" ],
      Type: [ "AutoLayer", "Entities", "IntGrid", "Tiles" ],
      EmbedAtlas: [ "LdtkIcons" ],
      BgPos: [ "Contain", "Cover", "CoverDirty", "Unscaled" ],
      WorldLayout: [ "Free", "GridVania", "LinearHorizontal", "LinearVertical" ],
      Flag: [ "DiscardPreCsvIntGrid", "ExportPreCsvIntGridFormat", "IgnoreBackupSuggest", "MultiWorlds", "PrependIndexToLevelFileNames", "UseMultilinesType" ],
      IdentifierStyle: [ "Capitalize", "Free", "Lowercase", "Uppercase" ],
      ImageExportMode: [ "LayersAndLevels", "None", "OneImagePerLayer", "OneImagePerLevel" ]
    };
    cc._RF.pop();
  }, {} ],
  LevelData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58686Q/aZlPRJziOF8GmsMo", "LevelData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var EquipItemMapData_1 = require("./EquipItemMapData");
    var ExitData_1 = require("./ExitData");
    var LevelData = function() {
      function LevelData() {
        this.name = "";
        this.index = 0;
        this.chapter = 0;
        this.width = 0;
        this.height = 0;
        this.seed = 0;
        this.roomWidth = 0;
        this.roomHeight = 0;
        this.floorRes = "";
        this.floorRes1 = "";
        this.floorRes2 = "";
        this.floorRes3 = "";
        this.floorRes4 = "";
        this.floorRes5 = "";
        this.floorRes6 = "";
        this.floorRes7 = "";
        this.floorRes8 = "";
        this.floorRes9 = "";
        this.wallRes0 = "";
        this.wallRes1 = "";
        this.wallRes2 = "";
        this.wallRes3 = "";
        this.wallRes4 = "";
        this.wallRes5 = "";
        this.wallRes6 = "";
        this.wallRes7 = "";
        this.wallRes8 = "";
        this.wallRes9 = "";
        this.wallResOther0 = "";
        this.wallResOther1 = "";
        this.wallResOther2 = "";
        this.wallResOther3 = "";
        this.wallResOther4 = "";
        this.wallResOther5 = "";
        this.wallResOther6 = "";
        this.wallResOther7 = "";
        this.wallResOther8 = "";
        this.wallResOther9 = "";
        this.equipitems = "";
        this.needRandomDecorate = false;
        this.minimapOnlyCurrentRoom = false;
        this.isOutside = false;
        this.map = [];
        this.floormap = [];
        this.roomTypes = [];
        this.shadowMap = [];
        this.outSideMap = [];
        this.exits = "";
      }
      LevelData.prototype.getWallRes = function(index, isOther) {
        switch (index) {
         case 0:
          return isOther ? this.wallResOther0 : this.wallRes0;

         case 1:
          return isOther ? this.wallResOther1 : this.wallRes1;

         case 2:
          return isOther ? this.wallResOther2 : this.wallRes2;

         case 3:
          return isOther ? this.wallResOther3 : this.wallRes3;

         case 4:
          return isOther ? this.wallResOther4 : this.wallRes4;

         case 5:
          return isOther ? this.wallResOther5 : this.wallRes5;

         case 6:
          return isOther ? this.wallResOther6 : this.wallRes6;

         case 7:
          return isOther ? this.wallResOther7 : this.wallRes7;

         case 8:
          return isOther ? this.wallResOther8 : this.wallRes8;

         case 9:
          return isOther ? this.wallResOther9 : this.wallRes9;
        }
      };
      LevelData.prototype.getFloorRes = function(index) {
        switch (index) {
         case 0:
          return this.floorRes;

         case 1:
          return this.floorRes1;

         case 2:
          return this.floorRes2;

         case 3:
          return this.floorRes3;

         case 4:
          return this.floorRes4;

         case 5:
          return this.floorRes5;

         case 6:
          return this.floorRes6;

         case 7:
          return this.floorRes7;

         case 8:
          return this.floorRes8;

         case 9:
          return this.floorRes9;
        }
      };
      LevelData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.map = data.map;
        this.floormap = data.floormap;
        this.roomTypes = data.roomTypes;
        this.shadowMap = data.shadowMap;
        this.outSideMap = data.outSideMap;
        this.lights = data.lights;
      };
      LevelData.prototype.getRoomMap = function(x, y) {
        var temp = new Array();
        if (x < 0 || y < 0 || x > this.width - 1 || y > this.height - 1) return temp;
        for (var i = 0; i < this.roomWidth; i++) {
          temp[i] = new Array();
          for (var j = 0; j < this.roomHeight; j++) temp[i][j] = this.map[i + x * this.roomWidth][j + y * this.roomHeight];
        }
        return temp;
      };
      LevelData.prototype.getRoomFloorMap = function(x, y) {
        var temp = new Array();
        if (x < 0 || y < 0 || x > this.width - 1 || y > this.height - 1) return temp;
        for (var i = 0; i < this.roomWidth; i++) {
          temp[i] = new Array();
          for (var j = 0; j < this.roomHeight; j++) temp[i][j] = this.floormap[i + x * this.roomWidth][j + y * this.roomHeight];
        }
        return temp;
      };
      LevelData.prototype.getExitList = function() {
        var list = new Array();
        if (this.exits && this.exits.length > 0) {
          var arr = this.exits.split("#");
          for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var str = arr_1[_i];
            var data = new ExitData_1.default();
            var temps = str.split(",");
            var fx = parseInt(temps[0]);
            var fy = this.roomHeight * this.height - parseInt(temps[1]) - 1;
            var tx = parseInt(temps[4]);
            var ty = parseInt(temps[5]);
            var roomX = Math.floor(fx / this.roomWidth);
            var roomY = Math.floor(fy / this.roomHeight);
            data.fromRoomPos = cc.v3(roomX, roomY);
            data.fromPos = cc.v3(fx % this.roomWidth, fy % this.roomHeight);
            data.fromChapter = this.chapter;
            data.fromLevel = this.index;
            data.toChapter = parseInt(temps[2]);
            data.toLevel = parseInt(temps[3]);
            data.toPos = cc.v3(tx, ty);
            temps.length > 6 && (data.fromZ = parseInt(temps[6]));
            temps.length > 7 && (data.toPosZ = parseInt(temps[7]));
            temps.length > 8 && (data.res = temps[8]);
            list.push(data);
          }
        }
        return list;
      };
      LevelData.prototype.getEquipItemList = function() {
        var list = new Array();
        if (this.equipitems && this.equipitems.length > 0) {
          var arr = this.equipitems.split("#");
          for (var _i = 0, arr_2 = arr; _i < arr_2.length; _i++) {
            var str = arr_2[_i];
            var data = new EquipItemMapData_1.default();
            var temps = str.split(",");
            var fx = parseInt(temps[0]);
            var fy = this.roomHeight * this.height - parseInt(temps[1]) - 1;
            var roomX = Math.floor(fx / this.roomWidth);
            var roomY = Math.floor(fy / this.roomHeight);
            data.fromRoomPos = cc.v3(roomX, roomY);
            data.fromPos = cc.v3(fx % this.roomWidth, fy % this.roomHeight);
            data.resName = temps[2];
            list.push(data);
          }
        }
        return list;
      };
      return LevelData;
    }();
    exports.default = LevelData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./EquipItemMapData": "EquipItemMapData",
    "./ExitData": "ExitData"
  } ],
  LifeData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f7167eNvVlCr6WZO6jChPq+", "LifeData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var LifeData = function(_super) {
      __extends(LifeData, _super);
      function LifeData() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sanity = 75;
        _this.solidSatiety = 75;
        _this.liquidSatiety = 75;
        _this.poo = 0;
        _this.pee = 0;
        _this.timeScale = 1;
        return _this;
      }
      LifeData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.timeScale = data.timeScale ? data.timeScale : 1;
      };
      LifeData.prototype.clone = function() {
        var e = new LifeData();
        e.valueCopy(this);
        return e;
      };
      LifeData.SOLID_LOSS = .0035;
      LifeData.LIQUID_LOSS = .005;
      LifeData.POO_RATE = .2;
      LifeData.PEERATE = .2;
      return LifeData;
    }(BaseData_1.default);
    exports.default = LifeData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData"
  } ],
  LightBuilding: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2591n42odFIbhfimSigtUE", "LightBuilding");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LightBuilding = function(_super) {
      __extends(LightBuilding, _super);
      function LightBuilding() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      LightBuilding.prototype.onLoad = function() {};
      LightBuilding = __decorate([ ccclass ], LightBuilding);
      return LightBuilding;
    }(Building_1.default);
    exports.default = LightBuilding;
    cc._RF.pop();
  }, {
    "./Building": "Building"
  } ],
  LightManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "28a3dFSvA1P3KOJyNBCO1Gn", "LightManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseManager_1 = require("./BaseManager");
    var Logic_1 = require("../logic/Logic");
    var IndexZ_1 = require("../utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LightManager = function(_super) {
      __extends(LightManager, _super);
      function LightManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.camera = null;
        _this.shadowCamera = null;
        _this.shadowCamera1 = null;
        _this.shadow = null;
        _this.shadow1 = null;
        _this.shadowRay = null;
        _this.shadowAlpha = LightManager_1.ALPHA_START;
        _this.hasOutSideLight = false;
        _this.isFirstRender = true;
        _this.checkTimeDelay = 0;
        _this.checkTimeChangeDelay = 0;
        return _this;
      }
      LightManager_1 = LightManager;
      LightManager.prototype.clear = function() {
        LightManager_1.lightList = [];
      };
      LightManager.prototype.onLoad = function() {
        this.mat = this.shadow.getMaterial(0);
        this.mat1 = this.shadow1.getMaterial(0);
        this.timeChange();
      };
      LightManager.prototype.render = function() {
        this.hasOutSideLight = false;
        for (var i = 0; i < LightManager_1.lightList.length; i++) {
          var light = LightManager_1.lightList[i];
          if (light) {
            light.fromOutside && (this.hasOutSideLight = true);
            light.renderSightArea(this.camera);
            this.renderRay(light, 0 == i, this.shadowRay);
          }
        }
        var scale = 8;
        if (!this.shadowTexture) {
          this.shadowTexture = new cc.RenderTexture();
          this.shadowTexture.initWithSize(cc.visibleRect.width / scale, cc.visibleRect.height / scale);
          this.shadowTexture.setFilters(cc.Texture2D.Filter.LINEAR, cc.Texture2D.Filter.LINEAR);
          this.shadowCamera.targetTexture = this.shadowTexture;
          this.shadow.spriteFrame = new cc.SpriteFrame(this.shadowTexture);
        }
        if (!this.shadowTexture1) {
          this.shadowTexture1 = new cc.RenderTexture();
          this.shadowTexture1.initWithSize(cc.visibleRect.width / scale, cc.visibleRect.height / scale);
          this.shadowTexture1.setFilters(cc.Texture2D.Filter.LINEAR, cc.Texture2D.Filter.LINEAR);
          this.shadowCamera1.targetTexture = this.shadowTexture1;
          this.shadow1.spriteFrame = new cc.SpriteFrame(this.shadowTexture1);
        }
        if (this.isFirstRender) {
          this.isFirstRender = false;
          this.timeChange();
        }
      };
      LightManager.registerLight = function(lights, actorNode) {
        if (!lights || lights.length < 1) return;
        for (var _i = 0, lights_1 = lights; _i < lights_1.length; _i++) {
          var light = lights_1[_i];
          light.showShadow = light.node.active;
          if (light.fromSky) {
            var p = light.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
            light.node.parent = actorNode.parent;
            light.node.position = light.node.parent.convertToNodeSpaceAR(p);
            light.node.zIndex = IndexZ_1.default.OVERHEAD;
          }
          LightManager_1.lightList.push(light);
        }
      };
      LightManager.unRegisterLight = function(lights) {
        if (!lights || lights.length < 1) return;
        for (var _i = 0, lights_2 = lights; _i < lights_2.length; _i++) {
          var light = lights_2[_i];
          var index = LightManager_1.lightList.indexOf(light);
          -1 != index && LightManager_1.lightList.splice(index, 1);
        }
      };
      LightManager.prototype.renderRay = function(light, isFirst, graphics) {
        var potArr = light.lightVertsArray;
        var lightRects = light.lightRects;
        var circle = light.circle;
        isFirst && graphics.clear(false);
        if (!light.showShadow) return;
        graphics.lineWidth = 10;
        graphics.fillColor = light.renderColor;
        if (potArr && potArr.length > 0) {
          var p0 = graphics.node.convertToNodeSpaceAR(potArr[0]);
          graphics.moveTo(p0.x, p0.y);
          for (var i = 1; i < potArr.length; i++) {
            var p = graphics.node.convertToNodeSpaceAR(potArr[i]);
            graphics.lineTo(p.x, p.y);
          }
          graphics.close();
          graphics.fill();
        }
        for (var key in lightRects) {
          var lightRect = lightRects[key];
          var c = graphics.node.convertToNodeSpaceAR(cc.v2(lightRect.x, lightRect.y));
          graphics.rect(c.x, c.y, lightRect.width, lightRect.height);
          graphics.fill();
        }
        circle && circle.z > 0 && this.drawCircle(graphics, circle.x, circle.y, circle.z);
      };
      LightManager.prototype.drawCircle = function(graphics, x, y, r) {
        var center = graphics.node.convertToNodeSpaceAR(cc.v3(x, y));
        graphics.circle(center.x, center.y, r);
        graphics.fill();
      };
      LightManager.prototype.fixShadowPos = function() {
        if (this.camera) {
          var p1 = this.camera.node.convertToWorldSpaceAR(cc.v2(0, 0));
          if (this.shadow) {
            var c1 = this.shadowRay.node.convertToNodeSpaceAR(p1);
            this.shadow.node.position = cc.v3(c1);
            this.shadow1.node.position = cc.v3(c1);
          }
        }
      };
      LightManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .03) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      LightManager.prototype.isCheckTimeChangeDelay = function(dt) {
        this.checkTimeChangeDelay += dt;
        if (this.checkTimeChangeDelay > 1) {
          this.checkTimeChangeDelay = 0;
          return true;
        }
        return false;
      };
      LightManager.prototype.timeChange = function() {
        var alpha = this.getShadowAlphaByTime();
        this.shadowAlpha = LightManager_1.ALPHA_START + alpha;
        this.shadowAlpha > LightManager_1.ALPHA_END && (this.shadowAlpha = LightManager_1.ALPHA_END);
        this.shadowAlpha < LightManager_1.ALPHA_START && (this.shadowAlpha = LightManager_1.ALPHA_START);
        this.shadowAlpha += this.getShadowAlphaByRoom();
        this.shadowAlpha > 240 && (this.shadowAlpha = 240);
        this.shadowAlpha < 0 && (this.shadowAlpha = 0);
        this.mat.setProperty("lightColor", cc.color(0, 0, 20, this.shadowAlpha));
      };
      LightManager.prototype.getShadowAlphaByRoom = function() {
        var shadowLevel = Logic_1.default.mapManager.getCurrentRoom().shadowLevel;
        return !shadowLevel || isNaN(parseInt(shadowLevel)) ? 0 : 25 * parseInt(shadowLevel);
      };
      LightManager.prototype.getShadowAlphaByTime = function() {
        if (!this.hasOutSideLight) return 0;
        var date = new Date(Logic_1.default.getTickTime());
        var hour = date.getHours();
        var minute = date.getMinutes();
        var m = Math.floor(20 * minute / 60);
        if (hour > 12) {
          var h = 20 * (hour - 12);
          return h + m;
        }
        var h = 20 * (12 - hour);
        return h - m;
      };
      LightManager.prototype.update = function(dt) {
        this.isCheckTimeDelay(dt) && this.render();
        this.isCheckTimeChangeDelay(dt) && this.timeChange();
        this.fixShadowPos();
      };
      var LightManager_1;
      LightManager.lightList = [];
      LightManager.ALPHA_START = 20;
      LightManager.ALPHA_END = 220;
      LightManager.ROOM_LIGHT = 50;
      __decorate([ property(cc.Camera) ], LightManager.prototype, "camera", void 0);
      __decorate([ property(cc.Camera) ], LightManager.prototype, "shadowCamera", void 0);
      __decorate([ property(cc.Camera) ], LightManager.prototype, "shadowCamera1", void 0);
      __decorate([ property(cc.Sprite) ], LightManager.prototype, "shadow", void 0);
      __decorate([ property(cc.Sprite) ], LightManager.prototype, "shadow1", void 0);
      __decorate([ property(cc.Graphics) ], LightManager.prototype, "shadowRay", void 0);
      LightManager = LightManager_1 = __decorate([ ccclass ], LightManager);
      return LightManager;
    }(BaseManager_1.default);
    exports.default = LightManager;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "../utils/IndexZ": "IndexZ",
    "./BaseManager": "BaseManager"
  } ],
  Light: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03c71kep4JPC4OkHwKVSXdP", "Light");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Light = function(_super) {
      __extends(Light, _super);
      function Light() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.layer = null;
        _this.lightPrefab = null;
        return _this;
      }
      Light.prototype.onLoad = function() {};
      Light.prototype.start = function() {};
      __decorate([ property(cc.Node) ], Light.prototype, "layer", void 0);
      __decorate([ property(cc.Prefab) ], Light.prototype, "lightPrefab", void 0);
      Light = __decorate([ ccclass ], Light);
      return Light;
    }(cc.Component);
    exports.default = Light;
    cc._RF.pop();
  }, {} ],
  LoadingIcon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "69f56NploZJ85VmIt+4fEdC", "LoadingIcon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var Random_1 = require("../utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LoadingIcon = function(_super) {
      __extends(LoadingIcon, _super);
      function LoadingIcon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label1 = null;
        _this.icon = null;
        _this.label2 = null;
        _this.isFirst = false;
        _this.layout = null;
        _this.map0 = null;
        _this.map1 = null;
        _this.npc0 = null;
        _this.npc1 = null;
        _this.equip0 = null;
        _this.equip1 = null;
        _this.item0 = null;
        _this.item1 = null;
        _this.audio0 = null;
        _this.audio1 = null;
        _this.texture0 = null;
        _this.texture1 = null;
        _this.textureauto0 = null;
        _this.textureauto1 = null;
        return _this;
      }
      LoadingIcon_1 = LoadingIcon;
      LoadingIcon.prototype.onLoad = function() {
        var _this = this;
        this.isFirst = Logic_1.default.isFirstLoading;
        this.getComponent(cc.Animation).play(Logic_1.default.isFirstLoading ? "LoadingIconWithLabel" : "LoadingIcon");
        this.label2.string = "" + LoadingIcon_1.WORDS[Random_1.default.getRandomNum(0, LoadingIcon_1.WORDS.length - 1)];
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.LOADING_ICON, function(detail) {
          if (_this.node) switch (detail.type) {
           case LoadingIcon_1.TYPE_MAP:
            _this.mapLoaded();
            break;

           case LoadingIcon_1.TYPE_NPC:
            _this.npcLoaded();
            break;

           case LoadingIcon_1.TYPE_EQUIP:
            _this.equipLoaded();
            break;

           case LoadingIcon_1.TYPE_ITEM:
            _this.itemLoaded();
            break;

           case LoadingIcon_1.TYPE_AUDIO:
            _this.audioLoaded();
            break;

           case LoadingIcon_1.TYPE_TEXTURE:
            _this.textureLoaded();
            break;

           case LoadingIcon_1.TYPE_TEXTURE_AUTO:
            _this.textureautoLoaded();
          }
        });
      };
      LoadingIcon.prototype.iconShow = function(node0, node1) {
        cc.tween(node0).to(.1, {
          scale: .8
        }).to(.1, {
          scale: 2
        }).to(.1, {
          scale: 1
        }).start();
        cc.tween(node1).to(.3, {
          opacity: 255
        }).start();
      };
      LoadingIcon.prototype.init = function(includeArr) {
        var arr = [ this.map0, this.npc0, this.equip0, this.item0, this.audio0, this.texture0, this.textureauto0, this.audio0 ];
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var icon = arr_1[_i];
          icon.active = false;
        }
        for (var _a = 0, includeArr_1 = includeArr; _a < includeArr_1.length; _a++) {
          var index = includeArr_1[_a];
          index >= 0 && index < arr.length && (arr[index].active = true);
        }
      };
      LoadingIcon.prototype.mapLoaded = function() {
        this.iconShow(this.map0, this.map1);
      };
      LoadingIcon.prototype.npcLoaded = function() {
        this.iconShow(this.npc0, this.npc1);
      };
      LoadingIcon.prototype.equipLoaded = function() {
        this.iconShow(this.equip0, this.equip1);
      };
      LoadingIcon.prototype.itemLoaded = function() {
        this.iconShow(this.item0, this.item1);
      };
      LoadingIcon.prototype.audioLoaded = function() {
        this.iconShow(this.audio0, this.audio1);
      };
      LoadingIcon.prototype.textureLoaded = function() {
        this.iconShow(this.texture0, this.texture1);
      };
      LoadingIcon.prototype.textureautoLoaded = function() {
        this.iconShow(this.textureauto0, this.textureauto1);
      };
      LoadingIcon.prototype.start = function() {
        Logic_1.default.isFirstLoading = false;
      };
      var LoadingIcon_1;
      LoadingIcon.TYPE_MAP = 0;
      LoadingIcon.TYPE_NPC = 1;
      LoadingIcon.TYPE_EQUIP = 2;
      LoadingIcon.TYPE_ITEM = 3;
      LoadingIcon.TYPE_AUDIO = 4;
      LoadingIcon.TYPE_TEXTURE = 5;
      LoadingIcon.TYPE_TEXTURE_AUTO = 6;
      LoadingIcon.WORDS = [ "\u68a6\u662f\u5927\u81ea\u7136\u6240\u4f5c\u7684\u806a\u660e\u7684\u5b89\u6392,\u4e3a\u4e86\u5728\u57fa\u4e8e\u610f\u5fd7\u7684\u8eab\u4f53\u8fd0\u52a8\u5373\u808c\u8089\u8fd0\u52a8\u6682\u65f6\u4f11\u606f\u65f6,\u7528\u4e0d\u968f\u610f\u865a\u6784\u51fa\u6765\u7684\u4e8b\u7269\u6240\u4ea7\u751f\u7684\u6fc0\u60c5\u53bb\u523a\u6fc0\u751f\u547d\u529b\u3002", "\u4e00\u65b9\u9762,\u68a6\u662f\u53cd\u6620\u751f\u6d3b\u7684;\u53e6\u4e00\u65b9\u9762,\u68a6\u53c8\u662f\u8fdc\u79bb\u751f\u6d3b\u7684\u3002\u5b83\u4ee5\u5938\u5f20\u3001\u6b6a\u66f2\u3001\u751a\u81f3\u53d8\u5f62\u7684\u65b9\u5f0f\u53cd\u6620\u751f\u6d3b\u3002", "\u68a6\u628a\u4eba\u4eec\u4ece\u684e\u688f\u822c\u7684\u73b0\u5b9e\u4e2d,\u91ca\u653e\u4e86\u51fa\u6765,\u4f7f\u4ed6\u81ea\u7531,\u4f7f\u4ed6\u5728\u4e91\u4e2d\u7ff1\u7fd4,\u4f7f\u4ed6\u5728\u5c71\u5cf0\u4e0a\u5954\u8d70\u3002", "\u5076\u7136\u505a\u4e2a\u767d\u663c\u68a6,\u60f3\u5165\u975e\u975e,\u4efb\u60f3\u8c61\u53bb\u9a70\u9a8b,\u83b7\u5f97\u4e00\u65f6\u7684\u6170\u5b89,\u5f53\u7136\u4ea6\u65e0\u4e0d\u53ef,\u4f46\u662f\u7a76\u7adf\u53ea\u662f\u4e00\u65f6\u6709\u6548\u7684\u9547\u5b9a\u5242,\u53ef\u4ee5\u6682\u65f6\u6b62\u75db,\u4f46\u4e0d\u6839\u672c\u6cbb\u7597\u3002", "\u68a6\u4e0e\u89c9\u3001\u9189\u4e0e\u9192\u3001\u5e7b\u4e0e\u771f\u3001\u865a\u4e0e\u5b9e\u3001\u663e\u4e0e\u9690\u3001\u5f62\u4e0e\u8ff9\u3001\u5149\u4e0e\u5f71\u3001\u6697\u4e0e\u660e,\u90fd\u662f\u751f\u6d3b\u91cc\u4e00\u4e8b\u7684\u4e24\u9762,\u4e92\u76f8\u4f9d\u5b58,\u800c\u6cfe\u6e2d\u81ea\u5206\u3002", "\u68a6\u662f\u4e0d\u53ef\u601d\u8bae\u7684,\u4e5f\u662f\u4e0d\u53ef\u6349\u6478\u7684,\u65e2\u65e0\u6cd5\u9884\u6599,\u4e5f\u65e0\u6cd5\u9009\u62e9\u548c\u63a7\u5236\u3002", "\u505a\u5669\u68a6\u65f6,\u75db\u82e6\u6216\u6050\u6016\u8fbe\u5230\u6700\u9ad8\u5ea6,\u6050\u6016\u7684\u672c\u8eab\u4fbf\u4fc3\u4f7f\u6211\u4eec\u89c9\u9192,\u68a6\u4e2d\u7684\u5996\u9b54\u9b3c\u602a\u4e5f\u63a5\u7740\u6d88\u706d\u3002\u5728\u4eba\u751f\u7684\u68a6\u4e2d\u60c5\u5f62\u4ea6\u590d\u5982\u6b64\u3002", "\u68a6\u662f\u4e0d\u8fde\u8d2f\u7684,\u5b83\u6beb\u4e0d\u8fdf\u7591\u5730\u8c03\u548c\u7740\u8352\u8c2c\u7684\u77db\u76fe,\u5b83\u63a5\u53d7\u4e0d\u53ef\u80fd\u6027,\u6f20\u89c6\u6e05\u9192\u72b6\u6001\u65f6\u7684\u6743\u5a01\u6027\u8ba4\u8bc6,\u800c\u4e14\u5b83\u5411\u6211\u4eec\u663e\u793a\u5bf9\u4f26\u7406\u9053\u5fb7\u7684\u8fdf\u949d", "\u90a3\u6c38\u4e45\u6c89\u7761\u7684\u5e76\u975e\u6b7b\u8005\uff0c\u5728\u6f2b\u957f\u800c\u5947\u5f02\u7684\u65f6\u5149\u4e2d\uff0c\u6b7b\u4ea1\u4ea6\u6709\u5176\u7ec8\u7ed3\u3002", "\u8fd9\u4e2a\u4e16\u754c\u6700\u4ec1\u6148\u7684\u5730\u65b9\uff0c\u83ab\u8fc7\u4e8e\u4eba\u7c7b\u601d\u7ef4\u65e0\u6cd5\u878d\u4f1a\u8d2f\u901a\u5b83\u7684\u5168\u90e8\u5185\u5bb9\u3002", "\u6c38\u8fdc\u8eba\u4e0b\u7684\u5e76\u6ca1\u6709\u6b7b\u53bb\uff0c\u5728\u795e\u79d8\u7684\u4e07\u53e4\u4e2d\u5373\u4fbf\u662f\u6b7b\u4ea1\u4e5f\u53ef\u4ee5\u6b7b\u53bb\u3002", "\u4eba\u7c7b\u5c45\u4f4f\u5728\u5e7d\u6697\u7684\u6d77\u6d0b\u4e2d\u4e00\u4e2a\u540d\u4e3a\u65e0\u77e5\u7684\u5c0f\u5c9b\u4e0a\uff0c\u8fd9\u6d77\u6d0b\u6d69\u6dfc\u65e0\u57a0\u3001\u8574\u85cf\u65e0\u7a77\u79d8\u5bc6\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u5e94\u8be5\u822a\u884c\u8fc7\u8fdc\uff0c\u63a2\u7a76\u592a\u6df1\u3002", "\u4e3a\u4ec0\u4e48\u5931\u7720\u5462\n\u56e0\u4e3a\u6015\u90a3\u4e2a\u68a6\n\u90a3\u4e2a\u4e0d\u662f\u5669\u68a6\u7684\u5669\u68a6\u3002", "\u80fd\u7ed9\u522b\u4eba\u5e26\u6765\u5669\u68a6\u7684\u4eba\uff0c\u4ed6\u81ea\u5df1\u5f80\u5f80\u8981\u627f\u8f7d\u7740\u66f4\u591a\u7684\u5669\u68a6\u3002\n\u6240\u4ee5\u90a3\u65e2\u662f\u4e00\u4e2a\u602a\u7269\uff0c\u66f4\u662f\u4e00\u4e2a\u53ef\u601c\u7684\u53d7\u5bb3\u8005\u3002", "\u4e0e\u602a\u7269\u6218\u6597\u7684\u4eba\uff0c\u5e94\u5f53\u5c0f\u5fc3\u81ea\u5df1\u4e0d\u8981\u6210\u4e3a\u602a\u7269\u3002\n\u5f53\u4f60\u8fdc\u8fdc\u51dd\u89c6\u6df1\u6e0a\u65f6\uff0c\u6df1\u6e0a\u4e5f\u5728\u51dd\u89c6\u4f60\u3002", "\u7cbe\u795e\u5206\u6790\u6709\u4e09\u5927\u652f\u67f1\uff1a\u6f5c\u610f\u8bc6\u7684\u5fc3\u7406\u673a\u5236\uff0c\u53cd\u6297\u548c\u538b\u6291\u7684\u4f5c\u7528\uff0c\u4ee5\u53ca\u6027\u7684\u91cd\u8981\u6027\u3002", "\u68a6\u6709\u65f6\u4f1a\u901a\u8fc7\u4e00\u79cd\u975e\u5e38\u795e\u5947\u7684\u590d\u5236\u80fd\u529b\uff0c\u8ba9\u6211\u4eec\u56de\u60f3\u8d77\u9065\u8fdc\u7684\u4e8b\u7269\uff0c\u751a\u81f3\u662f\u6211\u4eec\u5df2\u7ecf\u5fd8\u8bb0\u7684\u81ea\u5df1\u3002", "\u4e8b\u5b9e\u4e0a\uff0c\u68a6\u4e4b\u6240\u4ee5\u88ab\u4fee\u6539\u6210\u4e0d\u6109\u5feb\u7684\uff0c\u662f\u56e0\u4e3a\u6709\u4e9b\u68a6\u662f\u7cbe\u795e\u7684\u7b2c\u4e8c\u6b65\u6240\u4e0d\u5141\u8bb8\u7684\uff0c\u800c\u8fd9\u4e9b\u6b63\u662f\u7cbe\u795e\u7684\u7b2c\u4e00\u6b65\u6240\u9700\u8981\u7684\u6b32\u671b\u3002", "\u5728\u6211\u4eec\u7684\u68a6\u4e2d\u51fa\u73b0\u7684\u662f\u6211\u4eec\u5728\u5916\u90e8\u4e16\u754c\u6216\u81ea\u8eab\u7ecf\u5386\u7684\u3002", "\u6bcf\u4e00\u4e2a\u68a6\u90fd\u8d77\u6e90\u4e8e\u7b2c\u4e00\u79cd\u529b\u91cf\uff08\u6b32\u671b\uff09\uff0c\u4f46\u53d7\u5230\u4e86\u7b2c\u4e8c\u79cd\u529b\u91cf\uff08\u610f\u8bc6\uff09\u7684\u9632\u5fa1\u548c\u62b5\u5236\u3002", "\u68a6\u662f\u4e00\u4e2a\u4eba\u4e0e\u81ea\u5df1\u5185\u5fc3\u7684\u771f\u5b9e\u5bf9\u8bdd\uff0c\u662f\u5411\u81ea\u5df1\u5b66\u4e60\u7684\u8fc7\u7a0b\uff0c\u662f\u53e6\u4e00\u6b21\u4e0e\u81ea\u5df1\u606f\u606f\u76f8\u5173\u7684\u4eba\u751f\u3002", "\u4e00\u5207\u7684\u4e0d\u5982\u610f\u4e0d\u4e86\u89e3,\u90fd\u53ef\u4ee5\u7528\u4e00\u5c42\u8584\u5e55\u53bb\u906e\u853d,\u8fd9\u5c42\u8584\u5e55,\u6211\u4eec\u53ef\u4ee5\u8bf4\u662f\u68a6\u3002" ];
      __decorate([ property(cc.Label) ], LoadingIcon.prototype, "label1", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "icon", void 0);
      __decorate([ property(cc.Label) ], LoadingIcon.prototype, "label2", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "layout", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "map0", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "map1", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "npc0", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "npc1", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "equip0", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "equip1", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "item0", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "item1", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "audio0", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "audio1", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "texture0", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "texture1", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "textureauto0", void 0);
      __decorate([ property(cc.Node) ], LoadingIcon.prototype, "textureauto1", void 0);
      LoadingIcon = LoadingIcon_1 = __decorate([ ccclass ], LoadingIcon);
      return LoadingIcon;
    }(cc.Component);
    exports.default = LoadingIcon;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "../utils/Random": "Random",
    "./../logic/EventHelper": "EventHelper"
  } ],
  LoadingManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cdbddTOfANNwo68tyWHiEGz", "LoadingManager");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./../logic/EventHelper");
    var ProfessionData_1 = require("../data/ProfessionData");
    var Logic_1 = require("../logic/Logic");
    var LoadingIcon_1 = require("../ui/LoadingIcon");
    var AffixMapData_1 = require("../data/AffixMapData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LoadingManager = function() {
      function LoadingManager() {
        this.spriteFrameNames = null;
        this.isEquipmentLoaded = false;
        this.isMonsterLoaded = false;
        this.isNonplayerLoaded = false;
        this.isPlayerLoaded = false;
        this.isBossLoaded = false;
        this.isBuffsLoaded = false;
        this.isSuitsLoaded = false;
        this.isBulletsLoaded = false;
        this.isProfessionLoaded = false;
        this.isItemsLoaded = false;
        this.isSkillsLoaded = false;
        this.isBuildingLoaded = false;
        this.isFurnituresLoaded = false;
        this.isNormalBuildingLoaded = false;
        this.isTransportAnimFinished = true;
        this.isSoundLoaded = false;
        this.isBgmLoaded = false;
        this.isDialogueLoaded = false;
        this.isBehaviorsLoaded = false;
        this.isAffixsLoaded = false;
        this.isMetalsLoaded = false;
      }
      LoadingManager_1 = LoadingManager;
      LoadingManager.prototype.init = function() {
        this.setAllSpriteFramesUnload();
        Logic_1.default.spriteFrames || (Logic_1.default.spriteFrames = {});
        Logic_1.default.buildings || (Logic_1.default.buildings = {});
        this.isEquipmentLoaded = false;
        this.isMonsterLoaded = false;
        this.isBuffsLoaded = false;
        this.isNonplayerLoaded = false;
        this.isPlayerLoaded = false;
        this.isBuildingLoaded = false;
        this.isFurnituresLoaded = false;
        this.isSoundLoaded = false;
        this.isBgmLoaded = false;
        this.isNormalBuildingLoaded = false;
        this.isAffixsLoaded = false;
      };
      LoadingManager.prototype.reset = function() {
        this.isEquipmentLoaded = false;
        this.setAllSpriteFramesUnload();
        this.isBuffsLoaded = false;
        this.isProfessionLoaded = false;
        this.isBulletsLoaded = false;
        this.isMonsterLoaded = false;
        this.isNonplayerLoaded = false;
        this.isPlayerLoaded = false;
        this.isItemsLoaded = false;
        this.isSkillsLoaded = false;
        this.isBuildingLoaded = false;
        this.isTransportAnimFinished = false;
        this.isSuitsLoaded = false;
        this.isFurnituresLoaded = false;
        this.isSoundLoaded = false;
        this.isBgmLoaded = false;
        this.isNormalBuildingLoaded = false;
        this.isDialogueLoaded = false;
        this.isBehaviorsLoaded = false;
        this.isAffixsLoaded = false;
      };
      LoadingManager.prototype.isSpriteFramesLoaded = function(loadedName) {
        if (!this.spriteFrameNames[loadedName]) return false;
        return true;
      };
      LoadingManager.prototype.isAllSpriteFramesLoaded = function() {
        for (var loadedName in this.spriteFrameNames) if (!this.spriteFrameNames[loadedName]) return false;
        return true;
      };
      LoadingManager.prototype.setAllSpriteFramesUnload = function() {
        this.spriteFrameNames = {};
        this.spriteFrameNames[LoadingManager_1.KEY_AUTO] = false;
        this.spriteFrameNames[LoadingManager_1.KEY_TEXTURES] = false;
        this.spriteFrameNames[LoadingManager_1.KEY_EQUIPMENT] = false;
        this.spriteFrameNames[LoadingManager_1.KEY_ITEM] = false;
      };
      LoadingManager.prototype.loadWorld = function() {
        Logic_1.default.worldLoader.loadWorld();
      };
      LoadingManager.prototype.loadSound = function() {
        var _this = this;
        if (Logic_1.default.audioClips && Logic_1.default.audioClips["silence"]) {
          this.isSoundLoaded = true;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.LOADING_ICON, {
            type: LoadingIcon_1.default.TYPE_AUDIO
          });
          return;
        }
        cc.assetManager.getBundle(LoadingManager_1.AB_SOUND).loadDir("", cc.AudioClip, function(err, assert) {
          for (var _i = 0, assert_1 = assert; _i < assert_1.length; _i++) {
            var clip = assert_1[_i];
            Logic_1.default.audioClips[clip.name] = clip;
          }
          _this.isSoundLoaded = true;
          cc.log("\u52a0\u8f7d\u97f3\u6548\u5b8c\u6210");
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.LOADING_ICON, {
            type: LoadingIcon_1.default.TYPE_AUDIO
          });
        });
      };
      LoadingManager.prototype.loadBgm = function() {
        var _this = this;
        if (Logic_1.default.bgmClips && Logic_1.default.bgmClips["bgm001"]) {
          this.isBgmLoaded = true;
          return;
        }
        cc.assetManager.getBundle(LoadingManager_1.AB_BGM).loadDir("", cc.AudioClip, function(err, assert) {
          for (var _i = 0, assert_2 = assert; _i < assert_2.length; _i++) {
            var clip = assert_2[_i];
            Logic_1.default.bgmClips[clip.name] = clip;
          }
          _this.isBgmLoaded = true;
          cc.log("\u52a0\u8f7d\u80cc\u666f\u97f3\u4e50\u5b8c\u6210");
        });
      };
      LoadingManager.prototype.loadDialogue = function() {
        var _this = this;
        if (Logic_1.default.dialogues) {
          this.isDialogueLoaded = true;
          return;
        }
        cc.resources.loadDir("Data/dialogue", cc.JsonAsset, function(err, assert) {
          if (err) cc.error(err); else {
            Logic_1.default.dialogues = {};
            for (var _i = 0, assert_3 = assert; _i < assert_3.length; _i++) {
              var resource = assert_3[_i];
              for (var key in resource.json) Logic_1.default.dialogues[key] = resource.json[key];
            }
            _this.isDialogueLoaded = true;
            cc.log("\u52a0\u8f7d\u5bf9\u8bdd\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadBehaviors = function() {
        var _this = this;
        if (Logic_1.default.behaviors) {
          this.isBehaviorsLoaded = true;
          return;
        }
        cc.resources.loadDir("Data/behaviors", cc.JsonAsset, function(err, assert) {
          if (err) cc.error(err); else {
            Logic_1.default.behaviors = {};
            for (var _i = 0, assert_4 = assert; _i < assert_4.length; _i++) {
              var resource = assert_4[_i];
              for (var key in resource.json) Logic_1.default.behaviors[key] = resource.json[key];
            }
            _this.isBehaviorsLoaded = true;
            cc.log("\u52a0\u8f7dAI\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadEquipment = function() {
        var _this = this;
        if (Logic_1.default.equipments) {
          this.isEquipmentLoaded = true;
          return;
        }
        cc.resources.load("Data/equipment", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.equipments = resource.json;
            _this.isEquipmentLoaded = true;
            Logic_1.default.equipmentNameList = new Array();
            for (var key in resource.json) Logic_1.default.equipmentNameList.push(key);
            cc.log("\u52a0\u8f7d\u88c5\u5907(" + Logic_1.default.equipmentNameList.length + ")\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadProfession = function() {
        var _this = this;
        if (Logic_1.default.professionList && Logic_1.default.professionList.length > 0) {
          this.isProfessionLoaded = true;
          return;
        }
        cc.resources.load("Data/profession", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.professionList = new Array();
            var arr = resource.json;
            for (var i = 0; i < arr.length; i++) {
              var data = new ProfessionData_1.default();
              data.valueCopy(arr[i]);
              data.id = i;
              Logic_1.default.professionList.push(data);
            }
            _this.isProfessionLoaded = true;
            cc.log("\u52a0\u8f7d\u804c\u4e1a(" + Logic_1.default.professionList.length + ")\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadTalents = function() {
        var _this = this;
        if (Logic_1.default.talents) {
          this.isSkillsLoaded = true;
          return;
        }
        cc.resources.load("Data/talent", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.talents = resource.json;
            _this.isSkillsLoaded = true;
            cc.log("\u52a0\u8f7d\u6280\u80fd\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadMetals = function() {
        var _this = this;
        if (Logic_1.default.metals) {
          this.isMetalsLoaded = true;
          return;
        }
        cc.resources.load("Data/metal", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.metals = resource.json;
            for (var key in Logic_1.default.metals) Logic_1.default.metals[key].id = key;
            _this.isMetalsLoaded = true;
            cc.log("\u52a0\u8f7d\u5929\u8d4b\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadAffixs = function() {
        var _this = this;
        if (Logic_1.default.affixs && Logic_1.default.affixs.length > 0) {
          this.isAffixsLoaded = true;
          return;
        }
        cc.resources.load("Data/affixs", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.affixs = new Array();
            var arr = resource.json;
            for (var i = 0; i < arr.length; i++) {
              var data = new AffixMapData_1.default();
              data.valueCopy(arr[i]);
              data.id = i;
              Logic_1.default.affixs.push(data);
            }
            _this.isAffixsLoaded = true;
            cc.log("\u52a0\u8f7d\u8bcd\u7f00(" + Logic_1.default.affixs.length + ")\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadStatus = function() {
        var _this = this;
        if (Logic_1.default.status) {
          this.isBuffsLoaded = true;
          return;
        }
        cc.resources.load("Data/status", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.status = resource.json;
            _this.isBuffsLoaded = true;
            cc.log("\u52a0\u8f7d\u72b6\u6001\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadSuits = function() {
        var _this = this;
        if (Logic_1.default.suits) {
          this.isSuitsLoaded = true;
          return;
        }
        cc.resources.load("Data/suits", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.suits = resource.json;
            _this.isSuitsLoaded = true;
            cc.log("\u52a0\u8f7d\u5957\u88c5\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadFurnitures = function() {
        var _this = this;
        if (Logic_1.default.furnitures) {
          this.isFurnituresLoaded = true;
          return;
        }
        cc.resources.load("Data/furnitures", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.furnitures = resource.json;
            _this.isFurnituresLoaded = true;
            cc.log("\u52a0\u8f7d\u5bb6\u5177\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadNormalBuildings = function() {
        var _this = this;
        if (Logic_1.default.normalBuildings) {
          this.isNormalBuildingLoaded = true;
          return;
        }
        cc.resources.load("Data/buildings", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.normalBuildings = resource.json;
            for (var key in resource.json) Logic_1.default.normalBuildings[key].id = key;
            _this.isNormalBuildingLoaded = true;
            cc.log("\u52a0\u8f7d\u5efa\u7b51\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadBullets = function() {
        var _this = this;
        if (Logic_1.default.bullets) {
          this.isBulletsLoaded = true;
          return;
        }
        cc.resources.load("Data/bullet", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.bullets = resource.json;
            _this.isBulletsLoaded = true;
            cc.log("\u52a0\u8f7d\u5b50\u5f39\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadMonsters = function() {
        var _this = this;
        if (Logic_1.default.monsters) {
          this.isMonsterLoaded = true;
          return;
        }
        cc.resources.load("Data/monsters", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.monsters = resource.json;
            _this.isMonsterLoaded = true;
            cc.log("\u52a0\u8f7d\u602a\u7269\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadNonplayer = function() {
        var _this = this;
        if (Logic_1.default.nonplayers) {
          this.isNonplayerLoaded = true;
          return;
        }
        cc.resources.load("Data/nonplayers", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.nonplayers = resource.json;
            _this.isNonplayerLoaded = true;
            cc.log("\u52a0\u8f7d\u975e\u4eba\u5f62npc\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadPlayer = function() {
        var _this = this;
        if (Logic_1.default.players) {
          this.isPlayerLoaded = true;
          return;
        }
        cc.resources.load("Data/players", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.players = resource.json;
            for (var key in resource.json) Logic_1.default.players[key].id = key;
            _this.isPlayerLoaded = true;
            cc.log("\u52a0\u8f7d\u4eba\u5f62npc\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadBosses = function() {
        var _this = this;
        if (Logic_1.default.bosses) {
          this.isBossLoaded = true;
          return;
        }
        cc.resources.load("Data/bosses", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.bosses = resource.json;
            _this.isBossLoaded = true;
            cc.log("\u52a0\u8f7dBoss\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadBuildings = function() {
        var _this = this;
        if (Logic_1.default.buildings && Logic_1.default.buildings["Door"]) {
          this.isBuildingLoaded = true;
          return;
        }
        cc.resources.loadDir("Prefabs/buildings", cc.Prefab, function(err, assert) {
          for (var _i = 0, assert_5 = assert; _i < assert_5.length; _i++) {
            var prefab = assert_5[_i];
            Logic_1.default.buildings[prefab.name] = prefab;
          }
          _this.isBuildingLoaded = true;
          cc.log("\u52a0\u8f7d\u5efa\u7b51\u5b8c\u6210");
        });
      };
      LoadingManager.prototype.loadItems = function() {
        var _this = this;
        if (Logic_1.default.items) {
          this.isItemsLoaded = true;
          return;
        }
        cc.resources.load("Data/item", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.items = resource.json;
            Logic_1.default.itemNameList = new Array();
            Logic_1.default.goodsNameList = new Array();
            Logic_1.default.trashNameList = new Array();
            Logic_1.default.dollNameList = new Array();
            for (var key in resource.json) Logic_1.default.items[key].canSave && -1 == key.indexOf("food") && -1 == key.indexOf("trash") && -1 == key.indexOf("doll") && -1 == key.indexOf("goods") ? Logic_1.default.itemNameList.push(key) : -1 != key.indexOf("goods") ? Logic_1.default.goodsNameList.push(key) : -1 != key.indexOf("trash") ? Logic_1.default.trashNameList.push(key) : -1 != key.indexOf("doll") && Logic_1.default.dollNameList.push(key);
            _this.isItemsLoaded = true;
            cc.log("\u52a0\u8f7d\u7269\u54c1\u5b8c\u6210");
          }
        });
      };
      LoadingManager.prototype.loadAutoSpriteFrames = function() {
        var _this = this;
        if (Logic_1.default.spriteFrames && Logic_1.default.spriteFrameRes("auto")) {
          this.spriteFrameNames[LoadingManager_1.KEY_AUTO] = true;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.LOADING_ICON, {
            type: LoadingIcon_1.default.TYPE_TEXTURE_AUTO
          });
          return;
        }
        cc.log("\u52a0\u8f7d\u81ea\u52a8\u56fe\u96c6");
        cc.resources.loadDir("Texture/Auto", cc.SpriteFrame, function(err, assert) {
          for (var _i = 0, assert_6 = assert; _i < assert_6.length; _i++) {
            var frame = assert_6[_i];
            Logic_1.default.spriteFrames[frame.name] = frame;
          }
          _this.spriteFrameNames[LoadingManager_1.KEY_AUTO] = true;
          cc.log("\u52a0\u8f7d\u81ea\u52a8\u56fe\u96c6\u5b8c\u6210");
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.LOADING_ICON, {
            type: LoadingIcon_1.default.TYPE_TEXTURE_AUTO
          });
        });
      };
      LoadingManager.prototype.loadSpriteAtlas = function(typeKey, hasKey) {
        var _this = this;
        var type = 0;
        switch (typeKey) {
         case LoadingManager_1.KEY_EQUIPMENT:
          type = LoadingIcon_1.default.TYPE_EQUIP;
          break;

         case LoadingManager_1.KEY_ITEM:
          type = LoadingIcon_1.default.TYPE_ITEM;
          break;

         case LoadingManager_1.KEY_TEXTURES:
          type = LoadingIcon_1.default.TYPE_TEXTURE;
          break;

         case LoadingManager_1.KEY_BOSS:
          type = LoadingIcon_1.default.TYPE_NPC;
        }
        if (Logic_1.default.spriteFrames && Logic_1.default.spriteFrames[hasKey]) {
          this.spriteFrameNames[typeKey] = true;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.LOADING_ICON, {
            type: type
          });
          return;
        }
        cc.log("\u52a0\u8f7d" + typeKey + "\u56fe\u96c6");
        cc.resources.load("Texture/" + typeKey, cc.SpriteAtlas, function(err, atlas) {
          for (var _i = 0, _a = atlas.getSpriteFrames(); _i < _a.length; _i++) {
            var frame = _a[_i];
            Logic_1.default.spriteFrames[frame.name] = frame;
          }
          _this.spriteFrameNames[typeKey] = true;
          cc.log("\u52a0\u8f7d" + typeKey + "\u56fe\u96c6\u5b8c\u6210");
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.LOADING_ICON, {
            type: type
          });
        });
      };
      LoadingManager.loadAllBundle = function(names, callback) {
        var count = 0;
        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
          var name = names_1[_i];
          var b = cc.assetManager.getBundle(name);
          if (b) {
            count++;
            count >= names.length && callback();
          } else LoadingManager_1.loadBundle(name, function(bundle) {
            bundle && count++;
            count >= names.length && callback();
          });
        }
      };
      LoadingManager.loadBundle = function(name, callback) {
        var bundle = cc.assetManager.getBundle(name);
        bundle ? callback(bundle) : cc.assetManager.loadBundle(name, function(err, bundle) {
          callback(bundle, bundle);
          cc.log("\u52a0\u8f7dbundle:" + name + (bundle ? "\u5b8c\u6210" : "\u5931\u8d25"));
        });
      };
      LoadingManager.loadNpcSpriteAtlas = function(name, callback) {
        if (Logic_1.default.spriteFrames && Logic_1.default.spriteFrames[name + "anim000"]) {
          callback && callback(0);
          return;
        }
        if (LoadingManager_1.resourceLoadMap.has(name)) LoadingManager_1.resourceLoadMap.get(name).push(callback); else {
          LoadingManager_1.resourceLoadMap.set(name, new Array());
          cc.log("\u52a0\u8f7d" + name + "\u56fe\u96c6");
          cc.resources.load("npc/" + name, cc.SpriteAtlas, function(err, atlas) {
            if (atlas) for (var _i = 0, _a = atlas.getSpriteFrames(); _i < _a.length; _i++) {
              var frame = _a[_i];
              Logic_1.default.spriteFrames[frame.name] = frame;
            }
            cc.log("\u52a0\u8f7d" + name + "\u56fe\u96c6" + (atlas ? "\u5b8c\u6210" : "\u5931\u8d25"));
            callback && callback(atlas ? 1 : 2);
            if (LoadingManager_1.resourceLoadMap.has(name)) {
              for (var _b = 0, _c = LoadingManager_1.resourceLoadMap.get(name); _b < _c.length; _b++) {
                var call = _c[_b];
                call && call(atlas ? 1 : 2);
              }
              LoadingManager_1.resourceLoadMap.delete(name);
            }
          });
        }
      };
      LoadingManager.loadBuilding = function(name, callback) {
        if (Logic_1.default.buildings[name]) {
          callback && callback(0);
          return;
        }
        if (LoadingManager_1.resourceLoadMap.has(name)) LoadingManager_1.resourceLoadMap.get(name).push(callback); else {
          LoadingManager_1.resourceLoadMap.set(name, new Array());
          cc.log("\u52a0\u8f7d" + name + "\u9884\u5236");
          cc.resources.load("Prefabs/buildings/" + name, cc.Prefab, function(err, prefab) {
            prefab && (Logic_1.default.buildings[name] = prefab);
            cc.log("\u52a0\u8f7d" + name + "\u9884\u5236" + (prefab ? "\u5b8c\u6210" : "\u5931\u8d25"));
            callback && callback(prefab ? 1 : 2);
            if (LoadingManager_1.resourceLoadMap.has(name)) {
              for (var _i = 0, _a = LoadingManager_1.resourceLoadMap.get(name); _i < _a.length; _i++) {
                var call = _a[_i];
                call && call(prefab ? 1 : 2);
              }
              LoadingManager_1.resourceLoadMap.delete(name);
            }
          });
        }
      };
      LoadingManager.allResourceDone = function() {
        return LoadingManager_1.resourceLoadMap.size < 1;
      };
      var LoadingManager_1;
      LoadingManager.KEY_AUTO = "auto";
      LoadingManager.KEY_TEXTURES = "textures";
      LoadingManager.KEY_EQUIPMENT = "equipment";
      LoadingManager.KEY_ITEM = "item";
      LoadingManager.KEY_BOSS = "bossicons";
      LoadingManager.LOAD_CACHE = 0;
      LoadingManager.LOAD_SUCCESS = 1;
      LoadingManager.LOAD_FAIL = 2;
      LoadingManager.AB_BGM = "ab_bgm";
      LoadingManager.AB_SOUND = "ab_sound";
      LoadingManager.ALL_BUNDLES = [ LoadingManager_1.AB_BGM, LoadingManager_1.AB_SOUND ];
      LoadingManager.resourceLoadMap = new Map();
      LoadingManager = LoadingManager_1 = __decorate([ ccclass ], LoadingManager);
      return LoadingManager;
    }();
    exports.default = LoadingManager;
    cc._RF.pop();
  }, {
    "../data/AffixMapData": "AffixMapData",
    "../data/ProfessionData": "ProfessionData",
    "../logic/Logic": "Logic",
    "../ui/LoadingIcon": "LoadingIcon",
    "./../logic/EventHelper": "EventHelper"
  } ],
  Loading: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a2246gAT5JKc4YhD10URG7K", "Loading");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var CutScene_1 = require("../ui/CutScene");
    var LoadingManager_1 = require("../manager/LoadingManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var LoadingIcon_1 = require("../ui/LoadingIcon");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Loading = function(_super) {
      __extends(Loading, _super);
      function Loading() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.loadingIcon = null;
        _this.cutScene = null;
        _this.shipTransportScene = null;
        _this.elevatorScene = null;
        _this.loadingIconPrefab = null;
        _this.cursorAreaPrefab = null;
        _this.isTransportAnimFinished = true;
        _this.isElevatorAnimFinished = true;
        _this.loadingManager = new LoadingManager_1.default();
        return _this;
      }
      Loading.prototype.onLoad = function() {
        this.loadingManager.init();
        this.loadingIcon = cc.instantiate(this.loadingIconPrefab).getComponent(LoadingIcon_1.default);
        this.loadingIcon.node.parent = this.node;
        this.loadingIcon.init([ LoadingIcon_1.default.TYPE_TEXTURE_AUTO, LoadingIcon_1.default.TYPE_TEXTURE, LoadingIcon_1.default.TYPE_ITEM, LoadingIcon_1.default.TYPE_EQUIP, LoadingIcon_1.default.TYPE_NPC, LoadingIcon_1.default.TYPE_MAP, LoadingIcon_1.default.TYPE_AUDIO ]);
      };
      Loading.prototype.start = function() {
        var _this = this;
        LoadingManager_1.default.loadAllBundle(LoadingManager_1.default.ALL_BUNDLES, function() {
          _this.loadingManager.loadEquipment();
          _this.loadingManager.loadAutoSpriteFrames();
          _this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_TEXTURES, "singleColor");
          _this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_EQUIPMENT, "emptyequipment");
          _this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_ITEM, "ammo");
          _this.loadingManager.loadMonsters();
          _this.loadingManager.loadStatus();
          _this.loadingManager.loadBullets();
          _this.loadingManager.loadItems();
          _this.loadingManager.loadTalents();
          _this.loadingManager.loadMetals();
          _this.loadingManager.loadProfession();
          _this.loadingManager.loadAffixs();
          _this.loadingManager.loadNonplayer();
          _this.loadingManager.loadSound();
          _this.loadingManager.loadBgm();
          _this.loadingManager.loadSuits();
          _this.loadingManager.loadFurnitures();
          _this.loadingManager.loadNormalBuildings();
          _this.loadingManager.loadDialogue();
          _this.loadingManager.loadBehaviors();
          _this.loadingManager.loadPlayer();
          _this.showLoadingLabel();
        });
        if (1 == Logic_1.default.isFirst) {
          this.cutScene.isSkip = true;
          this.cutScene.unregisterClick();
        }
        this.checkLoaded();
      };
      Loading.prototype.showLoadingLabel = function() {
        if (this.loadingManager.isAllSpriteFramesLoaded()) return;
        this.loadingIcon.node.active = true;
      };
      Loading.prototype.showCut = function() {
        if (this.loadingManager.isAllSpriteFramesLoaded() && 1 != Logic_1.default.isFirst) {
          Logic_1.default.isFirst = 1;
          this.cutScene.playShow();
        }
      };
      Loading.prototype.showElevator = function() {
        var _this = this;
        if (this.loadingManager.isAllSpriteFramesLoaded() && Logic_1.default.elevatorScene > 0) {
          this.isElevatorAnimFinished = false;
          this.elevatorScene.active = true;
          this.loadingIcon.node.active = false;
          1 == Logic_1.default.elevatorScene ? this.elevatorScene.getComponent(cc.Animation).play("ElevatorSceneUp") : 2 == Logic_1.default.elevatorScene && this.elevatorScene.getComponent(cc.Animation).play("ElevatorSceneDown");
          Logic_1.default.elevatorScene = 0;
          this.scheduleOnce(function() {
            _this.isElevatorAnimFinished = true;
          }, 1);
        }
      };
      Loading.prototype.showTransport = function() {
        var _this = this;
        if (this.loadingManager.isAllSpriteFramesLoaded() && Logic_1.default.shipTransportScene > 0) {
          this.isTransportAnimFinished = false;
          this.loadingIcon.node.active = false;
          this.shipTransportScene.active = true;
          2 == Logic_1.default.shipTransportScene && (this.shipTransportScene.scaleX = -1);
          AudioPlayer_1.default.play(AudioPlayer_1.default.TRANSPORTSHIP);
          Logic_1.default.shipTransportScene = 0;
          this.scheduleOnce(function() {
            _this.isTransportAnimFinished = true;
          }, 1);
        }
      };
      Loading.prototype.checkLoaded = function() {
        this.showCut();
        this.showTransport();
        if (this.loadingManager.isEquipmentLoaded && this.loadingManager.isAllSpriteFramesLoaded() && this.loadingManager.isMonsterLoaded && this.loadingManager.isNonplayerLoaded && this.loadingManager.isPlayerLoaded && this.loadingManager.isBuffsLoaded && this.loadingManager.isProfessionLoaded && this.loadingManager.isBulletsLoaded && this.loadingManager.isItemsLoaded && this.loadingManager.isSkillsLoaded && this.loadingManager.isAffixsLoaded && Logic_1.default.mapManager.isloaded && this.loadingManager.isSuitsLoaded && this.loadingManager.isFurnituresLoaded && this.loadingManager.isSoundLoaded && this.loadingManager.isBgmLoaded && this.loadingManager.isNormalBuildingLoaded && this.loadingManager.isDialogueLoaded && this.loadingManager.isBehaviorsLoaded && this.loadingManager.isMetalsLoaded && this.cutScene.isSkip && this.isTransportAnimFinished && this.isElevatorAnimFinished) {
          this.cutScene.unregisterClick();
          this.isTransportAnimFinished = false;
          this.isElevatorAnimFinished = false;
          this.loadingManager.reset();
          cc.director.loadScene("game");
          return true;
        }
        return false;
      };
      Loading.prototype.update = function(dt) {
        this.checkLoaded();
      };
      __decorate([ property(CutScene_1.default) ], Loading.prototype, "cutScene", void 0);
      __decorate([ property(cc.Node) ], Loading.prototype, "shipTransportScene", void 0);
      __decorate([ property(cc.Node) ], Loading.prototype, "elevatorScene", void 0);
      __decorate([ property(cc.Prefab) ], Loading.prototype, "loadingIconPrefab", void 0);
      __decorate([ property(cc.Prefab) ], Loading.prototype, "cursorAreaPrefab", void 0);
      Loading = __decorate([ ccclass ], Loading);
      return Loading;
    }(cc.Component);
    exports.default = Loading;
    cc._RF.pop();
  }, {
    "../manager/LoadingManager": "LoadingManager",
    "../ui/CutScene": "CutScene",
    "../ui/LoadingIcon": "LoadingIcon",
    "../utils/AudioPlayer": "AudioPlayer",
    "./Logic": "Logic"
  } ],
  LocalStorage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0a5cbOqRmZJE4RU1wzXgRD/", "LocalStorage");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AchievementData_1 = require("../data/AchievementData");
    var BuildingData_1 = require("../data/BuildingData");
    var SettingsData_1 = require("../data/SettingsData");
    var LocalStorage = function() {
      function LocalStorage() {}
      LocalStorage.getValue = function(key) {
        return cc.sys.localStorage.getItem(key);
      };
      LocalStorage.putValue = function(key, value) {
        cc.sys.localStorage.setItem(key, JSON.stringify(value));
      };
      LocalStorage.getData = function() {
        var str = LocalStorage.getValue(LocalStorage.SAVE_NAME);
        str || (str = "{}");
        return JSON.parse(str);
      };
      LocalStorage.getValueFromData = function(key) {
        var str = LocalStorage.getValue(LocalStorage.SAVE_NAME);
        str || (str = "{}");
        return LocalStorage.getData()[key];
      };
      LocalStorage.saveData = function(key, value) {
        var data = LocalStorage.getData();
        data[key] = value;
        LocalStorage.putValue(LocalStorage.SAVE_NAME, data);
      };
      LocalStorage.getAchievementData = function() {
        var data = new AchievementData_1.default();
        data.valueCopy(LocalStorage.getData()[LocalStorage.KEY_ACHIEVEMENT]);
        return data;
      };
      LocalStorage.saveAchievementData = function(data) {
        LocalStorage.saveData(LocalStorage.KEY_ACHIEVEMENT, data);
      };
      LocalStorage.getSystemSettings = function() {
        var data = new SettingsData_1.default();
        data.valueCopy(LocalStorage.getData()[LocalStorage.KEY_SYSTEM_SETTINGS]);
        return data;
      };
      LocalStorage.saveSystemSettings = function(data) {
        LocalStorage.saveData(LocalStorage.KEY_SYSTEM_SETTINGS, data);
      };
      LocalStorage.getFurnitureData = function(id) {
        var map = LocalStorage.getData()[LocalStorage.KEY_FURNITURES];
        map || (map = {});
        return map[id];
      };
      LocalStorage.saveFurnitureData = function(data) {
        if (!data) return;
        var map = LocalStorage.getData()[LocalStorage.KEY_FURNITURES];
        map || (map = {});
        var oldData = new BuildingData_1.default();
        oldData.valueCopy(map[data.id]);
        oldData.valueCopy(data);
        map[data.id] = oldData;
        LocalStorage.saveData(LocalStorage.KEY_FURNITURES, map);
      };
      LocalStorage.getLastSaveSlotKey = function() {
        var v = LocalStorage.getValueFromData(LocalStorage.KEY_LAST_SAVE_SLOT);
        var num = parseInt(v);
        isNaN(num) && (num = 0);
        return num;
      };
      LocalStorage.setLastSaveSlotKey = function(slot) {
        LocalStorage.saveData(LocalStorage.KEY_LAST_SAVE_SLOT, slot);
      };
      LocalStorage.SAVE_NAME = "SINKDUNGEON_SAVE";
      LocalStorage.SAVE_DUNGEON = "SAVE_DUNGEON";
      LocalStorage.KEY_ACHIEVEMENT = "KEY_ACHIEVEMENT";
      LocalStorage.KEY_SYSTEM_SETTINGS = "KEY_SYSTEM_SETTINGS";
      LocalStorage.KEY_REAL_COINS = "KEY_REAL_COINS";
      LocalStorage.KEY_FURNITURES = "KEY_FURNITURES";
      LocalStorage.VAULE_OPEN = "1";
      LocalStorage.KEY_LAST_SAVE_SLOT = "KEY_LAST_SAVE_SLOT";
      return LocalStorage;
    }();
    exports.default = LocalStorage;
    cc._RF.pop();
  }, {
    "../data/AchievementData": "AchievementData",
    "../data/BuildingData": "BuildingData",
    "../data/SettingsData": "SettingsData"
  } ],
  Logic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2225fYJ0sRMTZjuD7WFmbVi", "Logic");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./EventHelper");
    var PlayerData_1 = require("../data/PlayerData");
    var MapManager_1 = require("../manager/MapManager");
    var Dungeon_1 = require("./Dungeon");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var Random_1 = require("../utils/Random");
    var ProfileManager_1 = require("../manager/ProfileManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var WorldLoader_1 = require("../map/WorldLoader");
    var LocalStorage_1 = require("../utils/LocalStorage");
    var SavePointData_1 = require("../data/SavePointData");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var InventoryData_1 = require("../data/InventoryData");
    var GroundOilGoldData_1 = require("../data/GroundOilGoldData");
    var OilGoldData_1 = require("../data/OilGoldData");
    var LoadingManager_1 = require("../manager/LoadingManager");
    var SettingsData_1 = require("../data/SettingsData");
    var MetalTalentData_1 = require("../data/MetalTalentData");
    var DataUtils_1 = require("../utils/DataUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Logic = function(_super) {
      __extends(Logic, _super);
      function Logic() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Logic_1 = Logic;
      Logic.prototype.onLoad = function() {
        Logic_1.settings.valueCopy(LocalStorage_1.default.getSystemSettings());
        Logic_1.settings.lowPower ? cc.game.setFrameRate(45) : cc.game.setFrameRate(59);
        cc.game.addPersistRootNode(this.node);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.SETTINGS_LOW_POWER, function() {
          Logic_1.settings.lowPower ? cc.game.setFrameRate(45) : cc.game.setFrameRate(59);
        });
      };
      Logic.prototype.start = function() {};
      Logic.saveData = function() {
        Logic_1.profileManager.data.lastPlayerId = Logic_1.currentPlayerId;
        Logic_1.profileManager.data.playerDatas = DataUtils_1.default.cloneKeyValue(Logic_1.playerDatas, function(value) {
          return new PlayerData_1.default().valueCopy(value);
        });
        Logic_1.profileManager.data.nonPlayerList = Logic_1.nonPlayerList;
        Logic_1.profileManager.data.aiPlayerIdList = Logic_1.aiPlayerIdList;
        Logic_1.profileManager.data.rectDungeons[Logic_1.mapManager.rectDungeon.id] = Logic_1.mapManager.rectDungeon;
        Logic_1.profileManager.data.cycle = Logic_1.cycle;
        Logic_1.profileManager.data.level = Logic_1.level;
        Logic_1.profileManager.data.chapterIndex = Logic_1.chapterIndex;
        Logic_1.profileManager.data.chapterMaxIndex = Logic_1.chapterMaxIndex;
        Logic_1.profileManager.data.totalTime = Logic_1.totalTime;
        Logic_1.profileManager.data.realTime = Logic_1.realTime;
        Logic_1.profileManager.data.dreamTime = Logic_1.dreamTime;
        Logic_1.profileManager.data.dreamCostTime = Logic_1.dreamCostTime;
        Logic_1.profileManager.data.savePointData = Logic_1.savePoinitData.clone();
        Logic_1.profileManager.data.groundOilGoldData = Logic_1.groundOilGoldData.clone();
        Logic_1.profileManager.data.killPlayerCounts = DataUtils_1.default.cloneNumberKeyValue(Logic_1.killPlayerCounts, function(value) {
          return value;
        });
        Logic_1.profileManager.data.dialogueCounts = DataUtils_1.default.cloneKeyValue(Logic_1.dialogueCounts, function(value) {
          return value;
        });
        Logic_1.profileManager.data.playerMetals = DataUtils_1.default.cloneKeyValue(Logic_1.playerMetals, function(value) {
          return value;
        });
        Logic_1.profileManager.data.oilGolds = Logic_1.oilGolds;
        Logic_1.profileManager.data.coins = Logic_1.coins;
        Logic_1.profileManager.data.coinCounts = Logic_1.coinCounts;
        Logic_1.profileManager.data.lastSaveTime = new Date().getTime();
        Logic_1.profileManager.data.metalId = Logic_1.metalId;
        Logic_1.profileManager.saveData(Logic_1.jumpSlotIndex);
        LocalStorage_1.default.saveData(LocalStorage_1.default.KEY_REAL_COINS, Logic_1.realCoins);
        LocalStorage_1.default.setLastSaveSlotKey(Logic_1.jumpSlotIndex);
        Logic_1.furnitureMap.forEach(function(value) {
          LocalStorage_1.default.saveFurnitureData(value);
        });
      };
      Logic.resetData = function(chapter) {
        Logic_1.profileManager = new ProfileManager_1.default();
        Logic_1.profileManager.loadData(Logic_1.jumpSlotIndex);
        Logic_1.totalTime = Logic_1.profileManager.data.totalTime;
        Logic_1.realTime = Logic_1.profileManager.data.realTime;
        Logic_1.dreamTime = Logic_1.profileManager.data.dreamTime;
        Logic_1.dreamCostTime = Logic_1.profileManager.data.dreamCostTime;
        Logic_1.profileManager.data.chapterIndex = chapter || Logic_1.profileManager.data.chapterIndex;
        Logic_1.profileManager.data.chapterIndex > Logic_1.profileManager.data.chapterMaxIndex && Logic_1.profileManager.data.chapterIndex < this.CHAPTER05 && (Logic_1.profileManager.data.chapterMaxIndex = Logic_1.profileManager.data.chapterIndex);
        Logic_1.cycle = Logic_1.profileManager.data.cycle;
        Logic_1.chapterIndex = Logic_1.profileManager.data.chapterIndex;
        Logic_1.chapterMaxIndex = Logic_1.profileManager.data.chapterMaxIndex;
        Logic_1.level = Logic_1.profileManager.data.level;
        Logic_1.savePoinitData = Logic_1.profileManager.data.savePointData.clone();
        Logic_1.groundOilGoldData = Logic_1.profileManager.data.groundOilGoldData.clone();
        Logic_1.oilGolds = Logic_1.profileManager.data.oilGolds;
        Logic_1.currentPlayerId = Logic_1.profileManager.data.lastPlayerId;
        Logic_1.playerDatas = DataUtils_1.default.cloneKeyValue(Logic_1.profileManager.data.playerDatas, function(value) {
          return new PlayerData_1.default().valueCopy(value);
        });
        Logic_1.playerData || (Logic_1.playerData = new PlayerData_1.default());
        Logic_1.initInventoryManager();
        Logic_1.nonPlayerList = DataUtils_1.default.copyListValue(Logic_1.profileManager.data.nonPlayerList, function(value) {
          return new NonPlayerData_1.default().valueCopy(value);
        });
        Logic_1.aiPlayerIdList = DataUtils_1.default.copyListValue(Logic_1.profileManager.data.aiPlayerIdList, function(value) {
          return value;
        });
        Dungeon_1.default.WIDTH_SIZE = 15;
        Dungeon_1.default.HEIGHT_SIZE = 9;
        Logic_1.coins = Logic_1.profileManager.data.coins;
        Logic_1.coinCounts = Logic_1.profileManager.data.coinCounts;
        var c = LocalStorage_1.default.getValueFromData(LocalStorage_1.default.KEY_REAL_COINS);
        Logic_1.realCoins = c ? parseInt(c) : 0;
        Logic_1.lastBgmIndex = 0;
        Logic_1.killPlayerCounts = DataUtils_1.default.cloneNumberKeyValue(Logic_1.profileManager.data.killPlayerCounts, function(value) {
          return value;
        });
        Logic_1.dialogueCounts = DataUtils_1.default.cloneKeyValue(Logic_1.profileManager.data.dialogueCounts, function(value) {
          return value;
        });
        Logic_1.playerMetals = DataUtils_1.default.cloneKeyValue(Logic_1.profileManager.data.playerMetals, function(value) {
          return value;
        });
        Logic_1.playerData.OilGoldData.valueCopy(Logic_1.getOilGoldData(Logic_1.oilGolds));
        Logic_1.metalId = Logic_1.profileManager.data.metalId;
        Logic_1.furnitureMap = new Map();
      };
      Logic.getOilGoldData = function(oilGolds) {
        var value = oilGolds;
        var data = new OilGoldData_1.default();
        for (var i = 0; i < Logic_1.OIL_GOLD_LIST.length; i++) {
          var offset = value - Logic_1.OIL_GOLD_LIST[i];
          if (!(offset >= 0)) {
            data.index = i;
            break;
          }
          value = offset;
          data.level++;
        }
        data.fragments = value;
        data.Common.damageMin = data.level / 2;
        data.Common.maxHealth = data.level / 2;
        data.Common.maxDream = data.level / 2;
        data.Common.remoteDamage = .1 * data.level;
        return data;
      };
      Logic.changeDungeonSize = function() {
        var size = Logic_1.mapManager.getCurrentMapSize();
        if (size) {
          Dungeon_1.default.WIDTH_SIZE = size.x;
          Dungeon_1.default.HEIGHT_SIZE = size.y;
        }
      };
      Logic.posToMapPos = function(pos) {
        var levelData = Logic_1.worldLoader.getCurrentLevelData();
        var roomPos = Logic_1.mapManager.rectDungeon.currentPos;
        var mapPos = cc.v3(0, 0);
        mapPos.x = levelData.roomWidth * roomPos.x + pos.x;
        mapPos.y = levelData.height * levelData.roomHeight - 1 - levelData.roomWidth * roomPos.y - pos.y;
        return mapPos;
      };
      Logic.savePonit = function(pos) {
        if (Logic_1.chapterIndex == Logic_1.CHAPTER099) return;
        var savePointData = new SavePointData_1.default();
        var mapPos = Logic_1.posToMapPos(pos);
        savePointData.x = mapPos.x;
        savePointData.y = mapPos.y;
        savePointData.level = Logic_1.level;
        savePointData.chapter = Logic_1.chapterIndex;
        Logic_1.savePoinitData.valueCopy(savePointData);
        Logic_1.saveData();
      };
      Logic.saveGroundOilGold = function(value) {
        var groundOilGoldData = new GroundOilGoldData_1.default();
        if (value > 0) {
          var roomPos = Logic_1.mapManager.rectDungeon.currentPos;
          groundOilGoldData.x = roomPos.x;
          groundOilGoldData.y = roomPos.y;
          groundOilGoldData.level = Logic_1.level;
          groundOilGoldData.chapter = Logic_1.chapterIndex;
          groundOilGoldData.value = value;
        }
        Logic_1.groundOilGoldData.valueCopy(groundOilGoldData);
        Logic_1.saveData();
      };
      Logic.loadingNextRoom = function(dir) {
        Logic_1.mapManager.randMap.clear();
        Logic_1.saveData();
        Logic_1.initInventoryManager();
        AudioPlayer_1.default.play(AudioPlayer_1.default.EXIT);
        var room = Logic_1.mapManager.loadingNextRoom(dir);
        if (room) {
          Logic_1.changeDungeonSize();
          switch (dir) {
           case 0:
            Logic_1.playerData.pos = cc.v3(Logic_1.playerData.pos.x, 1);
            break;

           case 1:
            Logic_1.playerData.pos = cc.v3(Logic_1.playerData.pos.x, Dungeon_1.default.HEIGHT_SIZE - 2);
            break;

           case 2:
            Logic_1.playerData.pos = cc.v3(Dungeon_1.default.WIDTH_SIZE - 2, Logic_1.playerData.pos.y);
            break;

           case 3:
            Logic_1.playerData.pos = cc.v3(1, Logic_1.playerData.pos.y);
          }
          cc.director.loadScene("loading");
        }
      };
      Logic.loadingNextLevel = function(exitData, clearMapCache) {
        Logic_1.worldLoader.loadWorld(function() {
          if (!exitData) return;
          var levelData = Logic_1.worldLoader.getLevelData(exitData.toChapter, exitData.toLevel);
          if (!levelData) return;
          clearMapCache && Logic_1.mapManager.clear();
          Logic_1.mapManager.rectDungeon || Logic_1.mapManager.reset();
          if (exitData.fromChapter != Logic_1.CHAPTER099 && exitData.fromChapter != exitData.toChapter) {
            Logic_1.mapManager.rectDungeon.changeAllClearRoomsReborn();
            for (var rd in Logic_1.profileManager.data.rectDungeons) Logic_1.profileManager.data.rectDungeons[rd] && Logic_1.profileManager.data.rectDungeons[rd].changeAllClearRoomsReborn();
            if (exitData.toChapter == Logic_1.CHAPTER099) {
              Logic_1.realTime += Logic_1.dreamCostTime;
              Logic_1.dreamCostTime = 0;
            }
          }
          Logic_1.saveData();
          Logic_1.initInventoryManager();
          Logic_1.chapterIndex = exitData.toChapter;
          Logic_1.level = exitData.toLevel;
          Logic_1.chapterMaxIndex < Logic_1.chapterIndex && Logic_1.chapterIndex < Logic_1.CHAPTER05 && (Logic_1.chapterMaxIndex = Logic_1.chapterIndex);
          var ty = levelData.height * levelData.roomHeight - 1 - exitData.toPos.y;
          var roomX = Math.floor(exitData.toPos.x / levelData.roomWidth);
          var roomY = Math.floor(ty / levelData.roomHeight);
          Logic_1.playerData.pos = cc.v3(exitData.toPos.x % levelData.roomWidth, ty % levelData.roomHeight);
          Logic_1.playerData.posZ = exitData.toPosZ;
          Logic_1.playerData.roomPos = cc.v3(roomX, roomY);
          Logic_1.playerData.chapterIndex = Logic_1.chapterIndex;
          Logic_1.playerData.chapterLevel = Logic_1.level;
          Logic_1.mapManager.reset();
          Logic_1.mapManager.changePos(cc.v3(roomX, roomY));
          Logic_1.changeDungeonSize();
          exitData.fromChapter == Logic_1.CHAPTER00 && Logic_1.chapterIndex == Logic_1.CHAPTER01 ? Logic_1.shipTransportScene = 1 : exitData.fromChapter == Logic_1.CHAPTER02 && Logic_1.chapterIndex == Logic_1.CHAPTER01 ? Logic_1.shipTransportScene = 2 : exitData.fromChapter == Logic_1.CHAPTER01 && Logic_1.chapterIndex == Logic_1.CHAPTER00 ? Logic_1.shipTransportScene = 2 : exitData.fromChapter == Logic_1.CHAPTER01 && Logic_1.chapterIndex == Logic_1.CHAPTER02 && (Logic_1.shipTransportScene = 1);
          exitData.fromChapter == Logic_1.CHAPTER00 && Logic_1.chapterIndex == Logic_1.CHAPTER00 && (0 == exitData.fromLevel && 0 == exitData.toLevel || (Logic_1.elevatorScene = exitData.fromLevel > Logic_1.level ? 1 : 2));
          Logic_1.playerData.isWakeUp = exitData.fromChapter != Logic_1.CHAPTER099 && exitData.toChapter == Logic_1.CHAPTER099;
        });
        cc.director.loadScene("loading");
      };
      Logic.initInventoryManager = function() {
        this.inventoryMgrs = {};
        for (var key in Logic_1.playerDatas) {
          var playerData = Logic_1.playerDatas[key];
          var inventoryManager = new InventoryManager_1.default(playerData.id);
          if (Logic_1.chapterIndex == Logic_1.CHAPTER099) {
            for (var key_1 in playerData.playerEquipsReality) inventoryManager.equips[key_1].valueCopy(playerData.playerEquipsReality[key_1]);
            for (var i = 0; i < playerData.playerItemListReality.length; i++) inventoryManager.itemList[i].valueCopy(playerData.playerItemListReality[i]);
            for (var i = 0; i < playerData.playerInventoryListReality.length; i++) {
              var data = new InventoryData_1.default();
              data.valueCopy(playerData.playerInventoryListReality[i]);
              inventoryManager.inventoryList.push(data);
            }
          } else {
            for (var key_2 in playerData.playerEquips) inventoryManager.equips[key_2].valueCopy(playerData.playerEquips[key_2]);
            for (var i = 0; i < playerData.playerItemList.length; i++) inventoryManager.itemList[i].valueCopy(playerData.playerItemList[i]);
            for (var i = 0; i < playerData.playerInventoryList.length; i++) {
              var data = new InventoryData_1.default();
              data.valueCopy(playerData.playerInventoryList[i]);
              inventoryManager.inventoryList.push(data);
            }
          }
          this.inventoryMgrs[key] = inventoryManager;
        }
      };
      Logic.getRandomNum = function(min, max) {
        return min + Math.round(Random_1.default.rand() * (max - min));
      };
      Logic.getHalfChance = function() {
        return Random_1.default.rand() > .5;
      };
      Logic.getChance = function(rate) {
        return Logic_1.getRandomNum(0, 100) < rate;
      };
      Logic.getDistance = function(v1, v2) {
        var x = v1.x - v2.x;
        var y = v1.y - v2.y;
        return Math.sqrt(x * x + y * y);
      };
      Logic.getDistanceNoSqrt = function(v1, v2) {
        var x = v1.x - v2.x;
        var y = v1.y - v2.y;
        return Math.abs(x) + Math.abs(y);
      };
      Logic.lerp = function(a, b, r) {
        return a + (b - a) * r;
      };
      Logic.lerpPos = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      Logic.lerpPos2 = function(self, to, ratio) {
        var out = cc.v2(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      Logic.genNonDuplicateID = function() {
        return Number(Random_1.default.rand().toString().substr(3, 16) + Date.now()).toString(36);
      };
      Logic.getRandomEquipType = function(rand4save) {
        return Logic_1.equipmentNameList[rand4save.getRandomNum(1, Logic_1.equipmentNameList.length - 1)];
      };
      Logic.getRandomItemType = function(rand4save) {
        return Logic_1.itemNameList[rand4save.getRandomNum(1, Logic_1.itemNameList.length - 1)];
      };
      Logic.getRandomTrashType = function(rand4save) {
        return Logic_1.trashNameList[rand4save.getRandomNum(1, Logic_1.trashNameList.length - 1)];
      };
      Logic.spriteFrameRes = function(spriteFrameName) {
        return Logic_1.spriteFrames[spriteFrameName] ? Logic_1.spriteFrames[spriteFrameName] : null;
      };
      Logic.getBuildings = function(name, callback) {
        LoadingManager_1.default.loadBuilding(name, function() {
          callback && callback(Logic_1.buildings[name]);
        });
      };
      Logic.getKillPlayerCount = function(seed) {
        return Logic_1.killPlayerCounts[seed] ? Logic_1.killPlayerCounts[seed] : 0;
      };
      Logic.setKillPlayerCounts = function(dieFrom, isAdd) {
        if (dieFrom && dieFrom.seed) {
          Logic_1.killPlayerCounts[dieFrom.seed] = Logic_1.getKillPlayerCount(dieFrom.seed) + (isAdd ? 1 : -1);
          var counts = Logic_1.killPlayerCounts;
          Logic_1.killPlayerCounts = {};
          for (var key in counts) counts[key] && counts[key] > 0 && (Logic_1.killPlayerCounts[key] = counts[key]);
        }
      };
      Logic.getDialogueCount = function(id) {
        return Logic_1.dialogueCounts[id] ? Logic_1.dialogueCounts[id] : 0;
      };
      Logic.addDialogueCount = function(id) {
        Logic_1.dialogueCounts[id] = Logic_1.dialogueCounts[id] + 1;
      };
      Logic.isDreaming = function() {
        return Logic_1.chapterIndex != Logic_1.CHAPTER099;
      };
      Logic.getTickTime = function() {
        return Logic_1.isDreaming() ? Logic_1.dreamTime : Logic_1.realTime;
      };
      Logic.getCurrentMetal = function() {
        return new MetalTalentData_1.default().valueCopy(Logic_1.metals[Logic_1.metalId]).valueCopy(Logic_1.playerMetals[Logic_1.metalId]);
      };
      Object.defineProperty(Logic, "inventoryMgr", {
        get: function() {
          return Logic_1.inventoryMgrs[Logic_1.currentPlayerId];
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Logic, "playerData", {
        get: function() {
          return Logic_1.playerDatas[Logic_1.currentPlayerId];
        },
        set: function(value) {
          Logic_1.currentPlayerId = value.id;
          Logic_1.playerDatas[value.id] = value;
        },
        enumerable: false,
        configurable: true
      });
      Logic.getPlayerDataById = function(id) {
        var data = Logic_1.playerDatas[id];
        if (!data) {
          data = new PlayerData_1.default();
          Logic_1.players[id] ? data.valueCopy(Logic_1.players[id]) : data.id = id;
          Logic_1.playerDatas[id] = data;
        }
        return data;
      };
      var Logic_1;
      Logic.BOSS_LEVEL_1 = 10;
      Logic.CHAPTER00 = 0;
      Logic.CHAPTER01 = 1;
      Logic.CHAPTER02 = 2;
      Logic.CHAPTER03 = 3;
      Logic.CHAPTER04 = 4;
      Logic.CHAPTER05 = 5;
      Logic.CHAPTER099 = 99;
      Logic.OIL_GOLD_LIST = [ 20, 50, 75, 100, 150, 200, 300, 450, 650, 1e3, 1500, 2e3, 3e3, 5e3, 1e4, 15e3, 2e4, 3e4, 5e4, 1e5, 15e4, 2e5, 3e5, 5e5, 1e6, 15e5, 2e6, 3e6, 5e6, 7e6, 1e7 ];
      Logic.equipments = null;
      Logic.equipmentNameList = [];
      Logic.itemNameList = [];
      Logic.goodsNameList = [];
      Logic.trashNameList = [];
      Logic.dollNameList = [];
      Logic.monsters = null;
      Logic.nonplayers = null;
      Logic.players = null;
      Logic.bosses = null;
      Logic.spriteFrames = null;
      Logic.status = null;
      Logic.suits = null;
      Logic.bullets = null;
      Logic.items = null;
      Logic.talents = null;
      Logic.metals = null;
      Logic.furnitures = null;
      Logic.normalBuildings = null;
      Logic.professionList = [];
      Logic.affixs = [];
      Logic.buildings = null;
      Logic.audioClips = {};
      Logic.bgmClips = {};
      Logic.dialogues = null;
      Logic.behaviors = null;
      Logic.cycle = 0;
      Logic.level = 0;
      Logic.chapterIndex = 0;
      Logic.chapterMaxIndex = 0;
      Logic.currentPlayerId = "";
      Logic.playerDatas = {};
      Logic.inventoryMgrs = {};
      Logic.mapManager = new MapManager_1.default();
      Logic.worldLoader = new WorldLoader_1.default();
      Logic.realCoins = 0;
      Logic.coins = 0;
      Logic.oilGolds = 0;
      Logic.killCount = 0;
      Logic.coinCounts = 0;
      Logic.dialogueCounts = {};
      Logic.totalTime = 0;
      Logic.realTime = 15591456e5;
      Logic.dreamTime = 15591456e5;
      Logic.dreamCostTime = 0;
      Logic.seed = 5;
      Logic.isFirst = 1;
      Logic.isFirstLoading = true;
      Logic.jumpChapter = 0;
      Logic.jumpSlotIndex = 0;
      Logic.shipTransportScene = 0;
      Logic.elevatorScene = 0;
      Logic.isCheatMode = false;
      Logic.isDebug = false;
      Logic.isTour = false;
      Logic.isGamePause = false;
      Logic.dieFrom = new FromData_1.default();
      Logic.lastBgmIndex = 1;
      Logic.savePoinitData = new SavePointData_1.default();
      Logic.groundOilGoldData = new GroundOilGoldData_1.default();
      Logic.killPlayerCounts = {};
      Logic.profileManager = new ProfileManager_1.default();
      Logic.bagSortIndex = 0;
      Logic.sortIndexs = {};
      Logic.settings = new SettingsData_1.default();
      Logic.nonPlayerList = [];
      Logic.aiPlayerIdList = [];
      Logic.playerMetals = {};
      Logic.metalId = "";
      Logic.furnitureMap = new Map();
      Logic.currentEditPlayerData = new PlayerData_1.default();
      Logic = Logic_1 = __decorate([ ccclass ], Logic);
      return Logic;
    }(cc.Component);
    exports.default = Logic;
    cc._RF.pop();
  }, {
    "../data/FromData": "FromData",
    "../data/GroundOilGoldData": "GroundOilGoldData",
    "../data/InventoryData": "InventoryData",
    "../data/MetalTalentData": "MetalTalentData",
    "../data/NonPlayerData": "NonPlayerData",
    "../data/OilGoldData": "OilGoldData",
    "../data/PlayerData": "PlayerData",
    "../data/SavePointData": "SavePointData",
    "../data/SettingsData": "SettingsData",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/LoadingManager": "LoadingManager",
    "../manager/MapManager": "MapManager",
    "../manager/ProfileManager": "ProfileManager",
    "../map/WorldLoader": "WorldLoader",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/DataUtils": "DataUtils",
    "../utils/LocalStorage": "LocalStorage",
    "../utils/Random": "Random",
    "./Dungeon": "Dungeon",
    "./EventHelper": "EventHelper"
  } ],
  Log: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "06b9ff1zNBOfIXxSJ4FD4SB", "Log");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../../Constants");
    var B3Action_1 = require("../../core/B3Action");
    var Log = function(_super) {
      __extends(Log, _super);
      function Log() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Log.prototype.tick = function(tick) {
        console.log("test log:", this.properties["info"]);
        return Constants_1.EnumStatus.SUCCESS;
      };
      Log.prototype._parseProp = function(prop) {
        _super.prototype._parseProp.call(this, prop);
        this.properties = prop;
      };
      return Log;
    }(B3Action_1.B3Action);
    exports.default = Log;
    cc._RF.pop();
  }, {
    "../../Constants": "Constants",
    "../../core/B3Action": "B3Action"
  } ],
  MagicCircle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4b4e32e5VZL3KOgwsnsl4rh", "MagicCircle");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MagicCircle = function(_super) {
      __extends(MagicCircle, _super);
      function MagicCircle() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isShow = false;
        _this.spellNow = false;
        return _this;
      }
      MagicCircle.prototype.playMagic = function(spellNow) {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play();
        this.anim.getAnimationState("PlayerMagicShow").speed = 2;
        this.isShow = true;
        this.spellNow = spellNow;
        spellNow && this.talentMaigc && this.talentMaigc.MagicFinish();
      };
      MagicCircle.prototype.MagicFinish = function() {
        !this.spellNow && this.talentMaigc && this.talentMaigc.MagicFinish();
        this.isShow = false;
      };
      MagicCircle = __decorate([ ccclass ], MagicCircle);
      return MagicCircle;
    }(cc.Component);
    exports.default = MagicCircle;
    cc._RF.pop();
  }, {} ],
  MagicIce: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "593bdTc6U9L8aRhkgXkK2Pf", "MagicIce");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MagicIce = function(_super) {
      __extends(MagicIce, _super);
      function MagicIce() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isShow = false;
        return _this;
      }
      MagicIce.prototype.showIce = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.node.opacity = 128;
        this.anim.play("PlayerMagicIceIdle");
        this.isShow = true;
      };
      MagicIce.prototype.breakIce = function() {
        this.anim.play("PlayerMagicIceBreak");
        this.isShow = false;
      };
      MagicIce = __decorate([ ccclass ], MagicIce);
      return MagicIce;
    }(cc.Component);
    exports.default = MagicIce;
    cc._RF.pop();
  }, {} ],
  MagicLightening: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6dfcbPWaC1Bm5ogHJjkBBm7", "MagicLightening");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var StatusManager_1 = require("../manager/StatusManager");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var Building_1 = require("./Building");
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MagicLightening = function(_super) {
      __extends(MagicLightening, _super);
      function MagicLightening() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hasTargetMap = new Map();
        _this.needPrepare = false;
        _this.showArea = false;
        _this.isTrigger = true;
        _this.isAttacked = false;
        _this.damagePoint = 5;
        _this.checkTimeDelay = 0;
        return _this;
      }
      MagicLightening.prototype.onLoad = function() {};
      MagicLightening.prototype.start = function() {};
      MagicLightening.prototype.fall = function(needPrepare, showArea, damagePoint) {
        damagePoint && damagePoint > 0 && (this.damagePoint = damagePoint);
        this.needPrepare = needPrepare;
        this.isAttacked = false;
        var animName = "LighteningFall";
        showArea && (animName = "LighteningFallArea");
        if (needPrepare) {
          animName = "LighteningPrepareFall";
          this.isAttacked = true;
        }
        this.anim = this.getComponent(cc.Animation);
        this.anim.play(animName);
        AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
          isHeavyShaking: false
        });
      };
      MagicLightening.prototype.AnimBegin = function() {
        this.isAttacked = false;
      };
      MagicLightening.prototype.AnimFinish = function() {
        var _this = this;
        this.scheduleOnce(function() {
          _this.node && _this.destroyEntityNode();
        }, 2);
      };
      MagicLightening.prototype.onColliderEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isTrigger) {
          this.isTrigger = false;
          this.fall(true, true);
        }
      };
      MagicLightening.prototype.onColliderStay = function(other, self) {
        self.radius > 0 && !this.isAttacked && this.attacking(other.node);
      };
      MagicLightening.prototype.attacking = function(attackTarget) {
        if (!attackTarget) return;
        var damage = new DamageData_1.default();
        var status = StatusManager_1.default.BURNING;
        damage.magicDamage = this.damagePoint;
        status = StatusManager_1.default.DIZZ;
        var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget, !this.needPrepare);
        if (target && !target.sc.isDied) {
          var fd = FromData_1.default.getClone("\u95ea\u7535", "magiclighteningdown1", this.node.position);
          target.takeDamage(damage, fd);
          target.addStatus(status, fd);
          this.isAttacked = true;
        }
      };
      MagicLightening.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .5) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      MagicLightening.prototype.update = function(dt) {};
      MagicLightening = __decorate([ ccclass ], MagicLightening);
      return MagicLightening;
    }(Building_1.default);
    exports.default = MagicLightening;
    cc._RF.pop();
  }, {
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/EventHelper": "EventHelper",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  MapData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d7bcZhUYBIzJR0A6/ryRxj", "MapData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MapData = function() {
      function MapData(str) {
        this.map = new Array();
        this.init(str);
      }
      MapData.prototype.init = function(str) {
        if (!str) return;
        str = str.substring(2, str.length - 2);
        var arr = str.split("\r\n");
        this.map = new Array();
        for (var i = 0; i < arr.length; i++) this.map[i] = new Array();
        for (var i = 0; i < arr.length; i++) {
          var row = arr[arr.length - 1 - i].split("");
          var k = 0;
          for (var j = 0; j < row.length - 1; k++) {
            this.map[i][k] = row[j] + row[j + 1];
            j += 2;
          }
        }
        var turnArr = new Array();
        for (var i = 0; i < this.map[0].length; i++) {
          turnArr[i] = new Array();
          for (var j = 0; j < this.map.length; j++) turnArr[i][j] = this.map[j][i];
        }
        this.map = turnArr;
      };
      MapData.prototype.logMap = function() {
        var str = "";
        for (var j = this.map[0].length - 1; j >= 0; j--) {
          for (var i = 0; i < this.map.length; i++) str += "" + this.map[i][j];
          str += "\n";
        }
        return str;
      };
      MapData.prototype.clone = function() {
        var data = new MapData("");
        data.map = this.map.slice();
        return data;
      };
      MapData.prototype.valueCopy = function(data) {
        this.map = data && data.map ? data.map : null;
        return this;
      };
      return MapData;
    }();
    exports.default = MapData;
    cc._RF.pop();
  }, {} ],
  MapLightData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c7371Xi6Z1FDZidBXLVH9FT", "MapLightData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var MapLightData = function() {
      function MapLightData() {}
      MapLightData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
      };
      return MapLightData;
    }();
    exports.default = MapLightData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  MapManagerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc23bpSDqZOALYDNPFUGFLx", "MapManagerData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MapManagerData = function() {
      function MapManagerData() {}
      return MapManagerData;
    }();
    exports.default = MapManagerData;
    cc._RF.pop();
  }, {} ],
  MapManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b0b2KGAWdGI6jcP8eIcPHE", "MapManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MapData_1 = require("../data/MapData");
    var RectRoom_1 = require("../rect/RectRoom");
    var RectDungeon_1 = require("../rect/RectDungeon");
    var Logic_1 = require("../logic/Logic");
    var Random4Save_1 = require("../utils/Random4Save");
    var RoomType_1 = require("../rect/RoomType");
    var MapManager = function() {
      function MapManager() {
        this.isloaded = false;
        this.rectDungeon = null;
        this.randMap = new Map();
        this.init();
      }
      MapManager.prototype.init = function() {
        this.isloaded = false;
      };
      MapManager.prototype.clear = function() {
        this.rectDungeon = null;
        this.randMap.clear();
      };
      MapManager.prototype.reset = function() {
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        this.randMap.clear();
        this.rectDungeon = new RectDungeon_1.default();
        Logic_1.default.profileManager.data && Logic_1.default.profileManager.data.rectDungeons["" + data.chapter + data.index] ? this.rectDungeon.buildMapFromSave(Logic_1.default.profileManager.data.rectDungeons["" + data.chapter + data.index], data) : this.rectDungeon.buildMap(data);
        cc.log(this.rectDungeon.getDisPlay());
        this.rectDungeon.changeRoomsIsFound(this.rectDungeon.currentPos.x, this.rectDungeon.currentPos.y);
        this.isloaded = true;
        cc.log("\u52a0\u8f7d\u5730\u56fe\u5b8c\u6210");
      };
      MapManager.prototype.changePos = function(pos) {
        this.rectDungeon.currentPos = pos.clone();
        this.rectDungeon.changeRoomsIsFound(this.rectDungeon.currentPos.x, this.rectDungeon.currentPos.y);
      };
      MapManager.prototype.loadingNextRoom = function(dir) {
        var room = this.rectDungeon.getNeighborRoom(this.rectDungeon.currentPos.x, this.rectDungeon.currentPos.y, dir);
        if (room && room.roomType) {
          this.rectDungeon.currentPos = cc.v3(room.x, room.y);
          this.rectDungeon.changeRoomsIsFound(room.x, room.y);
        }
        return room;
      };
      MapManager.prototype.getCurrentMapStringArray = function() {
        var room = this.getCurrentRoom();
        var mdd = new MapData_1.default("");
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        mdd.map = data.getRoomMap(room.x, room.y);
        var mapdata = this.addGenerateThings(mdd, room.roomType, room.seed, data.needRandomDecorate);
        return mapdata.map;
      };
      MapManager.prototype.getCurrentSideMapStringArray = function(offset) {
        var room = this.getCurrentRoom();
        var mdd = new MapData_1.default("");
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        mdd.map = data.getRoomMap(room.x + offset.x, room.y + offset.y);
        return mdd.map;
      };
      MapManager.prototype.getCurrentFloorMapStringArray = function() {
        var room = this.getCurrentRoom();
        var mdd = new MapData_1.default("");
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        mdd.map = data.getRoomFloorMap(room.x, room.y);
        return mdd.map;
      };
      MapManager.prototype.getCurrentSideFloorMapStringArray = function(offset) {
        var room = this.getCurrentRoom();
        var mdd = new MapData_1.default("");
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        mdd.map = data.getRoomFloorMap(room.x + offset.x, room.y + offset.y);
        return mdd.map;
      };
      MapManager.prototype.getCurrentMapSize = function() {
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        return cc.v3(data.roomWidth, data.roomHeight);
      };
      MapManager.prototype.getCurrentRoom = function() {
        if (this.rectDungeon && this.rectDungeon.map) {
          var room = this.rectDungeon.map[this.rectDungeon.currentPos.x][this.rectDungeon.currentPos.y];
          return room || new RectRoom_1.default(1, 1, RoomType_1.default.Z_ROOM);
        }
      };
      MapManager.prototype.getPosKey = function(pos) {
        return "x=" + pos.x + "y=" + pos.y;
      };
      MapManager.prototype.getCurrentMapBuilding = function(defaultPos) {
        var buildings = this.rectDungeon.buildings[this.getPosKey(this.rectDungeon.currentPos)];
        if (buildings) return buildings[this.getPosKey(defaultPos)];
        return null;
      };
      MapManager.prototype.setCurrentBuildingData = function(data) {
        var buildings = this.rectDungeon.buildings[this.getPosKey(this.rectDungeon.currentPos)];
        if (!buildings) {
          buildings = {};
          this.rectDungeon.buildings[this.getPosKey(this.rectDungeon.currentPos)] = buildings;
        }
        buildings["x=" + data.defaultPos.x + "y=" + data.defaultPos.y] = data;
      };
      MapManager.prototype.getCurrentMapEquipments = function() {
        return this.rectDungeon.equipments[this.getPosKey(this.rectDungeon.currentPos)];
      };
      MapManager.prototype.setCurrentEquipmentsArr = function(arr) {
        this.rectDungeon.equipments[this.getPosKey(this.rectDungeon.currentPos)] = arr;
      };
      MapManager.prototype.getCurrentMapItems = function() {
        return this.rectDungeon.items[this.getPosKey(this.rectDungeon.currentPos)];
      };
      MapManager.prototype.setCurrentItemsArr = function(arr) {
        this.rectDungeon.items[this.getPosKey(this.rectDungeon.currentPos)] = arr;
      };
      MapManager.prototype.setRoomClear = function(x, y) {
        if (this.rectDungeon && this.rectDungeon.map && x < this.rectDungeon.map.length && y < this.rectDungeon.map[0].length) {
          this.rectDungeon.map[x][y].state = RectRoom_1.default.STATE_CLEAR;
          this.rectDungeon.map[x][y].isReborn = false;
        }
      };
      MapManager.prototype.getCurrentRoomState = function() {
        return this.getCurrentRoom().state;
      };
      MapManager.prototype.isCurrentRoomStateClear = function() {
        return this.getCurrentRoomState() == RectRoom_1.default.STATE_CLEAR;
      };
      MapManager.prototype.getCurrentRoomType = function() {
        return this.getCurrentRoom().roomType;
      };
      MapManager.prototype.isNeighborRoomExist = function(dir) {
        var room = this.rectDungeon.getNeighborRoom(this.rectDungeon.currentPos.x, this.rectDungeon.currentPos.y, dir);
        if (!room) return false;
        return true;
      };
      MapManager.prototype.isNeighborRoomNew = function(dir) {
        var room = this.rectDungeon.getNeighborRoom(this.rectDungeon.currentPos.x, this.rectDungeon.currentPos.y, dir);
        if (!room) return false;
        return room.state != RectRoom_1.default.STATE_CLEAR;
      };
      MapManager.prototype.isNeighborRoomStateClear = function(dir) {
        var room = this.rectDungeon.getNeighborRoom(this.rectDungeon.currentPos.x, this.rectDungeon.currentPos.y, dir);
        if (!room) return false;
        return room.state == RectRoom_1.default.STATE_CLEAR;
      };
      MapManager.prototype.getCurrentRoomRandom4Save = function(keyType) {
        var room = this.getCurrentRoom();
        if (room) {
          var key = keyType + this.getPosKey(cc.v3(room.x, room.y));
          this.randMap.has(key) || this.randMap.set(key, new Random4Save_1.default(room.seed));
          return this.randMap.get(key);
        }
        this.randMap.has(MapManager.RANDOM_DEFAULT) || this.randMap.set(MapManager.RANDOM_DEFAULT, new Random4Save_1.default(0));
        return this.randMap.get(MapManager.RANDOM_DEFAULT);
      };
      MapManager.prototype.getRebornSeed = function(seed) {
        return seed + 1e8 * Logic_1.default.mapManager.getCurrentRoom().reborn;
      };
      MapManager.prototype.getSeedFromRoom = function(keyType) {
        var rand4save = Logic_1.default.mapManager.getCurrentRoomRandom4Save(keyType);
        return rand4save.getRandomNum(0, 1e8);
      };
      MapManager.prototype.getRandom4Save = function(seed, keyType) {
        var rand4save = new Random4Save_1.default(seed > 0 ? seed : this.getSeedFromRoom(keyType));
        rand4save.rand();
        return rand4save;
      };
      MapManager.prototype.addGenerateThings = function(mapData, roomType, seed, needDecorate) {
        var rand4save = new Random4Save_1.default(seed);
        cc.log("seed:" + seed);
        if (RoomType_1.default.isDecorateRoomType(roomType) && needDecorate) {
          rand4save = new Random4Save_1.default(seed);
          this.addDecorate(mapData, rand4save);
        }
        return mapData;
      };
      MapManager.prototype.addRandomTile = function(mapData, rand4save) {
        var pos = [];
        for (var i = 0; i < 10; i++) {
          var dx = rand4save.getRandomNum(0, mapData.map.length - 1);
          var dy = rand4save.getRandomNum(0, mapData.map[0].length - 1);
          pos.push(cc.v3(dx, 0));
          pos.push(cc.v3(0, dy));
          pos.push(cc.v3(dx, dy));
        }
        for (var _i = 0, pos_1 = pos; _i < pos_1.length; _i++) {
          var p = pos_1[_i];
          "**" == mapData.map[p.x][p.y] && (mapData.map[p.x][p.y] = "*" + rand4save.getRandomNum(0, 2));
        }
      };
      MapManager.prototype.addDecorate = function(mapData, rand4save) {
        var pos = [];
        for (var i = 0; i < 2; i++) {
          var dx = rand4save.getRandomNum(1, mapData.map.length - 2);
          var dy = rand4save.getRandomNum(1, mapData.map[0].length - 2);
          pos.push(cc.v3(dx, dy));
        }
        for (var _i = 0, pos_2 = pos; _i < pos_2.length; _i++) {
          var p = pos_2[_i];
          mapData.map[p.x][p.y] && -1 == mapData.map[p.x][p.y].indexOf("W") || (mapData.map[p.x][p.y] = "W" + rand4save.getRandomNum(0, 2));
        }
      };
      MapManager.RANDOM_DEFAULT = "RANDOM_DEFAULT";
      MapManager.RANDOM_EQUIP = "RANDOM_EQUIP";
      MapManager.RANDOM_BUILDING = "RANDOM_BUILDING";
      MapManager.RANDOM_WALL = "RANDOM_WALL";
      MapManager.RANDOM_NONPLAYER = "RANDOM_NONPLAYER";
      MapManager.RANDOM_BOSS = "RANDOM_BOSS";
      return MapManager;
    }();
    exports.default = MapManager;
    cc._RF.pop();
  }, {
    "../data/MapData": "MapData",
    "../logic/Logic": "Logic",
    "../rect/RectDungeon": "RectDungeon",
    "../rect/RectRoom": "RectRoom",
    "../rect/RoomType": "RoomType",
    "../utils/Random4Save": "Random4Save"
  } ],
  MartCashier: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "88c99phMSBLjpgR45Dw2hZG", "MartCashier");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MartCashier = function(_super) {
      __extends(MartCashier, _super);
      function MartCashier() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      MartCashier.prototype.onLoad = function() {};
      MartCashier.prototype.start = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.WELCOME);
      };
      MartCashier.prototype.onColliderEnter = function(other, self) {};
      MartCashier.prototype.onColliderExit = function(other, self) {};
      MartCashier = __decorate([ ccclass ], MartCashier);
      return MartCashier;
    }(Building_1.default);
    exports.default = MartCashier;
    cc._RF.pop();
  }, {
    "../utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  MartShelvesDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "24e528ueQhMDYfsDE3eSpqK", "MartShelvesDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GoodsData_1 = require("../../data/GoodsData");
    var EventHelper_1 = require("../../logic/EventHelper");
    var Goods_1 = require("../../item/Goods");
    var Logic_1 = require("../../logic/Logic");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var BaseDialog_1 = require("./BaseDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MartShelvesDialog = function(_super) {
      __extends(MartShelvesDialog, _super);
      function MartShelvesDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.goods = null;
        _this.layer = null;
        _this.spriteNode = null;
        _this.fridgeNode = null;
        _this.fridgeLayer = null;
        _this.doorLeft = null;
        _this.doorRight = null;
        _this.payNode = null;
        _this.payTitle = null;
        _this.payDesc = null;
        _this.payIcon = null;
        _this.type = MartShelvesDialog_1.TYPE_NORMAL;
        _this.goodsList = [];
        return _this;
      }
      MartShelvesDialog_1 = MartShelvesDialog;
      MartShelvesDialog.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_MART_SHELVES_DIALOG_PAY, function(detail) {
          _this.node && _this.showPay(detail.data);
        });
      };
      MartShelvesDialog.prototype.showPay = function(data) {
        this.goodsData = data;
        this.payTitle.string = "" + data.item.nameCn;
        this.payDesc.string = "\u4ef7\u683c\uff1a" + data.item.price + "\n\n\u8bf4\u660e\uff1a" + data.item.info + "\n" + data.item.desc;
        if (Logic_1.default.spriteFrameRes(data.item.resName)) {
          this.payIcon.spriteFrame = Logic_1.default.spriteFrameRes(data.item.resName);
          this.payIcon.node.width = this.payIcon.spriteFrame.getOriginalSize().width;
          this.payIcon.node.height = this.payIcon.spriteFrame.getOriginalSize().height;
        }
        this.payNode.active = true;
      };
      MartShelvesDialog.prototype.Pay = function() {
        if (Logic_1.default.coins >= this.goodsData.item.price) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            count: -this.goodsData.item.price
          });
          AudioPlayer_1.default.play(AudioPlayer_1.default.CASHIERING);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_CHANGEITEM, {
            itemData: this.goodsData.item
          });
          this.close();
        } else AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
      };
      MartShelvesDialog.prototype.Cancel = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.payNode.active = false;
      };
      MartShelvesDialog.prototype.updateUI = function(type, goodsNameList) {
        this.payNode.active = false;
        this.spriteNode.active = false;
        this.fridgeNode.active = false;
        this.type = type;
        this.changeBg(type);
        this.addGoods(type, goodsNameList);
      };
      MartShelvesDialog.prototype.changeBg = function(type) {
        if (!this.martshelvesbg) {
          this.martshelvesbg = this.node.getChildByName("sprite").getChildByName("martshelves");
          this.martshelvesside0 = this.node.getChildByName("sprite").getChildByName("martshelvesside0");
          this.martshelvesside1 = this.node.getChildByName("sprite").getChildByName("martshelvesside1");
          this.martshelvesside2 = this.node.getChildByName("sprite").getChildByName("martshelvesside2");
          this.martshelvesside3 = this.node.getChildByName("sprite").getChildByName("martshelvesside3");
        }
        var isFridge = type == MartShelvesDialog_1.TYPE_FRIDGE;
        if (isFridge) {
          this.fridgeNode.active = true;
          this.doorLeft.scaleX = 1;
          this.doorRight.scaleX = 1;
        } else this.spriteNode.active = true;
        var color = type == MartShelvesDialog_1.TYPE_WOOD ? "#DF8143" : "#FFFFFF";
        this.martshelvesbg.color = cc.color().fromHEX(color);
        this.martshelvesside0.color = cc.color().fromHEX(color);
        this.martshelvesside1.color = cc.color().fromHEX(color);
        this.martshelvesside2.color = cc.color().fromHEX(color);
        this.martshelvesside3.color = cc.color().fromHEX(color);
      };
      MartShelvesDialog.prototype.addGoods = function(type, goodsNameList) {
        var _this = this;
        this.layer.removeAllChildren();
        this.fridgeLayer.removeAllChildren();
        var isFridge = type == MartShelvesDialog_1.TYPE_FRIDGE;
        var layer = isFridge ? this.fridgeLayer : this.layer;
        var size = isFridge ? MartShelvesDialog_1.SIZE_FRIDGE : MartShelvesDialog_1.SIZE;
        for (var i = 0; i < size; i++) {
          if (i > goodsNameList.length - 1) continue;
          var goods = cc.instantiate(this.goods).getComponent(Goods_1.default);
          var data = new GoodsData_1.default();
          data.count = 1;
          data.item.valueCopy(Logic_1.default.items[goodsNameList[i]]);
          goods.init(data);
          this.goodsList.push(goods);
          layer.addChild(goods.node);
        }
        isFridge && this.scheduleOnce(function() {
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play();
        }, 1);
      };
      MartShelvesDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.fridgeNode.active = false;
        this.spriteNode.active = false;
        this.payNode.active = false;
        this.dismiss();
      };
      var MartShelvesDialog_1;
      MartShelvesDialog.SIZE = 21;
      MartShelvesDialog.SIZE_FRIDGE = 12;
      MartShelvesDialog.TYPE_NORMAL = "S3";
      MartShelvesDialog.TYPE_WOOD = "S4";
      MartShelvesDialog.TYPE_FRIDGE = "S5";
      __decorate([ property(cc.Prefab) ], MartShelvesDialog.prototype, "goods", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "layer", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "spriteNode", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "fridgeNode", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "fridgeLayer", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "doorLeft", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "doorRight", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "payNode", void 0);
      __decorate([ property(cc.Label) ], MartShelvesDialog.prototype, "payTitle", void 0);
      __decorate([ property(cc.Label) ], MartShelvesDialog.prototype, "payDesc", void 0);
      __decorate([ property(cc.Sprite) ], MartShelvesDialog.prototype, "payIcon", void 0);
      MartShelvesDialog = MartShelvesDialog_1 = __decorate([ ccclass ], MartShelvesDialog);
      return MartShelvesDialog;
    }(BaseDialog_1.default);
    exports.default = MartShelvesDialog;
    cc._RF.pop();
  }, {
    "../../data/GoodsData": "GoodsData",
    "../../item/Goods": "Goods",
    "../../logic/EventHelper": "EventHelper",
    "../../logic/Logic": "Logic",
    "../../utils/AudioPlayer": "AudioPlayer",
    "./BaseDialog": "BaseDialog"
  } ],
  MartShelves: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4800aSbfApGHYS7nMK4o5Bn", "MartShelves");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GoodsData_1 = require("../data/GoodsData");
    var EventHelper_1 = require("../logic/EventHelper");
    var Goods_1 = require("../item/Goods");
    var Logic_1 = require("../logic/Logic");
    var Tips_1 = require("../ui/Tips");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MartShelves = function(_super) {
      __extends(MartShelves, _super);
      function MartShelves() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.goods = null;
        _this.layer = null;
        _this.type = MartShelves_1.TYPE_NORMAL;
        _this.goodsList = [];
        _this.goodsNameList = [];
        return _this;
      }
      MartShelves_1 = MartShelves;
      MartShelves.prototype.onLoad = function() {
        var _this = this;
        this.tips = this.getComponentInChildren(Tips_1.default);
        this.tips.onInteract(function() {
          _this.node && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_MART_SHELVES_DIALOG, {
            type: _this.type,
            goodsNameList: _this.goodsNameList
          });
        });
      };
      MartShelves.prototype.init = function(type, goodsNameList) {
        this.goodsNameList = goodsNameList;
        this.type = type;
        this.changeBg(type);
        this.addGoods(goodsNameList);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(cc.v3(this.node.position.x, this.node.position.y + this.ccolliders[0].offset.y));
      };
      MartShelves.prototype.changeBg = function(type) {
        if (!this.martshelvesbg) {
          this.martshelvesbg = this.node.getChildByName("sprite").getChildByName("martshelves");
          this.martshelvesside0 = this.node.getChildByName("sprite").getChildByName("martshelvesside0");
          this.martshelvesside1 = this.node.getChildByName("sprite").getChildByName("martshelvesside1");
          this.martshelvesside2 = this.node.getChildByName("sprite").getChildByName("martshelvesside2");
          this.martshelvesside3 = this.node.getChildByName("sprite").getChildByName("martshelvesside3");
        }
        var color = type == MartShelves_1.TYPE_WOOD ? "#DF8143" : "#FFFFFF";
        this.martshelvesbg.color = cc.color().fromHEX(color);
        type != MartShelves_1.TYPE_FRIDGE && (this.martshelvesside0.color = cc.color().fromHEX(color));
        this.martshelvesside1.color = cc.color().fromHEX(color);
        this.martshelvesside2.color = cc.color().fromHEX(color);
        this.martshelvesside3.color = cc.color().fromHEX(color);
      };
      MartShelves.prototype.addGoods = function(goodsNameList) {
        this.layer.removeAllChildren();
        var len = this.type == MartShelves_1.TYPE_FRIDGE ? MartShelves_1.SIZE_FRIDGE : MartShelves_1.SIZE_NORMAL;
        for (var i = 0; i < len; i++) {
          if (i > goodsNameList.length - 1) return;
          var goods = cc.instantiate(this.goods).getComponent(Goods_1.default);
          var data = new GoodsData_1.default();
          data.count = 10;
          data.item.valueCopy(Logic_1.default.items[goodsNameList[i]]);
          goods.init(data);
          this.goodsList.push(goods);
          this.layer.addChild(goods.node);
        }
      };
      MartShelves.prototype.onColliderEnter = function(other, self) {};
      MartShelves.prototype.onColliderExit = function(other, self) {};
      var MartShelves_1;
      MartShelves.SIZE_NORMAL = 21;
      MartShelves.SIZE_FRIDGE = 12;
      MartShelves.TYPE_NORMAL = "S3";
      MartShelves.TYPE_WOOD = "S4";
      MartShelves.TYPE_FRIDGE = "S5";
      __decorate([ property(cc.Prefab) ], MartShelves.prototype, "goods", void 0);
      __decorate([ property(cc.Node) ], MartShelves.prototype, "layer", void 0);
      MartShelves = MartShelves_1 = __decorate([ ccclass ], MartShelves);
      return MartShelves;
    }(Building_1.default);
    exports.default = MartShelves;
    cc._RF.pop();
  }, {
    "../data/GoodsData": "GoodsData",
    "../item/Goods": "Goods",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../ui/Tips": "Tips",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  MeleeCollideHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce146frW1JL46/ZCU5RTQI5", "MeleeCollideHelper");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Utils_1 = require("../utils/Utils");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var MeleeWeapon_1 = require("./MeleeWeapon");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MeleeCollideHelper = function(_super) {
      __extends(MeleeCollideHelper, _super);
      function MeleeCollideHelper() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.meleeWeapon = null;
        _this.hv = cc.v2(1, 0);
        return _this;
      }
      MeleeCollideHelper.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.collider = this.entity.Collider.colliders[0];
        this.entity && this.entity.Move && (this.entity.Move.isStatic = true);
      };
      Object.defineProperty(MeleeCollideHelper.prototype, "Hv", {
        get: function() {
          return this.hv;
        },
        set: function(hv) {
          this.hv = hv.normalize();
        },
        enumerable: false,
        configurable: true
      });
      MeleeCollideHelper.prototype.updateLogic = function(weaponPos) {
        if (!this.collider) return;
        var hv = this.meleeWeapon.Hv;
        var collider = this.meleeWeapon.ccolliders[0];
        this.hv = hv.clone();
        this.collider.offset = collider.offset;
        this.collider.w = collider.w;
        this.collider.h = collider.h;
        this.collider.zHeight = collider.zHeight;
        this.entity.Transform.z = this.meleeWeapon.player.entity.Transform.z;
        this.rotateCollider(this.hv);
        this.node.position = weaponPos;
      };
      MeleeCollideHelper.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        this.node.angle = Utils_1.default.getRotateAngle(direction, false);
      };
      MeleeCollideHelper.prototype.onColliderStay = function(other, self) {
        this.meleeWeapon && this.meleeWeapon.onColliderStay(other, self);
      };
      __decorate([ property(MeleeWeapon_1.default) ], MeleeCollideHelper.prototype, "meleeWeapon", void 0);
      MeleeCollideHelper = __decorate([ ccclass ], MeleeCollideHelper);
      return MeleeCollideHelper;
    }(BaseColliderComponent_1.default);
    exports.default = MeleeCollideHelper;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../utils/Utils": "Utils",
    "./MeleeWeapon": "MeleeWeapon"
  } ],
  MeleeShadowWeapon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "42691fWENBA0qvnMd6/WcCK", "MeleeShadowWeapon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Utils_1 = require("../utils/Utils");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var TriggerData_1 = require("../data/TriggerData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MeleeShadowWeapon = function(_super) {
      __extends(MeleeShadowWeapon, _super);
      function MeleeShadowWeapon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.player = null;
        _this.isAttacking = false;
        _this.hv = cc.v2(1, 0);
        _this.comboType = 0;
        _this.hasTargetMap = new Map();
        return _this;
      }
      Object.defineProperty(MeleeShadowWeapon.prototype, "IsAttacking", {
        get: function() {
          return this.isAttacking;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeShadowWeapon.prototype, "IsReflect", {
        get: function() {
          if (this.meleeWeapon) return this.meleeWeapon.IsReflect;
          return false;
        },
        enumerable: false,
        configurable: true
      });
      MeleeShadowWeapon.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.entity && this.entity.Move && (this.entity.Move.isStatic = true);
      };
      MeleeShadowWeapon.prototype.init = function(player, meleeWeapon) {
        this.anim = this.getComponent(cc.Animation);
        this.player = player;
        this.meleeWeapon = meleeWeapon;
      };
      Object.defineProperty(MeleeShadowWeapon.prototype, "Hv", {
        get: function() {
          return this.hv;
        },
        set: function(hv) {
          this.hv = hv.normalizeSelf();
        },
        enumerable: false,
        configurable: true
      });
      MeleeShadowWeapon.prototype.attack = function(data, comboType, hv) {
        this.updateHv(hv);
        this.comboType = comboType;
        this.hasTargetMap.clear();
        this.isAttacking = true;
        var animname = this.meleeWeapon.getAttackAnimName(comboType);
        this.anim.play(animname);
        this.anim.getAnimationState(animname).speed = this.meleeWeapon.getAnimSpeed(data.FinalCommon);
        return true;
      };
      MeleeShadowWeapon.prototype.attackIdle = function(isReverse) {
        this.anim && this.anim.play(isReverse ? "MeleeAttackIdleReverse" : "MeleeAttackIdle");
      };
      MeleeShadowWeapon.prototype.MeleeAttackFinish = function() {
        this.isAttacking = false;
      };
      MeleeShadowWeapon.prototype.ComboStart = function() {};
      MeleeShadowWeapon.prototype.ComboFinish = function() {};
      MeleeShadowWeapon.prototype.ComboTime = function() {};
      MeleeShadowWeapon.prototype.ExAttackTime = function() {
        this.player.exTrigger(TriggerData_1.default.GROUP_ATTACK, this.comboType, null, null);
      };
      MeleeShadowWeapon.prototype.AudioTime = function() {
        this.meleeWeapon && this.meleeWeapon.AudioTime();
      };
      MeleeShadowWeapon.prototype.RefreshTime = function() {
        this.hasTargetMap.clear();
      };
      MeleeShadowWeapon.prototype.DashTime = function(speed) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.DASH);
      };
      MeleeShadowWeapon.prototype.EffectTime = function() {};
      MeleeShadowWeapon.prototype.updateHv = function(hv) {
        this.hv = hv;
        this.rotateCollider(this.hv);
      };
      MeleeShadowWeapon.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        var sx = Math.abs(this.node.scaleX);
        var sy = Math.abs(this.node.scaleY);
        this.node.scaleX = this.player.node.scaleX > 0 ? sx : -sx;
        this.node.scaleY = this.node.scaleX < 0 ? -sy : sy;
        this.node.angle = Utils_1.default.getRotateAngle(direction, this.node.scaleX < 0);
      };
      MeleeShadowWeapon.prototype.onColliderStay = function(other, self) {
        if (self.w > 0 && self.h > 0) {
          if (this.hasTargetMap.has(other.id) && this.hasTargetMap.get(other.id) > 0) {
            this.hasTargetMap.set(other.id, this.hasTargetMap.get(other.id) + 1);
            return false;
          }
          this.hasTargetMap.set(other.id, 1);
          if (this.meleeWeapon) return this.meleeWeapon.attacking(other, self, this.anim, true);
          return false;
        }
      };
      MeleeShadowWeapon = __decorate([ ccclass ], MeleeShadowWeapon);
      return MeleeShadowWeapon;
    }(BaseColliderComponent_1.default);
    exports.default = MeleeShadowWeapon;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../data/TriggerData": "TriggerData",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils"
  } ],
  MeleeWeapon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8747dgi/6dFupzO0r46t7Ya", "MeleeWeapon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NonPlayer_1 = require("./NonPlayer");
    var EventHelper_1 = require("./EventHelper");
    var Box_1 = require("../building/Box");
    var Logic_1 = require("./Logic");
    var DamageData_1 = require("../data/DamageData");
    var StatusManager_1 = require("../manager/StatusManager");
    var Boss_1 = require("../boss/Boss");
    var NextStep_1 = require("../utils/NextStep");
    var FromData_1 = require("../data/FromData");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var CommonData_1 = require("../data/CommonData");
    var AvatarData_1 = require("../data/AvatarData");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var InteractBuilding_1 = require("../building/InteractBuilding");
    var Utils_1 = require("../utils/Utils");
    var CCollider_1 = require("../collider/CCollider");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var TriggerData_1 = require("../data/TriggerData");
    var Emplacement_1 = require("../building/Emplacement");
    var BaseAvatar_1 = require("../base/BaseAvatar");
    var ReflectLight_1 = require("../effect/ReflectLight");
    var NormalBuilding_1 = require("../building/NormalBuilding");
    var GameWorldSystem_1 = require("../ecs/system/GameWorldSystem");
    var Player_1 = require("./Player");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MeleeWeapon = function(_super) {
      __extends(MeleeWeapon, _super);
      function MeleeWeapon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerNode = null;
        _this.player = null;
        _this.iceLight = null;
        _this.fireLight = null;
        _this.lighteningLight = null;
        _this.toxicLight = null;
        _this.curseLight = null;
        _this.reflectLight = null;
        _this.meleeLightLeftPos = cc.v3(8, 0);
        _this.meleeLightRightPos = cc.v3(-8, 0);
        _this.isAttacking = false;
        _this.hv = cc.v2(1, 0);
        _this.isStab = true;
        _this.isFar = false;
        _this.isFist = true;
        _this.isBlunt = false;
        _this.weaponFirePoints = [];
        _this.isMiss = false;
        _this.drainSkill = new NextStep_1.default();
        _this.isReflect = false;
        _this.spriteNode = null;
        _this.weaponSprite = null;
        _this.weaponLightSprite = null;
        _this.handSprite = null;
        _this.glovesSprite = null;
        _this.comboType = 0;
        _this.isComboing = false;
        _this.hasTargetMap = new Map();
        _this.isSecond = false;
        _this.fistCombo = 0;
        _this.exBeatBack = 0;
        _this.isAttackPressed = false;
        _this.comboMiss = false;
        _this.canMove = false;
        _this.isWallReflected = false;
        return _this;
      }
      MeleeWeapon_1 = MeleeWeapon;
      Object.defineProperty(MeleeWeapon.prototype, "CanMove", {
        get: function() {
          return this.canMove || !this.isAttacking;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsSword", {
        get: function() {
          return !this.isStab && !this.isFar && !this.isFist && !this.isBlunt;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsDagger", {
        get: function() {
          return this.isStab && !this.isFar && !this.isFist && !this.isBlunt;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsSecond", {
        set: function(isSecond) {
          this.isSecond = isSecond;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsFist", {
        get: function() {
          return this.isFist;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsComboing", {
        get: function() {
          return this.isComboing;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsAttacking", {
        get: function() {
          return this.isAttacking;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsReflect", {
        get: function() {
          return this.isReflect;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "GlovesSprite", {
        get: function() {
          return this.glovesSprite;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "ComboType", {
        get: function() {
          return this.comboType;
        },
        enumerable: false,
        configurable: true
      });
      MeleeWeapon.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.anim = this.getComponent(cc.Animation);
        this.player = this.playerNode.getComponent(Player_1.default);
        this.meleeLightLeftPos = this.player.node.convertToNodeSpaceAR(this.node.convertToWorldSpaceAR(this.meleeLightLeftPos));
        this.meleeLightRightPos = this.player.node.convertToNodeSpaceAR(this.node.convertToWorldSpaceAR(this.meleeLightRightPos));
        this.initSprite();
        this.entity.destroy();
      };
      MeleeWeapon.prototype.initSprite = function() {
        this.weaponFirePoint = this.node.getChildByName("firepoint");
        this.weaponReflectPoint = this.node.getChildByName("reflectpoint");
        this.spriteNode = this.node.getChildByName("sprite");
        this.weaponSprite = this.getSpriteChildSprite([ "sprite", InventoryManager_1.default.WEAPON ]);
        this.weaponLightSprite = this.getSpriteChildSprite([ "sprite", "meleelight" ]);
        this.handSprite = this.getSpriteChildSprite([ "sprite", "hand" ]);
        this.glovesSprite = this.getSpriteChildSprite([ "sprite", "hand", "gloves" ]);
        this.handSprite.node.color = cc.Color.WHITE.fromHEX(this.player.avatar.data.skinColor);
        for (var i = 0; i < 4; i++) this.weaponFirePoints.push(this.weaponFirePoint.getChildByName("point" + i));
      };
      Object.defineProperty(MeleeWeapon.prototype, "Hv", {
        get: function() {
          return this.hv;
        },
        set: function(hv) {
          this.hv = hv;
        },
        enumerable: false,
        configurable: true
      });
      MeleeWeapon.prototype.getSpriteChildSprite = function(childNames) {
        var node = this.node;
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      MeleeWeapon.prototype.changeSprite = function(equipData, spriteFrame) {
        this.weaponSprite.spriteFrame = spriteFrame;
        var color1 = cc.color(255, 255, 255).fromHEX(equipData.color);
        var color2 = cc.color(255, 255, 255).fromHEX(equipData.lightcolor);
        this.weaponSprite.node.color = color1;
        this.weaponLightSprite.node.color = color2;
        this.isStab ? this.weaponSprite.node.angle = 15 : this.weaponSprite.node.angle = -235;
        this.weaponSprite.node.width = this.weaponSprite.spriteFrame.getOriginalSize().width;
        this.weaponSprite.node.height = this.weaponSprite.spriteFrame.getOriginalSize().height;
      };
      MeleeWeapon.prototype.changeEquipment = function(equipData, spriteFrame) {
        this.isStab = 1 == equipData.stab;
        this.isFar = 1 == equipData.far;
        this.isReflect = 1 == equipData.isReflect;
        this.isFist = InventoryManager_1.default.WEAPON != equipData.equipmetType;
        this.isBlunt = 1 == equipData.blunt;
        this.exBeatBack = this.player.inventoryMgr.getEquipBySuit(equipData).exBeatBack;
        this.changeSprite(equipData, spriteFrame);
      };
      MeleeWeapon.prototype.updateCombo = function() {
        this.comboType == MeleeWeapon_1.COMBO1 ? this.comboType = MeleeWeapon_1.COMBO2 : this.comboType == MeleeWeapon_1.COMBO2 ? this.comboType = MeleeWeapon_1.COMBO3 : (this.comboType == MeleeWeapon_1.COMBO3, 
        this.comboType = MeleeWeapon_1.COMBO1);
        this.isComboing || (this.comboType = MeleeWeapon_1.COMBO1);
      };
      MeleeWeapon.prototype.attack = function(data, fistCombo) {
        var isMiss = Logic_1.default.getRandomNum(0, 100) < data.StatusTotalData.missRate;
        if (this.isAttacking || !this.anim) {
          if (this.isComboing) {
            this.isAttackPressed = true;
            this.comboMiss = isMiss;
          }
          return false;
        }
        isMiss && this.player.showFloatFont(0, false, true, false, false, false, false);
        return this.attackDo(isMiss, fistCombo);
      };
      MeleeWeapon.prototype.attackDo = function(isMiss, fistCombo) {
        this.rotateCollider(this.hv);
        this.hasTargetMap.clear();
        this.fistCombo = fistCombo;
        this.isMiss = isMiss;
        this.isAttacking = true;
        this.canMove = false;
        this.isWallReflected = false;
        this.updateCombo();
        var animname = this.getAttackAnimName();
        this.anim.play(animname);
        this.anim.getAnimationState(animname).speed = this.getAnimSpeed(this.player.data.FinalCommon);
        this.player.sc.isJumping && this.player.jumpAbility.acceleratedFall(2);
        return true;
      };
      MeleeWeapon.prototype.getAnimSpeed = function(finalCommon) {
        var speedScaleFix = 1;
        this.isStab && !this.isFar && (speedScaleFix = 1.8);
        this.isStab || this.isFar || (speedScaleFix = 1.5);
        this.isStab && this.isFar && (speedScaleFix = 1.5);
        !this.isStab && this.isFar && (speedScaleFix = 1.2);
        this.isFist && (speedScaleFix = 1);
        var animSpeed = 1 + finalCommon.AttackSpeed / 500;
        animSpeed < .8 && (animSpeed = .8);
        animSpeed > 3 && (animSpeed = 3);
        return animSpeed * speedScaleFix;
      };
      MeleeWeapon.prototype.attackIdle = function(isReverse) {
        this.anim && this.anim.play(isReverse ? "MeleeAttackIdleReverse" : "MeleeAttackIdle");
      };
      MeleeWeapon.prototype.MoveAction = function() {
        this.canMove = true;
      };
      MeleeWeapon.prototype.getMeleeSlowRatio = function() {
        if (this.canMove || !this.isAttacking) return 1;
        return !this.isFar && this.isStab ? .1 : this.isFar && this.isStab ? .04 : this.isFar || this.isStab ? .02 : .04;
      };
      MeleeWeapon.prototype.getAttackAnimName = function(comboType) {
        var name = "MeleeAttackStab";
        name = !this.isFar && this.isStab || this.isFist ? this.isFist ? "MeleeAttackFist" : "MeleeAttackStab" : this.isFar && this.isStab ? "MeleeAttackStabFar" : this.isFar && !this.isStab ? this.isBlunt ? "MeleeAttackBluntFar" : "MeleeAttackFar" : this.isBlunt ? "MeleeAttackBlunt" : "MeleeAttack";
        if (this.player.sc.isJumping) return "MeleeAttackKick1";
        return name + this.getComboSuffix(comboType);
      };
      MeleeWeapon.prototype.getComboSuffix = function(comboType) {
        if (this.isFist) {
          if (this.isSecond) return "2";
          return "1";
        }
        comboType = comboType || this.comboType;
        return comboType == MeleeWeapon_1.COMBO1 ? "1" : comboType == MeleeWeapon_1.COMBO2 ? "2" : comboType == MeleeWeapon_1.COMBO3 ? "3" : "1";
      };
      MeleeWeapon.prototype.getReflectLight = function(dungeon, other, self, isFar, isStab, isWall, hv, color) {
        var _this = this;
        if (!dungeon) return;
        if (!this.weaponReflectPoint) return;
        if (isWall && this.player.sc.isJumping) return;
        if (isWall) {
          if (this.isWallReflected) return;
          this.isWallReflected = true;
        }
        var hv1 = other.w_center.sub(self.w_center).normalize();
        var wp2 = this.player.node.convertToWorldSpaceAR(hv1.mul(this.weaponReflectPoint.position.mag()));
        var wp = GameWorldSystem_1.default.colliderSystem.getNearestColliderPoint(self.w_center, wp2, other).point;
        var d = this.hv.dot(hv1);
        if (d < -.8) return;
        var p1 = this.player.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
        var p2 = this.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
        var y = p2.y - p1.y;
        wp.y += y;
        var pos = this.dungeon.node.convertToNodeSpaceAR(wp);
        if (isWall) {
          var pos_1 = this.player.hv.clone();
          this.player.sc.isMoving = false;
          this.player.isWeaponDashing = true;
          pos_1 = pos_1.equals(cc.Vec2.ZERO) ? this.player.isFaceRight ? cc.v2(1, 0) : cc.v2(-1, 0) : pos_1.normalizeSelf();
          this.hv = pos_1.clone();
          pos_1 = pos_1.mul(-.1);
          this.player.entity.Move.linearVelocity = pos_1;
          this.scheduleOnce(function() {
            _this.player.isWeaponDashing = false;
            _this.player.entity.Move.linearVelocity = cc.Vec2.ZERO;
            _this.player.playerAnim(BaseAvatar_1.default.STATE_IDLE, _this.player.currentDir);
          }, .2);
        }
        if (this.reflectLight) {
          var light = cc.instantiate(this.reflectLight).getComponent(ReflectLight_1.default);
          var audioType = ReflectLight_1.default.AUDIO_TYPE_MELEE;
          if (isWall) {
            audioType = ReflectLight_1.default.AUDIO_TYPE_METAL;
            (other.audioMaterial != CCollider_1.default.AUDIO_MATERIAL.METAL || this.isFist) && (audioType = ReflectLight_1.default.AUDIO_TYPE_WOOD);
          }
          light.show(dungeon, cc.v3(pos), isFar, isStab, isWall, hv, color, audioType);
        }
      };
      MeleeWeapon.prototype.getWaveLight = function(dungeonNode, p, elementType, isStab, isFar) {
        var lights = [ this.iceLight, this.fireLight, this.lighteningLight, this.toxicLight, this.curseLight ];
        var audios = [ AudioPlayer_1.default.ATTACK_ICE, AudioPlayer_1.default.ATTACK_FIRE, AudioPlayer_1.default.ATTACK_ELECTRIC, AudioPlayer_1.default.ATTACK_TOXIC, AudioPlayer_1.default.ATTACK_CURSE ];
        if (elementType < 1 || elementType > lights.length || !this.dungeon) return;
        var firePrefab = cc.instantiate(lights[elementType - 1]);
        AudioPlayer_1.default.play(audios[elementType - 1]);
        var timeScale = this.anim.getAnimationState(this.getAttackAnimName()).speed;
        var ps = [ p ];
        for (var _i = 0, _a = this.weaponFirePoints; _i < _a.length; _i++) {
          var node = _a[_i];
          node && ps.push(p.add(node.position));
        }
        for (var i = 0; i < ps.length; i++) {
          var psp = ps[i];
          psp = this.node.convertToWorldSpaceAR(psp);
          psp = dungeonNode.convertToNodeSpaceAR(psp);
          ps[i] = psp.clone();
        }
        firePrefab.parent = dungeonNode;
        firePrefab.position = ps[0];
        firePrefab.zIndex = IndexZ_1.default.OVERHEAD;
        firePrefab.opacity = 255;
        firePrefab.setScale(.2);
        firePrefab.active = true;
        cc.tween(firePrefab).to(.1 / timeScale, {
          position: ps[1]
        }).to(.1 / timeScale, {
          position: ps[2]
        }).to(.1 / timeScale, {
          position: ps[3]
        }).to(.1 / timeScale, {
          position: ps[4]
        }).start();
      };
      MeleeWeapon.prototype.MeleeAttackFinish = function() {
        this.isAttacking = false;
        this.isFist || (this.isComboing = false);
      };
      MeleeWeapon.prototype.ComboStart = function() {
        this.isComboing = true;
      };
      MeleeWeapon.prototype.ComboFinish = function() {
        this.isComboing = false;
      };
      MeleeWeapon.prototype.ComboTime = function() {
        if (this.isAttackPressed) {
          this.isAttackPressed = false;
          this.anim.pause();
          this.comboMiss && this.player.showFloatFont(0, false, true, false, false, false, false);
          this.attackDo(this.comboMiss, this.fistCombo);
          this.player.playerAnim(this.player.sc.isJumping ? BaseAvatar_1.default.STATE_AIRKICK : BaseAvatar_1.default.STATE_ATTACK, this.player.currentDir);
          this.player.stopHiding();
          this.isComboing = false;
        }
      };
      MeleeWeapon.prototype.ExAttackTime = function() {
        this.player.exTrigger(TriggerData_1.default.GROUP_ATTACK, this.comboType, null, null);
      };
      MeleeWeapon.prototype.AudioTime = function() {
        var audioName = AudioPlayer_1.default.MELEE;
        var daggerNames = [ AudioPlayer_1.default.DAGGER_ATTACK1, AudioPlayer_1.default.DAGGER_ATTACK2 ];
        var daggerName = daggerNames[Logic_1.default.getRandomNum(0, daggerNames.length - 1)];
        var swordNames = [ AudioPlayer_1.default.SWORD_ATTACK, AudioPlayer_1.default.SWORD_ATTACK1, AudioPlayer_1.default.SWORD_ATTACK2 ];
        var swordName = swordNames[Logic_1.default.getRandomNum(0, swordNames.length - 1)];
        var fistNames = [ AudioPlayer_1.default.FIST, AudioPlayer_1.default.FIST1, AudioPlayer_1.default.FIST2 ];
        var fistName = fistNames[Logic_1.default.getRandomNum(0, fistNames.length - 1)];
        var stickNames = [ AudioPlayer_1.default.STICK_ATTACK1, AudioPlayer_1.default.STICK_ATTACK2, AudioPlayer_1.default.STICK_ATTACK3 ];
        var stickName = fistNames[Logic_1.default.getRandomNum(0, stickNames.length - 1)];
        if (this.isStab && !this.isFar) {
          audioName = daggerName;
          this.comboType == MeleeWeapon_1.COMBO3 && (audioName = AudioPlayer_1.default.DAGGER_ATTACK);
        }
        this.isStab || this.isFar || (audioName = swordName);
        if (this.isStab && this.isFar) {
          audioName = stickName;
          this.comboType == MeleeWeapon_1.COMBO3 && (audioName = swordName);
        }
        if (!this.isStab && this.isFar) {
          audioName = stickName;
          this.comboType == MeleeWeapon_1.COMBO3 && (audioName = AudioPlayer_1.default.STICK_ATTACK);
        }
        this.isFist && (audioName = fistName);
        this.player.sc.isJumping && (audioName = AudioPlayer_1.default.MELEE);
        AudioPlayer_1.default.play(audioName);
      };
      MeleeWeapon.prototype.RefreshTime = function() {
        this.hasTargetMap.clear();
      };
      MeleeWeapon.prototype.DashTime = function(speed) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.DASH);
        speed || (speed = 6);
        this.player.sc.isJumping && (speed = 8 + this.player.entity.Transform.z / 20);
        this.schedule(function() {
          _this.player.getWalkSmoke(_this.player.node, _this.node.position);
        }, .05, 4, 0);
        var pos = this.player.hv.clone();
        this.player.sc.isMoving = false;
        this.player.isWeaponDashing = true;
        pos = pos.equals(cc.Vec2.ZERO) ? this.player.isFaceRight ? cc.v2(1, 0) : cc.v2(-1, 0) : pos.normalizeSelf();
        this.hv = pos.clone();
        pos = pos.mul(speed);
        this.player.entity.Move.linearVelocity = pos;
        this.scheduleOnce(function() {
          _this.player.isWeaponDashing = false;
          _this.player.entity.Move.linearVelocity = cc.Vec2.ZERO;
          _this.player.playerAnim(BaseAvatar_1.default.STATE_IDLE, _this.player.currentDir);
        }, .2);
      };
      MeleeWeapon.prototype.EffectTime = function() {
        var _this = this;
        var p = this.weaponFirePoint.position.clone();
        var ran = Logic_1.default.getRandomNum(0, 100);
        var finalCommon = this.player.data.FinalCommon;
        var waves = [ finalCommon.MagicDamage > 0 && ran < finalCommon.iceRate ? MeleeWeapon_1.ELEMENT_TYPE_ICE : 0, finalCommon.MagicDamage > 0 && ran < finalCommon.fireRate ? MeleeWeapon_1.ELEMENT_TYPE_FIRE : 0, finalCommon.MagicDamage > 0 && ran < finalCommon.lighteningRate ? MeleeWeapon_1.ELEMENT_TYPE_LIGHTENING : 0, finalCommon.MagicDamage > 0 && ran < finalCommon.toxicRate ? MeleeWeapon_1.ELEMENT_TYPE_TOXIC : 0, finalCommon.MagicDamage > 0 && ran < finalCommon.curseRate ? MeleeWeapon_1.ELEMENT_TYPE_CURSE : 0 ];
        this.scheduleOnce(function() {
          for (var _i = 0, waves_1 = waves; _i < waves_1.length; _i++) {
            var w = waves_1[_i];
            _this.dungeon && _this.getWaveLight(_this.dungeon.node, p, w, _this.isStab, _this.isFar);
          }
        }, 0);
      };
      MeleeWeapon.prototype.setWeaponInVisible = function(flag) {
        this.weaponSprite.node.opacity = flag ? 0 : 255;
      };
      MeleeWeapon.prototype.updateLogic = function(dt) {
        this.hv = this.player.Hv.clone();
        if (this.CanMove) {
          this.lerpHv ? this.lerpHv = Logic_1.default.lerpPos2(this.lerpHv, this.hv, 5 * dt) : this.lerpHv = this.hv.clone();
          this.rotateCollider(this.lerpHv);
        }
      };
      MeleeWeapon.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        var sx = Math.abs(this.node.scaleX);
        this.node.scaleX = this.player.node.scaleX > 0 ? sx : -sx;
        var sy = Math.abs(this.node.scaleY);
        this.node.scaleY = this.node.scaleX < 0 ? -sy : sy;
        this.node.angle = Utils_1.default.getRotateAngle(direction, this.node.scaleX < 0);
      };
      MeleeWeapon.prototype.onColliderStay = function(other, self) {
        if (self.w > 0 && self.h > 0) {
          if (this.hasTargetMap.has(other.id) && this.hasTargetMap.get(other.id) > 0) {
            this.hasTargetMap.set(other.id, this.hasTargetMap.get(other.id) + 1);
            return false;
          }
          this.hasTargetMap.set(other.id, 1);
          return this.attacking(other, self, this.anim, false);
        }
      };
      MeleeWeapon.prototype.beatBack = function(actor) {
        var pos = this.Hv.clone();
        pos.equals(cc.Vec2.ZERO) && (pos = cc.v2(1, 0));
        var power = 3;
        power = !this.isFar && this.isStab ? 3 : this.isFar && this.isStab ? 6 : this.isFar && !this.isStab ? 5 : (this.isFar || this.isStab, 
        3);
        this.comboType == MeleeWeapon_1.COMBO3 && (power += 2);
        power += this.exBeatBack;
        pos = pos.normalize().mul(power);
        this.scheduleOnce(function() {
          actor.entity.Move.linearVelocity = cc.v2(pos.x, pos.y).mul(actor.sc.isAttacking ? .2 : 1);
        }, .05);
      };
      MeleeWeapon.prototype.attacking = function(attackTarget, self, anim, isShadow) {
        var _this = this;
        if (!attackTarget || !this.isAttacking) return false;
        var damage = new DamageData_1.default();
        var common = new CommonData_1.default();
        if (this.player) {
          damage = this.player.data.getFinalAttackPoint();
          common = this.player.data.FinalCommon;
        }
        damage.isStab = this.isStab;
        damage.isFist = this.isFist;
        damage.isFar = this.isFar;
        damage.isBlunt = this.isBlunt;
        damage.isMelee = true;
        damage.comboType = this.comboType;
        this.isFist && (damage.comboType = this.fistCombo);
        var fromData = FromData_1.default.getClone(this.player.actorName(), "", this.player.node.position);
        var damageSuccess = false;
        var attackSuccess = false;
        if (attackTarget.tag == CCollider_1.default.TAG.NONPLAYER) {
          var monster = attackTarget.node.getComponent(NonPlayer_1.default);
          if (monster && !monster.sc.isDied && !this.isMiss && monster.data.isEnemy > 0) {
            damage.isBackAttack = ActorUtils_1.default.isBehindTarget(this.player, monster) && common.DamageBack > 0;
            damage.isBackAttack && (damage.realDamage += common.DamageBack);
            damageSuccess = monster.takeDamage(damage, fromData, this.player);
            if (damageSuccess) {
              this.getReflectLight(this.dungeon, attackTarget, self, this.isFar, this.isStab, false, this.hv, this.weaponLightSprite.node.color);
              this.beatBack(monster);
              this.addTargetAllStatus(common, monster);
              this.addHitExTrigger(damage, monster);
            }
          }
        } else if (attackTarget.tag == CCollider_1.default.TAG.BOSS) {
          var boss = attackTarget.node.getComponent(Boss_1.default);
          if (boss && !boss.sc.isDied && !this.isMiss) {
            damageSuccess = boss.takeDamage(damage, fromData, this.player);
            if (damageSuccess) {
              this.getReflectLight(this.dungeon, attackTarget, self, this.isFar, this.isStab, false, this.hv, this.weaponLightSprite.node.color);
              this.addTargetAllStatus(common, boss);
              this.addHitExTrigger(damage, boss);
              var count = damage.isCriticalStrike ? Logic_1.default.getRandomNum(12, 24) : Logic_1.default.getRandomNum(3, 6);
              this.dungeon.addHitBlood(this.player.node.position, boss.node.position, Logic_1.default.getRandomNum(3, 6));
            }
          }
        } else if (attackTarget.tag == CCollider_1.default.TAG.BUILDING || attackTarget.tag == CCollider_1.default.TAG.WALL) {
          var box = attackTarget.node.getComponent(Box_1.default);
          if (box) {
            attackSuccess = true;
            box.breakBox();
          }
          if (!attackSuccess) {
            var interactBuilding = attackTarget.node.getComponent(InteractBuilding_1.default);
            if (interactBuilding && interactBuilding.data.currentHealth > 0) {
              attackSuccess = true;
              interactBuilding.takeDamage(damage, fromData, this.player);
            }
          }
          if (!attackSuccess) {
            var hitBuilding = attackTarget.node.getComponent(NormalBuilding_1.default);
            if (hitBuilding) {
              attackSuccess = true;
              hitBuilding.takeDamage(damage, fromData, this.player);
            }
          }
          if (!attackSuccess) {
            var hitBuilding = attackTarget.node.getComponent(Emplacement_1.default);
            if (hitBuilding && hitBuilding.data.currentHealth > 0) {
              attackSuccess = true;
              hitBuilding.takeDamage(damage, fromData, this.player);
            }
          }
          this.getReflectLight(this.dungeon, attackTarget, self, this.isFar, this.isStab, true, this.hv, this.weaponLightSprite.node.color);
        } else if (attackTarget.tag == CCollider_1.default.TAG.BOSS_HIT || attackTarget.tag == CCollider_1.default.TAG.NONPLAYER_HIT) {
          attackSuccess = true;
          this.getReflectLight(this.dungeon, attackTarget, self, this.isFar, this.isStab, true, this.hv, this.weaponLightSprite.node.color);
        }
        damageSuccess && this.drainSkill.next(function() {
          var drain = _this.player.data.getLifeDrain();
          drain > 0 && _this.player.takeDamage(new DamageData_1.default(-drain), fromData);
        }, 1, true);
        this.isMiss = false;
        if (damageSuccess || attackSuccess) {
          anim.pause();
          this.player.jumpAbility && this.player.sc.isJumping && this.player.jumpAbility.airPause(2, .2);
          isShadow || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            isHeavyShaking: this.comboType == MeleeWeapon_1.COMBO3
          });
          var pauseTime = .1;
          !this.isFar && this.isStab ? pauseTime = .05 : this.isFar && this.isStab ? pauseTime = .15 : this.isFar && !this.isStab ? pauseTime = .2 : this.isFar || this.isStab ? this.isFist && (pauseTime = 0) : pauseTime = .1;
          this.scheduleOnce(function() {
            anim.resume();
          }, .1);
        }
        damageSuccess && this.player.data.AvatarData.organizationIndex == AvatarData_1.default.TECH && this.player.updateDream(-1);
        return damageSuccess || attackSuccess;
      };
      MeleeWeapon.prototype.addHitExTrigger = function(damage, actor) {
        var isAdded = false;
        if (damage.isBackAttack) {
          this.player.exTrigger(TriggerData_1.default.GROUP_HIT, TriggerData_1.default.TYPE_HIT_BACK, new FromData_1.default(), actor);
          isAdded = true;
        }
        if (damage.isCriticalStrike) {
          this.player.exTrigger(TriggerData_1.default.GROUP_HIT, TriggerData_1.default.TYPE_HIT_CRIT, new FromData_1.default(), actor);
          isAdded = true;
        }
        isAdded || this.player.exTrigger(TriggerData_1.default.GROUP_HIT, TriggerData_1.default.TYPE_HIT, new FromData_1.default(), actor);
      };
      MeleeWeapon.prototype.addTargetAllStatus = function(data, target) {
        this.addTargetStatus(data.iceRate, target, StatusManager_1.default.FROZEN);
        this.addTargetStatus(data.fireRate, target, StatusManager_1.default.BURNING);
        this.addTargetStatus(data.lighteningRate, target, StatusManager_1.default.DIZZ);
        this.addTargetStatus(data.toxicRate, target, StatusManager_1.default.TOXICOSIS);
        this.addTargetStatus(data.curseRate, target, StatusManager_1.default.CURSING);
        this.addTargetStatus(data.realRate, target, StatusManager_1.default.BLEEDING);
      };
      MeleeWeapon.prototype.addTargetStatus = function(rate, target, statusType) {
        Logic_1.default.getRandomNum(0, 100) < rate && target.addStatus(statusType, new FromData_1.default());
      };
      var MeleeWeapon_1;
      MeleeWeapon.ELEMENT_TYPE_ICE = 1;
      MeleeWeapon.ELEMENT_TYPE_FIRE = 2;
      MeleeWeapon.ELEMENT_TYPE_LIGHTENING = 3;
      MeleeWeapon.ELEMENT_TYPE_TOXIC = 4;
      MeleeWeapon.ELEMENT_TYPE_CURSE = 5;
      MeleeWeapon.COMBO1 = 1;
      MeleeWeapon.COMBO2 = 2;
      MeleeWeapon.COMBO3 = 3;
      __decorate([ property(cc.Node) ], MeleeWeapon.prototype, "playerNode", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "iceLight", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "fireLight", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "lighteningLight", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "toxicLight", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "curseLight", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "reflectLight", void 0);
      MeleeWeapon = MeleeWeapon_1 = __decorate([ ccclass ], MeleeWeapon);
      return MeleeWeapon;
    }(BaseColliderComponent_1.default);
    exports.default = MeleeWeapon;
    cc._RF.pop();
  }, {
    "../base/BaseAvatar": "BaseAvatar",
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../boss/Boss": "Boss",
    "../building/Box": "Box",
    "../building/Emplacement": "Emplacement",
    "../building/InteractBuilding": "InteractBuilding",
    "../building/NormalBuilding": "NormalBuilding",
    "../collider/CCollider": "CCollider",
    "../data/AvatarData": "AvatarData",
    "../data/CommonData": "CommonData",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../data/TriggerData": "TriggerData",
    "../ecs/system/GameWorldSystem": "GameWorldSystem",
    "../effect/ReflectLight": "ReflectLight",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/NextStep": "NextStep",
    "../utils/Utils": "Utils",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./NonPlayer": "NonPlayer",
    "./Player": "Player"
  } ],
  MetalDagger: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "79544m80uxIZp1JExG0K9ji", "MetalDagger");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StatusManager_1 = require("../manager/StatusManager");
    var FromData_1 = require("../data/FromData");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var NextStep_1 = require("../utils/NextStep");
    var Logic_1 = require("../logic/Logic");
    var OilGoldMetal_1 = require("./OilGoldMetal");
    var Utils_1 = require("../utils/Utils");
    var DamageData_1 = require("../data/DamageData");
    var MetalDagger = function() {
      function MetalDagger(metal) {
        this.attackStep = new NextStep_1.default();
        this.hasTargetMap = new Map();
        this.isPositionReady = false;
        this.isAttacking = false;
        this.currentAngle = 0;
        this.direction = cc.Vec2.ZERO;
        this.metal = metal;
      }
      MetalDagger.prototype.attacking = function(attackTarget, self) {
        var _this = this;
        var target = ActorUtils_1.default.getEnemyCollisionTarget(attackTarget, true);
        if (target) {
          var from = FromData_1.default.getClone(this.metal.player.data.name, "", this.metal.node.position);
          var d = this.metal.player.data.OilGoldData.level / 2;
          var dd = new DamageData_1.default(d > 0 ? d : 1);
          this.attackStep.IsExcuting = false;
          if (target.takeDamage(dd, from, this.metal.player)) {
            StatusManager_1.default.addBaseStatus(target, this.metal.player.data.FinalCommon, from);
            this.metal.scheduleOnce(function() {
              _this.isAttacking = false;
              _this.playIdle();
            }, .2);
          }
        }
      };
      MetalDagger.prototype.changeDirection = function(needRefresh) {
        if (!this.metal.node) return;
        var direction = ActorUtils_1.default.getTargetDirection(this.metal.node.position, this.metal.getNearestEnemyActor(600, needRefresh), false);
        if (direction.equals(cc.Vec3.ZERO)) {
          this.playIdle();
          this.attackStep.refreshCoolDown(3);
          return false;
        }
        this.metal.entity.Move.linearVelocity = cc.v2(direction.mul(15));
        this.playAttack();
        return true;
      };
      MetalDagger.prototype.updateLogic = function(dt) {
        var _this = this;
        if (!this.metal.player) return;
        this.attackStep.next(function() {
          if (!_this.attackStep.IsExcuting && _this.isPositionReady) {
            _this.hasTargetMap.clear();
            _this.attackStep.IsExcuting = _this.changeDirection(true);
            _this.isAttacking = _this.attackStep.IsExcuting;
            _this.isAttacking && (_this.isPositionReady = false);
          }
        }, 2, false, function() {
          _this.attackStep.IsExcuting ? _this.changeDirection(false) : _this.isAttacking = false;
        });
        this.attackStep.IsExcuting ? this.direction ? this.direction = this.metal.entity.Move.linearVelocity : this.direction = Logic_1.default.lerpPos2(this.direction, this.metal.entity.Move.linearVelocity, 5 * dt) : this.direction = Logic_1.default.lerpPos2(this.direction, cc.v2(1, 0), 5 * dt);
        this.rotateCollider(this.direction);
      };
      MetalDagger.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        var angle = Utils_1.default.getRotateAngle(direction, false);
        this.metal.sprite.angle = angle;
        this.metal.shadow.angle = angle;
      };
      MetalDagger.prototype.playIdle = function() {
        this.metal.playAnim(OilGoldMetal_1.default.ANIM_IDLE);
      };
      MetalDagger.prototype.playAttack = function() {
        this.metal.playAnim(OilGoldMetal_1.default.ANIM_DAGGER_IDLE);
      };
      MetalDagger.prototype.ready = function() {
        if (!this.isPositionReady) {
          this.isPositionReady = true;
          this.metal.sprite.color = cc.Color.RED;
          cc.tween(this.metal.sprite).to(.1, {
            color: cc.Color.YELLOW
          }).start();
        }
      };
      return MetalDagger;
    }();
    exports.default = MetalDagger;
    cc._RF.pop();
  }, {
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Logic": "Logic",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/NextStep": "NextStep",
    "../utils/Utils": "Utils",
    "./OilGoldMetal": "OilGoldMetal"
  } ],
  MetalHand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "69ffcNZbqdP+4ESEvgFhwY3", "MetalHand");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StatusManager_1 = require("../manager/StatusManager");
    var FromData_1 = require("../data/FromData");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var NextStep_1 = require("../utils/NextStep");
    var OilGoldMetal_1 = require("./OilGoldMetal");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var MetalHand = function() {
      function MetalHand(metal) {
        this.attackStep = new NextStep_1.default();
        this.hasTargetMap = new Map();
        this.currentAngle = 0;
        this.direction = cc.Vec3.ZERO;
        this.metal = metal;
      }
      Object.defineProperty(MetalHand.prototype, "IsAttacking", {
        get: function() {
          return this.attackStep.IsExcuting;
        },
        enumerable: false,
        configurable: true
      });
      MetalHand.prototype.attacking = function(attackTarget, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(attackTarget, true);
        if (target) {
          var from = FromData_1.default.getClone(this.metal.player.data.name, "", this.metal.node.position);
          var dd = this.metal.player.data.getFinalAttackPoint();
          this.attackStep.IsExcuting = false;
          if (target.takeDamage(dd, from, this.metal.player)) {
            StatusManager_1.default.addBaseStatus(target, this.metal.player.data.FinalCommon, from);
            this.beatBack(target);
          }
        }
      };
      MetalHand.prototype.beatBack = function(actor) {
        var pos = this.direction.clone();
        pos.equals(cc.Vec3.ZERO) && (pos = cc.v3(1, 0));
        var power = 4;
        pos = pos.normalize().mul(power);
        actor.entity.Move.linearVelocity = cc.v2(pos.x, pos.y).mul(actor.sc.isAttacking ? .2 : 1);
      };
      MetalHand.prototype.updateLogic = function(dt) {
        var _this = this;
        if (!this.metal.player) return;
        this.IsAttacking || (this.metal.node.scaleX = this.metal.player.isFaceRight ? 1 : -1);
        ActorUtils_1.default.changeZIndex(this.metal);
        this.attackStep.next(function() {
          _this.direction = ActorUtils_1.default.getTargetDirection(_this.metal.node.position, _this.metal.getNearestEnemyActor(300, true), false);
          if (!_this.direction.equals(cc.Vec3.ZERO)) {
            _this.hasTargetMap.clear();
            _this.attackStep.IsExcuting = true;
            _this.metal.entity.Move.linearVelocity = cc.Vec2.ZERO;
            _this.playAttack();
          }
        }, 2, false);
      };
      MetalHand.prototype.playIdle = function() {
        this.metal.playAnim(OilGoldMetal_1.default.ANIM_HAND_IDLE);
      };
      MetalHand.prototype.playAttack = function() {
        this.metal.playAnim(OilGoldMetal_1.default.ANIM_HAND_ATTACK1);
      };
      MetalHand.prototype.ready = function() {
        this.attackStep.IsExcuting = false;
        this.playIdle();
      };
      MetalHand.prototype.dash = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.DASH);
        this.metal.node.scaleX = this.direction.x >= 0 ? 1 : -1;
        this.metal.entity.Move.linearVelocity = cc.v2(this.direction.mul(20));
      };
      return MetalHand;
    }();
    exports.default = MetalHand;
    cc._RF.pop();
  }, {
    "../data/FromData": "FromData",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/NextStep": "NextStep",
    "./OilGoldMetal": "OilGoldMetal"
  } ],
  MetalShield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f7902frvPxGgZI+ZqfSsQb+", "MetalShield");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StatusManager_1 = require("../manager/StatusManager");
    var FromData_1 = require("../data/FromData");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var NextStep_1 = require("../utils/NextStep");
    var Logic_1 = require("../logic/Logic");
    var OilGoldMetal_1 = require("./OilGoldMetal");
    var Utils_1 = require("../utils/Utils");
    var DamageData_1 = require("../data/DamageData");
    var MetalShield = function() {
      function MetalShield(metal) {
        this.attackStep = new NextStep_1.default();
        this.hasTargetMap = new Map();
        this.isDaggerReady = false;
        this.isAttacking = false;
        this.currentAngle = 0;
        this.direction = cc.Vec2.ZERO;
        this.checkTimeDelay = 0;
        this.metal = metal;
      }
      MetalShield.prototype.getPlayerFarPosition = function(player, distance, angleOffset) {
        var hv = player.Hv.clone();
        var pos = cc.v3(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180).mul(distance));
        return player.node.position.clone().addSelf(cc.v3(8, 48).addSelf(pos));
      };
      MetalShield.prototype.attacking = function(attackTarget, self) {
        var _this = this;
        var target = ActorUtils_1.default.getEnemyCollisionTarget(attackTarget, true);
        if (target) {
          var from = FromData_1.default.getClone(this.metal.player.data.name, "", this.metal.node.position);
          var d = this.metal.player.data.OilGoldData.level / 2;
          var dd = new DamageData_1.default(d > 0 ? d : 1);
          this.attackStep.IsExcuting = false;
          if (target.takeDamage(dd, from, this.metal.player)) {
            StatusManager_1.default.addBaseStatus(target, this.metal.player.data.FinalCommon, from);
            this.metal.scheduleOnce(function() {
              _this.isAttacking = false;
              _this.playIdle();
            }, .2);
          }
        }
      };
      MetalShield.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      MetalShield.prototype.getNearestEnemyActor = function(needRefresh) {
        ActorUtils_1.default.isTargetCanTrack(this.currentTarget) && !needRefresh || (this.currentTarget = ActorUtils_1.default.getNearestEnemyActor(this.metal.node.position, false, this.metal.player.dungeon, 600));
        return this.currentTarget;
      };
      MetalShield.prototype.changeDirection = function() {
        if (!this.metal.node) return;
        var direction = ActorUtils_1.default.getTargetDirection(this.metal.node.position, this.getNearestEnemyActor(), false);
        if (direction.equals(cc.Vec3.ZERO)) {
          this.playIdle();
          this.attackStep.refreshCoolDown(3);
          return false;
        }
        this.metal.entity.Move.linearVelocity = cc.v2(direction.mul(15));
        this.playAttack();
        return true;
      };
      MetalShield.prototype.updateLogic = function(dt) {
        var _this = this;
        if (!this.metal.player) return;
        this.attackStep.next(function() {
          if (!_this.attackStep.IsExcuting && _this.isDaggerReady) {
            _this.hasTargetMap.clear();
            _this.attackStep.IsExcuting = _this.changeDirection();
            _this.isAttacking = _this.attackStep.IsExcuting;
            _this.isAttacking && (_this.isDaggerReady = false);
          }
        }, 2, false, function() {
          _this.attackStep.IsExcuting ? _this.changeDirection() : _this.isAttacking = false;
        });
        this.attackStep.IsExcuting ? this.direction ? this.direction = this.metal.entity.Move.linearVelocity : this.direction = Logic_1.default.lerpPos2(this.direction, this.metal.entity.Move.linearVelocity, 5 * dt) : this.direction = Logic_1.default.lerpPos2(this.direction, cc.v2(1, 0), 5 * dt);
        this.rotateCollider(this.direction);
      };
      MetalShield.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        var angle = Utils_1.default.getRotateAngle(direction, false);
        this.metal.sprite.angle = angle;
        this.metal.shadow.angle = angle;
      };
      MetalShield.prototype.playIdle = function() {
        this.metal.playAnim(OilGoldMetal_1.default.ANIM_IDLE);
      };
      MetalShield.prototype.playAttack = function() {
        this.metal.playAnim(OilGoldMetal_1.default.ANIM_DAGGER_IDLE);
      };
      MetalShield.prototype.ready = function() {
        if (!this.isDaggerReady) {
          this.isDaggerReady = true;
          this.metal.sprite.color = cc.Color.RED;
          cc.tween(this.metal.sprite).to(.1, {
            color: cc.Color.YELLOW
          }).start();
        }
      };
      return MetalShield;
    }();
    exports.default = MetalShield;
    cc._RF.pop();
  }, {
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Logic": "Logic",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/NextStep": "NextStep",
    "../utils/Utils": "Utils",
    "./OilGoldMetal": "OilGoldMetal"
  } ],
  MetalTalentData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "824494roEJMK75QLsD3ONMF", "MetalTalentData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var MetalTalentData = function(_super) {
      __extends(MetalTalentData, _super);
      function MetalTalentData() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.id = "";
        _this.name = "";
        _this.content = "";
        _this.isUnlock = false;
        return _this;
      }
      MetalTalentData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        return this;
      };
      MetalTalentData.prototype.clone = function() {
        var e = new MetalTalentData();
        e.valueCopy(this);
        return e;
      };
      MetalTalentData.METAL_DAGGER = "dagger";
      MetalTalentData.METAL_HAND = "hand";
      MetalTalentData.METAL_SHIELD = "shield";
      return MetalTalentData;
    }(BaseData_1.default);
    exports.default = MetalTalentData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData"
  } ],
  MetalTalentDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ca74D1dKdFvpWigXgA17kM", "MetalTalentDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../../logic/Logic");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var BaseDialog_1 = require("./BaseDialog");
    var MetalTalentData_1 = require("../../data/MetalTalentData");
    var MetalTalentItem_1 = require("../MetalTalentItem");
    var EventHelper_1 = require("../../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MetalTalentDialog = function(_super) {
      __extends(MetalTalentDialog, _super);
      function MetalTalentDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemPrefab = null;
        _this.toggleContainer = null;
        _this.daggerNode = null;
        _this.handNode = null;
        _this.shieldNode = null;
        _this.infoDialog = null;
        _this.infoTitle = null;
        _this.infoContent = null;
        _this.list = [];
        _this.currentIndex = 0;
        return _this;
      }
      MetalTalentDialog.prototype.onLoad = function() {};
      MetalTalentDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      MetalTalentDialog.prototype.show = function() {
        _super.prototype.show.call(this);
        this.clearUi();
        var current = new MetalTalentData_1.default().valueCopy(Logic_1.default.playerMetals[Logic_1.default.metalId]);
        this.list = [ [], [], [] ];
        for (var key in Logic_1.default.metals) {
          var data = new MetalTalentData_1.default();
          data.valueCopy(Logic_1.default.metals[key]);
          data.valueCopy(Logic_1.default.playerMetals[key]);
          current.id.length > 0 && current.id == data.id && (data.isUnlock = current.isUnlock);
          -1 != key.indexOf(MetalTalentData_1.default.METAL_DAGGER) ? this.buildItem(data, this.list[0], this.daggerNode) : -1 != key.indexOf(MetalTalentData_1.default.METAL_HAND) ? this.buildItem(data, this.list[1], this.handNode) : -1 != key.indexOf(MetalTalentData_1.default.METAL_SHIELD) && this.buildItem(data, this.list[2], this.shieldNode);
        }
        this.toggleContainer.toggleItems[0].uncheck();
        this.toggleContainer.toggleItems[1].uncheck();
        this.toggleContainer.toggleItems[2].uncheck();
        if (-1 != current.id.indexOf(MetalTalentData_1.default.METAL_DAGGER)) {
          this.toggleContainer.toggleItems[0].check();
          this.currentIndex = 0;
        } else if (-1 != current.id.indexOf(MetalTalentData_1.default.METAL_HAND)) {
          this.toggleContainer.toggleItems[1].check();
          this.currentIndex = 1;
        } else if (-1 != current.id.indexOf(MetalTalentData_1.default.METAL_SHIELD)) {
          this.toggleContainer.toggleItems[2].check();
          this.currentIndex = 2;
        }
        this.selectItem(current);
      };
      MetalTalentDialog.prototype.clearUi = function() {
        this.daggerNode.removeAllChildren();
        this.handNode.removeAllChildren();
        this.shieldNode.removeAllChildren();
        this.list = [ [], [], [] ];
        this.hideInfoDialog();
      };
      MetalTalentDialog.prototype.buildItem = function(data, list, parent) {
        var item = cc.instantiate(this.itemPrefab).getComponent(MetalTalentItem_1.default);
        item.init(this, data, list.length);
        list.push(item);
        parent.addChild(item.node);
      };
      MetalTalentDialog.prototype.selectTalentGroup = function(toggle, index) {
        if (index == this.currentIndex) return;
        this.currentIndex = index;
        if (0 == index) {
          Logic_1.default.metalId = this.list[0][0].data.id;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.SELECT_METAL_TALENT);
        } else if (1 == index) {
          Logic_1.default.metalId = this.list[1][0].data.id;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.SELECT_METAL_TALENT);
        } else if (2 == index) {
          Logic_1.default.metalId = this.list[2][0].data.id;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.SELECT_METAL_TALENT);
        }
      };
      MetalTalentDialog.prototype.showInfoDialog = function(title, content) {
        this.infoDialog.active = true;
        this.infoDialog.getChildByName("layout").getChildByName("title").getComponent(cc.Label).string = title;
        this.infoDialog.getChildByName("layout").getChildByName("content").getComponent(cc.Label).string = content;
      };
      MetalTalentDialog.prototype.hideInfoDialog = function() {
        this.infoDialog.active = false;
      };
      MetalTalentDialog.prototype.getUnlockCount = function() {
        var count = 0;
        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
          var d = _a[_i];
          for (var _b = 0, d_1 = d; _b < d_1.length; _b++) {
            var d1 = d_1[_b];
            d1.data.isUnlock && count++;
          }
        }
        return count;
      };
      MetalTalentDialog.prototype.selectItem = function(data) {
        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
          var d = _a[_i];
          for (var _b = 0, d_2 = d; _b < d_2.length; _b++) {
            var d1 = d_2[_b];
            d1.selectNode.active = false;
            if (data.id == d1.data.id) {
              d1.selectNode.active = true;
              Logic_1.default.metalId = data.id;
              EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.SELECT_METAL_TALENT);
            }
          }
        }
      };
      __decorate([ property(cc.Prefab) ], MetalTalentDialog.prototype, "itemPrefab", void 0);
      __decorate([ property(cc.ToggleContainer) ], MetalTalentDialog.prototype, "toggleContainer", void 0);
      __decorate([ property(cc.Node) ], MetalTalentDialog.prototype, "daggerNode", void 0);
      __decorate([ property(cc.Node) ], MetalTalentDialog.prototype, "handNode", void 0);
      __decorate([ property(cc.Node) ], MetalTalentDialog.prototype, "shieldNode", void 0);
      __decorate([ property(cc.Node) ], MetalTalentDialog.prototype, "infoDialog", void 0);
      __decorate([ property(cc.Label) ], MetalTalentDialog.prototype, "infoTitle", void 0);
      __decorate([ property(cc.Label) ], MetalTalentDialog.prototype, "infoContent", void 0);
      MetalTalentDialog = __decorate([ ccclass ], MetalTalentDialog);
      return MetalTalentDialog;
    }(BaseDialog_1.default);
    exports.default = MetalTalentDialog;
    cc._RF.pop();
  }, {
    "../../data/MetalTalentData": "MetalTalentData",
    "../../logic/EventHelper": "EventHelper",
    "../../logic/Logic": "Logic",
    "../../utils/AudioPlayer": "AudioPlayer",
    "../MetalTalentItem": "MetalTalentItem",
    "./BaseDialog": "BaseDialog"
  } ],
  MetalTalentItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3362eu8Th5NwIsPusa4lqSk", "MetalTalentItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var MetalTalentData_1 = require("../data/MetalTalentData");
    var GameAlertDialog_1 = require("./dialog/GameAlertDialog");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MetalTalentItem = function(_super) {
      __extends(MetalTalentItem, _super);
      function MetalTalentItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.selectNode = null;
        _this.lockToggle = null;
        _this.index = 0;
        _this.data = new MetalTalentData_1.default();
        return _this;
      }
      MetalTalentItem.prototype.onLoad = function() {
        var _this = this;
        var isLongPress = false;
        var touchStart = false;
        this.node.on(cc.Node.EventType.TOUCH_START, function() {
          touchStart = true;
          _this.scheduleOnce(function() {
            if (!touchStart) return;
            isLongPress = true;
            _this.metalTalentDialog.showInfoDialog(_this.data.name, _this.data.content);
          }, .3);
        });
        this.node.on(cc.Node.EventType.TOUCH_END, function() {
          _this.metalTalentDialog.hideInfoDialog();
          isLongPress || _this.switchOrUnlock();
          touchStart = false;
          isLongPress = false;
        });
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          _this.metalTalentDialog.hideInfoDialog();
          touchStart = false;
          isLongPress = false;
        });
        this.node.on(cc.Node.EventType.MOUSE_ENTER, function() {
          _this.metalTalentDialog.showInfoDialog(_this.data.name, _this.data.content);
        });
        this.node.on(cc.Node.EventType.MOUSE_LEAVE, function() {
          _this.metalTalentDialog.hideInfoDialog();
        });
      };
      MetalTalentItem.prototype.init = function(metalTalentDialog, data, index) {
        this.metalTalentDialog = metalTalentDialog;
        this.data.valueCopy(data);
        this.index = index;
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("iconmetal" + this.data.id);
        this.lockToggle.isChecked = this.data.isUnlock;
        this.lockToggle.isChecked && (this.lockToggle.interactable = false);
      };
      MetalTalentItem.prototype.switchOrUnlock = function() {
        var _this = this;
        this.lockToggle.isChecked = this.data.isUnlock;
        var count = this.metalTalentDialog.getUnlockCount();
        var left = Logic_1.default.playerData.OilGoldData.level - count;
        this.data.isUnlock ? this.metalTalentDialog.selectItem(this.data) : left > 0 ? GameAlertDialog_1.default.show("\u662f\u5426\u82b1\u8d39\u4e00\u4e2a\u7fe0\u91d1\u70b9\u89e3\u9501\u8be5\u5929\u8d4b\n\u5f53\u524d\u62e5\u6709" + left, "\u786e\u5b9a", "\u53d6\u6d88", function(flag) {
          if (flag) {
            _this.data.isUnlock = true;
            _this.lockToggle.isChecked = _this.data.isUnlock;
            Logic_1.default.playerMetals[_this.data.id] = _this.data.clone();
          }
        }) : Utils_1.default.toast("\u7fe0\u91d1\u70b9\u4e0d\u591f\u4e86\uff0c\u53bb\u6536\u96c6\u66f4\u591a\u7684\u7fe0\u91d1\u70b9\u5427", true, true);
      };
      MetalTalentItem.prototype.start = function() {};
      __decorate([ property(cc.Sprite) ], MetalTalentItem.prototype, "sprite", void 0);
      __decorate([ property(cc.Node) ], MetalTalentItem.prototype, "selectNode", void 0);
      __decorate([ property(cc.Toggle) ], MetalTalentItem.prototype, "lockToggle", void 0);
      MetalTalentItem = __decorate([ ccclass ], MetalTalentItem);
      return MetalTalentItem;
    }(cc.Component);
    exports.default = MetalTalentItem;
    cc._RF.pop();
  }, {
    "../data/MetalTalentData": "MetalTalentData",
    "../logic/Logic": "Logic",
    "../utils/Utils": "Utils",
    "./dialog/GameAlertDialog": "GameAlertDialog"
  } ],
  MgCrack: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d929jibO9BjosaDA5nr9aL", "MgCrack");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var MonsterGenerator_1 = require("./MonsterGenerator");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MgCrack = function(_super) {
      __extends(MgCrack, _super);
      function MgCrack() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.frames = [ "crack000", "crack001", "crack002", "crack003" ];
        return _this;
      }
      MgCrack.prototype.init = function(dungeon, generatorInterval, generatorCount, generatorList) {
        _super.prototype.init.call(this, dungeon, generatorInterval, generatorCount, generatorList);
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
      };
      MgCrack.prototype.setFrames = function(frames) {
        this.frames = frames;
      };
      MgCrack.prototype.open = function() {
        var _this = this;
        if (_super.prototype.open.call(this)) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SCARABCRAWL);
          var tween = cc.tween(this.sprite);
          var _loop_1 = function(frame) {
            tween.then(cc.tween(this_1.sprite).delay(.2).call(function() {
              _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(frame);
            }));
          };
          var this_1 = this;
          for (var _i = 0, _a = this.frames; _i < _a.length; _i++) {
            var frame = _a[_i];
            _loop_1(frame);
          }
          tween.call(function() {
            _this.showMonster();
          }).start();
        }
        return true;
      };
      MgCrack.prototype.addMonster = function() {
        if (_super.prototype.addMonster.call(this)) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SCARABCRAWL);
          this.showMonster();
        }
        return true;
      };
      MgCrack = __decorate([ ccclass ], MgCrack);
      return MgCrack;
    }(MonsterGenerator_1.default);
    exports.default = MgCrack;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer",
    "./MonsterGenerator": "MonsterGenerator"
  } ],
  MgWentLine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "657e7MsMqdJ2by+hThG3E0k", "MgWentLine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var MonsterGenerator_1 = require("./MonsterGenerator");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MgWentLine = function(_super) {
      __extends(MgWentLine, _super);
      function MgWentLine() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      MgWentLine.prototype.init = function(dungeon, generatorInterval, generatorCount, generatorList) {
        _super.prototype.init.call(this, dungeon, generatorInterval, generatorCount, generatorList);
        this.node.getChildByName("sprite").getChildByName("door").opacity = this.data.triggerCount > 0 ? 0 : 255;
      };
      MgWentLine.prototype.open = function() {
        if (_super.prototype.open.call(this)) {
          this.anim.play("WentLineOpen");
          AudioPlayer_1.default.play(AudioPlayer_1.default.WENTLINE_OPEN);
        }
        return true;
      };
      MgWentLine.prototype.ShowFinish = function() {
        this.showMonster();
      };
      MgWentLine.prototype.addMonster = function() {
        if (_super.prototype.addMonster.call(this)) {
          this.anim.play("WentLineShow");
          AudioPlayer_1.default.play(AudioPlayer_1.default.WENTLINE_SHOW);
        }
        return true;
      };
      MgWentLine = __decorate([ ccclass ], MgWentLine);
      return MgWentLine;
    }(MonsterGenerator_1.default);
    exports.default = MgWentLine;
    cc._RF.pop();
  }, {
    "../utils/AudioPlayer": "AudioPlayer",
    "./MonsterGenerator": "MonsterGenerator"
  } ],
  MiniMap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b8f7e0qah9Ot5qnGbL59sxK", "MiniMap");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var MiniTile_1 = require("./MiniTile");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MiniMap = function(_super) {
      __extends(MiniMap, _super);
      function MiniMap() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.miniTile = null;
        _this.cover = null;
        _this.layer = null;
        _this.dialog = null;
        _this.closeButton = null;
        _this.width = 0;
        _this.height = 0;
        _this.tileSize = 0;
        _this.startPos = cc.v3(0, 0);
        _this.touchPos = cc.v2(0, 0);
        _this.isAniming = false;
        _this.isDrag = false;
        _this.lastPlayerPos = cc.v2(-1, -1);
        return _this;
      }
      MiniMap.prototype.onLoad = function() {
        var _this = this;
        this.closeButton.active = false;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.CHANGE_MINIMAP, function(detail) {
          _this.node && _this.changeMap(detail.x, detail.y);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.OPEN_MINIMAP, function(detail) {
          _this.node && _this.openMap();
        });
        this.cover.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.openMap();
        });
        this.layer.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.touchPos = event.getLocation();
          _this.startPos = _this.layer.position.clone();
          _this.unscheduleAllCallbacks();
          _this.isDrag = true;
        });
        this.layer.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var offset = event.getLocation().sub(_this.touchPos).mul(.5);
          _this.layer.setPosition(_this.startPos.x + offset.x, _this.startPos.y + offset.y);
        });
        this.layer.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.scheduleOnce(function() {
            _this.isDrag = false;
          }, 5);
        });
        this.layer.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.scheduleOnce(function() {
            _this.isDrag = false;
          }, 5);
        });
        this.width = Logic_1.default.mapManager.rectDungeon.map.length;
        this.height = Logic_1.default.mapManager.rectDungeon.map[0].length;
        var currentPos = cc.v3(Logic_1.default.mapManager.getCurrentRoom().x, Logic_1.default.mapManager.getCurrentRoom().y);
        this.map = new Array();
        this.layer.removeAllChildren();
        this.layer.width = 100 * this.width;
        this.layer.height = 100 * this.height;
        for (var i = 0; i < this.width; i++) {
          this.map[i] = new Array();
          for (var j = 0; j < this.height; j++) {
            var node = cc.instantiate(this.miniTile);
            node.group = "ui";
            this.tileSize = node.width;
            this.map[i][j] = node.getComponent(MiniTile_1.default);
            this.layer.addChild(this.map[i][j].node);
            this.map[i][j].init(i, j, i == currentPos.x && j == currentPos.y);
            this.map[i][j].isCurrentRoom && (this.currentTile = this.map[i][j]);
          }
        }
      };
      MiniMap.prototype.changeMap = function(x, y) {
        if (x == this.lastPlayerPos.x && y == this.lastPlayerPos.y) return;
        if (this.currentTile) {
          this.lastPlayerPos.x = x;
          this.lastPlayerPos.y = y;
          this.currentTile.updateMap(x, y);
        }
      };
      MiniMap.prototype.openMap = function() {
        var _this = this;
        if (this.isAniming) return;
        this.isAniming = true;
        if (this.dialog.position.equals(cc.Vec3.ZERO)) {
          this.closeButton.active = true;
          cc.tween(this.dialog).to(.3, {
            position: cc.v3(335, -210),
            width: 300,
            height: 300,
            scale: 1.5
          }).call(function() {
            _this.cover.active = false;
            _this.isAniming = false;
          }).start();
        } else {
          this.closeButton.active = false;
          this.cover.active = true;
          cc.tween(this.dialog).to(.3, {
            position: cc.v3(0, 0),
            width: 300,
            height: 300,
            scale: .5
          }).call(function() {
            _this.isAniming = false;
          }).start();
        }
      };
      MiniMap.prototype.update = function(dt) {
        !this.isDrag && this.currentTile && (this.layer.position = Logic_1.default.lerpPos(this.layer.position, cc.v3(-this.currentTile.node.position.x, -this.currentTile.node.position.y), 1 * dt));
      };
      MiniMap.ColorLevel = {
        EMPTY: -1,
        HIDE: 0,
        NORMAL: 1,
        PLAYER: 2,
        CLEAR: 3,
        NORMAL_BOSS: 4,
        CLEAR_PUZZLE: 5,
        CLEAR_END: 6,
        CLEAR_BOSS: 7,
        NORMAL_LOOT: 8,
        CLEAR_LOOT: 9,
        NORMAL_START: 10,
        NORMAL_END: 11,
        NORMAL_REST: 12,
        NORMAL_PREPARE: 13,
        NORMAL_TEST: 14,
        NORMAL_PUZZLE: 15,
        NORMAL_MERCHANT: 16,
        CLEAR_MERCHANT: 17
      };
      __decorate([ property(cc.Prefab) ], MiniMap.prototype, "miniTile", void 0);
      __decorate([ property(cc.Node) ], MiniMap.prototype, "cover", void 0);
      __decorate([ property(cc.Node) ], MiniMap.prototype, "layer", void 0);
      __decorate([ property(cc.Node) ], MiniMap.prototype, "dialog", void 0);
      __decorate([ property(cc.Node) ], MiniMap.prototype, "closeButton", void 0);
      MiniMap = __decorate([ ccclass ], MiniMap);
      return MiniMap;
    }(cc.Component);
    exports.default = MiniMap;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "./MiniTile": "MiniTile"
  } ],
  MiniTile: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc6deLOAaROjpYY/VRsNTJL", "MiniTile");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var RectRoom_1 = require("../rect/RectRoom");
    var RoomType_1 = require("../rect/RoomType");
    var MiniMap_1 = require("./MiniMap");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MiniTile = function(_super) {
      __extends(MiniTile, _super);
      function MiniTile() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.deathSign = null;
        _this.sign = null;
        _this.bg = null;
        _this.isCurrentRoom = false;
        return _this;
      }
      MiniTile.prototype.onLoad = function() {
        this.graphics = this.getComponent(cc.Graphics);
      };
      MiniTile.prototype.start = function() {};
      MiniTile.prototype.init = function(x, y, isCurrentRoom) {
        this.isCurrentRoom = isCurrentRoom;
        this.x = x;
        this.y = y;
        this.graphics = this.getComponent(cc.Graphics);
        this.initMap();
      };
      MiniTile.prototype.isFirstEqual = function(mapStr, typeStr) {
        if (!mapStr) return false;
        var isequal = mapStr[0] == typeStr;
        return isequal;
      };
      MiniTile.prototype.isThe = function(mapStr, typeStr) {
        if (!mapStr) return false;
        var isequal = -1 != mapStr.indexOf(typeStr);
        return isequal;
      };
      MiniTile.prototype.initMap = function() {
        var levelData = Logic_1.default.worldLoader.getCurrentLevelData();
        var groundOilGoldData = Logic_1.default.groundOilGoldData.clone();
        this.map = levelData.getRoomMap(this.x, this.y);
        this.floormap = levelData.getRoomFloorMap(this.x, this.y);
        if (this.x < 0 || this.y < 0 || this.x > Logic_1.default.mapManager.rectDungeon.map.length - 1 || this.y > Logic_1.default.mapManager.rectDungeon.map[0].length - 1) {
          this.node.opacity = 0;
          return;
        }
        var rectroom = Logic_1.default.mapManager.rectDungeon.map[this.x][this.y];
        if (!rectroom) {
          this.node.opacity = 0;
          return;
        }
        this.node.opacity = 255;
        var state = rectroom.state;
        var roomType = rectroom.roomType;
        groundOilGoldData.chapter == Logic_1.default.chapterIndex && groundOilGoldData.level == Logic_1.default.level && groundOilGoldData.x == rectroom.x && groundOilGoldData.y == rectroom.y && groundOilGoldData.value > 0 && !this.isCurrentRoom ? this.deathSign.node.active = true : this.deathSign.node.active = false;
        this.bg.color = this.getColor(MiniMap_1.default.ColorLevel.HIDE);
        this.bg.color = this.getColor(MiniMap_1.default.ColorLevel.NORMAL);
        this.bg.opacity = 60;
        var isClear = state == RectRoom_1.default.STATE_CLEAR;
        this.bg.color = this.getColor(isClear ? MiniMap_1.default.ColorLevel.CLEAR : MiniMap_1.default.ColorLevel.NORMAL);
        this.getMapColor(roomType, RoomType_1.default.EMPTY_ROOM, isClear, MiniMap_1.default.ColorLevel.EMPTY, MiniMap_1.default.ColorLevel.EMPTY);
        this.getMapColor(roomType, RoomType_1.default.BOSS_ROOM, isClear, MiniMap_1.default.ColorLevel.NORMAL_BOSS, MiniMap_1.default.ColorLevel.CLEAR_BOSS);
        this.getMapColor(roomType, RoomType_1.default.LOOT_ROOM, isClear, MiniMap_1.default.ColorLevel.NORMAL_LOOT, MiniMap_1.default.ColorLevel.CLEAR_LOOT);
        this.getMapColor(roomType, RoomType_1.default.MERCHANT_ROOM, isClear, MiniMap_1.default.ColorLevel.NORMAL_MERCHANT, MiniMap_1.default.ColorLevel.CLEAR_MERCHANT);
        this.getMapColor(roomType, RoomType_1.default.START_ROOM, isClear, MiniMap_1.default.ColorLevel.NORMAL_START, MiniMap_1.default.ColorLevel.NORMAL_START);
        this.getMapColor(roomType, RoomType_1.default.END_ROOM, isClear, MiniMap_1.default.ColorLevel.NORMAL_END, MiniMap_1.default.ColorLevel.CLEAR_END);
        this.getMapColor(roomType, RoomType_1.default.ELITE_ROOM, isClear, MiniMap_1.default.ColorLevel.NORMAL_PUZZLE, MiniMap_1.default.ColorLevel.CLEAR_PUZZLE);
        this.getMapColor(roomType, RoomType_1.default.REST_ROOM, isClear, MiniMap_1.default.ColorLevel.NORMAL_REST, MiniMap_1.default.ColorLevel.NORMAL_REST);
        this.getMapColor(roomType, RoomType_1.default.PREPARE_ROOM, isClear, MiniMap_1.default.ColorLevel.NORMAL_PREPARE, MiniMap_1.default.ColorLevel.NORMAL_PREPARE);
        this.getMapColor(roomType, RoomType_1.default.TEST_ROOM, isClear, MiniMap_1.default.ColorLevel.NORMAL_TEST, MiniMap_1.default.ColorLevel.NORMAL_TEST);
        roomType == RoomType_1.default.START_ROOM && (this.bg.color = this.getColor(MiniMap_1.default.ColorLevel.NORMAL_START));
        if (this.isCurrentRoom) {
          this.bg.color = this.getColor(MiniMap_1.default.ColorLevel.PLAYER);
          this.bg.opacity = 200;
        }
        (!levelData.minimapOnlyCurrentRoom || levelData.minimapOnlyCurrentRoom && this.isCurrentRoom) && this.drawMap(-1, -1, this.graphics);
      };
      MiniTile.prototype.drawMap = function(playerX, playerY, graphics) {
        if (!graphics) return;
        graphics.clear();
        var levelData = Logic_1.default.worldLoader.getCurrentLevelData();
        if (this.map.length < 1) return;
        var tileSize = this.node.width / levelData.roomWidth;
        var width = this.map.length;
        var height = this.map[0].length;
        var alpha = 200;
        for (var j = 0; j < height; j++) for (var i = 0; i < width; i++) {
          var mapDataStr = this.map[i][j];
          var floarDataStr = this.floormap[i][j];
          var isTriangle = false;
          graphics.fillColor = cc.color(33, 33, 33, alpha);
          if (this.isFirstEqual(mapDataStr, "#")) graphics.fillColor = cc.color(119, 136, 153, alpha); else if (this.isFirstEqual(mapDataStr, "J")) graphics.fillColor = cc.color(60, 179, 113, alpha); else if ("@S" == mapDataStr) graphics.fillColor = cc.color(60, 179, 113, alpha); else if (this.isFirstEqual(mapDataStr, "D")) {
            var dir = parseInt(mapDataStr[2]);
            var isLock = 1 == dir;
            graphics.fillColor = cc.color(240, 248, 255, alpha);
            isLock && (graphics.fillColor = cc.color(255, 69, 0, alpha));
            dir >= 2 && (graphics.fillColor = cc.color(33, 33, 33, alpha));
          } else this.isFirstEqual(mapDataStr, "E") ? graphics.fillColor = cc.color(0, 255, 0, alpha) : this.isFirstEqual(mapDataStr, "P") || (this.isFirstEqual(mapDataStr, "C") ? graphics.fillColor = cc.color(255, 215, 0, alpha) : this.isFirstEqual(mapDataStr, "z") ? this.sign.spriteFrame = Logic_1.default.spriteFrameRes("minimapboss") : this.isFirstEqual(floarDataStr, "*") ? graphics.fillColor = cc.color(33, 33, 33, alpha) : this.isFirstEqual(floarDataStr, "~") && (graphics.fillColor = cc.color(0, 128, 128, alpha)));
          if (!this.isFirstEqual(mapDataStr, "###") && !this.isFirstEqual(mapDataStr, "%%") && mapDataStr && mapDataStr.length > 0) if (isTriangle) {
            graphics.moveTo(i * tileSize - this.node.width / 2, j * tileSize - this.node.width / 2);
            graphics.lineTo(i * tileSize - this.node.width / 2 + tileSize, j * tileSize - this.node.width / 2);
            graphics.lineTo(i * tileSize - this.node.width / 2 + tileSize / 2, j * tileSize - this.node.width / 2 + tileSize);
            graphics.close();
            graphics.fill();
          } else graphics.fillRect(i * tileSize - this.node.width / 2, j * tileSize - this.node.width / 2, tileSize, tileSize);
        }
        if (this.isCurrentRoom) {
          graphics.strokeColor = cc.color(0, 255, 0, 255);
          graphics.lineWidth = 2;
          graphics.rect(playerX * tileSize - this.node.width / 2, playerY * tileSize - this.node.width / 2, tileSize, tileSize);
          graphics.stroke();
        }
      };
      MiniTile.prototype.updateMap = function(playerX, playerY) {
        this.drawMap(playerX, playerY, this.graphics);
      };
      MiniTile.prototype.getMapColor = function(roomType, roomTypeType, isClear, typeNormal, typeClear) {
        roomType.isEqual(roomTypeType) && (this.node.color = this.getColor(isClear ? typeClear : typeNormal));
      };
      MiniTile.prototype.getColor = function(t) {
        var color = new cc.Color(0, 0, 0);
        switch (t) {
         case MiniMap_1.default.ColorLevel.EMPTY:
         case MiniMap_1.default.ColorLevel.HIDE:
          color = new cc.Color(0, 0, 0);
          break;

         case MiniMap_1.default.ColorLevel.NORMAL:
          color = new cc.Color(128, 128, 128);
          break;

         case MiniMap_1.default.ColorLevel.CLEAR:
          color = new cc.Color(255, 255, 255);
          break;

         case MiniMap_1.default.ColorLevel.PLAYER:
          color = new cc.Color(0, 255, 0);
          break;

         case MiniMap_1.default.ColorLevel.NORMAL_START:
          color = new cc.Color(144, 238, 144);
          break;

         case MiniMap_1.default.ColorLevel.NORMAL_END:
          color = new cc.Color(100, 149, 237);
          break;

         case MiniMap_1.default.ColorLevel.NORMAL_BOSS:
          color = new cc.Color(128, 0, 128);
          break;

         case MiniMap_1.default.ColorLevel.NORMAL_LOOT:
         case MiniMap_1.default.ColorLevel.NORMAL_MERCHANT:
          color = new cc.Color(255, 215, 0);
          break;

         case MiniMap_1.default.ColorLevel.NORMAL_REST:
          color = new cc.Color(139, 69, 19);
          break;

         case MiniMap_1.default.ColorLevel.NORMAL_PREPARE:
          color = new cc.Color(255, 165, 0);
          break;

         case MiniMap_1.default.ColorLevel.NORMAL_TEST:
          color = new cc.Color(238, 130, 238);
          break;

         case MiniMap_1.default.ColorLevel.NORMAL_PUZZLE:
          color = new cc.Color(128, 0, 128);
          break;

         case MiniMap_1.default.ColorLevel.CLEAR_LOOT:
         case MiniMap_1.default.ColorLevel.CLEAR_MERCHANT:
          color = new cc.Color(240, 230, 140);
          break;

         case MiniMap_1.default.ColorLevel.CLEAR_BOSS:
          color = new cc.Color(75, 0, 130);
          break;

         case MiniMap_1.default.ColorLevel.CLEAR_END:
          color = new cc.Color(176, 196, 222);
          break;

         case MiniMap_1.default.ColorLevel.CLEAR_PUZZLE:
          color = new cc.Color(75, 0, 130);
        }
        return color;
      };
      MiniTile.prototype.getMixColor = function(color1, color2) {
        var c1 = color1.clone();
        var c2 = color2.clone();
        var c3 = cc.color();
        var r = c1.getR() + c2.getR();
        var g = c1.getG() + c2.getG();
        var b = c1.getB() + c2.getB();
        c3.setR(r > 255 ? 255 : r);
        c3.setG(g > 255 ? 255 : g);
        c3.setB(b > 255 ? 255 : b);
        return c3;
      };
      __decorate([ property(cc.Sprite) ], MiniTile.prototype, "deathSign", void 0);
      __decorate([ property(cc.Sprite) ], MiniTile.prototype, "sign", void 0);
      __decorate([ property(cc.Node) ], MiniTile.prototype, "bg", void 0);
      MiniTile = __decorate([ ccclass ], MiniTile);
      return MiniTile;
    }(cc.Component);
    exports.default = MiniTile;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "../rect/RectRoom": "RectRoom",
    "../rect/RoomType": "RoomType",
    "./MiniMap": "MiniMap"
  } ],
  MonsterGenerator: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b0bbeYGzEhP+4L1gNiAPnRb", "MonsterGenerator");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CCollider_1 = require("../collider/CCollider");
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var IndexZ_1 = require("../utils/IndexZ");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MonsterGenerator = function(_super) {
      __extends(MonsterGenerator, _super);
      function MonsterGenerator() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.canAdd = false;
        _this.addFinish = false;
        _this.count = 0;
        _this.addDelay = 2;
        _this.checkTimeDelay = 0;
        return _this;
      }
      MonsterGenerator.prototype.init = function(dungeon, generatorInterval, generatorCount, generatorList) {
        this.dungeon = dungeon;
        this.data.generatorCount = generatorCount;
        this.data.generatorInterval = generatorInterval;
        this.data.generatorList = generatorList;
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.entity.Transform.position.clone().add(cc.v3(0, 120)));
        var isReborn = Logic_1.default.mapManager.getCurrentRoom().isReborn;
        var data = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
        if (data) {
          this.data.triggerCount = data.triggerCount;
          isReborn && (this.data.triggerCount = 0);
        } else Logic_1.default.mapManager.setCurrentBuildingData(this.data.clone());
        this.anim = this.getComponent(cc.Animation);
        this.addFinish = this.data.triggerCount > 0;
      };
      MonsterGenerator.prototype.isTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > this.data.generatorInterval) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      MonsterGenerator.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.isTimeDelay(dt) && this.addMonster();
      };
      MonsterGenerator.prototype.addMonster = function() {
        if (this.count >= this.data.generatorCount) {
          this.addFinish = true;
          return false;
        }
        if (!this.canAdd) return false;
        return true;
      };
      MonsterGenerator.prototype.showMonster = function() {
        var pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position.clone());
        this.dungeon.monsterManager.addMonsterFromData(this.data.generatorList[Logic_1.default.getRandomNum(0, this.data.generatorList.length - 1)], pos, this.dungeon, true);
        this.count++;
      };
      MonsterGenerator.prototype.open = function() {
        var _this = this;
        if (this.data.triggerCount > 0) return false;
        this.data.triggerCount++;
        this.scheduleOnce(function() {
          _this.canAdd = true;
        }, this.addDelay);
        var savedata = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
        savedata ? savedata.triggerCount = this.data.triggerCount : Logic_1.default.mapManager.setCurrentBuildingData(this.data.clone());
        return true;
      };
      MonsterGenerator.prototype.onColliderEnter = function(other, self) {
        other.tag == CCollider_1.default.TAG.PLAYER_INTERACT && this.open();
      };
      MonsterGenerator = __decorate([ ccclass ], MonsterGenerator);
      return MonsterGenerator;
    }(Building_1.default);
    exports.default = MonsterGenerator;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  MonsterManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "441f6g4iH9M574s+sdv3n8E", "MonsterManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NonPlayer_1 = require("../logic/NonPlayer");
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var RoomType_1 = require("../rect/RoomType");
    var Boss_1 = require("../boss/Boss");
    var BaseManager_1 = require("./BaseManager");
    var GameHud_1 = require("../ui/GameHud");
    var MonsterRandomAttr_1 = require("./MonsterRandomAttr");
    var Random4Save_1 = require("../utils/Random4Save");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var LoadingManager_1 = require("./LoadingManager");
    var Utils_1 = require("../utils/Utils");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var ActorIconList_1 = require("../ui/ActorIconList");
    var MapManager_1 = require("./MapManager");
    var ActorIconView_1 = require("../ui/ActorIconView");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MonsterManager = function(_super) {
      __extends(MonsterManager, _super);
      function MonsterManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.monster = null;
        _this.kraken = null;
        _this.captain = null;
        _this.slime = null;
        _this.warmachine = null;
        _this.rah = null;
        _this.iceDemon = null;
        _this.evilEye = null;
        _this.dryad = null;
        _this.sphinx = null;
        _this.dragon = null;
        _this.actorIconList = null;
        _this.actorIconView = null;
        _this.maxHealth00 = 200;
        _this.maxHealth01 = 400;
        _this.maxHealth02 = 600;
        _this.maxHealth03 = 800;
        _this.maxHealth04 = 1e3;
        _this.maxHealth05 = 1200;
        _this.maxHealth06 = 1400;
        _this.maxHealth07 = 1600;
        _this.maxHealth08 = 1800;
        _this.maxHealth09 = 2e3;
        _this.monsters = new Array();
        _this.bosses = new Array();
        _this.isRoomInitWithEnemy = false;
        _this.loadingManager = new LoadingManager_1.default();
        _this.seed = 0;
        _this.monsterRandomAttr = new MonsterRandomAttr_1.default();
        return _this;
      }
      MonsterManager_1 = MonsterManager;
      Object.defineProperty(MonsterManager.prototype, "monsterList", {
        get: function() {
          return this.monsters;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MonsterManager.prototype, "bossList", {
        get: function() {
          return this.bosses;
        },
        enumerable: false,
        configurable: true
      });
      MonsterManager.prototype.clear = function() {
        for (var _i = 0, _a = this.monsters; _i < _a.length; _i++) {
          var m = _a[_i];
          m && m.isValid && m.destroyEntityNode();
        }
        for (var _b = 0, _c = this.bosses; _b < _c.length; _b++) {
          var b = _c[_b];
          b && b.isValid && b.destroyEntityNode();
        }
        this.monsters = new Array();
        this.bosses = new Array();
      };
      MonsterManager.prototype.addMonsterFromData = function(resName, indexPos, dungeon, isSummon) {
        var _this = this;
        this.getMonster(resName, dungeon, isSummon, function(nonplayer) {
          nonplayer = _this.addMonster(nonplayer, indexPos, null);
          if (nonplayer.data.childCount > 0 && nonplayer.data.childResName.length > 0) for (var i = 0; i < nonplayer.data.childCount; i++) _this.getMonster(nonplayer.data.childResName, dungeon, isSummon, function(childPlayer) {
            nonplayer.childNonPlayerList.push(_this.addMonster(childPlayer, indexPos, nonplayer));
          });
        });
      };
      MonsterManager.prototype.addMonstersAndBossFromMap = function(dungeon, mapDataStr, indexPos) {
        if (Dungeon_1.default.isFirstEqual(mapDataStr, "m")) {
          this.addMonsterFromData("monster" + mapDataStr.substring(1), indexPos, dungeon, false);
          return;
        }
        if (Utils_1.default.isFirstEqual(mapDataStr, "z")) {
          Logic_1.default.lastBgmIndex = 2;
          AudioPlayer_1.default.stopAllEffect();
          AudioPlayer_1.default.play(AudioPlayer_1.default.PLAY_BG, true);
        }
        if ("z0" == mapDataStr) this.addBoss(this.iceDemon, "iconboss000", this.maxHealth00, 0, 2, indexPos, dungeon); else if ("z1" == mapDataStr) this.addBoss(this.warmachine, "iconboss001", this.maxHealth01, 2, 3.5, indexPos, dungeon); else if ("z2" == mapDataStr) this.addBoss(this.captain, "iconboss002", this.maxHealth02, 2, 0, indexPos, dungeon); else if ("z3" == mapDataStr) {
          dungeon.shakeForKraken();
          this.addBoss(this.kraken, "iconboss003", this.maxHealth03, 2, 3.5, indexPos, dungeon);
        } else "z4" == mapDataStr ? this.addBossSlime(0, indexPos, dungeon) : "z5" == mapDataStr ? this.addBoss(this.dryad, "iconboss005", this.maxHealth05, 2, 2, indexPos, dungeon) : "z6" == mapDataStr ? this.addBoss(this.rah, "iconboss006", this.maxHealth06, 2, 2, indexPos, dungeon) : "z7" == mapDataStr ? this.addBoss(this.sphinx, "iconboss007", this.maxHealth07, 2, 2, indexPos, dungeon) : "z8" == mapDataStr ? this.addBoss(this.evilEye, "iconboss008", this.maxHealth08, 2, 2, indexPos, dungeon) : "z9" == mapDataStr && this.addBoss(this.dragon, "iconboss009", this.maxHealth09, 5, 2, indexPos, dungeon);
      };
      MonsterManager.prototype.getRandomMonsterSeed = function() {
        return Logic_1.default.mapManager.getCurrentRoom().seed + this.seed++;
      };
      MonsterManager.prototype.getMonster = function(resName, dungeon, isSummon, callBack) {
        var _this = this;
        LoadingManager_1.default.loadNpcSpriteAtlas(resName, function(status) {
          if (status == LoadingManager_1.default.LOAD_FAIL) return;
          var monsterPrefab = null;
          monsterPrefab = cc.instantiate(_this.monster);
          monsterPrefab.active = false;
          monsterPrefab.parent = dungeon.node;
          var monster = monsterPrefab.getComponent(NonPlayer_1.default);
          var data = new NonPlayerData_1.default();
          monster.seed = _this.getRandomMonsterSeed();
          monster.killPlayerCount = Logic_1.default.getKillPlayerCount(monster.seed);
          var rand4save = Logic_1.default.mapManager.getRandom4Save(monster.seed, MapManager_1.default.RANDOM_NONPLAYER);
          monster.dungeon = dungeon;
          data.valueCopy(Logic_1.default.monsters[resName]);
          var reborn = Logic_1.default.mapManager.getCurrentRoom().reborn;
          data.reborn = reborn || 0;
          monster.isSummon = isSummon;
          if (rand4save.rand() < .1 + monster.killPlayerCount / 10) {
            _this.monsterRandomAttr.addRandomAttrs(2, rand4save);
            data = _this.monsterRandomAttr.updateMonsterData(data);
            monster.attrmap = _this.monsterRandomAttr.attrmap;
          }
          var variationRate = 5 + 2 * monster.killPlayerCount;
          var up = 0;
          Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.DANGER_ROOM) && (up = 10);
          Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.INSANE_ROOM) && (up = 30);
          variationRate = variationRate + 2 * Logic_1.default.chapterIndex + 2 * Logic_1.default.level + up;
          monster.isVariation = rand4save.getRandomNum(0, 100) < variationRate && data.isTest < 1;
          if (monster.isVariation) {
            data.Common.maxHealth = 2 * data.Common.maxHealth;
            data.Common.maxDream = 2 * data.Common.maxDream;
            data.Common.damageMin = 2 * data.Common.damageMin;
            data.currentHealth = data.Common.maxHealth;
            data.melee > 0 && (data.melee = data.melee > 1 ? data.melee - 1 : 1);
            data.remote > 0 && (data.remote = data.remote > 1 ? data.remote - 1 : 1);
            data.dash > 0 && (data.dash = data.dash > 1 ? data.dash - 1 : 1);
            data.Common.moveSpeed = data.Common.moveSpeed > 0 ? data.Common.moveSpeed + .5 + .1 * monster.killPlayerCount : 0;
          }
          data.Common.maxDream += .25 * data.Common.maxDream * monster.killPlayerCount;
          data.Common.damageMin += .25 * data.Common.damageMin * monster.killPlayerCount;
          data.Common.maxHealth += .25 * data.Common.maxHealth * monster.killPlayerCount;
          data.Common.attackSpeed += 10 * monster.killPlayerCount;
          data.Common.defence += monster.killPlayerCount;
          data.currentHealth = data.Common.maxHealth;
          data.melee - monster.killPlayerCount > 1 && (data.melee -= monster.killPlayerCount);
          data.remote - monster.killPlayerCount > 1 && (data.remote -= monster.killPlayerCount);
          data.dash - monster.killPlayerCount > 1 && (data.dash -= monster.killPlayerCount);
          var rand = rand4save.getRandomNum(0, 100);
          var df = rand4save.getRandomNum(80, 100);
          var er = rand4save.getRandomNum(80, 100);
          var isAddElement = rand <= 5 + 3 * monster.killPlayerCount;
          rand = rand4save.getRandomNum(0, 4);
          if (isAddElement) {
            data.Common.magicDamage += 1;
            data.Common.magicDefenceRate = data.Common.magicDefenceRate + df > 100 ? 100 : data.Common.magicDefenceRate + df;
            switch (rand) {
             case 0:
              data.Common.iceRate = data.Common.iceRate + er > 100 ? 100 : data.Common.iceRate + er;
              data.bodyColor = "#CCFFFF";
              break;

             case 1:
              data.Common.fireRate = data.Common.fireRate + er > 100 ? 100 : data.Common.fireRate + er;
              data.bodyColor = "#FF6633";
              break;

             case 2:
              data.Common.lighteningRate = data.Common.lighteningRate + er > 100 ? 100 : data.Common.lighteningRate + er;
              data.bodyColor = "#0099FF";
              break;

             case 3:
              data.Common.toxicRate = data.Common.toxicRate + er > 100 ? 100 : data.Common.toxicRate + er;
              data.bodyColor = "#66CC00";
              break;

             case 4:
              data.Common.curseRate = data.Common.curseRate + er > 100 ? 100 : data.Common.curseRate + er;
              data.bodyColor = "#660099";
            }
          }
          data.isEnemy = 1;
          monster.data = data;
          monster.sc.isDisguising = data.disguise > 0;
          monster.sc.isDisguising ? monster.changeBodyRes(data.resName, NonPlayer_1.default.RES_DISGUISE) : monster.changeBodyRes(resName, NonPlayer_1.default.RES_IDLE000);
          monster.addAttrIcon();
          monster.icon = _this.actorIconView.getIcon(data.resName);
          callBack(monster);
        });
      };
      MonsterManager.prototype.addMonster = function(monster, pos, parent) {
        monster.node.active = true;
        monster.pos = pos;
        monster.defautPos = pos;
        monster.lastWaterPos = pos;
        monster.updatePlayerPos();
        monster.parentNonPlayer = parent;
        this.isRoomInitWithEnemy = monster.data.isTest < 1;
        this.monsterList.push(monster);
        return monster;
      };
      MonsterManager.prototype.addBossSlime = function(type, index, dungeon) {
        if (!this.bosses) return;
        this.isRoomInitWithEnemy = true;
        this.bosses.push(this.getSlime(dungeon, index.clone(), type));
      };
      MonsterManager.prototype.addBoss = function(prefabAsset, resName, maxHealth, attackPoint, delayTime, indexPos, dungeon) {
        var prefab = cc.instantiate(prefabAsset);
        prefab.active = false;
        prefab.parent = dungeon.node;
        var boss = prefab.getComponent(Boss_1.default);
        boss.initCollider();
        boss.dungeon = dungeon;
        var data = new NonPlayerData_1.default();
        data.resName = resName;
        data.updateHA(maxHealth, maxHealth, attackPoint);
        boss.data = data;
        boss.defaultPos = indexPos.clone();
        boss.transportBoss(indexPos.x, indexPos.y);
        boss.healthBar = this.node.parent.getComponentInChildren(GameHud_1.default).bossHealthBar;
        boss.node.active = true;
        this.bosses.push(boss);
        this.isRoomInitWithEnemy = true;
        this.scheduleOnce(function() {
          boss.showBoss();
        }, delayTime);
      };
      MonsterManager.prototype.getSlime = function(dungeon, posIndex, type) {
        var prefab = null;
        prefab = cc.instantiate(this.slime);
        prefab.active = false;
        prefab.parent = dungeon.node;
        var slime = prefab.getComponent(Boss_1.default);
        slime.initCollider();
        slime.dungeon = dungeon;
        var data = new NonPlayerData_1.default();
        data.resName = "iconboss004";
        data.Common.moveSpeed = 2;
        switch (type) {
         case 0:
          data.updateHA(this.maxHealth04, this.maxHealth04, 9);
          break;

         case 1:
          data.updateHA(200, 200, 7);
          break;

         case 2:
          data.updateHA(100, 100, 7);
          break;

         case 3:
          data.updateHA(50, 50, 5);
          break;

         case 4:
          data.updateHA(25, 25, 3);
          break;

         case 5:
          data.updateHA(10, 10, 2);
          break;

         default:
          data.updateHA(5, 5, 1);
        }
        slime.data = data;
        slime.init(type);
        slime.transportBoss(posIndex.x, posIndex.y);
        slime.healthBar = this.node.parent.getComponentInChildren(GameHud_1.default).bossHealthBar;
        slime.node.active = true;
        this.bosses.push(slime);
        return slime;
      };
      MonsterManager.prototype.addRandomMonsters = function(dungeon, reborn) {
        var arr = new Array();
        var rand4save = new Random4Save_1.default(Logic_1.default.mapManager.getCurrentRoom().seed);
        var num = rand4save.getRandomNum(1, 3);
        var up = 0;
        Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.DANGER_ROOM) && (up = 2);
        Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.INSANE_ROOM) && (up = 5);
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          arr = MonsterManager_1.MONSTERS_LAB;
          num = rand4save.getRandomNum(3, 6);
          break;

         case Logic_1.default.CHAPTER01:
          arr = MonsterManager_1.MONSTERS_SHIP;
          num = rand4save.getRandomNum(3, 7);
          break;

         case Logic_1.default.CHAPTER02:
          arr = MonsterManager_1.MONSTERS_FOREST;
          num = rand4save.getRandomNum(4, 8);
          break;

         case Logic_1.default.CHAPTER03:
          arr = MonsterManager_1.MONSTERS_PYRAMID;
          num = rand4save.getRandomNum(4, 9);
          break;

         case Logic_1.default.CHAPTER04:
          arr = MonsterManager_1.MONSTERS_DUNGEON;
          num = rand4save.getRandomNum(5, 10);
          break;

         case Logic_1.default.CHAPTER05:
          arr = MonsterManager_1.MONSTERS_DUNGEON;
          num = rand4save.getRandomNum(5, 11);
          break;

         case Logic_1.default.CHAPTER099:
          arr = MonsterManager_1.MONSTERS_LAB;
          num = rand4save.getRandomNum(3, 6);
        }
        (Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.VERTICAL_ROOM) || Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.HORIZONTAL_ROOM)) && (num = Math.floor(num / 2));
        var indexmap = [];
        var waterindexmap = [];
        for (var i = 0; i < dungeon.floorIndexMap.length; i++) {
          var pos = dungeon.floorIndexMap[i];
          dungeon.buildingManager.emptyMap.has("x=" + pos.x + "y=" + pos.y) && indexmap.push(pos);
        }
        for (var i = 0; i < dungeon.waterIndexMap.length; i++) {
          var pos = dungeon.waterIndexMap[i];
          dungeon.buildingManager.emptyMap.has("x=" + pos.x + "y=" + pos.y) && waterindexmap.push(pos);
        }
        var groundmonstercount = 0;
        for (var i = 0; i <= num + up; i++) {
          if (indexmap.length < 1) continue;
          var randindex = rand4save.getRandomNum(0, indexmap.length - 1);
          var pos = indexmap[randindex];
          indexmap.splice(randindex, 1);
          groundmonstercount++;
          this.addMonsterFromData(arr[rand4save.getRandomNum(0, arr.length - 1)], cc.v3(pos.x, pos.y), dungeon, false);
        }
        for (var i = 0; i <= num + up - groundmonstercount; i++) {
          if (waterindexmap.length < 1) continue;
          var randindex = rand4save.getRandomNum(0, waterindexmap.length - 1);
          var pos = waterindexmap[randindex];
          waterindexmap.splice(randindex, 1);
          this.addMonsterFromData(MonsterManager_1.MONSTER_FISH, cc.v3(pos.x, pos.y), dungeon, false);
        }
      };
      MonsterManager.prototype.updateLogic = function(dt) {
        for (var i = this.monsters.length - 1; i >= 0; i--) {
          var monster = this.monsters[i];
          monster && monster.node ? monster.node.active && monster.updateLogic(dt) : this.monsters.splice(i, 1);
        }
        for (var i = this.bosses.length - 1; i >= 0; i--) {
          var boss = this.bosses[i];
          boss && boss.node ? boss.node.active && boss.updateLogic(dt) : this.bosses.splice(i, 1);
        }
      };
      var MonsterManager_1;
      MonsterManager.BOSS_KRAKEN = "BOSS_KRAKEN";
      MonsterManager.MONSTER_SLIME = "monster000";
      MonsterManager.MONSTER_GOBLIN = "monster001";
      MonsterManager.MONSTER_MUMMY = "monster002";
      MonsterManager.MONSTER_ANUBIS = "monster003";
      MonsterManager.MONSTER_PIRATE = "monster004";
      MonsterManager.MONSTER_SAILOR = "monster005";
      MonsterManager.MONSTER_OCTOPUS = "monster006";
      MonsterManager.MONSTER_KILLER = "monster007";
      MonsterManager.MONSTER_STRONGSAILOR = "monster008";
      MonsterManager.MONSTER_CHEST = "monster009";
      MonsterManager.MONSTER_GARGOYLE = "monster010";
      MonsterManager.MONSTER_CHICKEN = "monster011";
      MonsterManager.MONSTER_SCARAB = "monster012";
      MonsterManager.MONSTER_GOBLIN_ARCHER = "monster013";
      MonsterManager.MONSTER_TERRORDRONE = "monster014";
      MonsterManager.MONSTER_WEREWOLF = "monster015";
      MonsterManager.MONSTER_DUMMY = "monster016";
      MonsterManager.MONSTER_ZEBRA = "monster017";
      MonsterManager.MONSTER_GIRAFFE = "monster018";
      MonsterManager.MONSTER_ZOOMBIE = "monster019";
      MonsterManager.MONSTER_ELECTRICEYE = "monster020";
      MonsterManager.MONSTER_FISHMAN = "monster021";
      MonsterManager.MONSTER_CROCODILE = "monster022";
      MonsterManager.MONSTER_SNAKE = "monster023";
      MonsterManager.MONSTER_DEMON = "monster024";
      MonsterManager.MONSTER_WARLOCK = "monster025";
      MonsterManager.MONSTER_SPIDER = "monster026";
      MonsterManager.MONSTER_BOOMER = "monster027";
      MonsterManager.MONSTER_SANDSTATUE = "monster028";
      MonsterManager.MONSTER_HIPPO = "monster029";
      MonsterManager.MONSTER_CYCLOPS = "monster030";
      MonsterManager.MONSTER_ICEDEMON = "monster031";
      MonsterManager.MONSTER_BITE_ZOMBIE = "monster032";
      MonsterManager.MONSTER_BANANA = "monster033";
      MonsterManager.MONSTER_HOLO_DEVICE = "monster034";
      MonsterManager.MONSTER_HOLO = "monster035";
      MonsterManager.MONSTER_LASRERDRONE = "monster036";
      MonsterManager.MONSTER_GHOST = "monster037";
      MonsterManager.MONSTER_FISH = "monster038";
      MonsterManager.MONSTER_MICE = "monster039";
      MonsterManager.MONSTERS_LAB = [ MonsterManager_1.MONSTER_ZEBRA, MonsterManager_1.MONSTER_TERRORDRONE, MonsterManager_1.MONSTER_KILLER, MonsterManager_1.MONSTER_ZOOMBIE, MonsterManager_1.MONSTER_ELECTRICEYE, MonsterManager_1.MONSTER_GIRAFFE, MonsterManager_1.MONSTER_ICEDEMON, MonsterManager_1.MONSTER_BITE_ZOMBIE, MonsterManager_1.MONSTER_HOLO_DEVICE, MonsterManager_1.MONSTER_LASRERDRONE ];
      MonsterManager.MONSTERS_SHIP = [ MonsterManager_1.MONSTER_PIRATE, MonsterManager_1.MONSTER_SAILOR, MonsterManager_1.MONSTER_OCTOPUS, MonsterManager_1.MONSTER_STRONGSAILOR, MonsterManager_1.MONSTER_FISHMAN, MonsterManager_1.MONSTER_BOOMER, MonsterManager_1.MONSTER_GHOST ];
      MonsterManager.MONSTERS_FOREST = [ MonsterManager_1.MONSTER_SLIME, MonsterManager_1.MONSTER_GOBLIN, MonsterManager_1.MONSTER_GOBLIN_ARCHER, MonsterManager_1.MONSTER_WEREWOLF, MonsterManager_1.MONSTER_SNAKE, MonsterManager_1.MONSTER_CHICKEN, MonsterManager_1.MONSTER_HIPPO, MonsterManager_1.MONSTER_BANANA ];
      MonsterManager.MONSTERS_PYRAMID = [ MonsterManager_1.MONSTER_MUMMY, MonsterManager_1.MONSTER_ANUBIS, MonsterManager_1.MONSTER_SCARAB, MonsterManager_1.MONSTER_CROCODILE, MonsterManager_1.MONSTER_SANDSTATUE ];
      MonsterManager.MONSTERS_DUNGEON = [ MonsterManager_1.MONSTER_GARGOYLE, MonsterManager_1.MONSTER_WARLOCK, MonsterManager_1.MONSTER_DEMON, MonsterManager_1.MONSTER_CYCLOPS, MonsterManager_1.MONSTER_SPIDER, MonsterManager_1.MONSTER_CYCLOPS ];
      MonsterManager.MONSTERS_SPECIAL = [ MonsterManager_1.MONSTER_DUMMY, MonsterManager_1.MONSTER_CHEST, MonsterManager_1.MONSTER_FISH, MonsterManager_1.MONSTER_MICE ];
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "monster", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "kraken", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "captain", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "slime", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "warmachine", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "rah", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "iceDemon", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "evilEye", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "dryad", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "sphinx", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "dragon", void 0);
      __decorate([ property(ActorIconList_1.default) ], MonsterManager.prototype, "actorIconList", void 0);
      __decorate([ property(ActorIconView_1.default) ], MonsterManager.prototype, "actorIconView", void 0);
      MonsterManager = MonsterManager_1 = __decorate([ ccclass ], MonsterManager);
      return MonsterManager;
    }(BaseManager_1.default);
    exports.default = MonsterManager;
    cc._RF.pop();
  }, {
    "../boss/Boss": "Boss",
    "../data/NonPlayerData": "NonPlayerData",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/NonPlayer": "NonPlayer",
    "../rect/RoomType": "RoomType",
    "../ui/ActorIconList": "ActorIconList",
    "../ui/ActorIconView": "ActorIconView",
    "../ui/GameHud": "GameHud",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Random4Save": "Random4Save",
    "../utils/Utils": "Utils",
    "./BaseManager": "BaseManager",
    "./LoadingManager": "LoadingManager",
    "./MapManager": "MapManager",
    "./MonsterRandomAttr": "MonsterRandomAttr"
  } ],
  MonsterRandomAttr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9949f1Fu8NGLLz3ZQCj49YJ", "MonsterRandomAttr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MonsterRandomAttr = function() {
      function MonsterRandomAttr() {
        this.attrmap = {};
        this.attrmap = {};
      }
      MonsterRandomAttr.prototype.hasAttr = function(str) {
        return this.attrmap[str] && this.attrmap[str] > 0;
      };
      MonsterRandomAttr.prototype.addAttr = function(num) {
        var s = num > 9 ? "" + num : "0" + num;
        this.attrmap["attr_" + s] = 1;
      };
      MonsterRandomAttr.prototype.removeAttr = function(num) {
        var s = num > 9 ? "" + num : "0" + num;
        this.attrmap["attr_" + s] = 0;
      };
      MonsterRandomAttr.prototype.addRandomAttrs = function(count, rand4save) {
        this.attrmap = {};
        for (var i = 0; i < count; i++) this.addAttr(rand4save.getRandomNum(1, 23));
      };
      MonsterRandomAttr.prototype.updateMonsterData = function(data) {
        if (data.isTest > 0) return data;
        if (this.hasAttr(MonsterRandomAttr.ATTR_01)) {
          data.Common.maxHealth = 1;
          data.currentHealth = 1;
          data.Common.defence += 50;
        }
        this.hasAttr(MonsterRandomAttr.ATTR_02) && (data.Common.damageMin += 10);
        if (this.hasAttr(MonsterRandomAttr.ATTR_03)) {
          data.Common.maxHealth += 50;
          data.currentHealth += 50;
        }
        this.hasAttr(MonsterRandomAttr.ATTR_04) && (data.Common.damageMin = 1);
        if (this.hasAttr(MonsterRandomAttr.ATTR_05)) {
          data.Common.moveSpeed -= 1;
          data.Common.moveSpeed < 0 && (data.Common.moveSpeed = .5);
        }
        this.hasAttr(MonsterRandomAttr.ATTR_06) && (data.Common.moveSpeed += 1);
        this.hasAttr(MonsterRandomAttr.ATTR_07) && data.melee > 0 && (data.melee += 2);
        this.hasAttr(MonsterRandomAttr.ATTR_08) && data.melee > 0 && (data.melee = 1);
        this.hasAttr(MonsterRandomAttr.ATTR_09) && data.remote > 0 && data.isLineAim <= 0 && data.isArcAim <= 0 && (data.remote = 1);
        this.hasAttr(MonsterRandomAttr.ATTR_10) && data.remote > 0 && (data.remote += 2);
        this.hasAttr(MonsterRandomAttr.ATTR_11) && data.remote > 0 && (data.bulletLineExNum += 1);
        this.hasAttr(MonsterRandomAttr.ATTR_12) && data.remote > 0 && (data.bulletExSpeed = -1);
        this.hasAttr(MonsterRandomAttr.ATTR_13) && data.remote > 0 && (data.bulletExSpeed = 1);
        if (this.hasAttr(MonsterRandomAttr.ATTR_14)) {
          data.Common.dodgeRate += 50;
          data.Common.dodgeRate > 60 && (data.Common.dodgeRate = 60);
        }
        this.hasAttr(MonsterRandomAttr.ATTR_15) && (data.Common.damageBack = 15);
        this.hasAttr(MonsterRandomAttr.ATTR_16) && (data.blink > 0 ? data.blink = 2 : data.blink = 5);
        if (this.hasAttr(MonsterRandomAttr.ATTR_17)) {
          data.Common.magicDamage += 1;
          data.Common.iceRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_18)) {
          data.Common.magicDamage += 1;
          data.Common.fireRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_19)) {
          data.Common.magicDamage += 1;
          data.Common.lighteningRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_20)) {
          data.Common.magicDamage += 1;
          data.Common.toxicRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_21)) {
          data.Common.magicDamage += 1;
          data.Common.curseRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_22)) {
          data.Common.realDamage += 1;
          data.Common.realRate = 100;
        }
        this.hasAttr(MonsterRandomAttr.ATTR_23) && (data.isBoom = 1);
        return data;
      };
      MonsterRandomAttr.ATTR_01 = "attr_01";
      MonsterRandomAttr.ATTR_02 = "attr_02";
      MonsterRandomAttr.ATTR_03 = "attr_03";
      MonsterRandomAttr.ATTR_04 = "attr_04";
      MonsterRandomAttr.ATTR_05 = "attr_05";
      MonsterRandomAttr.ATTR_06 = "attr_06";
      MonsterRandomAttr.ATTR_07 = "attr_07";
      MonsterRandomAttr.ATTR_08 = "attr_08";
      MonsterRandomAttr.ATTR_09 = "attr_09";
      MonsterRandomAttr.ATTR_10 = "attr_10";
      MonsterRandomAttr.ATTR_11 = "attr_11";
      MonsterRandomAttr.ATTR_12 = "attr_12";
      MonsterRandomAttr.ATTR_13 = "attr_13";
      MonsterRandomAttr.ATTR_14 = "attr_14";
      MonsterRandomAttr.ATTR_15 = "attr_15";
      MonsterRandomAttr.ATTR_16 = "attr_16";
      MonsterRandomAttr.ATTR_17 = "attr_17";
      MonsterRandomAttr.ATTR_18 = "attr_18";
      MonsterRandomAttr.ATTR_19 = "attr_19";
      MonsterRandomAttr.ATTR_20 = "attr_20";
      MonsterRandomAttr.ATTR_21 = "attr_21";
      MonsterRandomAttr.ATTR_22 = "attr_22";
      MonsterRandomAttr.ATTR_23 = "attr_23";
      return MonsterRandomAttr;
    }();
    exports.default = MonsterRandomAttr;
    cc._RF.pop();
  }, {} ],
  MoveComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e49028tZFJAEpXgxWdi6l8e", "MoveComponent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MoveComponent = void 0;
    var ECS_1 = require("../ECS");
    var MoveComponent = function(_super) {
      __extends(MoveComponent, _super);
      function MoveComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.linearVelocity = cc.Vec2.ZERO;
        _this.damping = 0;
        _this.acceleration = 0;
        _this.gravity = MoveComponent_1.DEFAULT_GRAVITY;
        _this.linearVelocityZ = 0;
        _this.isStatic = false;
        return _this;
      }
      MoveComponent_1 = MoveComponent;
      MoveComponent.prototype.reset = function() {
        this.linearVelocity = cc.Vec2.ZERO;
        this.damping = 0;
        this.linearVelocityZ = 0;
      };
      var MoveComponent_1;
      MoveComponent.PIXELS_PER_UNIT = 50;
      MoveComponent.DEFAULT_GRAVITY = MoveComponent_1.PIXELS_PER_UNIT;
      MoveComponent.MIN_LINEAR_VELOCITY_Z = -10 * MoveComponent_1.PIXELS_PER_UNIT * MoveComponent_1.DEFAULT_GRAVITY;
      MoveComponent = MoveComponent_1 = __decorate([ ECS_1.ecs.register("Move") ], MoveComponent);
      return MoveComponent;
    }(ECS_1.ecs.IComponent);
    exports.MoveComponent = MoveComponent;
    cc._RF.pop();
  }, {
    "../ECS": "ECS"
  } ],
  MoveSystem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0fa7ditzD9HI61HkRcz3YwC", "MoveSystem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("../component/MoveComponent");
    var TransformComponent_1 = require("../component/TransformComponent");
    var ECS_1 = require("../ECS");
    var MoveSystem = function(_super) {
      __extends(MoveSystem, _super);
      function MoveSystem() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      MoveSystem.prototype.filter = function() {
        return ECS_1.ecs.allOf(MoveComponent_1.MoveComponent, TransformComponent_1.TransformComponent);
      };
      MoveSystem.prototype.update = function(entities) {
        var dt = .016;
        for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {
          var e = entities_1[_i];
          var move = e.Move;
          if (move.isStatic || e.NodeRender.node && !e.NodeRender.node.active) continue;
          var transform = e.Transform;
          move.damping < 0 && (move.damping = 0);
          var temp = move.linearVelocity.mul(dt * MoveComponent_1.MoveComponent.PIXELS_PER_UNIT);
          var tp = cc.v3(transform.position.x + temp.x, transform.position.y + temp.y);
          transform.position = tp;
          var damping = move.damping * dt;
          if (move.linearVelocity.x > 0) {
            move.linearVelocity.x -= damping;
            move.linearVelocity.x < 0 && (move.linearVelocity.x = 0);
          } else if (move.linearVelocity.x < 0) {
            move.linearVelocity.x += damping;
            move.linearVelocity.x > 0 && (move.linearVelocity.x = 0);
          }
          if (move.linearVelocity.y > 0) {
            move.linearVelocity.y -= damping;
            move.linearVelocity.y < 0 && (move.linearVelocity.y = 0);
          } else if (move.linearVelocity.y < 0) {
            move.linearVelocity.y += damping;
            move.linearVelocity.y > 0 && (move.linearVelocity.y = 0);
          }
          var acceleration = move.acceleration * dt;
          move.linearVelocity.x += acceleration;
          move.linearVelocity.y += acceleration;
          e.NodeRender.node && e.NodeRender.node.setPosition(transform.position);
          transform.z += move.linearVelocityZ * dt * MoveComponent_1.MoveComponent.PIXELS_PER_UNIT;
          var gravity = move.gravity * dt;
          if (transform.z < transform.base) {
            transform.z = transform.base;
            move.linearVelocityZ = 0;
          } else transform.z > transform.base && (move.linearVelocityZ -= gravity);
          e.NodeRender.root && e.NodeRender.root.setPosition(cc.v3(0, transform.z));
        }
      };
      MoveSystem.prototype.lerpPos = function(self, to, ratio) {
        var out = cc.v2(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      MoveSystem.prototype.lerp = function(a, b, r) {
        return a + (b - a) * r;
      };
      return MoveSystem;
    }(ECS_1.ecs.ComblockSystem);
    exports.default = MoveSystem;
    cc._RF.pop();
  }, {
    "../ECS": "ECS",
    "../component/MoveComponent": "MoveComponent",
    "../component/TransformComponent": "TransformComponent"
  } ],
  MushRoomChild: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1cc30/RGadFmqTqY/1+mFMR", "MushRoomChild");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var CCollider_1 = require("../collider/CCollider");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MushroomChild = function(_super) {
      __extends(MushroomChild, _super);
      function MushroomChild() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isRotate = false;
        _this.isPlus = false;
        return _this;
      }
      MushroomChild.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.entity && this.entity.Move && (this.entity.Move.isStatic = true);
      };
      MushroomChild.prototype.onColliderEnter = function(other, self) {
        if (other.tag == CCollider_1.default.TAG.PLAYER) {
          this.isRotate = true;
          var ppos = other.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
          var mpos = this.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
          this.isPlus = ppos.x > mpos.x;
        }
      };
      MushroomChild.prototype.onColliderExit = function(other, self) {
        other.tag == CCollider_1.default.TAG.PLAYER && (this.isRotate = false);
      };
      MushroomChild.prototype.update = function(dt) {
        this.isRotate ? this.node.angle = Logic_1.default.lerp(this.node.angle, this.isPlus ? 15 : -15, 5 * dt) : this.node.angle = Logic_1.default.lerp(this.node.angle, 0, 5 * dt);
      };
      MushroomChild = __decorate([ ccclass ], MushroomChild);
      return MushroomChild;
    }(BaseColliderComponent_1.default);
    exports.default = MushroomChild;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../collider/CCollider": "CCollider",
    "../logic/Logic": "Logic"
  } ],
  NextStep: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "017cbligblAvaHFuvAAHvD9", "NextStep");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NextStep = function(_super) {
      __extends(NextStep, _super);
      function NextStep() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isExcuting = false;
        _this.storePoint = 1;
        _this.storePointMax = 1;
        _this.duration = 0;
        _this.isLooping = false;
        _this.excuteRest = false;
        _this.lastTime = 0;
        _this.intervalTime = .1;
        return _this;
      }
      NextStep.prototype.init = function(needCooling, storePointMax, storePoint, duration, lastTime, secondCallback, intervalTime) {
        this.secondCallback = secondCallback;
        this.storePointMax = storePointMax || 1;
        this.duration = duration && duration > 0 ? duration : 0;
        this.intervalTime = intervalTime && intervalTime > 0 ? intervalTime : this.intervalTime;
        this.storePointMax < 1 && (this.storePointMax = 1);
        this.storePoint = storePoint || 0 == storePoint ? storePoint : 1;
        this.storePoint <= 0 && (this.storePoint = 0);
        this.storePoint > this.storePointMax && (this.storePoint = this.storePointMax);
        needCooling ? this.storePoint = 0 : this.startLoop(lastTime);
      };
      NextStep.prototype.startLoop = function(lastTime) {
        var _this = this;
        if (this.isLooping) return;
        this.unscheduleAllCallbacks();
        this.isLooping = true;
        this.lastTime = lastTime || 0 == lastTime ? lastTime : Date.now();
        if (this.storePointMax == this.storePoint) {
          this._refreshCoolDown();
          this.secondCallback && this.secondCallback(this.lastTime);
          return;
        }
        var intervalTime = this.duration < this.intervalTime ? this.duration : this.intervalTime;
        this.schedule(function() {
          var currentTime = Date.now();
          if (currentTime - _this.lastTime > 1e3 * _this.duration) {
            _this.excuteRest && (_this.isExcuting = false);
            _this._refreshCoolDown();
          }
          _this.secondCallback && _this.secondCallback(_this.lastTime);
        }, intervalTime, cc.macro.REPEAT_FOREVER, intervalTime);
      };
      NextStep.prototype.next = function(callback, duration, excuteReset, secondCallback, intervalTime) {
        this.secondCallback = secondCallback;
        this.excuteRest = excuteReset;
        this.duration = duration;
        this.intervalTime = intervalTime && intervalTime > 0 ? intervalTime : this.intervalTime;
        if (0 == this.storePoint) {
          this.startLoop();
          return;
        }
        this.storePoint--;
        this.storePoint <= 0 && (this.storePoint = 0);
        this.startLoop();
        callback && callback();
      };
      NextStep.prototype.cutCoolDown = function(cutSecond) {
        cutSecond && this.isLooping && (this.lastTime += 1e3 * cutSecond);
        return this.lastTime;
      };
      NextStep.prototype.refreshCoolDown = function(duration) {
        this._refreshCoolDown();
        return this.cutCoolDown(duration);
      };
      NextStep.prototype._refreshCoolDown = function() {
        this.storePoint++;
        if (this.storePoint >= this.storePointMax) {
          this.lastTime = 0;
          this.storePoint = this.storePointMax;
          this.isLooping = false;
          this.unscheduleAllCallbacks();
        } else this.lastTime = Date.now();
      };
      Object.defineProperty(NextStep.prototype, "IsInCooling", {
        get: function() {
          return this.storePoint < this.StorePointMax;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NextStep.prototype, "IsExcuting", {
        get: function() {
          return this.isExcuting;
        },
        set: function(flag) {
          this.isExcuting = flag;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NextStep.prototype, "StorePoint", {
        get: function() {
          return this.storePoint;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NextStep.prototype, "LastTime", {
        get: function() {
          return this.lastTime;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NextStep.prototype, "StorePointMax", {
        get: function() {
          return this.storePointMax;
        },
        enumerable: false,
        configurable: true
      });
      return NextStep;
    }(cc.Component);
    exports.default = NextStep;
    cc._RF.pop();
  }, {} ],
  NodeEntity: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "478c8MR3JxFH7AHI9bUF5qI", "NodeEntity");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ECS_1 = require("../ECS");
    var NodeEntity = function(_super) {
      __extends(NodeEntity, _super);
      function NodeEntity() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return NodeEntity;
    }(ECS_1.ecs.Entity);
    exports.default = NodeEntity;
    cc._RF.pop();
  }, {
    "../ECS": "ECS"
  } ],
  NodeKey: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "61554+RantE/Yzl2Ewb7DHo", "NodeKey");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NodeKey = function() {
      function NodeKey(key, node) {
        this.key = key;
        this.node = node;
      }
      return NodeKey;
    }();
    exports.default = NodeKey;
    cc._RF.pop();
  }, {} ],
  NodeRenderComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7caa6sbwkpE5IS2EfvinvA9", "NodeRenderComponent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NodeRenderComponent = void 0;
    var ECS_1 = require("../ECS");
    var NodeRenderComponent = function(_super) {
      __extends(NodeRenderComponent, _super);
      function NodeRenderComponent() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      NodeRenderComponent.prototype.reset = function() {
        this.node = null;
        this.root = null;
      };
      NodeRenderComponent = __decorate([ ECS_1.ecs.register("NodeRender") ], NodeRenderComponent);
      return NodeRenderComponent;
    }(ECS_1.ecs.IComponent);
    exports.NodeRenderComponent = NodeRenderComponent;
    cc._RF.pop();
  }, {
    "../ECS": "ECS"
  } ],
  NonPlayerActorState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9492bjmskVBUqR8oiksJoFq", "NonPlayerActorState");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GLOBAL = exports.FALL = exports.BLINK = exports.DIZZ = exports.DODGE = exports.DASH = exports.DISGUISE = exports.BLOCK = exports.TALK = exports.HURT = exports.DIED = exports.SHOW = exports.PRPARE = exports.ATTACK = exports.WALK = exports.IDLE = void 0;
    var BaseNonPlayerActorState_1 = require("../base/BaseNonPlayerActorState");
    var Utils_1 = require("../utils/Utils");
    var IDLE = function(_super) {
      __extends(IDLE, _super);
      function IDLE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      IDLE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(IDLE):enter");
        entity.enterIdle();
      };
      IDLE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDashing ? entity.stateMachine.changeState(NonPlayerActorState.DASH) : entity.sc.isBlinking ? entity.stateMachine.changeState(NonPlayerActorState.BLINK) : entity.sc.isDodging ? entity.stateMachine.changeState(NonPlayerActorState.DODGE) : entity.sc.isAttacking ? entity.stateMachine.changeState(NonPlayerActorState.ATTACK) : entity.sc.isTalking ? entity.stateMachine.changeState(NonPlayerActorState.TALK) : entity.sc.isMoving && entity.stateMachine.changeState(NonPlayerActorState.WALK);
      };
      IDLE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(IDLE):exit");
      };
      IDLE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(IDLE):event");
        return true;
      };
      return IDLE;
    }(BaseNonPlayerActorState_1.default);
    exports.IDLE = IDLE;
    var WALK = function(_super) {
      __extends(WALK, _super);
      function WALK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      WALK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        entity.enterWalk();
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(WALK):enter");
      };
      WALK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isMoving ? entity.sc.isAttacking ? entity.stateMachine.changeState(NonPlayerActorState.ATTACK) : entity.sc.isDodging ? entity.stateMachine.changeState(NonPlayerActorState.DODGE) : entity.sc.isBlinking && entity.stateMachine.changeState(NonPlayerActorState.BLINK) : entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      WALK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(WALK):exit");
      };
      WALK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(WALK):event");
        return true;
      };
      return WALK;
    }(BaseNonPlayerActorState_1.default);
    exports.WALK = WALK;
    var ATTACK = function(_super) {
      __extends(ATTACK, _super);
      function ATTACK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ATTACK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(ATTACK):enter");
      };
      ATTACK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isAttacking || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      ATTACK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(ATTACK):exit");
      };
      ATTACK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(ATTACK):event");
        return true;
      };
      return ATTACK;
    }(BaseNonPlayerActorState_1.default);
    exports.ATTACK = ATTACK;
    var PRPARE = function(_super) {
      __extends(PRPARE, _super);
      function PRPARE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PRPARE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(PRPARE):enter");
      };
      PRPARE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDisguising ? entity.stateMachine.changeState(NonPlayerActorState.DISGUISE) : entity.stateMachine.changeState(NonPlayerActorState.SHOW);
      };
      PRPARE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(PRPARE):exit");
      };
      PRPARE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(PRPARE):event");
        return true;
      };
      return PRPARE;
    }(BaseNonPlayerActorState_1.default);
    exports.PRPARE = PRPARE;
    var SHOW = function(_super) {
      __extends(SHOW, _super);
      function SHOW() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      SHOW.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(SHOW):enter");
        entity.enterShow();
      };
      SHOW.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isShow && entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      SHOW.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(SHOW):exit");
      };
      SHOW.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(SHOW):event");
        return true;
      };
      return SHOW;
    }(BaseNonPlayerActorState_1.default);
    exports.SHOW = SHOW;
    var DIED = function(_super) {
      __extends(DIED, _super);
      function DIED() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DIED.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DIE):enter");
        entity.killed();
      };
      DIED.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
      };
      DIED.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DIE):exit");
      };
      DIED.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DIE):event");
        return true;
      };
      return DIED;
    }(BaseNonPlayerActorState_1.default);
    exports.DIED = DIED;
    var HURT = function(_super) {
      __extends(HURT, _super);
      function HURT() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      HURT.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(HURT):enter");
      };
      HURT.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isHurting ? entity.sc.isFalling ? entity.stateMachine.changeState(NonPlayerActorState.FALL) : entity.sc.isBlinking && entity.stateMachine.changeState(NonPlayerActorState.BLINK) : entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      HURT.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(HURT):exit");
      };
      HURT.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(TAKEDAMAGE):event");
        return true;
      };
      return HURT;
    }(BaseNonPlayerActorState_1.default);
    exports.HURT = HURT;
    var TALK = function(_super) {
      __extends(TALK, _super);
      function TALK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TALK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(TALK):enter");
      };
      TALK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isTalking || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      TALK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(TALK):exit");
      };
      TALK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(TALK):event");
        return true;
      };
      return TALK;
    }(BaseNonPlayerActorState_1.default);
    exports.TALK = TALK;
    var BLOCK = function(_super) {
      __extends(BLOCK, _super);
      function BLOCK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BLOCK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(BLOCK):enter");
      };
      BLOCK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
      };
      BLOCK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(BLOCK):exit");
      };
      BLOCK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(BLOCK):event");
        return true;
      };
      return BLOCK;
    }(BaseNonPlayerActorState_1.default);
    exports.BLOCK = BLOCK;
    var DISGUISE = function(_super) {
      __extends(DISGUISE, _super);
      function DISGUISE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DISGUISE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DISGUISE):enter");
        entity.enterDisguise();
      };
      DISGUISE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDisguising || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      DISGUISE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DISGUISE):exit");
      };
      DISGUISE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DISGUISE):event");
        return true;
      };
      return DISGUISE;
    }(BaseNonPlayerActorState_1.default);
    exports.DISGUISE = DISGUISE;
    var DASH = function(_super) {
      __extends(DASH, _super);
      function DASH() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DASH.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DASH):enter");
      };
      DASH.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDashing || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      DASH.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DASH):exit");
      };
      DASH.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DASH):event");
        return true;
      };
      return DASH;
    }(BaseNonPlayerActorState_1.default);
    exports.DASH = DASH;
    var DODGE = function(_super) {
      __extends(DODGE, _super);
      function DODGE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DODGE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DODGE):enter");
      };
      DODGE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDodging || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      DODGE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DODGE):exit");
      };
      DODGE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DODGE):event");
        return true;
      };
      return DODGE;
    }(BaseNonPlayerActorState_1.default);
    exports.DODGE = DODGE;
    var DIZZ = function(_super) {
      __extends(DIZZ, _super);
      function DIZZ() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DIZZ.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DIZZ):enter");
        entity.enterDizz();
      };
      DIZZ.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDizzing || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      DIZZ.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DIZZ):exit");
      };
      DIZZ.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(DIZZ):event");
        return true;
      };
      return DIZZ;
    }(BaseNonPlayerActorState_1.default);
    exports.DIZZ = DIZZ;
    var BLINK = function(_super) {
      __extends(BLINK, _super);
      function BLINK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BLINK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(BLINK):enter");
        entity.enterBlink();
      };
      BLINK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isBlinking || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      BLINK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(BLINK):exit");
      };
      BLINK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(BLINK):event");
        return true;
      };
      return BLINK;
    }(BaseNonPlayerActorState_1.default);
    exports.BLINK = BLINK;
    var FALL = function(_super) {
      __extends(FALL, _super);
      function FALL() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FALL.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(FALL):enter");
      };
      FALL.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isFalling || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      FALL.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(FALL):exit");
      };
      FALL.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(FALL):event");
        return true;
      };
      return FALL;
    }(BaseNonPlayerActorState_1.default);
    exports.FALL = FALL;
    var GLOBAL = function(_super) {
      __extends(GLOBAL, _super);
      function GLOBAL() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      GLOBAL.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(GLOBAL):enter");
      };
      GLOBAL.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        if (entity.sc.isDied) return;
        entity.data.currentHealth <= 0 ? entity.stateMachine.changeState(NonPlayerActorState.DIED) : !NonPlayerActorState.HURT.isRunnig && entity.sc.isHurting && entity.stateMachine.changeState(NonPlayerActorState.HURT);
      };
      GLOBAL.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(GLOBAL):exit");
      };
      GLOBAL.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log("" + entity.actorName() + entity.node.uuid + "(GLOBAL):event");
        return true;
      };
      return GLOBAL;
    }(BaseNonPlayerActorState_1.default);
    exports.GLOBAL = GLOBAL;
    var NonPlayerActorState = function() {
      function NonPlayerActorState() {}
      NonPlayerActorState.GLOBAL = new GLOBAL("GLOBAL");
      NonPlayerActorState.WALK = new WALK("WALK");
      NonPlayerActorState.ATTACK = new ATTACK("ATTACK");
      NonPlayerActorState.IDLE = new IDLE("IDLE");
      NonPlayerActorState.DISGUISE = new DISGUISE("DISGUISE");
      NonPlayerActorState.DIED = new DIED("DIED");
      NonPlayerActorState.DODGE = new DODGE("DODGE");
      NonPlayerActorState.HURT = new HURT("HURT");
      NonPlayerActorState.PRPARE = new PRPARE("PRPARE");
      NonPlayerActorState.SHOW = new SHOW("SHOW");
      NonPlayerActorState.BLINK = new BLINK("BLINK");
      NonPlayerActorState.FALL = new FALL("FALL");
      NonPlayerActorState.TALK = new TALK("TALK");
      NonPlayerActorState.DASH = new DASH("DASH");
      return NonPlayerActorState;
    }();
    exports.default = NonPlayerActorState;
    cc._RF.pop();
  }, {
    "../base/BaseNonPlayerActorState": "BaseNonPlayerActorState",
    "../utils/Utils": "Utils"
  } ],
  NonPlayerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e5e26RTCAFA6KSlJtwFy/GC", "NonPlayerData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("./DamageData");
    var StatusData_1 = require("./StatusData");
    var CommonData_1 = require("./CommonData");
    var DataUtils_1 = require("../utils/DataUtils");
    var AvatarData_1 = require("./AvatarData");
    var NonPlayerData = function() {
      function NonPlayerData() {
        this.nameCn = "";
        this.nameEn = "";
        this.resName = "";
        this.chapter = 0;
        this.stageLevel = 0;
        this.invisible = 0;
        this.remote = 0;
        this.melee = 0;
        this.dash = 0;
        this.meleeDash = 0;
        this.disguise = 0;
        this.scale = 0;
        this.bulletType = "";
        this.bulletArcExNum = 0;
        this.bulletLineExNum = 0;
        this.bulletLineInterval = 0;
        this.bulletExSpeed = 0;
        this.specialBulletArcExNum = 0;
        this.specialBulletLineExNum = 0;
        this.specialRemoteAngle = 0;
        this.isArcAim = 0;
        this.isLineAim = 0;
        this.blink = 0;
        this.isBoom = 0;
        this.isHeavy = 0;
        this.isStatic = 0;
        this.isRecovery = 0;
        this.shooterOffsetX = 0;
        this.shooterOffsetY = 0;
        this.specialAttack = 0;
        this.specialType = "";
        this.specialDistance = 0;
        this.specialDelay = 0;
        this.specialDash = 0;
        this.dashJump = 0;
        this.bodyColor = "#ffffff";
        this.pos = cc.v3(0, 0);
        this.currentHealth = 0;
        this.boxType = 0;
        this.attackType = 0;
        this.isEnemy = 0;
        this.isFollow = 0;
        this.lifeTime = 0;
        this.isTest = 0;
        this.reborn = 0;
        this.attackFrames = 2;
        this.specialFrames = 2;
        this.attackFrameKeyStart = 1;
        this.specialFrameKeyStart = 1;
        this.attackFrameKeyEnd = 2;
        this.specialFrameKeyEnd = 2;
        this.remoteAudio = "";
        this.specialAudio = "";
        this.isPet = 0;
        this.childResName = "";
        this.childMode = 0;
        this.childCount = 0;
        this.flee = 0;
        this.noLoot = 0;
        this.water = 0;
        this.fly = 0;
        this.bodyRect = "";
        this.attackRect = "";
        this.needUpdateFinalCommon = true;
        this.statusTotalData = new StatusData_1.default();
        this.common = new CommonData_1.default();
        this.statusList = new Array();
        this.avatar = new AvatarData_1.default();
        this.needUpdateFinalCommon = true;
      }
      Object.defineProperty(NonPlayerData.prototype, "StatusTotalData", {
        get: function() {
          return this.statusTotalData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NonPlayerData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      NonPlayerData.prototype.updateFinalCommon = function() {
        this.needUpdateFinalCommon = true;
      };
      Object.defineProperty(NonPlayerData.prototype, "FinalCommon", {
        get: function() {
          if (this.needUpdateFinalCommon) {
            this.needUpdateFinalCommon = false;
            this.finalCommon = new CommonData_1.default().add(this.common).add(this.statusTotalData.Common);
          }
          return this.finalCommon;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NonPlayerData.prototype, "StatusList", {
        get: function() {
          return this.statusList;
        },
        set: function(list) {
          if (!list) return;
          this.statusList = new Array();
          for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var s = list_1[_i];
            var data = new StatusData_1.default();
            data.valueCopy(s);
            this.statusList.push(data);
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NonPlayerData.prototype, "AvatarData", {
        get: function() {
          return this.avatar;
        },
        set: function(data) {
          this.avatar = data;
        },
        enumerable: false,
        configurable: true
      });
      NonPlayerData.prototype.updateHA = function(currentHealth, maxHealth, attackPoint) {
        this.currentHealth = currentHealth;
        this.common.maxHealth = maxHealth;
        this.common.damageMin = attackPoint;
      };
      NonPlayerData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        this.common.valueCopy(data.common);
        this.avatar.valueCopy(data.avatar);
        this.StatusList = data.statusList;
        this.pos = data.pos ? cc.v3(data.pos.x, data.pos.y) : cc.v3(0, 0);
        this.attackFrames = data.attackFrames ? data.attackFrames : 2;
        this.specialFrames = data.specialFrames ? data.specialFrames : 2;
        this.attackFrameKeyStart = data.attackFrameKeyStart ? data.attackFrameKeyStart : 1;
        this.specialFrameKeyStart = data.specialFrameKeyStart ? data.specialFrameKeyStart : 1;
        this.attackFrameKeyEnd = data.attackFrameKeyEnd ? data.attackFrameKeyEnd : 2;
        this.specialFrameKeyEnd = data.specialFrameKeyEnd ? data.specialFrameKeyEnd : 2;
        this.bodyColor = data.bodyColor ? data.bodyColor : "#ffffff";
        this.needUpdateFinalCommon = true;
        return this;
      };
      NonPlayerData.prototype.clone = function() {
        var e = new NonPlayerData();
        e.valueCopy(this);
        return e;
      };
      NonPlayerData.prototype.getAttackPoint = function() {
        var data = this.FinalCommon;
        var dd = new DamageData_1.default();
        dd.realDamage = data.RealDamage;
        dd.physicalDamage = data.DamageMin;
        dd.magicDamage = data.MagicDamage;
        dd.physicalDamage < 0 && (dd.physicalDamage = 0);
        return dd;
      };
      NonPlayerData.prototype.getDamage = function(damageData) {
        var data = this.FinalCommon;
        var finalDamageData = damageData.clone();
        var defence = data.Defence;
        var defecneMagic = data.magicDefenceRate;
        finalDamageData.physicalDamage = defence >= 0 ? finalDamageData.physicalDamage * (1 - .06 * defence / (.06 * defence + 1)) : finalDamageData.physicalDamage * (2 - Math.pow(.94, -defence));
        finalDamageData.magicDamage = finalDamageData.magicDamage * (1 - defecneMagic / 100);
        return finalDamageData;
      };
      NonPlayerData.prototype.getHealth = function() {
        var rate = 1;
        var data = this.FinalCommon;
        var maxHealth = data.MaxHealth;
        if (!(maxHealth > 0)) return cc.v3(1, 1);
        rate = this.currentHealth / maxHealth;
        return cc.v3(maxHealth * rate, maxHealth);
      };
      return NonPlayerData;
    }();
    exports.default = NonPlayerData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./AvatarData": "AvatarData",
    "./CommonData": "CommonData",
    "./DamageData": "DamageData",
    "./StatusData": "StatusData"
  } ],
  NonPlayerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2a4f27Fn0RPWppWDoGhOHT3", "NonPlayerManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var BaseManager_1 = require("./BaseManager");
    var Utils_1 = require("../utils/Utils");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var Achievement_1 = require("../logic/Achievement");
    var LoadingManager_1 = require("./LoadingManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NonPlayerManager = function(_super) {
      __extends(NonPlayerManager, _super);
      function NonPlayerManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nonplayer = null;
        _this.nonplayers = new Array();
        _this.timeDelay = 0;
        return _this;
      }
      Object.defineProperty(NonPlayerManager.prototype, "nonPlayerList", {
        get: function() {
          return this.nonplayers;
        },
        enumerable: false,
        configurable: true
      });
      NonPlayerManager.prototype.clear = function() {
        Utils_1.default.clearComponentArray(this.nonplayers);
      };
      NonPlayerManager.prototype.addNonPlayerListFromSave = function(dungeon, list, position, posZ) {
        var _this = this;
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
          var data = list_1[_i];
          (data.isPet || data.lifeTime > 0) && this.getNonPlayer(data, dungeon, function(npc) {
            _this.addNonPlayer(npc, position, posZ);
          });
        }
      };
      NonPlayerManager.prototype.addNonPlayerFromData = function(data, pos, posZ, dungeon) {
        var _this = this;
        Achievement_1.default.addNpcsAchievement(data.resName);
        this.getNonPlayer(data, dungeon, function(npc) {
          _this.addNonPlayer(npc, pos, posZ);
        });
      };
      NonPlayerManager.prototype.isPetAlive = function() {
        if (this.pet && this.pet.isValid && this.pet.node.active && this.pet.data.currentHealth > 0) return true;
        return false;
      };
      NonPlayerManager.prototype.addPetFromData = function(data, pos, posZ, dungeon) {
        var _this = this;
        var hasPetCount = 0;
        for (var _i = 0, _a = this.nonPlayerList; _i < _a.length; _i++) {
          var p = _a[_i];
          p.data.isPet > 0 && hasPetCount++;
        }
        if (this.isPetAlive()) return;
        Achievement_1.default.addNpcsAchievement(data.resName);
        this.getNonPlayer(data, dungeon, function(npc) {
          _this.addNonPlayer(npc, pos, posZ);
        });
      };
      NonPlayerManager.prototype.addNonPlayerFromMap = function(dungeon, mapDataStr, indexPos, posZ) {
        if (Dungeon_1.default.isFirstEqual(mapDataStr, "n")) {
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.default.nonplayers["nonplayer" + mapDataStr.substring(1)]);
          this.addNonPlayerFromData(data, Dungeon_1.default.getPosInMap(indexPos), posZ, dungeon);
        }
      };
      NonPlayerManager.prototype.getNonPlayer = function(nonPlayerData, dungeon, callback) {
        var _this = this;
        LoadingManager_1.default.loadNpcSpriteAtlas(nonPlayerData.resName, function() {
          var nonPlayerPrefab = null;
          nonPlayerPrefab = cc.instantiate(_this.nonplayer);
          nonPlayerPrefab.active = false;
          nonPlayerPrefab.parent = dungeon.node;
          var nonPlayer = nonPlayerPrefab.getComponent(NonPlayer_1.default);
          var data = new NonPlayerData_1.default();
          nonPlayer.dungeon = dungeon;
          data.valueCopy(Logic_1.default.nonplayers[nonPlayerData.resName]);
          data.valueCopy(nonPlayerData);
          data.isEnemy = 0;
          nonPlayer.data = data;
          nonPlayer.sc.isDisguising = data.disguise > 0;
          nonPlayer.sc.isDisguising ? nonPlayer.changeBodyRes(data.resName, NonPlayer_1.default.RES_DISGUISE) : nonPlayer.changeBodyRes(data.resName, NonPlayer_1.default.RES_IDLE000);
          callback(nonPlayer);
        });
      };
      NonPlayerManager.prototype.addNonPlayer = function(nonPlayer, pos, posZ) {
        nonPlayer.node.active = true;
        nonPlayer.pos = Dungeon_1.default.getIndexInMap(pos);
        nonPlayer.entity.Transform.position = pos;
        posZ && (nonPlayer.posZ = posZ);
        this.nonPlayerList.push(nonPlayer);
        nonPlayer.data.isPet > 0 && (this.pet = nonPlayer);
      };
      NonPlayerManager.prototype.updateLogic = function(dt) {
        Logic_1.default.nonPlayerList = [];
        for (var i = this.nonplayers.length - 1; i >= 0; i--) {
          var monster = this.nonPlayerList[i];
          if (monster && monster.node) {
            if (monster.node.active) {
              monster.updateLogic(dt);
              var data = monster.data.clone();
              monster.leftLifeTime > 0 && (data.lifeTime = monster.leftLifeTime);
              data.currentHealth > 0 && Logic_1.default.nonPlayerList.push(data);
            }
          } else this.nonplayers.splice(i, 1);
        }
      };
      NonPlayerManager.NON_SHADOW = "nonplayer001";
      NonPlayerManager.SHOP_KEEPER = "nonplayer002";
      NonPlayerManager.SHOP_MONKEY = "nonplayer003";
      NonPlayerManager.DOG = "nonplayer100";
      NonPlayerManager.CAT = "nonplayer101";
      NonPlayerManager.FISH = "nonplayer102";
      __decorate([ property(cc.Prefab) ], NonPlayerManager.prototype, "nonplayer", void 0);
      NonPlayerManager = __decorate([ ccclass ], NonPlayerManager);
      return NonPlayerManager;
    }(BaseManager_1.default);
    exports.default = NonPlayerManager;
    cc._RF.pop();
  }, {
    "../data/NonPlayerData": "NonPlayerData",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/NonPlayer": "NonPlayer",
    "../utils/Utils": "Utils",
    "./BaseManager": "BaseManager",
    "./LoadingManager": "LoadingManager"
  } ],
  NonPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b7513vXKLpHGrSf+utaohLs", "NonPlayer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EventHelper_1 = require("./EventHelper");
    var HealthBar_1 = require("./HealthBar");
    var Logic_1 = require("./Logic");
    var Dungeon_1 = require("./Dungeon");
    var Shooter_1 = require("./Shooter");
    var StatusManager_1 = require("../manager/StatusManager");
    var DamageData_1 = require("../data/DamageData");
    var Random_1 = require("../utils/Random");
    var NextStep_1 = require("../utils/NextStep");
    var Item_1 = require("../item/Item");
    var Achievement_1 = require("./Achievement");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var SpecialManager_1 = require("../manager/SpecialManager");
    var FromData_1 = require("../data/FromData");
    var IndexZ_1 = require("../utils/IndexZ");
    var AreaOfEffect_1 = require("../actor/AreaOfEffect");
    var AreaOfEffectData_1 = require("../data/AreaOfEffectData");
    var ActorAttackBox_1 = require("../actor/ActorAttackBox");
    var DefaultStateMachine_1 = require("../base/fsm/DefaultStateMachine");
    var NonPlayerActorState_1 = require("../actor/NonPlayerActorState");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var CCollider_1 = require("../collider/CCollider");
    var AreaDetector_1 = require("../actor/AreaDetector");
    var ActorBottomDir_1 = require("../actor/ActorBottomDir");
    var JumpingAbility_1 = require("../actor/JumpingAbility");
    var TriggerData_1 = require("../data/TriggerData");
    var PlayActor_1 = require("../base/PlayActor");
    var PlayerAvatar_1 = require("./PlayerAvatar");
    var BaseAvatar_1 = require("../base/BaseAvatar");
    var FrameAvatar_1 = require("./FrameAvatar");
    var Tips_1 = require("../ui/Tips");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var MapManager_1 = require("../manager/MapManager");
    var NonPlayer = function(_super) {
      __extends(NonPlayer, _super);
      function NonPlayer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.pos = cc.v3(0, 0);
        _this.defautPos = cc.v3(0, 0);
        _this.posZ = 0;
        _this.root = null;
        _this.shadow = null;
        _this.healthBar = null;
        _this.statusManager = null;
        _this.specialManager = null;
        _this.boom = null;
        _this.dangerBoxNode = null;
        _this.dangerBox = null;
        _this.dangerTips = null;
        _this.attrPrefab = null;
        _this.bottomDir = null;
        _this.waterSpark = null;
        _this.avatarPrefab = null;
        _this.frameAvatarPrefab = null;
        _this.tips = null;
        _this.isFaceRight = true;
        _this.shooter = null;
        _this.currentlinearVelocitySpeed = cc.Vec2.ZERO;
        _this.isVariation = false;
        _this.isSummon = false;
        _this.killPlayerCount = 0;
        _this.moveStep = new NextStep_1.default();
        _this.remoteStep = new NextStep_1.default();
        _this.meleeStep = new NextStep_1.default();
        _this.specialStep = new NextStep_1.default();
        _this.dashStep = new NextStep_1.default();
        _this.blinkStep = new NextStep_1.default();
        _this.trackStep = new NextStep_1.default();
        _this.swimmingAudioStep = new NextStep_1.default();
        _this.attrmap = {};
        _this.animStatus = NonPlayer_1.ANIM_NONE;
        _this.data = new NonPlayerData_1.default();
        _this.leftLifeTime = 0;
        _this.childNonPlayerList = [];
        _this.isInWaterTile = false;
        _this.lastWaterPos = cc.v3(0, 0);
        _this.attackRect = [];
        _this.bodyRect = [];
        _this.waterY = 0;
        _this.lastTimeInWater = false;
        _this.statusPos = cc.v3(0, 0);
        _this.hurtReset = function() {
          if (_this.node) {
            _this.fly();
            _this.hitLight(false);
            _this.resetBodyColor();
            if (_this.sc.isHurting) {
              _this.sc.isHurting = false;
              _this.anim.resume();
            }
          }
        };
        _this.stopMove = function() {
          _this.sc.isMoving = false;
        };
        _this.moveTimeDelay = 0;
        return _this;
      }
      NonPlayer_1 = NonPlayer;
      Object.defineProperty(NonPlayer.prototype, "IsVariation", {
        get: function() {
          return this.isVariation || this.data.StatusTotalData.variation > 0;
        },
        enumerable: false,
        configurable: true
      });
      NonPlayer.prototype.init = function() {
        var _this = this;
        this.triggerShooter = this.shooter;
        this.statusMgr = this.statusManager;
        this.jumpAbility = this.addComponent(JumpingAbility_1.default);
        this.jumpAbility.init(this, 1, 0, function(group, type) {
          TriggerData_1.default.TYPE_JUMP_END == type && (_this.sc.isMoving ? _this.playerAnim(BaseAvatar_1.default.STATE_WALK, _this.currentDir) : _this.playerAnim(BaseAvatar_1.default.STATE_IDLE, _this.currentDir));
          _this.exTrigger(group, type, null, null);
        });
        this.data.AvatarData.isAnimFrame ? this.frameAvatar = FrameAvatar_1.default.create(this.frameAvatarPrefab, this.root, Logic_1.default.playerData.AvatarData.clone(), this.data.resName) : this.avatar = PlayerAvatar_1.default.create(this.avatarPrefab, this.root, Logic_1.default.playerData.AvatarData.clone(), this.node.group);
      };
      Object.defineProperty(NonPlayer.prototype, "Root", {
        get: function() {
          return this.root;
        },
        enumerable: false,
        configurable: true
      });
      NonPlayer.prototype.updateData = function() {
        this.data.updateFinalCommon();
      };
      NonPlayer.prototype.playerAnim = function(status, dir) {};
      NonPlayer.prototype.getWalkSmoke = function(parentNode, pos) {};
      NonPlayer.prototype.onLoad = function() {
        this.init();
        this.initCollider();
        this.dangerBox = this.dangerBoxNode.getComponent(ActorAttackBox_1.default);
        this.graphics = this.getComponent(cc.Graphics);
        this.anim = this.getComponent(cc.Animation);
        this.sprite = this.root.getChildByName("sprite");
        this.bodySprite = this.sprite.getChildByName("body").getComponent(cc.Sprite);
        this.mat = this.bodySprite.getComponent(cc.Sprite).getMaterial(0);
        this.boxCollider = this.getComponent(CCollider_1.default);
        this.node.scale = this.getScaleSize();
        this.dashlight = this.sprite.getChildByName("dashlight");
        this.dashlight.opacity = 0;
        this.shooter = this.root.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.effectNode = this.root.getChildByName("Effect");
        this.hitLightSprite = this.root.getChildByName("Effect").getChildByName("hitlight").getComponent(cc.Sprite);
        this.hitLightSprite.node.opacity = 0;
        this.particleBlood = this.root.getChildByName("Effect").getChildByName("blood").getComponent(cc.ParticleSystem);
        this.particleBlood.stopSystem();
        this.attrNode = this.root.getChildByName("attr");
        this.areaDetector = this.getComponentInChildren(AreaDetector_1.default);
        this.resetBodyColor();
        this.statusPos = this.statusManager.node.position.clone();
        if (this.data.isStatic > 0) {
          this.entity.Collider.colliders[0].isStatic = true;
          this.node.width = this.entity.Collider.colliders[0].w;
          this.node.height = this.entity.Collider.colliders[0].h;
        }
        this.bottomDir && this.bottomDir.init(this, this.data.isEnemy > 0 ? cc.Color.RED : cc.Color.YELLOW);
        this.initSize();
        this.dangerBox.init(this, this.data);
        this.dangerTips.opacity = 0;
        this.specialStep.init();
        this.stateMachine = new DefaultStateMachine_1.default(this, NonPlayerActorState_1.default.PRPARE, NonPlayerActorState_1.default.GLOBAL);
      };
      NonPlayer.prototype.start = function() {
        var _this = this;
        ActorUtils_1.default.changeZIndex(this);
        this.healthBar.refreshHealth(this.data.getHealth().x, this.data.getHealth().y);
        this.healthBar.hideWhenFull = true;
        if (this.data.lifeTime > 0) {
          var lifeTimeStep = new NextStep_1.default();
          this.leftLifeTime = this.data.lifeTime;
          lifeTimeStep.next(function() {}, this.data.lifeTime, true, function() {
            _this.leftLifeTime--;
            _this.leftLifeTime <= 0 && _this.data && (_this.data.currentHealth = 0);
          }, 1);
        }
        this.addSaveStatusList();
        this.entity.Move.damping = 3;
        this.entity.Move.linearVelocity = cc.v2(0, 0);
        var attackArr = this.data.attackRect.split(",");
        var bodyArr = this.data.bodyRect.split(",");
        for (var _i = 0, attackArr_1 = attackArr; _i < attackArr_1.length; _i++) {
          var num = attackArr_1[_i];
          this.attackRect.push(parseInt(num));
        }
        for (var _a = 0, bodyArr_1 = bodyArr; _a < bodyArr_1.length; _a++) {
          var num = bodyArr_1[_a];
          this.bodyRect.push(parseInt(num));
        }
      };
      NonPlayer.prototype.jump = function() {
        this.jumpAbility && this.jumpAbility.jump(6, 3);
      };
      NonPlayer.prototype.jumpCancel = function() {
        this.jumpAbility && this.jumpAbility.cancel();
      };
      NonPlayer.prototype.fly = function() {
        this.jumpAbility && this.data.fly > 0 && this.jumpAbility.fly(1, this.data.fly);
      };
      NonPlayer.prototype.flyCancel = function() {
        this.jumpAbility && this.data.fly > 0 && this.jumpAbility.flyCancel(1);
      };
      NonPlayer.prototype.hitLightS = function(damage) {
        var show = true;
        var resName = "hitlight1";
        var scale = 4;
        var punchNames = [ AudioPlayer_1.default.PUNCH, AudioPlayer_1.default.PUNCH1, AudioPlayer_1.default.PUNCH2 ];
        var swordhitNames = [ AudioPlayer_1.default.SWORD_HIT, AudioPlayer_1.default.SWORD_HIT1, AudioPlayer_1.default.SWORD_HIT2 ];
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        if (damage.isFist) {
          resName = Logic_1.default.getHalfChance() ? "hitlight1" : "hitlight2";
          AudioPlayer_1.default.play(punchNames[Logic_1.default.getRandomNum(0, 2)]);
        } else if (damage.isRemote) {
          resName = Logic_1.default.getHalfChance() ? "hitlight9" : "hitlight10";
          AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        } else if (damage.isBlunt) {
          resName = Logic_1.default.getHalfChance() ? "hitlight3" : "hitlight4";
          scale = damage.isFar ? 5 : 4;
          AudioPlayer_1.default.play(swordhitNames[Logic_1.default.getRandomNum(0, 2)]);
        } else if (damage.isMelee) {
          AudioPlayer_1.default.play(swordhitNames[Logic_1.default.getRandomNum(0, 2)]);
          if (damage.isStab) {
            resName = Logic_1.default.getHalfChance() ? "hitlight5" : "hitlight6";
            scale = damage.isFar ? 5 : 4;
          } else {
            resName = Logic_1.default.getHalfChance() ? "hitlight7" : "hitlight8";
            scale = damage.isFar ? 5 : 4;
          }
        } else {
          AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
          show = false;
        }
        if (show) {
          this.hitLightSprite.node.stopAllActions();
          this.hitLightSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
          this.hitLightSprite.node.opacity = 255;
          this.hitLightSprite.node.color = cc.Color.WHITE;
          this.hitLightSprite.node.scale = damage.isCriticalStrike ? scale : scale + 2;
          cc.tween(this.hitLightSprite.node).delay(.2).to(.2, {
            opacity: 0,
            color: cc.Color.RED
          }).start();
        }
      };
      NonPlayer.prototype.addSaveStatusList = function() {
        this.statusManager && this.statusManager.addStatusListFromSave(this.data.StatusList);
      };
      NonPlayer.prototype.hitLight = function(isHit) {
        this.mat || (this.mat = this.root.getChildByName("sprite").getChildByName("body").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
      };
      NonPlayer.prototype.addAttrIcon = function() {
        this.attrNode || (this.attrNode = this.root.getChildByName("attr"));
        this.attrNode.removeAllChildren();
        for (var key in this.attrmap) {
          var attr = cc.instantiate(this.attrPrefab);
          attr.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes(key);
          this.attrNode.addChild(attr);
        }
      };
      NonPlayer.prototype.showDangerTips = function() {
        var _this = this;
        this.dangerTips.opacity = 255;
        this.scheduleOnce(function() {
          _this.dangerTips.opacity = 0;
        }, 1);
      };
      NonPlayer.prototype.getCurrentBodyRes = function() {
        if (!this.sprite) {
          this.sprite = this.root.getChildByName("sprite");
          this.bodySprite = this.sprite.getChildByName("body").getComponent(cc.Sprite);
        }
        return this.bodySprite.spriteFrame.name;
      };
      NonPlayer.prototype.initSize = function() {
        var bodyRect = this.data.bodyRect.split(",");
        this.boxCollider || (this.boxCollider = this.getComponent(CCollider_1.default));
        this.boxCollider.offset = cc.v2(parseInt(bodyRect[0]), parseInt(bodyRect[1]));
        this.boxCollider.w = parseInt(bodyRect[2]);
        this.boxCollider.h = parseInt(bodyRect[3]);
        this.boxCollider.zHeight = parseInt(bodyRect[4]);
        this.boxCollider.tag = this.data.isEnemy > 0 ? CCollider_1.default.TAG.NONPLAYER : CCollider_1.default.TAG.GOODNONPLAYER;
        if (this.data.blink > 0) {
          this.boxCollider.setIgnoreTags([ CCollider_1.default.TAG.WALL ]);
          this.boxCollider.setIgnoreTags([ CCollider_1.default.TAG.WALL_TOP ]);
          this.boxCollider.setIgnoreTags([ CCollider_1.default.TAG.BUILDING ]);
          this.boxCollider.setIgnoreTags([ CCollider_1.default.TAG.WARTER ]);
        }
        this.shadow.width = this.boxCollider.w;
        this.shadow.height = this.boxCollider.h;
      };
      NonPlayer.prototype.changeBodyRes = function(resName, suffix) {
        if (!this.sprite) {
          this.sprite = this.root.getChildByName("sprite");
          this.bodySprite = this.sprite.getChildByName("body").getComponent(cc.Sprite);
        }
        if (this.hv.y > 0 && suffix && suffix.indexOf("anim0") > -1) {
          var temp = suffix.replace("anim0", "anim1");
          this.getSpriteFrameByName(resName, temp) && (suffix = temp);
        }
        var spriteFrame = this.getSpriteFrameByName(resName, suffix);
        if (spriteFrame) {
          this.bodySprite.spriteFrame = spriteFrame;
          this.bodySprite.node.width = spriteFrame.getOriginalSize().width;
          this.bodySprite.node.height = spriteFrame.getOriginalSize().height;
          this.setInWaterMat(this.bodySprite, this.data.water < 1 && this.isInWater());
        } else this.bodySprite.spriteFrame = null;
      };
      NonPlayer.prototype.showWaterSpark = function() {
        if (!this.lastTimeInWater && this.isInWater()) {
          var light = cc.instantiate(this.waterSpark);
          light.parent = this.node;
          light.position = cc.v3(0, 0);
          AudioPlayer_1.default.play(AudioPlayer_1.default.JUMP_WATER);
        }
        this.lastTimeInWater = this.isInWater();
      };
      NonPlayer.prototype.isInWater = function() {
        return this.isInWaterTile && this.entity.Transform.z < 32;
      };
      NonPlayer.prototype.getSpriteFrameByName = function(resName, suffix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(resName));
        return spriteFrame;
      };
      NonPlayer.prototype.updatePlayerPos = function() {
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(this.pos);
        this.node.position = this.entity.Transform.position.clone();
      };
      NonPlayer.prototype.transportPlayer = function(x, y) {
        this.sprite.angle = 0;
        this.sprite.scaleX = this.isFaceRight ? 1 : -1;
        this.sprite.opacity = 255;
        this.sprite.x = 0;
        this.sprite.y = 0;
        this.pos.x = x;
        this.pos.y = y;
        ActorUtils_1.default.changeZIndex(this);
        this.updatePlayerPos();
      };
      NonPlayer.prototype.remoteAttack = function(target, isSpecial) {
        this.remoteStep.IsExcuting = false;
        this.hv = cc.v2(target.getCenterPosition().sub(this.node.position)).normalize();
        if (!this.hv.equals(cc.Vec2.ZERO)) {
          this.shooter.setHv(this.hv.clone());
          this.shooter.from.valueCopy(FromData_1.default.getClone(this.data.nameCn, this.data.resName + "anim000", this.node.position, this.seed));
          this.IsVariation && (this.shooter.data.bulletSize = .5);
          this.shooter.dungeon = this.dungeon;
          this.shooter.actor = this;
          this.shooter.data.remoteAudio = this.data.remoteAudio;
          this.shooter.isFromPlayer = this.data.isEnemy < 1;
          this.shooter.data.bulletArcExNum = this.data.bulletArcExNum;
          this.shooter.data.bulletLineExNum = this.data.bulletLineExNum;
          this.shooter.data.bulletLineInterval = this.data.bulletLineInterval;
          if (isSpecial) {
            this.shooter.data.bulletLineExNum = this.data.specialBulletLineExNum;
            this.shooter.data.bulletArcExNum = this.data.specialBulletArcExNum;
          }
          this.shooter.data.isLineAim = this.data.isLineAim;
          this.shooter.data.bulletType = this.data.bulletType ? this.data.bulletType : "bullet001";
          this.shooter.data.bulletExSpeed = this.data.bulletExSpeed;
          this.shooter.node.position = cc.v3(this.isFaceRight ? this.data.shooterOffsetX : -this.data.shooterOffsetX, this.data.shooterOffsetY);
          this.shooter.fireBullet(this.data.Common.remoteAngle);
        }
      };
      NonPlayer.prototype.bodyStopAllActions = function() {
        this.bodySprite.node.stopAllActions();
        this.sc.isBlinking = false;
        this.bodySprite.node.opacity = 255;
      };
      NonPlayer.prototype.showAttackAnim = function(before, attacking, finish, target, isSpecial, isMelee, isMiss) {
        var _this = this;
        var speedScale = 1 - this.data.FinalCommon.AttackSpeed / 10;
        speedScale < .5 && (speedScale = .5);
        speedScale > 2 && (speedScale = 2);
        var pos = cc.v2(target.node.position.clone().sub(this.node.position));
        pos.equals(cc.Vec2.ZERO) && (pos = cc.v2(1, 0));
        pos = pos.normalize().mul(this.isFaceRight ? 32 : -32);
        this.isFaceRight || (pos.y = -pos.y);
        this.anim.pause();
        this.bodyStopAllActions();
        this.sprite.stopAllActions();
        var stabDelay = 0;
        (!isSpecial && this.data.meleeDash > 0 || isSpecial && this.data.specialDash > 0) && isMelee && (stabDelay = .4 * speedScale);
        var beforetween = cc.tween().delay(.5 * speedScale).call(function() {
          before && before(isSpecial);
        });
        var shaketween = cc.tween().by(.02, {
          position: cc.v3(5, 0)
        }).by(.02, {
          position: cc.v3(-5, 0)
        }).by(.02, {
          position: cc.v3(5, 0)
        }).by(.02, {
          position: cc.v3(-5, 0)
        }).by(.02, {
          position: cc.v3(5, 0)
        }).by(.02, {
          position: cc.v3(-5, 0)
        }).by(.02, {
          position: cc.v3(5, 0)
        }).by(.02, {
          position: cc.v3(-5, 0)
        });
        var arrattack = [ "anim009" ];
        var arrspecial = [];
        var frameIndex = 0;
        var attackKeyStart = isSpecial ? this.data.specialFrameKeyStart : this.data.attackFrameKeyStart;
        var attackKeyEnd = isSpecial ? this.data.specialFrameKeyEnd : this.data.attackFrameKeyEnd;
        while (frameIndex < this.data.attackFrames - 1) arrattack.push("anim0" + (10 + frameIndex++));
        for (var i = 0; i < this.data.specialFrames; i++) arrspecial.push("anim0" + (10 + frameIndex++));
        var arr = isSpecial ? arrspecial : arrattack;
        var _attacktweenprepare = cc.tween().delay(0);
        var _loop_1 = function(i) {
          _attacktweenprepare.then(cc.tween().delay(.2 * speedScale).call(function() {
            _this.changeBodyRes(_this.data.resName, arr[i]);
            AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          }));
        };
        for (var i = 0; i < attackKeyStart; i++) _loop_1(i);
        var _attacktweenstart = cc.tween().delay(0);
        var _loop_2 = function(i) {
          _attacktweenstart.then(cc.tween().delay(.2 * speedScale).call(function() {
            _this.flyCancel();
            _this.changeBodyRes(_this.data.resName, arr[i]);
          }));
        };
        for (var i = attackKeyStart; i < attackKeyEnd; i++) _loop_2(i);
        var _attacktweenend = cc.tween().delay(0);
        var _loop_3 = function(i) {
          _attacktweenend.then(cc.tween().delay(.2 * speedScale).call(function() {
            _this.fly();
            _this.changeBodyRes(_this.data.resName, arr[i]);
          }));
        };
        for (var i = attackKeyEnd; i < arr.length; i++) _loop_3(i);
        var backofftween = cc.tween().to(.2 * speedScale, {
          position: cc.v3(-pos.x, -pos.y)
        }).delay(stabDelay);
        var forwardtween = cc.tween().to(.2 * speedScale, {
          position: this.data.fly > 0 ? cc.v3(0, 0) : cc.v3(pos.x, pos.y)
        }).delay(stabDelay);
        var specialTypeCanMelee = this.data.specialType.length <= 0 || this.data.specialType == SpecialManager_1.default.AFTER_ASH;
        var attackpreparetween = cc.tween().call(function() {
          (isMelee && !isSpecial || isSpecial && isMelee && specialTypeCanMelee || isSpecial && _this.data.specialDash > 0) && _this.dangerBox.show(_this.data.attackRect, isSpecial, ActorUtils_1.default.getDashDistance(_this, isSpecial ? _this.data.specialDash : _this.data.meleeDash, .4 * speedScale), _this.hv, false);
          isSpecial && _this.scheduleOnce(function() {
            if (!_this.sc.isDied) {
              _this.specialManager.dungeon = _this.dungeon;
              _this.specialManager.addEffect(_this.data.specialType, _this.data.specialDistance, _this.isFaceRight, FromData_1.default.getClone(_this.data.nameCn, _this.data.resName + "anim000", _this.node.position, _this.seed), _this.IsVariation);
            }
          }, _this.data.specialDelay);
        });
        var attackingtween = cc.tween().call(function() {
          _this.dangerBox.hide(isMiss);
          if (!isSpecial && _this.data.meleeDash > 0 || isSpecial && _this.data.specialDash > 0) {
            _this.move(cc.v3(_this.hv), isSpecial ? _this.data.specialDash : _this.data.meleeDash);
            _this.data.dashJump > 0 && _this.jumpAbility.jump(_this.data.dashJump, 0);
          }
          isSpecial && _this.scheduleOnce(function() {
            if (!_this.sc.isDied) {
              _this.specialManager.dungeon = _this.dungeon;
              _this.specialManager.addPlacement(_this.data.specialType, _this.data.specialDistance, _this.isFaceRight, FromData_1.default.getClone(_this.data.nameCn, _this.data.resName + "anim000", _this.node.position, _this.seed), _this.IsVariation);
            }
          }, _this.data.specialDelay);
          attacking && attacking(isSpecial);
        });
        var attackback = cc.tween().call(function() {
          _this.dangerBox.finish();
        });
        var attackfinish = cc.tween().delay(.2 * speedScale).call(function() {
          _this.dangerBox.finish();
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_IDLE000);
          _this.setLinearVelocity(cc.Vec2.ZERO);
        });
        var aftertween = cc.tween().to(.2 * speedScale, {
          position: cc.v3(0, 0)
        }).delay(.2 * speedScale).call(function() {
          finish && finish(isSpecial);
        });
        var normalMelee = cc.tween().then(attackpreparetween).then(_attacktweenprepare).then(backofftween).parallel(attackingtween, _attacktweenstart, forwardtween).parallel(attackback, _attacktweenend).then(attackfinish);
        var normalRemote = cc.tween().then(attackpreparetween).then(_attacktweenprepare).parallel(attackingtween, _attacktweenstart).parallel(attackback, _attacktweenend).then(attackfinish);
        var specialMelee = cc.tween().then(attackpreparetween).then(_attacktweenprepare).then(backofftween).then(shaketween).parallel(attackingtween, _attacktweenstart, forwardtween).parallel(attackback, _attacktweenend).then(attackfinish);
        var specialRemote = cc.tween().then(attackpreparetween).parallel(shaketween, _attacktweenprepare).parallel(attackingtween, _attacktweenstart).parallel(attackback, _attacktweenend).then(attackfinish);
        var allAction = cc.tween().then(beforetween).then(isMelee ? normalMelee : normalRemote).then(aftertween);
        if (isSpecial) {
          this.showDangerTips();
          AudioPlayer_1.default.play(this.data.specialAudio);
          allAction = cc.tween().then(beforetween).then(specialRemote).then(aftertween);
          isMelee && specialTypeCanMelee && (allAction = cc.tween().then(beforetween).then(specialMelee).then(aftertween));
        }
        cc.tween(this.bodySprite.node).then(allAction).start();
      };
      NonPlayer.prototype.move = function(pos, speed) {
        if (pos.equals(cc.Vec3.ZERO)) {
          this.hv = cc.v2(0, 0);
          return;
        }
        pos = pos.normalize();
        this.hv = cc.v2(pos);
        this.pos = Dungeon_1.default.getIndexInMap(this.node.position);
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var mul = absh > absv ? absh : absv;
        mul = 0 == mul ? 1 : mul;
        var movement = cc.v2(h, v);
        speed < 0 && (speed = 0);
        movement = movement.mul(speed);
        if (this.data.water > 0 && this.isInWater()) {
          movement = movement.mul(.5);
          this.swimmingAudioStep.next(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.SWIMMING);
          }, 2.5);
        }
        this.setLinearVelocity(movement);
        ActorUtils_1.default.changeZIndex(this);
      };
      NonPlayer.prototype.setLinearVelocity = function(movement) {
        this.currentlinearVelocitySpeed = movement;
        this.entity.Move.linearVelocity = this.currentlinearVelocitySpeed.clone();
      };
      NonPlayer.prototype.fall = function(from) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.ATTACK_BLEEDING);
        if (this.data.isStatic > 0 || this.data.isHeavy > 0 || this.IsVariation) return;
        this.sc.isFalling = true;
        this.bodySprite.node.angle = ActorUtils_1.default.isPosBehindTarget(from.pos, this) ? -75 : 105;
        this.jumpAbility && this.jumpAbility.airPause(4, .3, JumpingAbility_1.default.CALLBACK_AIR_PAUSE, function(group, type) {
          if (type == TriggerData_1.default.TYPE_JUMP_END) {
            _this.jumpAbility.removeCallback(JumpingAbility_1.default.CALLBACK_AIR_PAUSE);
            _this.scheduleOnce(function() {
              _this.fallFinish();
            }, .5);
          }
        });
      };
      NonPlayer.prototype.fallFinish = function() {
        this.sc.isFalling = false;
        this.bodySprite.node.angle = 0;
        this.sprite.x = 0;
      };
      NonPlayer.prototype.takeDamage = function(damageData, from, actor) {
        if (!this.sc.isShow || this.sc.isDied) return false;
        if (this.data.invisible > 0 && Logic_1.default.getRandomNum(1, 10) > 4) {
          this.showFloatFont(0, true, false, damageData.isCriticalStrike, false, false, false);
          return false;
        }
        if (this.sc.isBlinking) {
          this.showFloatFont(0, true, false, damageData.isCriticalStrike, false, false, false);
          return false;
        }
        var dd = this.data.getDamage(damageData);
        var dodge = this.data.FinalCommon.dodgeRate / 100;
        var isDodge = Random_1.default.rand() <= dodge && dd.getTotalDamage() > 0;
        dd = isDodge ? new DamageData_1.default() : dd;
        if (isDodge) {
          this.showFloatFont(0, true, false, damageData.isCriticalStrike, false, false, false);
          return false;
        }
        var isHurting = dd.getTotalDamage() > 0;
        this.sc.isHurting = isHurting && !this.specialStep.IsExcuting && damageData.isMelee;
        if (this.sc.isHurting) {
          this.sc.isDisguising = false;
          this.sc.isAttacking = false;
          this.flyCancel();
          this.meleeStep.refreshCoolDown(this.data.melee);
          this.remoteStep.refreshCoolDown(this.data.remote);
          damageData.isCriticalStrike && this.fall(from);
          this.sprite.stopAllActions();
          this.bodyStopAllActions();
          this.changeBodyRes(this.data.resName, Logic_1.default.getHalfChance() ? NonPlayer_1.RES_HIT001 : NonPlayer_1.RES_HIT002);
          this.anim.getAnimationState("MonsterIdle").isPlaying && this.anim.pause();
          this.dangerBox.finish();
        }
        if (isHurting) {
          this.hitLight(true);
          this.hitLightS(damageData);
          if (damageData.isBackAttack || damageData.isCriticalStrike) {
            var pos = this.node.position.clone();
            actor && (pos = actor.node.position.clone());
            this.showBloodEffect(pos);
          }
          this.unschedule(this.hurtReset);
          this.scheduleOnce(this.hurtReset, .15);
        }
        this.sprite.opacity = 255;
        this.data.currentHealth -= dd.getTotalDamage();
        this.data.currentHealth > this.data.getHealth().y && (this.data.currentHealth = this.data.getHealth().y);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.getHealth().y);
        this.showFloatFont(dd.getTotalDamage(), false, false, damageData.isCriticalStrike, false, damageData.isBackAttack, false);
        this.data.isRecovery > 0 && isHurting && this.addStatus(StatusManager_1.default.RECOVERY, new FromData_1.default());
        return isHurting;
      };
      NonPlayer.prototype.resetBodyColor = function() {
        if (!this.data) return;
        this.bodySprite.node.color = cc.Color.WHITE.fromHEX(this.data.StatusTotalData.color);
      };
      NonPlayer.prototype.getMixColor = function(color1, color2) {
        var c1 = cc.color().fromHEX(color1);
        var c2 = cc.color().fromHEX(color2);
        var c3 = cc.color();
        var r = c1.getR() + c2.getR();
        var g = c1.getG() + c2.getG();
        var b = c1.getB() + c2.getB();
        c3.setR(r > 255 ? 255 : r);
        c3.setG(g > 255 ? 255 : g);
        c3.setB(b > 255 ? 255 : b);
        return "#" + c3.toHEX("#rrggbb");
      };
      NonPlayer.prototype.addStatus = function(statusType, from) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager.addStatus(statusType, from);
      };
      NonPlayer.prototype.addCustomStatus = function(data, from) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager.addCustomStatus(data, from);
      };
      NonPlayer.prototype.stopAllDebuffs = function() {
        if (!this.node) return;
        this.statusManager.stopAllDebuffs();
      };
      NonPlayer.prototype.showAttackEffect = function(isDashing) {
        this.effectNode.setPosition(cc.v3(0, 32));
        isDashing || cc.tween(this.effectNode).to(.2, {
          position: cc.v3(32, 32)
        }).to(.2, {
          position: cc.v3(0, 16)
        }).start();
      };
      NonPlayer.prototype.showBloodEffect = function(pos) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.ATTACK_BLEEDING);
        this.dungeon.addHitBlood(pos, this.node.position, Logic_1.default.getRandomNum(3, 6));
        this.particleBlood.resetSystem();
        this.scheduleOnce(function() {
          _this.particleBlood.stopSystem();
        }, .5);
      };
      NonPlayer.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        this.sc.isDied = true;
        this.sc.isDisguising = false;
        this.dashStep.IsExcuting = false;
        this.sprite.stopAllActions();
        this.bodyStopAllActions();
        this.dangerBox.finish();
        this.statusManager.stopAllBuffs();
        this.anim.play("MonsterDie");
        this.changeBodyRes(this.data.resName, NonPlayer_1.RES_HIT003);
        var collider = this.getComponent(CCollider_1.default);
        collider.sensor = true;
        this.data.isEnemy > 0 && this.data.noLoot < 1 && this.getLoot();
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        Logic_1.default.setKillPlayerCounts(FromData_1.default.getClone(this.actorName(), this.data.resName + "anim000", this.node.position, this.seed), false);
        this.scheduleOnce(function() {
          if (_this.node) {
            _this.setLinearVelocity(cc.Vec2.ZERO);
            if (_this.data.isBoom > 0) {
              var boom = cc.instantiate(_this.boom).getComponent(AreaOfEffect_1.default);
              if (boom) {
                boom.show(_this.node.parent, _this.node.position, cc.v2(1, 0), 0, new AreaOfEffectData_1.default().init(1, .2, 0, 0, IndexZ_1.default.OVERHEAD, _this.data.isEnemy > 0, true, true, false, false, new DamageData_1.default(2), FromData_1.default.getClone("\u7206\u70b8", "boom000anim004", _this.node.position), []));
                AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
                EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
                  isHeavyShaking: true
                });
              }
            }
            _this.scheduleOnce(function() {
              _this.destroyEntityNode();
            }, _this.data.isPet ? 0 : 5);
          }
        }, 2);
      };
      NonPlayer.prototype.getLoot = function() {
        var rand4save = Logic_1.default.mapManager.getRandom4Save(Logic_1.default.mapManager.getRebornSeed(this.seed), MapManager_1.default.RANDOM_NONPLAYER);
        var rand = rand4save.rand();
        var equipPercent = .1;
        var percent = .75;
        if (this.IsVariation) {
          percent = .6;
          equipPercent = .3;
        }
        equipPercent += this.killPlayerCount / 10;
        percent -= this.killPlayerCount / 10;
        percent < .3 && (percent = .3);
        var offset = (1 - percent) / 10;
        var quality = 1 + this.killPlayerCount / 2;
        quality = Math.floor(quality);
        quality > EquipmentManager_1.default.QUALITY_ORANGE && (quality = EquipmentManager_1.default.QUALITY_ORANGE);
        if (this.dungeon) {
          var count = 1;
          this.IsVariation && (count = 2);
          this.killPlayerCount > 0 && (count = 5);
          this.dungeon.player.data.StatusTotalData.exOilGold > 0 && (count += this.dungeon.player.data.StatusTotalData.exOilGold);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, {
            pos: this.node.position,
            count: count
          });
          rand < equipPercent && !this.isSummon && this.dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(this.pos), null, quality);
          rand < percent ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
            pos: this.node.position,
            count: rand4save.getRandomNum(1, 10)
          }) : rand >= percent && rand < percent + offset ? this.addLootSaveItem(Item_1.default.HEART, true) : rand >= percent + offset && rand < percent + 2 * offset ? this.addLootSaveItem(Item_1.default.HEART, true) : rand >= percent + 2 * offset && rand < percent + 3 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_ATTACK) : rand >= percent + 3 * offset && rand < percent + 4 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_MOVESPEED) : rand >= percent + 4 * offset && rand < percent + 5 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_HEALING) : rand >= percent + 5 * offset && rand < percent + 6 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_DREAM) : rand >= percent + 6 * offset && rand < percent + 7 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_REMOTE) : rand >= percent + 7 * offset && rand < percent + 8 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_JUMP) : rand >= percent + 8 * offset && rand < 1;
        }
      };
      NonPlayer.prototype.addLootSaveItem = function(resName, isAuto) {
        !isAuto && this.isSummon || this.dungeon.addItem(this.node.position.clone(), resName);
      };
      NonPlayer.prototype.getCenterPosition = function() {
        return this.node.position.clone();
      };
      Object.defineProperty(NonPlayer.prototype, "isPassive", {
        get: function() {
          return !this.dungeon || this.sc.isDied || this.sc.isHurting || this.sc.isFalling || this.sc.isAttacking || !this.sc.isShow || this.sc.isDizzing || this.sc.isDisguising || this.sc.isDodging || this.sc.isDashing;
        },
        enumerable: false,
        configurable: true
      });
      NonPlayer.prototype.getNearestEnemyActor = function(needRefresh) {
        ActorUtils_1.default.isTargetCanTrack(this.currentTarget) && !needRefresh || (this.currentTarget = ActorUtils_1.default.getNearestEnemyActor(this.node.position, this.data.isEnemy > 0, this.dungeon));
        return this.currentTarget;
      };
      NonPlayer.prototype.updateAttack = function() {
        var _this = this;
        if (this.isPassive) return;
        var target = this.getNearestEnemyActor();
        var targetDis = ActorUtils_1.default.getTargetDistance(this, target);
        if (!ActorUtils_1.default.isTargetAlive(target)) return;
        this.data.specialAttack > 0 && this.specialStep.next(function() {
          _this.specialStep.IsExcuting = true;
        }, this.data.specialAttack, true);
        var range = parseInt(this.attackRect[0]) + parseInt(this.attackRect[2]);
        this.specialStep.IsExcuting && this.data.specialType.length > 0 && (range += 100);
        if (this.data.meleeDash > 0) {
          var speedScale = 1 - this.data.FinalCommon.AttackSpeed / 10;
          range = ActorUtils_1.default.getDashDistance(this, this.specialStep.IsExcuting ? this.data.specialDash : this.data.meleeDash, .8 * speedScale);
        }
        var canMelee = this.data.melee > 0 && targetDis < range * this.node.scaleY;
        var canRemote = this.data.remote > 0 && targetDis < 600 * this.node.scaleY;
        canMelee && !this.meleeStep.IsInCooling ? this.meleeStep.next(function() {
          _this.changeFaceRight(target);
          _this.setLinearVelocity(cc.Vec2.ZERO);
          _this.sc.isAttacking = true;
          _this.sprite.opacity = 255;
          _this.showAttackEffect(false);
          var isMiss = Logic_1.default.getRandomNum(0, 100) < _this.data.StatusTotalData.missRate;
          isMiss && _this.showFloatFont(0, false, true, false, false, false, false);
          _this.showAttackAnim(function() {}, function() {}, function() {
            _this.sc.isAttacking = false;
            _this.specialStep.IsExcuting = false;
          }, target, _this.specialStep.IsExcuting, true, isMiss);
        }, this.data.melee) : canRemote && this.remoteStep.next(function() {
          _this.sc.isAttacking = true;
          _this.sprite.opacity = 255;
          _this.changeFaceRight(target);
          var isLaser = Logic_1.default.bullets[_this.data.bulletType] && Logic_1.default.bullets[_this.data.bulletType].isLaser > 0;
          _this.showAttackAnim(function(isSpecial) {
            isLaser && isSpecial && _this.remoteAttack(target, isSpecial);
          }, function(isSpecial) {
            if (isLaser && isSpecial) return;
            _this.remoteAttack(target, isSpecial);
          }, function() {
            _this.specialStep.IsExcuting = false;
            isLaser ? _this.scheduleOnce(function() {
              _this.sc.isAttacking = false;
            }, 1) : _this.sc.isAttacking = false;
          }, target, _this.specialStep.IsExcuting, false, false);
        }, this.data.remote, true);
      };
      NonPlayer.prototype.dodge = function(pos) {
        var _this = this;
        if (this.isPassive) return;
        this.sc.isDodging = true;
        var speed = this.data.FinalCommon.MoveSpeed;
        this.move(pos, 2.5 * speed);
        this.scheduleOnce(function() {
          _this.sc.isDodging = false;
        }, .1);
      };
      NonPlayer.prototype.updateLogic = function(dt) {
        var _this = this;
        if (!this.dungeon) return;
        this.stateMachine.update();
        this.entity.Move.isStatic = false;
        this.entity.Transform.position = Dungeon_1.default.fixOuterMap(this.entity.Transform.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position);
        this.isInWaterTile = this.dungeon.isActorPosInWater(this);
        this.isInWaterTile && (this.lastWaterPos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position));
        ActorUtils_1.default.changeZIndex(this);
        this.trackStep.next(function() {
          _this.getNearestEnemyActor(true);
        }, 10);
        var target = this.getNearestEnemyActor();
        this.updateAttack();
        var targetDis = ActorUtils_1.default.getTargetDistance(this, target);
        this.data.disguise > 0 && targetDis < this.data.disguise && this.sc.isDisguising && (this.sc.isDisguising = false);
        this.data.blink > 0 && !this.sc.isBlinking && !this.sc.isAttacking && this.blinkStep.next(function() {
          _this.sc.isBlinking = true;
          _this.sc.isAttacking = false;
        }, this.data.blink, true);
        var speed = this.data.FinalCommon.MoveSpeed;
        this.data.dash > 0 && !this.isPassive && ActorUtils_1.default.isTargetAlive(target) && targetDis < 600 && targetDis > 100 && this.dashStep.next(function() {
          _this.sc.isDashing = true;
          _this.dangerBox.show(_this.data.attackRect, false, 500, _this.hv, true);
          _this.dangerBox.hide(false);
          _this.enterWalk();
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          _this.showAttackEffect(true);
          _this.move(_this.getMovePosFromTarget(target), speed);
          _this.scheduleOnce(function() {
            if (_this.node) {
              _this.sc.isDashing = false;
              _this.dangerBox.finish();
            }
          }, 2);
        }, this.data.dash);
        var isTracking = targetDis < 500 && this.data.melee > 0;
        targetDis < 500 && targetDis > 300 && this.data.remote > 0 && (isTracking = true);
        ActorUtils_1.default.isTargetAlive(target) || (isTracking = false);
        if (!isTracking && this.data.isFollow > 0 && this.data.isEnemy < 1) {
          target = this.dungeon.player;
          targetDis = ActorUtils_1.default.getTargetDistance(this, this.dungeon.player);
          isTracking = true;
        }
        if (!this.isPassive) {
          var needStop = this.data.melee > 0 && targetDis < 64 || this.data.remote > 0 && this.data.melee <= 0 && targetDis < 300 || this.shooter.isAiming || speed <= 0;
          if (needStop) this.sc.isMoving = false; else if (isTracking) {
            this.sc.isMoving = true;
            this.moveStep.next(function() {
              var pos = _this.getMovePosFromTarget(target, false);
              if (_this.data.flee > 0) {
                pos = _this.getMovePosFromTarget(target, true);
                pos = cc.v3(-pos.x, -pos.y);
                _this.move(pos, 2 * speed);
              } else _this.move(pos, speed);
            }, .2, true);
          } else {
            this.moveStep.next(function() {
              _this.move(_this.getMovePosFromTarget(), speed);
              _this.sc.isMoving = true;
              _this.unschedule(_this.stopMove);
              _this.scheduleOnce(_this.stopMove, 2);
            }, 8, true);
            if (this.entity.Move.linearVelocity.equals(cc.Vec2.ZERO)) {
              this.sc.isMoving = false;
              this.unschedule(this.stopMove);
            }
          }
        }
        this.data.invisible > 0 && this.sprite.opacity > 20 && (this.sprite.opacity = this.lerp(this.sprite.opacity, 19, 3 * dt));
        this.entity.Move.damping = this.sc.isDashing ? 0 : 10;
        this.dashlight.opacity = this.sc.isDashing ? 200 : 0;
        this.healthBar.node.opacity = this.sc.isDisguising ? 0 : 255;
        this.shadow && (this.shadow.opacity = this.sc.isDisguising || this.data.water > 0 || this.isInWater() ? 0 : 128);
        this.sc.isDisguising && this.anim && this.anim.pause();
        this.data.invisible > 0 && (this.healthBar.node.opacity = this.sprite.opacity > 20 ? 255 : 9);
        this.healthBar.node.active = !this.sc.isDied;
        this.node.scale = this.getScaleSize();
        this.healthBar.node.x = -30 * this.node.scale;
        this.healthBar.node.y = 3 == this.data.boxType || 5 == this.data.boxType ? 150 : 120;
        this.tips.node.y = 3 == this.data.boxType || 5 == this.data.boxType ? 180 : 150;
        this.healthBar.progressBar.barSprite.node.color = this.IsVariation ? cc.color(128, 0, 128) : cc.color(194, 0, 0);
        this.healthBar.progressBar.barSprite.node.color = this.killPlayerCount > 0 ? cc.color(255, 215, 0) : this.healthBar.progressBar.barSprite.node.color;
        this.dashlight.color = this.IsVariation ? cc.color(255, 0, 0) : cc.color(255, 255, 255);
        this.attrNode && (this.attrNode.opacity = this.healthBar.node.opacity);
        if (this.data.isTest > 0 && this.isTestResetTimeDelay(dt) && !this.isPassive) {
          this.pos = this.defautPos.clone();
          this.updatePlayerPos();
        }
        if (this.data.water > 0 && !this.isInWaterTile) {
          this.pos = this.lastWaterPos.clone();
          this.updatePlayerPos();
        }
        if (this.parentNonPlayer && this.parentNonPlayer.data) {
          this.graphics.clear();
          this.graphics.strokeColor = cc.color(0, 255, 0, 60);
          this.graphics.lineWidth = 5;
          if (0 == this.parentNonPlayer.data.childMode && this.parentNonPlayer.sc.isDied) this.data.currentHealth = 0; else {
            this.graphics.moveTo(0, 32);
            var pos = this.node.convertToNodeSpaceAR(this.parentNonPlayer.node.convertToWorldSpaceAR(cc.v3(0, 32)));
            this.graphics.lineTo(pos.x, pos.y + 32);
            this.graphics.stroke();
          }
        }
        if (1 == this.data.childMode && this.childNonPlayerList.length > 0) {
          var count = 0;
          for (var _i = 0, _a = this.childNonPlayerList; _i < _a.length; _i++) {
            var n = _a[_i];
            n.sc.isDied && count++;
          }
          count == this.childNonPlayerList.length && (this.data.currentHealth = 0);
        }
        var y = this.root.y - this.entity.Transform.base;
        y < 0 && (y = 0);
        var scale = 1 - y / 64;
        this.shadow.scale = scale < .5 ? .5 : scale;
        this.shadow.y = this.bodySprite.node.y + this.entity.Transform.base;
        this.shadow.x = this.isFaceRight ? this.bodySprite.node.x : -this.bodySprite.node.x;
        this.bottomDir.node.y = this.entity.Transform.base;
        this.bottomDir.node.opacity = this.isInWater() ? 128 : 255;
        (this.sc.isDied || this.sc.isDisguising) && (this.bottomDir.node.opacity = 0);
        this.setInWaterMat(this.bodySprite, this.data.water < 1 && this.isInWater());
        this.waterY = this.isInWaterTile && this.data.water < 1 ? -32 : 0;
        this.sprite.y = Logic_1.default.lerp(this.sprite.y, this.waterY, .2);
        this.showWaterSpark();
        this.jumpAbility && this.jumpAbility.updateLogic();
        this.statusManager.node.position = this.statusPos.clone().add(cc.v3(0, this.root.y));
        this.icon && this.icon.updateLogic(this.data, cc.v2(this.node.convertToWorldSpaceAR(cc.Vec2.ZERO)).sub(cc.v2(this.dungeon.cameraControl.node.position)));
      };
      NonPlayer.prototype.setInWaterMat = function(sprite, inWater) {
        if (!sprite || !sprite.spriteFrame) return;
        var offset = sprite.spriteFrame.getOffset();
        var rect = sprite.spriteFrame.getRect();
        var texture = sprite.spriteFrame.getTexture();
        sprite.getMaterial(0).setProperty("rect", [ rect.x / texture.width, rect.y / texture.height, rect.width / texture.width, rect.height / texture.height ]);
        sprite.getMaterial(0).setProperty("hidebottom", inWater ? 1 : 0);
        sprite.getMaterial(0).setProperty("isRotated", sprite.spriteFrame.isRotated() ? 1 : 0);
      };
      NonPlayer.prototype.getMovePosFromTarget = function(target, isFlee, justForSameY) {
        var newPos = cc.v3(0, 0);
        newPos.x += Logic_1.default.getRandomNum(0, 400) - 200;
        newPos.y += Logic_1.default.getRandomNum(0, 400) - 200;
        if (!ActorUtils_1.default.isTargetAlive(target)) return newPos;
        newPos = target.node.position.clone();
        if (isFlee) {
          newPos = newPos.y > this.node.position.y ? newPos.addSelf(cc.v3(0, -128)) : newPos.addSelf(cc.v3(0, 128));
          newPos = newPos.x > this.node.position.x ? newPos.addSelf(cc.v3(-64, 0)) : newPos.addSelf(cc.v3(64, 0));
        } else justForSameY && Math.abs(newPos.y - this.node.position.y) > this.bodyRect[3] * this.node.scaleY + this.attackRect[2] && (newPos = cc.v3(this.node.position.x, newPos.y));
        newPos = newPos.x > this.node.position.x ? newPos.addSelf(cc.v3(32, 0)) : newPos.addSelf(cc.v3(-32, 0));
        var pos = newPos.sub(this.node.position);
        !this.sc.isAttacking && !this.sc.isDisguising && this.data.isStatic < 1 && this.changeFaceRight(target);
        return pos;
      };
      NonPlayer.prototype.changeFaceRight = function(target) {
        var pos = target.node.position.clone();
        pos = pos.sub(this.node.position);
        var h = pos.x;
        this.isFaceRight = h >= 0;
        this.sprite.scaleX = this.isFaceRight ? 1 : -1;
      };
      NonPlayer.prototype.lerp = function(a, b, r) {
        return a + (b - a) * r;
      };
      NonPlayer.prototype.onColliderEnter = function(other, self) {
        if (self.tag == CCollider_1.default.TAG.NONPLAYER || self.tag == CCollider_1.default.TAG.GOODNONPLAYER) {
          if (this.dungeon && this.sc.isDashing && !other.sensor) {
            this.sc.isDashing = false;
            this.dangerBox.finish();
          }
          !other.sensor && other.z < 9999 && self.z + CCollider_1.default.MIN_HEIGHT < other.z + other.zHeight && !this.sc.isHurting && this.jump();
        } else self.tag == CCollider_1.default.TAG.DEFAULT && this.areaDetector.onColliderEnter(other, self);
      };
      NonPlayer.prototype.onColliderStay = function(other, self) {
        self.tag != CCollider_1.default.TAG.NONPLAYER_HIT && self.tag != CCollider_1.default.TAG.GOODNONPLAYER_HIT || this.dangerBox.onColliderStay(other, self);
      };
      NonPlayer.prototype.takeDizz = function(dizzDuration) {
        var _this = this;
        if (dizzDuration > 0) {
          this.sc.isDizzing = true;
          this.scheduleOnce(function() {
            _this.sc.isDizzing = false;
          }, dizzDuration);
        }
      };
      NonPlayer.prototype.getScaleSize = function() {
        var scaleNum = this.data.scale && this.data.scale > 0 ? this.data.scale : 1;
        var sn = this.IsVariation ? NonPlayer_1.SCALE_NUM * scaleNum : scaleNum;
        return sn;
      };
      NonPlayer.prototype.actorName = function() {
        return this.data.nameCn;
      };
      NonPlayer.prototype.enterShow = function() {
        var _this = this;
        this.sprite.stopAllActions();
        this.bodyStopAllActions();
        this.bodySprite.node.color = cc.Color.BLACK;
        cc.tween(this.bodySprite.node).to(1, {
          color: cc.Color.WHITE.fromHEX(this.data.StatusTotalData.color)
        }).call(function() {
          _this.sc.isShow = true;
        }).start();
      };
      NonPlayer.prototype.enterDisguise = function() {
        this.sc.isShow = true;
        this.sprite.stopAllActions();
        this.bodyStopAllActions();
        this.anim.getAnimationState("MonsterIdle").isPlaying && this.anim.pause();
        this.changeBodyRes(this.data.resName, NonPlayer_1.RES_DISGUISE);
      };
      NonPlayer.prototype.enterIdle = function() {
        var _this = this;
        this.sc.isMoving = false;
        this.sc.isAttacking = false;
        this.setLinearVelocity(cc.Vec2.ZERO);
        this.entity.NodeRender.node = this.node;
        this.entity.NodeRender.root = this.root;
        if (0 != this.posZ) {
          this.entity.Transform.z = this.posZ;
          this.posZ = 0;
        }
        this.fly();
        var action = cc.tween().delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_IDLE000);
        }).delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_IDLE001);
        });
        this.sprite.stopAllActions();
        cc.tween(this.sprite).repeatForever(action).start();
        this.anim.getAnimationState("MonsterIdle").isPlaying || this.anim.play("MonsterIdle");
        this.dangerBox.finish();
      };
      NonPlayer.prototype.enterWalk = function() {
        var _this = this;
        this.sc.isAttacking = false;
        var action = cc.tween().delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_WALK00);
        }).delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_WALK01);
        }).delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_WALK02);
        }).delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_WALK03);
        });
        this.sprite.stopAllActions();
        cc.tween(this.sprite).repeatForever(action).start();
        this.anim.getAnimationState("MonsterIdle").isPlaying || this.anim.play("MonsterIdle");
      };
      NonPlayer.prototype.enterDizz = function() {
        this.sc.isAttacking = false;
        this.bodyStopAllActions();
        this.sprite.stopAllActions();
      };
      NonPlayer.prototype.enterBlink = function() {
        var _this = this;
        this.setLinearVelocity(cc.Vec2.ZERO);
        this.sc.isMoving = false;
        AudioPlayer_1.default.play(AudioPlayer_1.default.BLINK);
        var body = this.bodySprite.node;
        cc.tween(body).to(.2, {
          opacity: 0
        }).call(function() {
          var newPos = ActorUtils_1.default.getTargetPosition(_this.node.position, _this.getNearestEnemyActor(), true);
          newPos = Dungeon_1.default.getIndexInMap(newPos);
          newPos = newPos.x > _this.pos.x ? newPos.addSelf(cc.v3(1, 0)) : newPos.addSelf(cc.v3(-1, 0));
          var pos = Dungeon_1.default.getPosInMap(newPos);
          var r = cc.v3(Logic_1.default.getRandomNum(-Dungeon_1.default.TILE_SIZE / 2, Dungeon_1.default.TILE_SIZE / 2), Logic_1.default.getRandomNum(-Dungeon_1.default.TILE_SIZE / 2, Dungeon_1.default.TILE_SIZE / 2));
          _this.entity.Transform.position = pos.add(r);
          _this.node.setPosition(pos);
        }).to(.2, {
          opacity: 255
        }).call(function() {
          _this.sc.isBlinking = false;
        }).start();
      };
      NonPlayer.prototype.isTestResetTimeDelay = function(dt) {
        this.moveTimeDelay += dt;
        if (this.moveTimeDelay > 30) {
          this.moveTimeDelay = 0;
          return true;
        }
        return false;
      };
      NonPlayer.prototype.updateStatus = function(statusList, totalStatusData) {
        this.data.StatusTotalData.valueCopy(totalStatusData);
        this.data.StatusList = statusList;
        this.updateData();
        this.sc.isHurting || this.resetBodyColor();
      };
      NonPlayer.prototype.hideSelf = function(hideDuration) {};
      NonPlayer.prototype.updateDream = function(offset) {
        return 0;
      };
      NonPlayer.prototype.updateLife = function(sanity, solid, liquid) {};
      NonPlayer.prototype.onColliderExit = function(other, self) {};
      var NonPlayer_1;
      NonPlayer.RES_DISGUISE = "disguise";
      NonPlayer.RES_IDLE000 = "anim000";
      NonPlayer.RES_IDLE001 = "anim001";
      NonPlayer.RES_WALK00 = "anim002";
      NonPlayer.RES_WALK01 = "anim003";
      NonPlayer.RES_WALK02 = "anim004";
      NonPlayer.RES_WALK03 = "anim005";
      NonPlayer.RES_HIT001 = "anim006";
      NonPlayer.RES_HIT002 = "anim007";
      NonPlayer.RES_HIT003 = "anim008";
      NonPlayer.RES_ATTACK01 = "anim009";
      NonPlayer.SCALE_NUM = 1.5;
      NonPlayer.ANIM_NONE = -1;
      NonPlayer.ANIM_IDLE = 0;
      NonPlayer.ANIM_WALK = 1;
      NonPlayer.ANIM_ATTACK = 2;
      NonPlayer.ANIM_HIT = 3;
      NonPlayer.ANIM_DIED = 4;
      __decorate([ property(cc.Vec3) ], NonPlayer.prototype, "pos", void 0);
      __decorate([ property(cc.Node) ], NonPlayer.prototype, "root", void 0);
      __decorate([ property(cc.Node) ], NonPlayer.prototype, "shadow", void 0);
      __decorate([ property(HealthBar_1.default) ], NonPlayer.prototype, "healthBar", void 0);
      __decorate([ property(StatusManager_1.default) ], NonPlayer.prototype, "statusManager", void 0);
      __decorate([ property(SpecialManager_1.default) ], NonPlayer.prototype, "specialManager", void 0);
      __decorate([ property(cc.Prefab) ], NonPlayer.prototype, "boom", void 0);
      __decorate([ property(cc.Node) ], NonPlayer.prototype, "dangerBoxNode", void 0);
      __decorate([ property(cc.Node) ], NonPlayer.prototype, "dangerTips", void 0);
      __decorate([ property(cc.Prefab) ], NonPlayer.prototype, "attrPrefab", void 0);
      __decorate([ property(ActorBottomDir_1.default) ], NonPlayer.prototype, "bottomDir", void 0);
      __decorate([ property(cc.Prefab) ], NonPlayer.prototype, "waterSpark", void 0);
      __decorate([ property(cc.Prefab) ], NonPlayer.prototype, "avatarPrefab", void 0);
      __decorate([ property(cc.Prefab) ], NonPlayer.prototype, "frameAvatarPrefab", void 0);
      __decorate([ property(Tips_1.default) ], NonPlayer.prototype, "tips", void 0);
      NonPlayer = NonPlayer_1 = __decorate([ ccclass ], NonPlayer);
      return NonPlayer;
    }(PlayActor_1.default);
    exports.default = NonPlayer;
    cc._RF.pop();
  }, {
    "../actor/ActorAttackBox": "ActorAttackBox",
    "../actor/ActorBottomDir": "ActorBottomDir",
    "../actor/AreaDetector": "AreaDetector",
    "../actor/AreaOfEffect": "AreaOfEffect",
    "../actor/JumpingAbility": "JumpingAbility",
    "../actor/NonPlayerActorState": "NonPlayerActorState",
    "../base/BaseAvatar": "BaseAvatar",
    "../base/PlayActor": "PlayActor",
    "../base/fsm/DefaultStateMachine": "DefaultStateMachine",
    "../collider/CCollider": "CCollider",
    "../data/AreaOfEffectData": "AreaOfEffectData",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../data/NonPlayerData": "NonPlayerData",
    "../data/TriggerData": "TriggerData",
    "../item/Item": "Item",
    "../manager/EquipmentManager": "EquipmentManager",
    "../manager/MapManager": "MapManager",
    "../manager/SpecialManager": "SpecialManager",
    "../manager/StatusManager": "StatusManager",
    "../ui/Tips": "Tips",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/NextStep": "NextStep",
    "../utils/Random": "Random",
    "./Achievement": "Achievement",
    "./Dungeon": "Dungeon",
    "./EventHelper": "EventHelper",
    "./FrameAvatar": "FrameAvatar",
    "./HealthBar": "HealthBar",
    "./Logic": "Logic",
    "./PlayerAvatar": "PlayerAvatar",
    "./Shooter": "Shooter"
  } ],
  NormalBuilding: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "62a6bOVj+FJNLhaahuRhTRU", "NormalBuilding");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Building_1 = require("./Building");
    var Logic_1 = require("../logic/Logic");
    var CCollider_1 = require("../collider/CCollider");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Dungeon_1 = require("../logic/Dungeon");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var IndexZ_1 = require("../utils/IndexZ");
    var Tips_1 = require("../ui/Tips");
    var MapManager_1 = require("../manager/MapManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NormalBuilding = function(_super) {
      __extends(NormalBuilding, _super);
      function NormalBuilding() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.root = null;
        _this.sprite = null;
        _this.shadow = null;
        _this.tips = null;
        _this.resLength = 1;
        _this._breakable = false;
        return _this;
      }
      NormalBuilding.prototype.onLoad = function() {
        var _this = this;
        this.tips.onInteract(function(isLongPress, player) {
          _this.tipsInteract(isLongPress, player);
        });
        this.tips.onEnter(function() {
          _this.tipsEnter();
        });
        this.tips.onExit(function() {
          _this.tipsExit();
        });
      };
      NormalBuilding.prototype.tipsInteract = function(isLongPress, player) {
        this._tipsInteract && this._tipsInteract(isLongPress, player);
      };
      NormalBuilding.prototype.tipsEnter = function() {
        this._tipsEnter && this._tipsEnter();
      };
      NormalBuilding.prototype.tipsExit = function() {
        this._tipsExit && this._tipsExit();
      };
      Object.defineProperty(NormalBuilding.prototype, "breakable", {
        get: function() {
          return this._breakable && this.data.currentHealth > 0 && this.data.currentHealth < 9999;
        },
        enumerable: false,
        configurable: true
      });
      NormalBuilding.prototype.init = function(dungeon, tipsInteract, tipsEnter, tipsExit) {
        this.dungeon = dungeon;
        this._tipsInteract = tipsInteract;
        this._tipsEnter = tipsEnter;
        this._tipsExit = tipsExit;
        this._breakable = this.data.id.indexOf("hitbuilding") > -1;
        if (this.data.custom) return;
        var pcollider = this.getComponent(CCollider_1.default);
        if (this.data.collider.length > 0) {
          var arr = this.data.collider.split(",");
          pcollider.offset = cc.v2(parseInt(arr[0]), parseInt(arr[1]));
          pcollider.setSize(cc.size(parseInt(arr[2]), parseInt(arr[3])), parseInt(arr[4]));
          this.shadow.width = pcollider.w;
          this.shadow.height = pcollider.h;
          this.shadow.x = pcollider.offsetX;
          this.shadow.y = pcollider.offsetY;
        }
        this.sprite.node.scale = this.data.scale;
        if (this.data.spritePos.length > 0) {
          var arr = this.data.spritePos.split(",");
          this.sprite.node.x = parseInt(arr[0]);
          this.sprite.node.y = parseInt(arr[1]);
        }
        this.root.y = this.data.z;
        this.entity.Transform.z = this.data.z;
        this.entity.Move.gravity = 0;
        if (this._breakable) {
          var index = 0;
          while (Logic_1.default.spriteFrameRes(this.data.id + "anim" + index++)) ;
          this.resLength = index - 1;
        }
        var resIndex = this.getResIndex();
        this.changeRes(resIndex);
        resIndex > 0 && resIndex >= this.resLength - 1 && (pcollider.zHeight = this.data.breakZ);
        this.data.indexZ && (this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position.add(cc.v3(0, this.data.indexZ))));
      };
      NormalBuilding.prototype.getResIndex = function() {
        var percent = this.data.maxHealth / this.resLength;
        var index = Math.abs(Math.floor((this.data.maxHealth - this.data.currentHealth) / percent));
        return index - 1 > 0 ? index - 1 : 0;
      };
      NormalBuilding.prototype.changeRes = function(index) {
        if (this.data.custom) return;
        var spriteFrame = Logic_1.default.spriteFrameRes(this.data.id + "anim" + (index < 0 ? 0 : index));
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes("" + this.data.id));
        if (spriteFrame) {
          this.sprite.spriteFrame = spriteFrame;
          this.sprite.node.width = spriteFrame.getOriginalSize().width;
          this.sprite.node.height = spriteFrame.getOriginalSize().height;
        }
      };
      NormalBuilding.prototype.takeDamage = function(damage, from, actor) {
        var _this = this;
        if (!this.breakable) return false;
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        this.data.currentHealth -= damage.getTotalDamage();
        this.changeRes(this.getResIndex());
        this.hitLight(true);
        this.scheduleOnce(function() {
          _this.hitLight(false);
        }, .15);
        if (this.data.currentHealth <= 0) {
          var rand4save = Logic_1.default.mapManager.getRandom4Save(Logic_1.default.mapManager.getRebornSeed(this.seed), MapManager_1.default.RANDOM_BUILDING);
          var arr = this.data.breakEquipItems.split("#");
          for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var name = arr_1[_i];
            var temp = name.split(",");
            temp.length > 1 && rand4save.rand() > 1 - parseInt(temp[1]) && (InventoryManager_1.default.isEquipTag(temp[0]) ? this.dungeon.addEquipment(temp[0], Dungeon_1.default.getPosInMap(this.data.defaultPos), null, 1) : this.dungeon.addItem(this.entity.Transform.position.clone(), temp[0]));
          }
          this.getComponent(CCollider_1.default).zHeight = 16;
        }
        Logic_1.default.mapManager.setCurrentBuildingData(this.data.clone());
        return true;
      };
      NormalBuilding.prototype.hitLight = function(isHit) {
        this.mat || (this.mat = this.sprite.node.getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
      };
      NormalBuilding.PREFIX_PLATFORM = "platform";
      NormalBuilding.PREFIX_HITBUILDING = "hitbuilding";
      NormalBuilding.PREFIX_STAIRS = "stairs";
      NormalBuilding.PREFIX_FURNITURE = "furniture";
      __decorate([ property(cc.Node) ], NormalBuilding.prototype, "root", void 0);
      __decorate([ property(cc.Sprite) ], NormalBuilding.prototype, "sprite", void 0);
      __decorate([ property(cc.Node) ], NormalBuilding.prototype, "shadow", void 0);
      __decorate([ property(Tips_1.default) ], NormalBuilding.prototype, "tips", void 0);
      NormalBuilding = __decorate([ ccclass ], NormalBuilding);
      return NormalBuilding;
    }(Building_1.default);
    exports.default = NormalBuilding;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/MapManager": "MapManager",
    "../ui/Tips": "Tips",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  NoticeDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "967d5EFvotD245D4O3/qmU4", "NoticeDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var BaseDialog_1 = require("./BaseDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NoticeDialog = function(_super) {
      __extends(NoticeDialog, _super);
      function NoticeDialog() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      NoticeDialog.prototype.onLoad = function() {};
      NoticeDialog.prototype.start = function() {};
      NoticeDialog.prototype.show = function() {
        _super.prototype.show.call(this);
      };
      NoticeDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      NoticeDialog = __decorate([ ccclass ], NoticeDialog);
      return NoticeDialog;
    }(BaseDialog_1.default);
    exports.default = NoticeDialog;
    cc._RF.pop();
  }, {
    "../../utils/AudioPlayer": "AudioPlayer",
    "./BaseDialog": "BaseDialog"
  } ],
  OilGoldCount: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12dafP9eVJAZosCqqpFY/Vi", "OilGoldCount");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var EventHelper_1 = require("./EventHelper");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OilGoldCount = function(_super) {
      __extends(OilGoldCount, _super);
      function OilGoldCount() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.fragmentLabel = null;
        _this.gemLabel = null;
        _this.gemCountLerp = 0;
        _this.fragmentCountLerp = 0;
        _this.progreesBar = null;
        return _this;
      }
      OilGoldCount.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_ADD_OILGOLD, function(detail) {
          _this.addCount(detail.count);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_LOSE_OILGOLD, function(detail) {
          if (_this.node) {
            var count = Logic_1.default.playerData.OilGoldData.fragments;
            _this.addCount("" + -count);
            Logic_1.default.saveGroundOilGold(count);
          }
        });
      };
      OilGoldCount.prototype.start = function() {};
      OilGoldCount.prototype.addCount = function(value) {
        if (!this.anim) return;
        Logic_1.default.oilGolds += parseInt(value);
        var gemIndex = Logic_1.default.playerData.OilGoldData.index;
        Logic_1.default.playerData.OilGoldData.valueCopy(Logic_1.default.getOilGoldData(Logic_1.default.oilGolds));
        gemIndex < Logic_1.default.playerData.OilGoldData.index && AudioPlayer_1.default.play(AudioPlayer_1.default.LEVELUP);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_UPDATE_OILGOLD_DATA);
      };
      OilGoldCount.prototype.update = function(dt) {
        this.gemCountLerp = Logic_1.default.lerp(this.gemCountLerp, Logic_1.default.playerData.OilGoldData.level, 5 * dt);
        this.fragmentCountLerp = Logic_1.default.lerp(this.fragmentCountLerp, Logic_1.default.playerData.OilGoldData.fragments, 5 * dt);
        this.gemLabel && (this.gemLabel.string = "" + this.gemCountLerp.toFixed(0));
        this.fragmentLabel && (this.fragmentLabel.string = this.fragmentCountLerp.toFixed(0) + "/" + Logic_1.default.OIL_GOLD_LIST[Logic_1.default.playerData.OilGoldData.index]);
        this.progreesBar && (this.progreesBar.progress = Logic_1.default.lerp(this.progreesBar.progress, Logic_1.default.playerData.OilGoldData.fragments / Logic_1.default.OIL_GOLD_LIST[Logic_1.default.playerData.OilGoldData.index], 5 * dt));
      };
      __decorate([ property(cc.Label) ], OilGoldCount.prototype, "fragmentLabel", void 0);
      __decorate([ property(cc.Label) ], OilGoldCount.prototype, "gemLabel", void 0);
      __decorate([ property(cc.ProgressBar) ], OilGoldCount.prototype, "progreesBar", void 0);
      OilGoldCount = __decorate([ ccclass ], OilGoldCount);
      return OilGoldCount;
    }(cc.Component);
    exports.default = OilGoldCount;
    cc._RF.pop();
  }, {
    "../utils/AudioPlayer": "AudioPlayer",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  OilGoldData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "700faV6hzxA44Hyyhr1kVep", "OilGoldData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var CommonData_1 = require("./CommonData");
    var OilGoldData = function(_super) {
      __extends(OilGoldData, _super);
      function OilGoldData() {
        var _this = _super.call(this) || this;
        _this.value = 0;
        _this.fragments = 0;
        _this.level = 0;
        _this.index = 0;
        _this.common = new CommonData_1.default();
        return _this;
      }
      Object.defineProperty(OilGoldData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      OilGoldData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.common.valueCopy(data.common);
      };
      OilGoldData.prototype.clone = function() {
        var e = new OilGoldData();
        e.valueCopy(this);
        return e;
      };
      return OilGoldData;
    }(BaseData_1.default);
    exports.default = OilGoldData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData",
    "./CommonData": "CommonData"
  } ],
  OilGoldMetal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3de8drSUIxBqaz8jL9AIUhS", "OilGoldMetal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./../logic/EventHelper");
    var IndexZ_1 = require("../utils/IndexZ");
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var Logic_1 = require("../logic/Logic");
    var MetalDagger_1 = require("./MetalDagger");
    var MetalTalentData_1 = require("../data/MetalTalentData");
    var MetalHand_1 = require("./MetalHand");
    var MetalShield_1 = require("./MetalShield");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OilGoldMetal = function(_super) {
      __extends(OilGoldMetal, _super);
      function OilGoldMetal() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.anim = null;
        _this.root = null;
        _this.sprite = null;
        _this.shadow = null;
        _this.idleAngle = 0;
        _this.mode = OilGoldMetal_1.MODE_NONE;
        _this.data = new MetalTalentData_1.default();
        _this.checkTimeDelay = 0;
        return _this;
      }
      OilGoldMetal_1 = OilGoldMetal;
      OilGoldMetal.prototype.onLoad = function() {
        var _this = this;
        _super.prototype.onLoad.call(this);
        this.dagger = new MetalDagger_1.default(this);
        this.hand = new MetalHand_1.default(this);
        this.shield = new MetalShield_1.default(this);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.SELECT_METAL_TALENT, function(detail) {
          _this.node && _this.changeMode(Logic_1.default.getCurrentMetal());
        });
      };
      OilGoldMetal.prototype.start = function() {};
      OilGoldMetal.prototype.init = function(player) {
        this.player = player;
        this.node.parent = this.player.node.parent;
        this.node.setPosition(player.node.position.clone());
        this.entity.Transform.position = this.node.position.clone();
        this.entity.NodeRender.root = this.root;
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
        this.changeMode(Logic_1.default.getCurrentMetal());
      };
      OilGoldMetal.prototype.changeMode = function(data) {
        this.data.valueCopy(data);
        if (-1 != this.data.id.indexOf(MetalTalentData_1.default.METAL_DAGGER)) {
          this.mode = OilGoldMetal_1.MODE_DAGGER;
          this.dagger && this.dagger.ready();
        } else if (-1 != this.data.id.indexOf(MetalTalentData_1.default.METAL_HAND)) {
          this.mode = OilGoldMetal_1.MODE_HAND;
          this.hand && this.hand.ready();
        } else if (-1 != this.data.id.indexOf(MetalTalentData_1.default.METAL_SHIELD)) {
          this.mode = OilGoldMetal_1.MODE_SHIELD;
          this.shield && this.shield.ready();
        } else {
          this.mode = OilGoldMetal_1.MODE_NONE;
          this.playIdle();
        }
      };
      OilGoldMetal.prototype.playIdle = function() {
        this.playAnim(OilGoldMetal_1.ANIM_IDLE);
      };
      OilGoldMetal.prototype.onColliderStay = function(other, self) {
        self.w > 0 && self.h > 0 && this.player && (this.mode == OilGoldMetal_1.MODE_DAGGER ? this.dagger && this.dagger.attackStep.IsExcuting && this.dagger.attacking(other, self) : this.mode == OilGoldMetal_1.MODE_HAND ? this.hand && this.hand.attackStep.IsExcuting && this.hand.attacking(other, self) : this.mode == OilGoldMetal_1.MODE_SHIELD && this.shield && this.shield.attackStep.IsExcuting && this.shield.attacking(other, self));
      };
      OilGoldMetal.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      OilGoldMetal.prototype.updateLogic = function(dt) {
        if (!this.player) return;
        this.mode == OilGoldMetal_1.MODE_DAGGER ? this.dagger && this.dagger.updateLogic(dt) : this.mode == OilGoldMetal_1.MODE_HAND ? this.hand && this.hand.updateLogic(dt) : this.mode == OilGoldMetal_1.MODE_SHIELD && this.shield && this.shield.updateLogic(dt);
        this.isCheckTimeDelay(dt) && this.followPlayer();
        this.entity.Transform.base = this.player.entity.Transform.base;
        var y = this.root.y - this.entity.Transform.base;
        y < 0 && (y = 0);
        var scale = 1 - y / 64;
        this.shadow.scale = scale < .5 ? .5 : scale;
        this.shadow.y = this.entity.Transform.base;
      };
      OilGoldMetal.prototype.getPlayerFarPosition = function(player, distance, angleOffset) {
        var hv = player.Hv.clone();
        var pos = cc.v3(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180).mul(distance));
        return player.node.position.clone().addSelf(cc.v3(0, 48).addSelf(pos));
      };
      OilGoldMetal.prototype.followPlayer = function() {
        if (this.dagger.isAttacking || this.hand.IsAttacking || this.shield.isAttacking) return;
        var pos = this.getPlayerFarPosition(this.player, -50, this.idleAngle);
        this.idleAngle += 20;
        this.idleAngle > 360 && (this.idleAngle = 0);
        var offset = pos.sub(this.node.position);
        var mag = offset.mag();
        var speed = 1;
        if (mag < 50) {
          speed = 1;
          this.dagger.ready();
          this.shield.ready();
        } else speed = mag < 100 ? 2 : mag < 200 ? 4 : 8;
        var ps = offset.normalizeSelf().mulSelf(speed);
        this.entity.Move.linearVelocity = cc.v2(ps.x, ps.y);
      };
      OilGoldMetal.prototype.playAnim = function(animName, immediate) {
        (!immediate && !this.anim.getAnimationState(animName).isPlaying || immediate) && this.anim.play(animName);
      };
      OilGoldMetal.prototype.getNearestEnemyActor = function(distance, needRefresh) {
        ActorUtils_1.default.isTargetCanTrack(this.currentTarget) && !needRefresh || (this.currentTarget = ActorUtils_1.default.getNearestEnemyActor(this.node.position, false, this.player.dungeon, distance));
        return this.currentTarget;
      };
      OilGoldMetal.prototype.AnimHandAttackFinish = function() {
        this.hand && this.hand.ready();
      };
      OilGoldMetal.prototype.DashTime = function() {
        this.hand && this.hand.dash();
      };
      var OilGoldMetal_1;
      OilGoldMetal.MODE_NONE = 0;
      OilGoldMetal.MODE_DAGGER = 1;
      OilGoldMetal.MODE_HAND = 2;
      OilGoldMetal.MODE_SHIELD = 3;
      OilGoldMetal.ANIM_IDLE = "MetalIdle";
      OilGoldMetal.ANIM_DAGGER_IDLE = "MetalDaggerIdle";
      OilGoldMetal.ANIM_HAND_IDLE = "MetalHandIdle";
      OilGoldMetal.ANIM_HAND_ATTACK1 = "MetalHandAttack1";
      OilGoldMetal.ANIM_SHIELD_IDLE = "MetalShieldIdle";
      OilGoldMetal.ANIM_SHIELD_HIDE = "MetalShieldHide";
      __decorate([ property(cc.Animation) ], OilGoldMetal.prototype, "anim", void 0);
      __decorate([ property(cc.Node) ], OilGoldMetal.prototype, "root", void 0);
      __decorate([ property(cc.Node) ], OilGoldMetal.prototype, "sprite", void 0);
      __decorate([ property(cc.Node) ], OilGoldMetal.prototype, "shadow", void 0);
      OilGoldMetal = OilGoldMetal_1 = __decorate([ ccclass ], OilGoldMetal);
      return OilGoldMetal;
    }(BaseColliderComponent_1.default);
    exports.default = OilGoldMetal;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../data/MetalTalentData": "MetalTalentData",
    "../logic/Logic": "Logic",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/IndexZ": "IndexZ",
    "./../logic/EventHelper": "EventHelper",
    "./MetalDagger": "MetalDagger",
    "./MetalHand": "MetalHand",
    "./MetalShield": "MetalShield"
  } ],
  OilGoldTalent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6f51cUn1yVCZZrG/Gw4Zdww", "OilGoldTalent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var FromData_1 = require("../data/FromData");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var Shooter_1 = require("../logic/Shooter");
    var FireGhost_1 = require("./FireGhost");
    var Talent_1 = require("./Talent");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var StatusManager_1 = require("../manager/StatusManager");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var Boss_1 = require("../boss/Boss");
    var AreaOfEffectData_1 = require("../data/AreaOfEffectData");
    var NonPlayerManager_1 = require("../manager/NonPlayerManager");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var CoolDownView_1 = require("../ui/CoolDownView");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var Utils_1 = require("../utils/Utils");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OilGoldTalent = function(_super) {
      __extends(OilGoldTalent, _super);
      function OilGoldTalent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.aoe = null;
        _this.fireball = null;
        _this.icethron = null;
        _this.fireGhost = null;
        _this.healingLight = null;
        _this.rageLight = null;
        _this.broomPrefab = null;
        _this.cookingPrefab = null;
        _this.swordLightPrefab = null;
        _this.smokePrefab = null;
        _this.skyhandPrefab = null;
        _this.daggerLightPrefab = null;
        _this.fireGhostNum = 0;
        return _this;
      }
      OilGoldTalent.prototype.onLoad = function() {
        var _this = this;
        this.ghostPool = new cc.NodePool(FireGhost_1.default);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.POOL_DESTORY_FIREGHLOST, function(detail) {
          _this.destroyGhost(detail.targetNode);
        });
      };
      OilGoldTalent.prototype.destroyGhost = function(ghostNode) {
        if (!ghostNode) return;
        ghostNode.active = false;
        if (this.ghostPool) {
          this.ghostPool.put(ghostNode);
          this.fireGhostNum--;
          cc.log("destroyGhost");
        }
      };
      OilGoldTalent.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.coolDownId = CoolDownView_1.default.PROFESSION;
        var storePointMax = 1;
        this.data.resName == Talent_1.default.TALENT_014 && (storePointMax = 3);
        this.initCoolDown(data, storePointMax);
      };
      OilGoldTalent.prototype.skillCanUse = function() {
        switch (this.data.resName) {
         case Talent_1.default.TALENT_000:
         case Talent_1.default.TALENT_010:
         case Talent_1.default.TALENT_015:
          return false;

         case Talent_1.default.TALENT_009:
          return this.canSteal();

         case Talent_1.default.TALENT_019:
          return this.player.CanJump && !this.player.sc.isJumping;
        }
        return true;
      };
      OilGoldTalent.prototype.doSkill = function() {
        this.excuteSkill(null);
        for (var _i = 0, _a = this.player.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          s.node && this.excuteSkill(s);
        }
      };
      OilGoldTalent.prototype.excuteSkill = function(shadowPlayer) {
        var _this = this;
        var shooterEx = shadowPlayer ? shadowPlayer.shooterEx : this.player.shooterEx;
        switch (this.data.resName) {
         case Talent_1.default.TALENT_000:
          Utils_1.default.toast("\u68a6\u5883\u5f00\u53d1\u4e2d,\u65e0\u6cd5\u4f7f\u7528\u3002");
          break;

         case Talent_1.default.TALENT_001:
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
          this.shoot(shooterEx, 0, 0, "bullet040", null, null);
          break;

         case Talent_1.default.TALENT_002:
          this.healing();
          break;

         case Talent_1.default.TALENT_003:
          this.cooking(shooterEx);
          break;

         case Talent_1.default.TALENT_004:
          this.showIceThron(shooterEx);
          break;

         case Talent_1.default.TALENT_005:
          shadowPlayer || this.rageShoot();
          break;

         case Talent_1.default.TALENT_006:
          this.flash(shadowPlayer);
          break;

         case Talent_1.default.TALENT_007:
          this.addSwordLight(shooterEx);
          break;

         case Talent_1.default.TALENT_008:
          this.addDaggerLight(shooterEx, shadowPlayer);
          break;

         case Talent_1.default.TALENT_009:
          this.steal(shadowPlayer);
          break;

         case Talent_1.default.TALENT_010:
          break;

         case Talent_1.default.TALENT_011:
          shadowPlayer || this.aimedShoot();
          break;

         case Talent_1.default.TALENT_012:
          this.addBroom(shooterEx);
          break;

         case Talent_1.default.TALENT_013:
          this.showFireBall(shooterEx);
          break;

         case Talent_1.default.TALENT_014:
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL1);
          this.shoot(shooterEx, Shooter_1.default.ARC_EX_NUM_8, 0, "bullet035", null, null);
          this.scheduleOnce(function() {
            _this.IsExcuting = false;
          }, .1);
          break;

         case Talent_1.default.TALENT_015:
          break;

         case Talent_1.default.TALENT_016:
          shadowPlayer ? this.addClearCircle(shadowPlayer.shooterEx) : this.addClearCircle(shooterEx);
          break;

         case Talent_1.default.TALENT_017:
          this.showSmoke(shooterEx);
          break;

         case Talent_1.default.TALENT_018:
          this.addShadowFighter(shadowPlayer);
          break;

         case Talent_1.default.TALENT_019:
          this.jump(shooterEx);
        }
      };
      OilGoldTalent.prototype.addClearCircle = function(shooterEx) {
        this.player.stopAllDebuffs();
        this.player.dungeon.nonPlayerManager.isPetAlive() && this.player.dungeon.nonPlayerManager.pet.stopAllDebuffs();
        var aoe = shooterEx.fireAoe(this.aoe, new AreaOfEffectData_1.default().init(2, .2, 0, this.player.IsVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(this.player.getCenterPosition()), false, false, true, false, false, new DamageData_1.default(0), new FromData_1.default(), []), cc.v3(0, 32), 0, null, true);
        shooterEx.updateCustomAoe(aoe, [ Logic_1.default.spriteFrameRes("clearcircle1"), Logic_1.default.spriteFrameRes("clearcircle2"), Logic_1.default.spriteFrameRes("clearcircle3"), Logic_1.default.spriteFrameRes("clearcircle4") ], false, true, 4);
      };
      OilGoldTalent.prototype.addShadowFighter = function(shadowPlayer) {
        var _a;
        for (var i = 0; i < 3; i++) {
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.default.nonplayers[NonPlayerManager_1.default.NON_SHADOW]);
          var fc = this.player.data.FinalCommon;
          data.Common.damageMin = this.player.data.getFinalAttackPoint().getTotalDamage();
          data.Common.maxHealth = fc.MaxHealth;
          this.player.weaponRight.meleeWeapon.dungeon.nonPlayerManager.addNonPlayerFromData(data, shadowPlayer ? shadowPlayer.node.position : this.player.node.position, null === (_a = this.player.entity) || void 0 === _a ? void 0 : _a.Transform.z, this.player.weaponRight.meleeWeapon.dungeon);
        }
      };
      OilGoldTalent.prototype.healing = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        var light = cc.instantiate(this.healingLight);
        light.parent = this.player.node;
        light.position = cc.v3(0, 64);
        light.zIndex = IndexZ_1.default.OVERHEAD;
        this.player.addStatus(StatusManager_1.default.HEALING, new FromData_1.default());
        this.player.dungeon.nonPlayerManager.isPetAlive() && this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.HEALING, new FromData_1.default());
      };
      OilGoldTalent.prototype.rageShoot = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        var light = cc.instantiate(this.rageLight);
        light.parent = this.player.node;
        light.position = cc.v3(0, 64);
        light.zIndex = IndexZ_1.default.OVERHEAD;
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
          light && cc.isValid(light) && light.destroy();
        }, 3);
      };
      OilGoldTalent.prototype.flash = function(shadowPlayer) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.TAKEPHOTO);
        cc.tween(this.sprite.node).call(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_FLASH_SPEED, new FromData_1.default());
          _this.player.dungeon.nonPlayerManager.isPetAlive() && _this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.TALENT_FLASH_SPEED, new FromData_1.default());
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("flash");
          _this.sprite.node.width = 128;
          _this.sprite.node.height = 128;
          _this.sprite.node.opacity = 255;
          _this.sprite.node.position = cc.v3(0, 32);
        }).to(.1, {
          opacity: 0
        }).call(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("singleColor");
          _this.sprite.node.width = 2e3;
          _this.sprite.node.height = 2e3;
          _this.sprite.node.opacity = 255;
        }).to(.1, {
          opacity: 0
        }).call(function() {
          StatusManager_1.default.addStatus2NearEnemies(_this.player, shadowPlayer ? shadowPlayer.node : _this.player.node, StatusManager_1.default.TALENT_FLASH_DIZZ, _this.player.IsVariation ? 500 : 400, new FromData_1.default());
          _this.sprite.spriteFrame = null;
        }).start();
      };
      OilGoldTalent.prototype.aimedShoot = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.RELOAD);
        cc.tween(this.sprite.node).call(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_AIMED, new FromData_1.default());
          _this.player.dungeon.nonPlayerManager.isPetAlive() && _this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.TALENT_AIMED, new FromData_1.default());
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talentshoot");
          _this.sprite.node.width = 64;
          _this.sprite.node.height = 64;
          _this.sprite.node.opacity = 255;
          _this.sprite.node.scale = 1;
          _this.sprite.node.position = cc.v3(0, 128);
        }).repeat(5, cc.tween().to(1, {
          scale: 1.5
        }).to(1, {
          scale: 1
        })).call(function() {
          _this.sprite.spriteFrame = null;
        }).start();
      };
      OilGoldTalent.prototype.jump = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.JUMP_FALL);
        this.player.talentJump(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
          var d = _this.player.data.getFinalAttackPoint();
          d.isMelee = true;
          d.isCriticalStrike = true;
          var scale = 2;
          _this.player.IsVariation && (scale += 1);
          shooterEx.fireAoe(_this.skyhandPrefab, new AreaOfEffectData_1.default().init(0, .15, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, false, d, new FromData_1.default(), [ StatusManager_1.default.DIZZ ]));
          _this.talentSkill.IsExcuting = false;
        });
      };
      OilGoldTalent.prototype.canSteal = function() {
        var actor = ActorUtils_1.default.getNearestEnemyActor(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon);
        if (!actor) return false;
        var monster = actor.getComponent(NonPlayer_1.default);
        var boss = actor.getComponent(Boss_1.default);
        if (monster && monster.data.noLoot < 1) return true;
        if (boss) return true;
        return false;
      };
      OilGoldTalent.prototype.steal = function(shadowPlayer) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.FIREBALL);
        var node = ActorUtils_1.default.getNearestEnemyActor(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon);
        if (!node) return;
        var monster = node.getComponent(NonPlayer_1.default);
        var boss = node.getComponent(Boss_1.default);
        monster && monster.data.noLoot < 1 && monster.getLoot();
        boss && boss.getLoot();
        if (!shadowPlayer) {
          this.sprite.node.width = 128;
          this.sprite.node.height = 128;
          this.sprite.node.opacity = 255;
          this.sprite.node.scale = 1;
          this.sprite.node.position = cc.v3(0, 128);
          cc.tween(this.sprite.node).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand01");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand02");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand03");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand04");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = null;
          }).start();
        }
      };
      OilGoldTalent.prototype.showSmoke = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        var scale = 1;
        this.player.IsVariation && (scale += 1);
        this.shoot(shooterEx, 0, 0, "bullet041", this.smokePrefab, new AreaOfEffectData_1.default().init(7, .1, 0, scale, IndexZ_1.default.OVERHEAD, false, false, false, false, false, new DamageData_1.default(), new FromData_1.default(), [ StatusManager_1.default.WINE_CLOUD ]));
      };
      OilGoldTalent.prototype.showFireBall = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_FIREBALL);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        d.isMelee = true;
        var scale = 4;
        this.player.IsVariation && (scale += 1);
        shooterEx.fireAoe(this.fireball, new AreaOfEffectData_1.default().init(0, .1, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.BURNING ]));
      };
      OilGoldTalent.prototype.showIceThron = function(shooterEx) {
        this.scheduleOnce(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_ICETHRON);
        }, 1);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        d.isMelee = true;
        var offset1 = 100;
        var offset2 = 60;
        var scale = 3;
        if (this.player.IsVariation) {
          scale += 1;
          offset1 = 150;
          offset2 = 90;
        }
        var angles1 = [ 0, 45, 90, 135, 180, 225, 270, 315 ];
        var posRight = [ cc.v3(0, offset1), cc.v3(-offset2, offset2), cc.v3(-offset1, 0), cc.v3(-offset2, -offset2), cc.v3(0, -offset1), cc.v3(offset2, -offset2), cc.v3(offset1, 0), cc.v3(offset2, offset2) ];
        var posLeft = [ cc.v3(0, -offset1), cc.v3(-offset2, -offset2), cc.v3(-offset1, 0), cc.v3(-offset2, offset2), cc.v3(0, offset1), cc.v3(offset2, offset2), cc.v3(offset1, 0), cc.v3(offset2, -offset2) ];
        var a1 = [ angles1 ];
        var a = a1;
        var index = 0;
        for (var i = 0; i < a[index].length; i++) shooterEx.fireAoe(this.icethron, new AreaOfEffectData_1.default().init(0, 2, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.v3(posRight[i]), angles1[i], null, true);
      };
      OilGoldTalent.prototype.changePerformance = function() {};
      OilGoldTalent.prototype.takeDamage = function(damageData, from, actor) {
        return false;
      };
      OilGoldTalent.prototype.addLighteningFall = function(isArea, damagePoint) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_LIGHTENINGFALL, {
          pos: ActorUtils_1.default.getNearestEnemyPosition(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon, true),
          showArea: isArea,
          damage: damagePoint
        });
      };
      OilGoldTalent.prototype.addBroom = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        var scale = 1.5;
        this.player.IsVariation && (scale += 1);
        var aoe = shooterEx.fireAoe(this.broomPrefab, new AreaOfEffectData_1.default().init(0, .5, .2, scale, IndexZ_1.default.OVERHEAD, false, true, true, true, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.v3(0, 32 * this.player.node.scaleY));
        this.schedule(function() {
          aoe && aoe.entity && aoe.isValid && (aoe.entity.Transform.position = _this.player.node.position.clone());
        }, .02, 100);
      };
      OilGoldTalent.prototype.cooking = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        var scale = 1;
        this.player.IsVariation && (scale += 1);
        shooterEx.fireAoe(this.cookingPrefab, new AreaOfEffectData_1.default().init(0, 2, 0, scale, IndexZ_1.default.OVERHEAD, false, false, false, false, false, d, new FromData_1.default(), []), cc.v3(0, 32), 0, function(actor) {
          var monster = actor.node.getComponent(NonPlayer_1.default);
          monster && monster.dungeon.addItem(monster.node.position.clone(), "foodmonster" + monster.data.resName.replace("monster", ""));
          var boss = actor.node.getComponent(Boss_1.default);
          boss && boss.dungeon.addItem(boss.node.position.clone(), "foodboss" + boss.data.resName.replace("iconboss", ""));
        });
      };
      OilGoldTalent.prototype.addSwordLight = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SWORD_SHOW);
        var d = new DamageData_1.default();
        d.isMelee = true;
        var scale = 5;
        d.physicalDamage = 2 + Logic_1.default.playerData.OilGoldData.level;
        if (this.player.weaponRight.meleeWeapon.IsSword) {
          d = this.player.data.getFinalAttackPoint();
          scale = 6;
        }
        this.player.IsVariation && (scale += 1);
        var swordlight = shooterEx.fireAoe(this.swordLightPrefab, new AreaOfEffectData_1.default().init(0, .35, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]));
        var color = cc.color(255, 255, 255).fromHEX(this.player.inventoryMgr.equips[InventoryManager_1.default.WEAPON].lightcolor);
        swordlight.node.getChildByName("sprite").color = color;
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
        }, 1);
      };
      OilGoldTalent.prototype.addDaggerLight = function(shooterEx, shadowPlayer) {
        var _this = this;
        if (!this.player.weaponRight.meleeWeapon.IsDagger) {
          shadowPlayer || this.player.addStatus(StatusManager_1.default.TALENT_INVISIBLE, new FromData_1.default());
          return;
        }
        var duration = 2.4;
        shadowPlayer || this.scheduleOnce(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_INVISIBLE, new FromData_1.default());
        }, duration);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SWORD_SHOW);
        var scale = 2;
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        d.physicalDamage = d.physicalDamage / 2;
        this.player.IsVariation && (scale += 1);
        var swordlight = shooterEx.fireAoe(this.daggerLightPrefab, new AreaOfEffectData_1.default().init(0, duration / 10, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, false, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.Vec3.ZERO);
        var color = cc.color(255, 255, 255).fromHEX(this.player.inventoryMgr.equips[InventoryManager_1.default.WEAPON].lightcolor);
        for (var _i = 0, _a = swordlight.node.getComponentsInChildren(cc.Sprite); _i < _a.length; _i++) {
          var sprite = _a[_i];
          sprite.node.color = shadowPlayer ? cc.Color.BLACK : color;
          sprite.node.opacity = 200;
        }
        this.player.vanish(duration);
        shadowPlayer && shadowPlayer.vanish(duration);
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
        }, 3);
      };
      OilGoldTalent.prototype.initFireGhosts = function() {
        var length = 5;
        var count = this.fireGhostNum;
        for (var i = 0; i < length - count; i++) {
          var ghostNode = null;
          this.ghostPool.size() > 0 && (ghostNode = this.ghostPool.get());
          ghostNode && !ghostNode.active || (ghostNode = cc.instantiate(this.fireGhost));
          this.fireGhostNum++;
          ghostNode.active = true;
          var fg = ghostNode.getComponent(FireGhost_1.default);
          fg.initCollider();
          this.player.node.parent.addChild(fg.node);
          fg.init(this.player, 72 * i);
        }
      };
      OilGoldTalent.prototype.addDashGhost = function(shooterEx) {
        var aoe = shooterEx.fireAoe(this.aoe, new AreaOfEffectData_1.default().init(.4, 2, 0, 1, IndexZ_1.default.ACTOR, false, false, false, false, false, new DamageData_1.default(.2), new FromData_1.default(), []), shooterEx.node.convertToNodeSpaceAR(this.player.node.convertToWorldSpaceAR(cc.v3(0, this.player.entity.Transform.z))), 0, null, true);
        shooterEx.updateCustomAoe(aoe, [ this.player.sprite.spriteFrame ], false, true, 1, cc.color(189, 183, 107), 200, true, true, 48, 32);
      };
      __decorate([ property(cc.Sprite) ], OilGoldTalent.prototype, "sprite", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "aoe", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "fireball", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "icethron", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "fireGhost", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "healingLight", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "rageLight", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "broomPrefab", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "cookingPrefab", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "swordLightPrefab", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "smokePrefab", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "skyhandPrefab", void 0);
      __decorate([ property(cc.Prefab) ], OilGoldTalent.prototype, "daggerLightPrefab", void 0);
      OilGoldTalent = __decorate([ ccclass ], OilGoldTalent);
      return OilGoldTalent;
    }(Talent_1.default);
    exports.default = OilGoldTalent;
    cc._RF.pop();
  }, {
    "../boss/Boss": "Boss",
    "../data/AreaOfEffectData": "AreaOfEffectData",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../data/NonPlayerData": "NonPlayerData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../logic/NonPlayer": "NonPlayer",
    "../logic/Shooter": "Shooter",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/NonPlayerManager": "NonPlayerManager",
    "../manager/StatusManager": "StatusManager",
    "../ui/CoolDownView": "CoolDownView",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/Utils": "Utils",
    "./FireGhost": "FireGhost",
    "./Talent": "Talent"
  } ],
  OilGold: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8833cW2JN9EQJVhihMruuSF", "OilGold");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var EventHelper_1 = require("../logic/EventHelper");
    var Random_1 = require("../utils/Random");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var BaseNodeComponent_1 = require("../base/BaseNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OilGold = function(_super) {
      __extends(OilGold, _super);
      function OilGold() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.value = 0;
        _this.isReady = false;
        _this.isReal = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      OilGold_1 = OilGold;
      OilGold.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      OilGold.prototype.onEnable = function() {
        var _this = this;
        var speed = 6;
        var x = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        var y = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        this.entity.Move.linearVelocity = cc.v2(x, y);
        this.entity.Move.damping = Logic_1.default.getRandomNum(2, 6);
        this.isReady = false;
        this.scheduleOnce(function() {
          _this.isReady = true;
          _this.entity.Transform.position = _this.node.position.clone();
          _this.entity.NodeRender.node = _this.node;
        }, 1);
      };
      OilGold.prototype.changeValue = function(value) {
        this.value = value;
        this.value >= OilGold_1.FACE_VALUE ? this.node.scale = 2 : this.node.scale = 1;
      };
      OilGold.prototype.getFinalValue = function() {
        var value = this.value;
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          break;

         case Logic_1.default.CHAPTER01:
          value *= 10;
          break;

         case Logic_1.default.CHAPTER02:
          value *= 100;
          break;

         case Logic_1.default.CHAPTER03:
          value *= 1e3;
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          value *= 1e4;
        }
        return value;
      };
      OilGold.prototype.start = function() {};
      OilGold.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      OilGold.prototype.getNearPlayerDistance = function(playerNode) {
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, playerNode.position.clone().addSelf(cc.v3(0, 32)));
        return dis;
      };
      OilGold.prototype.update = function(dt) {
        if (this.isCheckTimeDelay(dt) && this.player && this.getNearPlayerDistance(this.player.node) < 1600 && this.node.active && this.isReady) {
          var p = this.player.node.position.clone();
          p.y += 10;
          var pos = p.sub(this.node.position);
          if (!pos.equals(cc.Vec3.ZERO)) {
            pos = pos.normalizeSelf();
            this.entity.Move.linearVelocity = cc.v2(pos.x, pos.y).normalize().mul(16);
            this.entity.Move.damping = 1;
          }
        }
        if (this.player && this.getNearPlayerDistance(this.player.node) < 64 && this.node.active && this.isReady) {
          this.isReady = false;
          AudioPlayer_1.default.play(AudioPlayer_1.default.OILGOLD);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_OILGOLD, {
            count: this.getFinalValue()
          });
          EventHelper_1.EventHelper.emit("destoryoilgold", {
            oilGoldNode: this.node
          });
        }
      };
      var OilGold_1;
      OilGold.FACE_VALUE = 100;
      OilGold = OilGold_1 = __decorate([ ccclass ], OilGold);
      return OilGold;
    }(BaseNodeComponent_1.default);
    exports.default = OilGold;
    cc._RF.pop();
  }, {
    "../base/BaseNodeComponent": "BaseNodeComponent",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Random": "Random"
  } ],
  OilLake: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8cd153I1qFEbb/uteHyUJpM", "OilLake");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PerlinNoise2D_1 = require("./PerlinNoise2D");
    var Random_1 = require("../utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OilLake = function() {
      function OilLake() {
        this.map = new Array();
        var threshold = .14, threshold2 = -.14;
        var x0 = 0, y0 = 0, dx = 20, dy = 20;
        var perlin = new PerlinNoise2D_1.default();
        perlin.seed(Random_1.default.rand());
        dx = 20 + this.getRandomNum(20);
        dy = 20 + this.getRandomNum(20);
        x0 = this.getRandomNum(9999);
        y0 = this.getRandomNum(9999);
        var w = OilLake_1.WIDTH;
        var h = OilLake_1.HEIGHT;
        this.map = new Array();
        for (var i = 0; i < w; i++) {
          this.map[i] = new Array();
          for (var j = 0; j < h; j++) {
            this.map[i][j] = ".";
            var x = dx * i / w + x0, y = dy * j / h + y0;
            var p = perlin.simplex2(x, y);
            p > threshold ? this.map[i][j] = "Y" : p < threshold2 && (this.map[i][j] = "~");
            var pr = Random_1.default.rand();
            pr >= 0 && pr < .2 && "~" != this.map[i][j] && (this.map[i][j] = "o");
            pr >= .2 && pr < .25 && "~" != this.map[i][j] && (this.map[i][j] = "w");
          }
        }
      }
      OilLake_1 = OilLake;
      OilLake.prototype.getRandomNum = function(max) {
        return Math.round(Random_1.default.rand() * max);
      };
      OilLake.prototype.getDisPlay = function() {
        var str = "";
        for (var j = OilLake_1.HEIGHT - 1; j >= 0; j--) {
          for (var i = 0; i < OilLake_1.WIDTH; i++) str += this.map[i][j];
          str += "\n";
        }
        return str;
      };
      var OilLake_1;
      OilLake.WIDTH = 64;
      OilLake.HEIGHT = 64;
      OilLake = OilLake_1 = __decorate([ ccclass ], OilLake);
      return OilLake;
    }();
    exports.default = OilLake;
    cc._RF.pop();
  }, {
    "../utils/Random": "Random",
    "./PerlinNoise2D": "PerlinNoise2D"
  } ],
  OnContactListener: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b0fc5P4IfpMPqUea64e7JrA", "OnContactListener");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  OptimizeList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "47b462OitBH0a4DI/I9EWAO", "OptimizeList");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OptimizeList = function(_super) {
      __extends(OptimizeList, _super);
      function OptimizeList() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      OptimizeList.prototype.onLoad = function() {
        if (!this.getScrollview()) {
          cc.error("\u4e0d\u5b58\u5728ScrollView\u7ec4\u4ef6\uff01");
          return;
        }
        this.node.on("scrolling", this._event_update_opacity, this);
        this.getScrollview().content.on(cc.Node.EventType.CHILD_REMOVED, this._event_update_opacity, this);
        this.getScrollview().content.on(cc.Node.EventType.CHILD_REORDER, this._event_update_opacity, this);
      };
      OptimizeList.prototype.getScrollview = function() {
        this.scrollview || (this.scrollview = this.node.getComponent(cc.ScrollView));
        return this.scrollview;
      };
      OptimizeList.prototype._get_bounding_box_to_world = function(node_o_) {
        var w_n = node_o_._contentSize.width;
        var h_n = node_o_._contentSize.height;
        var rect_o = cc.rect(-node_o_._anchorPoint.x * w_n, -node_o_._anchorPoint.y * h_n, w_n, h_n);
        node_o_._calculWorldMatrix();
        rect_o.transformMat4(rect_o, node_o_._worldMatrix);
        return rect_o;
      };
      OptimizeList.prototype._check_collision = function(node_o_) {
        var rect1_o = this._get_bounding_box_to_world(this.getScrollview().content.parent);
        var rect2_o = this._get_bounding_box_to_world(node_o_);
        rect1_o.width += .5 * rect1_o.width;
        rect1_o.height += .5 * rect1_o.height;
        rect1_o.x -= .25 * rect1_o.width;
        rect1_o.y -= .25 * rect1_o.height;
        return rect1_o.intersects(rect2_o);
      };
      OptimizeList.prototype._event_update_opacity = function() {
        var _this = this;
        this.getScrollview().content.children.forEach(function(v1_o) {
          v1_o.opacity = _this._check_collision(v1_o) ? 255 : 0;
        });
      };
      OptimizeList = __decorate([ ccclass ], OptimizeList);
      return OptimizeList;
    }(cc.Component);
    exports.default = OptimizeList;
    cc._RF.pop();
  }, {} ],
  OrganizationTalent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05cb5HVifxPKYxNiXzzrtHe", "OrganizationTalent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AvatarData_1 = require("../data/AvatarData");
    var FromData_1 = require("../data/FromData");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var StatusData_1 = require("../data/StatusData");
    var TriggerData_1 = require("../data/TriggerData");
    var Logic_1 = require("../logic/Logic");
    var StatusManager_1 = require("../manager/StatusManager");
    var CoolDownView_1 = require("../ui/CoolDownView");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Utils_1 = require("../utils/Utils");
    var Talent_1 = require("./Talent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OrganizationTalent = function(_super) {
      __extends(OrganizationTalent, _super);
      function OrganizationTalent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.energyShieldList = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      OrganizationTalent.prototype.onLoad = function() {};
      OrganizationTalent.prototype.changePerformance = function() {};
      OrganizationTalent.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.coolDownId = CoolDownView_1.default.ORGANIZATION;
        var storePointMax = 1;
        this.player.data.AvatarData.organizationIndex == AvatarData_1.default.GURAD ? storePointMax = 1 + Math.floor(Logic_1.default.playerData.OilGoldData.level / 5) : this.player.data.AvatarData.organizationIndex == AvatarData_1.default.FOLLOWER && this.player.initShadowList(true, Math.floor(Logic_1.default.playerData.OilGoldData.level / 5 + 1), 30 + 2 * Logic_1.default.playerData.OilGoldData.level);
        this.initCoolDown(data, storePointMax);
      };
      OrganizationTalent.prototype.skillCanUse = function() {
        return true;
      };
      OrganizationTalent.prototype.doSkill = function() {
        var _this = this;
        var _a, _b;
        this.player.exTrigger(TriggerData_1.default.GROUP_USE, TriggerData_1.default.TYPE_USE_TALENT, null, null);
        if (this.player.data.AvatarData.organizationIndex == AvatarData_1.default.GURAD) {
          if (this.energyShieldList.length > this.talentSkill.StorePointMax) {
            var s = this.energyShieldList.pop();
            s.isShow = false;
            if (s && s.isValid) {
              null === (_a = s.base) || void 0 === _a ? void 0 : _a.destroy();
              s.destroyEntityNode();
            }
          }
          this.player.dungeon.buildingManager.addEnergyShield(this.player, function(shield) {
            if (shield) {
              _this.energyShieldList.unshift(shield);
              _this.scheduleOnce(function() {
                _this.talentSkill.IsExcuting = false;
              }, 1);
            }
          });
        } else if (this.player.data.AvatarData.organizationIndex == AvatarData_1.default.HUNTER) if (this.player.dungeon.nonPlayerManager.isPetAlive()) {
          var d = new NonPlayerData_1.default();
          d.valueCopy(Logic_1.default.nonplayers[this.player.data.AvatarData.petName]);
          var data = new StatusData_1.default();
          data.valueCopy(Logic_1.default.status[StatusManager_1.default.PET_DOG]);
          data.Common.realRate += 1 * Logic_1.default.playerData.OilGoldData.level;
          data.Common.remoteCritRate = 100;
          data.Common.realDamage += Logic_1.default.playerData.OilGoldData.level;
          data.realDamageOvertime -= Logic_1.default.playerData.OilGoldData.level / 5;
          var lastMaxHealth = this.player.dungeon.nonPlayerManager.pet.data.Common.maxHealth;
          this.player.dungeon.nonPlayerManager.pet.data.Common.maxHealth = d.Common.maxHealth + 5 * Logic_1.default.playerData.OilGoldData.level + 3 * this.data.useCount;
          this.player.dungeon.nonPlayerManager.pet.addCustomStatus(data, new FromData_1.default());
          AudioPlayer_1.default.play(d.specialAudio);
          Utils_1.default.toast("\u5ba0\u7269\u83b7\u5f97" + (this.player.dungeon.nonPlayerManager.pet.data.Common.maxHealth - lastMaxHealth) + "\u70b9\u8840\u91cf\u4e0a\u9650\uff0c\u5f53\u524d\u4e3a" + this.player.dungeon.nonPlayerManager.pet.data.Common.maxHealth + "\uff0c\u653b\u51fb\u529b\u4e3a" + d.getAttackPoint().getTotalDamage(), false, true);
        } else {
          if (this.data.useCount > 1) {
            this.data.useCount = Math.floor(this.data.useCount / 2);
            this.data.useCount < 1 && (this.data.useCount = 1);
          }
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.default.nonplayers[this.player.data.AvatarData.petName]);
          data.Common.maxHealth += 5 * Logic_1.default.playerData.OilGoldData.level + 3 * this.data.useCount;
          data.currentHealth = data.Common.maxHealth;
          data.Common.damageMin += Logic_1.default.playerData.OilGoldData.level;
          data.Common.remoteDamage += Logic_1.default.playerData.OilGoldData.level;
          data.Common.defence += Logic_1.default.playerData.OilGoldData.level;
          this.player.dungeon.nonPlayerManager.addPetFromData(data, this.player.node.position, null === (_b = this.player.entity) || void 0 === _b ? void 0 : _b.Transform.z, this.player.dungeon);
          AudioPlayer_1.default.play(data.specialAudio);
          Utils_1.default.toast("\u4f60\u53ec\u5524\u4e86\u5ba0\u7269" + data.nameCn + "\uff1a\u8840\u91cf\u4e0a\u9650\u4e3a" + data.Common.maxHealth + "\uff0c\u653b\u51fb\u529b\u4e3a" + data.getAttackPoint().getTotalDamage(), false, true);
        } else if (this.player.data.AvatarData.organizationIndex == AvatarData_1.default.TECH) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
          var data = new StatusData_1.default();
          data.valueCopy(Logic_1.default.status[StatusManager_1.default.REAGENT]);
          data.duration += 3 * Logic_1.default.playerData.OilGoldData.level;
          var finalData = this.player.data.FinalCommon;
          data.Common.maxHealth = finalData.maxHealth * (.5 + .1 * Logic_1.default.playerData.OilGoldData.level);
          data.Common.damageMin = finalData.damageMin * (.5 + .1 * Logic_1.default.playerData.OilGoldData.level);
          data.Common.defence = finalData.defence * (.5 + .1 * Logic_1.default.playerData.OilGoldData.level);
          data.Common.remoteDamage = finalData.remoteDamage * (.5 + .05 * Logic_1.default.playerData.OilGoldData.level);
          data.realDamageDirect -= data.Common.maxHealth;
          this.player.addCustomStatus(data, new FromData_1.default());
        } else if (this.player.data.AvatarData.organizationIndex == AvatarData_1.default.FOLLOWER) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.BLINK);
          this.player.initShadowList(false, Math.floor(Logic_1.default.playerData.OilGoldData.level / 5 + 1), 30 + 2 * Logic_1.default.playerData.OilGoldData.level);
        }
      };
      OrganizationTalent.prototype.takeDamage = function(damageData, from, actor) {
        var success = this.energyShieldBlock(damageData, from);
        return success;
      };
      OrganizationTalent.prototype.energyShieldBlock = function(damageData, from) {
        for (var i = this.energyShieldList.length - 1; i >= 0; i--) {
          var shield = this.energyShieldList[i];
          if (shield.node && shield.node.isValid) {
            var isSuccess = shield.isShow && shield.checkTargetIn(this.player.node) && shield.takeDamage(damageData, from);
            if (isSuccess) return true;
          } else this.energyShieldList.splice(i, 1);
        }
        return false;
      };
      OrganizationTalent.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      __decorate([ property(cc.Sprite) ], OrganizationTalent.prototype, "sprite", void 0);
      OrganizationTalent = __decorate([ ccclass ], OrganizationTalent);
      return OrganizationTalent;
    }(Talent_1.default);
    exports.default = OrganizationTalent;
    cc._RF.pop();
  }, {
    "../data/AvatarData": "AvatarData",
    "../data/FromData": "FromData",
    "../data/NonPlayerData": "NonPlayerData",
    "../data/StatusData": "StatusData",
    "../data/TriggerData": "TriggerData",
    "../logic/Logic": "Logic",
    "../manager/StatusManager": "StatusManager",
    "../ui/CoolDownView": "CoolDownView",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils",
    "./Talent": "Talent"
  } ],
  PaletteSelector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2484805pD1NW4q2UMrBMgzJ", "PaletteSelector");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PaletteSelector = function(_super) {
      __extends(PaletteSelector, _super);
      function PaletteSelector() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.layout = null;
        _this.colors = [];
        _this.currentIndex = 0;
        return _this;
      }
      PaletteSelector_1 = PaletteSelector;
      PaletteSelector.prototype.onLoad = function() {};
      PaletteSelector.prototype.init = function(colorType, defaultIndex) {
        var _this = this;
        switch (colorType) {
         case PaletteSelector_1.TYPE_EYES:
          this.colors = PaletteSelector_1.EYESCOLORS;
          break;

         case PaletteSelector_1.TYPE_HAIR:
          this.colors = PaletteSelector_1.HAIRCOLORS;
          break;

         case PaletteSelector_1.TYPE_FACE:
          this.colors = PaletteSelector_1.FACECOLORS;
        }
        this.currentIndex = defaultIndex || 0;
        var _loop_1 = function(i) {
          var palette = this_1.layout.children[i];
          i > this_1.colors.length - 1 ? palette.color = cc.Color.BLACK : palette.color = cc.Color.WHITE.fromHEX(this_1.colors[i]);
          palette.on(cc.Node.EventType.TOUCH_START, function(event) {
            _this.updateAttribute(palette.color);
          });
        };
        var this_1 = this;
        for (var i = 0; i < this.layout.childrenCount; i++) _loop_1(i);
        this.updateAttribute(cc.Color.WHITE.fromHEX(this.colors[this.currentIndex]));
      };
      PaletteSelector.prototype.selectRandom = function() {
        this.currentIndex = Logic_1.default.getRandomNum(0, this.colors.length - 1);
        this.updateAttribute(cc.Color.WHITE.fromHEX(this.colors[this.currentIndex]));
      };
      PaletteSelector.prototype.setSelectorCallback = function(callback) {
        this.selectorCallback = callback;
      };
      PaletteSelector.prototype.updateAttribute = function(color) {
        this.selectorCallback && this.selectorCallback(color);
      };
      var PaletteSelector_1;
      PaletteSelector.TYPE_HAIR = 0;
      PaletteSelector.TYPE_EYES = 1;
      PaletteSelector.TYPE_FACE = 2;
      PaletteSelector.EYESCOLORS = [ "#000000", "#222034", "#45283c", "#663931", "#fbf236", "#6abe30", "#37946e", "#524b24", "#306082", "#5b6ee1", "#639bff", "#5fcde4", "#cbdbfc", "#ffc500", "#ffffff", "#9badb7", "#76428a", "#ac3232", "#d95763", "#8f974a", "#c20000" ];
      PaletteSelector.HAIRCOLORS = [ "#000000", "#222034", "#45283c", "#663931", "#fbf236", "#6abe30", "#37946e", "#524b24", "#306082", "#5b6ee1", "#639bff", "#5fcde4", "#cbdbfc", "#ffc500", "#ffffff", "#9badb7", "#76428a", "#ac3232", "#d95763", "#8f974a", "#c20000" ];
      PaletteSelector.FACECOLORS = [ "#FBA1DE", "#d95763", "#818185", "#d9a066", "#663931", "#fbf236", "#6abe30", "#37946e", "#524b24", "#306082", "#5b6ee1", "#639bff", "#5fcde4", "#cbdbfc", "#ffc500", "#ffffff", "#9badb7", "#76428a", "#ac3232", "#8f974a", "#c20000" ];
      __decorate([ property(cc.Node) ], PaletteSelector.prototype, "layout", void 0);
      PaletteSelector = PaletteSelector_1 = __decorate([ ccclass ], PaletteSelector);
      return PaletteSelector;
    }(cc.Component);
    exports.default = PaletteSelector;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic"
  } ],
  ParallaxBackground: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "509a7aimNhEX5/e74VkypMj", "ParallaxBackground");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ParallexBackground = function(_super) {
      __extends(ParallexBackground, _super);
      function ParallexBackground() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.background = null;
        _this.layer1 = null;
        _this.layer2 = null;
        return _this;
      }
      ParallexBackground.prototype.init = function() {
        this.layer1.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("chapter0" + Logic_1.default.chapterIndex + "layer1");
        this.layer2.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("chapter0" + Logic_1.default.chapterIndex + "layer2");
      };
      ParallexBackground.prototype.getPlayer = function() {
        this.player || (this.player = this.node.parent.getComponent(Dungeon_1.default).player);
        return this.player;
      };
      ParallexBackground.prototype.start = function() {};
      ParallexBackground.prototype.lateUpdate = function() {
        var player = this.getPlayer();
        if (player) {
          var targetPos = player.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
          this.layer1.position = this.lerp(this.layer1.position, this.node.convertToNodeSpaceAR(targetPos), .005);
          this.layer2.position = this.lerp(this.layer2.position, this.node.convertToNodeSpaceAR(targetPos), .015);
        }
      };
      ParallexBackground.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      __decorate([ property(cc.Node) ], ParallexBackground.prototype, "background", void 0);
      __decorate([ property(cc.Node) ], ParallexBackground.prototype, "layer1", void 0);
      __decorate([ property(cc.Node) ], ParallexBackground.prototype, "layer2", void 0);
      ParallexBackground = __decorate([ ccclass ], ParallexBackground);
      return ParallexBackground;
    }(cc.Component);
    exports.default = ParallexBackground;
    cc._RF.pop();
  }, {
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic"
  } ],
  PerlinNoise2D: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "59901zRRqlG9KvoKLDTbxq7", "PerlinNoise2D");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PerlinNoise2D = function() {
      function PerlinNoise2D() {
        this.grad3 = [ new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1) ];
        this.p = [ 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180 ];
        this.perm = new Array(512);
        this.gradP = new Array(512);
        this.F2 = .5 * (Math.sqrt(3) - 1);
        this.G2 = (3 - Math.sqrt(3)) / 6;
        this.F3 = 1 / 3;
        this.G3 = 1 / 6;
      }
      PerlinNoise2D.prototype.simplex2 = function(xin, yin) {
        var n0, n1, n2;
        var s = (xin + yin) * this.F2;
        var i = Math.floor(xin + s);
        var j = Math.floor(yin + s);
        var t = (i + j) * this.G2;
        var x0 = xin - i + t;
        var y0 = yin - j + t;
        var i1, j1;
        if (x0 > y0) {
          i1 = 1;
          j1 = 0;
        } else {
          i1 = 0;
          j1 = 1;
        }
        var x1 = x0 - i1 + this.G2;
        var y1 = y0 - j1 + this.G2;
        var x2 = x0 - 1 + 2 * this.G2;
        var y2 = y0 - 1 + 2 * this.G2;
        i &= 255;
        j &= 255;
        var gi0 = this.gradP[i + this.perm[j]];
        var gi1 = this.gradP[i + i1 + this.perm[j + j1]];
        var gi2 = this.gradP[i + 1 + this.perm[j + 1]];
        var t0 = .5 - x0 * x0 - y0 * y0;
        if (t0 < 0) n0 = 0; else {
          t0 *= t0;
          n0 = t0 * t0 * gi0.dot2(x0, y0);
        }
        var t1 = .5 - x1 * x1 - y1 * y1;
        if (t1 < 0) n1 = 0; else {
          t1 *= t1;
          n1 = t1 * t1 * gi1.dot2(x1, y1);
        }
        var t2 = .5 - x2 * x2 - y2 * y2;
        if (t2 < 0) n2 = 0; else {
          t2 *= t2;
          n2 = t2 * t2 * gi2.dot2(x2, y2);
        }
        return 70 * (n0 + n1 + n2);
      };
      PerlinNoise2D.prototype.simplex3 = function(xin, yin, zin) {
        var n0, n1, n2, n3;
        var s = (xin + yin + zin) * this.F3;
        var i = Math.floor(xin + s);
        var j = Math.floor(yin + s);
        var k = Math.floor(zin + s);
        var t = (i + j + k) * this.G3;
        var x0 = xin - i + t;
        var y0 = yin - j + t;
        var z0 = zin - k + t;
        var i1, j1, k1;
        var i2, j2, k2;
        if (x0 >= y0) if (y0 >= z0) {
          i1 = 1;
          j1 = 0;
          k1 = 0;
          i2 = 1;
          j2 = 1;
          k2 = 0;
        } else if (x0 >= z0) {
          i1 = 1;
          j1 = 0;
          k1 = 0;
          i2 = 1;
          j2 = 0;
          k2 = 1;
        } else {
          i1 = 0;
          j1 = 0;
          k1 = 1;
          i2 = 1;
          j2 = 0;
          k2 = 1;
        } else if (y0 < z0) {
          i1 = 0;
          j1 = 0;
          k1 = 1;
          i2 = 0;
          j2 = 1;
          k2 = 1;
        } else if (x0 < z0) {
          i1 = 0;
          j1 = 1;
          k1 = 0;
          i2 = 0;
          j2 = 1;
          k2 = 1;
        } else {
          i1 = 0;
          j1 = 1;
          k1 = 0;
          i2 = 1;
          j2 = 1;
          k2 = 0;
        }
        var x1 = x0 - i1 + this.G3;
        var y1 = y0 - j1 + this.G3;
        var z1 = z0 - k1 + this.G3;
        var x2 = x0 - i2 + 2 * this.G3;
        var y2 = y0 - j2 + 2 * this.G3;
        var z2 = z0 - k2 + 2 * this.G3;
        var x3 = x0 - 1 + 3 * this.G3;
        var y3 = y0 - 1 + 3 * this.G3;
        var z3 = z0 - 1 + 3 * this.G3;
        i &= 255;
        j &= 255;
        k &= 255;
        var gi0 = this.gradP[i + this.perm[j + this.perm[k]]];
        var gi1 = this.gradP[i + i1 + this.perm[j + j1 + this.perm[k + k1]]];
        var gi2 = this.gradP[i + i2 + this.perm[j + j2 + this.perm[k + k2]]];
        var gi3 = this.gradP[i + 1 + this.perm[j + 1 + this.perm[k + 1]]];
        var t0 = .6 - x0 * x0 - y0 * y0 - z0 * z0;
        if (t0 < 0) n0 = 0; else {
          t0 *= t0;
          n0 = t0 * t0 * gi0.dot3(x0, y0, z0);
        }
        var t1 = .6 - x1 * x1 - y1 * y1 - z1 * z1;
        if (t1 < 0) n1 = 0; else {
          t1 *= t1;
          n1 = t1 * t1 * gi1.dot3(x1, y1, z1);
        }
        var t2 = .6 - x2 * x2 - y2 * y2 - z2 * z2;
        if (t2 < 0) n2 = 0; else {
          t2 *= t2;
          n2 = t2 * t2 * gi2.dot3(x2, y2, z2);
        }
        var t3 = .6 - x3 * x3 - y3 * y3 - z3 * z3;
        if (t3 < 0) n3 = 0; else {
          t3 *= t3;
          n3 = t3 * t3 * gi3.dot3(x3, y3, z3);
        }
        return 32 * (n0 + n1 + n2 + n3);
      };
      PerlinNoise2D.prototype.perlin2 = function(x, y) {
        var X = Math.floor(x), Y = Math.floor(y);
        x -= X;
        y -= Y;
        X &= 255;
        Y &= 255;
        var n00 = this.gradP[X + this.perm[Y]].dot2(x, y);
        var n01 = this.gradP[X + this.perm[Y + 1]].dot2(x, y - 1);
        var n10 = this.gradP[X + 1 + this.perm[Y]].dot2(x - 1, y);
        var n11 = this.gradP[X + 1 + this.perm[Y + 1]].dot2(x - 1, y - 1);
        var u = this.fade(x);
        return this.lerp(this.lerp(n00, n10, u), this.lerp(n01, n11, u), this.fade(y));
      };
      PerlinNoise2D.prototype.perlin3 = function(x, y, z) {
        var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);
        x -= X;
        y -= Y;
        z -= Z;
        X &= 255;
        Y &= 255;
        Z &= 255;
        var n000 = this.gradP[X + this.perm[Y + this.perm[Z]]].dot3(x, y, z);
        var n001 = this.gradP[X + this.perm[Y + this.perm[Z + 1]]].dot3(x, y, z - 1);
        var n010 = this.gradP[X + this.perm[Y + 1 + this.perm[Z]]].dot3(x, y - 1, z);
        var n011 = this.gradP[X + this.perm[Y + 1 + this.perm[Z + 1]]].dot3(x, y - 1, z - 1);
        var n100 = this.gradP[X + 1 + this.perm[Y + this.perm[Z]]].dot3(x - 1, y, z);
        var n101 = this.gradP[X + 1 + this.perm[Y + this.perm[Z + 1]]].dot3(x - 1, y, z - 1);
        var n110 = this.gradP[X + 1 + this.perm[Y + 1 + this.perm[Z]]].dot3(x - 1, y - 1, z);
        var n111 = this.gradP[X + 1 + this.perm[Y + 1 + this.perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);
        var u = this.fade(x);
        var v = this.fade(y);
        var w = this.fade(z);
        return this.lerp(this.lerp(this.lerp(n000, n100, u), this.lerp(n001, n101, u), w), this.lerp(this.lerp(n010, n110, u), this.lerp(n011, n111, u), w), v);
      };
      PerlinNoise2D.prototype.seed = function(seed) {
        seed > 0 && seed < 1 && (seed *= 65536);
        seed = Math.floor(seed);
        seed < 256 && (seed |= seed << 8);
        for (var i = 0; i < 256; i++) {
          var v = void 0;
          v = 1 & i ? this.p[i] ^ 255 & seed : this.p[i] ^ seed >> 8 & 255;
          this.perm[i] = this.perm[i + 256] = v;
          this.gradP[i] = this.gradP[i + 256] = this.grad3[v % 12];
        }
      };
      PerlinNoise2D.prototype.lerp = function(a, b, t) {
        return (1 - t) * a + t * b;
      };
      PerlinNoise2D.prototype.fade = function(t) {
        return t * t * t * (t * (6 * t - 15) + 10);
      };
      return PerlinNoise2D;
    }();
    exports.default = PerlinNoise2D;
    var Grad = function() {
      function Grad(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
      }
      Grad.prototype.dot2 = function(x, y) {
        return this.x * x + this.y * y;
      };
      Grad.prototype.dot3 = function(x, y, z) {
        return this.x * x + this.y * y + this.z * z;
      };
      return Grad;
    }();
    cc._RF.pop();
  }, {} ],
  PickAvatar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c7974nYPCdMvb6AS/8/NF4d", "PickAvatar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var AttributeSelector_1 = require("./AttributeSelector");
    var AttributeData_1 = require("../data/AttributeData");
    var BrightnessBar_1 = require("./BrightnessBar");
    var PaletteSelector_1 = require("./PaletteSelector");
    var AvatarData_1 = require("../data/AvatarData");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var LoadingManager_1 = require("../manager/LoadingManager");
    var LoadingIcon_1 = require("./LoadingIcon");
    var Utils_1 = require("../utils/Utils");
    var EquipmentData_1 = require("../data/EquipmentData");
    var ProfileManager_1 = require("../manager/ProfileManager");
    var ExitData_1 = require("../data/ExitData");
    var SavePointData_1 = require("../data/SavePointData");
    var ColorPicker_1 = require("./ColorPicker");
    var ItemData_1 = require("../data/ItemData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PickAvatar = function(_super) {
      __extends(PickAvatar, _super);
      function PickAvatar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.SELECTOR_ORGANIZATION = 0;
        _this.SELECTOR_GENGER = 1;
        _this.SELECTOR_HAIR = 2;
        _this.COLOR_PATTLE_HAIR = 3;
        _this.SELECTOR_EYES = 4;
        _this.COLOR_PATTLE_EYES = 5;
        _this.SELECTOR_FACE = 6;
        _this.COLOR_PATTLE_FACE = 7;
        _this.SELECTOR_BODY = 8;
        _this.PROGRESS_SKIN_COLOR = 9;
        _this.SELECTOR_PROFESSION = 10;
        _this.loadingBackground = null;
        _this.avatarTable = null;
        _this.attributeLayout = null;
        _this.randomLayout = null;
        _this.randomLabelTitle = null;
        _this.randomLabelName = null;
        _this.randomLabelDesc = null;
        _this.randomLabelSkillName = null;
        _this.randomLabelSkillDesc = null;
        _this.randomButton = null;
        _this.colorPicker = null;
        _this.selectorPrefab = null;
        _this.brightnessBarPrefab = null;
        _this.palettePrefab = null;
        _this.loadingIconPrefab = null;
        _this.cursorAreaPrefab = null;
        _this.cloakSprite = null;
        _this.shoesSprite1 = null;
        _this.shoesSprite2 = null;
        _this.helmetSprite = null;
        _this.pantsSprite = null;
        _this.clothesSprite = null;
        _this.glovesSprite1 = null;
        _this.glovesSprite2 = null;
        _this.weaponSprite = null;
        _this.remoteSprite = null;
        _this.shieldSprite = null;
        _this.petSprite = null;
        _this.randomTouched = false;
        _this.isShow = false;
        _this.loadingManager = new LoadingManager_1.default();
        _this.delayTime = 0;
        return _this;
      }
      PickAvatar.prototype.onLoad = function() {
        var _this = this;
        this.loadingManager.init();
        this.data = new AvatarData_1.default();
        this.bedSprite = this.getSpriteChildSprite(this.avatarTable, [ "bed" ]);
        this.coverSprite = this.getSpriteChildSprite(this.avatarTable, [ "cover" ]);
        this.petSprite = this.getSpriteChildSprite(this.avatarTable, [ "pet" ]);
        this.bodySprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body" ]);
        this.handSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "hand1" ]);
        this.handSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "hand2" ]);
        this.legSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "leg1" ]);
        this.legSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "leg2" ]);
        this.headSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head" ]);
        this.hairSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head", "hair" ]);
        this.faceSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head", "face" ]);
        this.eyesSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head", "eyes" ]);
        this.helmetSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head", "helmet" ]);
        this.pantsSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "pants" ]);
        this.cloakSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "cloak" ]);
        this.weaponSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "weapon" ]);
        this.remoteSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "remote" ]);
        this.shieldSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "shield" ]);
        this.clothesSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "clothes" ]);
        this.glovesSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "hand1", "gloves" ]);
        this.glovesSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "hand2", "gloves" ]);
        this.shoesSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "leg1", "shoes" ]);
        this.shoesSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "leg2", "shoes" ]);
        this.loadingBackground.active = true;
        this.loadingIcon = cc.instantiate(this.loadingIconPrefab).getComponent(LoadingIcon_1.default);
        this.loadingIcon.node.parent = this.loadingBackground;
        this.loadingIcon.init([ LoadingIcon_1.default.TYPE_TEXTURE, LoadingIcon_1.default.TYPE_EQUIP ]);
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_TEXTURES, "singleColor");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_EQUIPMENT, "emptyequipment");
        this.loadingManager.loadProfession();
        this.loadingManager.loadEquipment();
        this.loadingManager.loadTalents();
        this.loadingManager.loadItems();
        this.loadingManager.loadSuits();
        this.loadingManager.loadAffixs();
        this.attributeLayout.active = false;
        this.colorPicker.hide();
        this.randomButton.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.randomTouched = true;
        }, this);
        this.randomButton.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.randomTouched = false;
        }, this);
        this.randomButton.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.randomTouched = false;
        }, this);
      };
      PickAvatar.prototype.getSpriteChildSprite = function(node, childNames) {
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      PickAvatar.prototype.show = function() {
        var _this = this;
        this.isShow = true;
        this.loadingIcon && this.loadingIcon.isFirst ? cc.tween(this.loadingBackground).to(.5, {
          opacity: 0
        }).call(function() {
          _this.loadingBackground.active = false;
        }).start() : this.loadingBackground.active = false;
        var organList = new Array();
        for (var i = 0; i < AvatarData_1.default.ORGANIZATION.length; i++) organList.push(new AttributeData_1.default(i, AvatarData_1.default.ORGANIZATION[i], "", "", "", ""));
        this.organizationSelector = this.addAttributeSelector("\u7ec4\u7ec7\uff1a", organList, 0, false, []);
        this.organizationSelector.selectorCallback = function(data, color) {
          _this.data.organizationIndex = data.id;
          _this.bedSprite.spriteFrame = Logic_1.default.spriteFrameRes("avatarbed00" + data.id);
          _this.coverSprite.spriteFrame = Logic_1.default.spriteFrameRes("avatarcover00" + data.id);
          _this.randomLabelTitle.string = data.name;
          _this.petSelector && (_this.petSelector.node.active = data.id == AvatarData_1.default.HUNTER);
          _this.petSprite.node.active = data.id == AvatarData_1.default.HUNTER;
        };
        var professionList = new Array();
        for (var i = 0; i < Logic_1.default.professionList.length; i++) {
          var data = Logic_1.default.professionList[i];
          var talent = Logic_1.default.talents[data.talent];
          professionList.push(new AttributeData_1.default(data.id, data.nameCn, "", data.desc, "\u6280\u80fd\uff1a" + talent.nameCn, "" + talent.desc));
        }
        this.professionSelector = this.addAttributeSelector("\u804c\u4e1a\uff1a", professionList, 0, false, []);
        this.professionSelector.selectorCallback = function(data, color) {
          _this.data.professionData.valueCopy(Logic_1.default.professionList[data.id]);
          _this.randomLabelName.string = "" + data.name;
          _this.randomLabelDesc.string = "" + data.desc;
          _this.randomLabelSkillName.string = "" + data.name1;
          _this.randomLabelSkillDesc.string = "" + data.desc1;
          _this.changeEquipment(Logic_1.default.professionList[data.id]);
        };
        this.skinSelector = this.addAttributeSelector("\u80a4\u8272", [ new AttributeData_1.default(0, "\u9ed8\u8ba4", "", "", "", ""), new AttributeData_1.default(1, "\u968f\u673a", "", "", "", "") ], 0, true, BrightnessBar_1.default.SKIN_COLORS);
        this.skinSelector.selectorCallback = function(data, color) {
          _this.bodySprite.node.color = color;
          _this.headSprite.node.color = color;
          _this.handSprite1.node.color = color;
          _this.handSprite2.node.color = color;
          _this.legSprite1.node.color = color;
          _this.legSprite2.node.color = color;
          _this.data.skinColor = color.toHEX("#rrggbb");
        };
        var hairList = [];
        for (var i = 0; i < 10; i++) hairList.push(new AttributeData_1.default(i, "\u6837\u5f0f" + i, "avatarhair" + Utils_1.default.getNumberStr3(i), "", "", ""));
        this.hairSelector = this.addAttributeSelector("\u53d1\u578b\uff1a", hairList, 0, true, PaletteSelector_1.default.HAIRCOLORS);
        this.hairSelector.selectorCallback = function(data, color) {
          _this.hairSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName + "anim0");
          _this.data.hairResName = data.resName;
          _this.hairSprite.node.color = color;
          _this.data.hairColor = color.toHEX("#rrggbb");
        };
        var eyesList = [];
        for (var i = 0; i < 22; i++) eyesList.push(new AttributeData_1.default(i, "\u6837\u5f0f" + i, "avatareyes" + Utils_1.default.getNumberStr3(i), "", "", ""));
        this.eyesSelector = this.addAttributeSelector("\u773c\u775b\uff1a", eyesList, 0, true, PaletteSelector_1.default.EYESCOLORS);
        this.eyesSelector.selectorCallback = function(data, color) {
          _this.eyesSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName + "anim0");
          _this.data.eyesResName = data.resName;
          _this.eyesSprite.getMaterial(0).setProperty("eyeColor", color);
          _this.data.eyesColor = color.toHEX("#rrggbb");
        };
        var faceList = [];
        for (var i = 0; i < 15; i++) faceList.push(new AttributeData_1.default(i, "\u6837\u5f0f" + i, "avatarface" + Utils_1.default.getNumberStr3(i), "", "", ""));
        this.faceSelector = this.addAttributeSelector("\u9762\u988a\uff1a", faceList, 0, true, PaletteSelector_1.default.FACECOLORS);
        this.faceSelector.selectorCallback = function(data, color) {
          _this.faceSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName + "anim0");
          _this.data.faceResName = data.resName;
          _this.faceSprite.node.color = color;
          _this.faceSprite.node.opacity = 128;
          _this.data.faceColor = color.toHEX("#rrggbb");
        };
        var petNames = [ "\u67ef\u57fa", "\u5bb6\u732b", "\u6a59\u5b50\u9c7c" ];
        var petList = [];
        for (var i = 0; i < petNames.length; i++) petList.push(new AttributeData_1.default(i, "" + petNames[i], "nonplayer1" + Utils_1.default.getNumberStr2(i), "", "", ""));
        this.petSelector = this.addAttributeSelector("\u5ba0\u7269\uff1a", petList, 0, false, []);
        this.petSelector.selectorCallback = function(data, color) {
          LoadingManager_1.default.loadNpcSpriteAtlas(data.resName, function() {
            _this.petSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName + "anim000");
          });
          _this.data.petName = "nonplayer1" + Utils_1.default.getNumberStr2(data.id);
        };
        this.petSelector.node.active = this.organizationSelector.CurrentData.id == AvatarData_1.default.HUNTER;
        this.petSprite.node.active = this.organizationSelector.CurrentData.id == AvatarData_1.default.HUNTER;
        this.ButtonRandom();
      };
      PickAvatar.prototype.changeEquipment = function(data) {
        this.changeRes(this.helmetSprite, data.equips[InventoryManager_1.default.HELMET], "anim0");
        this.changeRes(this.pantsSprite, data.equips[InventoryManager_1.default.TROUSERS]);
        this.changeRes(this.cloakSprite, data.equips[InventoryManager_1.default.CLOAK]);
        this.changeRes(this.weaponSprite, data.equips[InventoryManager_1.default.WEAPON]);
        this.changeRes(this.remoteSprite, data.equips[InventoryManager_1.default.REMOTE], "anim0");
        this.changeRes(this.shieldSprite, data.equips[InventoryManager_1.default.SHIELD]);
        this.changeRes(this.clothesSprite, data.equips[InventoryManager_1.default.CLOTHES], "anim0");
        this.changeRes(this.glovesSprite1, data.equips[InventoryManager_1.default.GLOVES]);
        this.changeRes(this.glovesSprite2, data.equips[InventoryManager_1.default.GLOVES]);
        this.changeRes(this.shoesSprite1, data.equips[InventoryManager_1.default.SHOES]);
        this.changeRes(this.shoesSprite2, data.equips[InventoryManager_1.default.SHOES]);
        this.resetSpriteSize(this.weaponSprite);
        this.resetSpriteSize(this.remoteSprite);
        this.resetSpriteSize(this.shieldSprite);
      };
      PickAvatar.prototype.resetSpriteSize = function(sprite) {
        if (sprite.spriteFrame) {
          sprite.node.width = sprite.spriteFrame.getOriginalSize().width;
          sprite.node.height = sprite.spriteFrame.getOriginalSize().height;
        }
      };
      PickAvatar.prototype.changeRes = function(sprite, resName, subfix) {
        if (!sprite) return false;
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        subfix && Logic_1.default.spriteFrameRes(resName + subfix) && (spriteFrame = Logic_1.default.spriteFrameRes(resName + subfix));
        sprite.spriteFrame = spriteFrame || null;
      };
      PickAvatar.prototype.startGame = function() {
        if (!this.isShow) return;
        ProfileManager_1.default.clearData(Logic_1.default.jumpSlotIndex);
        Logic_1.default.resetData(Logic_1.default.jumpChapter);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.playerData.AvatarData = this.data.clone();
        var data = new SavePointData_1.default();
        switch (Logic_1.default.jumpChapter) {
         case Logic_1.default.CHAPTER01:
          data = SavePointData_1.default.chapter01();
          break;

         case Logic_1.default.CHAPTER02:
          data = SavePointData_1.default.chapter02();
          break;

         case Logic_1.default.CHAPTER03:
          data = SavePointData_1.default.chapter03();
          break;

         case Logic_1.default.CHAPTER04:
          data = SavePointData_1.default.chapter04();
        }
        Logic_1.default.loadingNextLevel(data.chapter > 0 ? ExitData_1.default.getDreamExitDataFromReal(data) : ExitData_1.default.getRealWorldExitDataFirst(), true);
        Logic_1.default.jumpChapter = 0;
        this.addPorfessionEquipment();
      };
      PickAvatar.prototype.backToHome = function() {
        cc.director.loadScene("start");
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      PickAvatar.prototype.addPorfessionEquipment = function() {
        for (var _i = 0, _a = InventoryManager_1.default.EQUIP_TAGS; _i < _a.length; _i++) {
          var name = _a[_i];
          var equipType = this.data.professionData.equips[name] ? this.data.professionData.equips[name] : "";
          Logic_1.default.playerData.playerEquips[name] = new EquipmentData_1.default().valueCopy(EquipmentManager_1.default.getNewEquipData(equipType));
          Logic_1.default.playerData.playerEquipsReality[name] = new EquipmentData_1.default().valueCopy(EquipmentManager_1.default.getNewEquipData(equipType));
        }
        Logic_1.default.playerData.playerItemList = [];
        Logic_1.default.playerData.playerItemListReality = [];
        for (var i = 0; i < InventoryManager_1.default.MAX_ITEM; i++) {
          var data = new ItemData_1.default();
          data.count = -1;
          Logic_1.default.playerData.playerItemList.push(new ItemData_1.default().valueCopy(data));
          Logic_1.default.playerData.playerItemListReality.push(new ItemData_1.default().valueCopy(data));
        }
      };
      PickAvatar.prototype.addBrightnessBar = function() {
        var prefab = cc.instantiate(this.brightnessBarPrefab);
        var script = prefab.getComponent(BrightnessBar_1.default);
        this.attributeLayout.addChild(prefab);
        return script;
      };
      PickAvatar.prototype.addAttributeSelector = function(title, nameList, defaultIndex, colorPick, defaultColors) {
        var prefab = cc.instantiate(this.selectorPrefab);
        var script = prefab.getComponent(AttributeSelector_1.default);
        this.attributeLayout.addChild(prefab);
        script.init(title, nameList, defaultIndex, colorPick ? this.colorPicker : null, defaultColors);
        return script;
      };
      PickAvatar.prototype.addPaletteSelector = function(colorType, defaultIndex) {
        var prefab = cc.instantiate(this.palettePrefab);
        var script = prefab.getComponent(PaletteSelector_1.default);
        this.attributeLayout.addChild(prefab);
        script.init(colorType, defaultIndex);
        return script;
      };
      PickAvatar.prototype.update = function(dt) {
        if (this.loadingManager.isSpriteFramesLoaded(LoadingManager_1.default.KEY_TEXTURES) && this.loadingManager.isSpriteFramesLoaded(LoadingManager_1.default.KEY_EQUIPMENT) && this.loadingManager.isProfessionLoaded && this.loadingManager.isEquipmentLoaded && this.loadingManager.isSkillsLoaded && this.loadingManager.isItemsLoaded && this.loadingManager.isSuitsLoaded && this.loadingManager.isAffixsLoaded) {
          this.loadingManager.reset();
          this.show();
        }
        if (this.isShow && this.isTimeDelay(dt) && this.randomTouched) {
          this.randomButton.angle = 0;
          cc.tween(this.randomButton).to(.2, {
            angle: 360
          }).start();
          this.ButtonRandom();
        }
      };
      PickAvatar.prototype.isTimeDelay = function(dt) {
        this.delayTime += dt;
        if (this.delayTime > .2) {
          this.delayTime = 0;
          return true;
        }
        return false;
      };
      PickAvatar.prototype.ButtonSwitch = function() {
        if (!this.isShow) return;
        this.randomLayout.active = !this.randomLayout.active;
        this.attributeLayout.active = !this.attributeLayout.active;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      PickAvatar.prototype.ButtonRandom = function() {
        if (!this.isShow) return;
        this.organizationSelector.selectRandom();
        this.professionSelector.selectRandom();
        this.skinSelector.selectRandom(0 == this.skinSelector.currentIndex);
        this.hairSelector.selectRandom();
        this.eyesSelector.selectRandom();
        this.faceSelector.selectRandom();
        this.petSelector.selectRandom();
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      PickAvatar.prototype.ButtonSelect = function(event, isLeft) {
        if (!this.isShow) return;
        this.professionSelector.selectNext(0 == isLeft);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "loadingBackground", void 0);
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "avatarTable", void 0);
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "attributeLayout", void 0);
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "randomLayout", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelTitle", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelName", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelDesc", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelSkillName", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelSkillDesc", void 0);
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "randomButton", void 0);
      __decorate([ property(ColorPicker_1.default) ], PickAvatar.prototype, "colorPicker", void 0);
      __decorate([ property(cc.Prefab) ], PickAvatar.prototype, "selectorPrefab", void 0);
      __decorate([ property(cc.Prefab) ], PickAvatar.prototype, "brightnessBarPrefab", void 0);
      __decorate([ property(cc.Prefab) ], PickAvatar.prototype, "palettePrefab", void 0);
      __decorate([ property(cc.Prefab) ], PickAvatar.prototype, "loadingIconPrefab", void 0);
      __decorate([ property(cc.Prefab) ], PickAvatar.prototype, "cursorAreaPrefab", void 0);
      PickAvatar = __decorate([ ccclass ], PickAvatar);
      return PickAvatar;
    }(cc.Component);
    exports.default = PickAvatar;
    cc._RF.pop();
  }, {
    "../data/AttributeData": "AttributeData",
    "../data/AvatarData": "AvatarData",
    "../data/EquipmentData": "EquipmentData",
    "../data/ExitData": "ExitData",
    "../data/ItemData": "ItemData",
    "../data/SavePointData": "SavePointData",
    "../logic/Logic": "Logic",
    "../manager/EquipmentManager": "EquipmentManager",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/LoadingManager": "LoadingManager",
    "../manager/ProfileManager": "ProfileManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils",
    "./AttributeSelector": "AttributeSelector",
    "./BrightnessBar": "BrightnessBar",
    "./ColorPicker": "ColorPicker",
    "./LoadingIcon": "LoadingIcon",
    "./PaletteSelector": "PaletteSelector"
  } ],
  PlayActor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e69cb93DmFAnZrpJ7PhJ6C/", "PlayActor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FromData_1 = require("../data/FromData");
    var TriggerData_1 = require("../data/TriggerData");
    var Random_1 = require("../utils/Random");
    var StatusManager_1 = require("../manager/StatusManager");
    var Actor_1 = require("./Actor");
    var EventHelper_1 = require("../logic/EventHelper");
    var FloatingLabelData_1 = require("../data/FloatingLabelData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayActor = function(_super) {
      __extends(PlayActor, _super);
      function PlayActor() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.dataId = "";
        _this.currentDir = 3;
        _this.isWeaponDashing = false;
        return _this;
      }
      PlayActor.prototype.hideSelf = function(hideDuration) {
        var _this = this;
        if (hideDuration > 0) {
          this.invisible = true;
          this.scheduleOnce(function() {
            _this.stopHiding();
          }, hideDuration);
        }
      };
      PlayActor.prototype.updateData = function() {};
      PlayActor.prototype.stopHiding = function() {
        this.invisible = false;
        this.statusMgr.stopStatus(StatusManager_1.default.TALENT_INVISIBLE);
      };
      PlayActor.prototype.showFloatFont = function(d, isDodge, isMiss, isCritical, isBlock, isBackStab, isAvoidDeath) {
        var y = 0;
        this.Root && (y = this.Root.y);
        var worldPos = this.node.convertToWorldSpaceAR(cc.v3(0, y + 80));
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_SHOW_FLOATING_LABEL, {
          data: FloatingLabelData_1.default.create(worldPos, d, isDodge, isMiss, isCritical, isBlock, isBackStab, isAvoidDeath)
        });
      };
      Object.defineProperty(PlayActor.prototype, "Hv", {
        get: function() {
          return this.hv;
        },
        enumerable: false,
        configurable: true
      });
      PlayActor.prototype.onLoad = function() {
        this.init();
      };
      PlayActor.prototype.exTrigger = function(group, type, from, actor, onlyItem) {
        if (this.inventoryMgr) {
          if (!onlyItem) {
            var data = this.inventoryMgr.TotalEquipData;
            for (var _i = 0, _a = data.exTriggers; _i < _a.length; _i++) {
              var d = _a[_i];
              this.exTriggerDo(d, group, type, from, actor);
            }
          }
          for (var _b = 0, _c = this.inventoryMgr.itemList; _b < _c.length; _b++) {
            var data = _c[_b];
            for (var _d = 0, _e = data.exTriggers; _d < _e.length; _d++) {
              var d = _e[_d];
              this.exTriggerDo(d, group, type, from, actor);
            }
          }
        }
      };
      PlayActor.prototype.exTriggerDo = function(data, group, type, from, actor) {
        if (data.group != group || data.type != type) return;
        switch (data.id) {
         case TriggerData_1.default.ID_STATUS:
          this.exTriggerStatus(data, from, actor);
          break;

         case TriggerData_1.default.ID_BULLET:
          this.exTriggerBullet(data);
          break;

         case TriggerData_1.default.ID_TALENT:
          this.exTriggerTalent(data, from, actor);
        }
      };
      PlayActor.prototype.exTriggerBullet = function(data) {
        var count = data.count;
        var canShoot = true;
        if (count < 1) {
          canShoot = Random_1.default.rand() < count;
          count = 1;
        } else count = Math.floor(count);
        if (canShoot) if (count > 1) for (var i = 0; i < count; i++) this.exTriggerBulletDo(data); else this.exTriggerBulletDo(data);
      };
      PlayActor.prototype.exTriggerBulletDo = function(data) {
        var _this = this;
        var bulletInterval = data.bulletInterval ? data.bulletInterval : 100;
        var maxAmmo = data.maxAmmo ? data.maxAmmo : 0;
        maxAmmo > 1 ? this.schedule(function() {
          _this.exTriggerBulletFire(data);
        }, bulletInterval, maxAmmo - 1) : this.exTriggerBulletFire(data);
      };
      PlayActor.prototype.exTriggerBulletFire = function(data) {
        var remoteAngleOffset = data.bulletAngle ? data.bulletAngle : 0;
        this.triggerShooter.data.bulletType = data.res;
        this.triggerShooter.data.bulletArcExNum = data.bulletArcExNum;
        this.triggerShooter.data.bulletLineExNum = data.bulletLineExNum;
        this.triggerShooter.data.bulletSize = data.bulletSize;
        this.triggerShooter.data.bulletSize += this.IsVariation ? .5 : 0;
        this.triggerShooter.data.bulletExSpeed = data.bulletSpeed;
        var angle = Random_1.default.getRandomNum(-remoteAngleOffset, remoteAngleOffset);
        this.triggerShooter.fireBullet(angle, cc.v3(data.bulletOffsetX, 24));
        for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          if (s.node) {
            s.shooterEx.setHv(this.triggerShooter.Hv);
            s.shooterEx.data = this.triggerShooter.data.clone();
            s.shooterEx.fireBullet(angle, cc.v3(data.bulletOffsetX, 24));
          }
        }
      };
      PlayActor.prototype.exTriggerTalent = function(data, from, actor) {
        var count = data.count;
        var canAdd = true;
        if (count < 1) {
          canAdd = Random_1.default.rand() < count;
          count = 1;
        } else count = Math.floor(count);
        return canAdd;
      };
      PlayActor.prototype.exTriggerStatus = function(data, from, actor) {
        var count = data.count;
        var canAdd = true;
        if (count < 1) {
          canAdd = Random_1.default.rand() < count;
          count = 1;
        } else count = Math.floor(count);
        if (canAdd) for (var i = 0; i < count; i++) {
          TriggerData_1.default.TARGET_OTHER == data.target && actor && actor.addStatus(data.res, new FromData_1.default());
          if (TriggerData_1.default.TARGET_OTHER_NEAREST == data.target) StatusManager_1.default.addStatus2NearEnemy(this, data.res, from); else if (TriggerData_1.default.TARGET_SELF == data.target) this.addStatus(data.res, new FromData_1.default()); else if (TriggerData_1.default.TARGET_ALL_ALLY == data.target) StatusManager_1.default.addStatus2NearAllies(this, this.node, data.res, data.range, from); else if (TriggerData_1.default.TARGET_ALL_ENEMY == data.target) StatusManager_1.default.addStatus2NearEnemies(this, this.node, data.res, data.range, from); else if (TriggerData_1.default.TARGET_ALL == data.target) {
            this.addStatus(data.res, new FromData_1.default());
            StatusManager_1.default.addStatus2NearEnemies(this, this.node, data.res, data.range, from);
            StatusManager_1.default.addStatus2NearAllies(this, this.node, data.res, data.range, from);
          }
        }
      };
      PlayActor = __decorate([ ccclass ], PlayActor);
      return PlayActor;
    }(Actor_1.default);
    exports.default = PlayActor;
    cc._RF.pop();
  }, {
    "../data/FloatingLabelData": "FloatingLabelData",
    "../data/FromData": "FromData",
    "../data/TriggerData": "TriggerData",
    "../logic/EventHelper": "EventHelper",
    "../manager/StatusManager": "StatusManager",
    "../utils/Random": "Random",
    "./Actor": "Actor"
  } ],
  PlayerActorState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ae164KhEJ1NH6oNNveJ3HB/", "PlayerActorState");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GLOBAL = exports.JUMP_HOLD = exports.JUMP_BLOCK = exports.JUMP_SHOOT = exports.JUMP = exports.OTHER = exports.SHOOT = exports.BLOCK = exports.DASH = exports.HURT = exports.DIED = exports.SHOW = exports.PRPARE = exports.ATTACK = exports.MOVE = exports.IDLE = void 0;
    var BasePlayerActorState_1 = require("../base/BasePlayerActorState");
    var IDLE = function(_super) {
      __extends(IDLE, _super);
      function IDLE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      IDLE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      IDLE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDashing ? entity.stateMachine.changeState(PlayerActorState.DASH) : entity.sc.isAttacking ? entity.stateMachine.changeState(PlayerActorState.ATTACK) : entity.sc.isShooting ? entity.stateMachine.changeState(PlayerActorState.SHOOT) : entity.sc.isBlocking ? entity.stateMachine.changeState(PlayerActorState.BLOCK) : entity.sc.isOtherAniming ? entity.stateMachine.changeState(PlayerActorState.OTHER) : entity.sc.isMoving && entity.stateMachine.changeState(PlayerActorState.MOVE);
      };
      IDLE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      IDLE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return IDLE;
    }(BasePlayerActorState_1.default);
    exports.IDLE = IDLE;
    var MOVE = function(_super) {
      __extends(MOVE, _super);
      function MOVE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      MOVE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      MOVE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isMoving ? entity.sc.isAttacking ? entity.stateMachine.changeState(PlayerActorState.ATTACK) : entity.sc.isShooting ? entity.stateMachine.changeState(PlayerActorState.SHOOT) : entity.sc.isDashing ? entity.stateMachine.changeState(PlayerActorState.DASH) : entity.sc.isBlocking ? entity.stateMachine.changeState(PlayerActorState.BLOCK) : entity.sc.isOtherAniming && entity.stateMachine.changeState(PlayerActorState.OTHER) : entity.stateMachine.changeState(PlayerActorState.IDLE);
      };
      MOVE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      MOVE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return MOVE;
    }(BasePlayerActorState_1.default);
    exports.MOVE = MOVE;
    var ATTACK = function(_super) {
      __extends(ATTACK, _super);
      function ATTACK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ATTACK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      ATTACK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isAttacking || entity.stateMachine.changeState(PlayerActorState.IDLE);
      };
      ATTACK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      ATTACK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return ATTACK;
    }(BasePlayerActorState_1.default);
    exports.ATTACK = ATTACK;
    var PRPARE = function(_super) {
      __extends(PRPARE, _super);
      function PRPARE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PRPARE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      PRPARE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.stateMachine.changeState(PlayerActorState.SHOW);
      };
      PRPARE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      PRPARE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return PRPARE;
    }(BasePlayerActorState_1.default);
    exports.PRPARE = PRPARE;
    var SHOW = function(_super) {
      __extends(SHOW, _super);
      function SHOW() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      SHOW.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      SHOW.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isShow && entity.stateMachine.changeState(PlayerActorState.IDLE);
      };
      SHOW.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      SHOW.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return SHOW;
    }(BasePlayerActorState_1.default);
    exports.SHOW = SHOW;
    var DIED = function(_super) {
      __extends(DIED, _super);
      function DIED() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DIED.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        entity.killed();
      };
      DIED.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
      };
      DIED.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      DIED.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return DIED;
    }(BasePlayerActorState_1.default);
    exports.DIED = DIED;
    var HURT = function(_super) {
      __extends(HURT, _super);
      function HURT() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      HURT.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      HURT.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isHurting || entity.stateMachine.changeState(PlayerActorState.IDLE);
      };
      HURT.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      HURT.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return HURT;
    }(BasePlayerActorState_1.default);
    exports.HURT = HURT;
    var DASH = function(_super) {
      __extends(DASH, _super);
      function DASH() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DASH.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      DASH.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDashing || entity.stateMachine.changeState(PlayerActorState.IDLE);
      };
      DASH.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      DASH.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return DASH;
    }(BasePlayerActorState_1.default);
    exports.DASH = DASH;
    var BLOCK = function(_super) {
      __extends(BLOCK, _super);
      function BLOCK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BLOCK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      BLOCK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isBlocking || entity.stateMachine.changeState(PlayerActorState.IDLE);
      };
      BLOCK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      BLOCK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return BLOCK;
    }(BasePlayerActorState_1.default);
    exports.BLOCK = BLOCK;
    var SHOOT = function(_super) {
      __extends(SHOOT, _super);
      function SHOOT() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      SHOOT.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      SHOOT.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isShooting || entity.stateMachine.changeState(PlayerActorState.IDLE);
      };
      SHOOT.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      SHOOT.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return SHOOT;
    }(BasePlayerActorState_1.default);
    exports.SHOOT = SHOOT;
    var OTHER = function(_super) {
      __extends(OTHER, _super);
      function OTHER() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      OTHER.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      OTHER.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isOtherAniming || entity.stateMachine.changeState(PlayerActorState.IDLE);
      };
      OTHER.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      OTHER.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return OTHER;
    }(BasePlayerActorState_1.default);
    exports.OTHER = OTHER;
    var JUMP = function(_super) {
      __extends(JUMP, _super);
      function JUMP() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return JUMP;
    }(BasePlayerActorState_1.default);
    exports.JUMP = JUMP;
    var JUMP_SHOOT = function(_super) {
      __extends(JUMP_SHOOT, _super);
      function JUMP_SHOOT() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return JUMP_SHOOT;
    }(BasePlayerActorState_1.default);
    exports.JUMP_SHOOT = JUMP_SHOOT;
    var JUMP_BLOCK = function(_super) {
      __extends(JUMP_BLOCK, _super);
      function JUMP_BLOCK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return JUMP_BLOCK;
    }(BasePlayerActorState_1.default);
    exports.JUMP_BLOCK = JUMP_BLOCK;
    var JUMP_HOLD = function(_super) {
      __extends(JUMP_HOLD, _super);
      function JUMP_HOLD() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return JUMP_HOLD;
    }(BasePlayerActorState_1.default);
    exports.JUMP_HOLD = JUMP_HOLD;
    var GLOBAL = function(_super) {
      __extends(GLOBAL, _super);
      function GLOBAL() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      GLOBAL.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
      };
      GLOBAL.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        if (entity.sc.isDied) return;
        entity.data.currentHealth <= 0 ? entity.stateMachine.changeState(PlayerActorState.DIED) : !PlayerActorState.HURT.isRunnig && entity.sc.isHurting && entity.stateMachine.changeState(PlayerActorState.HURT);
      };
      GLOBAL.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
      };
      GLOBAL.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        return true;
      };
      return GLOBAL;
    }(BasePlayerActorState_1.default);
    exports.GLOBAL = GLOBAL;
    var PlayerActorState = function() {
      function PlayerActorState() {}
      PlayerActorState.GLOBAL = new GLOBAL("GLOBAL");
      PlayerActorState.MOVE = new MOVE("MOVE");
      PlayerActorState.ATTACK = new ATTACK("ATTACK");
      PlayerActorState.IDLE = new IDLE("IDLE");
      PlayerActorState.DIED = new DIED("DIED");
      PlayerActorState.HURT = new HURT("HURT");
      PlayerActorState.PRPARE = new PRPARE("PRPARE");
      PlayerActorState.SHOW = new SHOW("SHOW");
      PlayerActorState.DASH = new DASH("DASH");
      PlayerActorState.SHOOT = new SHOOT("SHOOT");
      PlayerActorState.BLOCK = new BLOCK("BLOCK");
      PlayerActorState.OTHER = new OTHER("OTHER");
      return PlayerActorState;
    }();
    exports.default = PlayerActorState;
    cc._RF.pop();
  }, {
    "../base/BasePlayerActorState": "BasePlayerActorState"
  } ],
  PlayerAvatar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7621b1Y+05Jj7j6YdAgY785", "PlayerAvatar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var AvatarData_1 = require("../data/AvatarData");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Utils_1 = require("../utils/Utils");
    var BaseAvatar_1 = require("../base/BaseAvatar");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerAvatar = function(_super) {
      __extends(PlayerAvatar, _super);
      function PlayerAvatar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cloakSprite = null;
        _this.legLeftSprite = null;
        _this.legRightSprite = null;
        _this.footLeftSprite = null;
        _this.footRightSprite = null;
        _this.shoesLeftSprite = null;
        _this.shoesRightSprite = null;
        _this.handLeftSprite = null;
        _this.glovesLeftSprite = null;
        _this.handRightSprite = null;
        _this.glovesRightSprite = null;
        _this.headSprite = null;
        _this.faceSprite = null;
        _this.eyesSprite = null;
        _this.hairSprite = null;
        _this.helmetSprite = null;
        _this.bodySprite = null;
        _this.pantsSprite = null;
        _this.clothesSprite = null;
        _this.avatarNode = null;
        _this.spriteNode = null;
        _this.waterY = 0;
        _this.idlehair = [ 0, 1 ];
        _this.checkTimeDelay = 0;
        return _this;
      }
      PlayerAvatar_1 = PlayerAvatar;
      PlayerAvatar.create = function(prefab, parent, data, group) {
        var avatar = cc.instantiate(prefab).getComponent(PlayerAvatar_1);
        avatar.node.parent = parent;
        avatar.node.zIndex = 0;
        avatar.init(data, group);
        return avatar;
      };
      PlayerAvatar.prototype.init = function(data, group) {
        if (this.isInit) return;
        Utils_1.default.changeNodeGroups(this.node, group);
        this.isInit = true;
        this.data = new AvatarData_1.default();
        this.data.valueCopy(data);
        this.anim = this.getComponent(cc.Animation);
        this.avatarNode = this.getSpriteChildNode([ "sprite", "avatar" ]);
        this.spriteNode = this.getSpriteChildNode([ "sprite" ]);
        this.cloakSprite = this.getSpriteChildSprite([ "sprite", "cloak" ]);
        this.legLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legleft" ]);
        this.legRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legright" ]);
        this.footLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legleft", "foot" ]);
        this.footRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legright", "foot" ]);
        this.shoesLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legleft", "foot", "shoes" ]);
        this.shoesRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legright", "foot", "shoes" ]);
        this.handLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "handleft" ]);
        this.handRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "handright" ]);
        this.glovesLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "handleft", "gloves" ]);
        this.glovesRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "handright", "gloves" ]);
        this.headSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head" ]);
        this.faceSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head", "face" ]);
        this.eyesSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head", "eyes" ]);
        this.hairSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head", "hair" ]);
        this.helmetSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head", "helmet" ]);
        this.bodySprite = this.getSpriteChildSprite([ "sprite", "avatar", "body" ]);
        this.pantsSprite = this.getSpriteChildSprite([ "sprite", "avatar", "body", "pants" ]);
        this.clothesSprite = this.getSpriteChildSprite([ "sprite", "avatar", "body", "clothes" ]);
        this.headSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.faceSprite.node.color = cc.Color.WHITE.fromHEX(this.data.faceColor);
        this.faceSprite.node.opacity = 128;
        var eyeColor = cc.Color.WHITE.fromHEX(this.data.eyesColor);
        this.eyesSprite.getMaterial(0).setProperty("eyeColor", eyeColor);
        this.hairSprite.node.color = cc.Color.WHITE.fromHEX(this.data.hairColor);
        this.bodySprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.legLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.legRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.footLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.footRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.handLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.handRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.hairSprite.node.stopAllActions();
        this.changeAvatarByDir(BaseAvatar_1.default.DIR_RIGHT);
        this.updateSpriteFrameAnim(this.faceSprite, this.data.faceResName, 1);
        this.updateSpriteFrameAnim(this.hairSprite, this.data.hairResName, 2);
        this.updateSpriteFrameAnim(this.eyesSprite, this.data.eyesResName, 1);
      };
      PlayerAvatar.prototype.showHandsWithInteract = function(flag, isLift) {
        this.handLeftSprite.node.scaleY = .2;
        this.handRightSprite.node.scaleY = .2;
        this.handLeftSprite.node.opacity = 0;
        this.handRightSprite.node.opacity = 0;
        this.handLeftSprite.node.y = 8;
        this.handRightSprite.node.y = 8;
        if (flag) {
          this.handLeftSprite.node.opacity = 255;
          this.handRightSprite.node.opacity = 255;
          if (isLift) {
            this.handLeftSprite.node.scaleY = .3;
            this.handRightSprite.node.scaleY = .3;
            this.handLeftSprite.node.y = 16;
            this.handRightSprite.node.y = 16;
          }
        }
      };
      PlayerAvatar.prototype.playAnim = function(status, dir, speedScale, callback) {
        if (!this.isInit || this.isAniming || BaseAvatar_1.default.STATE_DIE == this.status) return;
        var scale = null !== speedScale && void 0 !== speedScale ? speedScale : 1;
        switch (status) {
         case BaseAvatar_1.default.STATE_IDLE:
          this.status != status && this.playIdle(scale);
          break;

         case BaseAvatar_1.default.STATE_WALK:
          this.status != status && BaseAvatar_1.default.STATE_ATTACK != this.status && BaseAvatar_1.default.STATE_AIRKICK != this.status && this.playWalk(scale);
          break;

         case BaseAvatar_1.default.STATE_ATTACK:
          this.playAttack(scale);
          break;

         case BaseAvatar_1.default.STATE_AIRKICK:
          this.playAirKick(scale);
          break;

         case BaseAvatar_1.default.STATE_DIE:
          this.playDie(scale);
          break;

         case BaseAvatar_1.default.STATE_FALL:
          this.playFall(scale);
          break;

         case BaseAvatar_1.default.STATE_JUMP_UP:
          this.status != status && this.playJumpUp(scale);
          break;

         case BaseAvatar_1.default.STATE_JUMP_DOWN:
          this.status != status && this.playJumpDown(scale);
          break;

         case BaseAvatar_1.default.STATE_DISGUISE:
          this.playDisguise(scale);
          break;

         case BaseAvatar_1.default.STATE_HIT:
          this.playHit(scale);
          break;

         case BaseAvatar_1.default.STATE_SPECIAL:
          this.playSpecial(scale);
          break;

         case BaseAvatar_1.default.STATE_DASH:
          this.playDash(false);
          break;

         case BaseAvatar_1.default.STATE_DASH1:
          this.playDash(true);
        }
        this.status = status;
        4 != dir && (this.dir = dir);
      };
      PlayerAvatar.prototype.changeLegColor = function(isLong, colorHex) {
        if (isLong) {
          this.legLeftSprite.node.color = cc.Color.WHITE.fromHEX(colorHex);
          this.legRightSprite.node.color = cc.Color.WHITE.fromHEX(colorHex);
          this.footLeftSprite.node.color = cc.Color.WHITE.fromHEX(colorHex);
          this.footRightSprite.node.color = cc.Color.WHITE.fromHEX(colorHex);
        } else {
          this.legLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
          this.legRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
          this.footLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
          this.footRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        }
      };
      PlayerAvatar.prototype.changeEquipDirSpriteFrame = function(inventoryManager, dir) {
        var helmet = inventoryManager.equips[InventoryManager_1.default.HELMET];
        var clothes = inventoryManager.equips[InventoryManager_1.default.CLOTHES];
        this.updateSpriteFrameAnim(this.helmetSprite, helmet.img, helmet.anim);
        this.updateSpriteFrameAnim(this.clothesSprite, clothes.img, clothes.anim);
      };
      PlayerAvatar.prototype.changeAvatarByDir = function(dir) {
        if (this.isAniming) return;
        var eyeColor = cc.Color.WHITE.fromHEX(this.data.eyesColor);
        this.eyesSprite.getMaterial(0).setProperty("eyeColor", eyeColor);
        if (4 != dir) {
          this.dir = dir;
          this.cloakSprite.node.zIndex = 0 == dir ? this.avatarNode.zIndex + 1 : this.avatarNode.zIndex - 1;
          this.handRightSprite.node.zIndex = 0 == dir ? this.bodySprite.node.zIndex - 1 : this.bodySprite.node.zIndex + 1;
        }
      };
      PlayerAvatar.prototype.showLegsWithWater = function(inWater, inWaterTile) {
        this.legLeftSprite.node.opacity = inWater ? 0 : 255;
        this.legRightSprite.node.opacity = inWater ? 0 : 255;
        this.pantsSprite.node.opacity = inWater ? 0 : 255;
        this.setInWaterMat(this.bodySprite, inWater);
        this.setInWaterMat(this.clothesSprite, inWater);
        this.setInWaterMat(this.cloakSprite, inWater);
        this.waterY = inWaterTile ? -32 : 0;
        this.node.y = Logic_1.default.lerp(this.node.y, this.waterY, .2);
      };
      PlayerAvatar.prototype.setInWaterMat = function(sprite, inWater) {
        if (!sprite || !sprite.spriteFrame) return;
        var offset = sprite.spriteFrame.getOffset();
        var rect = sprite.spriteFrame.getRect();
        var texture = sprite.spriteFrame.getTexture();
        sprite.getMaterial(0).setProperty("rect", [ rect.x / texture.width, rect.y / texture.height, rect.width / texture.width, rect.height / texture.height ]);
        sprite.getMaterial(0).setProperty("hidebottom", inWater ? 1 : 0);
        sprite.getMaterial(0).setProperty("isRotated", sprite.spriteFrame.isRotated() ? 1 : 0);
      };
      PlayerAvatar.prototype.updateSpriteFrameAnim = function(sprite, resName, animCount) {
        var _this = this;
        var resLength = animCount && 0 != animCount ? animCount : 1;
        sprite.unscheduleAllCallbacks();
        var index = 0;
        sprite.schedule(function() {
          var start = _this.dir == BaseAvatar_1.default.DIR_UP ? resLength : 0;
          sprite.spriteFrame = Logic_1.default.spriteFrameRes(resName + "anim" + (start + index++));
          index > resLength - 1 && (index = 0);
        }, .2, cc.macro.REPEAT_FOREVER, .1);
      };
      PlayerAvatar.prototype.playJumpDown = function(speedScale) {
        this.anim.play("AvatarJumpDown");
      };
      PlayerAvatar.prototype.playJumpUp = function(speedScale) {
        this.anim.play("AvatarJumpUp");
      };
      PlayerAvatar.prototype.playDisguise = function(speedScale) {};
      PlayerAvatar.prototype.playHit = function(speedScale) {};
      PlayerAvatar.prototype.playSpecial = function(speedScale) {};
      PlayerAvatar.prototype.playFall = function(speedScale) {
        this.anim.play("AvatarFall");
      };
      PlayerAvatar.prototype.playDie = function(speedScale) {
        this.anim.play("AvatarDie");
      };
      PlayerAvatar.prototype.playIdle = function(speedScale) {
        this.anim.play("AvatarIdle");
      };
      PlayerAvatar.prototype.playWalk = function(speedScale) {
        this.anim.play("AvatarWalkHorizontal");
      };
      PlayerAvatar.prototype.playAttack = function(speedScale, callback) {
        var _this = this;
        this.anim.play("AvatarAttackHorizontal");
        var offsetX = -16;
        var offsetY = 0;
        cc.tween(this.spriteNode).stop();
        cc.tween(this.spriteNode).to(.1, {
          position: cc.v3(offsetX, offsetY)
        }).to(.1, {
          position: cc.v3(-offsetX, -offsetY)
        }).to(.1, {
          position: cc.v3(0, 0)
        }).delay(.1).call(function() {
          _this.playAnim(BaseAvatar_1.default.STATE_IDLE, _this.dir);
        }).start();
      };
      PlayerAvatar.prototype.playAirKick = function(speedScale) {
        var _this = this;
        this.anim.play("AvatarAirKick");
        var offsetX = -16;
        var offsetY = 0;
        cc.tween(this.spriteNode).stop();
        cc.tween(this.spriteNode).to(.1, {
          position: cc.v3(offsetX, offsetY)
        }).to(.1, {
          position: cc.v3(-offsetX, -offsetY)
        }).to(.1, {
          position: cc.v3(0, 0)
        }).delay(.2).call(function() {
          _this.playAnim(BaseAvatar_1.default.STATE_IDLE, _this.dir);
        }).start();
      };
      PlayerAvatar.prototype.playDash = function(reverse) {
        this.anim.play(reverse ? "AvatarDashBack" : "AvatarDash");
        AudioPlayer_1.default.play(AudioPlayer_1.default.DASH);
      };
      PlayerAvatar.prototype.playCooking = function() {
        var _this = this;
        this.isAniming = true;
        this.scheduleOnce(function() {
          _this.isAniming = false;
        }, 3);
      };
      PlayerAvatar.prototype.playDrink = function() {
        var _this = this;
        this.changeAvatarByDir(BaseAvatar_1.default.DIR_RIGHT);
        this.anim.play("AvatarDrink");
        AudioPlayer_1.default.play(AudioPlayer_1.default.DRINK);
        this.isAniming = true;
        this.scheduleOnce(function() {
          _this.isAniming = false;
        }, 1.5);
      };
      PlayerAvatar.prototype.playToilet = function() {
        var _this = this;
        this.isAniming = true;
        this.scheduleOnce(function() {
          _this.isAniming = false;
        }, 5);
      };
      PlayerAvatar.prototype.playSleep = function() {
        this.changeAvatarByDir(BaseAvatar_1.default.DIR_RIGHT);
        this.anim.play("AvatarSleep");
        this.isAniming = true;
      };
      PlayerAvatar.prototype.playStop = function() {
        var _this = this;
        this.changeAvatarByDir(BaseAvatar_1.default.DIR_RIGHT);
        this.anim.play("AvatarIdle");
        this.isAniming = true;
        this.scheduleOnce(function() {
          _this.isAniming = false;
        }, .1);
      };
      PlayerAvatar.prototype.playWakeUp = function() {
        var _this = this;
        this.changeAvatarByDir(BaseAvatar_1.default.DIR_RIGHT);
        this.anim.play("AvatarWakeUp");
        this.isAniming = true;
        this.scheduleOnce(function() {
          _this.isAniming = false;
        }, 1);
      };
      PlayerAvatar.prototype.playRead = function() {
        var _this = this;
        this.isAniming = true;
        this.scheduleOnce(function() {
          _this.isAniming = false;
        }, 5);
      };
      PlayerAvatar.prototype.playDrive = function() {
        this.isAniming = true;
      };
      PlayerAvatar.prototype.playDriveOff = function() {
        this.isAniming = false;
      };
      PlayerAvatar.prototype.start = function() {};
      PlayerAvatar.prototype.isAnimTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      var PlayerAvatar_1;
      PlayerAvatar = PlayerAvatar_1 = __decorate([ ccclass ], PlayerAvatar);
      return PlayerAvatar;
    }(BaseAvatar_1.default);
    exports.default = PlayerAvatar;
    cc._RF.pop();
  }, {
    "../base/BaseAvatar": "BaseAvatar",
    "../data/AvatarData": "AvatarData",
    "../manager/InventoryManager": "InventoryManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils",
    "./Logic": "Logic"
  } ],
  PlayerController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cdfa4YAYmlNNrYexSBeoO6q", "PlayerController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseController_1 = require("./BaseController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EventHelper_1 = require("./EventHelper");
    var PlayerController = function(_super) {
      __extends(PlayerController, _super);
      function PlayerController() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PlayerController.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_MOVE, function(detail) {
          _this.CanControl && _this.player.ctrlMove(detail.dir, detail.pos, detail.dt, _this.player.dungeon);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_TRIGGER, function(detail) {
          _this.CanControl && _this.player.ctrlTriggerThings(detail && detail.isLongPress);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_USEITEM, function(detail) {
          _this.CanControl && _this.player.ctrlUseItem(detail.itemData);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_SKILL, function(detail) {
          _this.CanControl && _this.player.ctrlUseSkill();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_SKILL1, function(detail) {
          _this.CanControl && _this.player.ctrlUseSkill1();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_ATTACK, function(detail) {
          _this.CanControl && _this.player.ctrlMeleeAttack();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK_CANCEL, function(detail) {
          _this.CanControl && _this.player.ctrlRemoteCancel();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK, function(detail) {
          _this.CanControl && _this.player.ctrlRemoteAttack();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_JUMP, function(detail) {
          _this.CanControl && _this.player.ctrlJump();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_DASH, function(detail) {
          _this.CanControl && _this.player.ctrlDash();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_JUMP_CANCEL, function(detail) {
          _this.CanControl && _this.player.ctrlJumpCancel();
        });
      };
      PlayerController = __decorate([ ccclass ], PlayerController);
      return PlayerController;
    }(BaseController_1.default);
    exports.default = PlayerController;
    cc._RF.pop();
  }, {
    "./BaseController": "BaseController",
    "./EventHelper": "EventHelper"
  } ],
  PlayerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "802a53ZqslNorozVvKYFivM", "PlayerData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __rest = this && this.__rest || function(s, e) {
      var t = {};
      for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
      if (null != s && "function" === typeof Object.getOwnPropertySymbols) for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
      return t;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentData_1 = require("./EquipmentData");
    var DamageData_1 = require("./DamageData");
    var StatusData_1 = require("./StatusData");
    var CommonData_1 = require("./CommonData");
    var Random_1 = require("../utils/Random");
    var AvatarData_1 = require("./AvatarData");
    var OilGoldData_1 = require("./OilGoldData");
    var TalentData_1 = require("./TalentData");
    var Shield_1 = require("../logic/Shield");
    var LifeData_1 = require("./LifeData");
    var DataUtils_1 = require("../utils/DataUtils");
    var ItemData_1 = require("./ItemData");
    var InventoryData_1 = require("./InventoryData");
    var BaseData_1 = require("./BaseData");
    var PlayerData = function(_super) {
      __extends(PlayerData, _super);
      function PlayerData() {
        var _this = _super.call(this) || this;
        _this.id = "";
        _this.name = "";
        _this.pos = cc.v3(5, 5);
        _this.posZ = 0;
        _this.roomPos = cc.v3(0, 0);
        _this.isWakeUp = false;
        _this.currentHealth = PlayerData.DEFAULT_HEALTH;
        _this.currentDream = PlayerData.DEFAULT_DREAM;
        _this.currentAmmo = 0;
        _this.metalId = "";
        _this.chapterIndex = 999;
        _this.chapterLevel = 999;
        _this.isEnemy = false;
        _this.needUpdateFinalCommon = true;
        _this.playerEquips = {};
        _this.playerEquipsReality = {};
        _this.playerItemList = new Array();
        _this.playerItemListReality = new Array();
        _this.playerInventoryList = new Array();
        _this.playerInventoryListReality = new Array();
        _this.id = _this.genNonDuplicateID();
        _this.equipmentTotalData = new EquipmentData_1.default();
        _this.statusTotalData = new StatusData_1.default();
        _this.avatarData = new AvatarData_1.default();
        _this.oilGoldData = new OilGoldData_1.default();
        _this.organizationTalentData = new TalentData_1.default();
        _this.professionTalentData = new TalentData_1.default();
        _this.lifeData = new LifeData_1.default();
        _this.statusList = new Array();
        _this.common = new CommonData_1.default();
        _this.common.maxHealth = PlayerData.DEFAULT_HEALTH;
        _this.common.moveSpeed = PlayerData.DEFAULT_SPEED;
        _this.common.jumpSpeed = PlayerData.DEFAULT_JUMP_SPEED;
        _this.common.jumpHeight = PlayerData.DEFAULT_JUMP_HEIGHT;
        _this.common.damageMin = PlayerData.DEFAULT_ATTACK;
        _this.common.damageBack = PlayerData.DEFAULT_BACK_ATTACK;
        _this.common.maxDream = PlayerData.DEFAULT_DREAM;
        _this.needUpdateFinalCommon = true;
        _this.shadowList = [];
        return _this;
      }
      Object.defineProperty(PlayerData.prototype, "ShadowList", {
        get: function() {
          return this.shadowList;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "StatusList", {
        get: function() {
          return this.statusList;
        },
        set: function(list) {
          if (!list) return;
          this.statusList = new Array();
          for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var s = list_1[_i];
            var data = new StatusData_1.default();
            data.valueCopy(s);
            this.statusList.push(data);
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "LifeData", {
        get: function() {
          return this.lifeData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "EquipmentTotalData", {
        get: function() {
          return this.equipmentTotalData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "StatusTotalData", {
        get: function() {
          return this.statusTotalData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "AvatarData", {
        get: function() {
          return this.avatarData;
        },
        set: function(data) {
          this.avatarData = data;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "OilGoldData", {
        get: function() {
          return this.oilGoldData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "OrganizationTalentData", {
        get: function() {
          return this.organizationTalentData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "ProfessionTalentData", {
        get: function() {
          return this.professionTalentData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      PlayerData.prototype.updateFinalCommon = function() {
        this.needUpdateFinalCommon = true;
      };
      Object.defineProperty(PlayerData.prototype, "FinalCommon", {
        get: function() {
          if (this.needUpdateFinalCommon) {
            this.needUpdateFinalCommon = false;
            this.finalCommon = new CommonData_1.default().add(this.common).add(this.statusTotalData.Common).add(this.equipmentTotalData.FinalCommon).add(this.avatarData.professionData.Common).add(this.oilGoldData.Common);
          }
          return this.finalCommon;
        },
        enumerable: false,
        configurable: true
      });
      PlayerData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        this.common.valueCopy(data.common);
        this.pos = data.pos ? cc.v3(data.pos.x, data.pos.y) : cc.v3(4, 7);
        this.equipmentTotalData.valueCopy(data.equipmentTotalData);
        this.statusTotalData.valueCopy(data.statusTotalData);
        this.avatarData.valueCopy(data.avatarData);
        this.oilGoldData.valueCopy(data.oilGoldData);
        this.lifeData.valueCopy(data.lifeData);
        this.StatusList = data.statusList;
        this.organizationTalentData.valueCopy(data.organizationTalentData);
        this.professionTalentData.valueCopy(data.professionTalentData);
        this.shadowList = data.shadowList;
        this.needUpdateFinalCommon = true;
        this.roomPos = data.roomPos ? cc.v3(data.roomPos.x, data.roomPos.y) : cc.v3(0, 0);
        this.chapterIndex = data.chapterIndex ? data.chapterIndex : 999;
        this.chapterLevel = data.chapterLevel ? data.chapterLevel : 999;
        this.playerEquips = DataUtils_1.default.cloneKeyValue(data.playerEquips, function(value) {
          return new EquipmentData_1.default().valueCopy(value);
        });
        this.playerEquipsReality = DataUtils_1.default.cloneKeyValue(data.playerEquipsReality, function(value) {
          return new EquipmentData_1.default().valueCopy(value);
        });
        this.playerItemList = DataUtils_1.default.copyListValue(data.playerItemList, function(arg0) {
          return new ItemData_1.default().valueCopy(arg0);
        });
        this.playerItemListReality = DataUtils_1.default.copyListValue(data.playerItemListReality, function(arg0) {
          return new ItemData_1.default().valueCopy(arg0);
        });
        this.playerInventoryList = DataUtils_1.default.copyListValue(data.playerInventoryList, function(arg0) {
          return new InventoryData_1.default().valueCopy(arg0);
        });
        this.playerInventoryListReality = DataUtils_1.default.copyListValue(data.playerInventoryListReality, function(arg0) {
          return new InventoryData_1.default().valueCopy(arg0);
        });
        return this;
      };
      PlayerData.prototype.clone = function() {
        var e = new PlayerData();
        e.valueCopy(this);
        return e;
      };
      PlayerData.prototype.getFinalAttackPoint = function() {
        var data = this.FinalCommon;
        var dd = new DamageData_1.default();
        var damageMin = data.DamageMin;
        var damageMax = data.DamageMax;
        var chance = data.criticalStrikeRate / 100;
        var isCritical = Random_1.default.rand() < chance;
        var attack = isCritical ? damageMin + damageMax : damageMin;
        attack < 0 && (attack = 0);
        dd.isCriticalStrike = isCritical;
        dd.realDamage = data.RealDamage;
        dd.magicDamage = data.MagicDamage;
        dd.physicalDamage = attack;
        this.avatarData.organizationIndex == AvatarData_1.default.TECH && (dd.physicalDamage += .5 * this.currentDream);
        return dd;
      };
      PlayerData.prototype.getFinalRemoteDamage = function() {
        var data = this.FinalCommon;
        var dd = new DamageData_1.default();
        var remoteDamage = data.RemoteDamage;
        this.avatarData.organizationIndex == AvatarData_1.default.HUNTER && (remoteDamage += .5 * this.currentDream);
        var chance = data.remoteCritRate / 100;
        var isCritical = Random_1.default.rand() < chance;
        var attack = isCritical ? remoteDamage + remoteDamage : remoteDamage;
        attack < 0 && (attack = 0);
        dd.physicalDamage = attack;
        dd.isCriticalStrike = isCritical;
        return dd;
      };
      PlayerData.prototype.getDamage = function(damageData, blockLevel) {
        var data = this.FinalCommon;
        var finalDamageData = damageData.clone();
        var defence = data.Defence;
        var defenceMagic = data.magicDefenceRate / 100;
        var blockPhysical = data.blockPhysicalRate / 100;
        var blockMagic = data.blockMagicRate / 100;
        finalDamageData.physicalDamage = defence >= 0 ? finalDamageData.physicalDamage * (1 - .06 * defence / (.06 * defence + 1)) : finalDamageData.physicalDamage * (2 - Math.pow(.94, -defence));
        finalDamageData.magicDamage = finalDamageData.magicDamage * (1 - defenceMagic);
        if (finalDamageData.physicalDamage > 0 || finalDamageData.magicDamage > 0) if (blockLevel == Shield_1.default.BLOCK_NORMAL) {
          finalDamageData.physicalDamage = finalDamageData.physicalDamage * (1 - blockPhysical);
          finalDamageData.magicDamage = finalDamageData.magicDamage * (1 - blockMagic);
        } else if (blockLevel == Shield_1.default.BLOCK_PARRY) {
          finalDamageData.physicalDamage = 0;
          finalDamageData.magicDamage = 0;
          finalDamageData.realDamage = 0;
        }
        return finalDamageData;
      };
      PlayerData.prototype.getLifeDrain = function() {
        var data = this.FinalCommon;
        var chance = data.criticalStrikeRate / 100;
        var drainRate = data.lifeDrainRate / 100;
        var drain = 0;
        if (Random_1.default.rand() < drainRate) {
          drain = .2;
          Random_1.default.rand() < chance && (drain = 1);
        }
        return drain;
      };
      PlayerData.prototype.getMoveSpeed = function() {
        var data = this.FinalCommon;
        var speed = data.MoveSpeed;
        speed > 2 * PlayerData.DEFAULT_SPEED && (speed = 2 * PlayerData.DEFAULT_SPEED);
        speed < 2 * -PlayerData.DEFAULT_SPEED && (speed = 2 * -PlayerData.DEFAULT_SPEED);
        return speed;
      };
      PlayerData.prototype.getJumpSpeed = function() {
        var data = this.FinalCommon;
        var speed = data.JumpSpeed;
        speed < 0 && (speed = 0);
        return speed;
      };
      PlayerData.prototype.getJumpHeight = function() {
        var data = this.FinalCommon;
        var speed = data.JumpHeight;
        speed < 0 && (speed = 0);
        return speed;
      };
      PlayerData.prototype.getHealth = function(data) {
        var rate = 1;
        var maxHealth = data.MaxHealth;
        this.lifeData.sanity <= 0 && (maxHealth = 1);
        if (!(maxHealth > 0)) return cc.v3(1, 1);
        rate = this.currentHealth / maxHealth;
        return cc.v3(maxHealth * rate, maxHealth);
      };
      PlayerData.prototype.getDream = function(data) {
        var rate = 1;
        var maxDream = data.MaxDream;
        this.lifeData.sanity <= 0 && (maxDream = 1);
        if (!(maxDream > 0)) return cc.v3(1, 1);
        rate = this.currentDream / maxDream;
        return cc.v3(maxDream * rate, maxDream);
      };
      PlayerData.prototype.toJSON = function() {
        var _a = this, equipmentTotalData = _a.equipmentTotalData, statusTotalData = _a.statusTotalData, rest = __rest(_a, [ "equipmentTotalData", "statusTotalData" ]);
        return rest;
      };
      PlayerData.DEFAULT_HEALTH = 10;
      PlayerData.DEFAULT_SPEED = 6;
      PlayerData.DEFAULT_JUMP_SPEED = 6;
      PlayerData.DEFAULT_JUMP_HEIGHT = 2;
      PlayerData.DEFAULT_ATTACK = 1;
      PlayerData.DEFAULT_BACK_ATTACK = 0;
      PlayerData.DEFAULT_DREAM = 5;
      return PlayerData;
    }(BaseData_1.default);
    exports.default = PlayerData;
    cc._RF.pop();
  }, {
    "../logic/Shield": "Shield",
    "../utils/DataUtils": "DataUtils",
    "../utils/Random": "Random",
    "./AvatarData": "AvatarData",
    "./BaseData": "BaseData",
    "./CommonData": "CommonData",
    "./DamageData": "DamageData",
    "./EquipmentData": "EquipmentData",
    "./InventoryData": "InventoryData",
    "./ItemData": "ItemData",
    "./LifeData": "LifeData",
    "./OilGoldData": "OilGoldData",
    "./StatusData": "StatusData",
    "./TalentData": "TalentData"
  } ],
  PlayerInfoDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15316LuMnlLl6y6PlDqoReo", "PlayerInfoDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AvatarData_1 = require("../data/AvatarData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerInfoDialog = function(_super) {
      __extends(PlayerInfoDialog, _super);
      function PlayerInfoDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.attack = null;
        _this.organization = null;
        _this.criticalStrikeRate = null;
        _this.defence = null;
        _this.lifeDrain = null;
        _this.damageBack = null;
        _this.moveSpeed = null;
        _this.attackSpeed = null;
        _this.dodge = null;
        _this.health = null;
        _this.dream = null;
        _this.realDamage = null;
        _this.realRate = null;
        _this.magicDamage = null;
        _this.magicDefence = null;
        _this.iceRate = null;
        _this.fireRate = null;
        _this.lighteningRate = null;
        _this.toxicRate = null;
        _this.curseRate = null;
        _this.remoteDamage = null;
        _this.remoteCritRate = null;
        _this.remoteCooldown = null;
        _this.sanity = null;
        _this.solidSatiety = null;
        _this.liquidSatiety = null;
        _this.isShow = false;
        _this.layout = null;
        return _this;
      }
      PlayerInfoDialog.prototype.onLoad = function() {
        this.attack = this.node.getChildByName("layout").getChildByName("attack").getChildByName("label").getComponent(cc.Label);
        this.organization = this.node.getChildByName("layout").getChildByName("organization").getChildByName("label").getComponent(cc.Label);
        this.criticalStrikeRate = this.node.getChildByName("layout").getChildByName("criticalStrikeRate").getChildByName("label").getComponent(cc.Label);
        this.defence = this.node.getChildByName("layout").getChildByName("defence").getChildByName("label").getComponent(cc.Label);
        this.lifeDrain = this.node.getChildByName("layout").getChildByName("lifeDrainRate").getChildByName("label").getComponent(cc.Label);
        this.damageBack = this.node.getChildByName("layout").getChildByName("damageBack").getChildByName("label").getComponent(cc.Label);
        this.moveSpeed = this.node.getChildByName("layout").getChildByName("moveSpeed").getChildByName("label").getComponent(cc.Label);
        this.attackSpeed = this.node.getChildByName("layout").getChildByName("attackSpeed").getChildByName("label").getComponent(cc.Label);
        this.dodge = this.node.getChildByName("layout").getChildByName("dodgeRate").getChildByName("label").getComponent(cc.Label);
        this.health = this.node.getChildByName("layout").getChildByName("health").getChildByName("label").getComponent(cc.Label);
        this.dream = this.node.getChildByName("layout").getChildByName("dream").getChildByName("label").getComponent(cc.Label);
        this.realDamage = this.node.getChildByName("layout").getChildByName("realDamage").getChildByName("label").getComponent(cc.Label);
        this.realRate = this.node.getChildByName("layout").getChildByName("realRate").getChildByName("label").getComponent(cc.Label);
        this.magicDamage = this.node.getChildByName("layout").getChildByName("magicDamage").getChildByName("label").getComponent(cc.Label);
        this.magicDefence = this.node.getChildByName("layout").getChildByName("magicDefenceRate").getChildByName("label").getComponent(cc.Label);
        this.iceRate = this.node.getChildByName("layout").getChildByName("iceRate").getChildByName("label").getComponent(cc.Label);
        this.fireRate = this.node.getChildByName("layout").getChildByName("fireRate").getChildByName("label").getComponent(cc.Label);
        this.lighteningRate = this.node.getChildByName("layout").getChildByName("lighteningRate").getChildByName("label").getComponent(cc.Label);
        this.toxicRate = this.node.getChildByName("layout").getChildByName("toxicRate").getChildByName("label").getComponent(cc.Label);
        this.curseRate = this.node.getChildByName("layout").getChildByName("curseRate").getChildByName("label").getComponent(cc.Label);
        this.remoteCooldown = this.node.getChildByName("layout").getChildByName("remoteCooldown").getChildByName("label").getComponent(cc.Label);
        this.remoteCritRate = this.node.getChildByName("layout").getChildByName("remoteCritRate").getChildByName("label").getComponent(cc.Label);
        this.remoteDamage = this.node.getChildByName("layout").getChildByName("remoteDamage").getChildByName("label").getComponent(cc.Label);
        this.sanity = this.node.getChildByName("layout").getChildByName("sanity").getChildByName("label").getComponent(cc.Label);
        this.solidSatiety = this.node.getChildByName("layout").getChildByName("solidSatiety").getChildByName("label").getComponent(cc.Label);
        this.liquidSatiety = this.node.getChildByName("layout").getChildByName("liquidSatiety").getChildByName("label").getComponent(cc.Label);
        this.layout = this.node.getChildByName("layout");
        this.addSpriteTouchEvent();
      };
      PlayerInfoDialog.prototype.start = function() {};
      PlayerInfoDialog.prototype.refreshDialog = function(playerData, equipmentData, statusData, force) {
        if (!this.attack || !playerData || !equipmentData || !statusData) return;
        this.playerData = playerData;
        this.equipmentData = equipmentData;
        this.statusData = statusData;
        if (!this.layout.active && !force) return;
        var finalCommonData = playerData.FinalCommon.clone();
        this.organization.string = AvatarData_1.default.ORGANIZATION[playerData.AvatarData.organizationIndex];
        this.attack.string = this.getInfo(finalCommonData.DamageMin, equipmentData.FinalCommon.DamageMin, statusData.Common.DamageMin, false, equipmentData.FinalCommon.damageMinPercent, statusData.Common.damageMinPercent) + "    MAX:" + this.getInfo(finalCommonData.DamageMax, equipmentData.FinalCommon.DamageMax, statusData.Common.DamageMax, false, equipmentData.FinalCommon.damageMaxPercent, statusData.Common.damageMaxPercent);
        this.criticalStrikeRate.string = this.getInfo(finalCommonData.criticalStrikeRate, equipmentData.FinalCommon.criticalStrikeRate, statusData.Common.criticalStrikeRate, true);
        this.defence.string = this.getInfo(finalCommonData.Defence, equipmentData.FinalCommon.Defence, statusData.Common.Defence, false, equipmentData.FinalCommon.defencePercent, statusData.Common.defencePercent);
        this.lifeDrain.string = this.getInfo(finalCommonData.lifeDrainRate, equipmentData.FinalCommon.lifeDrainRate, statusData.Common.lifeDrainRate, true);
        this.damageBack.string = this.getInfo(finalCommonData.DamageBack, equipmentData.FinalCommon.DamageBack, statusData.Common.DamageBack, false, equipmentData.FinalCommon.damageBackPercent, statusData.Common.damageBackPercent);
        this.moveSpeed.string = this.getInfo(finalCommonData.MoveSpeed, equipmentData.FinalCommon.MoveSpeed, statusData.Common.MoveSpeed, false, equipmentData.FinalCommon.moveSpeedPercent, statusData.Common.moveSpeedPercent);
        this.attackSpeed.string = this.getInfo(finalCommonData.AttackSpeed, equipmentData.FinalCommon.AttackSpeed, statusData.Common.AttackSpeed, false, equipmentData.FinalCommon.attackSpeedPercent, statusData.Common.attackSpeedPercent);
        this.dodge.string = this.getInfo(finalCommonData.dodgeRate, equipmentData.FinalCommon.dodgeRate, statusData.Common.dodgeRate, true);
        this.health.string = playerData.currentHealth.toFixed(1).replace(".0", "") + "/" + this.getInfo(finalCommonData.MaxHealth, equipmentData.FinalCommon.MaxHealth, statusData.Common.MaxHealth, false, equipmentData.FinalCommon.maxHealthPercent, statusData.Common.maxHealthPercent);
        this.dream.string = playerData.currentDream.toFixed(1).replace(".0", "") + "/" + this.getInfo(finalCommonData.MaxDream, equipmentData.FinalCommon.MaxDream, statusData.Common.MaxDream, false, equipmentData.FinalCommon.maxDreamPercent, statusData.Common.maxDreamPercent);
        this.realDamage.string = this.getInfo(finalCommonData.RealDamage, equipmentData.FinalCommon.RealDamage, statusData.Common.RealDamage, false, equipmentData.FinalCommon.realDamagePercent, statusData.Common.realDamagePercent);
        this.realRate.string = this.getInfo(finalCommonData.realRate, equipmentData.FinalCommon.realRate, statusData.Common.realRate, true);
        this.magicDamage.string = this.getInfo(finalCommonData.MagicDamage, equipmentData.FinalCommon.MagicDamage, statusData.Common.MagicDamage, false, equipmentData.FinalCommon.magicDamagePercent, statusData.Common.magicDamagePercent);
        this.magicDefence.string = this.getInfo(finalCommonData.magicDefenceRate, equipmentData.FinalCommon.magicDefenceRate, statusData.Common.magicDefenceRate, true);
        this.iceRate.string = this.getInfo(finalCommonData.iceRate, equipmentData.FinalCommon.iceRate, statusData.Common.iceRate, true);
        this.fireRate.string = this.getInfo(finalCommonData.fireRate, equipmentData.FinalCommon.fireRate, statusData.Common.fireRate, true);
        this.lighteningRate.string = this.getInfo(finalCommonData.lighteningRate, equipmentData.FinalCommon.lighteningRate, statusData.Common.lighteningRate, true);
        this.toxicRate.string = this.getInfo(finalCommonData.toxicRate, equipmentData.FinalCommon.toxicRate, statusData.Common.toxicRate, true);
        this.curseRate.string = this.getInfo(finalCommonData.curseRate, equipmentData.FinalCommon.curseRate, statusData.Common.curseRate, true);
        this.remoteCritRate.string = this.getInfo(finalCommonData.remoteCritRate, equipmentData.FinalCommon.remoteCritRate, statusData.Common.remoteCritRate, true);
        this.remoteDamage.string = this.getInfo(finalCommonData.RemoteDamage, equipmentData.FinalCommon.RemoteDamage, statusData.Common.RemoteDamage, false, equipmentData.FinalCommon.remoteDamagePercent, statusData.Common.remoteDamagePercent);
        this.remoteCooldown.string = this.getInfo(finalCommonData.remoteCooldown, equipmentData.FinalCommon.remoteCooldown, statusData.Common.remoteCooldown);
        this.sanity.string = this.getInfo(playerData.LifeData.sanity, 0, 0, true);
        this.solidSatiety.string = this.getInfo(playerData.LifeData.solidSatiety, 0, 0, true);
        this.liquidSatiety.string = this.getInfo(playerData.LifeData.liquidSatiety, 0, 0, true);
      };
      PlayerInfoDialog.prototype.getInfo = function(base, equip, status, isPercent, equipTotalPercent, statusTotalPercent) {
        var s = "" + base.toFixed(1).replace(".0", "");
        isPercent && (s += "%");
        if (0 != equip) {
          s += " (E:+" + equip.toFixed(1).replace(".0", "");
          isPercent && (s += "%");
          equipTotalPercent > 0 && (s += " ET:" + equipTotalPercent + "%");
          0 == status && (s += ")");
        }
        if (0 != status) {
          s += " S:+" + status.toFixed(1).replace(".0", "");
          isPercent && (s += "%");
          statusTotalPercent > 0 && (s += " ST:" + statusTotalPercent + "%");
          s += ")";
        }
        s = s.replace("+-", "-");
        return s;
      };
      PlayerInfoDialog.prototype.addSpriteTouchEvent = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_START, function() {
          _this.isShow = true;
          _this.refreshDialog(_this.playerData, _this.equipmentData, _this.statusData, true);
        });
        this.node.on(cc.Node.EventType.TOUCH_END, function() {
          _this.isShow = false;
        });
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          _this.isShow = false;
        });
        this.node.on(cc.Node.EventType.MOUSE_ENTER, function() {
          _this.isShow = true;
          _this.refreshDialog(_this.playerData, _this.equipmentData, _this.statusData, true);
        });
        this.node.on(cc.Node.EventType.MOUSE_LEAVE, function() {
          _this.isShow = false;
        });
      };
      PlayerInfoDialog.prototype.update = function(dt) {
        this.layout.active = this.isShow;
      };
      PlayerInfoDialog = __decorate([ ccclass ], PlayerInfoDialog);
      return PlayerInfoDialog;
    }(cc.Component);
    exports.default = PlayerInfoDialog;
    cc._RF.pop();
  }, {
    "../data/AvatarData": "AvatarData"
  } ],
  PlayerWeapon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3affyq+pdEIqRjlXOazN5E", "PlayerWeapon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./EventHelper");
    var MeleeWeapon_1 = require("./MeleeWeapon");
    var Shooter_1 = require("./Shooter");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var MeleeShadowWeapon_1 = require("./MeleeShadowWeapon");
    var Logic_1 = require("./Logic");
    var Random_1 = require("../utils/Random");
    var MeleeCollideHelper_1 = require("./MeleeCollideHelper");
    var BaseAvatar_1 = require("../base/BaseAvatar");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerWeapon = function(_super) {
      __extends(PlayerWeapon, _super);
      function PlayerWeapon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.meleeCollideHelper = null;
        _this.player = null;
        _this.meleeWeapon = null;
        _this.shadowWeapon = null;
        _this.shooter = null;
        _this.isLeftHand = false;
        _this.isHeavyRemotoAttacking = false;
        _this.isShadow = false;
        _this.selfDefaultPos = cc.v3(-15, 40);
        _this.otherDefaultPos = cc.v3(20, 40);
        _this.handsUpPosX = 32;
        _this.handsUpPosY = 32;
        _this.handsUpPos = cc.v3(0, 0);
        _this.remoteIntervalTime = 0;
        _this.isCooling = false;
        _this.remoteAngleOffset = 0;
        _this.isHandsUp = false;
        _this.interactBuildingAttacking = false;
        _this.interactBuildingLift = false;
        _this.ammoRecovery = 0;
        _this.maxAmmo = 0;
        _this.checkTimeDelay = 0;
        return _this;
      }
      PlayerWeapon.prototype.init = function(player, isLeftHand, isShadow) {
        this.isShadow = isShadow;
        this.isLeftHand = isLeftHand;
        this.player = player;
        this.initMelee();
        this.initShooter();
        if (isLeftHand) {
          this.selfDefaultPos = cc.v3(20, 40);
          this.otherDefaultPos = cc.v3(-15, 40);
        } else {
          this.selfDefaultPos = cc.v3(-15, 40);
          this.otherDefaultPos = cc.v3(20, 40);
        }
      };
      PlayerWeapon.prototype.initMelee = function() {
        if (this.isShadow) {
          this.shadowWeapon = this.getComponentInChildren(MeleeShadowWeapon_1.default);
          this.shadowWeapon.init(this.player, this.isLeftHand ? this.player.handLeft.meleeWeapon : this.player.handRight.meleeWeapon);
        } else {
          this.meleeWeapon = this.getComponentInChildren(MeleeWeapon_1.default);
          this.meleeWeapon.IsSecond = this.isLeftHand;
        }
      };
      PlayerWeapon.prototype.initShooter = function() {
        this.shooter = this.getComponentInChildren(Shooter_1.default);
        this.shooter.player = this.player;
        this.shooter.actor = this.player;
        var finalData = this.player.data.FinalCommon;
        this.ammoRecovery = finalData.AmmoRecovery;
        this.maxAmmo = finalData.MaxAmmo;
      };
      PlayerWeapon.prototype.handsUp = function(isUp, isLift, isAttacking) {
        var _this = this;
        if (this.isHandsUp && isUp) {
          this.interactBuildingAttacking = isAttacking;
          this.interactBuildingLift = isLift;
        } else this.interactBuildingAttacking = false;
        this.meleeWeapon.setWeaponInVisible(isUp);
        if (isUp && !this.isHandsUp) {
          this.isHandsUp = true;
          this.handsUpPos = cc.v3(this.handsUpPosX, 0);
          isLift && this.scheduleOnce(function() {
            _this.handsUpPos = cc.v3(0, _this.handsUpPosY);
          }, .1);
        }
        if (!isUp && this.isHandsUp) {
          this.isHandsUp = false;
          this.handsUpPos = cc.v3(this.handsUpPosX, 0);
          this.scheduleOnce(function() {
            _this.handsUpPos = cc.v3(0, 0);
          }, .1);
        }
      };
      PlayerWeapon.prototype.changeZIndexByDir = function(avatarZindex, dir) {
        switch (dir) {
         case BaseAvatar_1.default.DIR_UP:
          this.node.zIndex = avatarZindex - 1;
          break;

         case BaseAvatar_1.default.DIR_DOWN:
          this.node.zIndex = avatarZindex + 1;
          break;

         case BaseAvatar_1.default.DIR_LEFT:
          this.node.zIndex = this.isLeftHand ? avatarZindex + 1 : avatarZindex - 1;
          break;

         case BaseAvatar_1.default.DIR_RIGHT:
          this.node.zIndex = this.isLeftHand ? avatarZindex - 1 : avatarZindex + 1;
        }
      };
      PlayerWeapon.prototype.changeWeapon = function(equipData, spriteFrame) {
        switch (equipData.equipmetType) {
         case InventoryManager_1.default.WEAPON:
          this.meleeWeapon.changeEquipment(equipData, spriteFrame);
          break;

         case InventoryManager_1.default.REMOTE:
          this.shooter.data = equipData.clone();
          this.shooter.changeRes(this.shooter.data.img);
          var c = cc.color(255, 255, 255).fromHEX(this.shooter.data.color);
          this.shooter.changeResColor(c);
        }
      };
      PlayerWeapon.prototype.meleeAttack = function(data, fistCombo) {
        if (!this.meleeWeapon || this.meleeWeapon.IsAttacking) return;
        this.meleeWeapon.attack(data, fistCombo);
      };
      PlayerWeapon.prototype.remoteAttack = function(data, cooldownNode, bulletArcExNum, bulletLineExNum) {
        var _this = this;
        if (this.player.inventoryMgr.equips[InventoryManager_1.default.REMOTE].equipmetType != InventoryManager_1.default.REMOTE) return false;
        if (this.isCooling) return false;
        var canFire = false;
        var finalData = data.FinalCommon;
        this.ammoRecovery = finalData.AmmoRecovery;
        this.maxAmmo = finalData.MaxAmmo;
        var cooldown = finalData.remoteCooldown;
        var remoteInterval = finalData.remoteInterval;
        cooldown < 500 && (cooldown = 500);
        remoteInterval < 0 && (remoteInterval = 0);
        var currentTime = Date.now();
        var offsetTime = currentTime - this.remoteIntervalTime;
        if (offsetTime > remoteInterval) {
          if (offsetTime < 2 * remoteInterval) {
            this.remoteAngleOffset += finalData.remoteAngle / 5;
            this.remoteAngleOffset > finalData.remoteAngle && (this.remoteAngleOffset = finalData.remoteAngle);
          } else this.remoteAngleOffset = 0;
          this.remoteIntervalTime = currentTime;
          canFire = true;
        }
        if (!canFire) return false;
        data.currentAmmo--;
        this.isHeavyRemotoAttacking = 1 == this.shooter.data.isHeavy;
        this.scheduleOnce(function() {
          _this.isHeavyRemotoAttacking = false;
        }, .2);
        if (this.shooter) {
          this.shooter.remoteDamagePlayer = data.getFinalRemoteDamage();
          this.shooter.fireBullet(Random_1.default.getRandomNum(-this.remoteAngleOffset, this.remoteAngleOffset), cc.v3(0, 0), bulletArcExNum, bulletLineExNum);
        }
        if (data.currentAmmo <= 0 && cooldownNode) {
          this.isCooling = true;
          cooldownNode.width = 80;
          cooldownNode.stopAllActions();
          cc.tween(cooldownNode).to(cooldown / 1e3, {
            width: 0
          }).call(function() {
            data.currentAmmo = finalData.MaxAmmo;
            _this.isCooling = false;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_AMMO, {
              x: _this.player.data.currentAmmo,
              y: _this.maxAmmo
            });
          }).start();
        }
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_AMMO, {
          x: data.currentAmmo,
          y: finalData.MaxAmmo
        });
        return true;
      };
      PlayerWeapon.prototype.updateLogic = function(dt) {
        var x = this.player.isFaceRight ? this.handsUpPos.x : -this.handsUpPos.x;
        this.interactBuildingAttacking && (x = 0);
        var y = this.interactBuildingAttacking || !this.interactBuildingLift ? 0 : this.handsUpPos.y;
        var offestY = this.player.isInWater() ? -24 : 0;
        this.node.position = Logic_1.default.lerpPos(this.node.position, this.player.isFaceRight ? this.selfDefaultPos.add(cc.v3(x, y + offestY)) : this.otherDefaultPos.add(cc.v3(x, y + offestY)), 5 * dt);
        this.meleeWeapon && this.meleeWeapon.updateLogic(dt);
        this.meleeCollideHelper && this.meleeCollideHelper.updateLogic(cc.v3(this.node.position.x, 0));
        this.shooter && this.shooter.updateLogic(dt);
        if (!this.isCooling && this.shooter.data.equipmetType == InventoryManager_1.default.REMOTE && this.ammoRecovery > 0 && this.player.data.currentAmmo < this.maxAmmo && this.isCheckTimeDelay(dt)) {
          this.player.data.currentAmmo += this.ammoRecovery;
          this.player.data.currentAmmo > this.maxAmmo && (this.player.data.currentAmmo = this.maxAmmo);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_AMMO, {
            x: this.player.data.currentAmmo,
            y: this.maxAmmo
          });
        }
      };
      PlayerWeapon.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .5) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      __decorate([ property(MeleeCollideHelper_1.default) ], PlayerWeapon.prototype, "meleeCollideHelper", void 0);
      PlayerWeapon = __decorate([ ccclass ], PlayerWeapon);
      return PlayerWeapon;
    }(cc.Component);
    exports.default = PlayerWeapon;
    cc._RF.pop();
  }, {
    "../base/BaseAvatar": "BaseAvatar",
    "../manager/InventoryManager": "InventoryManager",
    "../utils/Random": "Random",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./MeleeCollideHelper": "MeleeCollideHelper",
    "./MeleeShadowWeapon": "MeleeShadowWeapon",
    "./MeleeWeapon": "MeleeWeapon",
    "./Shooter": "Shooter"
  } ],
  Player: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03570PUzDdNyIu4Asd1jFZT", "Player");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MoveComponent_1 = require("./../ecs/component/MoveComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Shooter_1 = require("./Shooter");
    var Logic_1 = require("./Logic");
    var Dungeon_1 = require("./Dungeon");
    var Achievement_1 = require("./Achievement");
    var PlayerAvatar_1 = require("./PlayerAvatar");
    var PlayerWeapon_1 = require("./PlayerWeapon");
    var EventHelper_1 = require("./EventHelper");
    var ShadowPlayer_1 = require("../actor/ShadowPlayer");
    var AvatarData_1 = require("../data/AvatarData");
    var DamageData_1 = require("../data/DamageData");
    var EquipmentData_1 = require("../data/EquipmentData");
    var FromData_1 = require("../data/FromData");
    var PlayerData_1 = require("../data/PlayerData");
    var StatusData_1 = require("../data/StatusData");
    var TalentData_1 = require("../data/TalentData");
    var ShadowOfSight_1 = require("../effect/ShadowOfSight");
    var Equipment_1 = require("../equipment/Equipment");
    var Item_1 = require("../item/Item");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var LightManager_1 = require("../manager/LightManager");
    var StatusManager_1 = require("../manager/StatusManager");
    var OrganizationTalent_1 = require("../talent/OrganizationTalent");
    var ProfessionTalent_1 = require("../talent/ProfessionTalent");
    var Talent_1 = require("../talent/Talent");
    var Tips_1 = require("../ui/Tips");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var Random_1 = require("../utils/Random");
    var MeleeWeapon_1 = require("./MeleeWeapon");
    var Shield_1 = require("./Shield");
    var CCollider_1 = require("../collider/CCollider");
    var Utils_1 = require("../utils/Utils");
    var NextStep_1 = require("../utils/NextStep");
    var LifeData_1 = require("../data/LifeData");
    var TriggerData_1 = require("../data/TriggerData");
    var ActorBottomDir_1 = require("../actor/ActorBottomDir");
    var JumpingAbility_1 = require("../actor/JumpingAbility");
    var Controller_1 = require("./Controller");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var AreaOfEffectData_1 = require("../data/AreaOfEffectData");
    var PlayActor_1 = require("../base/PlayActor");
    var BaseAvatar_1 = require("../base/BaseAvatar");
    var Dialogue_1 = require("../ui/Dialogue");
    var EquipItemTalent_1 = require("../talent/EquipItemTalent");
    var OilGoldMetal_1 = require("../talent/OilGoldMetal");
    var ExitData_1 = require("../data/ExitData");
    var Player = function(_super) {
      __extends(Player, _super);
      function Player() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.pos = null;
        _this.root = null;
        _this.shadow = null;
        _this.walksmoke = null;
        _this.smokePool = null;
        _this.weaponLeft = null;
        _this.weaponRight = null;
        _this.shooterEx = null;
        _this.statusManager = null;
        _this.avatarPrefab = null;
        _this.remoteCooldown = null;
        _this.shieldNode = null;
        _this.shield = null;
        _this.shadowCamera = null;
        _this.shadowPrefab = null;
        _this.bottomDir = null;
        _this.waterSpark = null;
        _this.aoe = null;
        _this.metalPrefab = null;
        _this.metal = null;
        _this.professionTalent = null;
        _this.equipmentTalent = null;
        _this.organizationTalent = null;
        _this.touchDelay = false;
        _this.defaultPos = cc.v3(0, 0);
        _this.fistCombo = 0;
        _this.isAvoidDeathed = false;
        _this.shadowList = [];
        _this.isInWaterTile = false;
        _this.lastConsumeTime = 0;
        _this.solidStep = new NextStep_1.default();
        _this.liquidStep = new NextStep_1.default();
        _this.pooStep = new NextStep_1.default();
        _this.peeStep = new NextStep_1.default();
        _this.lastTimeInWater = false;
        _this.swimmingAudioStep = new NextStep_1.default();
        _this.lastLinearVelocityZ = 0;
        _this.statusPos = cc.v3(0, 0);
        _this.dashCooling = false;
        _this.smokeTimeDelay = 0;
        _this.dreamTimeDelay = 0;
        _this.dreamLongTimeDelay = 0;
        _this.dreamShortTimeDelay = 0;
        return _this;
      }
      Object.defineProperty(Player.prototype, "data", {
        get: function() {
          return Logic_1.default.getPlayerDataById(this.dataId);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Player.prototype, "Root", {
        get: function() {
          return this.root;
        },
        enumerable: false,
        configurable: true
      });
      Player.prototype.init = function() {
        var _this = this;
        this.inventoryMgr = Logic_1.default.inventoryMgrs[this.data.id];
        this.triggerShooter = this.shooterEx;
        this.handLeft = this.weaponLeft;
        this.handRight = this.weaponRight;
        this.statusMgr = this.statusManager;
        this.jumpAbility = this.addComponent(JumpingAbility_1.default);
        this.jumpAbility.init(this, 2, 0, function(group, type) {
          TriggerData_1.default.TYPE_JUMP_END == type && (_this.sc.isMoving ? _this.playerAnim(BaseAvatar_1.default.STATE_WALK, _this.currentDir) : _this.playerAnim(BaseAvatar_1.default.STATE_IDLE, _this.currentDir));
          _this.exTrigger(group, type, null, null);
        });
        this.avatar = PlayerAvatar_1.default.create(this.avatarPrefab, this.root, Logic_1.default.playerData.AvatarData.clone(), this.node.group);
      };
      Player.prototype.onLoad = function() {
        var _this = this;
        this.init();
        this.shield = this.shieldNode.getComponent(Shield_1.default);
        this.lastConsumeTime = Logic_1.default.realTime;
        this.entity.Move.damping = 3;
        this.entity.Move.linearVelocity = cc.v2(0, 0);
        this.statusManager.statusIconList = this.statusIconList;
        this.statusPos = this.statusManager.node.position.clone();
        this.pos = cc.v3(0, 0);
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.scheduleOnce(function() {
          _this.sc.isShow = true;
          Logic_1.default.isCheatMode && _this.scheduleOnce(function() {
            _this.addStatus(StatusManager_1.default.PERFECTDEFENCE, new FromData_1.default());
          }, .2);
        }, .5);
        this.initTalent();
        this.initCollider();
        this.weaponLeft.init(this, true, false);
        this.weaponRight.init(this, false, false);
        this.data.id == Logic_1.default.currentPlayerId && this.scheduleOnce(function() {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_EQUIPMENT_REFRESH_ALL);
        });
        this.remoteCooldown.width = 0;
        this.remoteCooldown.opacity = 200;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_UPDATE_OILGOLD_DATA, function(detail) {
          if (_this.node) {
            _this.data.OilGoldData.valueCopy(Logic_1.default.playerData.OilGoldData);
            _this.updateData();
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_USEDREAM, function(detail) {
          _this.node && _this.data.AvatarData.organizationIndex == AvatarData_1.default.HUNTER && _this.updateDream(detail.value);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_TIME_TICK, function(detail) {
          _this.node && Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099 && _this.timeConsumeLife();
        });
        Logic_1.default.playerData.pos.y == Dungeon_1.default.HEIGHT_SIZE - 1 && (Logic_1.default.playerData.pos.y = Dungeon_1.default.HEIGHT_SIZE - 2);
        this.pos = Logic_1.default.playerData.pos.clone();
        this.defaultPos = Logic_1.default.playerData.pos.clone();
        this.updatePlayerPos();
        this.entity.NodeRender.node = this.node;
        this.entity.NodeRender.root = this.root;
        this.shooterEx.player = this;
        this.shooterEx.isEx = true;
        this.smokePool = new cc.NodePool();
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.POOL_DESTORY_WALKSMOKE, function(detail) {
          _this.destroySmoke(detail.coinNode);
        });
        this.playerAnim(BaseAvatar_1.default.STATE_IDLE, this.currentDir);
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
        LightManager_1.default.registerLight(this.lights, this.node);
        this.bottomDir && this.bottomDir.init(this);
        if (!this.playerSpriteTexture) {
          var width = 800;
          this.playerSpriteTexture = new cc.RenderTexture();
          this.playerSpriteTexture.initWithSize(width, width);
          this.playerSpriteTexture.setFilters(cc.Texture2D.Filter.NEAREST, cc.Texture2D.Filter.NEAREST);
          this.shadowCamera.targetTexture = this.playerSpriteTexture;
          this.shadowCamera.zoomRatio = cc.winSize.height / width;
          this.shadowCamera.enabled = false;
          this.playerSpriteframe = new cc.SpriteFrame(this.playerSpriteTexture);
          this.sprite.spriteFrame = this.playerSpriteframe;
        }
        this.metal = cc.instantiate(this.metalPrefab).getComponent(OilGoldMetal_1.default);
        this.metal.init(this);
      };
      Player.prototype.ctrlRemoteCancel = function() {
        this.shield && this.shield.data.equipmetType == InventoryManager_1.default.SHIELD ? this.shield.cancel() : this.sc && (this.sc.isShooting = false);
      };
      Player.prototype.initShadowList = function(isFromSave, count, lifeTime) {
        count > 5 && (count = 5);
        for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          (s.isValid || s.enabled) && s.stop();
        }
        this.shadowList = [];
        if (isFromSave) {
          var currentTime = Date.now();
          for (var i = 0; i < count; i++) if (this.data.ShadowList[i] && currentTime - this.data.ShadowList[i] < 1e3 * lifeTime) {
            var shadow = cc.instantiate(this.shadowPrefab).getComponent(ShadowPlayer_1.default);
            shadow.init(this, this.playerSpriteframe, i, lifeTime);
            this.shadowList.push(shadow);
          }
        } else for (var i = 0; i < count; i++) {
          var shadow = cc.instantiate(this.shadowPrefab).getComponent(ShadowPlayer_1.default);
          shadow.init(this, this.playerSpriteframe, i, lifeTime);
          this.shadowList.push(shadow);
        }
      };
      Player.prototype.addSaveStatusList = function() {
        this.statusManager && this.statusManager.addStatusListFromSave(this.data.StatusList);
      };
      Player.prototype.initTalent = function() {
        var _this = this;
        var o = new TalentData_1.default();
        var p = new TalentData_1.default();
        o.valueCopy(Logic_1.default.talents["talent10" + this.data.AvatarData.organizationIndex]);
        p.valueCopy(Logic_1.default.talents[this.data.AvatarData.professionData.talent]);
        o.resName == this.data.OrganizationTalentData.resName && o.valueCopy(this.data.OrganizationTalentData);
        p.resName == this.data.ProfessionTalentData.resName && p.valueCopy(this.data.ProfessionTalentData);
        this.data.OrganizationTalentData.valueCopy(o);
        this.data.ProfessionTalentData.valueCopy(p);
        this.professionTalent = this.getComponent(ProfessionTalent_1.default);
        this.organizationTalent = this.getComponent(OrganizationTalent_1.default);
        this.scheduleOnce(function() {
          _this.professionTalent.init(_this.data.ProfessionTalentData);
          _this.organizationTalent.init(_this.data.OrganizationTalentData);
        }, .1);
        this.equipmentTalent = this.getComponent(EquipItemTalent_1.default);
        this.equipmentTalent.init(new TalentData_1.default());
      };
      Player.prototype.updateFlashLight = function() {
        if (this.lights) for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(Logic_1.default.settings.isFlashLightOpen);
        }
      };
      Player.prototype.actorName = function() {
        return "Player";
      };
      Player.prototype.changeLight = function(color) {
        this.sprite.node.color = color;
      };
      Player.prototype.highLight = function(isHigh) {
        this.sprite.getMaterial(0).setProperty("openOutline", isHigh ? 1 : 0);
        this.sprite.getMaterial(0).setProperty("outlineSize", .2);
        this.sprite.getMaterial(0).setProperty("outlineColor", cc.color(255, 215, 0));
      };
      Player.prototype.updateFistCombo = function() {
        if (!this.weaponRight.meleeWeapon.IsFist) {
          this.fistCombo = MeleeWeapon_1.default.COMBO1;
          return;
        }
        this.fistCombo == MeleeWeapon_1.default.COMBO1 ? this.fistCombo = MeleeWeapon_1.default.COMBO2 : this.fistCombo == MeleeWeapon_1.default.COMBO2 ? this.fistCombo = MeleeWeapon_1.default.COMBO3 : (this.fistCombo == MeleeWeapon_1.default.COMBO3, 
        this.fistCombo = MeleeWeapon_1.default.COMBO1);
        this.weaponLeft.meleeWeapon.IsComboing || this.weaponRight.meleeWeapon.IsComboing || (this.fistCombo = MeleeWeapon_1.default.COMBO1);
      };
      Player.prototype.takeDizz = function(dizzDuration) {
        var _this = this;
        if (dizzDuration > 0 && !this.sc.isJumping) {
          this.sc.isDizzing = true;
          this.entity.Move.linearVelocity = cc.Vec2.ZERO;
          this.playerAnim(BaseAvatar_1.default.STATE_IDLE, this.currentDir);
          this.scheduleOnce(function() {
            _this.sc.isDizzing = false;
          }, dizzDuration);
        }
      };
      Player.prototype.updateStatus = function(statusList, totalStatusData) {
        if (!this.inventoryMgr) return;
        this.data.StatusTotalData.valueCopy(totalStatusData);
        this.data.StatusList = statusList;
        this.changeLight(cc.Color.WHITE.fromHEX(this.data.StatusTotalData.color));
        this.updateInfoUi();
      };
      Player.prototype.getWalkSmoke = function(parentNode, pos) {
        var smokePrefab = null;
        this.smokePool.size() > 0 && (smokePrefab = this.smokePool.get());
        smokePrefab && !smokePrefab.active || (smokePrefab = cc.instantiate(this.walksmoke));
        this.isInWater() && (pos = pos.add(cc.v3(0, 32)));
        smokePrefab.parent = parentNode;
        smokePrefab.position = pos;
        smokePrefab.zIndex = IndexZ_1.default.ACTOR;
        smokePrefab.opacity = 255;
        smokePrefab.active = true;
      };
      Player.prototype.destroySmoke = function(smokeNode) {
        if (!smokeNode) return;
        smokeNode.active = false;
        this.smokePool && this.smokePool.put(smokeNode);
      };
      Player.prototype.changeEquipment = function(equipmetType, equipData, spriteFrame) {
        switch (equipmetType) {
         case InventoryManager_1.default.WEAPON:
          this.weaponRight.meleeWeapon.changeEquipment(equipData, spriteFrame);
          break;

         case InventoryManager_1.default.REMOTE:
          this.weaponLeft.shooter.data = equipData.clone();
          var finalData = this.data.FinalCommon;
          if (this.data.currentAmmo > finalData.MaxAmmo || this.data.currentAmmo <= 0) {
            this.data.currentAmmo = finalData.MaxAmmo;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_AMMO, {
              x: this.data.currentAmmo,
              y: finalData.MaxAmmo
            });
          }
          this.weaponLeft.shooter.changeRes(this.weaponLeft.shooter.data.img);
          var c = cc.color(255, 255, 255).fromHEX(this.weaponLeft.shooter.data.color);
          this.weaponLeft.shooter.changeResColor(c);
          if (equipData.equipmetType != InventoryManager_1.default.EMPTY) {
            this.shield.data = new EquipmentData_1.default();
            this.updateEquipment(this.shield.sprite, this.inventoryMgr.equips[InventoryManager_1.default.SHIELD].color, Logic_1.default.spriteFrameRes(InventoryManager_1.default.EMPTY), 1 == this.shield.data.isHeavy ? 80 : 64);
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CHANGE_CONTROLLER_SHIELD, {
              isShield: false
            });
          } else EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CHANGE_CONTROLLER_SHIELD, {
            isShield: true
          });
          break;

         case InventoryManager_1.default.SHIELD:
          this.shield.data = equipData.clone();
          this.shield.node.color = cc.Color.WHITE.fromHEX(equipData.color);
          this.updateEquipment(this.shield.sprite, equipData.color, spriteFrame, 1 == this.shield.data.isHeavy ? 80 : 64);
          if (equipData.equipmetType != InventoryManager_1.default.EMPTY) {
            this.weaponLeft.shooter.data = new EquipmentData_1.default();
            this.weaponLeft.shooter.changeRes(this.weaponLeft.shooter.data.img);
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CHANGE_CONTROLLER_SHIELD, {
              isShield: true
            });
          } else EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CHANGE_CONTROLLER_SHIELD, {
            isShield: false
          });
          break;

         case InventoryManager_1.default.HELMET:
          this.avatar.hairSprite.node.opacity = 1 == equipData.hideHair ? 0 : 255;
          this.updateEquipment(this.avatar.helmetSprite, equipData.color, spriteFrame);
          break;

         case InventoryManager_1.default.CLOTHES:
          this.updateEquipment(this.avatar.clothesSprite, equipData.color, spriteFrame);
          break;

         case InventoryManager_1.default.TROUSERS:
          var isLong = 1 == equipData.trouserslong;
          this.avatar.changeLegColor(isLong, equipData.color);
          this.updateEquipment(this.avatar.pantsSprite, equipData.color, spriteFrame);
          break;

         case InventoryManager_1.default.GLOVES:
          this.updateEquipment(this.weaponRight.meleeWeapon.GlovesSprite, equipData.color, spriteFrame);
          this.updateEquipment(this.weaponLeft.meleeWeapon.GlovesSprite, equipData.color, spriteFrame);
          this.updateEquipment(this.avatar.glovesLeftSprite, equipData.color, spriteFrame);
          this.updateEquipment(this.avatar.glovesRightSprite, equipData.color, spriteFrame);
          break;

         case InventoryManager_1.default.SHOES:
          this.updateEquipment(this.avatar.shoesLeftSprite, equipData.color, spriteFrame);
          this.updateEquipment(this.avatar.shoesRightSprite, equipData.color, spriteFrame);
          break;

         case InventoryManager_1.default.CLOAK:
          this.updateEquipment(this.avatar.cloakSprite, equipData.color, spriteFrame);
        }
        this.avatar.changeEquipDirSpriteFrame(this.inventoryMgr, this.currentDir);
        this.shield.changeZIndexByDir(this.avatar.node.zIndex, this.currentDir);
        this.updateInfoUi();
      };
      Player.prototype.updateEquipment = function(sprite, color, spriteFrame, size) {
        sprite.spriteFrame = spriteFrame;
        if (size && size > 0) {
          sprite.node.width = size;
          sprite.node.height = size;
        }
        var c = cc.color(255, 255, 255).fromHEX(color);
        sprite.node.color = c;
      };
      Player.prototype.updateInfoUi = function() {
        var finalData = this.data.FinalCommon;
        var health = this.data.getHealth(finalData);
        var dream = this.data.getDream(finalData);
        var life = this.data.LifeData;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_HEALTHBAR, {
          x: health.x,
          y: health.y
        });
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_DREAMBAR, {
          x: dream.x,
          y: dream.y
        });
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_LIFE_BAR, {
          sanity: life.sanity,
          solid: life.solidSatiety,
          poo: life.poo,
          liquid: life.liquidSatiety,
          pee: life.pee
        });
        this.inventoryMgr.updateTotalEquipData();
        this.data.EquipmentTotalData.valueCopy(this.inventoryMgr.TotalEquipData);
        this.updateData();
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_INFODIALOG, {
          dataId: this.dataId
        });
      };
      Player.prototype.getCenterPosition = function() {
        return this.entity.Transform.position.clone();
      };
      Player.prototype.updatePlayerPos = function() {
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(this.pos);
        this.entity.Transform.z = this.data.posZ;
        this.node.position = this.entity.Transform.position.clone();
      };
      Player.prototype.transportPlayer = function(pos) {
        if (!this.avatar.spriteNode) return;
        this.avatar.spriteNode.angle = 0;
        this.avatar.spriteNode.scale = 5;
        this.avatar.spriteNode.opacity = 255;
        this.avatar.spriteNode.x = 0;
        this.avatar.spriteNode.y = 0;
        this.pos = pos;
        ActorUtils_1.default.changeZIndex(this);
        this.updatePlayerPos();
      };
      Player.prototype.addStatus = function(statusType, from, isFromSave) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager.addStatus(statusType, from);
      };
      Player.prototype.addCustomStatus = function(data, from) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager.addCustomStatus(data, from);
      };
      Object.defineProperty(Player.prototype, "IsVariation", {
        get: function() {
          return this.data.StatusTotalData.variation > 0;
        },
        enumerable: false,
        configurable: true
      });
      Player.prototype.stopAllDebuffs = function() {
        if (!this.node) return;
        this.statusManager.stopAllDebuffs();
      };
      Object.defineProperty(Player.prototype, "isInteractBuildingAniming", {
        get: function() {
          return this.interactBuilding && this.interactBuilding.isTaken && this.interactBuilding.isAniming;
        },
        enumerable: false,
        configurable: true
      });
      Player.prototype.ctrlMeleeAttack = function() {
        var _this = this;
        var _a;
        if (!this.weaponRight || this.sc.isDizzing || this.sc.isDied || this.sc.isFalling || this.sc.isVanishing || (null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming) || this.isInteractBuildingAniming || this.weaponLeft.meleeWeapon.IsAttacking && this.weaponLeft.meleeWeapon.IsFist || this.weaponRight.meleeWeapon.IsAttacking && this.weaponRight.meleeWeapon.IsFist || this.shield.isDefendOrParrying || this.useInteractBuilding(true)) return;
        this.updateFistCombo();
        var isAttackDo = false;
        if (this.fistCombo == MeleeWeapon_1.default.COMBO1) {
          isAttackDo = this.weaponRight.meleeWeapon.attack(this.data, this.fistCombo);
          this.weaponLeft.meleeWeapon.attackIdle(false);
          if (isAttackDo) for (var _i = 0, _b = this.shadowList; _i < _b.length; _i++) {
            var s = _b[_i];
            s.attack(this.data, this.fistCombo, this.weaponRight.meleeWeapon.Hv, false);
          }
        } else if (this.fistCombo == MeleeWeapon_1.default.COMBO2) {
          this.weaponRight.meleeWeapon.attackIdle(true);
          isAttackDo = this.weaponLeft.meleeWeapon.attack(this.data, this.fistCombo);
          if (isAttackDo) for (var _c = 0, _d = this.shadowList; _c < _d.length; _c++) {
            var s = _d[_c];
            s.attack(this.data, this.fistCombo, this.weaponLeft.meleeWeapon.Hv, true);
          }
        } else if (this.fistCombo == MeleeWeapon_1.default.COMBO3) {
          isAttackDo = this.weaponRight.meleeWeapon.attack(this.data, this.fistCombo);
          this.weaponRight.meleeWeapon.DashTime(4);
          if (isAttackDo) for (var _e = 0, _f = this.shadowList; _e < _f.length; _e++) {
            var s = _f[_e];
            s.attack(this.data, this.fistCombo, this.weaponRight.meleeWeapon.Hv, false);
          }
          this.scheduleOnce(function() {
            var isDo = _this.weaponLeft.meleeWeapon.attack(_this.data, _this.fistCombo);
            if (isDo) for (var _i = 0, _a = _this.shadowList; _i < _a.length; _i++) {
              var s = _a[_i];
              s.attack(_this.data, _this.fistCombo, _this.weaponLeft.meleeWeapon.Hv, true);
            }
          }, .15);
        }
        if (isAttackDo) {
          this.playerAnim(this.sc.isJumping ? BaseAvatar_1.default.STATE_AIRKICK : BaseAvatar_1.default.STATE_ATTACK, this.currentDir);
          this.stopHiding();
        }
      };
      Player.prototype.useShield = function() {
        var _a;
        if (!this.weaponRight || this.sc.isDizzing || this.sc.isDied || this.sc.isFalling || (null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming) || this.sc.isVanishing || this.weaponRight.meleeWeapon.IsAttacking || this.weaponLeft.meleeWeapon.IsAttacking || this.isInteractBuildingAniming) return;
        if (this.shield.Status == Shield_1.default.STATUS_PARRY || this.shield.Status == Shield_1.default.STATUS_PUTDOWN) return;
      };
      Player.prototype.useInteractBuilding = function(isMelee) {
        if (!this.interactBuilding) return false;
        if (!this.interactBuilding.isTaken) return false;
        if (this.sc.isJumping && isMelee) return false;
        if (!this.interactBuilding.isAniming) {
          this.stopHiding();
          this.playerAnim(BaseAvatar_1.default.STATE_ATTACK, this.currentDir);
          return this.interactBuilding.interact(this, false, isMelee, !isMelee);
        }
        return true;
      };
      Player.prototype.ctrlRemoteAttack = function() {
        var _a;
        if (this.useInteractBuilding(false) || (null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming)) return;
        if (this.shield && this.shield.data.equipmetType == InventoryManager_1.default.SHIELD) {
          this.shield.use(this);
          return;
        }
        if (!this.data || this.sc.isDizzing || this.sc.isDied || this.sc.isFalling || this.sc.isVanishing || !this.weaponLeft.shooter || this.avatar.isAniming) return;
        var arcEx = 0;
        var lineEx = 0;
        if (this.professionTalent && this.professionTalent.hashTalent(Talent_1.default.TALENT_005) && this.professionTalent.IsExcuting) {
          arcEx = 2;
          lineEx = 1;
        }
        this.sc && (this.sc.isShooting = true);
        this.shooterEx.setHv(this.Hv.clone());
        this.weaponLeft.shooter.setHv(this.Hv.clone());
        this.weaponRight.shooter.setHv(this.Hv.clone());
        this.weaponLeft.shooter.data.bulletSize = this.IsVariation ? .5 : 0;
        var fireSuccess = this.weaponLeft.remoteAttack(this.data, this.remoteCooldown, arcEx, lineEx);
        if (fireSuccess) {
          for (var _i = 0, _b = this.shadowList; _i < _b.length; _i++) {
            var s = _b[_i];
            s.remoteAttack(true, this.weaponLeft.shooter.data, this.weaponLeft.shooter.Hv, this.data.getFinalRemoteDamage(), arcEx, lineEx);
          }
          this.stopHiding();
          this.exTrigger(TriggerData_1.default.GROUP_ATTACK, TriggerData_1.default.TYPE_ATTTACK_REMOTE, null, null);
        }
      };
      Player.prototype.move = function(dir, pos, dt) {
        if (this.sc.isDied || this.sc.isFalling || this.sc.isDizzing || !this.sc.isShow || this.sc.isVanishing) return;
        if (!pos.equals(cc.Vec3.ZERO)) {
          pos = pos.mul(this.weaponRight.meleeWeapon.getMeleeSlowRatio());
          pos = pos.mul(this.weaponLeft.meleeWeapon.getMeleeSlowRatio());
          this.weaponLeft.isHeavyRemotoAttacking && (pos = pos.mul(.01));
          1 == this.shield.data.isHeavy && this.shield.Status > Shield_1.default.STATUS_IDLE && (pos = pos.mul(.5));
          this.interactBuilding && this.interactBuilding.isTaken && (pos = pos.mul(.5));
          this.professionTalent.IsExcuting && this.professionTalent.hashTalent(Talent_1.default.TALENT_007) && (pos = pos.mul(.01));
          if (this.isInWater()) {
            pos = pos.mul(.5);
            this.swimmingAudioStep.next(function() {
              AudioPlayer_1.default.play(AudioPlayer_1.default.SWIMMING);
            }, 2.5);
          }
          this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position);
          this.data.pos = this.pos.clone();
          this.data.posZ = this.entity.Transform.z;
          this.updateHv(cc.v2(pos).normalize());
          this.shooterEx.setHv(this.Hv.clone());
          this.weaponLeft.shooter.setHv(this.Hv.clone());
          this.weaponRight.shooter.setHv(this.Hv.clone());
        }
        var h = pos.x;
        var v = pos.y;
        var movement = cc.v2(h, v);
        var speed = this.data.getMoveSpeed();
        speed < 0 && (speed = 0);
        movement = movement.mul(speed);
        this.entity.Move.linearVelocity = movement;
        this.sc.isMoving = 0 != h || 0 != v;
        this.sc.isMoving ? this.playerAnim(BaseAvatar_1.default.STATE_WALK, dir) : this.playerAnim(BaseAvatar_1.default.STATE_IDLE, dir);
        this.updateAvatarFace(dir);
      };
      Player.prototype.updateAvatarFace = function(dir) {
        var _a;
        if (4 != dir && !this.shield.isAniming && !this.shield.isDefendOrParrying && !(null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming) && this.weaponLeft.meleeWeapon.CanMove && this.weaponRight.meleeWeapon.CanMove && !this.sc.isDashing) {
          this.isFaceRight = this.hv.x > 0;
          this.isFaceUp = this.hv.y > 0;
          this.currentDir = dir;
          dir == BaseAvatar_1.default.DIR_DOWN && this.isFaceUp ? dir = BaseAvatar_1.default.DIR_UP : dir != BaseAvatar_1.default.DIR_UP || this.isFaceUp || (dir = BaseAvatar_1.default.DIR_DOWN);
          this.weaponLeft.changeZIndexByDir(this.avatar.node.zIndex, dir);
          this.weaponRight.changeZIndexByDir(this.avatar.node.zIndex, dir);
          this.shield.changeZIndexByDir(this.avatar.node.zIndex, dir);
          this.avatar.changeAvatarByDir(dir);
        }
      };
      Player.prototype.getNearestEnemyActor = function(needRefresh, distance) {
        ActorUtils_1.default.getTargetDistance(this, this.currentTarget) > distance && (this.currentTarget = null);
        ActorUtils_1.default.isTargetCanTrack(this.currentTarget) && !needRefresh || (this.currentTarget = ActorUtils_1.default.getNearestEnemyActor(this.node.position, false, this.dungeon, distance));
        return this.currentTarget;
      };
      Player.prototype.updateHv = function(hv) {
        if (Controller_1.default.isMouseMode() && Controller_1.default.mousePos && this.dungeon) {
          var p = cc.v2(this.dungeon.node.convertToWorldSpaceAR(this.node.position));
          this.hv = Controller_1.default.mousePos.add(cc.v2(this.dungeon.cameraControl.node.position)).sub(p).normalize();
          var dir_1 = Utils_1.default.getDirByHv(this.hv);
          this.updateAvatarFace(dir_1);
          return;
        }
        var pos = ActorUtils_1.default.getTargetDirection(this.node.position, this.getNearestEnemyActor(false, this.sc.isShooting ? 800 : 300), false);
        pos.equals(cc.Vec3.ZERO) ? hv && !hv.equals(cc.Vec2.ZERO) && (this.hv = hv.normalize()) : this.hv = cc.v2(pos).normalize();
        var dir = Utils_1.default.getDirByHv(this.hv);
        this.updateAvatarFace(dir);
      };
      Player.prototype.playerAnim = function(status, dir) {
        if (status == BaseAvatar_1.default.STATE_IDLE && this.avatar.status != BaseAvatar_1.default.STATE_IDLE) {
          this.weaponLeft.shooter.playWalk(false);
          this.weaponRight.shooter.playWalk(false);
        }
        switch (status) {
         case BaseAvatar_1.default.STATE_IDLE:
          if (this.avatar.status != BaseAvatar_1.default.STATE_IDLE) {
            this.weaponLeft.shooter.playWalk(false);
            this.weaponRight.shooter.playWalk(false);
          }
          break;

         case BaseAvatar_1.default.STATE_WALK:
          if (this.avatar.status != BaseAvatar_1.default.STATE_ATTACK && this.avatar.status != BaseAvatar_1.default.STATE_AIRKICK) {
            this.weaponLeft.shooter.playWalk(true);
            this.weaponRight.shooter.playWalk(true);
          }
          break;

         case BaseAvatar_1.default.STATE_ATTACK:
         case BaseAvatar_1.default.STATE_AIRKICK:
          this.weaponLeft.shooter.playWalk(true);
          this.weaponRight.shooter.playWalk(true);
          break;

         case BaseAvatar_1.default.STATE_FALL:
         case BaseAvatar_1.default.STATE_DIE:
        }
        this.avatar.playAnim(status, dir);
      };
      Player.prototype.start = function() {
        if (!this.node) return;
        this.updateStatus(this.data.StatusList, this.data.StatusTotalData);
        this.addSaveStatusList();
        ActorUtils_1.default.changeZIndex(this);
        this.updateInfoUi();
        this.playWakeUpInit();
      };
      Player.prototype.fall = function() {
        var _this = this;
        if (this.sc.isFalling || this.sc.isJumping || this.sc.isVanishing) return;
        this.sc.isFalling = true;
        this.avatar.playAnim(BaseAvatar_1.default.STATE_FALL, this.currentDir);
        this.scheduleOnce(function() {
          _this.transportPlayer(_this.defaultPos);
          _this.playerAnim(BaseAvatar_1.default.STATE_IDLE, 1);
          var dd = new DamageData_1.default();
          dd.realDamage = 1;
          _this.takeDamage(dd, FromData_1.default.getClone("\u8dcc\u843d", "", _this.node.position));
          _this.sc.isFalling = false;
        }, 2);
      };
      Object.defineProperty(Player.prototype, "CanJump", {
        get: function() {
          var _a;
          if (this.sc.isDied || this.sc.isFalling || this.sc.isDizzing || !this.sc.isShow || this.sc.isVanishing || (null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming) || this.weaponRight.meleeWeapon.IsAttacking || this.weaponLeft.meleeWeapon.IsAttacking || this.isInteractBuildingAniming) return false;
          return true;
        },
        enumerable: false,
        configurable: true
      });
      Player.prototype.vanish = function(duration) {
        var _this = this;
        if (this.sc.isVanishing) return;
        this.sc.isVanishing = true;
        duration > 0 && this.scheduleOnce(function() {
          _this.sc.isVanishing = false;
        }, duration);
      };
      Player.prototype.ctrlDash = function() {
        var _this = this;
        var _a;
        if (this.dashCooling || (null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming)) return;
        this.sc.isDashing = true;
        this.dashCooling = true;
        var speed = 20;
        this.IsVariation && (speed = 40);
        this.professionTalent && this.professionTalent.hashTalent(Talent_1.default.TALENT_015) && (speed += 10);
        this.schedule(function() {
          _this.addDashGhost(_this.shooterEx);
        }, .05, 3);
        var pos = this.entity.Move.linearVelocity.clone();
        this.sc.isMoving = false;
        pos = pos.equals(cc.Vec2.ZERO) ? cc.v2(this.Hv.clone()) : pos.normalizeSelf();
        var d = this.hv.dot(pos);
        var isBack = d < 0;
        this.hv = pos.clone();
        pos = pos.mul(speed);
        this.entity.Move.linearVelocity = pos;
        this.entity.Move.damping = 50;
        this.playerAnim(isBack ? BaseAvatar_1.default.STATE_DASH1 : BaseAvatar_1.default.STATE_DASH, this.currentDir);
        this.highLight(true);
        this.scheduleOnce(function() {
          _this.entity.Move.damping = 3;
          _this.entity.Move.linearVelocity = cc.Vec2.ZERO;
          _this.playerAnim(BaseAvatar_1.default.STATE_IDLE, _this.currentDir);
          _this.sc.isDashing = false;
          _this.highLight(false);
          _this.scheduleOnce(function() {
            _this.dashCooling = false;
          }, .5);
        }, .3);
      };
      Player.prototype.addDashGhost = function(shooterEx) {
        var aoe = shooterEx.fireAoe(this.aoe, new AreaOfEffectData_1.default().init(.4, 2, 0, 1, IndexZ_1.default.ACTOR, false, false, false, false, false, new DamageData_1.default(0), new FromData_1.default(), []), shooterEx.node.convertToNodeSpaceAR(this.node.convertToWorldSpaceAR(cc.v3(0, this.entity.Transform.z))), 0, null, true);
        shooterEx.updateCustomAoe(aoe, [ this.sprite.spriteFrame ], false, true, 1, cc.color(189, 183, 107), 200, true, true, 48, 32);
      };
      Player.prototype.updateData = function() {
        this.data.updateFinalCommon();
      };
      Player.prototype.ctrlJump = function() {
        if (!this.CanJump) return;
        this.jumpAbility && this.jumpAbility.jump(this.data.getJumpSpeed(), this.data.getJumpHeight());
      };
      Player.prototype.ctrlJumpCancel = function() {
        this.jumpAbility && this.jumpAbility.cancel();
      };
      Player.prototype.airPause = function(speed, duration, callbackKey, callback) {
        this.jumpAbility && this.jumpAbility.airPause(speed, duration, callbackKey, callback);
      };
      Player.prototype.talentJump = function(callback) {
        var _this = this;
        if (!this.CanJump) return;
        this.jumpAbility && this.jumpAbility.jump(3 * this.data.getJumpSpeed(), 3 * PlayerData_1.default.DEFAULT_JUMP_HEIGHT, JumpingAbility_1.default.CALLBACK_JUMP, function(group, type) {
          if (type == TriggerData_1.default.TYPE_JUMP_END) {
            _this.jumpAbility.removeCallback(JumpingAbility_1.default.CALLBACK_JUMP);
            callback();
          } else type == TriggerData_1.default.TYPE_JUMP_HIGHEST && _this.jumpAbility.acceleratedFall(2);
        });
      };
      Player.prototype.takeDamage = function(damageData, from, actor) {
        var _this = this;
        if (!this.data || this.sc.isDied || this.sc.isVanishing) return false;
        var finalData = this.data.FinalCommon;
        var blockLevel = this.shield.blockDamage(this, damageData, from, actor);
        var dd = this.data.getDamage(damageData, blockLevel);
        var dodge = finalData.dodgeRate / 100;
        var isDodge = Random_1.default.rand() <= dodge && dd.getTotalDamage() > 0;
        this.sc.isDashing && dd.getTotalDamage() > 0 && (isDodge = true);
        var isBlock = false;
        if (dd.getTotalDamage() > 0 && this.organizationTalent.takeDamage(dd, from, actor)) {
          dd = new DamageData_1.default();
          isBlock = true;
        }
        dd = isDodge ? new DamageData_1.default() : dd;
        var health = this.data.getHealth(finalData);
        var totalD = dd.getTotalDamage();
        if (totalD > 0 && this.data.AvatarData.organizationIndex == AvatarData_1.default.GURAD) {
          var t = this.updateDream(totalD);
          t < totalD && this.exTrigger(TriggerData_1.default.GROUP_HURT, TriggerData_1.default.TYPE_HURT_DREAM, from, actor);
          totalD = t;
        }
        health.x -= totalD;
        health.x > health.y && (health.x = health.y);
        this.data.currentHealth = health.x;
        var isAvoidDeath = false;
        if (this.data.currentHealth <= 0) if (!this.isAvoidDeathed && this.data.StatusTotalData.avoidDeath > 0) {
          this.isAvoidDeathed = true;
          isAvoidDeath = true;
          this.data.currentHealth = 0;
        } else this.killed(from);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_HEALTHBAR, {
          x: health.x,
          y: health.y
        });
        this.showFloatFont(dd.getTotalDamage(), isDodge, false, false, isBlock, damageData.isBackAttack, isAvoidDeath);
        isDodge && this.exTrigger(TriggerData_1.default.GROUP_HURT, TriggerData_1.default.TYPE_HURT_DODGE, from, actor);
        var valid = !isDodge && dd.getTotalDamage() > 0;
        if (valid) {
          this.exTrigger(TriggerData_1.default.GROUP_HURT, TriggerData_1.default.TYPE_HURT, from, actor);
          this.changeLight(cc.color(255, 0, 0));
          this.scheduleOnce(function() {
            _this.changeLight(cc.Color.WHITE.fromHEX(_this.data.StatusTotalData.color));
          }, .2);
        }
        (valid || blockLevel == Shield_1.default.BLOCK_PARRY) && this.showDamageEffect(blockLevel, from, actor);
        return valid;
      };
      Player.prototype.updateDream = function(offset) {
        var dream = this.data.getDream(this.data.FinalCommon);
        dream.x -= offset;
        var overflow = -dream.x;
        dream.x > dream.y && (dream.x = dream.y);
        dream.x < 0 && (dream.x = 0);
        this.data.currentDream = dream.x;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_DREAMBAR, {
          x: dream.x,
          y: dream.y
        });
        return overflow < 0 ? 0 : overflow;
      };
      Player.prototype.showDamageEffect = function(blockLevel, from, actor) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
          isHeavyShaking: false
        });
        if (blockLevel == Shield_1.default.BLOCK_NORMAL) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_HIT);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DAMAGE_CORNER_SHOW);
        } else if (blockLevel == Shield_1.default.BLOCK_PARRY) AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY); else {
          AudioPlayer_1.default.play(AudioPlayer_1.default.PLAYER_HIT);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_DAMAGE_CORNER_SHOW);
        }
      };
      Player.prototype.killed = function(from) {
        if (this.sc.isDied) return;
        this.sc.isDied = true;
        this.avatar.playAnim(BaseAvatar_1.default.STATE_DIE, this.currentDir);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_STOP_COUNTTIME);
        this.scheduleOnce(function() {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_FADE_OUT);
        }, 1.5);
        AudioPlayer_1.default.play(AudioPlayer_1.default.DIE);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_LOSE_OILGOLD);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_DISAPPEAR);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_OILGOLD_LOSE_SHOW);
        Achievement_1.default.addPlayerDiedLifesAchievement();
        this.weaponLeft.node.opacity = 0;
        this.weaponRight.node.opacity = 0;
        Logic_1.default.dieFrom.valueCopy(from);
        this.scheduleOnce(function() {
          cc.audioEngine.stopMusic();
          cc.director.loadScene("gameover");
        }, 3);
        this.dungeon.darkAfterKill();
      };
      Player.prototype.ctrlMove = function(dir, pos, dt, dungeon) {
        var _a;
        this.dungeon = dungeon;
        if (this.weaponLeft.meleeWeapon && !this.weaponLeft.meleeWeapon.dungeon) {
          this.weaponLeft.meleeWeapon.dungeon = dungeon;
          this.weaponLeft.shooter.dungeon = dungeon;
          this.weaponLeft.shooter.actor = this;
          this.weaponRight.meleeWeapon.dungeon = dungeon;
          this.weaponRight.shooter.dungeon = dungeon;
          this.weaponRight.shooter.actor = this;
          this.shooterEx.dungeon = dungeon;
          this.shooterEx.actor = this;
        }
        for (var _i = 0, _b = this.shadowList; _i < _b.length; _i++) {
          var s = _b[_i];
          if (s.node && !s.weaponLeft.shadowWeapon.dungeon) {
            s.weaponLeft.shadowWeapon.dungeon = dungeon;
            s.weaponLeft.shooter.dungeon = dungeon;
            s.weaponLeft.shooter.actor = this;
            s.weaponRight.shadowWeapon.dungeon = dungeon;
            s.weaponRight.shooter.dungeon = dungeon;
            s.weaponRight.shooter.actor = this;
            s.shooterEx.dungeon = dungeon;
            s.shooterEx.actor = this;
          }
        }
        if (!this.sc.isShow) return;
        !this.professionTalent || this.isWeaponDashing || (null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming) || this.sc.isDashing || this.move(dir, pos, dt);
      };
      Player.prototype.isSmokeTimeDelay = function(dt) {
        this.smokeTimeDelay += dt;
        if (this.smokeTimeDelay > .3) {
          this.smokeTimeDelay = 0;
          return true;
        }
        return false;
      };
      Player.prototype.isDreamTimeDelay = function(dt) {
        this.dreamTimeDelay += dt;
        if (this.dreamTimeDelay > 5) {
          this.dreamTimeDelay = 0;
          return true;
        }
        return false;
      };
      Player.prototype.isDreamShortTimeDelay = function(dt) {
        this.dreamShortTimeDelay += dt;
        if (this.dreamShortTimeDelay > 1) {
          this.dreamShortTimeDelay = 0;
          return true;
        }
        return false;
      };
      Player.prototype.isDreamLongTimeDelay = function(dt) {
        this.dreamLongTimeDelay += dt;
        if (this.dreamLongTimeDelay > 10) {
          this.dreamLongTimeDelay = 0;
          return true;
        }
        return false;
      };
      Player.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.shadowCamera && this.shadowCamera.render(this.node);
        this.metal && this.metal.updateLogic(dt);
        this.isSmokeTimeDelay(dt) && this.sc.isMoving && !this.sc.isJumping && this.getWalkSmoke(this.node.parent, this.entity.Transform.position);
        this.dungeon && this.dungeon.isClear && this.isDreamShortTimeDelay(dt) && this.updateDream(-1);
        this.dungeon && !this.dungeon.isClear && this.isDreamLongTimeDelay(dt) && this.updateDream(-1);
        this.dungeon && !this.dungeon.isClear && this.isDreamTimeDelay(dt) && this.data.AvatarData.organizationIndex == AvatarData_1.default.TECH && this.updateDream(1);
        this.node.scaleX = this.getScaleSize();
        this.avatar.node.scaleX = this.isFaceRight ? 1 : -1;
        this.node.scaleY = this.getScaleSize();
        this.sprite.node.scaleX = 1 / this.getScaleSize();
        this.sprite.node.scaleY = -1 / this.getScaleSize();
        this.sprite.node.opacity = this.invisible ? 80 : 255;
        this.sc.isVanishing && (this.sprite.node.opacity = 0);
        this.updateHv();
        var showHands = this.interactBuilding && this.interactBuilding.isTaken && !this.interactBuilding.isThrowing;
        var isLift = this.interactBuilding && this.interactBuilding.isTaken && this.interactBuilding.isLift;
        if (this.weaponLeft) {
          this.weaponLeft.updateLogic(dt);
          this.weaponLeft.handsUp(showHands, isLift, this.interactBuilding && this.interactBuilding.isAttacking);
        }
        if (this.weaponRight) {
          this.weaponRight.updateLogic(dt);
          this.weaponRight.handsUp(showHands, isLift, this.interactBuilding && this.interactBuilding.isAttacking);
        }
        this.shooterEx && this.shooterEx.updateLogic(dt);
        if (this.avatar) {
          this.avatar.showLegsWithWater(this.isInWater(), this.isInWaterTile);
          this.shadow.opacity = this.isInWater() ? 0 : 128;
        }
        this.showUiButton();
        for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          s.node && s.updateLogic(dt);
        }
        var y = this.root.y - this.entity.Transform.base;
        y < 0 && (y = 0);
        var scale = 1 - y / (PlayerData_1.default.DEFAULT_JUMP_HEIGHT * MoveComponent_1.MoveComponent.PIXELS_PER_UNIT) / 2;
        this.shadow.scale = scale < .5 ? .5 : scale;
        this.shadow.y = this.entity.Transform.base;
        this.bottomDir.node.y = this.entity.Transform.base;
        this.bottomDir.node.opacity = this.isInWater() ? 128 : 255;
        ActorUtils_1.default.changeZIndex(this);
        this.showWaterSpark();
        this.jumpAbility && this.jumpAbility.updateLogic();
        this.statusManager.node.position = this.statusPos.clone().add(cc.v3(0, this.root.y));
        (this.sc.isJumping || this.entity.Transform.z - this.entity.Transform.base > 0) && this.CanJump && this.playerAnim(this.entity.Move.linearVelocityZ > 0 ? BaseAvatar_1.default.STATE_JUMP_UP : BaseAvatar_1.default.STATE_JUMP_DOWN, this.currentDir);
        this.updateFlashLight();
        this.inventoryMgr && this.inventoryMgr.updateLogic(dt, this);
      };
      Player.prototype.showWaterSpark = function() {
        if (!this.lastTimeInWater && this.isInWater()) {
          var light = cc.instantiate(this.waterSpark);
          light.parent = this.node;
          light.position = cc.v3(0, 0);
          AudioPlayer_1.default.play(AudioPlayer_1.default.JUMP_WATER);
        }
        this.lastTimeInWater = this.isInWater();
      };
      Player.prototype.isInWater = function() {
        return this.isInWaterTile && this.entity.Transform.z < 32;
      };
      Player.prototype.getScaleSize = function() {
        var sn = this.IsVariation ? 1.5 : 1;
        return sn;
      };
      Player.prototype.ctrlUseSkill = function() {
        var _a;
        !this.professionTalent || this.sc.isAttacking || this.sc.isVanishing || (null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming) || this.professionTalent.useSKill();
      };
      Player.prototype.ctrlUseSkill1 = function() {
        var _a;
        !this.organizationTalent || this.sc.isAttacking || this.sc.isVanishing || (null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming) || this.organizationTalent.useSKill();
      };
      Player.prototype.exTriggerTalent = function(data, from, actor) {
        if (_super.prototype.exTriggerTalent.call(this, data, from, actor) && this.equipmentTalent) {
          this.equipmentTalent.data = Logic_1.default.talents[data.res];
          this.equipmentTalent.useSKill();
        }
        return true;
      };
      Player.prototype.ctrlTriggerThings = function(isLongPress) {
        if (this.sc.isJumping || !this.dungeon || this.avatar.isAniming) return;
        this.dungeon.equipmentManager.lastGroundEquip && this.dungeon.equipmentManager.lastGroundEquip.taken(isLongPress) && (this.dungeon.equipmentManager.lastGroundEquip = null);
        this.dungeon.itemManager.lastGroundItem && this.dungeon.itemManager.lastGroundItem.taken(this, isLongPress) && (this.dungeon.itemManager.lastGroundItem = null);
        if (this.interactBuilding && this.interactBuilding.isTaken) this.interactBuilding.interact(this, isLongPress, false, false); else if (this.dungeon.buildingManager.lastInteractBuilding && this.dungeon.buildingManager.lastInteractBuilding.taken(this, isLongPress)) {
          this.interactBuilding = this.dungeon.buildingManager.lastInteractBuilding;
          this.dungeon.buildingManager.lastInteractBuilding = null;
        }
        this.touchedTips && this.touchedTips.next(isLongPress, this);
      };
      Player.prototype.showUiButton = function() {
        if (!this.dungeon) return;
        this.dungeon.equipmentManager.lastGroundEquip || this.dungeon.itemManager.lastGroundItem || this.dungeon.buildingManager.lastInteractBuilding || this.interactBuilding && this.interactBuilding.isTaken || this.touchedTips ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_INTERACT_SHOW, {
          isShow: true
        }) : EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_INTERACT_SHOW, {
          isShow: false
        });
        this.shield && this.shield.data.equipmetType == InventoryManager_1.default.SHIELD || this.interactBuilding && this.interactBuilding.isTaken || this.weaponLeft.shooter.data.equipmetType == InventoryManager_1.default.REMOTE ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_REMOTE_SHOW, {
          isShow: true
        }) : EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_REMOTE_SHOW, {
          isShow: false
        });
      };
      Player.prototype.onColliderEnter = function(other, self) {
        self.tag == CCollider_1.default.TAG.PLAYER_INTERACT && (this.touchedTips = null);
      };
      Player.prototype.onColliderStay = function(other, self) {
        var _this = this;
        if (self.tag == CCollider_1.default.TAG.PLAYER_INTERACT) {
          if (this.touchDelay) return;
          var isInteract = false;
          var equipment = other.node.getComponent(Equipment_1.default);
          equipment && (isInteract = true);
          var item = other.node.getComponent(Item_1.default);
          item && (isInteract = true);
          var tips = other.node.getComponent(Tips_1.default);
          if (tips) {
            isInteract = true;
            this.touchedTips = tips;
          }
          if (isInteract) {
            this.touchDelay = true;
            this.scheduleOnce(function() {
              _this.touchDelay = false;
            }, .1);
          }
        }
      };
      Player.prototype.onColliderExit = function(other, self) {
        self.tag == CCollider_1.default.TAG.PLAYER_INTERACT && (this.touchedTips = null);
      };
      Player.prototype.onColliderPreSolve = function(other, self) {
        other.tag != CCollider_1.default.TAG.NONPLAYER && other.tag != CCollider_1.default.TAG.GOODNONPLAYER || (self.disabledOnce = true);
      };
      Player.prototype.ctrlUseItem = function(data) {
        var _a;
        if (null === (_a = this.avatar) || void 0 === _a ? void 0 : _a.isAniming) return;
        Item_1.default.userIt(data, this);
        this.exTrigger(TriggerData_1.default.GROUP_USE, TriggerData_1.default.TYPE_USE_ITEM, null, null, true);
      };
      Player.prototype.setLinearVelocity = function(movement) {};
      Player.prototype.timeConsumeLife = function() {
        var _this = this;
        if (Logic_1.default.isDreaming()) return;
        var time = Logic_1.default.realTime - this.lastConsumeTime;
        this.lastConsumeTime = Logic_1.default.realTime;
        var life = this.data.LifeData;
        var solidLoss = LifeData_1.default.SOLID_LOSS * life.timeScale * time / 1e3;
        var liquidLoss = LifeData_1.default.LIQUID_LOSS * life.timeScale * time / 1e3;
        var canAddPoo = life.solidSatiety > 0;
        var canAddPee = life.liquidSatiety > 0;
        if (canAddPoo) {
          life.poo += solidLoss * LifeData_1.default.POO_RATE;
          if (life.poo > 100) {
            life.poo = 100;
            this.pooStep.next(function() {
              _this.sanityChange(-1);
              Utils_1.default.toast("\u4f60\u7684\u809a\u5b50\u4e00\u9635\u7ffb\u817e\u3002", false, true);
            }, 120);
          }
        }
        if (canAddPee) {
          life.pee += liquidLoss * LifeData_1.default.PEERATE;
          if (life.pee > 100) {
            life.pee = 100;
            this.peeStep.next(function() {
              _this.sanityChange(-1);
              Utils_1.default.toast("\u4f60\u7684\u8180\u80f1\u5feb\u8981\u70b8\u4e86\u3002", false, true);
            }, 120);
          }
        }
        this.data.LifeData.solidSatiety <= 0 && this.solidStep.next(function() {
          _this.sanityChange(-1);
          Utils_1.default.toast("\u4f60\u5feb\u8981\u997f\u6b7b\u4e86\u3002", false, true);
        }, 120);
        this.data.LifeData.liquidSatiety <= 0 && this.liquidStep.next(function() {
          _this.sanityChange(-1);
          Utils_1.default.toast("\u4f60\u5feb\u8981\u6e34\u6b7b\u4e86\u3002", false, true);
        }, 120);
        this.updateLife(0, -solidLoss, -liquidLoss);
      };
      Player.prototype.updateLife = function(sanity, solid, liquid) {
        this.data.LifeData.sanity += sanity;
        this.data.LifeData.solidSatiety += solid;
        this.data.LifeData.liquidSatiety += liquid;
        if (this.data.LifeData.sanity > 100) this.data.LifeData.sanity = 100; else if (this.data.LifeData.sanity <= 0) {
          this.data.LifeData.sanity = 0;
          if (0 != sanity) {
            Utils_1.default.toast("\u7cbe\u795e\u5d29\u6e83\u4e86\u3002\u3002\u3002", false, true);
            var sd = new StatusData_1.default();
            sd.valueCopy(Logic_1.default.status[StatusManager_1.default.INSANE]);
            sd.Common.damageMin += this.data.getFinalAttackPoint().physicalDamage;
            this.addCustomStatus(sd, new FromData_1.default());
          }
        } else this.statusManager.stopStatus(StatusManager_1.default.INSANE);
        this.data.LifeData.solidSatiety > 100 ? this.data.LifeData.solidSatiety = 100 : this.data.LifeData.solidSatiety < 0 && (this.data.LifeData.solidSatiety = 0);
        this.data.LifeData.liquidSatiety > 100 ? this.data.LifeData.liquidSatiety = 100 : this.data.LifeData.liquidSatiety < 0 && (this.data.LifeData.liquidSatiety = 0);
        this.updateInfoUi();
      };
      Player.prototype.sanityChange = function(sanity) {
        if (0 == sanity) return;
        var data = new StatusData_1.default();
        sanity > 0 ? data.valueCopy(Logic_1.default.status[StatusManager_1.default.SANITY_UP]) : sanity < 0 && data.valueCopy(Logic_1.default.status[StatusManager_1.default.SANITY_DOWN]);
        data.sanityDirect = sanity;
        this.addCustomStatus(data, new FromData_1.default());
      };
      Player.prototype.sleep = function() {
        this.avatar.playSleep();
      };
      Player.prototype.drive = function() {
        this.avatar.playDrive();
        this.node.opacity = 0;
      };
      Player.prototype.driveOff = function() {
        this.avatar.playDriveOff();
        this.node.opacity = 255;
      };
      Player.prototype.toilet = function() {
        this.avatar.playToilet();
        cc.tween(this.data.LifeData).to(3, {
          poo: 0,
          pee: 0
        }).call(function() {
          Utils_1.default.toast("\u4f60\u611f\u89c9\u4e00\u8eab\u8f7b\u677e\u3002", false, true);
        }).start();
        var total = this.data.LifeData.pee + this.data.LifeData.poo;
        total > 100 ? this.sanityChange(2) : this.sanityChange(1);
      };
      Player.prototype.read = function() {
        this.avatar.playRead();
        if (Random_1.default.getRandomNum(0, 100) > 90) {
          Utils_1.default.toast("\u4f60\u7528\u91cf\u5b50\u6ce2\u52a8\u901f\u8bfb\u770b\u5b8c\u4e86\u4e00\u672c\u4e66,\u4e66\u91cc\u7684\u5185\u5bb9\u8ba9\u4f60\u4e0d\u5bd2\u800c\u6817\u3002", false, true);
          this.sanityChange(-10);
        } else {
          Utils_1.default.toast("\u4f60\u7528\u91cf\u5b50\u6ce2\u52a8\u901f\u8bfb\u770b\u5b8c\u4e86\u4e00\u672c\u4e66,\u5947\u602a\u7684\u77e5\u8bc6\u53c8\u589e\u52a0\u4e86\u3002", false, true);
          this.sanityChange(5);
        }
      };
      Player.prototype.cooking = function() {
        this.avatar.playCooking();
        Utils_1.default.toast("\u4f60\u7092\u4e86\u4e24\u4e2a\u9e21\u86cb\u53c8\u7528\u6628\u665a\u5269\u4e0b\u7684\u7c73\u996d\u62cc\u4e86\u62cc\u3002", false, true);
      };
      Player.prototype.playWakeUpInit = function() {
        var _this = this;
        if (this.data.isWakeUp) {
          this.data.isWakeUp = false;
          this.avatar.playSleep();
          this.scheduleOnce(function() {
            Dialogue_1.default.play(Dialogue_1.default.DAILY_WAKE_UP, function(index) {
              if (0 == index) _this.avatar.playWakeUp(); else if (1 == index) {
                EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN);
                _this.scheduleOnce(function() {
                  AudioPlayer_1.default.play(AudioPlayer_1.default.EXIT);
                  Logic_1.default.dreamCostTime = 288e5;
                  Logic_1.default.loadingNextLevel(ExitData_1.default.getDreamExitDataFromReal());
                }, 1);
              }
            });
          });
        }
      };
      Player.prototype.drink = function() {
        this.avatar.playDrink();
        this.addStatus(StatusManager_1.default.HEALING, new FromData_1.default());
        this.addStatus(StatusManager_1.default.DRINK, new FromData_1.default());
        this.avatar.changeAvatarByDir(BaseAvatar_1.default.DIR_RIGHT);
      };
      Player.prototype.canEatOrDrink = function(data) {
        var life = this.data.LifeData;
        var str = "\u4f60\u89c9\u5f97";
        var can = true;
        if (data.solidSatiety > 0) {
          if (life.solidSatiety > 99) {
            can = false;
            str += "\u592a\u9971\u4e86";
            life.poo > 90 && (str += "\uff0c\u800c\u4e14\u8981\u618b\u4e0d\u4f4f");
            str += "\uff0c\u5b8c\u5168\u5403\u4e0d\u4e0b\u4e86\u3002";
          } else if (life.poo > 99) {
            can = false;
            str += "\u8981\u618b\u4e0d\u4f4f\u4e86,\u5b8c\u5168\u5403\u4e0d\u4e0b\u4e86\u3002";
          }
        } else if (data.liquidSatiety > 0) if (life.liquidSatiety > 99) {
          can = false;
          str += "\u592a\u80c0\u4e86";
          life.pee > 99 && (str += "\uff0c\u800c\u4e14\u8981\u618b\u4e0d\u4f4f");
          str += "\uff0c\u5b8c\u5168\u559d\u4e0d\u4e0b\u4e86\u3002";
        } else if (life.poo > 99) {
          can = false;
          str += "\u8981\u618b\u4e0d\u4f4f\u4e86,\u5b8c\u5168\u559d\u4e0d\u4e0b\u4e86\u3002";
        }
        if (!can) {
          Utils_1.default.toast(str, false, true);
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
        }
        return can;
      };
      __decorate([ property(cc.Sprite) ], Player.prototype, "sprite", void 0);
      __decorate([ property(cc.Vec3) ], Player.prototype, "pos", void 0);
      __decorate([ property(cc.Node) ], Player.prototype, "root", void 0);
      __decorate([ property(cc.Node) ], Player.prototype, "shadow", void 0);
      __decorate([ property(cc.Prefab) ], Player.prototype, "walksmoke", void 0);
      __decorate([ property(PlayerWeapon_1.default) ], Player.prototype, "weaponLeft", void 0);
      __decorate([ property(PlayerWeapon_1.default) ], Player.prototype, "weaponRight", void 0);
      __decorate([ property(Shooter_1.default) ], Player.prototype, "shooterEx", void 0);
      __decorate([ property(StatusManager_1.default) ], Player.prototype, "statusManager", void 0);
      __decorate([ property(cc.Prefab) ], Player.prototype, "avatarPrefab", void 0);
      __decorate([ property(cc.Node) ], Player.prototype, "remoteCooldown", void 0);
      __decorate([ property(cc.Node) ], Player.prototype, "shieldNode", void 0);
      __decorate([ property(cc.Camera) ], Player.prototype, "shadowCamera", void 0);
      __decorate([ property(cc.Prefab) ], Player.prototype, "shadowPrefab", void 0);
      __decorate([ property(ActorBottomDir_1.default) ], Player.prototype, "bottomDir", void 0);
      __decorate([ property(cc.Prefab) ], Player.prototype, "waterSpark", void 0);
      __decorate([ property(cc.Prefab) ], Player.prototype, "aoe", void 0);
      __decorate([ property(cc.Prefab) ], Player.prototype, "metalPrefab", void 0);
      Player = __decorate([ ccclass ], Player);
      return Player;
    }(PlayActor_1.default);
    exports.default = Player;
    cc._RF.pop();
  }, {
    "../actor/ActorBottomDir": "ActorBottomDir",
    "../actor/JumpingAbility": "JumpingAbility",
    "../actor/ShadowPlayer": "ShadowPlayer",
    "../base/BaseAvatar": "BaseAvatar",
    "../base/PlayActor": "PlayActor",
    "../collider/CCollider": "CCollider",
    "../data/AreaOfEffectData": "AreaOfEffectData",
    "../data/AvatarData": "AvatarData",
    "../data/DamageData": "DamageData",
    "../data/EquipmentData": "EquipmentData",
    "../data/ExitData": "ExitData",
    "../data/FromData": "FromData",
    "../data/LifeData": "LifeData",
    "../data/PlayerData": "PlayerData",
    "../data/StatusData": "StatusData",
    "../data/TalentData": "TalentData",
    "../data/TriggerData": "TriggerData",
    "../effect/ShadowOfSight": "ShadowOfSight",
    "../equipment/Equipment": "Equipment",
    "../item/Item": "Item",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/LightManager": "LightManager",
    "../manager/StatusManager": "StatusManager",
    "../talent/EquipItemTalent": "EquipItemTalent",
    "../talent/OilGoldMetal": "OilGoldMetal",
    "../talent/OrganizationTalent": "OrganizationTalent",
    "../talent/ProfessionTalent": "ProfessionTalent",
    "../talent/Talent": "Talent",
    "../ui/Dialogue": "Dialogue",
    "../ui/Tips": "Tips",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/NextStep": "NextStep",
    "../utils/Random": "Random",
    "../utils/Utils": "Utils",
    "./../ecs/component/MoveComponent": "MoveComponent",
    "./Achievement": "Achievement",
    "./Controller": "Controller",
    "./Dungeon": "Dungeon",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./MeleeWeapon": "MeleeWeapon",
    "./PlayerAvatar": "PlayerAvatar",
    "./PlayerWeapon": "PlayerWeapon",
    "./Shield": "Shield",
    "./Shooter": "Shooter"
  } ],
  Portal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "deb90P3hX5AB5svKZmVAO6Q", "Portal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Player_1 = require("../logic/Player");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../utils/IndexZ");
    var Logic_1 = require("../logic/Logic");
    var ExitData_1 = require("../data/ExitData");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Portal = function(_super) {
      __extends(Portal, _super);
      function Portal() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        _this.exitData = new ExitData_1.default();
        return _this;
      }
      Portal.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      Portal.prototype.start = function() {
        this.anim = this.getComponent(cc.Animation);
        this.anim.play("PortalCloseIdle");
      };
      Portal.prototype.setPos = function(pos) {
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(pos);
        this.node.position = this.entity.Transform.position.clone();
        this.node.zIndex = IndexZ_1.default.BASE + 10 * (Dungeon_1.default.HEIGHT_SIZE - pos.y) + 1;
      };
      Portal.prototype.AnimGateClose = function() {
        this.anim.play("PortalCloseIdle");
      };
      Portal.prototype.AnimGateOpen = function() {
        this.anim.play("PortalOpenIdle");
      };
      Portal.prototype.openGate = function() {
        var _this = this;
        if (this.isOpen) return;
        this.isOpen = true;
        this.scheduleOnce(function() {
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("PortalOpen");
        }, .1);
      };
      Portal.prototype.closeGate = function() {
        if (!this.isOpen) return;
        this.isOpen = false;
        this.anim.play("PortalClose");
      };
      Portal.prototype.onColliderEnter = function(other, self) {
        var player = other.node.getComponent(Player_1.default);
        if (player && this.isOpen) {
          this.closeGate();
          AudioPlayer_1.default.play(AudioPlayer_1.default.EXIT);
          Logic_1.default.loadingNextLevel(this.exitData);
        }
      };
      Portal = __decorate([ ccclass ], Portal);
      return Portal;
    }(Building_1.default);
    exports.default = Portal;
    cc._RF.pop();
  }, {
    "../data/ExitData": "ExitData",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Player": "Player",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  ProfessionData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a352fkUprhBDLnAwraLUc3I", "ProfessionData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var CommonData_1 = require("./CommonData");
    var ProfessionData = function() {
      function ProfessionData() {
        this.id = 0;
        this.desc = "";
        this.nameCn = "";
        this.nameEn = "";
        this.equips = {};
        this.talent = "";
        this.items = [];
        this.common = new CommonData_1.default();
      }
      Object.defineProperty(ProfessionData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      ProfessionData.prototype.valueCopy = function(data) {
        if (!data) return;
        var name = this.nameCn;
        DataUtils_1.default.baseCopy(this, data, true);
        this.common.valueCopy(data.common);
        this.nameCn = data.nameCn ? data.nameCn : name;
        this.equips = data.equips ? data.equips : {};
        this.items = data.items ? data.items : [];
      };
      ProfessionData.prototype.clone = function() {
        var e = new ProfessionData();
        e.valueCopy(this);
        return e;
      };
      return ProfessionData;
    }();
    exports.default = ProfessionData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./CommonData": "CommonData"
  } ],
  ProfessionTalent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a250fm206dD/bouLDpaklSh", "ProfessionTalent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var FromData_1 = require("../data/FromData");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var Shooter_1 = require("../logic/Shooter");
    var FireGhost_1 = require("./FireGhost");
    var Talent_1 = require("./Talent");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var StatusManager_1 = require("../manager/StatusManager");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var Boss_1 = require("../boss/Boss");
    var AreaOfEffectData_1 = require("../data/AreaOfEffectData");
    var NonPlayerManager_1 = require("../manager/NonPlayerManager");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var CoolDownView_1 = require("../ui/CoolDownView");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var Utils_1 = require("../utils/Utils");
    var NonPlayerData_1 = require("../data/NonPlayerData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ProfessionTalent = function(_super) {
      __extends(ProfessionTalent, _super);
      function ProfessionTalent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.aoe = null;
        _this.fireball = null;
        _this.icethron = null;
        _this.fireGhost = null;
        _this.healingLight = null;
        _this.rageLight = null;
        _this.broomPrefab = null;
        _this.cookingPrefab = null;
        _this.swordLightPrefab = null;
        _this.smokePrefab = null;
        _this.skyhandPrefab = null;
        _this.daggerLightPrefab = null;
        _this.fireGhostNum = 0;
        return _this;
      }
      ProfessionTalent.prototype.onLoad = function() {
        var _this = this;
        this.ghostPool = new cc.NodePool(FireGhost_1.default);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.POOL_DESTORY_FIREGHLOST, function(detail) {
          _this.destroyGhost(detail.targetNode);
        });
      };
      ProfessionTalent.prototype.destroyGhost = function(ghostNode) {
        if (!ghostNode) return;
        ghostNode.active = false;
        if (this.ghostPool) {
          this.ghostPool.put(ghostNode);
          this.fireGhostNum--;
          cc.log("destroyGhost");
        }
      };
      ProfessionTalent.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.coolDownId = CoolDownView_1.default.PROFESSION;
        var storePointMax = 1;
        this.data.resName == Talent_1.default.TALENT_014 && (storePointMax = 3);
        this.initCoolDown(data, storePointMax);
      };
      ProfessionTalent.prototype.skillCanUse = function() {
        switch (this.data.resName) {
         case Talent_1.default.TALENT_000:
         case Talent_1.default.TALENT_010:
         case Talent_1.default.TALENT_015:
          return false;

         case Talent_1.default.TALENT_009:
          return this.canSteal();

         case Talent_1.default.TALENT_019:
          return this.player.CanJump && !this.player.sc.isJumping;
        }
        return true;
      };
      ProfessionTalent.prototype.doSkill = function() {
        this.excuteSkill(null);
        for (var _i = 0, _a = this.player.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          s.node && this.excuteSkill(s);
        }
      };
      ProfessionTalent.prototype.excuteSkill = function(shadowPlayer) {
        var _this = this;
        var shooterEx = shadowPlayer ? shadowPlayer.shooterEx : this.player.shooterEx;
        switch (this.data.resName) {
         case Talent_1.default.TALENT_000:
          Utils_1.default.toast("\u68a6\u5883\u5f00\u53d1\u4e2d,\u65e0\u6cd5\u4f7f\u7528\u3002");
          break;

         case Talent_1.default.TALENT_001:
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
          this.shoot(shooterEx, 0, 0, "bullet040", null, null);
          break;

         case Talent_1.default.TALENT_002:
          this.healing();
          break;

         case Talent_1.default.TALENT_003:
          this.cooking(shooterEx);
          break;

         case Talent_1.default.TALENT_004:
          this.showIceThron(shooterEx);
          break;

         case Talent_1.default.TALENT_005:
          shadowPlayer || this.rageShoot();
          break;

         case Talent_1.default.TALENT_006:
          this.flash(shadowPlayer);
          break;

         case Talent_1.default.TALENT_007:
          this.addSwordLight(shooterEx);
          break;

         case Talent_1.default.TALENT_008:
          this.addDaggerLight(shooterEx, shadowPlayer);
          break;

         case Talent_1.default.TALENT_009:
          this.steal(shadowPlayer);
          break;

         case Talent_1.default.TALENT_010:
          break;

         case Talent_1.default.TALENT_011:
          shadowPlayer || this.aimedShoot();
          break;

         case Talent_1.default.TALENT_012:
          this.addBroom(shooterEx);
          break;

         case Talent_1.default.TALENT_013:
          this.showFireBall(shooterEx);
          break;

         case Talent_1.default.TALENT_014:
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL1);
          this.shoot(shooterEx, Shooter_1.default.ARC_EX_NUM_8, 0, "bullet035", null, null);
          this.scheduleOnce(function() {
            _this.IsExcuting = false;
          }, .1);
          break;

         case Talent_1.default.TALENT_015:
          break;

         case Talent_1.default.TALENT_016:
          shadowPlayer ? this.addClearCircle(shadowPlayer.shooterEx) : this.addClearCircle(shooterEx);
          break;

         case Talent_1.default.TALENT_017:
          this.showSmoke(shooterEx);
          break;

         case Talent_1.default.TALENT_018:
          this.addShadowFighter(shadowPlayer);
          break;

         case Talent_1.default.TALENT_019:
          this.jump(shooterEx);
        }
      };
      ProfessionTalent.prototype.addClearCircle = function(shooterEx) {
        this.player.stopAllDebuffs();
        this.player.dungeon.nonPlayerManager.isPetAlive() && this.player.dungeon.nonPlayerManager.pet.stopAllDebuffs();
        var aoe = shooterEx.fireAoe(this.aoe, new AreaOfEffectData_1.default().init(2, .2, 0, this.player.IsVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(this.player.getCenterPosition()), false, false, true, false, false, new DamageData_1.default(0), new FromData_1.default(), []), cc.v3(0, 32), 0, null, true);
        shooterEx.updateCustomAoe(aoe, [ Logic_1.default.spriteFrameRes("clearcircle1"), Logic_1.default.spriteFrameRes("clearcircle2"), Logic_1.default.spriteFrameRes("clearcircle3"), Logic_1.default.spriteFrameRes("clearcircle4") ], false, true, 4);
      };
      ProfessionTalent.prototype.addShadowFighter = function(shadowPlayer) {
        var _a;
        for (var i = 0; i < 3; i++) {
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.default.nonplayers[NonPlayerManager_1.default.NON_SHADOW]);
          var fc = this.player.data.FinalCommon;
          data.Common.damageMin = this.player.data.getFinalAttackPoint().getTotalDamage();
          data.Common.maxHealth = fc.MaxHealth;
          this.player.weaponRight.meleeWeapon.dungeon.nonPlayerManager.addNonPlayerFromData(data, shadowPlayer ? shadowPlayer.node.position : this.player.node.position, null === (_a = this.player.entity) || void 0 === _a ? void 0 : _a.Transform.z, this.player.weaponRight.meleeWeapon.dungeon);
        }
      };
      ProfessionTalent.prototype.healing = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        var light = cc.instantiate(this.healingLight);
        light.parent = this.player.node;
        light.position = cc.v3(0, 64);
        light.zIndex = IndexZ_1.default.OVERHEAD;
        this.player.addStatus(StatusManager_1.default.HEALING, new FromData_1.default());
        this.player.dungeon.nonPlayerManager.isPetAlive() && this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.HEALING, new FromData_1.default());
      };
      ProfessionTalent.prototype.rageShoot = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        var light = cc.instantiate(this.rageLight);
        light.parent = this.player.node;
        light.position = cc.v3(0, 64);
        light.zIndex = IndexZ_1.default.OVERHEAD;
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
          light && cc.isValid(light) && light.destroy();
        }, 3);
      };
      ProfessionTalent.prototype.flash = function(shadowPlayer) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.TAKEPHOTO);
        cc.tween(this.sprite.node).call(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_FLASH_SPEED, new FromData_1.default());
          _this.player.dungeon.nonPlayerManager.isPetAlive() && _this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.TALENT_FLASH_SPEED, new FromData_1.default());
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("flash");
          _this.sprite.node.width = 128;
          _this.sprite.node.height = 128;
          _this.sprite.node.opacity = 255;
          _this.sprite.node.position = cc.v3(0, 32);
        }).to(.1, {
          opacity: 0
        }).call(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("singleColor");
          _this.sprite.node.width = 2e3;
          _this.sprite.node.height = 2e3;
          _this.sprite.node.opacity = 255;
        }).to(.1, {
          opacity: 0
        }).call(function() {
          StatusManager_1.default.addStatus2NearEnemies(_this.player, shadowPlayer ? shadowPlayer.node : _this.player.node, StatusManager_1.default.TALENT_FLASH_DIZZ, _this.player.IsVariation ? 500 : 400, new FromData_1.default());
          _this.sprite.spriteFrame = null;
        }).start();
      };
      ProfessionTalent.prototype.aimedShoot = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.RELOAD);
        cc.tween(this.sprite.node).call(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_AIMED, new FromData_1.default());
          _this.player.dungeon.nonPlayerManager.isPetAlive() && _this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.TALENT_AIMED, new FromData_1.default());
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talentshoot");
          _this.sprite.node.width = 64;
          _this.sprite.node.height = 64;
          _this.sprite.node.opacity = 255;
          _this.sprite.node.scale = 1;
          _this.sprite.node.position = cc.v3(0, 128);
        }).repeat(5, cc.tween().to(1, {
          scale: 1.5
        }).to(1, {
          scale: 1
        })).call(function() {
          _this.sprite.spriteFrame = null;
        }).start();
      };
      ProfessionTalent.prototype.jump = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.JUMP_FALL);
        this.player.talentJump(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
          var d = _this.player.data.getFinalAttackPoint();
          d.isMelee = true;
          d.isCriticalStrike = true;
          var scale = 2;
          _this.player.IsVariation && (scale += 1);
          shooterEx.fireAoe(_this.skyhandPrefab, new AreaOfEffectData_1.default().init(0, .15, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, false, d, new FromData_1.default(), [ StatusManager_1.default.DIZZ ]));
          _this.talentSkill.IsExcuting = false;
        });
      };
      ProfessionTalent.prototype.canSteal = function() {
        var actor = ActorUtils_1.default.getNearestEnemyActor(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon);
        if (!actor) return false;
        var monster = actor.getComponent(NonPlayer_1.default);
        var boss = actor.getComponent(Boss_1.default);
        if (monster && monster.data.noLoot < 1) return true;
        if (boss) return true;
        return false;
      };
      ProfessionTalent.prototype.steal = function(shadowPlayer) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.FIREBALL);
        var node = ActorUtils_1.default.getNearestEnemyActor(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon);
        if (!node) return;
        var monster = node.getComponent(NonPlayer_1.default);
        var boss = node.getComponent(Boss_1.default);
        monster && monster.data.noLoot < 1 && monster.getLoot();
        boss && boss.getLoot();
        if (!shadowPlayer) {
          this.sprite.node.width = 128;
          this.sprite.node.height = 128;
          this.sprite.node.opacity = 255;
          this.sprite.node.scale = 1;
          this.sprite.node.position = cc.v3(0, 128);
          cc.tween(this.sprite.node).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand01");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand02");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand03");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand04");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = null;
          }).start();
        }
      };
      ProfessionTalent.prototype.showSmoke = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        var scale = 1;
        this.player.IsVariation && (scale += 1);
        this.shoot(shooterEx, 0, 0, "bullet041", this.smokePrefab, new AreaOfEffectData_1.default().init(7, .1, 0, scale, IndexZ_1.default.OVERHEAD, false, false, false, false, false, new DamageData_1.default(), new FromData_1.default(), [ StatusManager_1.default.WINE_CLOUD ]));
      };
      ProfessionTalent.prototype.showFireBall = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_FIREBALL);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        d.isMelee = true;
        var scale = 4;
        this.player.IsVariation && (scale += 1);
        shooterEx.fireAoe(this.fireball, new AreaOfEffectData_1.default().init(0, .1, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.BURNING ]));
      };
      ProfessionTalent.prototype.showIceThron = function(shooterEx) {
        this.scheduleOnce(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_ICETHRON);
        }, 1);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        d.isMelee = true;
        var offset1 = 100;
        var offset2 = 60;
        var scale = 3;
        if (this.player.IsVariation) {
          scale += 1;
          offset1 = 150;
          offset2 = 90;
        }
        var angles1 = [ 0, 45, 90, 135, 180, 225, 270, 315 ];
        var posRight = [ cc.v3(0, offset1), cc.v3(-offset2, offset2), cc.v3(-offset1, 0), cc.v3(-offset2, -offset2), cc.v3(0, -offset1), cc.v3(offset2, -offset2), cc.v3(offset1, 0), cc.v3(offset2, offset2) ];
        var posLeft = [ cc.v3(0, -offset1), cc.v3(-offset2, -offset2), cc.v3(-offset1, 0), cc.v3(-offset2, offset2), cc.v3(0, offset1), cc.v3(offset2, offset2), cc.v3(offset1, 0), cc.v3(offset2, -offset2) ];
        var a1 = [ angles1 ];
        var a = a1;
        var index = 0;
        for (var i = 0; i < a[index].length; i++) shooterEx.fireAoe(this.icethron, new AreaOfEffectData_1.default().init(0, 2, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.v3(posRight[i]), angles1[i], null, true);
      };
      ProfessionTalent.prototype.changePerformance = function() {};
      ProfessionTalent.prototype.takeDamage = function(damageData, from, actor) {
        return false;
      };
      ProfessionTalent.prototype.addLighteningFall = function(isArea, damagePoint) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_LIGHTENINGFALL, {
          pos: ActorUtils_1.default.getNearestEnemyPosition(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon, true),
          showArea: isArea,
          damage: damagePoint
        });
      };
      ProfessionTalent.prototype.addBroom = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        var scale = 1.5;
        this.player.IsVariation && (scale += 1);
        var aoe = shooterEx.fireAoe(this.broomPrefab, new AreaOfEffectData_1.default().init(0, .5, .2, scale, IndexZ_1.default.OVERHEAD, false, true, true, true, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.v3(0, 32 * this.player.node.scaleY));
        this.schedule(function() {
          aoe && aoe.entity && aoe.isValid && (aoe.entity.Transform.position = _this.player.node.position.clone());
        }, .02, 100);
      };
      ProfessionTalent.prototype.cooking = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        var scale = 1;
        this.player.IsVariation && (scale += 1);
        shooterEx.fireAoe(this.cookingPrefab, new AreaOfEffectData_1.default().init(0, 2, 0, scale, IndexZ_1.default.OVERHEAD, false, false, false, false, false, d, new FromData_1.default(), []), cc.v3(0, 32), 0, function(actor) {
          var monster = actor.node.getComponent(NonPlayer_1.default);
          monster && monster.dungeon.addItem(monster.node.position.clone(), "foodmonster" + monster.data.resName.replace("monster", ""));
          var boss = actor.node.getComponent(Boss_1.default);
          boss && boss.dungeon.addItem(boss.node.position.clone(), "foodboss" + boss.data.resName.replace("iconboss", ""));
        });
      };
      ProfessionTalent.prototype.addSwordLight = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SWORD_SHOW);
        var d = new DamageData_1.default();
        d.isMelee = true;
        var scale = 5;
        d.physicalDamage = 2 + Logic_1.default.playerData.OilGoldData.level;
        if (this.player.weaponRight.meleeWeapon.IsSword) {
          d = this.player.data.getFinalAttackPoint();
          scale = 6;
        }
        this.player.IsVariation && (scale += 1);
        var swordlight = shooterEx.fireAoe(this.swordLightPrefab, new AreaOfEffectData_1.default().init(0, .35, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]));
        var color = cc.color(255, 255, 255).fromHEX(this.player.inventoryMgr.equips[InventoryManager_1.default.WEAPON].lightcolor);
        swordlight.node.getChildByName("sprite").color = color;
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
        }, 1);
      };
      ProfessionTalent.prototype.addDaggerLight = function(shooterEx, shadowPlayer) {
        var _this = this;
        if (!this.player.weaponRight.meleeWeapon.IsDagger) {
          shadowPlayer || this.player.addStatus(StatusManager_1.default.TALENT_INVISIBLE, new FromData_1.default());
          return;
        }
        var duration = 2.4;
        shadowPlayer || this.scheduleOnce(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_INVISIBLE, new FromData_1.default());
        }, duration);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SWORD_SHOW);
        var scale = 2;
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        d.physicalDamage = d.physicalDamage / 2;
        this.player.IsVariation && (scale += 1);
        var swordlight = shooterEx.fireAoe(this.daggerLightPrefab, new AreaOfEffectData_1.default().init(0, duration / 10, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, false, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.Vec3.ZERO);
        var color = cc.color(255, 255, 255).fromHEX(this.player.inventoryMgr.equips[InventoryManager_1.default.WEAPON].lightcolor);
        for (var _i = 0, _a = swordlight.node.getComponentsInChildren(cc.Sprite); _i < _a.length; _i++) {
          var sprite = _a[_i];
          sprite.node.color = shadowPlayer ? cc.Color.BLACK : color;
          sprite.node.opacity = 200;
        }
        this.player.vanish(duration);
        shadowPlayer && shadowPlayer.vanish(duration);
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
        }, 3);
      };
      ProfessionTalent.prototype.initFireGhosts = function() {
        var length = 5;
        var count = this.fireGhostNum;
        for (var i = 0; i < length - count; i++) {
          var ghostNode = null;
          this.ghostPool.size() > 0 && (ghostNode = this.ghostPool.get());
          ghostNode && !ghostNode.active || (ghostNode = cc.instantiate(this.fireGhost));
          this.fireGhostNum++;
          ghostNode.active = true;
          var fg = ghostNode.getComponent(FireGhost_1.default);
          fg.initCollider();
          this.player.node.parent.addChild(fg.node);
          fg.init(this.player, 72 * i);
        }
      };
      ProfessionTalent.prototype.addDashGhost = function(shooterEx) {
        var aoe = shooterEx.fireAoe(this.aoe, new AreaOfEffectData_1.default().init(.4, 2, 0, 1, IndexZ_1.default.ACTOR, false, false, false, false, false, new DamageData_1.default(.2), new FromData_1.default(), []), shooterEx.node.convertToNodeSpaceAR(this.player.node.convertToWorldSpaceAR(cc.v3(0, this.player.entity.Transform.z))), 0, null, true);
        shooterEx.updateCustomAoe(aoe, [ this.player.sprite.spriteFrame ], false, true, 1, cc.color(189, 183, 107), 200, true, true, 48, 32);
      };
      __decorate([ property(cc.Sprite) ], ProfessionTalent.prototype, "sprite", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "aoe", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "fireball", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "icethron", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "fireGhost", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "healingLight", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "rageLight", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "broomPrefab", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "cookingPrefab", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "swordLightPrefab", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "smokePrefab", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "skyhandPrefab", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "daggerLightPrefab", void 0);
      ProfessionTalent = __decorate([ ccclass ], ProfessionTalent);
      return ProfessionTalent;
    }(Talent_1.default);
    exports.default = ProfessionTalent;
    cc._RF.pop();
  }, {
    "../boss/Boss": "Boss",
    "../data/AreaOfEffectData": "AreaOfEffectData",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../data/NonPlayerData": "NonPlayerData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../logic/NonPlayer": "NonPlayer",
    "../logic/Shooter": "Shooter",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/NonPlayerManager": "NonPlayerManager",
    "../manager/StatusManager": "StatusManager",
    "../ui/CoolDownView": "CoolDownView",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/Utils": "Utils",
    "./FireGhost": "FireGhost",
    "./Talent": "Talent"
  } ],
  ProfileData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ba48LTPitPa5dUl/wXJcJ0", "ProfileData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SavePointData_1 = require("./SavePointData");
    var GroundOilGoldData_1 = require("./GroundOilGoldData");
    var ProfileData = function() {
      function ProfileData() {
        this.rectDungeons = {};
        this.chapterIndex = 0;
        this.chapterMaxIndex = 0;
        this.playerDatas = {};
        this.playerEquips = {};
        this.playerEquipsReality = {};
        this.playerMetals = {};
        this.playerItemList = new Array();
        this.playerItemListReality = new Array();
        this.playerInventoryList = new Array();
        this.playerInventoryListReality = new Array();
        this.nonPlayerList = new Array();
        this.aiPlayerIdList = new Array();
        this.level = 0;
        this.totalTime = 0;
        this.realTime = 1526273746e3;
        this.dreamTime = 1526273746e3;
        this.savePointData = new SavePointData_1.default();
        this.groundOilGoldData = new GroundOilGoldData_1.default();
        this.oilGolds = 0;
        this.killPlayerCounts = {};
        this.dialogueCounts = {};
        this.coins = 0;
        this.coinCounts = 0;
        this.lastSaveTime = 0;
        this.dreamCostTime = 0;
        this.cycle = 0;
        this.metalId = "";
        this.lastPlayerId = "";
      }
      return ProfileData;
    }();
    exports.default = ProfileData;
    cc._RF.pop();
  }, {
    "./GroundOilGoldData": "GroundOilGoldData",
    "./SavePointData": "SavePointData"
  } ],
  ProfileGlobalData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5818CVXhlGDbQodUkovQ/f", "ProfileGlobalData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfileGlobalData = function() {
      function ProfileGlobalData() {
        this.gameTime = 0;
        this.realCoin = 0;
      }
      return ProfileGlobalData;
    }();
    exports.default = ProfileGlobalData;
    cc._RF.pop();
  }, {} ],
  ProfileManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5915dTUdVpDi5LG7x2qxIEk", "ProfileManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerData_1 = require("../data/PlayerData");
    var ProfileData_1 = require("../data/ProfileData");
    var RectDungeon_1 = require("../rect/RectDungeon");
    var DataUtils_1 = require("../utils/DataUtils");
    var LocalStorage_1 = require("../utils/LocalStorage");
    var ProfileManager = function() {
      function ProfileManager() {
        this.data = new ProfileData_1.default();
        this.hasSaveData = false;
      }
      ProfileManager.prototype.loadData = function(slotIndex) {
        this.loadProfile(slotIndex);
      };
      ProfileManager.getSaveData = function(slot) {
        var str = "" + slot;
        var s = LocalStorage_1.default.getValue(LocalStorage_1.default.SAVE_DUNGEON + str);
        if (s && s.length > 0) return JSON.parse(s);
        return null;
      };
      ProfileManager.prototype.saveData = function(slotIndex) {
        LocalStorage_1.default.putValue(LocalStorage_1.default.SAVE_DUNGEON + slotIndex, this.data);
        this.hasSaveData = true;
        console.log("save data");
      };
      ProfileManager.clearData = function(slotIndex) {
        LocalStorage_1.default.putValue(LocalStorage_1.default.SAVE_DUNGEON + slotIndex, null);
        console.log("clear data" + LocalStorage_1.default.SAVE_DUNGEON + slotIndex);
      };
      ProfileManager.prototype.loadProfile = function(slotIndex) {
        var data = ProfileManager.getSaveData(slotIndex);
        if (!data) {
          this.hasSaveData = false;
          return false;
        }
        if (!data.savePointData || !data.playerDatas || !data.playerEquips || !data.playerItemList || !data.rectDungeons) {
          this.hasSaveData = false;
          return false;
        }
        this.data = new ProfileData_1.default();
        DataUtils_1.default.baseCopy(this.data, data);
        this.hasSaveData = true;
        this.data.playerDatas = DataUtils_1.default.cloneKeyValue(data.playerDatas, function(value) {
          return new PlayerData_1.default().valueCopy(value);
        });
        this.data.savePointData.valueCopy(data.savePointData);
        this.data.groundOilGoldData.valueCopy(data.groundOilGoldData);
        for (var key in data.playerEquips) this.data.playerEquips[key] = data.playerEquips[key];
        for (var key in data.playerEquipsReality) this.data.playerEquipsReality[key] = data.playerEquipsReality[key];
        if (data.playerItemList) for (var i = 0; i < data.playerItemList.length; i++) this.data.playerItemList[i] = data.playerItemList[i];
        if (data.playerItemListReality) for (var i = 0; i < data.playerItemListReality.length; i++) this.data.playerItemListReality[i] = data.playerItemListReality[i];
        if (data.playerInventoryList) for (var i = 0; i < data.playerInventoryList.length; i++) this.data.playerInventoryList[i] = data.playerInventoryList[i];
        if (data.playerInventoryListReality) for (var i = 0; i < data.playerInventoryListReality.length; i++) this.data.playerInventoryListReality[i] = data.playerInventoryListReality[i];
        if (data.nonPlayerList) for (var i = 0; i < data.nonPlayerList.length; i++) this.data.nonPlayerList[i] = data.nonPlayerList[i];
        for (var key in data.rectDungeons) {
          var rect = new RectDungeon_1.default();
          rect.buildMapFromSave(data.rectDungeons[key]);
          this.data.rectDungeons[key] = rect;
        }
        data.killPlayerCounts && (this.data.killPlayerCounts = data.killPlayerCounts);
        console.log("data", this);
        return true;
      };
      return ProfileManager;
    }();
    exports.default = ProfileManager;
    cc._RF.pop();
  }, {
    "../data/PlayerData": "PlayerData",
    "../data/ProfileData": "ProfileData",
    "../rect/RectDungeon": "RectDungeon",
    "../utils/DataUtils": "DataUtils",
    "../utils/LocalStorage": "LocalStorage"
  } ],
  Quadtree: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fde53Hh/HdFoYBBgbxP4uef", "Quadtree");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Quadtree = function() {
      function Quadtree(bounds, max_objects, max_levels, level) {
        this.max_objects = max_objects || 10;
        this.max_levels = max_levels || 4;
        this.level = level || 0;
        this.bounds = bounds;
        this.objects = [];
        this.nodes = [];
      }
      Quadtree.prototype.split = function() {
        var nextLevel = this.level + 1, subWidth = this.bounds.width / 2, subHeight = this.bounds.height / 2, x = this.bounds.x, y = this.bounds.y;
        this.nodes[0] = new Quadtree({
          x: x + subWidth,
          y: y,
          width: subWidth,
          height: subHeight
        }, this.max_objects, this.max_levels, nextLevel);
        this.nodes[1] = new Quadtree({
          x: x,
          y: y,
          width: subWidth,
          height: subHeight
        }, this.max_objects, this.max_levels, nextLevel);
        this.nodes[2] = new Quadtree({
          x: x,
          y: y + subHeight,
          width: subWidth,
          height: subHeight
        }, this.max_objects, this.max_levels, nextLevel);
        this.nodes[3] = new Quadtree({
          x: x + subWidth,
          y: y + subHeight,
          width: subWidth,
          height: subHeight
        }, this.max_objects, this.max_levels, nextLevel);
      };
      Quadtree.prototype.getIndex = function(pRect) {
        var aabb = pRect.Aabb;
        var indexes = [], verticalMidpoint = this.bounds.x + this.bounds.width / 2, horizontalMidpoint = this.bounds.y + this.bounds.height / 2;
        var startIsNorth = aabb.y < horizontalMidpoint, startIsWest = aabb.x < verticalMidpoint, endIsEast = aabb.x + aabb.width > verticalMidpoint, endIsSouth = aabb.y + aabb.height > horizontalMidpoint;
        startIsNorth && endIsEast && indexes.push(0);
        startIsWest && startIsNorth && indexes.push(1);
        startIsWest && endIsSouth && indexes.push(2);
        endIsEast && endIsSouth && indexes.push(3);
        return indexes;
      };
      Quadtree.prototype.insert = function(pRect) {
        var i = 0, indexes;
        if (this.nodes.length) {
          indexes = this.getIndex(pRect);
          for (i = 0; i < indexes.length; i++) this.nodes[indexes[i]].insert(pRect);
          return;
        }
        this.objects.push(pRect);
        if (this.objects.length > this.max_objects && this.level < this.max_levels) {
          this.nodes.length || this.split();
          for (i = 0; i < this.objects.length; i++) {
            indexes = this.getIndex(this.objects[i]);
            for (var k = 0; k < indexes.length; k++) this.nodes[indexes[k]].insert(this.objects[i]);
          }
          this.objects = [];
        }
      };
      Quadtree.prototype.retrieve = function(pRect) {
        var indexes = this.getIndex(pRect), returnObjects = this.objects;
        if (this.nodes.length) for (var i = 0; i < indexes.length; i++) returnObjects = returnObjects.concat(this.nodes[indexes[i]].retrieve(pRect));
        returnObjects = returnObjects.filter(function(item, index) {
          return returnObjects.indexOf(item) >= index;
        });
        return returnObjects;
      };
      Quadtree.prototype.clear = function() {
        this.objects = [];
        for (var i = 0; i < this.nodes.length; i++) this.nodes.length && this.nodes[i].clear();
        this.nodes = [];
      };
      return Quadtree;
    }();
    exports.default = Quadtree;
    cc._RF.pop();
  }, {} ],
  QuestAlertDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5497fCeiwlIPLn+o7+Z//aU", "QuestAlertDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestAlertDialog = function(_super) {
      __extends(QuestAlertDialog, _super);
      function QuestAlertDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.msg = null;
        _this.ok = null;
        _this.cancel = null;
        return _this;
      }
      QuestAlertDialog.prototype.onLoad = function() {};
      QuestAlertDialog.prototype.showAnim = function() {
        this.node.active = true;
      };
      QuestAlertDialog.prototype.hideAnim = function() {
        this.node.active = false;
      };
      QuestAlertDialog.prototype.show = function(msg, ok, cancel, callback) {
        this.msg.string = msg;
        this.ok.getComponentInChildren(cc.Label).string = ok;
        this.cancel.node.active = cancel.length > 0;
        this.cancel.getComponentInChildren(cc.Label).string = cancel;
        this.callback = callback;
        this.showAnim();
      };
      QuestAlertDialog.prototype.hide = function() {
        this.hideAnim();
      };
      QuestAlertDialog.prototype.clickOk = function() {
        this.callback && this.callback(true);
        this.hide();
      };
      QuestAlertDialog.prototype.clickCancel = function() {
        this.callback && this.callback(false);
        this.hide();
      };
      __decorate([ property(cc.Label) ], QuestAlertDialog.prototype, "msg", void 0);
      __decorate([ property(cc.Button) ], QuestAlertDialog.prototype, "ok", void 0);
      __decorate([ property(cc.Button) ], QuestAlertDialog.prototype, "cancel", void 0);
      QuestAlertDialog = __decorate([ ccclass ], QuestAlertDialog);
      return QuestAlertDialog;
    }(cc.Component);
    exports.default = QuestAlertDialog;
    cc._RF.pop();
  }, {} ],
  QuestBoardDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5716Zfgo5Mv6xK5UIV/jbw", "QuestBoardDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../../logic/Logic");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var BaseDialog_1 = require("./BaseDialog");
    var QuestItem_1 = require("../QuestItem");
    var QuestData_1 = require("../../editor/data/QuestData");
    var QuestTargetData_1 = require("../../editor/data/QuestTargetData");
    var QuestTargetItem_1 = require("../QuestTargetItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestBoardDialog = function(_super) {
      __extends(QuestBoardDialog, _super);
      function QuestBoardDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.questItemPrefab = null;
        _this.questTargetPrefab = null;
        _this.contentLeft = null;
        _this.contentRight = null;
        _this.scollRight = null;
        _this.title = null;
        _this.desc = null;
        _this.titleBg = null;
        _this.questList = [];
        _this.targetList = [];
        return _this;
      }
      QuestBoardDialog.prototype.onLoad = function() {};
      QuestBoardDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      QuestBoardDialog.prototype.show = function() {
        _super.prototype.show.call(this);
        this.clearUi();
        for (var i = 0; i < 6; i++) {
          var data = new QuestData_1.default();
          data.name = "\u6d4b\u8bd5\u4e00\u4e0b" + i;
          data.content = "\u4e00\u4e2a\u666e\u901a\u7684\u4efb\u52a1" + i;
          data.icon = "questicon" + i;
          var t1 = QuestTargetData_1.default.build("weapon00" + i, QuestTargetData_1.default.TARGET_EQUIP, QuestTargetData_1.default.EQUIP_PICK, 1);
          var t2 = QuestTargetData_1.default.build("monster00" + i, QuestTargetData_1.default.TARGET_MONSTER, QuestTargetData_1.default.MONSTER_KILL, 1);
          t2.status = QuestData_1.default.STATUS_SUCCESS;
          var t3 = QuestTargetData_1.default.build("furniture00" + (i + 1), QuestTargetData_1.default.TARGET_FURNITURE, QuestTargetData_1.default.BUILDING_TRIGGER, 1);
          t3.status = QuestData_1.default.STATUS_FAILED;
          data.successCondition.list.push(t1);
          data.successCondition.list.push(t2);
          data.successCondition.list.push(t3);
          this.buildQuestItem(data);
        }
        this.selectNone();
      };
      QuestBoardDialog.prototype.clearUi = function() {
        this.currentItem = null;
        this.contentLeft.removeAllChildren();
        this.questList = [];
        this.targetList = [];
        this.scollRight.active = false;
      };
      QuestBoardDialog.prototype.buildQuestItem = function(data) {
        var item = cc.instantiate(this.questItemPrefab).getComponent(QuestItem_1.default);
        item.init(this, data, this.questList.length);
        this.questList.push(item);
        this.contentLeft.addChild(item.node);
      };
      QuestBoardDialog.prototype.buildTargetItem = function(data) {
        var item = cc.instantiate(this.questTargetPrefab).getComponent(QuestTargetItem_1.default);
        item.init(data, this.targetList.length);
        this.targetList.push(item);
        this.contentRight.addChild(item.node);
      };
      QuestBoardDialog.prototype.selectItem = function(index) {
        var len = this.questList.length;
        for (var i = 0; i < len; i++) this.questList[i].select(index == i);
        this.currentItem = this.questList[index];
        this.updateInfo();
      };
      QuestBoardDialog.prototype.selectNone = function() {
        var len = this.questList.length;
        for (var i = 0; i < len; i++) this.questList[i].select(false);
        this.currentItem = null;
        this.updateInfo();
      };
      QuestBoardDialog.prototype.updateInfo = function() {
        if (!this.currentItem) {
          this.title.string = "";
          this.desc.string = "";
          this.titleBg.spriteFrame = null;
          this.contentRight.removeAllChildren();
          this.scollRight.active = false;
          return;
        }
        this.scollRight.active = true;
        var data = this.currentItem.data;
        this.title.string = data.name;
        this.desc.string = data.content;
        this.titleBg.spriteFrame = Logic_1.default.spriteFrameRes(data.iconLarge);
        this.contentRight.removeAllChildren();
        for (var _i = 0, _a = data.successCondition.list; _i < _a.length; _i++) {
          var t = _a[_i];
          this.buildTargetItem(t);
        }
      };
      QuestBoardDialog.SIZE = 21;
      QuestBoardDialog.SIZE_FRIDGE = 12;
      QuestBoardDialog.TYPE_NORMAL = "S3";
      QuestBoardDialog.TYPE_WOOD = "S4";
      QuestBoardDialog.TYPE_FRIDGE = "S5";
      __decorate([ property(cc.Prefab) ], QuestBoardDialog.prototype, "questItemPrefab", void 0);
      __decorate([ property(cc.Prefab) ], QuestBoardDialog.prototype, "questTargetPrefab", void 0);
      __decorate([ property(cc.Node) ], QuestBoardDialog.prototype, "contentLeft", void 0);
      __decorate([ property(cc.Node) ], QuestBoardDialog.prototype, "contentRight", void 0);
      __decorate([ property(cc.Node) ], QuestBoardDialog.prototype, "scollRight", void 0);
      __decorate([ property(cc.Label) ], QuestBoardDialog.prototype, "title", void 0);
      __decorate([ property(cc.Label) ], QuestBoardDialog.prototype, "desc", void 0);
      __decorate([ property(cc.Sprite) ], QuestBoardDialog.prototype, "titleBg", void 0);
      QuestBoardDialog = __decorate([ ccclass ], QuestBoardDialog);
      return QuestBoardDialog;
    }(BaseDialog_1.default);
    exports.default = QuestBoardDialog;
    cc._RF.pop();
  }, {
    "../../editor/data/QuestData": "QuestData",
    "../../editor/data/QuestTargetData": "QuestTargetData",
    "../../logic/Logic": "Logic",
    "../../utils/AudioPlayer": "AudioPlayer",
    "../QuestItem": "QuestItem",
    "../QuestTargetItem": "QuestTargetItem",
    "./BaseDialog": "BaseDialog"
  } ],
  QuestCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "62d27oyh/dJ5axdCcH/GSG1", "QuestCard");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QuestData_1 = require("../data/QuestData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestCard = function(_super) {
      __extends(QuestCard, _super);
      function QuestCard() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.layout = null;
        _this.title = null;
        _this.content = null;
        _this.graphics = null;
        _this.select = null;
        _this.data = new QuestData_1.default();
        _this.startPos = cc.v3(0, 0);
        _this.touchPos = cc.v2(0, 0);
        _this.cardList = [];
        _this.isSelected = false;
        _this.timeDelay = 0;
        return _this;
      }
      QuestCard_1 = QuestCard;
      QuestCard.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.touchPos = event.getLocation();
          _this.startPos = _this.node.position.clone();
        });
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var offset = event.getLocation().sub(_this.touchPos);
          _this.node.setPosition(_this.startPos.x + offset.x / _this.node.parent.scale, _this.startPos.y + offset.y / _this.node.parent.scale);
        });
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.startPos.sub(_this.node.position).mag() < 5 ? _this.editManager.selectCard(_this) : _this.editManager.updateTreeNodePos(_this.data.indexId, _this.data.parentId, _this.node.position.clone());
        });
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {});
        this.select.active = this.isSelected;
      };
      QuestCard.prototype.addSuccessChildCard = function() {
        var _this = this;
        this.editManager.selectNone(function() {
          _this.addChildCard(true);
        });
      };
      QuestCard.prototype.addFailChildCard = function() {
        var _this = this;
        this.editManager.selectNone(function() {
          _this.addChildCard(false);
        });
      };
      QuestCard.prototype.addChildCard = function(isSuccessType) {
        var newdata = new QuestData_1.default();
        this.editManager.addTreeNode(this.data.indexId, this.data.parentId, isSuccessType, newdata);
      };
      QuestCard.prototype.removeSelfCard = function() {
        var _this = this;
        this.editManager.selectNone(function() {
          _this.data.successList.length > 0 && _this.editManager.showLog("has successList!");
          _this.data.failList.length > 0 && _this.editManager.showLog("has failList!");
          _this.editManager.removeTreeNode(_this.data.indexId, _this.data.parentId);
        });
      };
      QuestCard.prototype.updateData = function(data) {
        this.data.valueCopy(data);
        this.title.string = this.data.name;
        this.content.string = this.data.content;
      };
      QuestCard.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .1) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      QuestCard.prototype.updateLine = function() {
        this.graphics.clear();
        this.graphics.moveTo(QuestCard_1.SIZE / 2, 0);
        this.graphics.lineWidth = 5;
        for (var _i = 0, _a = this.cardList; _i < _a.length; _i++) {
          var c = _a[_i];
          this.graphics.strokeColor = c.data.isSuccessType ? cc.Color.GREEN : cc.Color.RED;
          var pos = c.node.convertToWorldSpaceAR(cc.v3(0, 0));
          pos = this.node.convertToNodeSpaceAR(pos);
          this.graphics.moveTo(QuestCard_1.SIZE / 2, 0);
          this.graphics.lineTo(pos.x, pos.y);
          this.graphics.stroke();
        }
      };
      QuestCard.prototype.update = function(dt) {
        if (this.isTimeDelay(dt)) {
          this.updateLine();
          this.select.active = this.isSelected;
        }
      };
      var QuestCard_1;
      QuestCard.SIZE = 256;
      __decorate([ property(cc.Node) ], QuestCard.prototype, "layout", void 0);
      __decorate([ property(cc.Label) ], QuestCard.prototype, "title", void 0);
      __decorate([ property(cc.Label) ], QuestCard.prototype, "content", void 0);
      __decorate([ property(cc.Graphics) ], QuestCard.prototype, "graphics", void 0);
      __decorate([ property(cc.Node) ], QuestCard.prototype, "select", void 0);
      QuestCard = QuestCard_1 = __decorate([ ccclass ], QuestCard);
      return QuestCard;
    }(cc.Component);
    exports.default = QuestCard;
    cc._RF.pop();
  }, {
    "../data/QuestData": "QuestData"
  } ],
  QuestConditionData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e8b36GhF3xKNq3TT1OmrnEA", "QuestConditionData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../../utils/DataUtils");
    var QuestTargetData_1 = require("./QuestTargetData");
    var QuestConditionData = function() {
      function QuestConditionData() {
        this.list = [];
        this.mapThingsList = "";
        this.startTime = 0;
        this.endTime = 0;
        this.isExpand = false;
        this.coins = 0;
        this.realCoins = 0;
        this.oilGolds = 0;
        this.statusList = "";
      }
      QuestConditionData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        if (data.list) {
          this.list = [];
          for (var _i = 0, _a = data.list; _i < _a.length; _i++) {
            var c = _a[_i];
            this.list.push(new QuestTargetData_1.default().valueCopy(c));
          }
        }
      };
      QuestConditionData.prototype.copyList = function(list) {
        if (list) {
          this.list = [];
          for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var c = list_1[_i];
            this.list.push(new QuestTargetData_1.default().valueCopy(c));
          }
        }
      };
      QuestConditionData.prototype.clone = function() {
        var e = new QuestConditionData();
        e.valueCopy(this);
        return e;
      };
      QuestConditionData.ITEM_PICK = "item_pick";
      QuestConditionData.ITEM_USE = "item_use";
      QuestConditionData.ITEM_DROP = "item_drop";
      QuestConditionData.EQUIP_PICK = "equip_pick";
      QuestConditionData.EQUIP_ON = "equip_wear";
      QuestConditionData.EQUIP_OFF = "equip_wear";
      QuestConditionData.EQUIP_DROP = "equip_drop";
      QuestConditionData.NPC_KILL = "npc_kill";
      QuestConditionData.NPC_ALIVE = "npc_alive";
      QuestConditionData.MONSTER_KILL = "monster_kill";
      QuestConditionData.MONSTER_ALIVE = "monster_alive";
      QuestConditionData.BOSS_KILL = "boss_kill";
      QuestConditionData.BOSS_ALIVE = "boss_alive";
      QuestConditionData.BUILDING_TRIGGER = "building_trigger";
      QuestConditionData.ROOM_ENTER = "room_enter";
      QuestConditionData.ROOM_CLEAR = "room_clear";
      QuestConditionData.ROOM_LEAVE = "room_leave";
      return QuestConditionData;
    }();
    exports.default = QuestConditionData;
    cc._RF.pop();
  }, {
    "../../utils/DataUtils": "DataUtils",
    "./QuestTargetData": "QuestTargetData"
  } ],
  QuestConditionItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9206763ZDlLVqmbeqRXMivr", "QuestConditionItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QuestConditionData_1 = require("../data/QuestConditionData");
    var QuestFileEditor_1 = require("./QuestFileEditor");
    var QuestSpriteItem_1 = require("./QuestSpriteItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestConditionItem = function(_super) {
      __extends(QuestConditionItem, _super);
      function QuestConditionItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.button = null;
        _this.layout = null;
        _this.editbutton = null;
        _this.textLabel = null;
        _this.spriteLayout = null;
        _this.spriteItem = null;
        _this.inputItem = null;
        _this.inputDateItem = null;
        _this.spriteList = [];
        _this.isTextMode = false;
        _this.isExpand = true;
        _this.data = new QuestConditionData_1.default();
        return _this;
      }
      QuestConditionItem.prototype.buttonClick = function() {
        this.isExpand = !this.isExpand;
        this.collapseExpand();
      };
      QuestConditionItem.prototype.init = function(name) {
        this.label.string = name;
        this.spriteLayout.removeAllChildren();
        this.spriteList = [];
      };
      QuestConditionItem.prototype.updateInputData = function() {
        this.inputStartTime.node.active && (this.data.startTime = this.inputStartTime.Value);
        this.inputEndTime.node.active && (this.data.endTime = this.inputEndTime.Value);
        this.data.mapThingsList = this.inputMapThings.Value;
      };
      QuestConditionItem.prototype.updateData = function(data, showRoom, showStart, showEnd) {
        this.data.valueCopy(data);
        this.spriteLayout || (this.spriteLayout = this.node.getChildByName("spriteLayout"));
        this.spriteLayout.removeAllChildren();
        this.spriteList = [];
        for (var _i = 0, _a = data.list; _i < _a.length; _i++) {
          var t = _a[_i];
          this.getSprite(t);
        }
        var d1 = this.data.startTime ? new Date(this.data.startTime) : new Date();
        var d2 = this.data.startTime ? new Date(this.data.endTime) : new Date();
        this.inputStartTime.Value = this.data.startTime;
        this.inputEndTime.Value = this.data.endTime;
        this.inputStartTime.node.active = showStart;
        this.inputEndTime.node.active = showEnd;
        this.inputMapThings.Value = this.data.mapThingsList;
      };
      QuestConditionItem.prototype.onLoad = function() {
        this.collapseExpand();
        this.inputMapThings = QuestFileEditor_1.default.addInputItem(this.layout, this.inputItem, "\u751f\u6210\uff1a", "resId,chapter,index,x,y,z,count\u5206\u53f7\u9694\u5f00", 200, 100);
        this.inputStartTime = QuestFileEditor_1.default.addDateInputItem(this.layout, this.inputDateItem, "\u5f00\u59cb\uff1a");
        this.inputEndTime = QuestFileEditor_1.default.addDateInputItem(this.layout, this.inputDateItem, "\u7ed3\u675f\uff1a");
      };
      QuestConditionItem.prototype.collapseExpand = function() {
        this.layout.active = this.isExpand;
        this.button.node.angle = this.isExpand ? 0 : -180;
      };
      QuestConditionItem.prototype.start = function() {};
      QuestConditionItem.prototype.getSprite = function(t) {
        var _this = this;
        var icon = cc.instantiate(this.spriteItem).getComponent(QuestSpriteItem_1.default);
        icon.init(0, this.spriteList.length, t, true);
        this.spriteLayout.addChild(icon.node);
        icon.clickCallback = function(value) {
          if (_this.currentSprite == value) _this.pick(_this.currentSprite.targetData); else {
            _this.currentSprite && _this.currentSprite.select && (_this.currentSprite.select.active = false);
            _this.currentSprite = value;
            _this.currentSprite.select.active = true;
          }
        };
        this.spriteList.push(icon);
        return icon;
      };
      QuestConditionItem.prototype.addSprite = function() {
        var _this = this;
        this.editor.editManager.showSpritePickDialog(null, function(flag, targetData) {
          if (flag) {
            _this.currentSprite && _this.currentSprite.select && (_this.currentSprite.select.active = false);
            _this.currentSprite = _this.getSprite(targetData);
            _this.currentSprite.select.active = true;
            _this.isExpand = true;
            _this.collapseExpand();
            _this.data.copyList(_this.getFinalList());
          }
        });
      };
      QuestConditionItem.prototype.removeSprite = function() {
        if (this.currentSprite) {
          this.currentSprite.node.destroy();
          var index = this.currentSprite.index;
          this.spriteList.splice(index, 1);
          this.isExpand = true;
          this.collapseExpand();
          this.data.copyList(this.getFinalList());
        }
      };
      QuestConditionItem.prototype.switchInfoMode = function() {
        this.isTextMode = !this.isTextMode;
        this.textLabel.node.active = this.isTextMode;
        this.layout.active = !this.isTextMode;
        this.textLabel.string = JSON.stringify(this.data);
        this.isExpand = true;
        this.collapseExpand();
      };
      QuestConditionItem.prototype.getFinalList = function() {
        var str = "";
        var list = [];
        for (var i = 0; i < this.spriteList.length; i++) {
          var t = this.spriteList[i];
          list.push(t.targetData);
        }
        return list;
      };
      QuestConditionItem.prototype.pick = function(targetData) {
        var _this = this;
        this.editor.editManager.showSpritePickDialog(targetData, function(flag, data) {
          if (flag) {
            _this.currentSprite.targetData.valueCopy(data);
            _this.currentSprite.updateSpriteFrame();
            _this.data.copyList(_this.getFinalList());
          }
        });
      };
      __decorate([ property(cc.Label) ], QuestConditionItem.prototype, "label", void 0);
      __decorate([ property(cc.Button) ], QuestConditionItem.prototype, "button", void 0);
      __decorate([ property(cc.Node) ], QuestConditionItem.prototype, "layout", void 0);
      __decorate([ property(cc.Button) ], QuestConditionItem.prototype, "editbutton", void 0);
      __decorate([ property(cc.Label) ], QuestConditionItem.prototype, "textLabel", void 0);
      __decorate([ property(cc.Node) ], QuestConditionItem.prototype, "spriteLayout", void 0);
      __decorate([ property(cc.Prefab) ], QuestConditionItem.prototype, "spriteItem", void 0);
      __decorate([ property(cc.Prefab) ], QuestConditionItem.prototype, "inputItem", void 0);
      __decorate([ property(cc.Prefab) ], QuestConditionItem.prototype, "inputDateItem", void 0);
      QuestConditionItem = __decorate([ ccclass ], QuestConditionItem);
      return QuestConditionItem;
    }(cc.Component);
    exports.default = QuestConditionItem;
    cc._RF.pop();
  }, {
    "../data/QuestConditionData": "QuestConditionData",
    "./QuestFileEditor": "QuestFileEditor",
    "./QuestSpriteItem": "QuestSpriteItem"
  } ],
  QuestData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ef83qpJt9CLor/n4TdMOlm", "QuestData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../../utils/DataUtils");
    var QuestConditionData_1 = require("./QuestConditionData");
    var QuestData = function() {
      function QuestData() {
        this.triggerCondition = new QuestConditionData_1.default();
        this.successCondition = new QuestConditionData_1.default();
        this.failCondition = new QuestConditionData_1.default();
        this.status = QuestData.STATUS_INIT;
        this.id = "";
        this.name = "";
        this.content = "";
        this.icon = "";
        this.iconLarge = "";
        this.mapThingsList = "";
        this.startTime = 0;
        this.mapThingsCreated = false;
        this.reward = new QuestConditionData_1.default();
        this.indexId = "r0";
        this.parentId = "e0";
        this.successList = [];
        this.failList = [];
        this.editPos = cc.v3(0, 0);
        this.isTracked = false;
      }
      Object.defineProperty(QuestData.prototype, "isSuccessType", {
        get: function() {
          return -1 != this.indexId.indexOf("s");
        },
        enumerable: false,
        configurable: true
      });
      QuestData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        this.triggerCondition.valueCopy(data.triggerCondition);
        this.successCondition.valueCopy(data.successCondition);
        this.failCondition.valueCopy(data.failCondition);
        this.reward.valueCopy(data.reward);
        if (data.successList) {
          this.successList = [];
          for (var _i = 0, _a = data.successList; _i < _a.length; _i++) {
            var c = _a[_i];
            this.successList.push(new QuestData().valueCopy(c));
          }
        }
        if (data.failList) {
          this.failList = [];
          for (var _b = 0, _c = data.failList; _b < _c.length; _b++) {
            var c = _c[_b];
            this.failList.push(new QuestData().valueCopy(c));
          }
        }
        this.editPos = data.editPos ? cc.v3(data.editPos.x, data.editPos.y) : cc.v3(0, 0);
        return this;
      };
      QuestData.prototype.clone = function() {
        var e = new QuestData();
        e.valueCopy(this);
        return e;
      };
      QuestData.STATUS_INIT = 0;
      QuestData.STATUS_RUNNING = 1;
      QuestData.STATUS_SUCCESS = 2;
      QuestData.STATUS_FAILED = 3;
      QuestData.STATUS_DISCARD = 4;
      QuestData.TYPE_ROOT = 0;
      QuestData.TYPE_SUCCESS = 1;
      QuestData.TYPE_FAIL = 2;
      return QuestData;
    }();
    exports.default = QuestData;
    cc._RF.pop();
  }, {
    "../../utils/DataUtils": "DataUtils",
    "./QuestConditionData": "QuestConditionData"
  } ],
  QuestDateInputItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18992VGeLNGQ69ER8nVaCeu", "QuestDateInputItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestDateInputItem = function(_super) {
      __extends(QuestDateInputItem, _super);
      function QuestDateInputItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.editYear = null;
        _this.editMonth = null;
        _this.editDay = null;
        _this.editHour = null;
        _this.editMinute = null;
        _this.editSecond = null;
        return _this;
      }
      QuestDateInputItem.prototype.onLoad = function() {};
      Object.defineProperty(QuestDateInputItem.prototype, "Value", {
        get: function() {
          var year = this.getYear();
          var month = this.getMonth();
          var day = this.getDay();
          var hour = this.getNumFromEdit(this.editHour, 0, 23);
          var minute = this.getNumFromEdit(this.editMinute, 0, 59);
          var second = this.getNumFromEdit(this.editSecond, 0, 59);
          var date = new Date(year + "-" + month + "-" + day + " " + hour + ":" + minute + ":" + second);
          return date.getTime();
        },
        set: function(value) {
          var date = new Date(value);
          this.editYear.string = "" + date.getFullYear();
          this.editMonth.string = "" + (date.getMonth() + 1);
          this.editDay.string = "" + date.getDate();
          this.editHour.string = "" + date.getHours();
          this.editMinute.string = "" + date.getMinutes();
          this.editSecond.string = "" + date.getSeconds();
        },
        enumerable: false,
        configurable: true
      });
      QuestDateInputItem.prototype.getNumFromEdit = function(editBox, min, max) {
        var num = parseInt(editBox.string);
        num = isNaN(num) ? 0 : num;
        num > max && (num = max);
        num < min && (num = min);
        return num;
      };
      QuestDateInputItem.prototype.getYear = function() {
        return this.getNumFromEdit(this.editYear, 1970, 9999);
      };
      QuestDateInputItem.prototype.getMonth = function() {
        return this.getNumFromEdit(this.editMonth, 1, 12);
      };
      QuestDateInputItem.prototype.getDay = function() {
        var d = new Date(this.getYear(), this.getMonth(), 0);
        return this.getNumFromEdit(this.editDay, 1, d.getDate());
      };
      QuestDateInputItem.prototype.start = function() {};
      QuestDateInputItem.prototype.onTextChanged = function(text, editbox, customEventData) {
        if (editbox == this.editYear) {
          editbox.string = "" + this.getYear();
          this.editDay.string = "" + this.getDay();
        } else if (editbox == this.editMonth) {
          editbox.string = "" + this.getMonth();
          this.editDay.string = "" + this.getDay();
        } else editbox == this.editDay ? editbox.string = "" + this.getDay() : editbox == this.editHour ? editbox.string = "" + this.getNumFromEdit(this.editHour, 0, 23) : editbox == this.editMinute ? editbox.string = "" + this.getNumFromEdit(this.editMinute, 0, 59) : editbox == this.editSecond && (editbox.string = "" + this.getNumFromEdit(this.editSecond, 0, 59));
      };
      __decorate([ property(cc.Label) ], QuestDateInputItem.prototype, "label", void 0);
      __decorate([ property(cc.EditBox) ], QuestDateInputItem.prototype, "editYear", void 0);
      __decorate([ property(cc.EditBox) ], QuestDateInputItem.prototype, "editMonth", void 0);
      __decorate([ property(cc.EditBox) ], QuestDateInputItem.prototype, "editDay", void 0);
      __decorate([ property(cc.EditBox) ], QuestDateInputItem.prototype, "editHour", void 0);
      __decorate([ property(cc.EditBox) ], QuestDateInputItem.prototype, "editMinute", void 0);
      __decorate([ property(cc.EditBox) ], QuestDateInputItem.prototype, "editSecond", void 0);
      QuestDateInputItem = __decorate([ ccclass ], QuestDateInputItem);
      return QuestDateInputItem;
    }(cc.Component);
    exports.default = QuestDateInputItem;
    cc._RF.pop();
  }, {} ],
  QuestFileEditManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f94ebtnVVRAuJM/+7s9a6V3", "QuestFileEditManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../../logic/EventHelper");
    var LoadingManager_1 = require("../../manager/LoadingManager");
    var QuestTreeData_1 = require("../data/QuestTreeData");
    var FileOperator_1 = require("../utils/FileOperator");
    var RevokeHelper_1 = require("../utils/RevokeHelper");
    var QuestAlertDialog_1 = require("./QuestAlertDialog");
    var QuestCard_1 = require("./QuestCard");
    var QuestFileEditor_1 = require("./QuestFileEditor");
    var QuestSpriteInfoDialog_1 = require("./QuestSpriteInfoDialog");
    var QuestSpritePickDialog_1 = require("./QuestSpritePickDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestFileEditManager = function(_super) {
      __extends(QuestFileEditManager, _super);
      function QuestFileEditManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.editBox = null;
        _this.layout = null;
        _this.zoomUp = null;
        _this.zoomDown = null;
        _this.questCard = null;
        _this.revokeButton = null;
        _this.revokeCancelButton = null;
        _this.editor = null;
        _this.alertDialog = null;
        _this.spritePickDialog = null;
        _this.questSpriteInfoDialog = null;
        _this.bossSpriteFrames = null;
        _this.isBossLoaded = false;
        _this.loadingManager = new LoadingManager_1.default();
        _this.startPos = cc.v3(0, 0);
        _this.touchPos = cc.v2(0, 0);
        _this.cardList = [];
        _this.zoomOffset = 0;
        _this.isCtrlPressing = false;
        _this.isShiftPressing = false;
        _this.fileOperator = new FileOperator_1.default();
        _this.revokeHelper = new RevokeHelper_1.default(new QuestTreeData_1.default());
        return _this;
      }
      QuestFileEditManager.prototype.onLoad = function() {
        var _this = this;
        this.loadingManager.init();
        this.layout.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.touchPos = event.getLocation();
          _this.startPos = _this.layout.position.clone();
        });
        this.layout.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var offset = event.getLocation().sub(_this.touchPos).mul(.5);
          _this.layout.setPosition(_this.startPos.x + offset.x, _this.startPos.y + offset.y);
        });
        this.layout.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.startPos.sub(_this.layout.position).mag() < 5 && _this.selectNone();
        });
        this.layout.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {});
        this.zoomUp.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.zoomOffset = .025;
        });
        this.zoomUp.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.zoomOffset = 0;
        });
        this.zoomUp.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.zoomOffset = 0;
        });
        this.zoomDown.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.zoomOffset = -.025;
        });
        this.zoomDown.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.zoomOffset = 0;
        });
        this.zoomDown.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.zoomOffset = 0;
        });
        this.layout.on(cc.Node.EventType.MOUSE_WHEEL, function(event) {
          _this.zoom(event.getScrollY() > 0 ? .05 : -.05);
        });
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.EDITOR_SHOW_SPRITE_INFO, function(detail) {
          detail.isShow ? _this.questSpriteInfoDialog.show(detail.text, detail.wpos) : _this.questSpriteInfoDialog.hide();
        });
        this.editor.editManager = this;
        this.editor.node.scaleX = 0;
        this.alertDialog.node.active = false;
        this.spritePickDialog.node.active = false;
        this.questSpriteInfoDialog.node.opacity = 0;
      };
      QuestFileEditManager.prototype.start = function() {
        this.loadingManager.loadEquipment();
        this.loadingManager.loadAutoSpriteFrames();
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_TEXTURES, "singleColor");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_ITEM, "ammo");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_EQUIPMENT, "emptyequipment");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_BOSS, "iconboss000");
        this.loadingManager.loadBosses();
        this.loadingManager.loadMonsters();
        this.loadingManager.loadItems();
        this.loadingManager.loadNonplayer();
        this.loadingManager.loadSuits();
        this.loadingManager.loadFurnitures();
      };
      QuestFileEditManager.prototype.onKeyDown = function(event) {
        switch (event.keyCode) {
         case cc.macro.KEY.ctrl:
          this.isCtrlPressing = true;
          break;

         case cc.macro.KEY.shift:
          this.isShiftPressing = true;
          break;

         case cc.macro.KEY.z:
        }
      };
      QuestFileEditManager.prototype.onKeyUp = function(event) {
        switch (event.keyCode) {
         case cc.macro.KEY.ctrl:
          this.isCtrlPressing = false;
          break;

         case cc.macro.KEY.shift:
          this.isShiftPressing = false;
          break;

         case cc.macro.KEY.z:
          this.isCtrlPressing && (this.isShiftPressing ? this.revokeCancel() : this.revoke());
          break;

         case cc.macro.KEY.s:
          this.isCtrlPressing && this.buttonSave();
          break;

         case cc.macro.KEY.escape:
          this.selectNone();
        }
      };
      QuestFileEditManager.prototype.update = function(dt) {
        if (this.loadingManager.isBossLoaded && this.loadingManager.isEquipmentLoaded && this.loadingManager.isAllSpriteFramesLoaded() && this.loadingManager.isMonsterLoaded && this.loadingManager.isNonplayerLoaded && this.loadingManager.isPlayerLoaded && this.loadingManager.isItemsLoaded && this.loadingManager.isFurnituresLoaded && this.loadingManager.isSuitsLoaded) {
          this.isBossLoaded = true;
          this.loadingManager.reset();
        }
        0 != this.zoomOffset && this.zoom(this.zoomOffset);
        this.revokeButton.active = this.revokeHelper.RevokeLength > 0;
        this.revokeCancelButton.active = this.revokeHelper.RevokeCancelLength > 0;
        this.editBox.enabled = !this.fileOperator.getFileHandle();
        if (this.fileOperator.getFileHandle()) {
          var name = this.fileOperator.getFileHandle().name;
          -1 != name.indexOf(".") && (this.editBox.string = name.split(".")[0]);
        }
      };
      QuestFileEditManager.prototype.zoom = function(offset) {
        this.layout.scale += offset;
        this.layout.scale < 0 && (this.layout.scale = .1);
      };
      QuestFileEditManager.prototype.addQuestNode = function(parentCard, data) {
        var cardNode = cc.instantiate(this.questCard);
        var card = cardNode.getComponent(QuestCard_1.default);
        card.editManager = this;
        card.updateData(data);
        cardNode.parent = this.layout;
        this.cardList.push(card);
        var pos = cc.v3(-300, -200);
        if (this.currentSelectData) {
          var mixId1 = this.currentSelectData.parentId + "," + this.currentSelectData.indexId;
          var mixId2 = data.parentId + "," + data.indexId;
          if (mixId1 == mixId2) {
            card.isSelected = true;
            card.select.active = true;
          }
        }
        if (parentCard) {
          parentCard.cardList.push(card);
          var y = 0;
          y = data.isSuccessType ? .75 * QuestCard_1.default.SIZE : .75 * -QuestCard_1.default.SIZE;
          y += this.getRandomNum(-50, 50);
          pos = parentCard.node.position.add(cc.v3(1.5 * QuestCard_1.default.SIZE, y));
        }
        cc.Vec3.ZERO.equals(data.editPos) || (pos = data.editPos.clone());
        card.node.setPosition(pos.clone());
        this.revokeHelper.Data.updateTreeNodePos(data.indexId, data.parentId, pos);
        for (var i = 0; i < data.successList.length; i++) {
          var c = data.successList[i];
          QuestTreeData_1.default.updateIndexId(c, data, true, i);
          this.addQuestNode(card, c);
        }
        for (var i = 0; i < data.failList.length; i++) {
          var c = data.failList[i];
          QuestTreeData_1.default.updateIndexId(c, data, false, i);
          this.addQuestNode(card, c);
        }
      };
      QuestFileEditManager.prototype.getRandomNum = function(min, max) {
        return min + Math.round(Math.random() * (max - min));
      };
      QuestFileEditManager.prototype.selectNone = function(callback) {
        var _this = this;
        if (this.editor.canHide()) {
          for (var _i = 0, _a = this.cardList; _i < _a.length; _i++) {
            var c = _a[_i];
            c.isSelected = false;
          }
          this.currentSelectData = null;
          this.editor.hide();
          callback && callback();
        } else this.alertDialog.show("\u6570\u636e\u53d1\u751f\u53d8\u5316\uff0c\u662f\u5426\u653e\u5f03\u66f4\u6539", "\u662f", "\u5426", function(flag) {
          if (flag) {
            _this.editor.hide();
            for (var _i = 0, _a = _this.cardList; _i < _a.length; _i++) {
              var c = _a[_i];
              c.isSelected = false;
            }
            _this.currentSelectData = null;
            callback && callback();
          }
        });
      };
      QuestFileEditManager.prototype.selectCard = function(card) {
        var _this = this;
        if (card.isSelected) return;
        this.selectNone(function() {
          for (var _i = 0, _a = _this.cardList; _i < _a.length; _i++) {
            var c = _a[_i];
            c.isSelected = false;
          }
          _this.currentSelectData = card.data;
          card.isSelected = true;
          _this.editor.show(_this.getTreeNode(card.data.indexId, card.data.parentId));
        });
      };
      QuestFileEditManager.prototype.updateRevokTreeList = function(newTree) {
        var _this = this;
        this.revokeHelper.addNode(newTree).then(function() {
          _this.updateTree();
        });
      };
      QuestFileEditManager.prototype.updateTreeNodePos = function(indexId, parentId, pos) {
        var newTree = new QuestTreeData_1.default();
        newTree.valueCopy(this.revokeHelper.Data);
        newTree.updateTreeNodePos(indexId, parentId, pos);
        this.updateRevokTreeList(newTree);
      };
      QuestFileEditManager.prototype.updateTreeNodeData = function(indexId, parentId, data) {
        var newTree = new QuestTreeData_1.default();
        newTree.valueCopy(this.revokeHelper.Data);
        newTree.updateTreeNodeData(indexId, parentId, data);
        this.updateRevokTreeList(newTree);
      };
      QuestFileEditManager.prototype.addTreeNode = function(indexId, parentId, isSuccessType, newdata) {
        var newTree = new QuestTreeData_1.default();
        newTree.valueCopy(this.revokeHelper.Data);
        newTree.addTreeNode(indexId, parentId, isSuccessType, newdata);
        this.updateRevokTreeList(newTree);
      };
      QuestFileEditManager.prototype.removeTreeNode = function(indexId, parentId) {
        var newTree = new QuestTreeData_1.default();
        newTree.valueCopy(this.revokeHelper.Data);
        newTree.removeTreeNode(indexId, parentId);
        this.updateRevokTreeList(newTree);
      };
      QuestFileEditManager.prototype.getTreeNode = function(indexId, parentId) {
        var mixId = parentId + "," + indexId;
        return this.revokeHelper.Data.getTreeNode(mixId);
      };
      QuestFileEditManager.prototype.revoke = function() {
        var _this = this;
        this.selectNone(function() {
          _this.revokeHelper.revoke().then(function() {
            _this.updateTree();
          });
        });
      };
      QuestFileEditManager.prototype.revokeCancel = function() {
        var _this = this;
        this.selectNone(function() {
          _this.revokeHelper.revokeCancel().then(function() {
            _this.updateTree();
          });
        });
      };
      QuestFileEditManager.prototype.updateTree = function() {
        this.layout.removeAllChildren();
        this.cardList = [];
        this.addQuestNode(null, this.revokeHelper.Data.root);
      };
      QuestFileEditManager.prototype.buttonUpload = function() {
        var _this = this;
        this.selectNone(function() {
          _this.fileOperator.openJsonFile().then(function(value) {
            _this.loadFileTreeFinish(value);
          }).catch(function(err) {
            _this.showLog("" + err);
          });
        });
      };
      QuestFileEditManager.prototype.buttonSave = function() {
        var _this = this;
        this.selectNone(function() {
          var name = _this.editBox.string;
          if (name.length < 1) {
            _this.showLog("need a name!");
            return;
          }
          _this.fileOperator.saveJsonFile(JSON.stringify(_this.revokeHelper.Data), _this.editBox.string).then(function(value) {
            _this.showLog(value);
          }).catch(function(err) {
            _this.showLog("" + err);
          });
        });
      };
      QuestFileEditManager.prototype.showLog = function(msg) {
        var _this = this;
        this.label.string = msg;
        this.unscheduleAllCallbacks();
        this.scheduleOnce(function() {
          _this.label.string = "";
        }, 10);
      };
      QuestFileEditManager.prototype.newQuestTree = function() {
        var _this = this;
        this.selectNone(function() {
          var questTree = new QuestTreeData_1.default();
          questTree.id = "quest000";
          questTree.name = "\u6d4b\u8bd5\u6811";
          questTree.root.name = "\u5e8f\u7ae0";
          questTree.root.content = "\u5f00\u59cb\u5377";
          _this.editBox.string = questTree.id;
          _this.label.string = questTree.name;
          _this.revokeHelper.reset(questTree);
          _this.updateTree();
          _this.fileOperator.clear();
        });
      };
      QuestFileEditManager.prototype.showSpritePickDialog = function(targetData, callback) {
        this.spritePickDialog.show(targetData, callback);
      };
      QuestFileEditManager.prototype.loadFileTreeFinish = function(jsonText) {
        var data = new QuestTreeData_1.default();
        data.valueCopy(JSON.parse(jsonText));
        this.revokeHelper.reset(data);
        this.editBox.string = this.revokeHelper.Data.id;
        this.label.string = this.revokeHelper.Data.name;
        cc.log("\u52a0\u8f7d\u4efb\u52a1\u5217\u8868\u5b8c\u6210");
        this.updateTree();
      };
      __decorate([ property(cc.Label) ], QuestFileEditManager.prototype, "label", void 0);
      __decorate([ property(cc.EditBox) ], QuestFileEditManager.prototype, "editBox", void 0);
      __decorate([ property(cc.Node) ], QuestFileEditManager.prototype, "layout", void 0);
      __decorate([ property(cc.Node) ], QuestFileEditManager.prototype, "zoomUp", void 0);
      __decorate([ property(cc.Node) ], QuestFileEditManager.prototype, "zoomDown", void 0);
      __decorate([ property(cc.Prefab) ], QuestFileEditManager.prototype, "questCard", void 0);
      __decorate([ property(cc.Node) ], QuestFileEditManager.prototype, "revokeButton", void 0);
      __decorate([ property(cc.Node) ], QuestFileEditManager.prototype, "revokeCancelButton", void 0);
      __decorate([ property(QuestFileEditor_1.default) ], QuestFileEditManager.prototype, "editor", void 0);
      __decorate([ property(QuestAlertDialog_1.default) ], QuestFileEditManager.prototype, "alertDialog", void 0);
      __decorate([ property(QuestSpritePickDialog_1.default) ], QuestFileEditManager.prototype, "spritePickDialog", void 0);
      __decorate([ property(QuestSpriteInfoDialog_1.default) ], QuestFileEditManager.prototype, "questSpriteInfoDialog", void 0);
      QuestFileEditManager = __decorate([ ccclass ], QuestFileEditManager);
      return QuestFileEditManager;
    }(cc.Component);
    exports.default = QuestFileEditManager;
    cc._RF.pop();
  }, {
    "../../logic/EventHelper": "EventHelper",
    "../../manager/LoadingManager": "LoadingManager",
    "../data/QuestTreeData": "QuestTreeData",
    "../utils/FileOperator": "FileOperator",
    "../utils/RevokeHelper": "RevokeHelper",
    "./QuestAlertDialog": "QuestAlertDialog",
    "./QuestCard": "QuestCard",
    "./QuestFileEditor": "QuestFileEditor",
    "./QuestSpriteInfoDialog": "QuestSpriteInfoDialog",
    "./QuestSpritePickDialog": "QuestSpritePickDialog"
  } ],
  QuestFileEditor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32b83gpxrpIbJFbO1eqIW/a", "QuestFileEditor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QuestConditionItem_1 = require("./QuestConditionItem");
    var QuestInputItem_1 = require("./QuestInputItem");
    var QuestDateInputItem_1 = require("./QuestDateInputItem");
    var QuestConditionData_1 = require("../data/QuestConditionData");
    var QuestData_1 = require("../data/QuestData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestFileEditor = function(_super) {
      __extends(QuestFileEditor, _super);
      function QuestFileEditor() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.inputPrefab = null;
        _this.conditonPrefab = null;
        _this.content = null;
        _this.data = new QuestData_1.default();
        return _this;
      }
      QuestFileEditor_1 = QuestFileEditor;
      QuestFileEditor.prototype.onLoad = function() {
        this.inputName = QuestFileEditor_1.addInputItem(this.content, this.inputPrefab, "\u540d\u79f0\uff1a", "\u8bf7\u8f93\u5165\u4efb\u52a1\u540d\u79f0");
        this.inputContent = QuestFileEditor_1.addInputItem(this.content, this.inputPrefab, "\u63cf\u8ff0\uff1a", "\u8bf7\u8f93\u5165\u4efb\u52a1\u63cf\u8ff0", 500, 200);
        this.conditionTriggerItem = this.addQuestConditionItem("\u89e6\u53d1\u6761\u4ef6");
        this.conditionSuccessItem = this.addQuestConditionItem("\u5b8c\u6210\u6761\u4ef6");
        this.conditionFailItem = this.addQuestConditionItem("\u5931\u8d25\u6761\u4ef6");
        this.rewardItem = this.addQuestConditionItem("\u5956\u52b1");
        this.inputCoin = QuestFileEditor_1.addInputItem(this.content, this.inputPrefab, "\u91d1\u5e01\uff1a", "\u8bf7\u8f93\u5165\u6570\u5b57");
        this.inputRealCoin = QuestFileEditor_1.addInputItem(this.content, this.inputPrefab, "\u8d27\u5e01\uff1a", "\u8bf7\u8f93\u5165\u6570\u5b57");
        this.inputOilGold = QuestFileEditor_1.addInputItem(this.content, this.inputPrefab, "\u7ecf\u9a8c\uff1a", "\u8bf7\u8f93\u5165\u6570\u5b57");
      };
      QuestFileEditor.addInputItem = function(parent, prefab, name, placeholder, maxLength, editHeight) {
        var item = cc.instantiate(prefab).getComponent(QuestInputItem_1.default);
        item.label.string = name;
        item.editBox.placeholder = placeholder;
        item.node.parent = parent;
        editHeight && (item.editBox.node.height = editHeight);
        maxLength && (item.editBox.maxLength = maxLength);
        return item;
      };
      QuestFileEditor.addDateInputItem = function(parent, prefab, name) {
        var item = cc.instantiate(prefab).getComponent(QuestDateInputItem_1.default);
        item.label.string = name;
        item.node.parent = parent;
        return item;
      };
      QuestFileEditor.prototype.addQuestConditionItem = function(name) {
        var item = cc.instantiate(this.conditonPrefab).getComponent(QuestConditionItem_1.default);
        item.node.parent = this.content;
        item.editor = this;
        item.init(name);
        return item;
      };
      QuestFileEditor.prototype.showAnim = function() {
        this.node.stopAllActions();
        1 != this.node.scaleX && (this.node.scaleX = 0);
        cc.tween(this.node).to(.1, {
          scaleX: 1
        }).start();
      };
      QuestFileEditor.prototype.hideAnim = function() {
        this.node.stopAllActions();
        0 != this.node.scaleX && (this.node.scaleX = 1);
        cc.tween(this.node).to(.1, {
          scaleX: 0
        }).start();
      };
      QuestFileEditor.prototype.show = function(data) {
        this.data.valueCopy(data);
        this.showAnim();
        this.initAllData();
      };
      QuestFileEditor.prototype.updateData = function() {
        this.data.name = this.inputName.Value;
        this.data.content = this.inputContent.Value;
        this.conditionTriggerItem.updateInputData();
        this.conditionSuccessItem.updateInputData();
        this.conditionFailItem.updateInputData();
        this.data.triggerCondition.valueCopy(this.conditionTriggerItem.data);
        this.data.successCondition.valueCopy(this.conditionSuccessItem.data);
        this.data.failCondition.valueCopy(this.conditionFailItem.data);
        this.data.reward.copyList(this.rewardItem.data.list);
        var coin = parseInt(this.inputCoin.Value);
        var realcoin = parseInt(this.inputRealCoin.Value);
        var oilgold = parseInt(this.inputOilGold.Value);
        coin = this.data.reward.coins = isNaN(coin) ? 0 : coin;
        this.data.reward.realCoins = isNaN(realcoin) ? 0 : realcoin;
        this.data.reward.oilGolds = isNaN(oilgold) ? 0 : oilgold;
      };
      QuestFileEditor.prototype.initAllData = function() {
        if (!this.conditionTriggerItem) return;
        this.inputName.Value = this.data.name;
        this.inputContent.Value = this.data.content;
        this.conditionTriggerItem.updateData(this.data.triggerCondition, true, true, true);
        this.conditionSuccessItem.updateData(this.data.successCondition, true, false, true);
        this.conditionFailItem.updateData(this.data.failCondition, true, false, true);
        var reward = new QuestConditionData_1.default();
        reward.copyList(this.data.reward.list);
        this.rewardItem.updateData(reward, false, false, false);
        this.inputCoin.Value = "" + this.data.reward.coins;
        this.inputRealCoin.Value = "" + this.data.reward.realCoins;
        this.inputOilGold.Value = "" + this.data.reward.oilGolds;
      };
      QuestFileEditor.prototype.canHide = function() {
        if (0 == this.node.scaleX) return true;
        if (this.isDataChanged()) return false;
        return true;
      };
      QuestFileEditor.prototype.hide = function() {
        this.hideAnim();
        return true;
      };
      QuestFileEditor.prototype.isDataChanged = function() {
        this.updateData();
        var str1 = JSON.stringify(this.editManager.getTreeNode(this.data.indexId, this.data.parentId));
        var str2 = JSON.stringify(this.data);
        return str1 != str2;
      };
      QuestFileEditor.prototype.start = function() {
        this.initAllData();
      };
      QuestFileEditor.prototype.save = function() {
        this.updateData();
        this.editManager.updateTreeNodeData(this.data.indexId, this.data.parentId, this.data);
      };
      var QuestFileEditor_1;
      __decorate([ property(cc.Prefab) ], QuestFileEditor.prototype, "inputPrefab", void 0);
      __decorate([ property(cc.Prefab) ], QuestFileEditor.prototype, "conditonPrefab", void 0);
      __decorate([ property(cc.Node) ], QuestFileEditor.prototype, "content", void 0);
      QuestFileEditor = QuestFileEditor_1 = __decorate([ ccclass ], QuestFileEditor);
      return QuestFileEditor;
    }(cc.Component);
    exports.default = QuestFileEditor;
    cc._RF.pop();
  }, {
    "../data/QuestConditionData": "QuestConditionData",
    "../data/QuestData": "QuestData",
    "./QuestConditionItem": "QuestConditionItem",
    "./QuestDateInputItem": "QuestDateInputItem",
    "./QuestInputItem": "QuestInputItem"
  } ],
  QuestInputItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "62d39xlOFZHXK7egRa/rmU5", "QuestInputItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestInputItem = function(_super) {
      __extends(QuestInputItem, _super);
      function QuestInputItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.editBox = null;
        return _this;
      }
      QuestInputItem.prototype.onLoad = function() {};
      Object.defineProperty(QuestInputItem.prototype, "Value", {
        get: function() {
          return this.editBox.string;
        },
        set: function(value) {
          this.editBox.string = value;
        },
        enumerable: false,
        configurable: true
      });
      QuestInputItem.prototype.start = function() {};
      __decorate([ property(cc.Label) ], QuestInputItem.prototype, "label", void 0);
      __decorate([ property(cc.EditBox) ], QuestInputItem.prototype, "editBox", void 0);
      QuestInputItem = __decorate([ ccclass ], QuestInputItem);
      return QuestInputItem;
    }(cc.Component);
    exports.default = QuestInputItem;
    cc._RF.pop();
  }, {} ],
  QuestItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32ca4KdCaFEQ6/Z7Ll/q5B8", "QuestItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Logic_1 = require("../logic/Logic");
    var QuestData_1 = require("../editor/data/QuestData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestItem = function(_super) {
      __extends(QuestItem, _super);
      function QuestItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.title = null;
        _this.track = null;
        _this.index = 0;
        _this.data = new QuestData_1.default();
        return _this;
      }
      QuestItem.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {}, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
          _this.questBoradDialog && _this.questBoradDialog.selectItem(_this.index);
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {}, this);
      };
      QuestItem.prototype.init = function(questBoradDialog, data, index) {
        this.questBoradDialog = questBoradDialog;
        this.data.valueCopy(data);
        this.index = index;
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(this.data.icon);
        this.title.string = data.name;
        this.trackedItem();
      };
      QuestItem.prototype.select = function(isSelect) {
        this.node.opacity = isSelect ? 255 : 180;
        this.track.interactable = isSelect;
      };
      QuestItem.prototype.trackedItem = function() {
        this.data.isTracked = this.track.isChecked;
      };
      QuestItem.prototype.start = function() {};
      __decorate([ property(cc.Sprite) ], QuestItem.prototype, "sprite", void 0);
      __decorate([ property(cc.Label) ], QuestItem.prototype, "title", void 0);
      __decorate([ property(cc.Toggle) ], QuestItem.prototype, "track", void 0);
      QuestItem = __decorate([ ccclass ], QuestItem);
      return QuestItem;
    }(cc.Component);
    exports.default = QuestItem;
    cc._RF.pop();
  }, {
    "../editor/data/QuestData": "QuestData",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer"
  } ],
  QuestManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0ea45zO2n9OnoMmXVmLGeSW", "QuestManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseManager_1 = require("./BaseManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestManager = function(_super) {
      __extends(QuestManager, _super);
      function QuestManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.negativeList = [];
        _this.activeList = [];
        _this.finishList = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      QuestManager.prototype.onLoad = function() {};
      QuestManager.prototype.clear = function() {};
      QuestManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      QuestManager.prototype.updateLogic = function(dt, player) {
        this.isCheckTimeDelay(dt);
      };
      QuestManager.prototype.checkQuestTrigger = function() {
        for (var _i = 0, _a = this.negativeList; _i < _a.length; _i++) {
          var q = _a[_i];
          for (var _b = 0, _c = q.triggerCondition.list; _b < _c.length; _b++) {
            var t = _c[_b];
            t.targetType;
          }
        }
      };
      QuestManager = __decorate([ ccclass ], QuestManager);
      return QuestManager;
    }(BaseManager_1.default);
    exports.default = QuestManager;
    cc._RF.pop();
  }, {
    "./BaseManager": "BaseManager"
  } ],
  QuestRewardData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "529efD+mhBNAZmXMDNON8D7", "QuestRewardData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../../utils/DataUtils");
    var QuestRewardData = function() {
      function QuestRewardData() {
        this.itemList = "";
        this.coins = 0;
        this.realCoins = 0;
        this.oilGolds = 0;
        this.statusList = "";
      }
      QuestRewardData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
      };
      QuestRewardData.prototype.clone = function() {
        var e = new QuestRewardData();
        e.valueCopy(this);
        return e;
      };
      return QuestRewardData;
    }();
    exports.default = QuestRewardData;
    cc._RF.pop();
  }, {
    "../../utils/DataUtils": "DataUtils"
  } ],
  QuestSpriteInfoDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5caf9/2ymtA4o8X+ZZt2jf9", "QuestSpriteInfoDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestSpriteInfoDialog = function(_super) {
      __extends(QuestSpriteInfoDialog, _super);
      function QuestSpriteInfoDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.msg = null;
        return _this;
      }
      QuestSpriteInfoDialog.prototype.onLoad = function() {};
      QuestSpriteInfoDialog.prototype.show = function(msg, wpos) {
        var _this = this;
        this.msg.string = msg;
        this.node.opacity = 255;
        this.node.position = this.node.parent.convertToNodeSpaceAR(wpos);
        this.scheduleOnce(function() {
          var bg = _this.node.getChildByName("bg");
          bg.width = _this.msg.node.width + 10;
          bg.height = _this.msg.node.height + 10;
        }, 0);
      };
      QuestSpriteInfoDialog.prototype.hide = function() {
        this.node.opacity = 0;
      };
      __decorate([ property(cc.Label) ], QuestSpriteInfoDialog.prototype, "msg", void 0);
      QuestSpriteInfoDialog = __decorate([ ccclass ], QuestSpriteInfoDialog);
      return QuestSpriteInfoDialog;
    }(cc.Component);
    exports.default = QuestSpriteInfoDialog;
    cc._RF.pop();
  }, {} ],
  QuestSpriteItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "24e72aXMjxAkLmU7s6OzHBq", "QuestSpriteItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BuildingData_1 = require("../../data/BuildingData");
    var EquipmentData_1 = require("../../data/EquipmentData");
    var ItemData_1 = require("../../data/ItemData");
    var Item_1 = require("../../item/Item");
    var EventHelper_1 = require("../../logic/EventHelper");
    var Logic_1 = require("../../logic/Logic");
    var InventoryManager_1 = require("../../manager/InventoryManager");
    var QuestTargetData_1 = require("../data/QuestTargetData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestSpriteItem = function(_super) {
      __extends(QuestSpriteItem, _super);
      function QuestSpriteItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.select = null;
        _this.index = 0;
        _this.parentIndex = 0;
        _this.targetData = new QuestTargetData_1.default();
        _this.isLongPress = false;
        _this.longPressCallback = function() {
          _this.isLongPress = true;
        };
        return _this;
      }
      QuestSpriteItem.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.showInfo(true, event.getLocation());
          _this.isLongPress = false;
          _this.unschedule(_this.longPressCallback);
          _this.scheduleOnce(_this.longPressCallback, .2);
        });
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.showInfo(false, event.getLocation());
          !_this.isLongPress && _this.clickCallback && _this.clickCallback(_this);
        });
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.showInfo(false, event.getLocation());
        });
      };
      QuestSpriteItem.prototype.init = function(parentIndex, index, targetData, isSmall) {
        this.parentIndex = parentIndex;
        this.index = index;
        this.targetData.valueCopy(targetData);
        this.isSmall = isSmall;
        this.updateSpriteFrame();
      };
      QuestSpriteItem.prototype.updateSpriteFrame = function() {
        var _this = this;
        var spriteFrame = this.getSpriteFrameByType();
        if (spriteFrame) {
          this.sprite.spriteFrame = spriteFrame;
          var w = spriteFrame.getOriginalSize().width;
          var h = spriteFrame.getOriginalSize().height;
          this.sprite.node.width = 4 * w;
          this.sprite.node.height = 4 * h;
          var size = this.isSmall ? 32 : 96;
          if (this.sprite.node.height > size) {
            this.sprite.node.height = size;
            this.sprite.node.width = size / spriteFrame.getOriginalSize().height * spriteFrame.getOriginalSize().width;
          }
          this.select.width = this.sprite.node.width / this.select.scale;
          this.select.height = this.sprite.node.height / this.select.scale;
        } else this.scheduleOnce(function() {
          _this.updateSpriteFrame();
        }, 2);
      };
      QuestSpriteItem.prototype.getSpriteFrameByType = function() {
        var id = this.targetData.resId;
        var spriteFrame = Logic_1.default.spriteFrameRes(id);
        var data = new EquipmentData_1.default();
        data.valueCopy(Logic_1.default.equipments[id]);
        if (data.equipmetType == InventoryManager_1.default.CLOTHES) spriteFrame = Logic_1.default.spriteFrameRes(data.img + "anim0"); else if (data.equipmetType == InventoryManager_1.default.HELMET) spriteFrame = Logic_1.default.spriteFrameRes(data.img + "anim0"); else if (data.equipmetType == InventoryManager_1.default.REMOTE) spriteFrame = Logic_1.default.spriteFrameRes(data.img + "anim0"); else if (data.equipmetType != InventoryManager_1.default.EMPTY) spriteFrame = Logic_1.default.spriteFrameRes(data.img); else if (-1 != id.indexOf("furniture")) {
          var fd = new BuildingData_1.default();
          fd.valueCopy(Logic_1.default.furnitures[id]);
          spriteFrame = Logic_1.default.spriteFrameRes(fd.resName);
        } else if (-1 != id.indexOf("boss") && -1 == id.indexOf("food")) spriteFrame = Logic_1.default.spriteFrameRes("icon" + id); else if (-1 == id.indexOf("monster") && -1 == id.indexOf("nonplayer") || -1 != id.indexOf("food")) if (-1 != id.indexOf("roomsxyz")) spriteFrame = Logic_1.default.spriteFrameRes(id); else {
          var itemData = new ItemData_1.default();
          itemData.valueCopy(Logic_1.default.items[id]);
          itemData.resName != Item_1.default.EMPTY && (spriteFrame = Logic_1.default.spriteFrameRes(itemData.resName));
        } else spriteFrame = Logic_1.default.spriteFrameRes(id + "anim000");
        return spriteFrame;
      };
      QuestSpriteItem.prototype.showInfo = function(flag, wpos) {
        var str = this.targetData.getDesc(true, !this.isSmall);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.EDITOR_SHOW_SPRITE_INFO, {
          isShow: flag,
          text: str,
          wpos: wpos
        });
      };
      __decorate([ property(cc.Sprite) ], QuestSpriteItem.prototype, "sprite", void 0);
      __decorate([ property(cc.Node) ], QuestSpriteItem.prototype, "select", void 0);
      QuestSpriteItem = __decorate([ ccclass ], QuestSpriteItem);
      return QuestSpriteItem;
    }(cc.Component);
    exports.default = QuestSpriteItem;
    cc._RF.pop();
  }, {
    "../../data/BuildingData": "BuildingData",
    "../../data/EquipmentData": "EquipmentData",
    "../../data/ItemData": "ItemData",
    "../../item/Item": "Item",
    "../../logic/EventHelper": "EventHelper",
    "../../logic/Logic": "Logic",
    "../../manager/InventoryManager": "InventoryManager",
    "../data/QuestTargetData": "QuestTargetData"
  } ],
  QuestSpritePickDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bf1655WRtNEdbZW3LPexTmx", "QuestSpritePickDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Achievement_1 = require("../../logic/Achievement");
    var Logic_1 = require("../../logic/Logic");
    var LoadingManager_1 = require("../../manager/LoadingManager");
    var QuestConditionData_1 = require("../data/QuestConditionData");
    var QuestTargetData_1 = require("../data/QuestTargetData");
    var QuestSpriteItem_1 = require("./QuestSpriteItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestSpritePickDialog = function(_super) {
      __extends(QuestSpritePickDialog, _super);
      function QuestSpritePickDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.title = null;
        _this.content = null;
        _this.countEditBox = null;
        _this.typeContainer = null;
        _this.titleList = null;
        _this.prefab = null;
        _this.roomLayout = null;
        _this.roomEditBox = null;
        _this.spriteList = [];
        _this.currentListIndex = 0;
        _this.currentItemIndex = -1;
        _this.targetData = new QuestTargetData_1.default();
        _this.currentTypeArr = QuestSpritePickDialog_1.TYPES_ITEM;
        return _this;
      }
      QuestSpritePickDialog_1 = QuestSpritePickDialog;
      QuestSpritePickDialog.prototype.onLoad = function() {};
      QuestSpritePickDialog.prototype.showAnim = function() {
        this.node.active = true;
      };
      QuestSpritePickDialog.prototype.hideAnim = function() {
        this.node.active = false;
      };
      QuestSpritePickDialog.prototype.show = function(targetData, callback) {
        this.targetData.valueCopy(targetData);
        this.callback = callback;
        this.showAnim();
        this.changeList(null, this.getChangeIndex(targetData));
      };
      QuestSpritePickDialog.prototype.getSprite = function(targetData, index) {
        var _this = this;
        var icon = cc.instantiate(this.prefab).getComponent(QuestSpriteItem_1.default);
        icon.init(this.currentListIndex, index++, targetData, false);
        this.addItem(icon);
        var type1 = this.targetData.resId;
        var type2 = targetData.resId;
        if (type1 == type2) {
          this.currentSprite && (this.currentSprite.select.active = false);
          this.currentSprite = icon;
          this.currentSprite.select.active = true;
          this.countEditBox.string = "" + this.targetData.count;
          this.roomEditBox.string = "";
          this.targetData.targetType == QuestTargetData_1.default.TARGET_ROOM && (this.roomEditBox.string = this.targetData.chapter + "," + this.targetData.level + "," + this.targetData.x + "," + this.targetData.y + "," + this.targetData.z);
          this.typeUpdate(this.currentSprite.targetData.triggerType);
        }
        icon.clickCallback = function(value) {
          _this.iconClick(value);
        };
        return icon;
      };
      QuestSpritePickDialog.prototype.iconClick = function(value) {
        if (this.currentSprite == value) ; else {
          this.currentSprite && (this.currentSprite.select.active = false);
          this.currentSprite = value;
          this.currentSprite.select.active = true;
          this.typeUpdate(this.currentSprite.targetData.triggerType);
        }
      };
      QuestSpritePickDialog.prototype.hide = function() {
        this.hideAnim();
      };
      QuestSpritePickDialog.prototype.clickOk = function() {
        if (!this.currentSprite) {
          this.callback && this.callback(false, null);
          return;
        }
        if (this.callback) {
          var triggerType = "";
          var targetType = "";
          for (var i = 0; i < this.typeContainer.toggleItems.length; i++) if (this.typeContainer.toggleItems[i].isChecked) {
            triggerType = this.currentTypeArr[i].split(",")[1];
            targetType = this.currentTypeArr[i].split(",")[2];
          }
          var d = QuestTargetData_1.default.build(this.currentSprite.targetData.resId, targetType, triggerType, parseInt(this.countEditBox.string));
          if (this.targetData.targetType == QuestTargetData_1.default.TARGET_ROOM) {
            var arr = this.roomEditBox.string.split(",");
            if (arr.length > 4) {
              d.chapter = parseInt(arr[0]);
              d.level = parseInt(arr[1]);
              d.x = parseInt(arr[2]);
              d.y = parseInt(arr[3]);
              d.z = parseInt(arr[4]);
            }
          }
          this.currentSprite.targetData.valueCopy(d);
          this.callback(true, this.currentSprite.targetData);
        }
        this.hide();
      };
      QuestSpritePickDialog.prototype.clickCancel = function() {
        this.callback && this.callback(false, null);
        this.hide();
      };
      QuestSpritePickDialog.prototype.countUp = function() {
        var count = parseInt(this.countEditBox.string);
        isNaN(count) && (count = 1);
        count++;
        count < 1 && (count = 1);
        this.countEditBox.string = "" + count;
      };
      QuestSpritePickDialog.prototype.countDown = function() {
        var count = parseInt(this.countEditBox.string);
        isNaN(count) && (count = 1);
        count--;
        count < 1 && (count = 1);
        this.countEditBox.string = "" + count;
      };
      QuestSpritePickDialog.prototype.getChangeIndex = function(targetData) {
        var text = targetData ? targetData.targetType : "";
        return -1 != text.indexOf("challenge") ? "0" : -1 != text.indexOf("map") ? "1" : -1 != text.indexOf("building") ? "2" : -1 != text.indexOf("npc") ? "3" : -1 != text.indexOf("boss") ? "4" : -1 != text.indexOf("monster") ? "5" : -1 != text.indexOf("equip") ? "6" : -1 != text.indexOf("item") ? "7" : -1 != text.indexOf("room") ? "8" : "0";
      };
      QuestSpritePickDialog.prototype.changeList = function(toggle, index) {
        this.currentListIndex = parseInt(index);
        toggle || (this.titleList.toggleItems[this.currentListIndex].isChecked = true);
        this.unscheduleAllCallbacks();
        switch (this.currentListIndex) {
         case Achievement_1.default.TYPE_CHALLENGE:
         case Achievement_1.default.TYPE_MAP:
          this.removeContent();
          break;

         case Achievement_1.default.TYPE_FURNITURE:
          this.showFurnitureList();
          break;

         case Achievement_1.default.TYPE_NPC:
          this.showNpcList();
          break;

         case Achievement_1.default.TYPE_BOSS:
          this.showBossList();
          break;

         case Achievement_1.default.TYPE_MONSTER:
          this.showMonsterList();
          break;

         case Achievement_1.default.TYPE_EQUIP:
          this.showEquipList();
          break;

         case Achievement_1.default.TYPE_ITEM:
          this.showItemList();
          break;

         case Achievement_1.default.TYPE_ROOM:
          this.showRoomContent();
        }
      };
      QuestSpritePickDialog.prototype.typeUpdate = function(triggerType) {
        for (var _i = 0, _a = this.typeContainer.toggleItems; _i < _a.length; _i++) {
          var t = _a[_i];
          t.node.active = false;
        }
        switch (triggerType) {
         case QuestConditionData_1.default.ITEM_PICK:
         case QuestConditionData_1.default.ITEM_DROP:
         case QuestConditionData_1.default.ITEM_USE:
          this.activeToggles(QuestSpritePickDialog_1.TYPES_ITEM, triggerType);
          break;

         case QuestConditionData_1.default.EQUIP_PICK:
         case QuestConditionData_1.default.EQUIP_ON:
         case QuestConditionData_1.default.EQUIP_OFF:
         case QuestConditionData_1.default.EQUIP_DROP:
          this.activeToggles(QuestSpritePickDialog_1.TYPES_EQUIP, triggerType);
          break;

         case QuestConditionData_1.default.BUILDING_TRIGGER:
          this.activeToggles(QuestSpritePickDialog_1.TYPES_BUILDING, triggerType);
          break;

         case QuestConditionData_1.default.NPC_ALIVE:
         case QuestConditionData_1.default.NPC_KILL:
          this.activeToggles(QuestSpritePickDialog_1.TYPES_NPC, triggerType);
          break;

         case QuestConditionData_1.default.MONSTER_ALIVE:
         case QuestConditionData_1.default.MONSTER_KILL:
          this.activeToggles(QuestSpritePickDialog_1.TYPES_MONSTER, triggerType);
          break;

         case QuestConditionData_1.default.BOSS_ALIVE:
         case QuestConditionData_1.default.BOSS_KILL:
          this.activeToggles(QuestSpritePickDialog_1.TYPES_BOSS, triggerType);
          break;

         case QuestConditionData_1.default.ROOM_ENTER:
         case QuestConditionData_1.default.ROOM_LEAVE:
         case QuestConditionData_1.default.ROOM_CLEAR:
          this.activeToggles(QuestSpritePickDialog_1.TYPES_ROOM, triggerType);
        }
      };
      QuestSpritePickDialog.prototype.activeToggles = function(list, triggerType) {
        for (var i = 0; i < list.length; i++) {
          var arr = list[i].split(",");
          this.typeContainer.toggleItems[i].node.active = true;
          this.typeContainer.toggleItems[i].getComponentInChildren(cc.Label).string = arr[0];
          triggerType == arr[1] && (this.typeContainer.toggleItems[i].isChecked = true);
        }
        this.currentTypeArr = list;
      };
      QuestSpritePickDialog.prototype.removeContent = function() {
        this.typeUpdate("");
        this.content.removeAllChildren();
        this.roomLayout.active = false;
      };
      QuestSpritePickDialog.prototype.addItem = function(item) {
        this.content.addChild(item.node);
      };
      QuestSpritePickDialog.prototype.showMonsterList = function() {
        var _this = this;
        this.removeContent();
        var index = 0;
        var _loop_1 = function(key) {
          LoadingManager_1.default.loadNpcSpriteAtlas(key, function() {
            _this.currentListIndex == Achievement_1.default.TYPE_MONSTER && _this.getSprite(QuestTargetData_1.default.build(key, QuestTargetData_1.default.TARGET_MONSTER, QuestTargetData_1.default.MONSTER_KILL, 1), index++);
          });
        };
        for (var key in Logic_1.default.monsters) _loop_1(key);
      };
      QuestSpritePickDialog.prototype.showBossList = function() {
        this.removeContent();
        var index = 0;
        for (var key in Logic_1.default.bosses) this.getSprite(QuestTargetData_1.default.build(key, QuestTargetData_1.default.TARGET_BOSS, QuestTargetData_1.default.BOSS_KILL, 1), index++);
      };
      QuestSpritePickDialog.prototype.showNpcList = function() {
        var _this = this;
        this.removeContent();
        var index = 0;
        var _loop_2 = function(key) {
          LoadingManager_1.default.loadNpcSpriteAtlas(key, function() {
            _this.currentListIndex == Achievement_1.default.TYPE_NPC && _this.getSprite(QuestTargetData_1.default.build(key, QuestTargetData_1.default.TARGET_NPC, QuestTargetData_1.default.NPC_KILL, 1), index++);
          });
        };
        for (var key in Logic_1.default.nonplayers) _loop_2(key);
      };
      QuestSpritePickDialog.prototype.showItemList = function() {
        this.removeContent();
        var index = 0;
        for (var key in Logic_1.default.items) {
          index++;
          index > 5 && this.getSprite(QuestTargetData_1.default.build(key, QuestTargetData_1.default.TARGET_ITEM, QuestTargetData_1.default.ITEM_PICK, 1), index);
        }
      };
      QuestSpritePickDialog.prototype.showEquipList = function() {
        this.removeContent();
        var index = 0;
        for (var key in Logic_1.default.equipments) {
          index++;
          index > 1 && this.getSprite(QuestTargetData_1.default.build(key, QuestTargetData_1.default.TARGET_EQUIP, QuestTargetData_1.default.EQUIP_PICK, 1), index);
        }
      };
      QuestSpritePickDialog.prototype.showFurnitureList = function() {
        this.removeContent();
        var index = 0;
        for (var key in Logic_1.default.furnitures) this.getSprite(QuestTargetData_1.default.build(key, QuestTargetData_1.default.TARGET_FURNITURE, QuestTargetData_1.default.BUILDING_TRIGGER, 1), index++);
      };
      QuestSpritePickDialog.prototype.showRoomContent = function() {
        this.removeContent();
        this.roomLayout.active = true;
        var icon = this.getSprite(QuestTargetData_1.default.build("roomsxyz", QuestTargetData_1.default.TARGET_ROOM, QuestTargetData_1.default.ROOM_ENTER, 1), 0);
        this.currentSprite || this.iconClick(icon);
      };
      QuestSpritePickDialog.prototype.onTextChanged = function(text, editbox, customEventData) {
        if (editbox == this.countEditBox) {
          var count = parseInt(this.countEditBox.string);
          if (count < 1) {
            count = 1;
            this.countEditBox.string = "1";
          }
        } else if (editbox == this.roomEditBox) {
          var str = editbox.string;
          var count = 0;
          for (var _i = 0, str_1 = str; _i < str_1.length; _i++) {
            var s = str_1[_i];
            "," == s && count++;
          }
          var left = 4 - count;
          for (var i = 0; i < left; i++) str += ",0";
          0 == str.indexOf(",") && (str = "0" + str);
          editbox.string = str;
        }
      };
      var QuestSpritePickDialog_1;
      QuestSpritePickDialog.TYPES_ITEM = [ "\u62fe\u53d6," + QuestTargetData_1.default.ITEM_PICK + "," + QuestTargetData_1.default.TARGET_ITEM, "\u4f7f\u7528," + QuestTargetData_1.default.ITEM_PICK + "," + QuestTargetData_1.default.TARGET_ITEM, "\u4e22\u5f03," + QuestTargetData_1.default.ITEM_PICK + "," + QuestTargetData_1.default.TARGET_ITEM ];
      QuestSpritePickDialog.TYPES_BOSS = [ "\u51fb\u6740," + QuestTargetData_1.default.BOSS_KILL + "," + QuestTargetData_1.default.TARGET_BOSS, "\u5b58\u6d3b," + QuestTargetData_1.default.BOSS_ALIVE + "," + QuestTargetData_1.default.TARGET_BOSS ];
      QuestSpritePickDialog.TYPES_NPC = [ "\u51fb\u6740," + QuestTargetData_1.default.NPC_KILL + "," + QuestTargetData_1.default.TARGET_NPC, "\u5b58\u6d3b," + QuestTargetData_1.default.NPC_ALIVE + "," + QuestTargetData_1.default.TARGET_NPC ];
      QuestSpritePickDialog.TYPES_MONSTER = [ "\u51fb\u6740," + QuestTargetData_1.default.NPC_KILL + "," + QuestTargetData_1.default.TARGET_MONSTER, "\u5b58\u6d3b," + QuestTargetData_1.default.NPC_ALIVE + "," + QuestTargetData_1.default.TARGET_MONSTER ];
      QuestSpritePickDialog.TYPES_BUILDING = [ "\u4f7f\u7528," + QuestTargetData_1.default.BUILDING_TRIGGER + "," + QuestTargetData_1.default.TARGET_FURNITURE ];
      QuestSpritePickDialog.TYPES_ROOM = [ "\u8fdb\u5165," + QuestTargetData_1.default.ROOM_ENTER + "," + QuestTargetData_1.default.TARGET_ROOM, "\u79bb\u5f00," + QuestTargetData_1.default.ROOM_LEAVE + "," + QuestTargetData_1.default.TARGET_ROOM, "\u6e05\u7406," + QuestTargetData_1.default.ROOM_CLEAR + "," + QuestTargetData_1.default.TARGET_ROOM ];
      QuestSpritePickDialog.TYPES_EQUIP = [ "\u62fe\u53d6," + QuestTargetData_1.default.EQUIP_PICK + "," + QuestTargetData_1.default.TARGET_EQUIP, "\u88c5\u5907," + QuestTargetData_1.default.EQUIP_ON + "," + QuestTargetData_1.default.TARGET_EQUIP, "\u8131\u4e0b," + QuestTargetData_1.default.EQUIP_OFF + "," + QuestTargetData_1.default.TARGET_EQUIP, "\u4e22\u5f03," + QuestTargetData_1.default.EQUIP_DROP + "," + QuestTargetData_1.default.TARGET_EQUIP ];
      __decorate([ property(cc.Label) ], QuestSpritePickDialog.prototype, "title", void 0);
      __decorate([ property(cc.Node) ], QuestSpritePickDialog.prototype, "content", void 0);
      __decorate([ property(cc.EditBox) ], QuestSpritePickDialog.prototype, "countEditBox", void 0);
      __decorate([ property(cc.ToggleContainer) ], QuestSpritePickDialog.prototype, "typeContainer", void 0);
      __decorate([ property(cc.ToggleContainer) ], QuestSpritePickDialog.prototype, "titleList", void 0);
      __decorate([ property(cc.Prefab) ], QuestSpritePickDialog.prototype, "prefab", void 0);
      __decorate([ property(cc.Node) ], QuestSpritePickDialog.prototype, "roomLayout", void 0);
      __decorate([ property(cc.EditBox) ], QuestSpritePickDialog.prototype, "roomEditBox", void 0);
      QuestSpritePickDialog = QuestSpritePickDialog_1 = __decorate([ ccclass ], QuestSpritePickDialog);
      return QuestSpritePickDialog;
    }(cc.Component);
    exports.default = QuestSpritePickDialog;
    cc._RF.pop();
  }, {
    "../../logic/Achievement": "Achievement",
    "../../logic/Logic": "Logic",
    "../../manager/LoadingManager": "LoadingManager",
    "../data/QuestConditionData": "QuestConditionData",
    "../data/QuestTargetData": "QuestTargetData",
    "./QuestSpriteItem": "QuestSpriteItem"
  } ],
  QuestTargetData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38239NDlihBdqdw6lcK8N67", "QuestTargetData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BuildingData_1 = require("../../data/BuildingData");
    var EquipmentData_1 = require("../../data/EquipmentData");
    var ItemData_1 = require("../../data/ItemData");
    var NonPlayerData_1 = require("../../data/NonPlayerData");
    var Logic_1 = require("../../logic/Logic");
    var DataUtils_1 = require("../../utils/DataUtils");
    var QuestTargetData = function() {
      function QuestTargetData() {
        this.conditionList = "";
        this.roomList = "";
        this.startTime = 0;
        this.endTime = 0;
        this.resId = "";
        this.triggerType = "";
        this.count = 1;
        this.desc = "";
        this.targetType = "";
        this.chapter = 0;
        this.level = 0;
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.status = 0;
      }
      QuestTargetData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        return this;
      };
      QuestTargetData.prototype.clone = function() {
        var e = new QuestTargetData();
        e.valueCopy(this);
        return e;
      };
      QuestTargetData.build = function(resId, targetType, tiggerType, count) {
        var data = new QuestTargetData();
        data.resId = resId;
        data.targetType = targetType;
        data.triggerType = tiggerType;
        data.count = count;
        return data;
      };
      QuestTargetData.prototype.getDesc = function(isEditMode, isPickMode) {
        if (this.desc.length > 0) return this.desc;
        var str = "";
        var trigger = "";
        var title = "";
        var count = this.count;
        var isRoom = false;
        switch (this.triggerType) {
         case QuestTargetData.BUILDING_TRIGGER:
          title = "\u5efa\u7b51";
          trigger = "\u89e6\u53d1" + count + "\u6b21";
          break;

         case QuestTargetData.ITEM_DROP:
          title = "\u7269\u54c1";
          trigger = "\u4e22\u5f03";
          break;

         case QuestTargetData.ITEM_PICK:
          title = "\u7269\u54c1";
          trigger = "\u62fe\u53d6" + count + "\u4e2a";
          break;

         case QuestTargetData.ITEM_USE:
          title = "\u7269\u54c1";
          trigger = "\u4f7f\u7528" + count + "\u6b21";
          break;

         case QuestTargetData.EQUIP_PICK:
          title = "\u88c5\u5907";
          trigger = "\u62fe\u53d6" + count + "\u4e2a";
          break;

         case QuestTargetData.EQUIP_ON:
          title = "\u88c5\u5907";
          trigger = "\u88c5\u5907" + count + "\u4e2a";
          break;

         case QuestTargetData.EQUIP_OFF:
          title = "\u88c5\u5907";
          trigger = "\u8131\u4e0b";
          break;

         case QuestTargetData.EQUIP_DROP:
          title = "\u88c5\u5907";
          trigger = "\u4e22\u5f03";
          break;

         case QuestTargetData.NPC_ALIVE:
          title = "NPC";
          trigger = "\u5b58\u6d3b" + count + "\u4e2a";
          break;

         case QuestTargetData.NPC_KILL:
          title = "BOSS";
          trigger = "\u51fb\u6740" + count + "\u4e2a";
          break;

         case QuestTargetData.BOSS_ALIVE:
          title = "BOSS";
          trigger = "\u5b58\u6d3b" + count + "\u4e2a";
          break;

         case QuestTargetData.BOSS_KILL:
          title = "NPC";
          trigger = "\u51fb\u6740" + count + "\u4e2a";
          break;

         case QuestTargetData.MONSTER_ALIVE:
          title = "\u751f\u7269";
          trigger = "\u5b58\u6d3b" + count + "\u4e2a";
          break;

         case QuestTargetData.MONSTER_KILL:
          title = "\u751f\u7269";
          trigger = "\u51fb\u6740" + count + "\u4e2a";
          break;

         case QuestTargetData.ROOM_ENTER:
          title = "\u5730\u70b9";
          trigger = count > 1 ? "\u8fdb\u5165" + count + "\u4e00\u6b21" : "\u8fdb\u5165";
          isRoom = true;
          break;

         case QuestTargetData.ROOM_LEAVE:
          title = "\u5730\u70b9";
          trigger = count > 1 ? "\u79bb\u5f00" + count + "\u4e00\u6b21" : "\u79bb\u5f00";
          isRoom = true;
          break;

         case QuestTargetData.ROOM_CLEAR:
          title = "\u5730\u70b9";
          trigger = count > 1 ? "\u6e05\u7406" + count + "\u4e00\u6b21" : "\u6e05\u7406";
          isRoom = true;
        }
        str = isEditMode ? isPickMode ? "\u7c7b\u578b\uff1a" + title + "\n" + (isRoom ? "\u5730\u70b9[" + this.chapter + "," + this.level + "," + this.x + "," + this.y + "," + this.z + "]" : "\u8d44\u6e90\u540d\uff1a" + this.resId) + "\n" : "\u7c7b\u578b\uff1a" + title + "\n\u89e6\u53d1\u6761\u4ef6\uff1a" + trigger + "\n" + (isRoom ? "\u5730\u70b9[" + this.chapter + "," + this.level + "," + this.x + "," + this.y + "," + this.z + "]" : "\u8d44\u6e90\u540d\uff1a" + this.resId) + "\n" : "" + trigger + this.getTargetName();
        return str;
      };
      QuestTargetData.prototype.getTargetName = function() {
        var str = "";
        switch (this.targetType) {
         case QuestTargetData.TARGET_ROOM:
          str = "\u5730\u70b9[" + this.chapter + "," + this.level + "," + this.x + "," + this.y + "," + this.z + "]";
          break;

         case QuestTargetData.TARGET_BOSS:
          var nd1 = new NonPlayerData_1.default();
          nd1.valueCopy(Logic_1.default.bosses[this.resId]);
          str = nd1.nameCn;
          break;

         case QuestTargetData.TARGET_EQUIP:
          var data = new EquipmentData_1.default();
          data.valueCopy(Logic_1.default.equipments[this.resId]);
          str = data.nameCn;
          break;

         case QuestTargetData.TARGET_ITEM:
          var itemData = new ItemData_1.default();
          itemData.valueCopy(Logic_1.default.items[this.resId]);
          str = itemData.nameCn;
          break;

         case QuestTargetData.TARGET_FURNITURE:
          var fd = new BuildingData_1.default();
          fd.valueCopy(Logic_1.default.furnitures[this.resId]);
          str = fd.nameCn;
          break;

         case QuestTargetData.TARGET_MONSTER:
          var nd2 = new NonPlayerData_1.default();
          nd2.valueCopy(Logic_1.default.monsters[this.resId]);
          str = nd2.nameCn;
          break;

         case QuestTargetData.TARGET_NPC:
          var nd3 = new NonPlayerData_1.default();
          nd3.valueCopy(Logic_1.default.nonplayers[this.resId]);
          str = nd3.nameCn;
        }
        return str;
      };
      QuestTargetData.ITEM_PICK = "item_pick";
      QuestTargetData.ITEM_USE = "item_use";
      QuestTargetData.ITEM_DROP = "item_drop";
      QuestTargetData.EQUIP_PICK = "equip_pick";
      QuestTargetData.EQUIP_ON = "equip_wear";
      QuestTargetData.EQUIP_OFF = "equip_wear";
      QuestTargetData.EQUIP_DROP = "equip_drop";
      QuestTargetData.NPC_KILL = "npc_kill";
      QuestTargetData.NPC_ALIVE = "npc_alive";
      QuestTargetData.MONSTER_KILL = "monster_kill";
      QuestTargetData.MONSTER_ALIVE = "monster_alive";
      QuestTargetData.BOSS_KILL = "boss_kill";
      QuestTargetData.BOSS_ALIVE = "boss_alive";
      QuestTargetData.BUILDING_TRIGGER = "building_trigger";
      QuestTargetData.ROOM_ENTER = "room_enter";
      QuestTargetData.ROOM_LEAVE = "room_leave";
      QuestTargetData.ROOM_CLEAR = "room_clear";
      QuestTargetData.TARGET_ROOM = "target_room";
      QuestTargetData.TARGET_FURNITURE = "target_building";
      QuestTargetData.TARGET_NPC = "target_npc";
      QuestTargetData.TARGET_BOSS = "target_boss";
      QuestTargetData.TARGET_MONSTER = "target_monster";
      QuestTargetData.TARGET_EQUIP = "target_equip";
      QuestTargetData.TARGET_ITEM = "target_item";
      return QuestTargetData;
    }();
    exports.default = QuestTargetData;
    cc._RF.pop();
  }, {
    "../../data/BuildingData": "BuildingData",
    "../../data/EquipmentData": "EquipmentData",
    "../../data/ItemData": "ItemData",
    "../../data/NonPlayerData": "NonPlayerData",
    "../../logic/Logic": "Logic",
    "../../utils/DataUtils": "DataUtils"
  } ],
  QuestTargetItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f98e3cR66FHG4/+hPfXGIUc", "QuestTargetItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var QuestData_1 = require("../editor/data/QuestData");
    var QuestTargetData_1 = require("../editor/data/QuestTargetData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QuestTargetItem = function(_super) {
      __extends(QuestTargetItem, _super);
      function QuestTargetItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.toggle = null;
        _this.title = null;
        _this.index = 0;
        _this.data = new QuestTargetData_1.default();
        return _this;
      }
      QuestTargetItem.prototype.onLoad = function() {};
      QuestTargetItem.prototype.init = function(data, index) {
        this.data.valueCopy(data);
        this.index = index;
        this.title.string = data.getDesc();
        this.toggle.isChecked = data.status == QuestData_1.default.STATUS_SUCCESS;
        this.node.opacity = data.status == QuestData_1.default.STATUS_FAILED ? 128 : 255;
        this.title.node.color = data.status == QuestData_1.default.STATUS_FAILED ? cc.Color.RED : cc.Color.WHITE;
      };
      QuestTargetItem.prototype.start = function() {};
      __decorate([ property(cc.Toggle) ], QuestTargetItem.prototype, "toggle", void 0);
      __decorate([ property(cc.Label) ], QuestTargetItem.prototype, "title", void 0);
      QuestTargetItem = __decorate([ ccclass ], QuestTargetItem);
      return QuestTargetItem;
    }(cc.Component);
    exports.default = QuestTargetItem;
    cc._RF.pop();
  }, {
    "../editor/data/QuestData": "QuestData",
    "../editor/data/QuestTargetData": "QuestTargetData"
  } ],
  QuestTreeData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b3ff6Wfw3BBsLtLBcJ+xtiF", "QuestTreeData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../../utils/DataUtils");
    var QuestData_1 = require("./QuestData");
    var QuestTreeData = function() {
      function QuestTreeData() {
        this.status = QuestData_1.default.STATUS_INIT;
        this.id = "";
        this.name = "";
        this.content = "";
        this.root = new QuestData_1.default();
      }
      QuestTreeData.prototype.valueCopy = function(data) {
        if (!data) return this;
        DataUtils_1.default.baseCopy(this, data);
        data.root && this.root.valueCopy(data.root);
        return this;
      };
      QuestTreeData.prototype.clone = function() {
        var e = new QuestTreeData();
        e.valueCopy(this);
        return e;
      };
      QuestTreeData.prototype.getTreeNode = function(mixId) {
        var data = this.root;
        if (mixId.length < 2) return data;
        var arr = mixId.split(",");
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var indexType = arr_1[_i];
          -1 != indexType.indexOf("s") ? data = data.successList[parseInt(indexType[1])] : -1 != indexType.indexOf("f") && (data = data.failList[parseInt(indexType[1])]);
        }
        return data;
      };
      QuestTreeData.prototype.addTreeNode = function(indexId, parentId, isSuccessType, newdata) {
        var mixId = parentId + "," + indexId;
        var data = this.getTreeNode(mixId);
        var list = isSuccessType ? data.successList : data.failList;
        var length = list.length;
        newdata.indexId = (isSuccessType ? "s" : "f") + length;
        newdata.parentId = data.parentId + "," + data.indexId;
        newdata.name = isSuccessType ? "\u4efb\u52a1\u6210\u529f\u652f\u7ebf" + newdata.indexId[1] : "\u4efb\u52a1\u5931\u8d25\u652f\u7ebf" + newdata.indexId[1];
        newdata.content = "\u5f00\u59cb\u5377";
        list.push(newdata);
      };
      QuestTreeData.updateIndexId = function(data, parent, isSuccessType, index) {
        data.indexId = (isSuccessType ? "s" : "f") + index;
        data.parentId = parent.parentId + "," + parent.indexId;
      };
      QuestTreeData.prototype.removeTreeNode = function(indexId, parentId) {
        if (-1 != indexId.indexOf("r")) return;
        var isSuccess = -1 != indexId.indexOf("s");
        var i = parseInt(indexId[1]);
        var data = this.getTreeNode(parentId);
        var list = isSuccess ? data.successList : data.failList;
        list.splice(i, 1);
      };
      QuestTreeData.prototype.updateTreeNodePos = function(indexId, parentId, pos) {
        var mixId = parentId + "," + indexId;
        var data = this.getTreeNode(mixId);
        data.editPos = pos.clone();
      };
      QuestTreeData.prototype.updateTreeNodeData = function(indexId, parentId, data) {
        var mixId = parentId + "," + indexId;
        var data1 = this.getTreeNode(mixId);
        data1.valueCopy(data);
      };
      return QuestTreeData;
    }();
    exports.default = QuestTreeData;
    cc._RF.pop();
  }, {
    "../../utils/DataUtils": "DataUtils",
    "./QuestData": "QuestData"
  } ],
  Rah: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d367aUD8qtMnYoMv/zpvvi2", "Rah");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var DamageData_1 = require("../data/DamageData");
    var Shooter_1 = require("../logic/Shooter");
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var StatusManager_1 = require("../manager/StatusManager");
    var NextStep_1 = require("../utils/NextStep");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Rah = function(_super) {
      __extends(Rah, _super);
      function Rah() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isFaceRight = true;
        _this.isMoving = false;
        _this.darkSkill = new NextStep_1.default();
        _this.blinkSkill = new NextStep_1.default();
        _this.snakeSkill = new NextStep_1.default();
        _this.bugsSkill = new NextStep_1.default();
        _this.meleeSkill = new NextStep_1.default();
        _this.actionTimeDelay = 0;
        return _this;
      }
      Rah.prototype.init = function(type) {
        throw new Error("Method not implemented.");
      };
      Rah.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter = this.node.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.shooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "bossrahhead", this.node.position));
      };
      Rah.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      Rah.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow || this.blinkSkill.IsExcuting) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Rah.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        cc.tween(this.node).to(3, {
          opacity: 0
        }).start();
        this.sc.isDied = true;
        this.dungeon.fogScaleNormal();
        this.scheduleOnce(function() {
          _this.dungeon.fogScaleNormal();
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Rah.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.entity.Transform.position = Dungeon_1.default.fixOuterMap(this.entity.Transform.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position);
        this.changeZIndex();
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos).sub(this.entity.Transform.position);
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        this.isFaceRight = h > 0;
        var isHalf = this.data.currentHealth < this.data.Common.MaxHealth / 2;
        playerDis < 100 && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
        Logic_1.default.getChance(20) && isHalf && this.dark();
        Logic_1.default.getChance(80) && this.blink();
        playerDis < 600 && !this.blinkSkill.IsExcuting && this.fireSnake();
        Logic_1.default.getChance(90) && !this.blinkSkill.IsExcuting && this.fireBugs(isHalf);
        playerDis < 100 && !this.blinkSkill.IsExcuting && this.attack();
        if (!pos.equals(cc.Vec3.ZERO) && !this.meleeSkill.IsExcuting && !this.blinkSkill.IsExcuting && playerDis > 100) {
          pos = pos.normalizeSelf();
          this.move(pos, 2);
        }
      };
      Rah.prototype.blink = function() {
        var _this = this;
        this.blinkSkill.next(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.BLINK);
          _this.blinkSkill.IsExcuting = true;
          _this.entity.Move.linearVelocity = cc.Vec2.ZERO;
          cc.tween(_this.node).to(1, {
            opacity: 0
          }).call(function() {
            var p = _this.dungeon.player.pos.clone();
            p.y > Dungeon_1.default.HEIGHT_SIZE - 1 ? p.y -= 1 : p.y += 1;
            _this.transportBoss(p.x, p.y);
          }).to(1, {
            opacity: 255
          }).call(function() {
            _this.attack();
          }).start();
          _this.scheduleOnce(function() {
            _this.blinkSkill.IsExcuting = false;
          }, 5);
        }, 10);
        return;
      };
      Rah.prototype.attack = function() {
        var _this = this;
        this.meleeSkill.next(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          _this.meleeSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.playAdditive("RahAttack001");
        }, 2, true);
      };
      Rah.prototype.dark = function() {
        var _this = this;
        this.darkSkill.next(function() {
          _this.dungeon.fogScaleDark();
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.playAdditive("RahSpellDark");
        }, 20);
      };
      Rah.prototype.fireSnake = function() {
        var _this = this;
        this.snakeSkill.next(function() {
          _this.shooter.setHv(cc.v2(0, -1));
          var pos = _this.entity.Transform.position.clone().add(_this.shooter.node.position);
          var hv = _this.dungeon.player.getCenterPosition().sub(pos);
          if (!hv.equals(cc.Vec3.ZERO)) {
            _this.shooter.setHv(cc.v2(hv).normalize());
            _this.fireShooter(_this.shooter, "bullet014", 1, 0);
          }
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.playAdditive("RahSpellSnake");
        }, 6);
      };
      Rah.prototype.fireBugs = function(isHalf) {
        var _this = this;
        this.bugsSkill.next(function() {
          _this.shooter.data.bulletLineInterval = .5;
          var pos = _this.entity.Transform.position.clone().add(_this.shooter.node.position);
          var hv = _this.dungeon.player.getCenterPosition().sub(pos);
          hv.equals(cc.Vec3.ZERO) || _this.shooter.setHv(cc.v2(hv).normalize());
          _this.fireShooter(_this.shooter, "bullet017", 99, 0);
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.playAdditive("RahSpellBugs");
        }, 4);
      };
      Rah.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.actor = this;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle);
      };
      Rah.prototype.showBoss = function() {
        this.sc.isShow = true;
        this.entity.NodeRender.node = this.node;
        this.entity.Move.damping = 6;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      Rah.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Rah.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.sc.isDied && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
        this.node.scaleX = this.isFaceRight ? 1 : -1;
      };
      Rah.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.normalize().mul(speed);
        this.entity.Move.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.changeZIndex();
      };
      Rah.prototype.onColliderEnter = function(other, self) {
        if (self.tag == CCollider_1.default.TAG.BOSS_HIT) {
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
          if (target && this.meleeSkill.IsExcuting && !this.sc.isDied) {
            var d = new DamageData_1.default();
            d.physicalDamage = 15;
            target.takeDamage(d, FromData_1.default.getClone(this.actorName(), "bossrahhead", this.node.position), this);
          }
        }
      };
      Rah.prototype.actorName = function() {
        return "\u673a\u68b0\u62c9\u795e";
      };
      Rah = __decorate([ ccclass ], Rah);
      return Rah;
    }(Boss_1.default);
    exports.default = Rah;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/NextStep": "NextStep",
    "./Boss": "Boss"
  } ],
  Random4Save: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74f98/L5YNOk7ZP1QlogXyD", "Random4Save");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Random4Save = function() {
      function Random4Save(seed) {
        this.seed = 0;
        this.seed = seed;
        seed <= 0 && (seed = new Date().getTime());
      }
      Object.defineProperty(Random4Save.prototype, "Seed", {
        get: function() {
          return this.seed;
        },
        set: function(seed) {
          this.seed = seed;
        },
        enumerable: false,
        configurable: true
      });
      Random4Save.prototype.rand = function() {
        this.seed = (9301 * this.seed + 49297) % 233280;
        return this.seed / 233280;
      };
      Random4Save.prototype.getRandomNum = function(min, max) {
        return min + Math.round(this.rand() * (max - min));
      };
      Random4Save.prototype.getHalfChance = function() {
        return this.rand() > .5;
      };
      return Random4Save;
    }();
    exports.default = Random4Save;
    cc._RF.pop();
  }, {} ],
  Random: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b33a81ZfJ9HoIP2sjcUTtfA", "Random");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Random = function() {
      function Random() {}
      Random.prototype.setSeed = function(seed) {
        Random.seed = seed;
      };
      Random.rand = function() {
        Random.seed = (9301 * Random.seed + 49297) % 233280;
        return Random.seed / 233280;
      };
      Random.getRandomNum = function(min, max) {
        return min + Math.round(Random.rand() * (max - min));
      };
      Random.getHalfChance = function() {
        return Random.rand() > .5;
      };
      Random.seed = new Date().getTime();
      return Random;
    }();
    exports.default = Random;
    cc._RF.pop();
  }, {} ],
  RayCastResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7154QJ7udPJZTxGf5BSkDh", "RayCastResult");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RayCastResult = function() {
      function RayCastResult(collider, point) {
        this.collider = collider;
        this.point = point;
      }
      return RayCastResult;
    }();
    exports.default = RayCastResult;
    cc._RF.pop();
  }, {} ],
  RealCoinCount: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "248b0yHiLxBSY7HUJRsW5Pe", "RealCoinCount");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RealCoinCount = function(_super) {
      __extends(RealCoinCount, _super);
      function RealCoinCount() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        return _this;
      }
      RealCoinCount.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_ADD_REAL_COIN, function(detail) {
          _this.addCount(detail.count);
        });
      };
      RealCoinCount.prototype.start = function() {};
      RealCoinCount.prototype.addCount = function(value) {
        if (!this.anim) return;
        var c = parseInt(value);
        Logic_1.default.realCoins += c;
      };
      RealCoinCount.prototype.update = function(dt) {
        this.label && (this.label.string = "" + Logic_1.default.realCoins);
      };
      __decorate([ property(cc.Label) ], RealCoinCount.prototype, "label", void 0);
      RealCoinCount = __decorate([ ccclass ], RealCoinCount);
      return RealCoinCount;
    }(cc.Component);
    exports.default = RealCoinCount;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  RectDoor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d41e5HipSBBVLDWw2G1WR/C", "RectDoor");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RectDoor = function() {
      function RectDoor(dir, isDoor, isHidden) {
        this.isDoor = false;
        this.isHidden = false;
        this.dir = dir;
        this.isDoor = isDoor;
        this.isHidden = isHidden;
      }
      return RectDoor;
    }();
    exports.default = RectDoor;
    cc._RF.pop();
  }, {} ],
  RectDungeon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b710jO571KQpPd9DCAmaJb", "RectDungeon");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RectRoom_1 = require("./RectRoom");
    var RoomType_1 = require("./RoomType");
    var BuildingData_1 = require("../data/BuildingData");
    var EquipmentData_1 = require("../data/EquipmentData");
    var ItemData_1 = require("../data/ItemData");
    var RectDungeon = function() {
      function RectDungeon() {
        this.id = "00";
        this.width = 0;
        this.height = 0;
        this.currentPos = cc.v3(-1, -1);
        this.buildings = {};
        this.equipments = {};
        this.items = {};
      }
      RectDungeon.prototype.buildMapFromSave = function(dungeon, levelData) {
        this.id = dungeon.id;
        this.width = dungeon.width;
        this.height = dungeon.height;
        this.map = new Array();
        this.currentPos = dungeon.currentPos ? cc.v3(dungeon.currentPos.x, dungeon.currentPos.y) : cc.v3(-1, -1);
        for (var key1 in dungeon.buildings) {
          var map = dungeon.buildings[key1];
          this.buildings[key1] = {};
          for (var key2 in map) {
            var data = new BuildingData_1.default();
            data.valueCopy(map[key2]);
            this.buildings[key1][key2] = data;
          }
        }
        for (var key in dungeon.equipments) {
          var list = dungeon.equipments[key];
          this.equipments[key] = new Array();
          for (var i = 0; i < list.length; i++) {
            var equip = new EquipmentData_1.default();
            equip.valueCopy(list[i]);
            this.equipments[key][i] = equip;
          }
        }
        for (var key in dungeon.items) {
          var list = dungeon.items[key];
          this.items[key] = new Array();
          for (var i = 0; i < list.length; i++) {
            var item = new ItemData_1.default();
            item.valueCopy(list[i]);
            this.items[key][i] = item;
          }
        }
        for (var i = 0; i < this.width; i++) {
          this.map[i] = new Array();
          for (var j = 0; j < this.height; j++) {
            this.map[i][j] = new RectRoom_1.default(i, j, RoomType_1.default.EMPTY_ROOM).initFromSave(dungeon.map[i][j]);
            if (levelData) {
              this.map[i][j].roomType = RoomType_1.default.getTypeByName(levelData.roomTypes[i][j]);
              this.map[i][j].isOutside = levelData.outSideMap[i][j];
              this.map[i][j].shadowLevel || (this.map[i][j].shadowLevel = levelData.shadowMap[i][j]);
            }
          }
        }
        return this;
      };
      RectDungeon.prototype.buildMap = function(levelData) {
        this.map = new Array();
        this.id = "" + levelData.chapter + levelData.index;
        this.width = levelData.width;
        this.height = levelData.height;
        this.buildings = {};
        this.equipments = {};
        this.items = {};
        for (var i = 0; i < levelData.width; i++) {
          this.map[i] = new Array();
          for (var j = 0; j < levelData.height; j++) {
            this.map[i][j] = new RectRoom_1.default(i, j, RoomType_1.default.getTypeByName(levelData.roomTypes[i][j]));
            this.map[i][j].isOutside = levelData.outSideMap[i][j];
            this.map[i][j].shadowLevel = levelData.shadowMap[i][j];
          }
        }
      };
      RectDungeon.prototype.getDisPlay = function() {
        var str = "";
        for (var j = this.height - 1; j >= 0; j--) {
          for (var i = 0; i < this.width; i++) str += this.map[i][j].roomType.NAME;
          str += "\n";
        }
        return str;
      };
      RectDungeon.prototype.getNeighborRoom = function(i, j, dir) {
        var x = i;
        var y = j;
        if (-1 == dir) return this.map[x][y];
        0 == dir && (y += 1);
        1 == dir && (y -= 1);
        2 == dir && (x -= 1);
        3 == dir && (x += 1);
        if (x >= this.width || x < 0 || y >= this.height || y < 0 || dir < 0 || dir > 4) return null;
        return this.map[x][y];
      };
      RectDungeon.prototype.changeRoomsIsFound = function(x, y) {
        this.changeRoomIsFound(x, y);
        this.changeRoomIsFound(x + 1, y);
        this.changeRoomIsFound(x - 1, y);
        this.changeRoomIsFound(x, y + 1);
        this.changeRoomIsFound(x, y - 1);
        this.changeRoomIsFound(x + 1, y - 1);
        this.changeRoomIsFound(x - 1, y - 1);
        this.changeRoomIsFound(x + 1, y - 1);
        this.changeRoomIsFound(x - 1, y - 1);
      };
      RectDungeon.prototype.changeRoomIsFound = function(x, y) {
        if (x >= this.width || x < 0 || y >= this.height || y < 0) return;
        this.map[x][y].state != RectRoom_1.default.STATE_CLEAR && (this.map[x][y].state = RectRoom_1.default.STATE_FOUND);
      };
      RectDungeon.isRoomEqual = function(room1, room2) {
        return room1.x == room2.x && room1.y == room2.y;
      };
      RectDungeon.prototype.changeAllClearRoomsReborn = function() {
        for (var i = 0; i < this.width; i++) for (var j = 0; j < this.height; j++) if (this.map[i][j].isClear()) {
          this.map[i][j].reborn++;
          this.map[i][j].isReborn = true;
        }
      };
      return RectDungeon;
    }();
    exports.default = RectDungeon;
    cc._RF.pop();
  }, {
    "../data/BuildingData": "BuildingData",
    "../data/EquipmentData": "EquipmentData",
    "../data/ItemData": "ItemData",
    "./RectRoom": "RectRoom",
    "./RoomType": "RoomType"
  } ],
  RectRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d55edjfV4pLuKPki2DqAONx", "RectRoom");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RoomType_1 = require("./RoomType");
    var Random_1 = require("../utils/Random");
    var RectRoom = function() {
      function RectRoom(x, y, roomType) {
        this.state = RectRoom.STATE_SLEEP;
        this.seed = 0;
        this.isReborn = false;
        this.reborn = 0;
        this.shadowLevel = "";
        this.isOutside = false;
        this.x = x;
        this.y = y;
        this.roomType = roomType;
        this.seed = RectRoom.getRandomNum(0, 1e8);
        this.init();
      }
      RectRoom.prototype.initFromSave = function(room) {
        if (!room) return;
        this.x = room.x;
        this.y = room.y;
        this.roomType = new RoomType_1.default(0, "");
        this.roomType.valueCopy(room.roomType);
        this.state = room.state;
        this.reborn = room.reborn;
        this.isReborn = room.isReborn;
        this.shadowLevel = room.shadowLevel;
        this.isOutside = room.isOutside;
        this.seed = room.seed ? room.seed : RectRoom.getRandomNum(0, 1e8);
        return this;
      };
      RectRoom.prototype.init = function() {
        this.state = RectRoom.STATE_SLEEP;
      };
      RectRoom.prototype.isFound = function() {
        return this.state == RectRoom.STATE_FOUND || this.state == RectRoom.STATE_CLEAR;
      };
      RectRoom.prototype.isClear = function() {
        return this.state == RectRoom.STATE_CLEAR;
      };
      RectRoom.getRandomNum = function(min, max) {
        return min + Math.round(Random_1.default.rand() * (max - min));
      };
      RectRoom.STATE_SLEEP = 0;
      RectRoom.STATE_FOUND = 1;
      RectRoom.STATE_CLEAR = 2;
      return RectRoom;
    }();
    exports.default = RectRoom;
    cc._RF.pop();
  }, {
    "../utils/Random": "Random",
    "./RoomType": "RoomType"
  } ],
  ReflectLight: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5485tveAtBWZxfj6/Ko4Gh", "ReflectLight");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ReflectLight = function(_super) {
      __extends(ReflectLight, _super);
      function ReflectLight() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.root = null;
        return _this;
      }
      ReflectLight_1 = ReflectLight;
      ReflectLight.prototype.show = function(dungeon, position, isFar, isStab, isWall, hv, color, audioType) {
        var _this = this;
        this.node.parent = dungeon.node;
        this.node.position = position.clone();
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
        var audios = ReflectLight_1.AUDIOS_MELEE;
        switch (audioType) {
         case ReflectLight_1.AUDIO_TYPE_METAL:
          audios = ReflectLight_1.AUDIOS_METAL;
          break;

         case ReflectLight_1.AUDIO_TYPE_WOOD:
          audios = ReflectLight_1.AUDIOS_WOOD;
        }
        var audioIndex = Logic_1.default.getRandomNum(0, audios.length - 1);
        var fix = "";
        if (isWall) {
          fix = "wall";
          AudioPlayer_1.default.play(audios[audioIndex]);
        } else isFar ? fix = "far" : isStab && (fix = "stab");
        var direction = hv.clone();
        isWall ? direction = cc.v2(-hv.x, -hv.y) : AudioPlayer_1.default.play(audios[audioIndex]);
        this.sprite.node.color = color;
        this.root.angle = Utils_1.default.getRotateAngle(direction);
        this.sprite.spriteFrame = null;
        var name = "weaponreflectlight" + fix + "anim00";
        cc.tween(this.sprite.node).call(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(name + "0");
        }).delay(.1).call(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(name + "1");
        }).delay(.1).call(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(name + "2");
        }).delay(.1).call(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(name + "3");
        }).delay(.1).call(function() {
          _this.node.destroy();
        }).start();
      };
      var ReflectLight_1;
      ReflectLight.AUDIO_TYPE_MELEE = 0;
      ReflectLight.AUDIO_TYPE_METAL = 1;
      ReflectLight.AUDIO_TYPE_WOOD = 2;
      ReflectLight.AUDIOS_MELEE = [ AudioPlayer_1.default.MELEE_REFLECT, AudioPlayer_1.default.MELEE_REFLECT1 ];
      ReflectLight.AUDIOS_WOOD = [ AudioPlayer_1.default.MELEE_REFLECT_WOOD1, AudioPlayer_1.default.MELEE_REFLECT_WOOD2, AudioPlayer_1.default.MELEE_REFLECT_WOOD3 ];
      ReflectLight.AUDIOS_METAL = [ AudioPlayer_1.default.MELEE_REFLECT_WALL, AudioPlayer_1.default.MELEE_REFLECT_WALL1 ];
      __decorate([ property(cc.Sprite) ], ReflectLight.prototype, "sprite", void 0);
      __decorate([ property(cc.Node) ], ReflectLight.prototype, "root", void 0);
      ReflectLight = ReflectLight_1 = __decorate([ ccclass ], ReflectLight);
      return ReflectLight;
    }(cc.Component);
    exports.default = ReflectLight;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/Utils": "Utils"
  } ],
  RevokeHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ae5d5gbK5dCGbkyTbJQnDaZ", "RevokeHelper");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RevokeHelper = function() {
      function RevokeHelper(data) {
        this.data = null;
        this.revokeList = [];
        this.revokeCancelList = [];
        this.data = data;
      }
      RevokeHelper.prototype.reset = function(data) {
        this.data = data;
        this.revokeList = [];
        this.revokeCancelList = [];
      };
      Object.defineProperty(RevokeHelper.prototype, "Data", {
        get: function() {
          return this.data;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RevokeHelper.prototype, "RevokeLength", {
        get: function() {
          return this.revokeList.length;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RevokeHelper.prototype, "RevokeCancelLength", {
        get: function() {
          return this.revokeCancelList.length;
        },
        enumerable: false,
        configurable: true
      });
      RevokeHelper.prototype.revoke = function() {
        var _this = this;
        return new Promise(function(resolve) {
          if (_this.revokeList.length > 0) {
            _this.revokeCancelList.push(_this.data);
            _this.data = _this.revokeList.pop();
            resolve(_this.data);
          }
        });
      };
      RevokeHelper.prototype.revokeCancel = function() {
        var _this = this;
        return new Promise(function(resolve) {
          if (_this.revokeCancelList.length > 0) {
            _this.revokeList.push(_this.data);
            _this.data = _this.revokeCancelList.pop();
            resolve(_this.data);
          }
        });
      };
      RevokeHelper.prototype.addNode = function(newData) {
        var _this = this;
        return new Promise(function(resolve) {
          _this.revokeList.push(_this.data);
          _this.data = newData;
          resolve(_this.data);
        });
      };
      return RevokeHelper;
    }();
    exports.default = RevokeHelper;
    cc._RF.pop();
  }, {} ],
  RoomBed: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3cd15zS7p1FoqGJnOp3C8cF", "RoomBed");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ExitData_1 = require("../data/ExitData");
    var ShadowOfSight_1 = require("../effect/ShadowOfSight");
    var Logic_1 = require("../logic/Logic");
    var Player_1 = require("../logic/Player");
    var Tips_1 = require("../ui/Tips");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Building_1 = require("./Building");
    var CCollider_1 = require("../collider/CCollider");
    var Dialogue_1 = require("../ui/Dialogue");
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomBed = function(_super) {
      __extends(RoomBed, _super);
      function RoomBed() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isFirst = true;
        _this.isDecorate = false;
        return _this;
      }
      RoomBed.prototype.onLoad = function() {
        var _this = this;
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
        this.tips = this.getComponentInChildren(Tips_1.default);
        this.tips.onInteract(function(isLongPress, player) {
          _this.node && _this.enterDream(player);
        });
      };
      RoomBed.prototype.init = function(dungeon, isDecorate) {
        this.dungeon = dungeon;
        this.isDecorate = isDecorate;
        this.tips.node.active = !isDecorate;
      };
      RoomBed.prototype.start = function() {
        this.node.getChildByName("sprite").getChildByName("bed").getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("avatarbed00" + Logic_1.default.playerData.AvatarData.organizationIndex);
        this.node.getChildByName("sprite").getChildByName("cover").getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("avatarcover00" + Logic_1.default.playerData.AvatarData.organizationIndex);
        for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(!this.isDecorate);
        }
      };
      RoomBed.prototype.onColliderEnter = function(other, self) {
        if (this.isDecorate || self.tag == CCollider_1.default.TAG.TIPS) return;
        var player = other.node.getComponent(Player_1.default);
        this.enterDream(player);
      };
      RoomBed.prototype.enterDream = function(player) {
        var _this = this;
        if (player && this.isFirst) {
          player.avatar.playStop();
          Dialogue_1.default.play(Dialogue_1.default.DAILY_SLEEP, function(index) {
            if (0 == index) return;
            _this.isFirst = false;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN);
            player.sleep();
            _this.scheduleOnce(function() {
              Logic_1.default.playerData.pos.equals(_this.data.defaultPos) && (Logic_1.default.playerData.pos.y = _this.data.defaultPos.y);
              AudioPlayer_1.default.play(AudioPlayer_1.default.EXIT);
              Logic_1.default.dreamCostTime = 288e5;
              Logic_1.default.loadingNextLevel(ExitData_1.default.getDreamExitDataFromReal());
            }, 1);
          });
        }
      };
      RoomBed = __decorate([ ccclass ], RoomBed);
      return RoomBed;
    }(Building_1.default);
    exports.default = RoomBed;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/ExitData": "ExitData",
    "../effect/ShadowOfSight": "ShadowOfSight",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../logic/Player": "Player",
    "../ui/Dialogue": "Dialogue",
    "../ui/Tips": "Tips",
    "../utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  RoomClock: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95f17FO9E9CGrNQqz9tayr4", "RoomClock");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomClock = function(_super) {
      __extends(RoomClock, _super);
      function RoomClock() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeLabel = null;
        _this.checkTimeDelay = 0;
        return _this;
      }
      RoomClock.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      RoomClock.prototype.update = function(dt) {
        this.isCheckTimeDelay(dt) && (this.timeLabel.string = "" + Utils_1.default.getHour(Logic_1.default.realTime));
      };
      __decorate([ property(cc.Label) ], RoomClock.prototype, "timeLabel", void 0);
      RoomClock = __decorate([ ccclass ], RoomClock);
      return RoomClock;
    }(cc.Component);
    exports.default = RoomClock;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "../utils/Utils": "Utils"
  } ],
  RoomFishtank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30f0d2Yp1xAsZ+my9YFNTdG", "RoomFishtank");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var LoadingManager_1 = require("../manager/LoadingManager");
    var NonPlayerManager_1 = require("../manager/NonPlayerManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Utils_1 = require("../utils/Utils");
    var Furniture_1 = require("./Furniture");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomFishtank = function(_super) {
      __extends(RoomFishtank, _super);
      function RoomFishtank() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.fish = null;
        _this.food = null;
        _this.layout = null;
        _this.isFeeding = false;
        _this.foodList = [];
        _this.isFirst = true;
        _this.showAudio = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      RoomFishtank.prototype.onLoad = function() {
        this.fishSprite = this.fish.getChildByName("sprite").getComponent(cc.Sprite);
        this.fishIdle();
        this.fishMove();
        LoadingManager_1.default.loadNpcSpriteAtlas(NonPlayerManager_1.default.FISH);
      };
      RoomFishtank.prototype.init = function(dungeon) {
        this.dungeon = dungeon;
      };
      RoomFishtank.prototype.zoomCamera = function(zoomIn) {
        if (this.isFirst) return;
        if (zoomIn) {
          this.showAudio = true;
          this.dungeon && this.dungeon.changeCameraTarget(this.node.getComponent(Furniture_1.default));
        } else {
          this.showAudio = false;
          this.dungeon && this.dungeon.changeCameraTarget(this.dungeon.player);
        }
        EventHelper_1.EventHelper.emit(zoomIn ? EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN : EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_OUT);
      };
      RoomFishtank.prototype.feed = function(player) {
        var _this = this;
        if (this.isFeeding) return;
        if (this.foodList.length > 50) {
          Utils_1.default.toast("\u5582\u5f97\u592a\u591a\u4e86\u554a\uff01");
          return;
        }
        player && player.sanityChange(1);
        this.isFirst = false;
        this.zoomCamera(true);
        for (var i = 0; i < 5; i++) this.initFood();
        this.isFeeding = true;
        this.unscheduleAllCallbacks();
        AudioPlayer_1.default.play(AudioPlayer_1.default.FEED_FISH);
        this.scheduleOnce(function() {
          _this.isFeeding = false;
        }, 2);
      };
      RoomFishtank.prototype.initFood = function() {
        var _this = this;
        var food = cc.instantiate(this.food);
        food.parent = this.layout;
        var width = this.layout.width;
        var height = this.layout.height;
        var startPos = cc.v3(Logic_1.default.getRandomNum(food.width / 2, width - food.width / 2 - this.fish.width * this.fish.anchorX), Logic_1.default.getRandomNum(height, 1.5 * height));
        var endPos = cc.v3(startPos.x, Logic_1.default.getRandomNum(food.height / 2 + this.fish.height * this.fish.anchorY, height / 2));
        food.position = startPos;
        var duration = Logic_1.default.getRandomNum(700, 1e3) / 1e3;
        cc.tween(food).call(function() {
          _this.scheduleOnce(function() {
            _this.foodList.push(food);
          }, duration / 2);
        }).to(duration, {
          position: endPos
        }).start();
      };
      RoomFishtank.prototype.changeFishRes = function(resName, suffix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(resName));
        this.fishSprite.spriteFrame = spriteFrame;
      };
      RoomFishtank.prototype.fishIdle = function() {
        var _this = this;
        var action = cc.tween().delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim002");
        }).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim003");
        }).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim004");
        }).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim005");
        });
        this.fishSprite.node.stopAllActions();
        cc.tween(this.fishSprite.node).repeatForever(action).start();
      };
      RoomFishtank.prototype.fishEat = function(index) {
        var _this = this;
        this.fishSprite.node.stopAllActions();
        cc.tween(this.fishSprite.node).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim010");
          if (index >= 0 && index < _this.foodList.length && _this.foodList[index].isValid) {
            _this.foodList[index].active = false;
            _this.foodList[index].destroy();
            _this.foodList.splice(index, 1);
          }
        }).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim009");
        }).delay(.2).call(function() {
          _this.fishIdle();
          _this.foodList.length > 0 ? _this.fishSearch() : _this.fishMove();
        }).start();
      };
      RoomFishtank.prototype.fishSearch = function() {
        var _this = this;
        this.bubbleSort();
        var targetPos = this.foodList[0].position.clone();
        var scaleX = targetPos.x > this.fish.position.x ? 1 : -1;
        var distance = Logic_1.default.getDistanceNoSqrt(this.fish.position, targetPos);
        cc.tween(this.fish).to(.2, {
          scaleX: scaleX
        }).to(distance / 10, {
          position: targetPos
        }).call(function() {
          _this.fishEat(0);
        }).start();
      };
      RoomFishtank.prototype.fishMove = function() {
        var _this = this;
        var width = this.layout.width;
        var height = this.layout.height;
        var randomPos = cc.v3(Logic_1.default.getRandomNum(this.fish.width / 2, width - this.fish.width / 2), Logic_1.default.getRandomNum(this.fish.height / 2, height - this.fish.height / 2));
        var scaleX = randomPos.x > this.fish.position.x ? 1 : -1;
        var distance = Logic_1.default.getDistanceNoSqrt(this.fish.position, randomPos);
        cc.tween(this.fish).to(.2, {
          scaleX: scaleX
        }).to(distance / 5, {
          position: randomPos
        }).delay(.5).call(function() {
          _this.foodList.length > 0 ? _this.fishSearch() : _this.fishMove();
        }).start();
      };
      RoomFishtank.prototype.bubbleSort = function() {
        var len = this.foodList.length;
        for (var i = 0; i < len - 1; i++) for (var j = 0; j < len - 1 - i; j++) if (Math.abs(this.foodList[j].x - this.fish.x) > Math.abs(this.foodList[j + 1].x - this.fish.x)) {
          var temp = this.foodList[j + 1];
          this.foodList[j + 1] = this.foodList[j];
          this.foodList[j] = temp;
        }
      };
      RoomFishtank.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 5) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      RoomFishtank.prototype.update = function(dt) {
        this.showAudio && this.isCheckTimeDelay(dt) && AudioPlayer_1.default.play(AudioPlayer_1.default.FISHTANK);
      };
      __decorate([ property(cc.Node) ], RoomFishtank.prototype, "fish", void 0);
      __decorate([ property(cc.Prefab) ], RoomFishtank.prototype, "food", void 0);
      __decorate([ property(cc.Node) ], RoomFishtank.prototype, "layout", void 0);
      RoomFishtank = __decorate([ ccclass ], RoomFishtank);
      return RoomFishtank;
    }(cc.Component);
    exports.default = RoomFishtank;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/LoadingManager": "LoadingManager",
    "../manager/NonPlayerManager": "NonPlayerManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils",
    "./Furniture": "Furniture"
  } ],
  RoomKitchen: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c8d0fgTekxAGY7UXDwjf5LN", "RoomKitchen");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Item_1 = require("../item/Item");
    var Dungeon_1 = require("../logic/Dungeon");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomKitchen = function(_super) {
      __extends(RoomKitchen, _super);
      function RoomKitchen() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hasFood = false;
        _this.isAniming = false;
        _this.defaultPos = cc.v3(0, 0);
        return _this;
      }
      RoomKitchen.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      RoomKitchen.prototype.init = function(indexPos) {
        this.defaultPos = indexPos;
      };
      RoomKitchen.prototype.getFood = function(player) {
        var _this = this;
        if (this.isAniming) return;
        player.cooking();
        this.isAniming = true;
        this.scheduleOnce(function() {
          _this.hasFood = true;
          _this.isAniming = false;
          Utils_1.default.toast("\u4e00\u4efd\u9999\u55b7\u55b7\u7684\u86cb\u7092\u996d\u5b8c\u6210\u4e86\u3002", false, true);
          player.dungeon && player.dungeon.addItem(Dungeon_1.default.getPosInMap(_this.defaultPos).add(cc.v3(0, -24)), Item_1.default.FRIEDRICE);
        }, 3);
      };
      RoomKitchen.prototype.AnimFinish = function() {};
      RoomKitchen.prototype.update = function(dt) {};
      RoomKitchen = __decorate([ ccclass ], RoomKitchen);
      return RoomKitchen;
    }(cc.Component);
    exports.default = RoomKitchen;
    cc._RF.pop();
  }, {
    "../item/Item": "Item",
    "../logic/Dungeon": "Dungeon",
    "../utils/Utils": "Utils"
  } ],
  RoomStool: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b3a88wYknRFJqEjNBOhztfv", "RoomStool");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomStool = function(_super) {
      __extends(RoomStool, _super);
      function RoomStool() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mosaic = null;
        _this.isOpen = false;
        return _this;
      }
      RoomStool.prototype.onLoad = function() {};
      RoomStool.prototype.init = function(dungeon) {
        this.dungeon = dungeon;
        var p = this.mosaic.convertToWorldSpaceAR(cc.v3(0, 0));
        this.mosaic.parent = this.node.parent;
        this.mosaic.position = this.mosaic.parent.convertToNodeSpaceAR(p);
        this.mosaic.zIndex = IndexZ_1.default.OVERHEAD;
        this.mosaic.opacity = 0;
      };
      RoomStool.prototype.open = function() {
        var _this = this;
        if (this.isOpen) return;
        this.isOpen = true;
        this.mosaic.opacity = 255;
        this.unscheduleAllCallbacks();
        this.dungeon && this.dungeon.player.toilet();
        this.scheduleOnce(function() {
          _this.mosaic.opacity = 0;
          AudioPlayer_1.default.play(AudioPlayer_1.default.CLOSESTOOL);
        }, 5);
        this.scheduleOnce(function() {
          _this.isOpen = false;
        }, 10);
      };
      __decorate([ property(cc.Node) ], RoomStool.prototype, "mosaic", void 0);
      RoomStool = __decorate([ ccclass ], RoomStool);
      return RoomStool;
    }(cc.Component);
    exports.default = RoomStool;
    cc._RF.pop();
  }, {
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ"
  } ],
  RoomTrashCan: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68b3es2qrxMmaO3Lx7yWbz3", "RoomTrashCan");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var NextStep_1 = require("../utils/NextStep");
    var Random4Save_1 = require("../utils/Random4Save");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomTrashCan = function(_super) {
      __extends(RoomTrashCan, _super);
      function RoomTrashCan() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.trash = null;
        _this.next = new NextStep_1.default();
        _this.rand = new Random4Save_1.default(0);
        _this.checkTimeDelay = 0;
        return _this;
      }
      RoomTrashCan.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.trash.active = false;
      };
      RoomTrashCan.prototype.getTrash = function() {
        var _this = this;
        this.next.next(function() {
          _this.trash.active = true;
          _this.anim.play("RoomTrashOut");
          AudioPlayer_1.default.play(AudioPlayer_1.default.TRASH);
          _this.scheduleOnce(function() {
            _this.rand.rand() > .5 ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              res: Logic_1.default.getRandomTrashType(_this.rand)
            }) : _this.rand.rand() > .9 ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_SETEQUIPMENT, {
              res: EquipmentManager_1.default.WEAPON_BROKEN_GLASS
            }) : _this.rand.rand() > .95 && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_SETEQUIPMENT, {
              res: EquipmentManager_1.default.WEAPON_WINE_BOTTLE
            });
            _this.trash.active = false;
          }, 1);
        }, 2);
      };
      RoomTrashCan.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      RoomTrashCan.prototype.update = function(dt) {};
      __decorate([ property(cc.Node) ], RoomTrashCan.prototype, "trash", void 0);
      RoomTrashCan = __decorate([ ccclass ], RoomTrashCan);
      return RoomTrashCan;
    }(cc.Component);
    exports.default = RoomTrashCan;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/EquipmentManager": "EquipmentManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/NextStep": "NextStep",
    "../utils/Random4Save": "Random4Save"
  } ],
  RoomTv: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c83fKZL65BO7yZt9toJ0M8", "RoomTv");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ShadowOfSight_1 = require("../effect/ShadowOfSight");
    var Logic_1 = require("../logic/Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Random_1 = require("../utils/Random");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomTv = function(_super) {
      __extends(RoomTv, _super);
      function RoomTv() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.screen = null;
        _this.isOpen = false;
        _this.channel = 0;
        return _this;
      }
      RoomTv.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
      };
      RoomTv.prototype.start = function() {
        for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(false);
        }
      };
      RoomTv.prototype.open = function(player) {
        var _this = this;
        this.isOpen = true;
        if (this.lights) for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(true);
        }
        this.unscheduleAllCallbacks();
        this.anim.stop();
        this.anim.play("RoomTvOpen");
        this.scheduleOnce(function() {
          _this.channel = Logic_1.default.getRandomNum(0, 5);
          _this.switchChannel(player);
        }, .5);
      };
      RoomTv.prototype.switchChannel = function(player) {
        var _this = this;
        this.unscheduleAllCallbacks();
        this.anim.stop();
        AudioPlayer_1.default.stopAllEffect();
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.channel++;
        this.channel > 5 && (this.channel = 0);
        switch (this.channel) {
         case 0:
          this.anim.play("RoomTvOpenIdle");
          AudioPlayer_1.default.play(AudioPlayer_1.default.TVCOLOR, false, true);
          break;

         case 1:
          this.anim.play("RoomTvNoSignalIdle");
          AudioPlayer_1.default.play(AudioPlayer_1.default.TVWHITE, false, true);
          break;

         case 2:
          this.screen.spriteFrame = Logic_1.default.spriteFrameRes("roomtvscreen4");
          break;

         case 3:
          this.screen.spriteFrame = Logic_1.default.spriteFrameRes("roomtvscreen5");
          break;

         case 4:
          this.screen.spriteFrame = Logic_1.default.spriteFrameRes("roomtvscreen6");
          break;

         case 5:
          this.screen.spriteFrame = Logic_1.default.spriteFrameRes("roomtvscreen7");
        }
        this.channel > 1 && this.schedule(function() {
          Random_1.default.rand() < .3 && AudioPlayer_1.default.play(AudioPlayer_1.default.VOICE);
        }, .05, cc.macro.REPEAT_FOREVER);
        this.schedule(function() {
          if (_this.isOpen && _this.channel > 1) {
            Utils_1.default.toast("\u770b\u4e86\u4e00\u4f1a\u513f\u7535\u89c6,\u611f\u89c9\u5fc3\u60c5\u53d8\u597d\u4e86");
            player && player.sanityChange(3);
          }
        }, 10, cc.macro.REPEAT_FOREVER, 5);
      };
      RoomTv.prototype.close = function() {
        var _this = this;
        if (!this.isOpen) return;
        this.isOpen = false;
        if (this.lights) for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(false);
        }
        this.unscheduleAllCallbacks();
        this.anim.stop();
        this.anim.play("RoomTvClose");
        AudioPlayer_1.default.stopAllEffect();
        this.scheduleOnce(function() {
          _this.anim.play("RoomTvClosedIdle");
        }, .5);
      };
      RoomTv.prototype.interact = function(player) {
        this.isOpen ? this.switchChannel(player) : this.open(player);
      };
      __decorate([ property(cc.Sprite) ], RoomTv.prototype, "screen", void 0);
      RoomTv = __decorate([ ccclass ], RoomTv);
      return RoomTv;
    }(cc.Component);
    exports.default = RoomTv;
    cc._RF.pop();
  }, {
    "../effect/ShadowOfSight": "ShadowOfSight",
    "../logic/Logic": "Logic",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Random": "Random",
    "../utils/Utils": "Utils"
  } ],
  RoomType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "877a0zZc/9EjpFiULm+otfY", "RoomType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RoomType = function() {
      function RoomType(id, name) {
        this.id = 0;
        this.name = "";
        this.id = id;
        this.name = name;
      }
      Object.defineProperty(RoomType.prototype, "ID", {
        get: function() {
          return this.id;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RoomType.prototype, "NAME", {
        get: function() {
          return this.name;
        },
        enumerable: false,
        configurable: true
      });
      RoomType.prototype.valueCopy = function(data) {
        this.id = data.id;
        this.name = data.name;
      };
      RoomType.getIdByName = function(name) {
        name || (name = "Z");
        return name.charCodeAt(0) - "A".charCodeAt(0);
      };
      RoomType.getNameById = function(id) {
        return String.fromCharCode("A".charCodeAt(0) + id);
      };
      RoomType.getTypeByName = function(name) {
        return new RoomType(RoomType.getIdByName(name), name);
      };
      RoomType.getTypeById = function(id) {
        return new RoomType(id, RoomType.getNameById(id));
      };
      RoomType.isDecorateRoomType = function(roomType) {
        return RoomType.START_ROOM.isNotEqual(roomType) && RoomType.TEST_ROOM.isNotEqual(roomType) && RoomType.PREPARE_ROOM.isNotEqual(roomType);
      };
      RoomType.isMonsterGenerateRoom = function(roomType) {
        return RoomType.BOSS_ROOM.isEqual(roomType) || RoomType.DANGER_ROOM.isEqual(roomType) || RoomType.INSANE_ROOM.isEqual(roomType) || RoomType.KEY_ROOM.isEqual(roomType) || RoomType.LOOT_ROOM.isEqual(roomType) || RoomType.NORMAL_ROOM.isEqual(roomType) || RoomType.END_ROOM.isEqual(roomType) || RoomType.VERTICAL_ROOM.isEqual(roomType) || RoomType.HORIZONTAL_ROOM.isEqual(roomType);
      };
      RoomType.prototype.isEqual = function(roomType) {
        return roomType.ID == this.ID;
      };
      RoomType.prototype.isNotEqual = function(roomType) {
        return roomType.ID != this.ID;
      };
      RoomType.ELITE_ROOM = new RoomType(0, "A");
      RoomType.BOSS_ROOM = new RoomType(1, "B");
      RoomType.CROSS_ROOM = new RoomType(2, "C");
      RoomType.DANGER_ROOM = new RoomType(3, "D");
      RoomType.END_ROOM = new RoomType(4, "E");
      RoomType.FINAL_ROOM = new RoomType(5, "F");
      RoomType.G_ROOM = new RoomType(6, "G");
      RoomType.HORIZONTAL_ROOM = new RoomType(7, "H");
      RoomType.INSANE_ROOM = new RoomType(8, "I");
      RoomType.TUTORIAL_ROOM = new RoomType(9, "J");
      RoomType.KEY_ROOM = new RoomType(10, "K");
      RoomType.LOOT_ROOM = new RoomType(11, "L");
      RoomType.MERCHANT_ROOM = new RoomType(12, "M");
      RoomType.NORMAL_ROOM = new RoomType(13, "N");
      RoomType.EMPTY_ROOM = new RoomType(14, "O");
      RoomType.PREPARE_ROOM = new RoomType(15, "P");
      RoomType.Q_ROOM = new RoomType(16, "Q");
      RoomType.REST_ROOM = new RoomType(17, "R");
      RoomType.START_ROOM = new RoomType(18, "S");
      RoomType.TEST_ROOM = new RoomType(19, "T");
      RoomType.U_ROOM = new RoomType(20, "U");
      RoomType.VERTICAL_ROOM = new RoomType(21, "V");
      RoomType.WATER_ROOM = new RoomType(22, "W");
      RoomType.X_ROOM = new RoomType(23, "X");
      RoomType.HIDDEN_ROOM = new RoomType(24, "Y");
      RoomType.Z_ROOM = new RoomType(25, "Z");
      return RoomType;
    }();
    exports.default = RoomType;
    cc._RF.pop();
  }, {} ],
  RoomWaterDispenser: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "636caPAwH1EkaM8RamKmvm5", "RoomWaterDispenser");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemData_1 = require("../data/ItemData");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomWaterDispenser = function(_super) {
      __extends(RoomWaterDispenser, _super);
      function RoomWaterDispenser() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cup = null;
        _this.hasWater = false;
        _this.isAniming = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      RoomWaterDispenser.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      RoomWaterDispenser.prototype.getWater = function(player) {
        if (this.isAniming) return;
        if (this.hasWater) {
          this.cup.opacity = 0;
          this.hasWater = false;
          var d = new ItemData_1.default();
          d.liquidSatiety = 15;
          player.canEatOrDrink(d) && player.drink();
        } else {
          this.isAniming = true;
          this.anim.play("RoomWaterDispenser");
          AudioPlayer_1.default.play(AudioPlayer_1.default.WATERDISPENSER);
        }
      };
      RoomWaterDispenser.prototype.AnimFinish = function() {
        this.hasWater = true;
        this.isAniming = false;
      };
      RoomWaterDispenser.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 5) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      RoomWaterDispenser.prototype.update = function(dt) {};
      __decorate([ property(cc.Node) ], RoomWaterDispenser.prototype, "cup", void 0);
      RoomWaterDispenser = __decorate([ ccclass ], RoomWaterDispenser);
      return RoomWaterDispenser;
    }(cc.Component);
    exports.default = RoomWaterDispenser;
    cc._RF.pop();
  }, {
    "../data/ItemData": "ItemData",
    "../utils/AudioPlayer": "AudioPlayer"
  } ],
  SatietyView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0209bBn/xJKQ4t4J010Y1Yq", "SatietyView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SatietyView = function(_super) {
      __extends(SatietyView, _super);
      function SatietyView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sanityLabel = null;
        _this.solid = null;
        _this.solid1 = null;
        _this.liquid = null;
        _this.liquid1 = null;
        _this.tips = null;
        _this.solidlabel = null;
        _this.liquidlabel = null;
        _this.solidlabel1 = null;
        _this.liquidlabel1 = null;
        _this.sanitybar = null;
        _this.sanityPercentLabel = null;
        return _this;
      }
      SatietyView_1 = SatietyView;
      SatietyView.prototype.onLoad = function() {
        var _this = this;
        this.tips.active = false;
        this.node.on(cc.Node.EventType.TOUCH_START, function() {
          _this.tips.active = true;
        });
        this.node.on(cc.Node.EventType.TOUCH_END, function() {
          _this.tips.active = false;
        });
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          _this.tips.active = false;
        });
      };
      SatietyView.prototype.start = function() {};
      SatietyView.prototype.refreshPercent = function(sanity, solid, poo, liquid, pee) {
        if (!this.node) return;
        this.node.stopAllActions();
        cc.tween(this.solid).to(.5, {
          height: solid
        }).start();
        cc.tween(this.solid1).to(.5, {
          height: poo
        }).start();
        cc.tween(this.liquid).to(.5, {
          height: liquid
        }).start();
        cc.tween(this.liquid1).to(.5, {
          height: pee
        }).start();
        this.sanityLabel.string = this.getStr(sanity, SatietyView_1.SANITYTIPS, false);
        this.solidlabel.string = this.getStr(solid, SatietyView_1.SOLIDTIPS, false);
        this.liquidlabel.string = this.getStr(liquid, SatietyView_1.LIQUIDTIPS, false);
        this.solidlabel1.string = this.getStr(100 - poo, SatietyView_1.POOTIPS, true);
        this.liquidlabel1.string = this.getStr(100 - pee, SatietyView_1.PEETIPS, true);
        this.sanityLabel.node.color = this.getColor(sanity, false);
        this.solidlabel.node.color = this.getColor(solid, false);
        this.liquidlabel.node.color = this.getColor(liquid, false);
        this.solidlabel1.node.color = this.getColor(poo, true);
        this.liquidlabel1.node.color = this.getColor(pee, true);
        this.sanitybar.progress = sanity / 100;
        this.sanityPercentLabel.string = sanity.toFixed(2) + "%";
      };
      SatietyView.prototype.getStr = function(percent, arr, reverse) {
        var str = "";
        str = 0 == percent ? arr[0] : percent < 20 ? arr[1] : percent < 40 ? arr[2] : percent < 60 ? arr[3] : percent < 80 ? arr[4] : arr[5];
        var p = percent;
        reverse && (p = 100 - percent);
        return str + "(" + p.toFixed() + "/100)";
      };
      SatietyView.prototype.getColor = function(percent, reverse) {
        var colors = [ "#DC143C", "#FFC0CB", "#FFFF00", "#ADFF2F", "#90EE90" ];
        reverse && (colors = [ "#90EE90", "#ADFF2F", "#FFFF00", "#FFC0CB", "#DC143C" ]);
        return percent < 20 ? cc.color().fromHEX(colors[0]) : percent < 40 ? cc.color().fromHEX(colors[1]) : percent < 60 ? cc.color().fromHEX(colors[2]) : percent < 80 ? cc.color().fromHEX(colors[3]) : cc.color().fromHEX(colors[4]);
      };
      var SatietyView_1;
      SatietyView.SANITYTIPS = [ "\u7cbe\u795e\u5d29\u6e83", "\u7cbe\u795e\u5931\u5e38", "\u7cbe\u795e\u840e\u9761", "\u7cbe\u795e\u5e73\u7a33", "\u7cbe\u795e\u4ea2\u594b", "\u7cbe\u795e\u7115\u53d1" ];
      SatietyView.SOLIDTIPS = [ "\u51e0\u4e4e\u997f\u6b7b", "\u9965\u80a0\u8f98\u8f98", "\u7565\u5fae\u5c0f\u98df", "\u83dc\u8fc7\u4e94\u5473", "\u9152\u8db3\u996d\u9971", "\u5feb\u6491\u7206\u4e86" ];
      SatietyView.LIQUIDTIPS = [ "\u5feb\u8981\u6e34\u6b7b", "\u5589\u5499\u5192\u70df", "\u53e3\u5e72\u820c\u71e5", "\u9152\u8fc7\u4e09\u5de1", "\u975e\u5e38\u6ee1\u8db3", "\u5feb\u6491\u7206\u4e86" ];
      SatietyView.POOTIPS = [ "\u7ef7\u4e0d\u4f4f\u4e86", "\u5bf8\u6b65\u96be\u884c", "\u4e0d\u582a\u91cd\u8d1f", "\u4eba\u6709\u4e09\u6025", "\u5982\u91ca\u91cd\u8d1f", "\u8eab\u8f7b\u5982\u71d5" ];
      SatietyView.PEETIPS = [ "\u7ef7\u4e0d\u4f4f\u4e86", "\u72c2\u6d9b\u6012\u543c", "\u6ce2\u6d9b\u6c79\u6d8c", "\u6d93\u6d93\u7ec6\u6d41", "\u6cdb\u8d77\u5fae\u6ce2", "\u98ce\u5e73\u6d6a\u9759" ];
      __decorate([ property(cc.Label) ], SatietyView.prototype, "sanityLabel", void 0);
      __decorate([ property(cc.Node) ], SatietyView.prototype, "solid", void 0);
      __decorate([ property(cc.Node) ], SatietyView.prototype, "solid1", void 0);
      __decorate([ property(cc.Node) ], SatietyView.prototype, "liquid", void 0);
      __decorate([ property(cc.Node) ], SatietyView.prototype, "liquid1", void 0);
      __decorate([ property(cc.Node) ], SatietyView.prototype, "tips", void 0);
      __decorate([ property(cc.Label) ], SatietyView.prototype, "solidlabel", void 0);
      __decorate([ property(cc.Label) ], SatietyView.prototype, "liquidlabel", void 0);
      __decorate([ property(cc.Label) ], SatietyView.prototype, "solidlabel1", void 0);
      __decorate([ property(cc.Label) ], SatietyView.prototype, "liquidlabel1", void 0);
      __decorate([ property(cc.ProgressBar) ], SatietyView.prototype, "sanitybar", void 0);
      __decorate([ property(cc.Label) ], SatietyView.prototype, "sanityPercentLabel", void 0);
      SatietyView = SatietyView_1 = __decorate([ ccclass ], SatietyView);
      return SatietyView;
    }(cc.Component);
    exports.default = SatietyView;
    cc._RF.pop();
  }, {} ],
  SavePointData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2940aORMiBLQ5k/LNcPv2bl", "SavePointData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var SavePointData = function() {
      function SavePointData() {
        this.x = 16;
        this.y = 16;
        this.chapter = 0;
        this.level = 0;
      }
      SavePointData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        this.x = data.x || 0 == data.x ? data.x : 16;
        this.y = data.y || 0 == data.y ? data.y : 16;
      };
      SavePointData.prototype.clone = function() {
        var data = new SavePointData();
        data.valueCopy(this);
        return data;
      };
      SavePointData.chapter01 = function() {
        var data = new SavePointData();
        data.chapter = 1;
        data.level = 0;
        data.x = 17;
        data.y = 15;
        return data;
      };
      SavePointData.chapter02 = function() {
        var data = new SavePointData();
        data.chapter = 2;
        data.level = 0;
        data.x = 27;
        data.y = 51;
        return data;
      };
      SavePointData.chapter03 = function() {
        var data = new SavePointData();
        data.chapter = 3;
        data.level = 0;
        data.x = 16;
        data.y = 28;
        return data;
      };
      SavePointData.chapter04 = function() {
        var data = new SavePointData();
        data.chapter = 4;
        data.level = 0;
        data.x = 38;
        data.y = 71;
        return data;
      };
      return SavePointData;
    }();
    exports.default = SavePointData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  SavePoint: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b080bpXecxCVaM8ctiNSXZl", "SavePoint");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ExitData_1 = require("../data/ExitData");
    var ShadowOfSight_1 = require("../effect/ShadowOfSight");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var Dialogue_1 = require("../ui/Dialogue");
    var Tips_1 = require("../ui/Tips");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SavePoint = function(_super) {
      __extends(SavePoint, _super);
      function SavePoint() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      SavePoint.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
        this.tips = this.getComponentInChildren(Tips_1.default);
        this.tips.onInteract(function(isLongPress, player) {
          _this.node && Dialogue_1.default.play(Dialogue_1.default.DAILY_SAVE_POINT, function(index) {
            if (0 == index) ; else if (1 == index) {
              Logic_1.default.savePonit(_this.data.defaultPos);
              Logic_1.default.resetData();
              EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_DISAPPEAR);
              AudioPlayer_1.default.play(AudioPlayer_1.default.EXIT);
              _this.scheduleOnce(function() {
                EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN, {});
                Logic_1.default.loadingNextLevel(ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level));
              }, 1);
            } else 2 == index ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_SHOW, {
              isCast: true
            }) : EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_METAL_TALENT_SHOW);
          });
        });
      };
      SavePoint.prototype.start = function() {
        for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(false);
        }
      };
      SavePoint.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .05) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      SavePoint.prototype.update = function(dt) {
        if (this.lights.length > 0 && this.lights[0].showShadow && this.isCheckTimeDelay(dt)) {
          var r = this.lights[0].radius;
          r = Logic_1.default.lerp(r, 300, 5 * dt);
          this.lights[0].radius = r;
        }
      };
      SavePoint.prototype.open = function() {
        var _this = this;
        if (this.isOpen) return;
        Logic_1.default.savePonit(this.data.defaultPos);
        this.isOpen = true;
        this.scheduleOnce(function() {
          _this.anim.play("SavePointActive");
          _this.scheduleOnce(function() {
            for (var _i = 0, _a = _this.lights; _i < _a.length; _i++) {
              var light = _a[_i];
              light.radius = 0;
              light.updateRender(true);
            }
            _this.anim.play("SavePointIdleActive");
            _this.tips.node.active = true;
          }, 1);
        }, 1);
      };
      SavePoint = __decorate([ ccclass ], SavePoint);
      return SavePoint;
    }(Building_1.default);
    exports.default = SavePoint;
    cc._RF.pop();
  }, {
    "../data/ExitData": "ExitData",
    "../effect/ShadowOfSight": "ShadowOfSight",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../ui/Dialogue": "Dialogue",
    "../ui/Tips": "Tips",
    "../utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  SaveSlotDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce28eDEuRJIaIaCMOwMCI+b", "SaveSlotDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LocalStorage_1 = require("../../utils/LocalStorage");
    var BaseDialog_1 = require("./BaseDialog");
    var SaveSlotItem_1 = require("../SaveSlotItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SaveSlotDialog = function(_super) {
      __extends(SaveSlotDialog, _super);
      function SaveSlotDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.item = null;
        _this.content = null;
        _this.editToggle = null;
        _this.baseBg = null;
        _this.itemList = [];
        _this.indexs = [];
        _this.isEdit = false;
        return _this;
      }
      SaveSlotDialog.prototype.onLoad = function() {
        var _this = this;
        this.baseBg.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.dismiss();
        });
      };
      SaveSlotDialog.prototype.onItemSelectListener = function(callback) {
        this.callback = callback;
      };
      SaveSlotDialog.prototype.onItemClick = function(item) {
        this.callback && this.callback(item.index);
      };
      SaveSlotDialog.prototype.init = function() {
        this.content.removeAllChildren();
        var arr = [ 0, 1, 2 ];
        this.indexs = [];
        this.itemList = [];
        for (var i = arr.length - 1; i >= 0; i--) if (i == LocalStorage_1.default.getLastSaveSlotKey()) {
          this.indexs.push(arr[i]);
          arr.splice(i, 1);
          break;
        }
        this.indexs = this.indexs.concat(arr);
        for (var i = 0; i < this.indexs.length; i++) this.itemList.push(this.getItem(this.indexs[i]));
        this.editToggle.isChecked = false;
      };
      SaveSlotDialog.prototype.getItem = function(index) {
        var prefab = cc.instantiate(this.item);
        this.content.addChild(prefab);
        var item = prefab.getComponent(SaveSlotItem_1.default);
        item.init(index, this);
        return item;
      };
      SaveSlotDialog.prototype.changeEditMode = function() {
        for (var i = 0; i < this.itemList.length; i++) this.itemList[i].updateUi(this.indexs[i], this.editToggle.isChecked);
      };
      SaveSlotDialog.prototype.start = function() {};
      SaveSlotDialog.prototype.show = function() {
        _super.prototype.show.call(this);
        this.init();
      };
      __decorate([ property(cc.Prefab) ], SaveSlotDialog.prototype, "item", void 0);
      __decorate([ property(cc.Node) ], SaveSlotDialog.prototype, "content", void 0);
      __decorate([ property(cc.Toggle) ], SaveSlotDialog.prototype, "editToggle", void 0);
      __decorate([ property(cc.Node) ], SaveSlotDialog.prototype, "baseBg", void 0);
      SaveSlotDialog = __decorate([ ccclass ], SaveSlotDialog);
      return SaveSlotDialog;
    }(BaseDialog_1.default);
    exports.default = SaveSlotDialog;
    cc._RF.pop();
  }, {
    "../../utils/LocalStorage": "LocalStorage",
    "../SaveSlotItem": "SaveSlotItem",
    "./BaseDialog": "BaseDialog"
  } ],
  SaveSlotItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "75efa6dn79Jx5rA9GyrsXIb", "SaveSlotItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AvatarData_1 = require("../data/AvatarData");
    var PlayerData_1 = require("../data/PlayerData");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var ProfileManager_1 = require("../manager/ProfileManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SaveSlotItem = function(_super) {
      __extends(SaveSlotItem, _super);
      function SaveSlotItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.sprite = null;
        _this.closeButton = null;
        _this.deleteCover = null;
        _this.index = 0;
        _this.dialog = null;
        _this.hasSaveData = false;
        _this.isPressing = false;
        _this.chapter00 = null;
        _this.chapter01 = null;
        _this.chapter02 = null;
        _this.chapter03 = null;
        _this.chapter04 = null;
        _this.chapter05 = null;
        _this.chapter099 = null;
        _this.empty = null;
        return _this;
      }
      SaveSlotItem_1 = SaveSlotItem;
      SaveSlotItem.prototype.onLoad = function() {};
      SaveSlotItem.prototype.init = function(index, dialog) {
        var _this = this;
        this.index = index;
        this.dialog = dialog;
        this.scheduleOnce(function() {
          _this.updateUi(_this.index, false);
        }, .1);
      };
      SaveSlotItem.prototype.updateUi = function(index, isEdit) {
        var _this = this;
        var data = ProfileManager_1.default.getSaveData(index);
        data && data.playerDatas && data.lastPlayerId.length > 0 ? this.hasSaveData = true : this.hasSaveData = false;
        if (this.hasSaveData) {
          var playerData = new PlayerData_1.default();
          playerData.valueCopy(data.playerDatas[data.lastPlayerId]);
          this.label.string = index + " " + playerData.AvatarData.professionData.nameCn + " " + AvatarData_1.default.ORGANIZATION[playerData.AvatarData.organizationIndex] + " Lv." + Logic_1.default.getOilGoldData(data.oilGolds).level + "\n" + Utils_1.default.getFullFormatTime(data.lastSaveTime);
          this.sprite.spriteFrame = this.getIcon(data.chapterIndex);
        } else {
          this.label.string = "\u7a7a" + index;
          this.sprite.spriteFrame = this.empty;
        }
        this.node.opacity = this.hasSaveData ? 255 : 128;
        this.closeButton.active = isEdit && this.hasSaveData;
        this.isPressing = false;
        this.closeButton.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.isPressing = true;
        });
        this.closeButton.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.isPressing = false;
        });
        this.closeButton.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.isPressing = false;
        });
      };
      SaveSlotItem.prototype.getIcon = function(chapterIndex) {
        switch (chapterIndex) {
         case Logic_1.default.CHAPTER00:
          return this.chapter00;

         case Logic_1.default.CHAPTER01:
          return this.chapter01;

         case Logic_1.default.CHAPTER02:
          return this.chapter02;

         case Logic_1.default.CHAPTER03:
          return this.chapter03;

         case Logic_1.default.CHAPTER04:
          return this.chapter04;

         case Logic_1.default.CHAPTER05:
          return this.chapter05;

         case Logic_1.default.CHAPTER099:
          return this.chapter099;
        }
        return this.empty;
      };
      SaveSlotItem.prototype.picked = function() {
        if (this.dialog) {
          this.dialog.onItemClick(this);
          this.dialog.dismiss();
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        }
      };
      SaveSlotItem.prototype.start = function() {};
      SaveSlotItem.prototype.update = function(dt) {
        if (this.hasSaveData) {
          this.deleteCover.width = Logic_1.default.lerp(this.deleteCover.width, this.isPressing ? SaveSlotItem_1.PRESSINGWIDTH : 0, 3 * dt);
          if (this.isPressing && this.deleteCover.width > SaveSlotItem_1.PRESSINGWIDTH - 5) {
            ProfileManager_1.default.clearData(this.index);
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DELETE_SAVE_SLOT);
            this.updateUi(this.index, false);
          }
        } else this.deleteCover.width = 0;
      };
      var SaveSlotItem_1;
      SaveSlotItem.PRESSINGWIDTH = 300;
      __decorate([ property(cc.Label) ], SaveSlotItem.prototype, "label", void 0);
      __decorate([ property(cc.Sprite) ], SaveSlotItem.prototype, "sprite", void 0);
      __decorate([ property(cc.Node) ], SaveSlotItem.prototype, "closeButton", void 0);
      __decorate([ property(cc.Node) ], SaveSlotItem.prototype, "deleteCover", void 0);
      __decorate([ property(cc.SpriteFrame) ], SaveSlotItem.prototype, "chapter00", void 0);
      __decorate([ property(cc.SpriteFrame) ], SaveSlotItem.prototype, "chapter01", void 0);
      __decorate([ property(cc.SpriteFrame) ], SaveSlotItem.prototype, "chapter02", void 0);
      __decorate([ property(cc.SpriteFrame) ], SaveSlotItem.prototype, "chapter03", void 0);
      __decorate([ property(cc.SpriteFrame) ], SaveSlotItem.prototype, "chapter04", void 0);
      __decorate([ property(cc.SpriteFrame) ], SaveSlotItem.prototype, "chapter05", void 0);
      __decorate([ property(cc.SpriteFrame) ], SaveSlotItem.prototype, "chapter099", void 0);
      __decorate([ property(cc.SpriteFrame) ], SaveSlotItem.prototype, "empty", void 0);
      SaveSlotItem = SaveSlotItem_1 = __decorate([ ccclass ], SaveSlotItem);
      return SaveSlotItem;
    }(cc.Component);
    exports.default = SaveSlotItem;
    cc._RF.pop();
  }, {
    "../data/AvatarData": "AvatarData",
    "../data/PlayerData": "PlayerData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/ProfileManager": "ProfileManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/Utils": "Utils"
  } ],
  Saw: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4758hHN8ZNFpX/Yga2qrRo", "Saw");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var DamageData_1 = require("../data/DamageData");
    var Building_1 = require("./Building");
    var StatusManager_1 = require("../manager/StatusManager");
    var Random_1 = require("../utils/Random");
    var FromData_1 = require("../data/FromData");
    var IndexZ_1 = require("../utils/IndexZ");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Saw = function(_super) {
      __extends(Saw, _super);
      function Saw() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.normalSpriteFrame = null;
        _this.bloodSpriteFrame = null;
        _this.pos = cc.v3(0, 0);
        return _this;
      }
      Saw.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.sprite.spriteFrame = this.normalSpriteFrame;
      };
      Saw.prototype.start = function() {};
      Saw.prototype.setPos = function(pos) {
        this.pos = pos;
        var p = Dungeon_1.default.getPosInMap(pos);
        this.entity.Transform.position = cc.v3(p.x, p.y);
        this.node.position = this.entity.Transform.position.clone();
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      Saw.prototype.onColliderEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target) {
          var from = FromData_1.default.getClone(this.actorName(), "saw002", this.node.position);
          target.takeDamage(new DamageData_1.default(1), from);
          Random_1.default.rand() < .1 && target.addStatus(StatusManager_1.default.BLEEDING, from);
          this.sprite.spriteFrame = this.bloodSpriteFrame;
        }
      };
      Saw.prototype.update = function(dt) {
        for (var _i = 0, _a = this.ccolliders; _i < _a.length; _i++) {
          var c = _a[_i];
          c.updateChildOffset();
        }
      };
      Saw.prototype.actorName = function() {
        return "\u952f\u9f7f\u8f6e";
      };
      __decorate([ property(cc.SpriteFrame) ], Saw.prototype, "normalSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], Saw.prototype, "bloodSpriteFrame", void 0);
      Saw = __decorate([ ccclass ], Saw);
      return Saw;
    }(Building_1.default);
    exports.default = Saw;
    cc._RF.pop();
  }, {
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Dungeon": "Dungeon",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/IndexZ": "IndexZ",
    "../utils/Random": "Random",
    "./Building": "Building"
  } ],
  Seeker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d901Qk1AZCcpW5rnbx33wB", "Seeker");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Seeker = function(_super) {
      __extends(Seeker, _super);
      function Seeker() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isMoving = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Seeker.prototype.onLoad = function() {
        var _this = this;
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.node.zIndex = 1e3;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_MOVE, function(detail) {
          _this.move(detail.dir, detail.pos, detail.dt);
        });
      };
      Seeker.prototype.move = function(dir, pos, dt) {
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var mul = absh > absv ? absh : absv;
        mul = 0 == mul ? 1 : mul;
        var movement = cc.v2(h, v);
        var speed = 5;
        speed < 0 && (speed = 0);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
      };
      Seeker.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      Seeker.prototype.update = function(dt) {
        this.isCheckTimeDelay(dt) && this.isMoving && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CHUNK_LOAD, {
          pos: this.node.position.clone()
        });
      };
      Seeker = __decorate([ ccclass ], Seeker);
      return Seeker;
    }(cc.Component);
    exports.default = Seeker;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper"
  } ],
  SettingsData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4394cfk4yxEG7e7PB4NWtRp", "SettingsData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var SettingsData = function() {
      function SettingsData() {
        this.showSoftShadow = false;
        this.showGamepad = false;
        this.showEquipDialog = false;
        this.lowPower = false;
        this.isFlashLightOpen = false;
        this.buttonPosAttack = SettingsData.BPA.clone();
        this.buttonPosRemote = SettingsData.BPR.clone();
        this.buttonPosJump = SettingsData.BPJ.clone();
        this.buttonPosDash = SettingsData.BPD.clone();
        this.buttonPosInteract = SettingsData.BPI.clone();
        this.buttonPosSkill1 = SettingsData.BPS1.clone();
        this.buttonPosSkill2 = SettingsData.BPS2.clone();
      }
      SettingsData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data, true);
        this.copyPos(this.buttonPosAttack, data.buttonPosAttack, SettingsData.BPA);
        this.copyPos(this.buttonPosRemote, data.buttonPosRemote, SettingsData.BPR);
        this.copyPos(this.buttonPosDash, data.buttonPosDash, SettingsData.BPD);
        this.copyPos(this.buttonPosJump, data.buttonPosJump, SettingsData.BPJ);
        this.copyPos(this.buttonPosInteract, data.buttonPosInteract, SettingsData.BPI);
        this.copyPos(this.buttonPosSkill1, data.buttonPosSkill1, SettingsData.BPS1);
        this.copyPos(this.buttonPosSkill2, data.buttonPosSkill2, SettingsData.BPS2);
      };
      SettingsData.prototype.copyPos = function(selfPos, otherPos, defaultPos) {
        selfPos = otherPos ? cc.v2(otherPos.x, otherPos.y) : defaultPos.clone();
      };
      SettingsData.prototype.clone = function() {
        var e = new SettingsData();
        e.valueCopy(this);
        return e;
      };
      SettingsData.BPA = cc.v2(-24, -8);
      SettingsData.BPR = cc.v2(-96, -96);
      SettingsData.BPJ = cc.v2(98, -8);
      SettingsData.BPD = cc.v2(40, -96);
      SettingsData.BPI = cc.v2(30, 80);
      SettingsData.BPS1 = cc.v2(-120, 16);
      SettingsData.BPS2 = cc.v2(-200, -60);
      return SettingsData;
    }();
    exports.default = SettingsData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  SettingsDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "201faQ17bhLsoyeY0sNn6x5", "SettingsDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../../logic/EventHelper");
    var Logic_1 = require("../../logic/Logic");
    var AudioPlayer_1 = require("../../utils/AudioPlayer");
    var LocalStorage_1 = require("../../utils/LocalStorage");
    var BaseDialog_1 = require("./BaseDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SettingsDialog = function(_super) {
      __extends(SettingsDialog, _super);
      function SettingsDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.tgShadow = null;
        _this.tgGamepad = null;
        _this.tgFps = null;
        _this.pcInfo = null;
        return _this;
      }
      SettingsDialog.prototype.onLoad = function() {};
      SettingsDialog.prototype.start = function() {};
      SettingsDialog.prototype.show = function() {
        _super.prototype.show.call(this);
        this.pcInfo.active = !Logic_1.default.settings.showGamepad;
        this.initToggle(this.tgShadow, Logic_1.default.settings.showSoftShadow);
        this.initToggle(this.tgGamepad, Logic_1.default.settings.showGamepad);
        this.initToggle(this.tgFps, Logic_1.default.settings.lowPower);
      };
      SettingsDialog.prototype.initToggle = function(toggle, isOpen) {
        isOpen ? toggle.check() : toggle.uncheck();
      };
      SettingsDialog.prototype.toggleShadow = function(toggle, customEventData) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.settings.showSoftShadow = toggle.isChecked;
        LocalStorage_1.default.saveSystemSettings(Logic_1.default.settings);
      };
      SettingsDialog.prototype.toggleGamepad = function(toggle, customEventData) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.settings.showGamepad = toggle.isChecked;
        LocalStorage_1.default.saveSystemSettings(Logic_1.default.settings);
        this.pcInfo.active = !Logic_1.default.settings.showGamepad;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_UPDATE_GAMEPAD);
      };
      SettingsDialog.prototype.toggleFps = function(toggle, customEventData) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.settings.lowPower = toggle.isChecked;
        LocalStorage_1.default.saveSystemSettings(Logic_1.default.settings);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.SETTINGS_LOW_POWER);
      };
      SettingsDialog.prototype.showActionSettingDialog = function() {
        this.close();
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ACTION_SETTING_DIALOG);
      };
      SettingsDialog.prototype.close = function() {
        cc.director.getScheduler().setTimeScale(1);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      SettingsDialog.prototype.home = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.getScheduler().setTimeScale(1);
        cc.director.loadScene("start");
      };
      __decorate([ property(cc.Toggle) ], SettingsDialog.prototype, "tgShadow", void 0);
      __decorate([ property(cc.Toggle) ], SettingsDialog.prototype, "tgGamepad", void 0);
      __decorate([ property(cc.Toggle) ], SettingsDialog.prototype, "tgFps", void 0);
      __decorate([ property(cc.Node) ], SettingsDialog.prototype, "pcInfo", void 0);
      SettingsDialog = __decorate([ ccclass ], SettingsDialog);
      return SettingsDialog;
    }(BaseDialog_1.default);
    exports.default = SettingsDialog;
    cc._RF.pop();
  }, {
    "../../logic/EventHelper": "EventHelper",
    "../../logic/Logic": "Logic",
    "../../utils/AudioPlayer": "AudioPlayer",
    "../../utils/LocalStorage": "LocalStorage",
    "./BaseDialog": "BaseDialog"
  } ],
  ShadowOfSight: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6922FctbtKnrAA7zoIN/Yg", "ShadowOfSight");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CCollider_1 = require("../collider/CCollider");
    var GameWorldSystem_1 = require("../ecs/system/GameWorldSystem");
    var Actor_1 = require("../base/Actor");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ShadowOfSight = function(_super) {
      __extends(ShadowOfSight, _super);
      function ShadowOfSight() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ray = null;
        _this.rayNum = 180;
        _this.renderColor = cc.color(255, 255, 255, 1);
        _this.showLight = true;
        _this.showRayCast = false;
        _this.fromSky = false;
        _this.z = 0;
        _this.zHeight = 0;
        _this.fromOutside = false;
        _this.sprite = null;
        _this.showShadow = true;
        _this.lightVertsArray = new Array();
        _this.lightRects = {};
        _this.circle = cc.v3(0, 0, 0);
        _this.offset = 0;
        _this.offsetPlus = false;
        _this.lightTargetMap = new Map();
        _this.sensorTargetMap = new Map();
        _this.ignoreMap = new Map();
        return _this;
      }
      ShadowOfSight.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.mat = this.ray.getMaterial(0);
        this.polygonCollider = this.getComponent(cc.PolygonCollider);
        this.customCollider = this.getComponent(CCollider_1.default);
        var aimArr = [ CCollider_1.default.TAG.BOSS, CCollider_1.default.TAG.BUILDING, CCollider_1.default.TAG.GOODNONPLAYER, CCollider_1.default.TAG.NONPLAYER, CCollider_1.default.TAG.PLAYER, CCollider_1.default.TAG.WALL, CCollider_1.default.TAG.WALL_TOP ];
        for (var _i = 0, aimArr_1 = aimArr; _i < aimArr_1.length; _i++) {
          var key = aimArr_1[_i];
          this.lightTargetMap.set(key, true);
        }
        if (this.customCollider && this.customCollider.ignoreTagList) for (var _a = 0, _b = this.customCollider.ignoreTagList; _a < _b.length; _a++) {
          var key = _b[_a];
          this.lightTargetMap.has(key) && this.lightTargetMap.delete(key);
        }
        var success = this.initIgnoreMap(this.node.parent.getComponent(Actor_1.default));
        if (!success && this.node.parent.parent) {
          success = this.initIgnoreMap(this.node.parent.parent.getComponent(Actor_1.default));
          !success && this.node.parent.parent.parent && (success = this.initIgnoreMap(this.node.parent.parent.parent.getComponent(Actor_1.default)));
        }
      };
      ShadowOfSight.prototype.initIgnoreMap = function(actor) {
        if (!actor) return false;
        var arr = actor.node.getComponentsInChildren(CCollider_1.default);
        if (arr && arr.length > 0) for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var c = arr_1[_i];
          this.ignoreMap.set(c.id, true);
        }
        return true;
      };
      ShadowOfSight.prototype.renderSightArea = function(camera) {
        var pos = this.node.convertToWorldSpaceAR(cc.v2(0, 0));
        var size = this.radius / 10;
        var delta = .1;
        this.offset > size ? this.offsetPlus = false : this.offset < -size && (this.offsetPlus = true);
        this.offset = this.offsetPlus ? this.offset + delta : this.offset - delta;
        this.ray.clear();
        this.sprite && (this.sprite.enabled = false);
        if (this.showShadow) {
          this.lightRects = {};
          this.lightVertsArray = [];
          this.circle = cc.v3(0, 0, 0);
          this.showRayCast ? this.drawRayByNum(pos, camera, this.showLight) : this.drawCustom(pos, camera, this.showLight);
        }
      };
      ShadowOfSight.prototype.updateRender = function(showShadow) {
        this.showShadow = showShadow;
      };
      ShadowOfSight.prototype.setCustomColliderStyle = function(isRect, w, h, r, offsetX, offsetY) {
        if (!this.customCollider) return;
        this.customCollider.w = w;
        this.customCollider.h = h;
        this.customCollider.radius = r;
        this.customCollider.offsetX = offsetX;
        this.customCollider.offsetY = offsetY;
        this.customCollider.type = isRect ? CCollider_1.default.TYPE.RECT : CCollider_1.default.TYPE.CIRCLE;
        this.customCollider.fixCenterAndScale();
      };
      ShadowOfSight.prototype.drawCustom = function(pos, camera, renderLight) {
        this.ray.lineWidth = 10;
        this.ray.fillColor = this.renderColor;
        if (this.polygonCollider && this.polygonCollider.points.length > 2) {
          for (var i = 0; i < this.polygonCollider.points.length; i++) {
            var p = this.node.convertToWorldSpaceAR(this.polygonCollider.points[i]);
            this.lightVertsArray.push(p);
            renderLight && (0 == i ? this.ray.moveTo(this.polygonCollider.points[i].x, this.polygonCollider.points[i].y) : this.ray.lineTo(this.polygonCollider.points[i].x, this.polygonCollider.points[i].y));
          }
          if (renderLight) {
            this.ray.close();
            this.ray.fill();
            var sp = camera.getWorldToScreenPoint(pos);
            this.updateMat(this.mat, cc.v2(sp.x, sp.y), camera.zoomRatio);
          }
        }
        if (this.customCollider && this.customCollider.type == CCollider_1.default.TYPE.RECT && this.customCollider.w > 0 && this.customCollider.h > 0) {
          this.customCollider.points.length < 1 && this.customCollider.fixCenterAndScale();
          for (var i = 0; i < this.customCollider.points.length; i++) {
            var p = this.node.convertToNodeSpaceAR(this.customCollider.points[i]);
            this.lightVertsArray.push(this.customCollider.points[i]);
            renderLight && (0 == i ? this.ray.moveTo(p.x, p.y) : this.ray.lineTo(p.x, p.y));
          }
          if (renderLight) if (this.sprite) {
            this.sprite.enabled = true;
            this.sprite.node.width = this.customCollider.w;
            this.sprite.node.height = this.customCollider.h;
            this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("lightrect");
            this.sprite.node.color = cc.color(this.renderColor.r, this.renderColor.g, this.renderColor.b);
            this.sprite.node.opacity = this.renderColor.a;
            this.ray.enabled = false;
          } else {
            this.sprite && (this.sprite.enabled = false);
            this.ray.enabled = true;
            this.ray.close();
            this.ray.fill();
            var sp = camera.getWorldToScreenPoint(pos);
            this.updateMat(this.mat, cc.v2(sp.x, sp.y), camera.zoomRatio);
          }
        }
        if (this.customCollider && this.customCollider.type == CCollider_1.default.TYPE.CIRCLE && this.customCollider.radius > 0) {
          var p = this.node.convertToWorldSpaceAR(cc.v2(this.customCollider.offsetX, this.customCollider.offsetY));
          this.circle = cc.v3(p.x, p.y, this.getRadius());
          if (renderLight) if (this.sprite) {
            this.sprite.enabled = true;
            var r = this.getRadius();
            this.sprite.node.width = 2 * r;
            this.sprite.node.height = 2 * r;
            this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("lightpoint");
            this.sprite.node.color = cc.color(this.renderColor.r, this.renderColor.g, this.renderColor.b);
            this.sprite.node.opacity = this.renderColor.a;
            this.ray.enabled = false;
          } else {
            this.ray.enabled = true;
            this.sprite && (this.sprite.enabled = false);
            this.ray.lineWidth = 10;
            this.ray.fillColor = this.renderColor;
            var center = this.customCollider.offset;
            this.ray.circle(center.x, center.y, this.getRadius());
            this.ray.fill();
            var sp = camera.getWorldToScreenPoint(pos);
            this.updateMat(this.mat, cc.v2(sp.x, sp.y), camera.zoomRatio);
          }
        }
      };
      ShadowOfSight.prototype.drawRayByNum = function(pos, camera, renderLight) {
        if (!this.customCollider || this.customCollider.radius <= 0) return;
        this.sprite && (this.sprite.enabled = false);
        this.ray.enabled = true;
        this.ray.lineWidth = 10;
        this.ray.fillColor = this.renderColor;
        var unitRd = 2 * Math.PI / this.rayNum;
        this.lightVertsArray = new Array();
        this.lightRects = {};
        for (var i = 0; i < this.rayNum; i++) {
          var p3 = cc.v2(Math.cos(i * unitRd) * this.getRadius() + pos.x, Math.sin(i * unitRd) * this.getRadius() + pos.y);
          var result = GameWorldSystem_1.default.colliderSystem.nearestRayCast(cc.v2(pos), cc.v2(p3), this.z, this.zHeight, this.lightTargetMap, this.sensorTargetMap, this.ignoreMap);
          if (result) {
            p3 = result.point;
            var node = result.collider.node;
            var bottomPos = node.convertToNodeSpaceAR(p3);
            if (bottomPos.y <= 0 && p3.y > pos.y) {
              var np = node.convertToWorldSpaceAR(cc.v3(0, 0));
              var offset = 10;
              var r = cc.rect(np.x - node.width * node.anchorX, np.y - node.height * node.anchorY - offset, node.width, node.height + offset);
              this.lightRects[node.uuid] = r;
            }
          }
          this.lightVertsArray.push(p3);
          this.ray.lineWidth = 3;
          this.ray.strokeColor = cc.color(0, 0, 0, 80);
          if (renderLight) if (0 == i) {
            var p0 = this.node.convertToNodeSpaceAR(p3);
            this.ray.moveTo(p0.x, p0.y);
          } else {
            var p = this.node.convertToNodeSpaceAR(p3);
            this.ray.lineTo(p.x, p.y);
          }
        }
        if (renderLight) {
          this.ray.close();
          this.ray.fill();
          this.ray.fillColor.a = this.ray.fillColor.a / 2;
          for (var key in this.lightRects) {
            var r = this.lightRects[key];
            var p = this.node.convertToNodeSpaceAR(cc.v3(r.x, r.y));
            this.ray.rect(p.x, p.y, r.width, r.height);
            this.ray.fill();
          }
          var sp = camera.getWorldToScreenPoint(pos);
          this.updateMat(this.mat, cc.v2(sp.x, sp.y), camera.zoomRatio);
        }
      };
      ShadowOfSight.prototype.getRadius = function() {
        return this.radius + this.offset;
      };
      Object.defineProperty(ShadowOfSight.prototype, "radius", {
        get: function() {
          return this.customCollider && !this.polygonCollider ? this.customCollider.radius * this.customCollider.node.scale : this.node.width / 2;
        },
        set: function(r) {
          this.customCollider && (this.customCollider.radius = r);
        },
        enumerable: false,
        configurable: true
      });
      ShadowOfSight.prototype.updateMat = function(mat, pos, zoomRatio) {
        var canvasSize = cc.view.getCanvasSize();
        var visibleSize = cc.view.getVisibleSize();
        var visibleRatio = visibleSize.width / visibleSize.height;
        var r = this.getRadius() / visibleSize.height;
        var scale = canvasSize.width / visibleSize.width;
        mat.setProperty("screen", cc.v2(canvasSize.width, canvasSize.height));
        mat.setProperty("maxRadius", r * zoomRatio);
        mat.setProperty("whRatio", visibleRatio);
        var lightPos = cc.v2(pos.x / visibleSize.width, pos.y / visibleSize.height);
        var y = Math.abs(lightPos.y - .5) * visibleSize.height * scale / canvasSize.height;
        this.mat.setProperty("lightPos", cc.v2(lightPos.x, lightPos.y > .5 ? .5 + y : .5 - y));
      };
      __decorate([ property(cc.Graphics) ], ShadowOfSight.prototype, "ray", void 0);
      __decorate([ property(cc.Color) ], ShadowOfSight.prototype, "renderColor", void 0);
      __decorate([ property ], ShadowOfSight.prototype, "showLight", void 0);
      __decorate([ property ], ShadowOfSight.prototype, "showRayCast", void 0);
      __decorate([ property ], ShadowOfSight.prototype, "fromSky", void 0);
      __decorate([ property ], ShadowOfSight.prototype, "z", void 0);
      __decorate([ property ], ShadowOfSight.prototype, "zHeight", void 0);
      __decorate([ property ], ShadowOfSight.prototype, "fromOutside", void 0);
      ShadowOfSight = __decorate([ ccclass ], ShadowOfSight);
      return ShadowOfSight;
    }(cc.Component);
    exports.default = ShadowOfSight;
    cc._RF.pop();
  }, {
    "../base/Actor": "Actor",
    "../collider/CCollider": "CCollider",
    "../ecs/system/GameWorldSystem": "GameWorldSystem",
    "../logic/Logic": "Logic"
  } ],
  ShadowPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37457/YUj5OXbrBhQ2rg17W", "ShadowPlayer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var PlayerWeapon_1 = require("../logic/PlayerWeapon");
    var Shooter_1 = require("../logic/Shooter");
    var IndexZ_1 = require("../utils/IndexZ");
    var NextStep_1 = require("../utils/NextStep");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ShadowPlayer = function(_super) {
      __extends(ShadowPlayer, _super);
      function ShadowPlayer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.weaponLeft = null;
        _this.weaponRight = null;
        _this.shooterEx = null;
        _this.sprite = null;
        _this.index = 0;
        _this.lifeNext = new NextStep_1.default();
        _this.isStop = false;
        _this.targetPos = cc.v3(0, 0);
        _this.movePos = cc.v3(0, 0);
        _this.playerLastPos = cc.v3(0, 0);
        _this.moveList = [];
        _this.isVanishing = false;
        return _this;
      }
      ShadowPlayer.prototype.init = function(player, spriteframe, index, lifeTime) {
        var _this = this;
        var duration = lifeTime || 30;
        this.player = player;
        this.index = index;
        this.player.data.ShadowList[this.index] = Date.now();
        this.node.parent = this.player.node.parent;
        this.weaponLeft.init(this.player, true, true);
        this.weaponRight.init(this.player, false, true);
        this.weaponLeft.node.opacity = 0;
        this.weaponRight.node.opacity = 0;
        this.shooterEx.player = this.player;
        this.shooterEx.isEx = true;
        this.shooterEx.actor = this.player;
        this.weaponLeft.shooter.actor = this.player;
        this.weaponRight.shooter.actor = this.player;
        this.mat = this.sprite.getMaterial(0);
        this.sprite.node.scaleX = 1;
        this.sprite.node.scaleY = -1;
        this.sprite.spriteFrame = spriteframe;
        this.node.zIndex = IndexZ_1.default.getActorZIndex(Dungeon_1.default.getIndexInMap(this.node.position));
        this.sprite.node.width = this.sprite.spriteFrame.getOriginalSize().width;
        this.sprite.node.height = this.sprite.spriteFrame.getOriginalSize().height;
        this.node.position = this.player.node.position.clone();
        this.targetPos = this.player.node.position.clone();
        this.playerLastPos = this.player.node.position.clone();
        this.isStop = false;
        this.isVanishing = false;
        this.lifeNext.next(function() {}, duration, true, function(lastTime) {
          var currentTime = Date.now();
          currentTime - lastTime < 1e3 * duration && _this.node && _this.isValid && !_this.isStop && (_this.player.data.ShadowList[_this.index] = lastTime);
          currentTime - lastTime > 1e3 * duration && _this.stop();
        });
      };
      ShadowPlayer.prototype.attack = function(data, comboType, hv, isLeft) {
        if (!this.node) return false;
        return isLeft ? this.weaponLeft.shadowWeapon.attack(data, comboType, hv) : this.weaponRight.shadowWeapon.attack(data, comboType, hv);
      };
      ShadowPlayer.prototype.remoteAttack = function(isLeft, data, hv, damage, bulletArcExNum, bulletLineExNum) {
        if (!this.node) return false;
        var shooter = isLeft ? this.weaponLeft.shooter : this.weaponRight.shooter;
        shooter.data = data.clone();
        shooter.setHv(hv);
        shooter.remoteDamagePlayer = damage;
        shooter.fireBullet(0, cc.v3(30, 0), bulletArcExNum, bulletLineExNum);
      };
      ShadowPlayer.prototype.stop = function() {
        if (this.isValid) {
          this.isStop = true;
          this.player.data.ShadowList[this.index] = 0;
          this.node.active = false;
          this.enabled = false;
          this.destroy();
        }
      };
      ShadowPlayer.prototype.getCenterPosition = function() {
        return this.node.position.clone().addSelf(cc.v3(0, 32 * this.node.scaleY));
      };
      ShadowPlayer.prototype.vanish = function(duration) {
        var _this = this;
        this.isVanishing = true;
        this.scheduleOnce(function() {
          _this.isVanishing = false;
        }, duration);
      };
      ShadowPlayer.prototype.updateLogic = function(dt) {
        if (this.player) {
          this.weaponLeft && this.weaponLeft.updateLogic(dt);
          this.weaponRight && this.weaponRight.updateLogic(dt);
          this.shooterEx && this.shooterEx.updateLogic(dt);
          this.movePos.x += Math.abs(this.player.node.position.x - this.playerLastPos.x);
          this.movePos.y += Math.abs(this.player.node.position.y - this.playerLastPos.y);
          this.playerLastPos = this.player.node.position.clone();
          var offset = 5;
          if (this.movePos.x > offset || this.movePos.y > offset) {
            this.movePos = cc.v3(0, 0);
            var p = this.player.node.position.clone();
            p.z = this.player.isFaceRight ? 1 : -1;
            this.moveList.push(p);
          }
          if (this.moveList.length > 0) {
            var x = this.moveList[0].x - this.targetPos.x;
            var y = this.moveList[0].y - this.targetPos.y;
            x * x + y * y < offset * offset && this.moveList.splice(0, 1);
            this.moveList.length > 10 * (this.index + 1) && (this.targetPos = this.moveList[0].clone());
          }
          this.node.zIndex = IndexZ_1.default.getActorZIndex(Dungeon_1.default.getIndexInMap(this.node.position));
          this.sprite.node.opacity = 200 - 20 * this.index;
          this.isVanishing && (this.sprite.node.opacity = 0);
          this.sprite.node.y = this.player.root.y;
          this.shooterEx.node.y = this.player.root.y;
          this.weaponLeft.shooter.node.y = this.player.root.y;
          this.weaponRight.shooter.node.y = this.player.root.y;
          this.mat.setProperty("textureSizeWidth", this.sprite.spriteFrame.getTexture().width);
          this.mat.setProperty("textureSizeHeight", this.sprite.spriteFrame.getTexture().height);
          this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
          this.mat.setProperty("outlineSize", 4);
          this.weaponLeft.shadowWeapon.IsAttacking || this.weaponRight.shadowWeapon.IsAttacking || (this.node.position = Logic_1.default.lerpPos(this.node.position, this.targetPos, 3 * dt));
        }
      };
      __decorate([ property(PlayerWeapon_1.default) ], ShadowPlayer.prototype, "weaponLeft", void 0);
      __decorate([ property(PlayerWeapon_1.default) ], ShadowPlayer.prototype, "weaponRight", void 0);
      __decorate([ property(Shooter_1.default) ], ShadowPlayer.prototype, "shooterEx", void 0);
      __decorate([ property(cc.Sprite) ], ShadowPlayer.prototype, "sprite", void 0);
      ShadowPlayer = __decorate([ ccclass ], ShadowPlayer);
      return ShadowPlayer;
    }(cc.Component);
    exports.default = ShadowPlayer;
    cc._RF.pop();
  }, {
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/PlayerWeapon": "PlayerWeapon",
    "../logic/Shooter": "Shooter",
    "../utils/IndexZ": "IndexZ",
    "../utils/NextStep": "NextStep"
  } ],
  Shield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9e32odPWRNMpWClq+mn20V", "Shield");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseAvatar_1 = require("../base/BaseAvatar");
    var DamageData_1 = require("../data/DamageData");
    var EquipmentData_1 = require("../data/EquipmentData");
    var FromData_1 = require("../data/FromData");
    var TriggerData_1 = require("../data/TriggerData");
    var BlockLight_1 = require("../effect/BlockLight");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var StatusManager_1 = require("../manager/StatusManager");
    var IndexZ_1 = require("../utils/IndexZ");
    var EventHelper_1 = require("./EventHelper");
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Shield = function(_super) {
      __extends(Shield, _super);
      function Shield() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.blockLightPrefab = null;
        _this.status = -1;
        _this.data = new EquipmentData_1.default();
        _this.isBehind = false;
        _this.avatarZindex = 0;
        _this.isBehindChange = false;
        _this.dir = 3;
        _this.isButtonPressing = false;
        return _this;
      }
      Shield_1 = Shield;
      Object.defineProperty(Shield.prototype, "isAniming", {
        get: function() {
          return this.status == Shield_1.STATUS_PUTDOWN || this.status == Shield_1.STATUS_PARRY;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Shield.prototype, "isDefendOrParrying", {
        get: function() {
          return this.status == Shield_1.STATUS_DEFEND || this.status == Shield_1.STATUS_PARRY;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Shield.prototype, "Status", {
        get: function() {
          return this.status;
        },
        enumerable: false,
        configurable: true
      });
      Shield.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.POOL_DESTORY_BLOCKLIGHT, function(detail) {
          _this.destroySmoke(detail.targetNode);
        });
        this.blocklightPool = new cc.NodePool();
      };
      Shield.prototype.getBlockLight = function(parentNode, pos) {
        var prefab = null;
        this.blocklightPool.size() > 0 && (prefab = this.blocklightPool.get());
        prefab && !prefab.active || (prefab = cc.instantiate(this.blockLightPrefab));
        prefab.parent = parentNode;
        prefab.position = pos;
        prefab.zIndex = IndexZ_1.default.OVERHEAD;
        prefab.scale = this.status == Shield_1.STATUS_PARRY ? 2 : 1;
        prefab.opacity = 255;
        prefab.active = true;
        prefab.getComponent(BlockLight_1.default).show();
      };
      Shield.prototype.blockDamage = function(player, damage, from, actor) {
        if (this.status < 0 || this.status == Shield_1.STATUS_IDLE || this.status == Shield_1.STATUS_PUTDOWN) return 0;
        if (damage.getTotalDamage() <= 0) return 0;
        var pos = player.node.parent.convertToNodeSpaceAR(this.node.convertToWorldSpaceAR(cc.Vec2.ZERO));
        this.getBlockLight(player.node.parent, cc.v3(pos.x, pos.y));
        if (actor) {
          if (this.status == Shield_1.STATUS_PARRY) {
            actor.addStatus(StatusManager_1.default.SHIELD_PARRY, new FromData_1.default());
            actor.takeDamage(new DamageData_1.default(this.data.FinalCommon.blockDamage), FromData_1.default.getClone(player.actorName(), "", player.node.position));
            player.exTrigger(TriggerData_1.default.GROUP_HURT, TriggerData_1.default.TYPE_HURT_PARRAY, from, actor);
          }
          this.status == Shield_1.STATUS_DEFEND && player.exTrigger(TriggerData_1.default.GROUP_HURT, TriggerData_1.default.TYPE_HURT_BLOCK, from, actor);
        }
        return this.status == Shield_1.STATUS_PARRY ? Shield_1.BLOCK_PARRY : Shield_1.BLOCK_NORMAL;
      };
      Shield.prototype.destroySmoke = function(targetNode) {
        if (!targetNode) return;
        targetNode.active = false;
        this.blocklightPool && this.blocklightPool.put(targetNode);
      };
      Shield.prototype.playIdle = function() {
        if (this.status == Shield_1.STATUS_DEFEND || this.status == Shield_1.STATUS_PARRY || this.status == Shield_1.STATUS_IDLE) return;
        this.status = Shield_1.STATUS_IDLE;
        cc.log("\u7b49\u5f85 isBehind:" + this.isBehind + " zIndex:" + this.node.zIndex);
        this.sprite.node.stopAllActions();
        var duration = 1 == this.data.isHeavy ? .4 : .2;
        var idle = cc.tween().to(duration, {
          y: 2
        }).to(duration, {
          y: -2
        });
        cc.tween(this.sprite.node).repeatForever(idle).start();
      };
      Shield.prototype.playParry = function(player) {
        var _this = this;
        if (this.status == Shield_1.STATUS_PUTDOWN || this.status == Shield_1.STATUS_DEFEND || this.status == Shield_1.STATUS_PARRY) return;
        this.status = Shield_1.STATUS_PARRY;
        var duration = 1 == this.data.isHeavy ? .15 : .1;
        var durationdelay = 1 == this.data.isHeavy ? .1 : .15;
        var dp = Shield_1.DEFEND_POS[this.dir].clone();
        var tp = Shield_1.TRANSFORM_POS[this.dir].clone();
        cc.log("\u4e3e\u8d77 isBehind:" + this.isBehind + " zIndex:" + this.node.zIndex);
        player && player.highLight(true);
        cc.tween(this.node).to(duration, {
          position: tp
        }).call(function() {
          _this.node.zIndex = _this.isBehind ? _this.avatarZindex + Shield_1.ZOFFSET : _this.avatarZindex - Shield_1.ZOFFSET;
          _this.sprite.node.color = _this.isBehind ? cc.Color.WHITE : cc.color(32, 32, 32);
        }).to(duration, {
          position: dp
        }).delay(durationdelay).call(function() {
          player && player.highLight(false);
          _this.isButtonPressing ? _this.playDefend() : _this.playPutDown();
        }).start();
      };
      Shield.prototype.playDefend = function() {
        if (this.status == Shield_1.STATUS_PUTDOWN || this.status == Shield_1.STATUS_DEFEND) return;
        this.status = Shield_1.STATUS_DEFEND;
        cc.log("\u9632\u5fa1 isBehind:" + this.isBehind + " zIndex:" + this.node.zIndex);
      };
      Shield.prototype.playPutDown = function() {
        var _this = this;
        if (this.status == Shield_1.STATUS_PUTDOWN || this.status == Shield_1.STATUS_IDLE) return;
        var isBehindTemp = this.isBehindChange ? !this.isBehind : this.isBehind;
        this.status = Shield_1.STATUS_PUTDOWN;
        var duration = 1 == this.data.isHeavy ? .2 : .1;
        var dp = Shield_1.DEFAULT_POS[this.dir].clone();
        var tp = Shield_1.TRANSFORM_POS[this.dir].clone();
        cc.log("\u653e\u4e0b isBehind:" + this.isBehind + " isBehindTemp:" + isBehindTemp + " zIndex:" + this.node.zIndex);
        cc.tween(this.node).to(duration, {
          position: tp
        }).call(function() {
          _this.node.zIndex = isBehindTemp ? _this.avatarZindex - Shield_1.ZOFFSET : _this.avatarZindex + Shield_1.ZOFFSET;
          _this.sprite.node.color = isBehindTemp ? cc.color(32, 32, 32) : cc.Color.WHITE;
        }).to(duration, {
          position: dp
        }).call(function() {
          _this.playIdle();
        }).start();
      };
      Shield.prototype.changeZIndexByDir = function(avatarZindex, dir) {
        if (this.isAniming) return;
        this.avatarZindex = avatarZindex;
        this.dir = dir;
        var isDefending = this.status == Shield_1.STATUS_DEFEND;
        var currentIndex = avatarZindex - Shield_1.ZOFFSET;
        switch (dir) {
         case BaseAvatar_1.default.DIR_UP:
          currentIndex = avatarZindex + (isDefending ? -Shield_1.ZOFFSET : Shield_1.ZOFFSET);
          this.sprite.node.color = isDefending ? cc.color(32, 32, 32) : cc.Color.WHITE;
          break;

         case BaseAvatar_1.default.DIR_DOWN:
          currentIndex = avatarZindex + (isDefending ? Shield_1.ZOFFSET : -Shield_1.ZOFFSET);
          this.sprite.node.color = isDefending ? cc.Color.WHITE : cc.color(32, 32, 32);
          break;

         case BaseAvatar_1.default.DIR_LEFT:
         case BaseAvatar_1.default.DIR_RIGHT:
          currentIndex = avatarZindex + (isDefending ? Shield_1.ZOFFSET : -Shield_1.ZOFFSET);
          this.sprite.node.color = isDefending ? cc.Color.WHITE : cc.color(32, 32, 32);
        }
        var temp = this.isBehind;
        this.isBehind = dir != BaseAvatar_1.default.DIR_UP;
        this.isBehindChange = this.isBehind != temp;
        this.node.zIndex = currentIndex;
        var p = isDefending ? Shield_1.DEFEND_POS[dir] : Shield_1.DEFAULT_POS[dir].clone();
        this.node.position = p;
      };
      Shield.prototype.use = function(player) {
        this.isButtonPressing = true;
        if (this.data.equipmetType != InventoryManager_1.default.SHIELD) return;
        if (this.status == Shield_1.STATUS_PUTDOWN) return;
        if (this.isDefendOrParrying) return;
        this.playParry(player);
      };
      Shield.prototype.cancel = function() {
        this.isButtonPressing = false;
        if (this.status != Shield_1.STATUS_DEFEND) return;
        this.playPutDown();
      };
      Shield.prototype.changeRes = function(resName) {
        if (!resName || resName.length < 1) return;
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
        this.sprite.node.width = 1 == this.data.isHeavy ? 80 : 64;
        this.sprite.node.height = 1 == this.data.isHeavy ? 80 : 64;
        this.data.equipmetType == InventoryManager_1.default.SHIELD && this.playIdle();
      };
      var Shield_1;
      Shield.BLOCK_FAILED = 0;
      Shield.BLOCK_NORMAL = 1;
      Shield.BLOCK_PARRY = 2;
      Shield.STATUS_IDLE = 0;
      Shield.STATUS_PARRY = 1;
      Shield.STATUS_DEFEND = 2;
      Shield.STATUS_PUTDOWN = 3;
      Shield.ZOFFSET = 2;
      Shield.DEFAULT_POS = [ cc.v3(0, 32), cc.v3(0, 48), cc.v3(8, 48), cc.v3(-8, 48) ];
      Shield.TRANSFORM_POS = [ cc.v3(10, 40), cc.v3(10, 40), cc.v3(-32, 44), cc.v3(32, 44) ];
      Shield.DEFEND_POS = [ cc.v3(0, 48), cc.v3(0, 32), cc.v3(-24, 40), cc.v3(24, 40) ];
      __decorate([ property(cc.Sprite) ], Shield.prototype, "sprite", void 0);
      __decorate([ property(cc.Prefab) ], Shield.prototype, "blockLightPrefab", void 0);
      Shield = Shield_1 = __decorate([ ccclass ], Shield);
      return Shield;
    }(cc.Component);
    exports.default = Shield;
    cc._RF.pop();
  }, {
    "../base/BaseAvatar": "BaseAvatar",
    "../data/DamageData": "DamageData",
    "../data/EquipmentData": "EquipmentData",
    "../data/FromData": "FromData",
    "../data/TriggerData": "TriggerData",
    "../effect/BlockLight": "BlockLight",
    "../manager/InventoryManager": "InventoryManager",
    "../manager/StatusManager": "StatusManager",
    "../utils/IndexZ": "IndexZ",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  Shooter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9805u1Wn9OeouYmQSWcHcq", "Shooter");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AreaOfEffect_1 = require("../actor/AreaOfEffect");
    var Actor_1 = require("../base/Actor");
    var CCollider_1 = require("../collider/CCollider");
    var BulletData_1 = require("../data/BulletData");
    var DamageData_1 = require("../data/DamageData");
    var EquipmentData_1 = require("../data/EquipmentData");
    var FromData_1 = require("../data/FromData");
    var GameWorldSystem_1 = require("../ecs/system/GameWorldSystem");
    var Bullet_1 = require("../item/Bullet");
    var Laser_1 = require("../item/Laser");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var NextStep_1 = require("../utils/NextStep");
    var NodeKey_1 = require("../utils/NodeKey");
    var Utils_1 = require("../utils/Utils");
    var Controller_1 = require("./Controller");
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Shooter = function(_super) {
      __extends(Shooter, _super);
      function Shooter() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bullet = null;
        _this.laser = null;
        _this.isAI = false;
        _this.actor = null;
        _this.isFromPlayer = false;
        _this.dungeon = null;
        _this.player = null;
        _this.isEx = false;
        _this.isAutoAim = true;
        _this.bulletName = "";
        _this.data = new EquipmentData_1.default();
        _this.hv = cc.v2(1, 0);
        _this.isAiming = false;
        _this.remoteDamagePlayer = new DamageData_1.default();
        _this.from = new FromData_1.default();
        _this.isBuilding = false;
        _this.aoePools = {};
        _this.aimTargetMap = new Map();
        _this.sensorTargetMap = new Map();
        _this.ignoreMap = new Map();
        _this.defaultPos = cc.v3(0, 0);
        _this.ignoreEmptyWall = false;
        _this.shootBaseHeight = 0;
        _this.trackStep = new NextStep_1.default();
        return _this;
      }
      Shooter_1 = Shooter;
      Shooter.prototype.onLoad = function() {
        this.graphics = this.getComponent(cc.Graphics);
        this.bulletPool = new cc.NodePool(Bullet_1.default);
        this.laserPool = new cc.NodePool(Laser_1.default);
        this.sprite = this.node.getChildByName("sprite");
        this.anim = this.getComponent(cc.Animation);
        var aimArr = [ CCollider_1.default.TAG.BOSS, CCollider_1.default.TAG.BUILDING, CCollider_1.default.TAG.ENERGY_SHIELD, CCollider_1.default.TAG.WALL, CCollider_1.default.TAG.WALL_TOP ];
        for (var _i = 0, aimArr_1 = aimArr; _i < aimArr_1.length; _i++) {
          var key = aimArr_1[_i];
          this.aimTargetMap.set(key, true);
        }
        this.initIgnoreMap(this.getParentNode().getComponent(Actor_1.default));
      };
      Shooter.prototype.init = function() {};
      Shooter.prototype.initIgnoreMap = function(actor) {
        if (!actor) return false;
        var arr = actor.node.getComponentsInChildren(CCollider_1.default);
        if (arr && arr.length > 0) for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var c = arr_1[_i];
          this.ignoreMap.set(c.id, true);
        }
        return true;
      };
      Shooter.prototype.playWalk = function(isPlay) {
        if (!this.anim) return;
        if (isPlay) this.anim.play("ShooterWalk"); else {
          this.anim.pause();
          this.sprite.y = 0;
        }
      };
      Shooter.prototype.changeRes = function(resName, subfix) {
        this.sprite || (this.sprite = this.node.getChildByName("sprite"));
        if (!this.sprite) return;
        var spriteFrame = this.getSpriteFrameByName(resName, subfix);
        this.sprite.getComponent(cc.Sprite).spriteFrame = spriteFrame;
        if (!this.isBuilding) {
          this.sprite.width = 1.5 * spriteFrame.getOriginalSize().width;
          this.sprite.height = 1.5 * spriteFrame.getOriginalSize().height;
          this.sprite.anchorX = .2;
          if (1 == this.data.far) {
            this.sprite.width = 2 * this.sprite.width;
            this.sprite.height = 2 * this.sprite.height;
            this.sprite.anchorX = .5;
          }
        }
      };
      Shooter.prototype.changeResColor = function(color) {
        this.sprite.color = color;
      };
      Shooter.prototype.getSpriteFrameByName = function(resName, subfix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + subfix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(resName + "anim0"));
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(resName));
        return spriteFrame;
      };
      Object.defineProperty(Shooter.prototype, "Hv", {
        get: function() {
          return this.hv;
        },
        enumerable: false,
        configurable: true
      });
      Shooter.prototype.setHv = function(hv) {
        var _this = this;
        if (!this.isAI && Controller_1.default.isMouseMode()) return;
        this.hv = hv;
        this.trackStep.next(function() {
          var pos = _this.hasNearEnemy();
          pos.equals(cc.Vec3.ZERO) || (_this.hv = cc.v2(pos));
          _this.rotateCollider(cc.v2(_this.hv.x, _this.hv.y));
        }, 1);
        this.rotateCollider(cc.v2(this.hv.x, this.hv.y));
      };
      Shooter.prototype.getAoeNode = function(prefab, usePool) {
        var temp = null;
        this.aoePools[prefab.name] || (this.aoePools[prefab.name] = new cc.NodePool(AreaOfEffect_1.default));
        this.aoePools[prefab.name] && this.aoePools[prefab.name].size() > 0 && usePool && (temp = this.aoePools[prefab.name].get());
        temp && !temp.active || (temp = cc.instantiate(prefab));
        temp.opacity = 255;
        temp.active = true;
        return temp;
      };
      Shooter.prototype.destroyAoePrefab = function(nodeKey) {
        if (!nodeKey) return;
        this.aoePools[nodeKey.key] || (this.aoePools[nodeKey.key] = new cc.NodePool(AreaOfEffect_1.default));
        nodeKey.node.active = false;
        this.aoePools[nodeKey.key] && this.aoePools[nodeKey.key].put(nodeKey.node);
      };
      Shooter.prototype.fireAoe = function(prefab, aoeData, defaultPos, angleOffset, killCallBack, usePool) {
        var _this = this;
        if (!this.dungeon) return null;
        angleOffset || (angleOffset = 0);
        var aoe = this.getAoeNode(prefab, usePool).getComponent(AreaOfEffect_1.default);
        if (aoe) {
          var pos = this.node.convertToWorldSpaceAR(defaultPos || cc.v3(0, 0));
          pos = this.dungeon.node.convertToNodeSpaceAR(pos);
          aoe.show(this.dungeon.node, pos, this.hv, angleOffset, aoeData, killCallBack, usePool, function(node) {
            if (usePool) {
              node.active = false;
              _this.destroyAoePrefab(new NodeKey_1.default(prefab.name, node));
            }
          });
        }
        return aoe;
      };
      Shooter.prototype.updateCustomAoe = function(aoe, spriteFrames, repeatForever, isFaceRight, scale, color, opacity, isFade, isFilpY, w, h) {
        if (!aoe.node.getChildByName("sprite") || !aoe.node.getChildByName("sprite").getComponent(cc.Sprite)) return;
        var sprite = aoe.node.getChildByName("sprite").getComponent(cc.Sprite);
        var collider = aoe.getComponent(CCollider_1.default);
        if (spriteFrames.length > 0) {
          var spriteframe = spriteFrames[0];
          sprite.node.width = spriteframe.getOriginalSize().width;
          sprite.node.height = spriteframe.getOriginalSize().height;
          sprite.node.opacity = null !== opacity && void 0 !== opacity ? opacity : 255;
          sprite.node.stopAllActions();
          sprite.node.color = cc.Color.WHITE;
          color && (sprite.node.color = color);
          sprite.node.scaleX = isFaceRight ? scale : -scale;
          sprite.node.scaleY = isFilpY ? -scale : scale;
          collider.w = sprite.node.width * scale * .75;
          collider.h = sprite.node.height * scale * .75;
          if (0 != w && 0 != h) {
            collider.w = w;
            collider.h = h;
          }
        }
        var tween = cc.tween();
        var _loop_1 = function(spriteFrame) {
          tween.then(cc.tween().call(function() {
            sprite.spriteFrame = spriteFrame;
          }).delay(.2));
        };
        for (var _i = 0, spriteFrames_1 = spriteFrames; _i < spriteFrames_1.length; _i++) {
          var spriteFrame = spriteFrames_1[_i];
          _loop_1(spriteFrame);
        }
        if (repeatForever) cc.tween(sprite.node).repeatForever(tween).start(); else {
          var fade = cc.tween().to(.2, {
            opacity: isFade ? 0 : 255
          });
          cc.tween(sprite.node).then(tween).then(fade).call(function() {
            sprite.spriteFrame = null;
          }).start();
        }
      };
      Shooter.prototype.fireBullet = function(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData) {
        defaultPos && (this.defaultPos = defaultPos.clone());
        1 == this.data.isLineAim && this.graphics ? this.aimTargetLine(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData) : this.fireBulletDo(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData, "");
      };
      Shooter.prototype.fireSplitBullet = function(splitBulletType, angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData) {
        this.fireBulletDo(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData, splitBulletType);
      };
      Shooter.prototype.fireBulletDo = function(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData, splitBulletType) {
        var _this = this;
        if (this.sprite && splitBulletType.length < 1) {
          this.sprite.stopAllActions();
          this.sprite.position = cc.Vec3.ZERO;
          cc.tween(this.sprite).call(function() {
            _this.changeRes(_this.data.img, "anim1");
          }).by(.1, {
            position: cc.v3(10, 0)
          }).call(function() {
            _this.changeRes(_this.data.img, "anim2");
          }).by(.05, {
            position: cc.v3(-5, 0)
          }).by(.05, {
            position: cc.v3(0, 0)
          }).call(function() {
            _this.changeRes(_this.data.img, "anim0");
          }).start();
        }
        angleOffset || (angleOffset = 0);
        if (!this.dungeon) return;
        if (splitBulletType.length < 1 && !this.isAI && !this.isEx && this.player.inventoryMgr.equips[InventoryManager_1.default.REMOTE].equipmetType != InventoryManager_1.default.REMOTE) return;
        splitBulletType.length < 1 && (this.data.remoteAudio && this.data.remoteAudio.length > 0 ? AudioPlayer_1.default.play(this.data.remoteAudio) : AudioPlayer_1.default.play(AudioPlayer_1.default.SHOOT));
        var isCircle = false;
        var bulletType = splitBulletType.length > 0 ? splitBulletType : this.data.bulletType;
        var finalBulletArcExNum = (bulletArcExNum || 0) + (splitBulletType.length > 0 ? 0 : this.data.bulletArcExNum);
        var angles = [ 10, -10, 20, -20, 30, -30, 40, -40, 50, -50, 60, -60, -70, -70, 80, -80, 90, -90, 100, -100, 110, -110, 120, -120, 130, -130, 140, -140, 150, -150, 160, -160, 170, -170, 180, -180 ];
        if (finalBulletArcExNum > angles.length) {
          angles = [ 0, 20, 45, 65, 90, 110, 135, 155, 180, 200, 225, 245, 270, 290, 315, 335 ];
          finalBulletArcExNum == Shooter_1.ARC_EX_NUM_8 && (angles = [ 0, 45, 90, 135, 180, 225, 270, 315, 335 ]);
          isCircle = true;
        } else this.fire(bulletType, angleOffset, this.hv.clone(), defaultPos, this.data.bulletArcOffsetX, prefab, aoeData);
        this.fireArcBullet(bulletType, defaultPos, finalBulletArcExNum, prefab, aoeData, angles, this.data.bulletArcOffsetX);
        this.fireLineBullet(bulletType, angleOffset, defaultPos, finalBulletArcExNum, bulletLineExNum, prefab, aoeData, angles, isCircle, this.data.bulletArcOffsetX);
      };
      Shooter.prototype.fireArcBullet = function(bulletType, defaultPos, bulletArcExNum, prefab, aoeData, angles, bulletArcOffsetX) {
        if (bulletArcExNum <= 0) return;
        for (var i = 0; i < bulletArcExNum; i++) i < angles.length && this.fire(bulletType, angles[i], this.hv.clone(), defaultPos, bulletArcOffsetX, prefab, aoeData);
      };
      Shooter.prototype.fireLineBullet = function(bulletType, angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData, angles, isCircle, bulletArcOffsetX) {
        var _this = this;
        var exNum = bulletLineExNum ? this.data.bulletLineExNum + bulletLineExNum : this.data.bulletLineExNum;
        if (0 == exNum) return;
        this.schedule(function() {
          isCircle || _this.fire(bulletType, angleOffset, _this.hv.clone(), defaultPos, bulletArcOffsetX, prefab, aoeData);
          _this.fireArcBullet(bulletType, defaultPos, bulletArcExNum, prefab, aoeData, angles, bulletArcOffsetX);
        }, this.data.bulletLineInterval > 0 ? this.data.bulletLineInterval : .2, exNum, 0);
      };
      Shooter.prototype.fire = function(bulletType, angleOffset, hv, defaultPos, bulletArcOffsetX, aoePrefab, aoeData) {
        var bulletData = Logic_1.default.bullets[bulletType];
        var prefab = this.bullet;
        var pool = this.bulletPool;
        var isLaser = bulletData.isLaser > 0;
        if (isLaser) {
          prefab = this.laser;
          pool = this.laserPool;
        }
        var bulletPrefab = null;
        pool.size() > 0 && (bulletPrefab = pool.get());
        bulletPrefab && !bulletPrefab.active || (bulletPrefab = cc.instantiate(prefab));
        var pos = this.getFireBasePos(defaultPos, bulletArcOffsetX, angleOffset, this.shootBaseHeight);
        bulletPrefab.parent = this.dungeon.node;
        bulletPrefab.scaleX = 1;
        bulletPrefab.scaleY = 1;
        bulletPrefab.active = true;
        if (isLaser) {
          bulletPrefab.position = cc.v3(pos.x, pos.y + this.shootBaseHeight);
          this.showLaser(angleOffset, hv, bulletPrefab, bulletData, cc.v3(pos.x, pos.y + this.shootBaseHeight), pos.z + this.shootBaseHeight);
        } else {
          bulletPrefab.position = cc.v3(pos.x, pos.y + this.shootBaseHeight);
          this.showBullet(angleOffset, hv, bulletPrefab, bulletData, cc.v3(pos.x, pos.y + this.shootBaseHeight), pos.z + this.shootBaseHeight, aoePrefab, aoeData);
        }
      };
      Shooter.prototype.getFireBasePos = function(defaultPos, bulletArcOffsetX, angleOffset, shootBaseHeight) {
        var p = cc.v3(0, 0);
        if (defaultPos) {
          p = defaultPos.clone();
          bulletArcOffsetX && 0 != bulletArcOffsetX && p.addSelf(cc.v3(cc.v2(bulletArcOffsetX, 0).rotateSelf((null !== angleOffset && void 0 !== angleOffset ? angleOffset : 0 * Math.PI) / 180)));
        }
        var pos = this.node.convertToWorldSpaceAR(p);
        var z = this.getParentNode().convertToNodeSpaceAR(pos).y;
        z < 0 && (z = 0);
        pos = this.dungeon.node.convertToNodeSpaceAR(pos);
        if (shootBaseHeight && shootBaseHeight <= z) {
          z = shootBaseHeight;
          pos.y -= z;
        } else pos.y = this.getParentNode().y;
        pos.z = z;
        return pos;
      };
      Shooter.prototype.showBullet = function(angleOffset, hv, bulletPrefab, data, startPos, zHeight, aoePrefab, aoeData) {
        var bullet = bulletPrefab.getComponent(Bullet_1.default);
        bullet.entity.Transform.position = startPos;
        bullet.shooter = this;
        bullet.node.scaleY = this.node.scaleX > 0 ? 1 : -1;
        bullet.node.zIndex = IndexZ_1.default.OVERHEAD;
        bullet.isFromPlayer = !this.isAI || this.isFromPlayer;
        bullet.dungeon = this.dungeon;
        bullet.ignoreEmptyWall = this.ignoreEmptyWall;
        var bd = new BulletData_1.default();
        bd.valueCopy(data);
        if (bullet.isFromPlayer && this.player && !this.isEx) {
          bd.damage.physicalDamage = this.remoteDamagePlayer.physicalDamage;
          bd.damage.isCriticalStrike = this.remoteDamagePlayer.isCriticalStrike;
        }
        bd.size += this.data.bulletSize;
        bd.speed += this.data.bulletExSpeed;
        bd.speed + this.data.bulletExSpeed > .5 && (bd.speed += this.data.bulletExSpeed);
        bd.from.valueCopy(this.from);
        bullet.changeBullet(bd, zHeight);
        this.bulletName = bullet.name + bd.resName;
        bullet.enabled = true;
        bullet.aoeData.valueCopy(aoeData);
        bullet.aoePrefab = aoePrefab;
        bullet.showBullet(cc.v2(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180)).normalize());
      };
      Shooter.prototype.showLaser = function(angleOffset, hv, bulletPrefab, data, startPos, zHeight) {
        var laser = bulletPrefab.getComponent(Laser_1.default);
        laser.entity.Transform.position = startPos;
        laser.shooter = this;
        laser.node.scaleY = this.node.scaleX > 0 ? 1 : -1;
        laser.node.zIndex = IndexZ_1.default.OVERHEAD;
        laser.isFromPlayer = !this.isAI || this.isFromPlayer;
        laser.dungeon = this.dungeon;
        var bd = new BulletData_1.default();
        bd.valueCopy(data);
        if (laser.isFromPlayer && this.player && !this.isEx) {
          bd.damage.physicalDamage = this.remoteDamagePlayer.physicalDamage;
          bd.damage.isCriticalStrike = this.remoteDamagePlayer.isCriticalStrike;
        }
        bd.size += this.data.bulletSize;
        bd.speed += this.data.bulletExSpeed;
        bd.speed + this.data.bulletExSpeed > .5 && (bd.speed += this.data.bulletExSpeed);
        bd.from.valueCopy(this.from);
        laser.changeBullet(bd, zHeight);
        this.bulletName = laser.name + bd.resName;
        laser.enabled = true;
        laser.fire(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180), angleOffset);
      };
      Shooter.prototype.addDestroyBullet = function(bulletNode, isLaser) {
        bulletNode.active = false;
        this.destroyBullet(bulletNode, isLaser);
      };
      Shooter.prototype.destroyBullet = function(bulletNode, isLaser) {
        isLaser ? this.laserPool && bulletNode && this.laserPool.put(bulletNode) : this.bulletPool && bulletNode && this.bulletPool.put(bulletNode);
      };
      Shooter.prototype.start = function() {};
      Shooter.prototype.drawLine = function(color, range, width) {
        if (!this.graphics) return;
        this.graphics.clear();
        this.graphics.fillColor = color;
        this.graphics.circle(0, 0, width / 2 + 1);
        this.graphics.circle(range, 0, width / 2 + 1);
        this.graphics.rect(0, -width / 2, range, width);
        this.graphics.fill();
      };
      Shooter.prototype.getRayCastPoint = function(range, startPos) {
        var s = startPos || cc.v3(0, 0);
        var r = range || 3e3;
        var p = cc.v3(r, 0);
        var p1 = this.node.convertToWorldSpaceAR(s);
        var p2 = this.node.convertToWorldSpaceAR(p);
        this.isFromPlayer && this.sensorTargetMap.has(CCollider_1.default.TAG.ENERGY_SHIELD) ? this.sensorTargetMap.delete(CCollider_1.default.TAG.ENERGY_SHIELD) : this.sensorTargetMap.set(CCollider_1.default.TAG.ENERGY_SHIELD, true);
        var result = GameWorldSystem_1.default.colliderSystem.nearestRayCast(cc.v2(p1), cc.v2(p2), this.actor.entity.Transform.z, 32, this.aimTargetMap, this.sensorTargetMap, this.ignoreMap);
        result && (p = this.node.convertToNodeSpaceAR(cc.v3(result.point)));
        return p;
      };
      Shooter.prototype.aimTargetLine = function(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData) {
        var _this = this;
        if (this.isAiming) return;
        this.isAiming = true;
        if (!this.graphics) return;
        var width = 0;
        var p = this.getRayCastPoint(3e3, defaultPos);
        var isOver = false;
        var fun = function() {
          if (width < 1 && isOver) {
            _this.fireBulletDo(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData, "");
            _this.unschedule(fun);
            _this.graphics.clear();
            _this.isAiming = false;
          } else _this.drawLine(cc.color(255, 0, 0, 200), p.x, width);
          width > 10 && !isOver ? isOver = true : isOver ? width -= 1 : width += 1;
        };
        this.schedule(fun, .02, 30);
      };
      Shooter.prototype.drawArc = function(angle) {
        if (!this.graphics) return;
        this.graphics.clear();
        if (angle < 0) return;
        var r = 1e3;
        var startAngle = 2 * -angle * Math.PI / 360;
        var endAngle = 2 * angle * Math.PI / 360;
        var startPos = cc.v3(r * Math.cos(startAngle), r * Math.sin(startAngle));
        var endPos = cc.v3(r * Math.cos(endAngle), r * Math.sin(endAngle));
        this.graphics.arc(0, 0, r, 2 * Math.PI - startAngle, 2 * Math.PI - endAngle);
        this.graphics.fill();
        this.graphics.moveTo(0, 0);
        this.graphics.lineTo(startPos.x, startPos.y);
        this.graphics.lineTo(endPos.x, endPos.y);
        this.graphics.close();
        this.graphics.fill();
      };
      Shooter.prototype.updateLogic = function(dt) {
        if (!this.isAI && Controller_1.default.isMouseMode() && Controller_1.default.mousePos && this.dungeon) {
          var p = cc.v2(this.dungeon.node.convertToWorldSpaceAR(this.player.node.position));
          var pos = Controller_1.default.mousePos.add(cc.v2(this.dungeon.cameraControl.node.position)).sub(p).normalize();
          if (!pos.equals(cc.Vec2.ZERO)) {
            this.hv = pos;
            this.rotateCollider(cc.v2(this.hv.x, this.hv.y));
          }
        }
      };
      Shooter.prototype.getParentNode = function() {
        return this.actor ? this.actor.node : this.node.parent;
      };
      Shooter.prototype.hasNearEnemy = function() {
        if (!this.isAutoAim) return cc.Vec3.ZERO;
        if (!this.isAI && this.dungeon) return ActorUtils_1.default.getDirectionFromNearestEnemy(this.player.node.position, this.isAI, this.dungeon, false, 600);
        return cc.Vec3.ZERO;
      };
      Shooter.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        var sx = Math.abs(this.node.scaleX);
        this.node.scaleX = this.getParentNode().scaleX > 0 ? sx : -sx;
        var sy = Math.abs(this.node.scaleY);
        this.node.scaleY = this.node.scaleX < 0 ? -sy : sy;
        this.node.angle = Utils_1.default.getRotateAngle(direction, this.node.scaleX < 0);
      };
      var Shooter_1;
      Shooter.DefAULT_SPEED = 300;
      Shooter.ARC_EX_NUM_8 = 80;
      Shooter.ARC_EX_NUM_16 = 99;
      __decorate([ property(cc.Prefab) ], Shooter.prototype, "bullet", void 0);
      __decorate([ property(cc.Prefab) ], Shooter.prototype, "laser", void 0);
      __decorate([ property ], Shooter.prototype, "isAI", void 0);
      Shooter = Shooter_1 = __decorate([ ccclass ], Shooter);
      return Shooter;
    }(cc.Component);
    exports.default = Shooter;
    cc._RF.pop();
  }, {
    "../actor/AreaOfEffect": "AreaOfEffect",
    "../base/Actor": "Actor",
    "../collider/CCollider": "CCollider",
    "../data/BulletData": "BulletData",
    "../data/DamageData": "DamageData",
    "../data/EquipmentData": "EquipmentData",
    "../data/FromData": "FromData",
    "../ecs/system/GameWorldSystem": "GameWorldSystem",
    "../item/Bullet": "Bullet",
    "../item/Laser": "Laser",
    "../manager/InventoryManager": "InventoryManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/NextStep": "NextStep",
    "../utils/NodeKey": "NodeKey",
    "../utils/Utils": "Utils",
    "./Controller": "Controller",
    "./Logic": "Logic"
  } ],
  ShopMart: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1b8085+xzBE16cPL5KYFJeE", "ShopMart");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Player_1 = require("../logic/Player");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ShopMart = function(_super) {
      __extends(ShopMart, _super);
      function ShopMart() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        return _this;
      }
      ShopMart.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      ShopMart.prototype.open = function() {};
      ShopMart.prototype.close = function() {};
      ShopMart.prototype.onColliderEnter = function(other, self) {
        var player = other.node.getComponent(Player_1.default);
        player && this.open();
      };
      ShopMart.prototype.onColliderExit = function(other, self) {
        var player = other.node.getComponent(Player_1.default);
        player && this.close();
      };
      ShopMart = __decorate([ ccclass ], ShopMart);
      return ShopMart;
    }(Building_1.default);
    exports.default = ShopMart;
    cc._RF.pop();
  }, {
    "../logic/Player": "Player",
    "./Building": "Building"
  } ],
  ShopTable: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "feb404aValPAJxRKh4uvHLm", "ShopTable");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../utils/IndexZ");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var MapManager_1 = require("../manager/MapManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ShopTable = function(_super) {
      __extends(ShopTable, _super);
      function ShopTable() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ShopTable_1 = ShopTable;
      ShopTable.prototype.onLoad = function() {
        this.info = this.node.getChildByName("info");
        this.label = this.info.getComponentInChildren(cc.Label);
      };
      ShopTable.prototype.start = function() {};
      ShopTable.prototype.showItem = function() {
        if (!this.node.parent) return;
        if (this.data.isSaled) this.sale(true); else {
          var dungeon = this.node.parent.getComponent(Dungeon_1.default);
          if (dungeon) {
            var rand4save = Logic_1.default.mapManager.getRandom4Save(Logic_1.default.mapManager.getRebornSeed(this.seed), MapManager_1.default.RANDOM_BUILDING);
            this.data.shopType == ShopTable_1.EQUIPMENT ? dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(this.data.defaultPos), this.data.equipdata, Logic_1.default.getRandomNum(EquipmentManager_1.default.QUALITY_GREEN, EquipmentManager_1.default.QUALITY_GOLD), this) : this.data.shopType == ShopTable_1.ITEM && dungeon.addItem(Dungeon_1.default.getPosInMap(this.data.defaultPos), Logic_1.default.getRandomItemType(rand4save), 0, this);
          }
          this.sale(false);
        }
      };
      ShopTable.prototype.setDefaultPos = function(defaultPos) {
        this.data.defaultPos = defaultPos;
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(defaultPos);
        this.node.position = this.entity.Transform.position.clone();
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.entity.Transform.position);
      };
      ShopTable.prototype.sale = function(isSaled) {
        this.info || (this.info = this.node.getChildByName("info"));
        this.label || (this.label = this.info.getComponentInChildren(cc.Label));
        this.data.isSaled = isSaled;
        this.label.string = "" + this.data.price;
        this.info.opacity = this.data.isSaled ? 0 : 255;
        var saveTable = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
        saveTable && saveTable.valueCopy(this.data);
      };
      var ShopTable_1;
      ShopTable.EQUIPMENT = 0;
      ShopTable.ITEM = 1;
      ShopTable = ShopTable_1 = __decorate([ ccclass ], ShopTable);
      return ShopTable;
    }(Building_1.default);
    exports.default = ShopTable;
    cc._RF.pop();
  }, {
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../manager/EquipmentManager": "EquipmentManager",
    "../manager/MapManager": "MapManager",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  SlimeVenom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a7fa4vRR+xDO6TrjB6jQViO", "SlimeVenom");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../logic/Logic");
    var DamageData_1 = require("../data/DamageData");
    var Actor_1 = require("../base/Actor");
    var FromData_1 = require("../data/FromData");
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SlimeVenom = function(_super) {
      __extends(SlimeVenom, _super);
      function SlimeVenom() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isHide = false;
        _this.isForever = false;
        _this.from = FromData_1.default.getClone("\u53f2\u83b1\u59c6\u6bd2\u6db2", "venom", cc.Vec3.ZERO);
        _this.checkTimeDelay = 0;
        return _this;
      }
      SlimeVenom.prototype.takeDamage = function(damage, from, actor) {
        return false;
      };
      SlimeVenom.prototype.onLoad = function() {
        this.venom1 = this.node.getChildByName("sprite").getChildByName("venom1");
        this.venom2 = this.node.getChildByName("sprite").getChildByName("venom2");
        this.venom3 = this.node.getChildByName("sprite").getChildByName("venom2");
        this.anim = this.getComponent(cc.Animation);
        this.sprite = this.node.getChildByName("sprite");
      };
      SlimeVenom.prototype.onEnable = function() {
        var _this = this;
        this.isHide = false;
        this.sprite.opacity = 255;
        this.venom1.angle = Logic_1.default.getRandomNum(0, 180);
        this.venom2.angle = Logic_1.default.getRandomNum(0, 180);
        this.venom2.angle = Logic_1.default.getRandomNum(0, 180);
        this.anim.play();
        this.isForever || this.scheduleOnce(function() {
          if (_this.anim) {
            _this.isHide = true;
            _this.anim.play("VenomHide");
            _this.scheduleOnce(function() {
              EventHelper_1.EventHelper.emit("destoryvenom", {
                coinNode: _this.node
              });
            }, 1.5);
          }
        }, 3);
        this.damagePlayer(this.from);
      };
      SlimeVenom.prototype.updateData = function() {};
      SlimeVenom.prototype.addStatus = function(statusType, from) {};
      SlimeVenom.prototype.getNearPlayerDistance = function(playerNode) {
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, playerNode.position);
        return dis;
      };
      SlimeVenom.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      SlimeVenom.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.isCheckTimeDelay(dt) && this.damagePlayer(this.from);
      };
      SlimeVenom.prototype.damagePlayer = function(from) {
        if (this.target && this.getNearPlayerDistance(this.target.node) < 60 * this.node.scale && this.node.active && !this.isHide) {
          var dd = new DamageData_1.default();
          dd.magicDamage = 3;
          this.target.takeDamage(dd, from);
        }
      };
      SlimeVenom.prototype.getCenterPosition = function() {
        return this.node.position.clone();
      };
      SlimeVenom.prototype.actorName = function() {
        return "\u53f2\u83b1\u59c6\u6bd2\u6db2";
      };
      SlimeVenom.prototype.takeDizz = function(dizzDuration) {};
      SlimeVenom.prototype.updateStatus = function(statusList, totalStatusData) {};
      SlimeVenom.prototype.hideSelf = function(hideDuration) {};
      SlimeVenom.prototype.updateLife = function(sanity, solid, liquid) {};
      SlimeVenom.prototype.updateDream = function(offset) {
        return 0;
      };
      SlimeVenom.prototype.setLinearVelocity = function(movement) {};
      SlimeVenom = __decorate([ ccclass ], SlimeVenom);
      return SlimeVenom;
    }(Actor_1.default);
    exports.default = SlimeVenom;
    cc._RF.pop();
  }, {
    "../base/Actor": "Actor",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic"
  } ],
  Slime: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68790KdPQVN37qkvHYOgA/X", "Slime");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var Dungeon_1 = require("../logic/Dungeon");
    var SlimeVenom_1 = require("./SlimeVenom");
    var MonsterManager_1 = require("../manager/MonsterManager");
    var NextStep_1 = require("../utils/NextStep");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var Item_1 = require("../item/Item");
    var IndexZ_1 = require("../utils/IndexZ");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var CCollider_1 = require("../collider/CCollider");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var MapManager_1 = require("../manager/MapManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Slime = function(_super) {
      __extends(Slime, _super);
      function Slime() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.venom = null;
        _this.healthBar = null;
        _this.isFaceRight = true;
        _this.isMoving = false;
        _this.timeDelay = 0;
        _this.isHurt = false;
        _this.isCrownFall = false;
        _this.isDashing = false;
        _this.currentlinearVelocitySpeed = cc.Vec2.ZERO;
        _this.scaleSize = 1;
        _this.slimeType = 0;
        _this.meleeSkill = new NextStep_1.default();
        _this.venomTimeDelay = 0;
        _this.childSlimeTimeDelay = 0;
        return _this;
      }
      Slime_1 = Slime;
      Slime.prototype.init = function(type) {
        switch (type) {
         case 0:
          this.scaleSize = 2;
          break;

         case 1:
          this.scaleSize = 1.5;
          break;

         case 2:
          this.scaleSize = 1;
          break;

         case 3:
          this.scaleSize = .5;
          break;

         case 4:
          this.scaleSize = .3;
          break;

         case 5:
         default:
          this.scaleSize = .2;
        }
        this.slimeType = type;
        this.node.scaleY = this.scaleSize;
        this.node.scaleX = this.scaleSize;
      };
      Slime.prototype.onLoad = function() {
        var _this = this;
        this.meleeSkill.IsExcuting = false;
        this.sc.isDied = false;
        this.anim = this.getComponent(cc.Animation);
        this.updatePlayerPos();
        this.venomPool = new cc.NodePool();
        this.sprite = this.node.getChildByName("sprite");
        this.crown = this.sprite.getChildByName("crown");
        this.decorate = this.node.getChildByName("sprite").getChildByName("body").getChildByName("decorate");
        this.dashlight = this.sprite.getChildByName("dashlight");
        this.dashlight.opacity = 0;
        EventHelper_1.EventHelper.on("destoryvenom", function(detail) {
          _this.destroyVenom(detail.coinNode);
        });
        this.scheduleOnce(function() {
          _this.sc.isShow = true;
          _this.entity.NodeRender.node = _this.node;
          _this.entity.Move.damping = 6;
        }, 1);
      };
      Slime.prototype.start = function() {
        _super.prototype.start.call(this);
        this.crown && 0 != this.slimeType && (this.crown.opacity = 0);
        this.decorate && this.slimeType > 2 && (this.decorate.opacity = 0);
      };
      Slime.prototype.getVenom = function(parentNode, pos) {
        if (this.scaleSize < 1 || this.sc.isDied) return;
        var venomPrefab = null;
        this.venomPool.size() > 0 && (venomPrefab = this.venomPool.get());
        venomPrefab && !venomPrefab.active || (venomPrefab = cc.instantiate(this.venom));
        venomPrefab.parent = parentNode;
        venomPrefab.position = pos;
        venomPrefab.scale = 0 == this.slimeType ? 1.5 : 1;
        venomPrefab.getComponent(SlimeVenom_1.default).target = this.dungeon.player;
        venomPrefab.zIndex = IndexZ_1.default.getActorZIndex(this.entity.Transform.position);
        venomPrefab.opacity = 255;
        venomPrefab.active = true;
      };
      Slime.prototype.destroyVenom = function(venomNode) {
        if (!venomNode) return;
        venomNode.active = false;
        this.venomPool && this.venomPool.put(venomNode);
      };
      Slime.prototype.AnimAttacking = function() {
        this.meleeSkill.IsExcuting = false;
        var attackRange = 64 + 50 * this.scaleSize;
        var target = ActorUtils_1.default.getNearestEnemyActor(this.entity.Transform.position, true, this.dungeon);
        var newdis = ActorUtils_1.default.getTargetDistance(this, target);
        newdis < attackRange && target && target.takeDamage(this.data.getAttackPoint(), FromData_1.default.getClone(this.actorName(), "bossslimehelmet", this.node.position), this);
      };
      Slime.prototype.onColliderEnter = function(other, self) {
        if (self.tag == CCollider_1.default.TAG.BOSS_HIT) {
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
          if (target && this.isDashing && this.dungeon && !this.isHurt && !this.sc.isDied) {
            this.isDashing = false;
            this.entity.Move.linearVelocity = cc.Vec2.ZERO;
            target.takeDamage(this.data.getAttackPoint(), FromData_1.default.getClone(this.actorName(), "bossslimehelmet", this.node.position), this);
          }
        }
      };
      Slime.prototype.isVenomTimeDelay = function(dt) {
        this.venomTimeDelay += dt;
        if (this.venomTimeDelay > .2) {
          this.venomTimeDelay = 0;
          return true;
        }
        return false;
      };
      Slime.prototype.isChildSlimeTimeDelay = function(dt) {
        this.childSlimeTimeDelay += dt;
        if (this.childSlimeTimeDelay > 5) {
          this.childSlimeTimeDelay = 0;
          return true;
        }
        return false;
      };
      Slime.prototype.updateLogic = function(dt) {
        this.healthBar.node.active = !this.sc.isDied;
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          this.bossAction();
        }
        this.dashlight.opacity = 0;
        if (this.dungeon && this.isDashing) {
          this.dashlight.opacity = 128;
          this.entity.Move.linearVelocity = this.currentlinearVelocitySpeed.clone();
        }
        if (this.dungeon) {
          var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
          playerDis < 64 && !this.isHurt && (this.entity.Move.linearVelocity = cc.v2(0, 0));
        }
        this.sc.isDied && (this.entity.Move.linearVelocity = cc.Vec2.ZERO);
        this.healthBar.node.active = !this.sc.isDied;
        this.data.currentHealth < 1 && this.killed();
        this.node.scaleY = this.scaleSize;
        this.node.scaleX = this.isFaceRight ? this.scaleSize : -this.scaleSize;
        this.isVenomTimeDelay(dt) && this.isMoving && !this.meleeSkill.IsExcuting && this.getVenom(this.node.parent, this.entity.Transform.position);
        if (this.isChildSlimeTimeDelay(dt) && !this.sc.isDied && 0 == this.slimeType && this.dungeon) {
          var count = 0;
          for (var _i = 0, _a = this.dungeon.monsterManager.monsterList; _i < _a.length; _i++) {
            var m = _a[_i];
            m.sc.isDied || count++;
          }
          if (count < 10 && this.dungeon.monsterManager.monsterList.length < 50) {
            var pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position.clone());
            this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_SLIME, pos, this.dungeon, true);
          }
        }
      };
      Slime.prototype.takeDamage = function(damage) {
        var _this = this;
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.isHurt = true;
        this.isDashing = false;
        this.scheduleOnce(function() {
          _this.node && (_this.isHurt = false);
        }, .1);
        this.anim.play("SlimeHit");
        this.meleeSkill.IsExcuting = false;
        if (this.data.currentHealth < this.data.Common.MaxHealth / 2 && !this.isCrownFall && 0 == this.slimeType) {
          this.isCrownFall = true;
          this.sc.isShow = false;
          this.scheduleOnce(function() {
            _this.sc.isShow = true;
            _this.crown.opacity = 0;
          }, 1);
          this.anim.play("SlimeCrownFall");
        }
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Slime.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        this.sc.isDied = true;
        this.isDashing = false;
        this.anim.play("SlimeDie");
        var collider = this.getComponent(CCollider_1.default);
        collider.sensor = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        if (this.dungeon) {
          if (0 == this.slimeType) {
            var rand4save = Logic_1.default.mapManager.getRandom4Save(this.seed, MapManager_1.default.RANDOM_BOSS);
            Achievement_1.default.addMonsterKillAchievement(this.data.resName);
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, {
              pos: this.entity.Transform.position,
              count: 100
            });
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              pos: this.entity.Transform.position,
              res: Item_1.default.HEART
            });
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              pos: this.entity.Transform.position,
              res: Item_1.default.DREAM
            });
            this.dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(this.pos), null, EquipmentManager_1.default.QUALITY_ORANGE);
          }
          if (this.slimeType < Slime_1.DIVIDE_COUNT) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
              pos: this.entity.Transform.position,
              count: 5
            });
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.BOSS_ADDSLIME, {
              posIndex: this.pos.clone(),
              slimeType: this.slimeType + 1
            });
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.BOSS_ADDSLIME, {
              posIndex: this.pos.clone(),
              slimeType: this.slimeType + 1
            });
          }
        }
      };
      Slime.prototype.bossAction = function() {
        var _this = this;
        if (this.sc.isDied || !this.dungeon || this.isHurt) return;
        var newPos = cc.v3(0, 0);
        newPos.x += Logic_1.default.getRandomNum(0, 2e3) - 1e3;
        newPos.y += Logic_1.default.getRandomNum(0, 2e3) - 1e3;
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        this.entity.Transform.position = Dungeon_1.default.fixOuterMap(this.entity.Transform.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position);
        this.changeZIndex();
        var pos = newPos.clone();
        var attackRange = 64 + 50 * this.scaleSize;
        if (playerDis < attackRange && !this.dungeon.player.sc.isDied && !this.isDashing && this.sc.isShow && this.scaleSize >= 1) {
          pos = this.dungeon.player.getCenterPosition().sub(this.entity.Transform.position);
          pos.equals(cc.Vec3.ZERO) || (pos = pos.normalizeSelf());
          var isPlayAttack = this.anim.getAnimationState("SlimeAttack").isPlaying;
          if (!isPlayAttack) {
            this.meleeSkill.IsExcuting = true;
            this.anim.play("SlimeAttack");
          }
        }
        var speed = 6 - 1 * this.scaleSize;
        speed < 0 && (speed = .5);
        var dashRange = 128 + 35 * this.scaleSize;
        if (playerDis > dashRange && !this.dungeon.player.sc.isDied && !this.isDashing && this.sc.isShow && Logic_1.default.getHalfChance()) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          Logic_1.default.getHalfChance() && (pos = this.dungeon.player.getCenterPosition().sub(this.entity.Transform.position));
          this.move(pos, 1.5 * speed);
          this.isDashing = true;
          this.scheduleOnce(function() {
            _this.node && (_this.isDashing = false);
          }, 2);
        }
        Logic_1.default.getRandomNum(1, 10) < 3 && this.move(pos, speed);
      };
      Slime.prototype.move = function(pos, speed) {
        if (this.sc.isDied || this.isHurt || this.isDashing || !this.sc.isShow || this.meleeSkill.IsExcuting) return;
        if (pos.equals(cc.Vec3.ZERO)) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.normalize().mul(speed);
        this.entity.Move.linearVelocity = movement.clone();
        this.currentlinearVelocitySpeed = movement.clone();
        this.isMoving = 0 != h || 0 != v;
        this.isMoving && (this.isFaceRight = h > 0);
        var isPlayAttack = this.anim.getAnimationState("SlimeAttack").isPlaying;
        this.anim.getAnimationState("SlimeIdle").isPlaying || isPlayAttack || this.anim.play("SlimeIdle");
        this.changeZIndex();
      };
      Slime.prototype.actorName = function() {
        return "\u53f2\u83b1\u59c6\u4e4b\u738b";
      };
      var Slime_1;
      Slime.DIVIDE_COUNT = 4;
      __decorate([ property(cc.Prefab) ], Slime.prototype, "venom", void 0);
      Slime = Slime_1 = __decorate([ ccclass ], Slime);
      return Slime;
    }(Boss_1.default);
    exports.default = Slime;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/FromData": "FromData",
    "../item/Item": "Item",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/EquipmentManager": "EquipmentManager",
    "../manager/MapManager": "MapManager",
    "../manager/MonsterManager": "MonsterManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "../utils/NextStep": "NextStep",
    "./Boss": "Boss",
    "./SlimeVenom": "SlimeVenom"
  } ],
  SpecialManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e58b4559dND3JlWZESKg4rV", "SpecialManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SlimeVenom_1 = require("../boss/SlimeVenom");
    var DamageData_1 = require("../data/DamageData");
    var StatusManager_1 = require("./StatusManager");
    var NonPlayer_1 = require("../logic/NonPlayer");
    var IndexZ_1 = require("../utils/IndexZ");
    var AreaOfEffect_1 = require("../actor/AreaOfEffect");
    var AreaOfEffectData_1 = require("../data/AreaOfEffectData");
    var Logic_1 = require("../logic/Logic");
    var EventHelper_1 = require("../logic/EventHelper");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SpecialManager = function(_super) {
      __extends(SpecialManager, _super);
      function SpecialManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.aoe = null;
        _this.venom = null;
        _this.howl = null;
        _this.claw = null;
        _this.blade = null;
        return _this;
      }
      SpecialManager_1 = SpecialManager;
      SpecialManager.prototype.clear = function() {};
      SpecialManager.prototype.addPlacement = function(placeType, distance, isFaceRight, from, isVariation) {
        if (!this.dungeon) return;
        var pos = this.node.convertToWorldSpaceAR(cc.v3(distance, 0));
        pos = this.dungeon.node.convertToNodeSpaceAR(pos);
        switch (placeType) {
         case SpecialManager_1.AFTER_VENOM:
          this.addVenom(pos, isFaceRight, from, isVariation);
          break;

         case SpecialManager_1.AFTER_CLAW:
          this.addClaw(pos, isFaceRight, from, isVariation);
          break;

         case SpecialManager_1.AFTER_BLADE:
          this.addBlade(pos, isFaceRight, from, isVariation);
          break;

         case SpecialManager_1.AFTER_ASH:
          this.addAoe(pos, new AreaOfEffectData_1.default().init(.3, .3, .1, isVariation ? 4 : 3, IndexZ_1.default.getActorZIndex(this.node.parent.position), true, true, true, false, false, new DamageData_1.default(2), from, [ StatusManager_1.default.DIZZ ]), [ "ash001", "ash002", "ash003", "ash004" ], false, isFaceRight);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            isHeavyShaking: true
          });

         case SpecialManager_1.AFTER_ICE:
          AudioPlayer_1.default.play(AudioPlayer_1.default.ICEBOOM);
          this.addAoe(pos, new AreaOfEffectData_1.default().init(.8, 1, .2, isVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(this.node.parent.position), true, true, true, false, false, new DamageData_1.default(3), from, [ StatusManager_1.default.FROZEN ]), [ "ice001", "ice002", "ice002", "ice003", "ice004" ], false, isFaceRight);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            isHeavyShaking: false
          });
          break;

         case SpecialManager_1.AFTER_DOWN:
          AudioPlayer_1.default.play(AudioPlayer_1.default.ZOMBIE_FALL);
          this.addAoe(pos, new AreaOfEffectData_1.default().init(.3, 1, .1, isVariation ? 2 : 1, IndexZ_1.default.getActorZIndex(this.node.parent.position), true, true, true, false, false, new DamageData_1.default(1), from, [ StatusManager_1.default.FALLEN_DOWN ]), [ "ash001", "ash002", "ash003", "ash004" ], false, isFaceRight);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            isHeavyShaking: false
          });
          break;

         case SpecialManager_1.AFTER_SWORD:
          pos.y += 32;
          this.addAoe(pos, new AreaOfEffectData_1.default().init(.4, .1, 0, isVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(this.node.parent.position), true, true, true, false, false, new DamageData_1.default(4), from, [ StatusManager_1.default.BLEEDING ]), [ "specialswordlight001", "specialswordlight002", "specialswordlight003", "specialswordlight004" ], false, isFaceRight);
        }
      };
      SpecialManager.prototype.addEffect = function(placeType, distance, isFaceRight, from, isVariation) {
        if (!this.dungeon) return;
        var pos = this.node.convertToWorldSpaceAR(cc.v3(distance, 0));
        pos = this.dungeon.node.convertToNodeSpaceAR(pos);
        switch (placeType) {
         case SpecialManager_1.BEFORE_HOWL:
          this.addHowl(pos, isFaceRight, from, isVariation);
        }
      };
      SpecialManager.prototype.addVenom = function(pos, isFaceRight, from, isVariation) {
        var venom = cc.instantiate(this.venom);
        venom.getComponent(SlimeVenom_1.default).target = this.dungeon.player;
        venom.getComponent(SlimeVenom_1.default).isForever = false;
        venom.getComponent(SlimeVenom_1.default).from.valueCopy(from);
        venom.parent = this.dungeon.node;
        venom.position = pos;
        venom.zIndex = IndexZ_1.default.ACTOR;
        venom.scale = 0;
        cc.tween(venom).to(.5, {
          scale: isVariation ? 3 : 2
        }).start();
        AudioPlayer_1.default.play(AudioPlayer_1.default.ZOMBIE_SPITTING1);
      };
      SpecialManager.prototype.addHowl = function(pos, isFaceRight, from, isVariation) {
        var monster = this.node.parent.getComponent(NonPlayer_1.default);
        monster && monster.addStatus(StatusManager_1.default.WEREWOLFDEFENCE, from);
        var howl = cc.instantiate(this.howl);
        var howlScript = howl.getComponent(AreaOfEffect_1.default);
        howlScript.show(this.dungeon.node, pos, cc.v2(1, 0), 0, new AreaOfEffectData_1.default().init(0, 2, 1.5, isVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(howl.position), true, false, true, false, false, new DamageData_1.default(1), from, [ StatusManager_1.default.DIZZ ]));
      };
      SpecialManager.prototype.addClaw = function(pos, isFaceRight, from, isVariation) {
        var claw = cc.instantiate(this.claw);
        pos.y += 32;
        var areaScript = claw.getComponent(AreaOfEffect_1.default);
        areaScript.show(this.dungeon.node, pos, cc.v2(1, 0), 0, new AreaOfEffectData_1.default().init(0, .15, .1, isVariation ? 2 : 1, IndexZ_1.default.getActorZIndex(claw.position), true, false, true, false, false, new DamageData_1.default(2), from, [ StatusManager_1.default.BLEEDING ]));
      };
      SpecialManager.prototype.addAoe = function(pos, aoeData, spriteFrameNames, repeatForever, isFaceRight) {
        var aoe = cc.instantiate(this.aoe);
        pos.y += 32;
        var sprite = aoe.getChildByName("sprite").getComponent(cc.Sprite);
        var collider = aoe.getComponent(CCollider_1.default);
        if (spriteFrameNames.length > 0) {
          var spriteframe = Logic_1.default.spriteFrameRes(spriteFrameNames[0]);
          sprite.node.width = spriteframe.getOriginalSize().width;
          sprite.node.height = spriteframe.getOriginalSize().height;
          sprite.node.scale = 4;
          sprite.node.scaleX = isFaceRight ? 4 : -4;
          collider.w = 3 * sprite.node.width;
          collider.h = 3 * sprite.node.height;
        }
        var tween = cc.tween();
        var _loop_1 = function(name) {
          tween.then(cc.tween().delay(.2).call(function() {
            sprite.spriteFrame = Logic_1.default.spriteFrameRes(name);
          }));
        };
        for (var _i = 0, spriteFrameNames_1 = spriteFrameNames; _i < spriteFrameNames_1.length; _i++) {
          var name = spriteFrameNames_1[_i];
          _loop_1(name);
        }
        repeatForever ? cc.tween(aoe).repeatForever(tween).start() : cc.tween(aoe).then(tween).delay(.2).call(function() {
          sprite.spriteFrame = null;
        }).start();
        var areaScript = aoe.getComponent(AreaOfEffect_1.default);
        areaScript.show(this.dungeon.node, pos, cc.v2(1, 0), 0, aoeData);
      };
      SpecialManager.prototype.addBlade = function(pos, isFaceRight, from, isVariation) {
        var prefab = cc.instantiate(this.blade);
        pos.y += 64;
        prefab.scaleX = isFaceRight ? 1 : -1;
        var areaScript = prefab.getComponent(AreaOfEffect_1.default);
        areaScript.show(this.dungeon.node, pos, cc.v2(1, 0), 0, new AreaOfEffectData_1.default().init(0, .2, .1, isVariation ? 2 : 1, IndexZ_1.default.getActorZIndex(prefab.position), true, false, true, false, false, new DamageData_1.default(2), from, []));
      };
      var SpecialManager_1;
      SpecialManager.BEFORE_HOWL = "special015";
      SpecialManager.AFTER_VENOM = "special019";
      SpecialManager.AFTER_CLAW = "special024";
      SpecialManager.AFTER_BLADE = "special008";
      SpecialManager.AFTER_ASH = "special030";
      SpecialManager.AFTER_ICE = "special031";
      SpecialManager.AFTER_DOWN = "special032";
      SpecialManager.AFTER_SWORD = "special033";
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "aoe", void 0);
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "venom", void 0);
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "howl", void 0);
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "claw", void 0);
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "blade", void 0);
      SpecialManager = SpecialManager_1 = __decorate([ ccclass ], SpecialManager);
      return SpecialManager;
    }(cc.Component);
    exports.default = SpecialManager;
    cc._RF.pop();
  }, {
    "../actor/AreaOfEffect": "AreaOfEffect",
    "../boss/SlimeVenom": "SlimeVenom",
    "../collider/CCollider": "CCollider",
    "../data/AreaOfEffectData": "AreaOfEffectData",
    "../data/DamageData": "DamageData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../logic/NonPlayer": "NonPlayer",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/IndexZ": "IndexZ",
    "./StatusManager": "StatusManager"
  } ],
  Sphinx: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "613334RiSdNUKEp1LtYmQ1e", "Sphinx");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var Shooter_1 = require("../logic/Shooter");
    var Dungeon_1 = require("../logic/Dungeon");
    var StatusManager_1 = require("../manager/StatusManager");
    var NextStep_1 = require("../utils/NextStep");
    var MonsterManager_1 = require("../manager/MonsterManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Sphinx = function(_super) {
      __extends(Sphinx, _super);
      function Sphinx() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.stormSkill = new NextStep_1.default();
        _this.summonSkill = new NextStep_1.default();
        _this.actionTimeDelay = 0;
        return _this;
      }
      Sphinx.prototype.init = function(type) {
        throw new Error("Method not implemented.");
      };
      Sphinx.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter01 = this.node.getChildByName("Shooter01").getComponent(Shooter_1.default);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.shooter01.from.valueCopy(FromData_1.default.getClone(this.actorName(), "sphinxhead", this.node.position));
      };
      Sphinx.prototype.start = function() {};
      Sphinx.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        this.playHit(this.node.getChildByName("sprite"));
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Sphinx.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Sphinx.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.changeZIndex();
        this.fireStorm();
        this.summonMonster();
      };
      Sphinx.prototype.summonMonster = function() {
        var _this = this;
        if (this.dungeon.getMonsterAliveNum() > 1) return;
        this.summonSkill.next(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          _this.summonSkill.IsExcuting = true;
          var pos = Dungeon_1.default.getIndexInMap(_this.entity.Transform.position.clone());
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_SANDSTATUE, cc.v3(pos.x, pos.y - 1), _this.dungeon, true);
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_SANDSTATUE, cc.v3(pos.x + 1, pos.y - 1), _this.dungeon, true);
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_SANDSTATUE, cc.v3(pos.x - 1, pos.y - 1), _this.dungeon, true);
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_ANUBIS, cc.v3(pos.x - 1, pos.y - 2), _this.dungeon, true);
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_ANUBIS, cc.v3(pos.x + 1, pos.y - 2), _this.dungeon, true);
        }, 15, true);
      };
      Sphinx.prototype.fireStorm = function() {
        var _this = this;
        this.stormSkill.next(function() {
          _this.stormSkill.IsExcuting = true;
          _this.anim.play("SphinxStorm");
          _this.scheduleOnce(function() {
            var pos = _this.entity.Transform.position.clone().add(_this.shooter01.node.position);
            var hv = _this.dungeon.player.getCenterPosition().sub(pos);
            if (!hv.equals(cc.Vec3.ZERO)) {
              _this.shooter01.setHv(cc.v2(hv).normalize());
              _this.fireShooter(_this.shooter01, "bullet023", 0, -20);
              _this.fireShooter(_this.shooter01, "bullet123", 0, 0, 0);
              _this.fireShooter(_this.shooter01, "bullet223", 0, 0, 20);
            }
          }, .3);
          _this.scheduleOnce(function() {
            _this.stormSkill.IsExcuting = false;
            _this.anim.play("SphinxIdle");
          }, 2);
        }, 8, true);
      };
      Sphinx.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.actor = this;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle, cc.Vec3.ZERO);
      };
      Sphinx.prototype.showBoss = function() {
        this.sc.isShow = true;
        this.entity.NodeRender.node = this.node;
        this.entity.Move.damping = 6;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      Sphinx.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Sphinx.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.entity.Move.linearVelocity = cc.Vec2.ZERO;
      };
      Sphinx.prototype.actorName = function() {
        return "\u65af\u82ac\u514b\u65af";
      };
      Sphinx = __decorate([ ccclass ], Sphinx);
      return Sphinx;
    }(Boss_1.default);
    exports.default = Sphinx;
    cc._RF.pop();
  }, {
    "../data/FromData": "FromData",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../manager/MonsterManager": "MonsterManager",
    "../manager/StatusManager": "StatusManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/NextStep": "NextStep",
    "./Boss": "Boss"
  } ],
  StackStateMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d89awtDlhAe5Rtlx6ayPx5", "StackStateMachine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DefaultStateMachine_1 = require("./DefaultStateMachine");
    var StackStateMachine = function(_super) {
      __extends(StackStateMachine, _super);
      function StackStateMachine(owner, initialState, globalState) {
        return _super.call(this, owner, initialState, globalState) || this;
      }
      StackStateMachine.prototype.setInitialState = function(state) {
        this.stateStack = new Array();
        this.currentState = state;
      };
      StackStateMachine.prototype.getCurrentState = function() {
        return this.currentState;
      };
      StackStateMachine.prototype.getPreviousState = function() {
        return 0 == this.stateStack.length ? null : this.stateStack[this.stateStack.length - 1];
      };
      StackStateMachine.prototype.changeState = function(newState) {
        this._changeState(newState, true);
      };
      StackStateMachine.prototype.revertToPreviousState = function() {
        if (0 == this.stateStack.length) return false;
        var previousState = this.stateStack.pop();
        this._changeState(previousState, false);
        return true;
      };
      StackStateMachine.prototype._changeState = function(newState, pushCurrentStateToStack) {
        pushCurrentStateToStack && this.currentState && this.stateStack.push(this.currentState);
        this.currentState && this.currentState.exit(this.owner);
        this.currentState = newState;
        this.currentState.enter(this.owner);
      };
      return StackStateMachine;
    }(DefaultStateMachine_1.default);
    exports.default = StackStateMachine;
    cc._RF.pop();
  }, {
    "./DefaultStateMachine": "DefaultStateMachine"
  } ],
  Stairs: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6eb54rEXhdB+LOy8sHLgpbr", "Stairs");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Stairs = function(_super) {
      __extends(Stairs, _super);
      function Stairs() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.root = null;
        _this.wall = null;
        return _this;
      }
      Stairs.prototype.init = function(mapStr) {
        var z = parseInt(mapStr[5]) * Dungeon_1.default.TILE_SIZE / 2;
        this.root.y = z;
        this.entity.Move.gravity = 0;
        this.wall.height = z;
        for (var _i = 0, _a = this.ccolliders; _i < _a.length; _i++) {
          var collider = _a[_i];
          collider.zHeight += z;
        }
      };
      Stairs.TYPE_FRONT = "V000";
      Stairs.TYPE_BEHIND = "V001";
      Stairs.TYPE_LEFT = "V002";
      Stairs.TYPE_RIGHT = "V003";
      Stairs.TYPE_PLATFORM = "V004";
      __decorate([ property(cc.Node) ], Stairs.prototype, "root", void 0);
      __decorate([ property(cc.Node) ], Stairs.prototype, "wall", void 0);
      Stairs = __decorate([ ccclass ], Stairs);
      return Stairs;
    }(Building_1.default);
    exports.default = Stairs;
    cc._RF.pop();
  }, {
    "../logic/Dungeon": "Dungeon",
    "./Building": "Building"
  } ],
  StartBackground: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b0949K3dtID5hiTr0pvVWm", "StartBackground");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Controller_1 = require("../logic/Controller");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StartBackground = function(_super) {
      __extends(StartBackground, _super);
      function StartBackground() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bg1 = null;
        _this.bg2 = null;
        _this.bg3 = null;
        _this.bg4 = null;
        _this.bg5 = null;
        _this.bg6 = null;
        _this.bg7 = null;
        _this.defaultArr = [ cc.v3(0, -120), cc.v3(0, -120), cc.v3(800, -120), cc.v3(0, 0), cc.v3(0, 0), cc.v3(0, -600), cc.v3(0, 0) ];
        _this.bgArr = [];
        _this.isStarted = false;
        _this.touchPos = cc.v2(0, 0);
        _this.LENGTH = 720;
        return _this;
      }
      StartBackground.prototype.onLoad = function() {
        var _this = this;
        this.bgArr.push(this.bg1);
        this.bgArr.push(this.bg2);
        this.bgArr.push(this.bg3);
        this.bgArr.push(this.bg4);
        this.bgArr.push(this.bg5);
        this.bgArr.push(this.bg6);
        this.bgArr.push(this.bg7);
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.isStarted || (_this.touchPos = _this.node.convertToNodeSpaceAR(event.getLocation()));
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          _this.isStarted || (_this.touchPos = _this.node.convertToNodeSpaceAR(event.getLocation()));
        }, this);
        this.node.on(cc.Node.EventType.MOUSE_MOVE, function(event) {
          _this.isStarted || (_this.touchPos = _this.node.convertToNodeSpaceAR(event.getLocation()));
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.touchPos = cc.v2(0, 0);
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.touchPos = cc.v2(0, 0);
        }, this);
      };
      StartBackground.prototype.startPressed = function() {
        if (this.isStarted) return;
        this.isStarted = true;
        for (var i = 0; i < this.bgArr.length; i++) {
          var targetPos = this.defaultArr[i].clone();
          this.bgArr[i].position = targetPos;
        }
        this.getComponent(cc.Animation).play();
      };
      StartBackground.prototype.update = function(dt) {
        if (!this.isStarted) for (var i = 0; i < this.bgArr.length; i++) {
          var targetPos = this.defaultArr[i].clone();
          var offset = this.touchPos.x / this.LENGTH * 60 * i;
          Controller_1.default.isMouseMode() && (offset = -offset / 5);
          targetPos.x += offset;
          this.bgArr[i].position = Logic_1.default.lerpPos(this.bgArr[i].position, targetPos, dt * i * 2);
        }
      };
      __decorate([ property(cc.Node) ], StartBackground.prototype, "bg1", void 0);
      __decorate([ property(cc.Node) ], StartBackground.prototype, "bg2", void 0);
      __decorate([ property(cc.Node) ], StartBackground.prototype, "bg3", void 0);
      __decorate([ property(cc.Node) ], StartBackground.prototype, "bg4", void 0);
      __decorate([ property(cc.Node) ], StartBackground.prototype, "bg5", void 0);
      __decorate([ property(cc.Node) ], StartBackground.prototype, "bg6", void 0);
      __decorate([ property(cc.Node) ], StartBackground.prototype, "bg7", void 0);
      StartBackground = __decorate([ ccclass ], StartBackground);
      return StartBackground;
    }(cc.Component);
    exports.default = StartBackground;
    cc._RF.pop();
  }, {
    "../logic/Controller": "Controller",
    "../logic/Logic": "Logic"
  } ],
  StartFlies: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "940ceU03yRC9ZyNIc8uGCB0", "StartFlies");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Random_1 = require("../utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StartFlies = function(_super) {
      __extends(StartFlies, _super);
      function StartFlies() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      StartFlies.prototype.onLoad = function() {};
      StartFlies.prototype.FlyStart = function() {
        var sprite = this.node.getChildByName("sprite");
        sprite.y = Random_1.default.getRandomNum(0, 200);
        var offset = 1 - sprite.y / 200;
        offset < .5 && (offset = .5);
        this.node.getComponent(cc.Animation).getAnimationState("StartFlyMove").speed = offset;
        var _loop_1 = function(c) {
          var x = Random_1.default.getRandomNum(-200 * offset, 200 * offset);
          var y = Random_1.default.getRandomNum(-100 * offset, 100 * offset);
          c.x = x;
          c.y = y;
          c.scale = Random_1.default.getRandomNum(50 * offset, 100 * offset) / 10;
          c.getComponent(cc.Animation).pause();
          this_1.scheduleOnce(function() {
            c.getComponent(cc.Animation).resume();
          }, Random_1.default.rand());
          c.active = Random_1.default.getHalfChance();
          var r = Random_1.default.getRandomNum(200, 255);
          var g = Random_1.default.getRandomNum(200, 255);
          var b = Random_1.default.getRandomNum(200, 255);
          c.color = cc.color(r, g, b);
        };
        var this_1 = this;
        for (var _i = 0, _a = sprite.children; _i < _a.length; _i++) {
          var c = _a[_i];
          _loop_1(c);
        }
      };
      StartFlies.prototype.start = function() {};
      StartFlies = __decorate([ ccclass ], StartFlies);
      return StartFlies;
    }(cc.Component);
    exports.default = StartFlies;
    cc._RF.pop();
  }, {
    "../utils/Random": "Random"
  } ],
  Start: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e1b90/rohdEk4SdmmEZANaD", "Start");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var NoticeDialog_1 = require("../ui/dialog/NoticeDialog");
    var StartBackground_1 = require("../ui/StartBackground");
    var SaveSlotDialog_1 = require("../ui/dialog/SaveSlotDialog");
    var LocalStorage_1 = require("../utils/LocalStorage");
    var ExitData_1 = require("../data/ExitData");
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Start = function(_super) {
      __extends(Start, _super);
      function Start() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.title = null;
        _this.startButton = null;
        _this.continueButton = null;
        _this.cheatButton = null;
        _this.debugButton = null;
        _this.tourButton = null;
        _this.achieveButton = null;
        _this.noticeButton = null;
        _this.noticeDialog = null;
        _this.startBg = null;
        _this.cursorAreaPrefab = null;
        _this.saveSlotDialog = null;
        _this.cheatClickCount = 0;
        _this.debugClickCount = 0;
        _this.tourClickCount = 0;
        return _this;
      }
      Start.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DELETE_SAVE_SLOT, function(detail) {
          _this.showButtons();
        });
        this.cheatButton.opacity = Logic_1.default.isCheatMode ? 255 : 0;
        this.debugButton.opacity = Logic_1.default.isDebug ? 255 : 0;
        this.noticeDialog.node.active = false;
        this.saveSlotDialog.node.active = false;
        this.saveSlotDialog.onItemSelectListener(function(slotIndex) {
          _this._startShow();
          _this.scheduleOnce(function() {
            Logic_1.default.jumpSlotIndex = slotIndex;
            Logic_1.default.resetData();
            if (Logic_1.default.profileManager.hasSaveData) _this.scheduleOnce(function() {
              Logic_1.default.loadingNextLevel(ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level), true);
            }, .5); else {
              Logic_1.default.jumpSlotIndex = slotIndex;
              cc.director.loadScene("pickavatar");
            }
          }, .5);
        });
        this.test();
      };
      Start.prototype.test = function() {};
      Start.prototype.start = function() {
        this.showButtons();
      };
      Start.prototype.showButtons = function() {
        var _this = this;
        if (this.continueButton) {
          Logic_1.default.jumpSlotIndex = LocalStorage_1.default.getLastSaveSlotKey();
          Logic_1.default.resetData();
          this.continueButton.active = Logic_1.default.profileManager.hasSaveData;
          this.continueButton.active ? this.scheduleOnce(function() {
            _this.continueButton.getComponent(cc.Animation).play();
          }, 2) : this.scheduleOnce(function() {
            _this.startButton.getComponent(cc.Animation).play();
          }, 2);
        }
      };
      Start.prototype._startShow = function() {
        this.startBg.startPressed();
        cc.tween(this.title).to(.5, {
          opacity: 0
        }).start();
        cc.tween(this.startButton).to(.5, {
          opacity: 0
        }).start();
        cc.tween(this.continueButton).to(.5, {
          opacity: 0
        }).start();
        cc.tween(this.achieveButton).to(.5, {
          opacity: 0
        }).start();
        cc.tween(this.noticeButton).to(.5, {
          opacity: 0
        }).start();
      };
      Start.prototype.startGame = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.saveSlotDialog.show();
      };
      Start.prototype.chooseChapter = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.loadScene("chapter");
      };
      Start.prototype.achievementScene = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this._startShow();
        this.scheduleOnce(function() {
          cc.director.loadScene("achievement");
        }, .5);
      };
      Start.prototype.continueGame = function() {
        Logic_1.default.jumpSlotIndex = LocalStorage_1.default.getLastSaveSlotKey();
        Logic_1.default.resetData();
        Logic_1.default.isFirst = 1;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this._startShow();
        this.scheduleOnce(function() {
          Logic_1.default.loadingNextLevel(ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level), true);
        }, .5);
      };
      Start.prototype.cheatModeChange = function() {
        if (!this.cheatButton) return;
        if (Logic_1.default.isCheatMode) {
          Logic_1.default.isCheatMode = false;
          this.cheatClickCount = 0;
          return;
        }
        this.cheatClickCount++;
        this.cheatClickCount > 2 && (Logic_1.default.isCheatMode = true);
      };
      Start.prototype.debugModeChange = function() {
        if (!this.debugButton) return;
        if (Logic_1.default.isDebug) {
          Logic_1.default.isDebug = false;
          this.debugClickCount = 0;
          return;
        }
        this.debugClickCount++;
        if (this.debugClickCount > 2) {
          Logic_1.default.isDebug = true;
          cc.debug.setDisplayStats(true);
        }
      };
      Start.prototype.update = function(dt) {
        this.debugButton && (this.debugButton.opacity = Logic_1.default.isDebug ? 255 : 0);
        this.cheatButton && (this.cheatButton.opacity = Logic_1.default.isCheatMode ? 255 : 0);
        this.tourButton && (this.tourButton.opacity = Logic_1.default.isTour ? 255 : 0);
        cc.director.getScheduler().setTimeScale(1);
      };
      Start.prototype.tourChange = function() {
        if (!this.tourButton) return;
        if (Logic_1.default.isTour) {
          Logic_1.default.isTour = false;
          this.tourClickCount = 0;
          return;
        }
        this.tourClickCount++;
        this.tourClickCount > 2 && (Logic_1.default.isTour = true);
      };
      Start.prototype.showNotice = function() {
        this.noticeDialog && this.noticeDialog.show();
      };
      Start.prototype.goTest = function() {
        cc.director.loadScene("test");
      };
      Start.prototype.goQuestEditor = function() {
        cc.director.loadScene("questeditor");
      };
      __decorate([ property(cc.Node) ], Start.prototype, "title", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "startButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "continueButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "cheatButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "debugButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "tourButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "achieveButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "noticeButton", void 0);
      __decorate([ property(NoticeDialog_1.default) ], Start.prototype, "noticeDialog", void 0);
      __decorate([ property(StartBackground_1.default) ], Start.prototype, "startBg", void 0);
      __decorate([ property(cc.Prefab) ], Start.prototype, "cursorAreaPrefab", void 0);
      __decorate([ property(SaveSlotDialog_1.default) ], Start.prototype, "saveSlotDialog", void 0);
      Start = __decorate([ ccclass ], Start);
      return Start;
    }(cc.Component);
    exports.default = Start;
    cc._RF.pop();
  }, {
    "../data/ExitData": "ExitData",
    "../ui/StartBackground": "StartBackground",
    "../ui/dialog/NoticeDialog": "NoticeDialog",
    "../ui/dialog/SaveSlotDialog": "SaveSlotDialog",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/LocalStorage": "LocalStorage",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  StateContext: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "355460dkOZEM7Y62EU2S7oe", "StateContext");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StateContext = function() {
      function StateContext() {
        this.isShow = false;
        this.isDied = false;
        this.isAttacking = false;
        this.isDisguising = false;
        this.isMoving = false;
        this.isDodging = false;
        this.isHurting = false;
        this.isDashing = false;
        this.isDizzing = false;
        this.isFalling = false;
        this.isBlinking = false;
        this.isJumping = false;
        this.isVanishing = false;
        this.isTalking = false;
        this.isFlying = false;
        this.isShooting = false;
        this.isOtherAniming = false;
        this.isBlocking = false;
      }
      return StateContext;
    }();
    exports.default = StateContext;
    cc._RF.pop();
  }, {} ],
  StateMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d6268XDmGFEdZj+80HdRhZG", "StateMachine");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  State: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee6413dVQ9N85ndee/MSlIy", "State");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  StatusConditionType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cfb92WuPb1L4plYKZHdFxR/", "StatusConditionType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusConditionType = void 0;
    var StatusConditionType;
    (function(StatusConditionType) {
      StatusConditionType[StatusConditionType["SUITS1"] = 0] = "SUITS1";
      StatusConditionType[StatusConditionType["SUITS2"] = 1] = "SUITS2";
      StatusConditionType[StatusConditionType["SUITS3"] = 2] = "SUITS3";
      StatusConditionType[StatusConditionType["ITEM_REMOVE"] = 3] = "ITEM_REMOVE";
      StatusConditionType[StatusConditionType["ITEM_TICK"] = 4] = "ITEM_TICK";
      StatusConditionType[StatusConditionType["ITEM_USE"] = 5] = "ITEM_USE";
      StatusConditionType[StatusConditionType["MELEE_ATTACK"] = 6] = "MELEE_ATTACK";
      StatusConditionType[StatusConditionType["MELEE_COMBO"] = 7] = "MELEE_COMBO";
      StatusConditionType[StatusConditionType["MELEE_KILL"] = 8] = "MELEE_KILL";
      StatusConditionType[StatusConditionType["REMOTE_ATTACK"] = 9] = "REMOTE_ATTACK";
      StatusConditionType[StatusConditionType["REMOTE_HIT"] = 10] = "REMOTE_HIT";
      StatusConditionType[StatusConditionType["REMOTE_KILL"] = 11] = "REMOTE_KILL";
      StatusConditionType[StatusConditionType["REMOTE_COMBO"] = 12] = "REMOTE_COMBO";
      StatusConditionType[StatusConditionType["SKILL_START"] = 13] = "SKILL_START";
      StatusConditionType[StatusConditionType["SKILL_END"] = 14] = "SKILL_END";
      StatusConditionType[StatusConditionType["SKILL_TICK"] = 15] = "SKILL_TICK";
      StatusConditionType[StatusConditionType["TAKE_DAMAGE"] = 16] = "TAKE_DAMAGE";
      StatusConditionType[StatusConditionType["AOE_HIT"] = 17] = "AOE_HIT";
      StatusConditionType[StatusConditionType["AOE_ADD"] = 18] = "AOE_ADD";
      StatusConditionType[StatusConditionType["AOE_REMOVE"] = 19] = "AOE_REMOVE";
      StatusConditionType[StatusConditionType["AOE_TICK"] = 20] = "AOE_TICK";
      StatusConditionType[StatusConditionType["AOE_KILL"] = 21] = "AOE_KILL";
      StatusConditionType[StatusConditionType["STATUS_KILL"] = 22] = "STATUS_KILL";
      StatusConditionType[StatusConditionType["STANDSTILL"] = 23] = "STANDSTILL";
      StatusConditionType[StatusConditionType["MOVE"] = 24] = "MOVE";
      StatusConditionType[StatusConditionType["DREAM_OUT"] = 25] = "DREAM_OUT";
      StatusConditionType[StatusConditionType["DREAM_FULL"] = 26] = "DREAM_FULL";
      StatusConditionType[StatusConditionType["HEALTH_OUT"] = 27] = "HEALTH_OUT";
      StatusConditionType[StatusConditionType["HEALTH_FULL"] = 28] = "HEALTH_FULL";
      StatusConditionType[StatusConditionType["HEALTH_HALF"] = 29] = "HEALTH_HALF";
      StatusConditionType[StatusConditionType["DISPEL"] = 30] = "DISPEL";
    })(StatusConditionType = exports.StatusConditionType || (exports.StatusConditionType = {}));
    cc._RF.pop();
  }, {} ],
  StatusData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6cc1ffzwVEGqcTbp1oM4Mh", "StatusData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var CommonData_1 = require("./CommonData");
    var FromData_1 = require("./FromData");
    var StatusData = function() {
      function StatusData() {
        this.id = 0;
        this.type = 0;
        this.nameCn = "";
        this.nameEn = "";
        this.duration = 0;
        this.desc = "";
        this.spriteFrameName = "";
        this.info1 = "";
        this.info2 = "";
        this.info3 = "";
        this.extraInfo = "";
        this.infobase = "";
        this.infocolor1 = "#ffffff";
        this.infocolor2 = "#ffffff";
        this.infocolor3 = "#ffffff";
        this.infobasecolor = "#ffffff";
        this.physicalDamageDirect = 0;
        this.physicalDamageOvertime = 0;
        this.missRate = 0;
        this.realDamageDirect = 0;
        this.realDamageOvertime = 0;
        this.dreamDirect = 0;
        this.dreamOvertime = 0;
        this.magicDamageDirect = 0;
        this.magicDamageOvertime = 0;
        this.dizzDurationDirect = 0;
        this.dizzDurationOvertime = 0;
        this.invisibleDuratonDirect = 0;
        this.variation = 0;
        this.finishStatus = "";
        this.unique = 0;
        this.exOilGold = 0;
        this.clearHealth = 0;
        this.avoidDeath = 0;
        this.sanityDirect = 0;
        this.sanityOvertime = 0;
        this.solidDirect = 0;
        this.solidOvertime = 0;
        this.liquidDirect = 0;
        this.liquidOvertime = 0;
        this.stackable = 0;
        this.color = "#ffffff";
        this.common = new CommonData_1.default();
        this.from = new FromData_1.default();
      }
      Object.defineProperty(StatusData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(StatusData.prototype, "From", {
        get: function() {
          return this.from;
        },
        enumerable: false,
        configurable: true
      });
      StatusData.prototype.valueCopy = function(data) {
        if (!data) return;
        var name = this.nameCn;
        DataUtils_1.default.baseCopy(this, data);
        this.common.valueCopy(data.common);
        this.from.valueCopy(data.from);
        this.nameCn = data.nameCn ? data.nameCn : name;
        this.infocolor1 = data.infocolor1 ? data.infocolor1 : "#ffffff";
        this.infocolor2 = data.infocolor2 ? data.infocolor2 : "#ffffff";
        this.infocolor3 = data.infocolor3 ? data.infocolor3 : "#ffffff";
        this.infobasecolor = data.infobasecolor ? data.infobasecolor : "#ffffff";
      };
      StatusData.prototype.clone = function() {
        var e = new StatusData();
        e.valueCopy(this);
        return e;
      };
      return StatusData;
    }();
    exports.default = StatusData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./CommonData": "CommonData",
    "./FromData": "FromData"
  } ],
  StatusEventType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e9268x4uqpM3ZwTAm8dK3a3", "StatusEventType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusEventType = void 0;
    var StatusEventType;
    (function(StatusEventType) {
      StatusEventType[StatusEventType["INIT"] = 0] = "INIT";
      StatusEventType[StatusEventType["DIED"] = 1] = "DIED";
      StatusEventType[StatusEventType["ITEM_ADD"] = 2] = "ITEM_ADD";
      StatusEventType[StatusEventType["ITEM_REMOVE"] = 3] = "ITEM_REMOVE";
      StatusEventType[StatusEventType["ITEM_TICK"] = 4] = "ITEM_TICK";
      StatusEventType[StatusEventType["ITEM_USE"] = 5] = "ITEM_USE";
      StatusEventType[StatusEventType["MELEE_ATTACK"] = 6] = "MELEE_ATTACK";
      StatusEventType[StatusEventType["MELEE_COMBO"] = 7] = "MELEE_COMBO";
      StatusEventType[StatusEventType["MELEE_KILL"] = 8] = "MELEE_KILL";
      StatusEventType[StatusEventType["REMOTE_ATTACK"] = 9] = "REMOTE_ATTACK";
      StatusEventType[StatusEventType["REMOTE_HIT"] = 10] = "REMOTE_HIT";
      StatusEventType[StatusEventType["REMOTE_KILL"] = 11] = "REMOTE_KILL";
      StatusEventType[StatusEventType["REMOTE_COMBO"] = 12] = "REMOTE_COMBO";
      StatusEventType[StatusEventType["SKILL_START"] = 13] = "SKILL_START";
      StatusEventType[StatusEventType["SKILL_END"] = 14] = "SKILL_END";
      StatusEventType[StatusEventType["SKILL_TICK"] = 15] = "SKILL_TICK";
      StatusEventType[StatusEventType["TAKE_DAMAGE"] = 16] = "TAKE_DAMAGE";
      StatusEventType[StatusEventType["DODGE"] = 17] = "DODGE";
      StatusEventType[StatusEventType["BLOCK"] = 18] = "BLOCK";
      StatusEventType[StatusEventType["PRARRY"] = 19] = "PRARRY";
      StatusEventType[StatusEventType["AOE_HIT"] = 20] = "AOE_HIT";
      StatusEventType[StatusEventType["AOE_ADD"] = 21] = "AOE_ADD";
      StatusEventType[StatusEventType["AOE_REMOVE"] = 22] = "AOE_REMOVE";
      StatusEventType[StatusEventType["AOE_TICK"] = 23] = "AOE_TICK";
      StatusEventType[StatusEventType["AOE_KILL"] = 24] = "AOE_KILL";
      StatusEventType[StatusEventType["STATUS_KILL"] = 25] = "STATUS_KILL";
      StatusEventType[StatusEventType["STANDSTILL"] = 26] = "STANDSTILL";
      StatusEventType[StatusEventType["MOVE"] = 27] = "MOVE";
      StatusEventType[StatusEventType["DREAM_OUT"] = 28] = "DREAM_OUT";
      StatusEventType[StatusEventType["DREAM_FULL"] = 29] = "DREAM_FULL";
      StatusEventType[StatusEventType["HEALTH_OUT"] = 30] = "HEALTH_OUT";
      StatusEventType[StatusEventType["HEALTH_FULL"] = 31] = "HEALTH_FULL";
      StatusEventType[StatusEventType["HEALTH_HALF"] = 32] = "HEALTH_HALF";
      StatusEventType[StatusEventType["DISPEL"] = 33] = "DISPEL";
    })(StatusEventType = exports.StatusEventType || (exports.StatusEventType = {}));
    cc._RF.pop();
  }, {} ],
  StatusIconDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0334bGPnhpIAJMTQdBZ2+gl", "StatusIconDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StatusIconDialog = function(_super) {
      __extends(StatusIconDialog, _super);
      function StatusIconDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.layout = null;
        _this.labelTitle = null;
        _this.infoBase = null;
        _this.info1 = null;
        _this.info2 = null;
        _this.info3 = null;
        _this.extraInfo = null;
        _this.infoDesc = null;
        _this.count = null;
        _this.iconNode = null;
        return _this;
      }
      StatusIconDialog.prototype.onLoad = function() {};
      StatusIconDialog.prototype.refreshStatusInfo = function(data) {
        this.layout.color = cc.Color.WHITE;
        this.infoBase.node.active = true;
        this.info1.node.active = true;
        this.info2.node.active = true;
        this.info3.node.active = true;
        this.extraInfo.node.active = true;
        this.labelTitle.string = data.nameCn;
        this.infoBase.string = "" + data.infobase;
        this.infoBase.node.color = this.infoBase.node.color.fromHEX(data.infobasecolor);
        this.info1.string = data.info1;
        this.info1.node.color = this.info1.node.color.fromHEX(data.infocolor1);
        this.info2.string = data.info2;
        this.info2.node.color = this.info2.node.color.fromHEX(data.infocolor2);
        this.info3.string = data.info3;
        this.info3.node.color = this.info3.node.color.fromHEX(data.infocolor3);
        this.extraInfo.string = data.extraInfo;
        this.infoDesc.string = data.desc;
        this.infoBase.node.active = this.infoBase.string.length > 0;
        this.info1.node.active = this.info1.string.length > 0;
        this.info2.node.active = this.info2.string.length > 0;
        this.info3.node.active = this.info3.string.length > 0;
        this.extraInfo.node.active = this.extraInfo.string.length > 0;
        this.count.string = "" + (data.duration > -1 ? data.duration : "\u221e");
        this.labelTitle.node.color = this.labelTitle.node.color.fromHEX("#F4C021");
      };
      StatusIconDialog.prototype.showDialog = function(iconNode, position, statusData) {
        this.iconNode = iconNode;
        this.refreshStatusInfo(statusData);
        this.node.active = true;
        this.node.position = position.clone();
      };
      StatusIconDialog.prototype.hideDialog = function() {
        this.node.active = false;
      };
      StatusIconDialog.prototype.update = function(dt) {
        this.iconNode && cc.isValid(this.iconNode) || this.hideDialog();
      };
      __decorate([ property(cc.Node) ], StatusIconDialog.prototype, "layout", void 0);
      __decorate([ property(cc.Label) ], StatusIconDialog.prototype, "labelTitle", void 0);
      __decorate([ property(cc.Label) ], StatusIconDialog.prototype, "infoBase", void 0);
      __decorate([ property(cc.Label) ], StatusIconDialog.prototype, "info1", void 0);
      __decorate([ property(cc.Label) ], StatusIconDialog.prototype, "info2", void 0);
      __decorate([ property(cc.Label) ], StatusIconDialog.prototype, "info3", void 0);
      __decorate([ property(cc.Label) ], StatusIconDialog.prototype, "extraInfo", void 0);
      __decorate([ property(cc.Label) ], StatusIconDialog.prototype, "infoDesc", void 0);
      __decorate([ property(cc.Label) ], StatusIconDialog.prototype, "count", void 0);
      StatusIconDialog = __decorate([ ccclass ], StatusIconDialog);
      return StatusIconDialog;
    }(cc.Component);
    exports.default = StatusIconDialog;
    cc._RF.pop();
  }, {} ],
  StatusIconList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7943ajtValDxKKH09iraTc/", "StatusIconList");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StatusIconDialog_1 = require("./dialog/StatusIconDialog");
    var StatusIcon_1 = require("./StatusIcon");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StatusIconList = function(_super) {
      __extends(StatusIconList, _super);
      function StatusIconList() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.iconPrefab = null;
        _this.dialogPrefab = null;
        _this.layout = null;
        return _this;
      }
      StatusIconList.prototype.onLoad = function() {
        this.dialog = this.initDialog();
      };
      StatusIconList.prototype.initDialog = function() {
        var node = cc.instantiate(this.dialogPrefab);
        node.parent = this.node;
        var dialog = node.getComponent(StatusIconDialog_1.default);
        dialog.hideDialog();
        return dialog;
      };
      StatusIconList.prototype.getIcon = function() {
        var statusNode = cc.instantiate(this.iconPrefab);
        statusNode.parent = this.layout;
        statusNode.active = true;
        var icon = statusNode.getComponent(StatusIcon_1.default);
        this.addIconTouchEvent(icon);
        return icon;
      };
      StatusIconList.prototype.addIconTouchEvent = function(icon) {
        var _this = this;
        icon.node.on(cc.Node.EventType.TOUCH_START, function() {
          var data = icon.data;
          if (!data) return;
          var pos = _this.node.convertToNodeSpaceAR(icon.node.parent.convertToWorldSpaceAR(cc.Vec3.ZERO));
          _this.dialog.showDialog(icon.node, pos.add(cc.v3(64, 0)), data);
        });
        icon.node.on(cc.Node.EventType.TOUCH_END, function() {
          _this.dialog.hideDialog();
        });
        icon.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          _this.dialog.hideDialog();
        });
        icon.node.on(cc.Node.EventType.MOUSE_ENTER, function() {
          var data = icon.data;
          if (!data) return;
          var pos = _this.node.convertToNodeSpaceAR(icon.node.parent.convertToWorldSpaceAR(cc.Vec3.ZERO));
          _this.dialog.showDialog(icon.node, pos.add(cc.v3(64, 0)), data);
        });
        icon.node.on(cc.Node.EventType.MOUSE_LEAVE, function() {
          _this.dialog.hideDialog();
        });
      };
      __decorate([ property(cc.Prefab) ], StatusIconList.prototype, "iconPrefab", void 0);
      __decorate([ property(cc.Prefab) ], StatusIconList.prototype, "dialogPrefab", void 0);
      __decorate([ property(cc.Node) ], StatusIconList.prototype, "layout", void 0);
      StatusIconList = __decorate([ ccclass ], StatusIconList);
      return StatusIconList;
    }(cc.Component);
    exports.default = StatusIconList;
    cc._RF.pop();
  }, {
    "./StatusIcon": "StatusIcon",
    "./dialog/StatusIconDialog": "StatusIconDialog"
  } ],
  StatusIcon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "932dcHgnxxMzY9ASpbEVLeG", "StatusIcon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StatusData_1 = require("../data/StatusData");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StatusIcon = function(_super) {
      __extends(StatusIcon, _super);
      function StatusIcon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.stateRunning = false;
        _this.sprite = null;
        _this.data = new StatusData_1.default();
        return _this;
      }
      StatusIcon.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.label = this.node.getChildByName("sprite").getChildByName("label").getComponent(cc.Label);
        this.anim = this.getComponent(cc.Animation);
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.label = this.node.getChildByName("sprite").getChildByName("label").getComponent(cc.Label);
        this.anim = this.getComponent(cc.Animation);
      };
      StatusIcon.prototype.start = function() {};
      StatusIcon.prototype.showStatus = function(data) {
        if (!this.anim) return;
        this.data = data;
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(data.spriteFrameName);
        this.anim.playAdditive("StatusShow");
        this.stateRunning = true;
        this.label.string = "" + (data.duration > -1 ? data.duration : "");
        this.label.node.opacity = data.duration < 0 || data.duration > 30 ? 0 : 255;
      };
      StatusIcon.prototype.stopStatus = function() {
        if (!this.node) return;
        this.stateRunning && this.node.destroy();
      };
      StatusIcon.prototype.updateLogic = function(data) {
        var _this = this;
        this.data = data;
        this.label.string = "" + (data.duration > 0 ? data.duration : "");
        this.label.node.opacity = data.duration < 0 || data.duration > 30 ? 0 : 255;
        if (0 == data.duration && this.stateRunning) {
          this.stateRunning = false;
          this.anim.play("StatusHide");
          this.scheduleOnce(function() {
            _this.node && _this.node.destroy();
          }, .5);
        }
      };
      StatusIcon = __decorate([ ccclass ], StatusIcon);
      return StatusIcon;
    }(cc.Component);
    exports.default = StatusIcon;
    cc._RF.pop();
  }, {
    "../data/StatusData": "StatusData",
    "../logic/Logic": "Logic"
  } ],
  StatusManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70cfczADURLkqYmvLLsshT9", "StatusManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StatusData_1 = require("../data/StatusData");
    var Logic_1 = require("../logic/Logic");
    var FromData_1 = require("../data/FromData");
    var Status_1 = require("../status/Status");
    var Actor_1 = require("../base/Actor");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var Utils_1 = require("../utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StatusManager = function(_super) {
      __extends(StatusManager, _super);
      function StatusManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.statusPrefab = null;
        _this.totalStatusData = new StatusData_1.default();
        _this.timeDelay = 0;
        return _this;
      }
      StatusManager_1 = StatusManager;
      StatusManager.prototype.onLoad = function() {
        this.statusMap = new Map();
        this.actor = this.node.parent.getComponent(Actor_1.default);
      };
      StatusManager.prototype.start = function() {};
      StatusManager.prototype.addCustomStatus = function(data, from) {
        if (!data) return;
        var sd = new StatusData_1.default();
        sd.valueCopy(data);
        sd.From.valueCopy(from);
        this.stopOtherUniqueStatus(sd.unique) && this.showStatus(sd, false);
      };
      StatusManager.prototype.addStatus = function(resName, from, isFromSave) {
        if (resName.length < 1) return;
        var sd = new StatusData_1.default();
        sd.valueCopy(Logic_1.default.status[resName]);
        sd.From.valueCopy(from);
        this.stopOtherUniqueStatus(sd.unique) && this.showStatus(sd, isFromSave);
      };
      StatusManager.prototype.addStatusListFromSave = function(statusList) {
        if (statusList && statusList.length > 0) for (var _i = 0, statusList_1 = statusList; _i < statusList_1.length; _i++) {
          var s = statusList_1[_i];
          var sd = new StatusData_1.default();
          sd.valueCopy(s);
          sd.From.valueCopy(new FromData_1.default());
          this.stopOtherUniqueStatus(sd.unique) && this.showStatus(sd, true);
        }
      };
      StatusManager.prototype.hasStatus = function(resName) {
        var sd = new StatusData_1.default();
        sd.valueCopy(Logic_1.default.status[resName]);
        if (this.statusMap.has(sd.id)) {
          var ss = this.statusMap.get(sd.id);
          for (var _i = 0, ss_1 = ss; _i < ss_1.length; _i++) {
            var s = ss_1[_i];
            if (s && s.node && s.isValid && s.isStatusRunning()) return true;
          }
        }
        return false;
      };
      StatusManager.prototype.stopStatus = function(resName) {
        var sd = new StatusData_1.default();
        sd.valueCopy(Logic_1.default.status[resName]);
        if (this.statusMap.has(sd.id)) {
          var ss = this.statusMap.get(sd.id);
          for (var _i = 0, ss_2 = ss; _i < ss_2.length; _i++) {
            var s = ss_2[_i];
            s && s.node && s.isValid && s.isStatusRunning() && s.data.id == sd.id && s.stopStatus();
          }
        }
      };
      StatusManager.prototype.stopOtherUniqueStatus = function(unique) {
        if (unique < 1) return true;
        var flag = true;
        this.statusMap.forEach(function(ss) {
          for (var _i = 0, ss_3 = ss; _i < ss_3.length; _i++) {
            var s = ss_3[_i];
            if (s && s.data && s.data.unique == unique) if (s.data.duration < 0) flag = false; else {
              s.stopStatus();
              flag = true;
            }
          }
        });
        return flag;
      };
      StatusManager.prototype.stopAllStatus = function() {
        this.statusMap.forEach(function(ss) {
          for (var _i = 0, ss_4 = ss; _i < ss_4.length; _i++) {
            var s = ss_4[_i];
            s.stopStatus();
          }
        });
      };
      StatusManager.prototype.stopAllBuffs = function() {
        this.statusMap.forEach(function(ss) {
          for (var _i = 0, ss_5 = ss; _i < ss_5.length; _i++) {
            var s = ss_5[_i];
            s && s.data && s.data.type == Status_1.default.BUFF && s.stopStatus();
          }
        });
      };
      StatusManager.prototype.stopAllDebuffs = function() {
        this.statusMap.forEach(function(ss) {
          for (var _i = 0, ss_6 = ss; _i < ss_6.length; _i++) {
            var s = ss_6[_i];
            s && s.data && s.data.type == Status_1.default.DEBUFF && s.stopStatus();
          }
        });
      };
      StatusManager.prototype.showStatus = function(data, isFromSave) {
        var _this = this;
        this.statusMap.forEach(function(ss, key) {
          for (var i = ss.length - 1; i >= 0; i--) {
            var s = ss[i];
            s && s.node && s.isValid || ss.splice(i, 1);
          }
          ss.length < 1 && _this.statusMap.delete(key);
        });
        if (this.statusMap.has(data.id)) {
          var ss = this.statusMap.get(data.id);
          var aliveCount = 0;
          for (var _i = 0, ss_7 = ss; _i < ss_7.length; _i++) {
            var s = ss_7[_i];
            s && s.node && s.isValid && s.isStatusRunning() && s.data.id == data.id && aliveCount++;
          }
          aliveCount > data.stackable && ss.pop().stopStatus();
        } else this.statusMap.set(data.id, []);
        var statusNode = cc.instantiate(this.statusPrefab);
        statusNode.parent = this.node;
        statusNode.active = true;
        var status = statusNode.getComponent(Status_1.default);
        this.statusMap.get(data.id).unshift(status);
        if (this.statusIconList) {
          var icon = this.statusIconList.getIcon();
          status.icon = icon;
        }
        status.showStatus(data, this.actor, isFromSave);
      };
      StatusManager.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.node.parent && (this.node.scaleX = this.node.parent.scaleX > 0 ? 1 : -1);
        if (this.isTimeDelay(dt) && this.actor) {
          var dataList = this.updateStatus();
          this.actor.updateStatus(dataList, this.totalStatusData);
        }
      };
      StatusManager.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > 1) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      StatusManager.prototype.updateStatus = function() {
        var _this = this;
        this.totalStatusData = new StatusData_1.default();
        var dataList = new Array();
        this.statusMap.forEach(function(ss) {
          for (var _i = 0, ss_8 = ss; _i < ss_8.length; _i++) {
            var s = ss_8[_i];
            if (s && s.node && s.isValid) {
              s.updateLogic();
              if (0 == s.data.duration) _this.addStatus(s.data.finishStatus, s.data.From); else {
                _this.totalStatusData.missRate += s.data.missRate ? s.data.missRate : 0;
                _this.totalStatusData.variation += s.data.variation ? s.data.variation : 0;
                _this.totalStatusData.exOilGold += s.data.exOilGold ? s.data.exOilGold : 0;
                _this.totalStatusData.clearHealth += s.data.clearHealth ? s.data.clearHealth : 0;
                _this.totalStatusData.avoidDeath += s.data.avoidDeath ? s.data.avoidDeath : 0;
                _this.totalStatusData.color = Utils_1.default.getMixColor("#ffffff" == _this.totalStatusData.color ? "#000000" : _this.totalStatusData.color, StatusManager_1.getStatusColor(s.data.spriteFrameName));
                _this.totalStatusData.Common.add(s.data.Common);
                dataList.push(s.data.clone());
              }
            }
          }
        });
        return dataList;
      };
      StatusManager.addStatus2NearEnemy = function(player, statusName, from) {
        if (!player) return;
        var target = ActorUtils_1.default.getNearestEnemyActor(player.node.position, false, player.dungeon);
        target && target.node && target.node.active && !target.sc.isDied && !target.sc.isDisguising && target.addStatus(statusName, from);
      };
      StatusManager.addStatus2NearEnemies = function(player, targetNode, statusName, range, from) {
        if (!player) return;
        for (var _i = 0, _a = player.dungeon.monsterManager.monsterList; _i < _a.length; _i++) {
          var monster = _a[_i];
          var dis = Logic_1.default.getDistanceNoSqrt(targetNode.position, monster.node.position);
          monster && monster.node && monster.node.active && dis < range && !monster.sc.isDied && !monster.sc.isDisguising && monster.addStatus(statusName, from);
        }
        for (var _b = 0, _c = player.dungeon.monsterManager.bossList; _b < _c.length; _b++) {
          var boss = _c[_b];
          var dis = Logic_1.default.getDistanceNoSqrt(targetNode.position, boss.node.position);
          dis < range && !boss.sc.isDied && boss.addStatus(statusName, from);
        }
      };
      StatusManager.addStatus2NearAllies = function(player, targetNode, statusName, range, from) {
        if (!player) return;
        for (var _i = 0, _a = player.dungeon.nonPlayerManager.nonPlayerList; _i < _a.length; _i++) {
          var ally = _a[_i];
          var dis = Logic_1.default.getDistanceNoSqrt(targetNode.position, ally.node.position);
          ally && ally.node && ally.node.active && dis < range && !ally.sc.isDied && !ally.sc.isDisguising && ally.addStatus(statusName, from);
        }
      };
      StatusManager.getStatusColor = function(statusName) {
        var color = "#ffffff";
        switch (statusName) {
         case StatusManager_1.FROZEN:
          color = "#E1FFFF";
          break;

         case StatusManager_1.BURNING:
          color = "#FFA500";
          break;

         case StatusManager_1.DIZZ:
          color = "#87CEFA";
          break;

         case StatusManager_1.TOXICOSIS:
          color = "#ADFF2F";
          break;

         case StatusManager_1.CURSING:
          color = "#DA70D6";
          break;

         case StatusManager_1.BLEEDING:
          color = "#FF6347";
        }
        return color;
      };
      StatusManager.addBaseStatus = function(actor, data, from) {
        if (!actor) return;
        Logic_1.default.getRandomNum(0, 100) < data.iceRate && actor.addStatus(StatusManager_1.FROZEN, from);
        Logic_1.default.getRandomNum(0, 100) < data.fireRate && actor.addStatus(StatusManager_1.BURNING, from);
        Logic_1.default.getRandomNum(0, 100) < data.lighteningRate && actor.addStatus(StatusManager_1.DIZZ, from);
        Logic_1.default.getRandomNum(0, 100) < data.toxicRate && actor.addStatus(StatusManager_1.TOXICOSIS, from);
        Logic_1.default.getRandomNum(0, 100) < data.curseRate && actor.addStatus(StatusManager_1.CURSING, from);
        Logic_1.default.getRandomNum(0, 100) < data.realRate && actor.addStatus(StatusManager_1.BLEEDING, from);
      };
      var StatusManager_1;
      StatusManager.FROZEN = "status001";
      StatusManager.BURNING = "status002";
      StatusManager.DIZZ = "status003";
      StatusManager.TOXICOSIS = "status004";
      StatusManager.CURSING = "status005";
      StatusManager.BLEEDING = "status006";
      StatusManager.ATTACKPLUS = "status007";
      StatusManager.FASTMOVE = "status008";
      StatusManager.FASTATTACK = "status009";
      StatusManager.PERFECTDEFENCE = "status010";
      StatusManager.HEALING = "status011";
      StatusManager.RECOVERY = "status012";
      StatusManager.STONE = "status013";
      StatusManager.TWINE = "status014";
      StatusManager.SHIELD_NORMAL = "status015";
      StatusManager.SHIELD_LONG = "status016";
      StatusManager.BOTTLE_HEALING = "status017";
      StatusManager.TALENT_AIMED = "status018";
      StatusManager.SHOES_SPEED = "status019";
      StatusManager.CLOTHES_RECOVERY = "status020";
      StatusManager.WEREWOLFDEFENCE = "status021";
      StatusManager.GOLDAPPLE = "status022";
      StatusManager.MAGIC_WEAPON = "status023";
      StatusManager.MAGIC_WEAPON_STRONG = "status024";
      StatusManager.FROZEN_STRONG = "status025";
      StatusManager.TALENT_INVISIBLE = "status026";
      StatusManager.SHIELD_PARRY = "status027";
      StatusManager.TALENT_FLASH_DIZZ = "status028";
      StatusManager.TALENT_FLASH_SPEED = "status029";
      StatusManager.BOTTLE_REMOTE = "status030";
      StatusManager.WINE_CLOUD = "status033";
      StatusManager.FALLEN_DOWN = "status034";
      StatusManager.DIZZ_LONG = "status035";
      StatusManager.PET_DOG = "status037";
      StatusManager.REAGENT = "status038";
      StatusManager.REAGENT_SIDE_EFFECT = "status039";
      StatusManager.AVOID_DEATH = "status065";
      StatusManager.CAMP_FIRE = "status066";
      StatusManager.HOLOGRAPHIC_DODGE = "status067";
      StatusManager.DRINK = "status068";
      StatusManager.SANITY_UP = "status069";
      StatusManager.SANITY_DOWN = "status070";
      StatusManager.EAT = "status071";
      StatusManager.INSANE = "status072";
      __decorate([ property(cc.Prefab) ], StatusManager.prototype, "statusPrefab", void 0);
      StatusManager = StatusManager_1 = __decorate([ ccclass ], StatusManager);
      return StatusManager;
    }(cc.Component);
    exports.default = StatusManager;
    cc._RF.pop();
  }, {
    "../base/Actor": "Actor",
    "../data/FromData": "FromData",
    "../data/StatusData": "StatusData",
    "../logic/Logic": "Logic",
    "../status/Status": "Status",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/Utils": "Utils"
  } ],
  Status: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "71809qjadJJZIMwM9M2G6cL", "Status");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../data/DamageData");
    var StatusData_1 = require("../data/StatusData");
    var Logic_1 = require("../logic/Logic");
    var EquipmentManager_1 = require("../manager/EquipmentManager");
    var StatusManager_1 = require("../manager/StatusManager");
    var DataUtils_1 = require("../utils/DataUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Status = function(_super) {
      __extends(Status, _super);
      function Status() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.stateRunning = false;
        _this.sprite = null;
        _this.data = new StatusData_1.default();
        return _this;
      }
      Status.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.label = this.node.getChildByName("sprite").getChildByName("label").getComponent(cc.Label);
        this.anim = this.getComponent(cc.Animation);
      };
      Status.prototype.start = function() {};
      Status.prototype.showStatus = function(data, actor, isFromSave) {
        if (!this.anim) return;
        this.data = data;
        this.actor = actor;
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(data.spriteFrameName);
        this.anim.play("StatusShow");
        isFromSave || this.doStatusDamage(true);
        this.stateRunning = true;
        this.label.string = "" + (this.data.duration > 0 ? this.data.duration : "");
        this.label.node.opacity = this.data.duration < 0 || this.data.duration > 500 ? 0 : 255;
        if (this.icon) {
          var common = data.Common;
          data.infobase = EquipmentManager_1.default.getInfoBase(common);
          data.info1 = EquipmentManager_1.default.getInfo1(common);
          data.info2 = EquipmentManager_1.default.getInfo2(common, null);
          data.info3 = "";
          data.infobasecolor = "#fffff0";
          data.infocolor1 = "#9370DB";
          data.infocolor2 = "#87CEFA";
          data.infocolor3 = "#BC8F8F";
          data.extraInfo = this.getInfo(data);
          this.icon.showStatus(data);
        }
        if (this.isBaseStatus(this.data.spriteFrameName)) {
          this.node.scale = 0;
          this.node.opacity = 0;
        } else {
          this.node.scale = 1;
          this.node.opacity = 255;
        }
      };
      Status.prototype.getInfo = function(data) {
        var info = "";
        info += DataUtils_1.default.getinfoNum2String(0 == data.stackable, "\u6700\u5927\u5c42\u6570\u4e3a", data.stackable, "");
        info += DataUtils_1.default.getinfoNum2String(0 == data.physicalDamageOvertime, "\u6bcf\u79d2\u53d7\u5230", data.physicalDamageOvertime, "\u70b9\u7269\u7406\u4f24\u5bb3\n");
        data.realDamageOvertime > 0 ? info += DataUtils_1.default.getinfoNum2String(0 == data.realDamageOvertime, "\u6bcf\u79d2\u53d7\u5230", data.realDamageOvertime, "\u70b9\u6d41\u8840\u4f24\u5bb3\n") : info += DataUtils_1.default.getinfoNum2String(0 == data.realDamageOvertime, "\u6bcf\u79d2\u6062\u590d", -data.realDamageOvertime, "\u70b9\u751f\u547d\n");
        info += DataUtils_1.default.getinfoNum2String(0 == data.magicDamageOvertime, "\u6bcf\u79d2\u53d7\u5230", data.magicDamageOvertime, "\u70b9\u9b54\u6cd5\u4f24\u5bb3\n");
        info += DataUtils_1.default.getinfoNum2String(0 == data.missRate, "\u653b\u51fb\u4e22\u5931\u51e0\u7387", data.missRate, "%\n");
        info += DataUtils_1.default.getinfoNum2String(0 == data.dizzDurationOvertime, "\u7729\u6655", data.dizzDurationOvertime, "\u79d2\n");
        info += DataUtils_1.default.getinfoNum2String(0 == data.invisibleDuratonDirect, "\u9690\u8eab", data.invisibleDuratonDirect, "\u79d2\n");
        info += DataUtils_1.default.getinfoNum2String(0 == data.variation, "\u53d8\u5f02", data.variation, "\u79d2\n");
        info += DataUtils_1.default.getinfoNum2String(0 == data.dreamOvertime, "\u6301\u7eed", data.dreamOvertime, "\u79d2\u6062\u590d\u68a6\u5883\n");
        info += DataUtils_1.default.getinfoNum2String(0 == data.exOilGold, "\u989d\u5916\u7ecf\u9a8c\u83b7\u53d6", data.exOilGold, "\u70b9\n");
        info += DataUtils_1.default.getinfoNum2String(0 == data.clearHealth, "\u6e05\u7406\u5b8c\u623f\u95f4\u56de\u590d\u751f\u547d\n");
        info += DataUtils_1.default.getinfoNum2String(0 == data.avoidDeath, "\u62b5\u6321\u81f4\u547d\u4f24");
        return info;
      };
      Status.prototype.stopStatus = function() {
        if (!this.node) return;
        this.data.duration = 0;
        if (this.stateRunning) {
          this.node.destroy();
          this.icon && this.icon.node.destroy();
        }
      };
      Status.prototype.isStatusRunning = function() {
        return this.data.duration > 0 || -1 == this.data.duration;
      };
      Status.prototype.doStatusDamage = function(isDirect) {
        if (!this.data) return;
        var dd = isDirect ? this.getDamageDirect() : this.getDamageOverTime();
        var dizzDuration = isDirect ? this.data.dizzDurationDirect : this.data.dizzDurationOvertime;
        var dream = isDirect ? this.data.dreamDirect : this.data.dreamOvertime;
        if (this.actor) {
          0 != dd.getTotalDamage() && this.actor.takeDamage(dd, this.data.From);
          dizzDuration > 0 && this.actor.takeDizz(dizzDuration);
          dream && 0 != dream && this.actor.updateDream(dream);
          this.data.invisibleDuratonDirect > 0 && this.actor.hideSelf(this.data.invisibleDuratonDirect);
          isDirect ? this.actor.updateLife(this.data.sanityDirect, this.data.solidDirect, this.data.liquidDirect) : this.actor.updateLife(this.data.sanityOvertime, this.data.solidOvertime, this.data.liquidOvertime);
        }
      };
      Status.prototype.updateLogic = function() {
        var _this = this;
        this.label.string = "" + (this.data.duration > 0 ? this.data.duration : "");
        this.label.node.opacity = this.data.duration < 0 || this.data.duration > 500 ? 0 : 255;
        if (this.icon) {
          this.icon.updateLogic(this.data);
          -1 == this.data.duration && (this.node.active = false);
        }
        if (this.data.duration > 0) {
          -1 != this.data.duration && this.data.duration--;
          this.doStatusDamage(false);
        }
        if (0 == this.data.duration && this.stateRunning) {
          this.stateRunning = false;
          this.anim.play("StatusHide");
          this.scheduleOnce(function() {
            if (_this.node) {
              _this.node.destroy();
              _this.icon && _this.icon.node.destroy();
            }
          }, .5);
        }
      };
      Status.prototype.getDamageDirect = function() {
        var dd = new DamageData_1.default();
        dd.realDamage = this.data.realDamageDirect ? this.data.realDamageDirect : 0;
        dd.physicalDamage = this.data.physicalDamageDirect ? this.data.physicalDamageDirect : 0;
        dd.magicDamage = this.data.magicDamageDirect ? this.data.magicDamageDirect : 0;
        return dd;
      };
      Status.prototype.getDamageOverTime = function() {
        var dd = new DamageData_1.default();
        dd.realDamage = this.data.realDamageOvertime ? this.data.realDamageOvertime : 0;
        dd.physicalDamage = this.data.physicalDamageOvertime ? this.data.physicalDamageOvertime : 0;
        dd.magicDamage = this.data.magicDamageOvertime ? this.data.magicDamageOvertime : 0;
        return dd;
      };
      Status.prototype.isBaseStatus = function(statusName) {
        return StatusManager_1.default.FROZEN == statusName || StatusManager_1.default.BURNING == statusName || StatusManager_1.default.DIZZ == statusName || StatusManager_1.default.TOXICOSIS == statusName || StatusManager_1.default.CURSING == statusName || StatusManager_1.default.BLEEDING == statusName;
      };
      Status.BUFF = 0;
      Status.DEBUFF = 1;
      Status = __decorate([ ccclass ], Status);
      return Status;
    }(cc.Component);
    exports.default = Status;
    cc._RF.pop();
  }, {
    "../data/DamageData": "DamageData",
    "../data/StatusData": "StatusData",
    "../logic/Logic": "Logic",
    "../manager/EquipmentManager": "EquipmentManager",
    "../manager/StatusManager": "StatusManager",
    "../utils/DataUtils": "DataUtils"
  } ],
  SuitData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9543VeOPVDfIOgvubFIjVk", "SuitData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseData_1 = require("./BaseData");
    var EquipmentData_1 = require("./EquipmentData");
    var DataUtils_1 = require("../utils/DataUtils");
    var SuitData = function(_super) {
      __extends(SuitData, _super);
      function SuitData() {
        var _this = _super.call(this) || this;
        _this.nameCn = "";
        _this.nameEn = "";
        _this.suitType = "";
        _this.suitNames = "";
        _this.desc = "";
        _this.count = 0;
        _this.equipList = [];
        return _this;
      }
      Object.defineProperty(SuitData.prototype, "EquipList", {
        get: function() {
          return this.equipList;
        },
        enumerable: false,
        configurable: true
      });
      SuitData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
        for (var _i = 0, _a = data.equipList; _i < _a.length; _i++) {
          var equip = _a[_i];
          var e = new EquipmentData_1.default();
          e.valueCopy(equip);
          this.equipList.push(e);
        }
      };
      SuitData.prototype.clone = function() {
        var e = new SuitData();
        e.valueCopy(this);
        return e;
      };
      return SuitData;
    }(BaseData_1.default);
    exports.default = SuitData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData",
    "./EquipmentData": "EquipmentData"
  } ],
  TalentDash: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "52ac4HK4rpMhYIJb8+wkG1J", "TalentDash");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var Talent_1 = require("./Talent");
    var DashShadow_1 = require("../item/DashShadow");
    var DamageData_1 = require("../data/DamageData");
    var StatusManager_1 = require("../manager/StatusManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var BaseAvatar_1 = require("../base/BaseAvatar");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TalentDash = function(_super) {
      __extends(TalentDash, _super);
      function TalentDash() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.dashShadow = null;
        return _this;
      }
      TalentDash.prototype.onLoad = function() {};
      TalentDash.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.dashShadow.node.active = false;
        this.node.parent = this.player.node.parent;
        this.dashShadow.init(this);
      };
      TalentDash.prototype.skillCanUse = function() {
        return true;
      };
      TalentDash.prototype.useSKill = function() {
        this.doSkill();
      };
      TalentDash.prototype.doSkill = function() {
        var _this = this;
        if (!this.talentSkill) return;
        if (this.talentSkill.IsExcuting) return;
        var cooldown = 3;
        this.hashTalent(Talent_1.default.DASH_13) && (cooldown = 2);
        var speed = 24;
        this.hashTalent(Talent_1.default.DASH_14) && (speed = 48);
        this.talentSkill.next(function() {
          _this.talentSkill.IsExcuting = true;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            name: AudioPlayer_1.default.DASH
          });
          _this.schedule(function() {
            _this.player.getWalkSmoke(_this.node.parent, _this.node.position);
          }, .05, 4, 0);
          var pos = _this.player.entity.Move.linearVelocity.clone();
          _this.player.sc.isMoving = false;
          pos = pos.equals(cc.Vec2.ZERO) ? _this.player.isFaceRight ? cc.v2(1, 0) : cc.v2(-1, 0) : pos.normalizeSelf();
          var posv2 = cc.v2(pos.x, pos.y);
          if (_this.hashTalent(Talent_1.default.DASH_08)) {
            speed = 2;
            _this.showShadow(posv2);
          }
          _this.hv = posv2.clone();
          pos = pos.mul(speed);
          _this.player.entity.Move.linearVelocity = pos;
          _this.scheduleOnce(function() {
            _this.player.entity.Move.linearVelocity = cc.Vec2.ZERO;
            _this.player.playerAnim(BaseAvatar_1.default.STATE_IDLE, _this.player.currentDir);
            _this.IsExcuting = false;
          }, .5);
        }, cooldown, true);
      };
      TalentDash.prototype.showShadow = function(pos) {
        if (this.dashShadow) {
          this.dashShadow.setHv(pos.clone());
          this.dashShadow.show();
        }
      };
      TalentDash.prototype.changePerformance = function() {};
      TalentDash.prototype.onColliderEnter = function(other, self) {
        this.hashTalent(Talent_1.default.DASH_02) && !this.hashTalent(Talent_1.default.DASH_08) && this.attacking(other, this.node);
      };
      TalentDash.prototype.attacking = function(attackTarget, currentNode) {
        if (!attackTarget || !currentNode.active) return;
        var damage = new DamageData_1.default(1);
        this.hashTalent(Talent_1.default.DASH_07) && (damage.realDamage = 5);
        var damageSuccess = false;
        var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget.node, true);
        if (target && !target.sc.isDied) {
          damageSuccess = target.takeDamage(damage, FromData_1.default.getClone(this.player.actorName(), "", this.player.node.position));
          if (damageSuccess) {
            this.beatBack(target);
            this.addTargetAllStatus(target);
          }
        }
      };
      TalentDash.prototype.beatBack = function(node) {
        if (!this.hashTalent(Talent_1.default.DASH_04)) return;
        var pos = this.hv.clone();
        var power = 20;
        pos = pos.normalizeSelf().mul(power);
        node.entity.Move.linearVelocity = cc.v2(pos.x, pos.y);
      };
      TalentDash.prototype.addTargetAllStatus = function(actor) {
        this.addTargetStatus(Talent_1.default.DASH_05, actor, StatusManager_1.default.FROZEN);
        this.addTargetStatus(Talent_1.default.DASH_06, actor, StatusManager_1.default.DIZZ);
        this.addTargetStatus(Talent_1.default.DASH_03, actor, StatusManager_1.default.BLEEDING);
      };
      TalentDash.prototype.addTargetStatus = function(talentType, actor, statusType) {
        this.hashTalent(talentType) && actor.addStatus(statusType, new FromData_1.default());
      };
      TalentDash.prototype.takeDamage = function() {
        return false;
      };
      __decorate([ property(DashShadow_1.default) ], TalentDash.prototype, "dashShadow", void 0);
      TalentDash = __decorate([ ccclass ], TalentDash);
      return TalentDash;
    }(Talent_1.default);
    exports.default = TalentDash;
    cc._RF.pop();
  }, {
    "../base/BaseAvatar": "BaseAvatar",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../item/DashShadow": "DashShadow",
    "../logic/EventHelper": "EventHelper",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "./Talent": "Talent"
  } ],
  TalentData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "337bcbBGB9GS4DrPZ+ZKu25", "TalentData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var CommonData_1 = require("./CommonData");
    var TalentData = function() {
      function TalentData() {
        this.desc = "";
        this.nameCn = "";
        this.nameEn = "";
        this.resName = "";
        this.cooldown = 0;
        this.passive = 0;
        this.lastTime = 0;
        this.cost = 1;
        this.storePoint = 0;
        this.useCount = 0;
        this.common = new CommonData_1.default();
      }
      Object.defineProperty(TalentData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      TalentData.prototype.valueCopy = function(data) {
        if (!data) return;
        var nameCn = this.nameCn;
        var nameEn = this.nameEn;
        var desc = this.desc;
        DataUtils_1.default.baseCopy(this, data);
        this.common.valueCopy(data.common);
        this.nameCn = data.nameCn ? data.nameCn : nameCn;
        this.nameEn = data.nameEn ? data.nameEn : nameEn;
        this.desc = data.desc ? data.desc : desc;
        this.storePoint = data.storePoint || 0 == data.storePoint ? data.storePoint : 1;
        this.cost = data.cost || 0 == data.cost ? data.cost : 1;
      };
      TalentData.prototype.clone = function() {
        var e = new TalentData();
        e.valueCopy(this);
        return e;
      };
      return TalentData;
    }();
    exports.default = TalentData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./CommonData": "CommonData"
  } ],
  TalentMagic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3909410aVM/oDLjAGklG7U", "TalentMagic");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var Talent_1 = require("./Talent");
    var StatusManager_1 = require("../manager/StatusManager");
    var FromData_1 = require("../data/FromData");
    var MagicCircle_1 = require("./MagicCircle");
    var MagicIce_1 = require("./MagicIce");
    var FireGhost_1 = require("./FireGhost");
    var Logic_1 = require("../logic/Logic");
    var IceThron_1 = require("./IceThron");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TalentMagic = function(_super) {
      __extends(TalentMagic, _super);
      function TalentMagic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.magiccircle = null;
        _this.magicice = null;
        _this.icethron = null;
        _this.fireGhost = null;
        _this.magicLighteningCircle = null;
        _this.fireGhostNum = 0;
        _this.checkTimeDelay = 0;
        return _this;
      }
      TalentMagic_1 = TalentMagic;
      TalentMagic.prototype.onLoad = function() {
        var _this = this;
        this.ghostPool = new cc.NodePool(FireGhost_1.default);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.POOL_DESTORY_FIREGHLOST, function(detail) {
          _this.destroyGhost(detail.targetNode);
        });
      };
      TalentMagic.prototype.destroyGhost = function(ghostNode) {
        if (!ghostNode) return;
        ghostNode.active = false;
        if (this.ghostPool) {
          this.ghostPool.put(ghostNode);
          this.fireGhostNum--;
          cc.log("destroyGhost");
        }
      };
      TalentMagic.prototype.init = function(data) {
        var _this = this;
        this.magicLighteningCircle.opacity = 0;
        _super.prototype.init.call(this, data);
        this.scheduleOnce(function() {
          _this.hashTalent(Talent_1.default.MAGIC_07) && _this.player.addStatus(_this.hashTalent(TalentMagic_1.MAGIC_06) ? StatusManager_1.default.MAGIC_WEAPON_STRONG : StatusManager_1.default.MAGIC_WEAPON, new FromData_1.default());
          _this.hashTalent(Talent_1.default.MAGIC_13) && !_this.magicice.isShow && _this.magicice.showIce();
          _this.hashTalent(Talent_1.default.MAGIC_10) && _this.initFireGhosts();
          _this.hashTalent(TalentMagic_1.MAGIC_16) && _this.showLighteningCircle();
        }, .2);
      };
      TalentMagic.prototype.skillCanUse = function() {
        return true;
      };
      TalentMagic.prototype.useSKill = function() {
        this.doSkill();
      };
      TalentMagic.prototype.doSkill = function() {
        var _this = this;
        if (!this.talentSkill) return;
        if (this.talentSkill.IsExcuting) return;
        var cooldown = 7;
        this.hashTalent(Talent_1.default.MAGIC_04) && (cooldown = 3);
        this.talentSkill.next(function() {
          _this.talentSkill.IsExcuting = true;
          _this.magiccircle.talentMaigc = _this;
          _this.magiccircle.playMagic(_this.hashTalent(Talent_1.default.MAGIC_03));
        }, cooldown, true);
      };
      TalentMagic.prototype.MagicFinish = function() {
        var _this = this;
        if (this.hashTalent(Talent_1.default.MAGIC_09)) ; else if (this.hashTalent(Talent_1.default.MAGIC_08)) ; else if (this.hashTalent(Talent_1.default.MAGIC_12)) this.showIceThron(); else if (this.hashTalent(Talent_1.default.MAGIC_11)) this.showIceThron(); else if (this.hashTalent(Talent_1.default.MAGIC_15)) this.schedule(function() {
          _this.addLighteningFall(_this.hashTalent(Talent_1.default.MAGIC_06), 8);
        }, .2, this.hashTalent(Talent_1.default.MAGIC_02) ? 1 : 0); else if (this.hashTalent(Talent_1.default.MAGIC_14)) this.schedule(function() {
          _this.addLighteningFall(_this.hashTalent(Talent_1.default.MAGIC_06), 5);
        }, .2, this.hashTalent(Talent_1.default.MAGIC_02) ? 1 : 0); else if (this.hashTalent(Talent_1.default.MAGIC_01)) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL);
          this.fire(this.player.shooterEx, 80, this.hashTalent(Talent_1.default.MAGIC_06) ? "bullet135" : "bullet035");
        }
      };
      TalentMagic.prototype.showIceThron = function() {
        var _this = this;
        this.scheduleOnce(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_ICETHRON);
        }, 1);
        var angles1 = [ 0, 45, 90, 135, 180, 225, 270, 315 ];
        var angles2 = [ 15, 60, 105, 150, 195, 240, 285, 330 ];
        var distance1 = [ 100 ];
        var distance2 = [ 100, 150 ];
        var distance3 = [ 100, 150, 200 ];
        var scale1 = [ 3 ];
        var scale2 = [ 3, 4 ];
        var scale3 = [ 3, 4, 5 ];
        var scale4 = [ 3, 5 ];
        var a1 = [ angles1 ];
        var a2 = [ angles1, angles2 ];
        var a3 = [ angles1, angles2, angles1 ];
        var a = a1;
        var scale = scale1;
        var distance = distance1;
        if (this.hashTalent(Talent_1.default.MAGIC_02)) {
          a = a2;
          scale = scale2;
          distance = distance2;
        }
        if (this.hashTalent(Talent_1.default.MAGIC_12)) {
          a = a2;
          scale = scale4;
          distance = distance2;
          if (this.hashTalent(Talent_1.default.MAGIC_02)) {
            a = a3;
            scale = scale3;
            distance = distance3;
          }
        }
        var index = 0;
        this.schedule(function() {
          for (var i = 0; i < a[index].length; i++) cc.instantiate(_this.icethron).getComponent(IceThron_1.default).show(_this.player, a[index][i], distance[index], scale[index]);
          index++;
        }, .5, a.length - 1);
      };
      TalentMagic.prototype.fire = function(shooter, bulletArcExNum, bulletType) {
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        this.hashTalent(Talent_1.default.MAGIC_02) && (shooter.data.bulletArcExNum = 80 == bulletArcExNum ? 99 : 2);
        shooter.data.bulletLineExNum = 0;
        shooter.fireBullet(0);
      };
      TalentMagic.prototype.changePerformance = function() {};
      TalentMagic.prototype.takeIce = function() {
        if (this.hashTalent(Talent_1.default.MAGIC_13) && this.magicice.isShow) {
          StatusManager_1.default.addStatus2NearEnemies(this.player, this.player.node, StatusManager_1.default.FROZEN, 300, new FromData_1.default());
          this.magicice.breakIce();
          return true;
        }
        return false;
      };
      TalentMagic.prototype.takeDamage = function(damageData, from, actor) {
        return false;
      };
      TalentMagic.prototype.addLighteningFall = function(isArea, damagePoint) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_LIGHTENINGFALL, {
          pos: this.getNearestEnemyPosition(),
          showArea: isArea,
          damage: damagePoint
        });
      };
      TalentMagic.prototype.getNearestEnemyPosition = function() {
        var shortdis = 99999;
        var targetNode;
        for (var _i = 0, _a = this.player.weaponRight.meleeWeapon.dungeon.monsterManager.monsterList; _i < _a.length; _i++) {
          var monster = _a[_i];
          if (monster && monster.node && monster.node.active && !monster.sc.isDied) {
            var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, monster.node.position);
            if (dis < shortdis) {
              shortdis = dis;
              targetNode = monster.node;
            }
          }
        }
        for (var _b = 0, _c = this.player.weaponRight.meleeWeapon.dungeon.monsterManager.bossList; _b < _c.length; _b++) {
          var boss = _c[_b];
          if (!boss.sc.isDied) {
            var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, boss.node.position);
            if (dis < shortdis) {
              shortdis = dis;
              targetNode = boss.node;
            }
          }
        }
        if (targetNode) return targetNode.position;
        return this.node.position.addSelf(cc.v3(Logic_1.default.getRandomNum(0, 600) - 300, Logic_1.default.getRandomNum(0, 600) - 300));
      };
      TalentMagic.prototype.showLighteningCircle = function() {
        var _this = this;
        this.magicLighteningCircle.opacity = 128;
        this.magicLighteningCircle.scale = 1;
        cc.tween(this.magicLighteningCircle).to(1, {
          scale: 10
        }).call(function() {
          StatusManager_1.default.addStatus2NearEnemies(_this.player, _this.player.node, StatusManager_1.default.DIZZ, 300, new FromData_1.default());
          _this.magicLighteningCircle.opacity = 0;
          _this.magicLighteningCircle.scale = 1;
        }).start();
      };
      TalentMagic.prototype.initFireGhosts = function() {
        var length = 5;
        var count = this.fireGhostNum;
        for (var i = 0; i < length - count; i++) {
          var ghostNode = null;
          this.ghostPool.size() > 0 && (ghostNode = this.ghostPool.get());
          ghostNode && !ghostNode.active || (ghostNode = cc.instantiate(this.fireGhost));
          this.fireGhostNum++;
          ghostNode.active = true;
          var fg = ghostNode.getComponent(FireGhost_1.default);
          fg.initCollider();
          this.player.node.parent.addChild(fg.node);
          fg.init(this.player, 72 * i);
        }
      };
      TalentMagic.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 10) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      var TalentMagic_1;
      __decorate([ property(MagicCircle_1.default) ], TalentMagic.prototype, "magiccircle", void 0);
      __decorate([ property(MagicIce_1.default) ], TalentMagic.prototype, "magicice", void 0);
      __decorate([ property(cc.Prefab) ], TalentMagic.prototype, "icethron", void 0);
      __decorate([ property(cc.Prefab) ], TalentMagic.prototype, "fireGhost", void 0);
      __decorate([ property(cc.Node) ], TalentMagic.prototype, "magicLighteningCircle", void 0);
      TalentMagic = TalentMagic_1 = __decorate([ ccclass ], TalentMagic);
      return TalentMagic;
    }(Talent_1.default);
    exports.default = TalentMagic;
    cc._RF.pop();
  }, {
    "../data/FromData": "FromData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../manager/StatusManager": "StatusManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "./FireGhost": "FireGhost",
    "./IceThron": "IceThron",
    "./MagicCircle": "MagicCircle",
    "./MagicIce": "MagicIce",
    "./Talent": "Talent"
  } ],
  TalentManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c0baFsDZxK7LkydHOM4lr2", "TalentManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TalentManager = function(_super) {
      __extends(TalentManager, _super);
      function TalentManager() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TalentManager = __decorate([ ccclass ], TalentManager);
      return TalentManager;
    }(cc.Component);
    exports.default = TalentManager;
    cc._RF.pop();
  }, {} ],
  TalentShield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9db0eWCt9hLa7XLpSo6xHBj", "TalentShield");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StatusManager_1 = require("../manager/StatusManager");
    var Logic_1 = require("../logic/Logic");
    var DamageData_1 = require("../data/DamageData");
    var Talent_1 = require("./Talent");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TalentShield = function(_super) {
      __extends(TalentShield, _super);
      function TalentShield() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.shieldBackSprite = null;
        _this.shieldFrontSprite = null;
        return _this;
      }
      TalentShield_1 = TalentShield;
      TalentShield.prototype.onLoad = function() {};
      TalentShield.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.shieldBackSprite = this.getSpriteChildSprite([ "shieldback" ]);
        this.shieldFrontSprite = this.getSpriteChildSprite([ "shieldfront" ]);
        this.shieldBackSprite.node.opacity = 0;
        this.shieldFrontSprite.node.opacity = 0;
        this.sprites = new Array();
        var arr = [ 2, 3, 4, 5, 9, 12, 13, 14 ];
        for (var i = 0; i < arr.length; i++) {
          var sprite = this.getSpriteChildSprite([ "shieldfront", "sprite" + arr[i] ]);
          sprite.node.opacity = 0;
          this.sprites.push(sprite);
        }
      };
      TalentShield.prototype.changePerformance = function() {
        for (var _i = 0, _a = this.sprites; _i < _a.length; _i++) {
          var sprite = _a[_i];
          sprite.node.opacity = 0;
        }
        this.shieldFrontSprite.node.color = cc.color(255, 255, 255);
        var isThrow = false;
        this.changeRes(isThrow ? "shield06" : "shield01");
      };
      TalentShield.prototype.changeRes = function(resName) {
        if (!resName || resName.length < 1) return;
        this.shieldBackSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
        this.shieldFrontSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
      };
      TalentShield.prototype.skillCanUse = function() {
        return true;
      };
      TalentShield.prototype.useSKill = function() {
        this.doSkill();
      };
      TalentShield.prototype.doSkill = function() {
        var _this = this;
        if (!this.talentSkill) return;
        if (this.talentSkill.IsExcuting) return;
        var cooldown = 7;
        var invulnerabilityTime = 1;
        this.hashTalent(TalentShield_1.SHIELD_13) && (cooldown = 5);
        this.talentSkill.next(function() {
          var statusName = StatusManager_1.default.SHIELD_NORMAL;
          var animOverTime = .1;
          _this.talentSkill.IsExcuting = true;
          var y = _this.shieldFrontSprite.node.y;
          _this.shieldBackSprite.node.scaleX = 1;
          _this.shieldFrontSprite.node.scaleX = 0;
          _this.shieldBackSprite.node.opacity = 255;
          _this.shieldFrontSprite.node.opacity = 255;
          _this.shieldFrontSprite.node.x = -8;
          if (_this.hashTalent(TalentShield_1.SHIELD_14)) {
            statusName = StatusManager_1.default.SHIELD_LONG;
            invulnerabilityTime = 2;
          }
          if (_this.hashTalent(TalentShield_1.SHIELD_06)) {
            invulnerabilityTime = 0;
            animOverTime = 0;
          }
          cc.tween(_this.shieldBackSprite.node).to(.1, {
            scaleX: 0,
            scaleY: 1
          }).to(.1, {
            position: cc.v3(-16, y)
          }).delay(invulnerabilityTime).to(animOverTime, {
            position: cc.v3(-8, y)
          }).to(animOverTime, {
            scale: 1
          }).start();
          cc.tween(_this.shieldFrontSprite.node).to(.1, {
            scale: 1
          }).to(.1, {
            position: cc.v3(8, y)
          }).delay(invulnerabilityTime).to(animOverTime, {
            position: cc.v3(-8, y)
          }).to(animOverTime, {
            scaleX: 0,
            scaleY: 1
          }).start();
          _this.player.addStatus(statusName, new FromData_1.default());
          _this.scheduleOnce(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          }, .2);
          _this.scheduleOnce(function() {
            _this.talentSkill.IsExcuting = false;
          }, invulnerabilityTime + .2);
          _this.scheduleOnce(function() {
            _this.shieldBackSprite.node.opacity = 255;
          }, 1);
        }, cooldown, true);
      };
      TalentShield.prototype.canAddStatus = function(statusType) {
        if (!this.hashTalent(TalentShield_1.SHIELD_04)) return true;
        var cant = statusType == StatusManager_1.default.FROZEN || statusType == StatusManager_1.default.BURNING || statusType == StatusManager_1.default.DIZZ || statusType == StatusManager_1.default.TOXICOSIS || statusType == StatusManager_1.default.CURSING || statusType == StatusManager_1.default.BLEEDING;
        return !cant;
      };
      TalentShield.prototype.takeDamage = function(damageData, from, actor) {
        if (actor && this.IsExcuting) {
          if (this.hashTalent(TalentShield_1.SHIELD_05)) return actor.takeDamage(new DamageData_1.default(5), from);
          if (this.hashTalent(TalentShield_1.SHIELD_02)) return actor.takeDamage(new DamageData_1.default(1), from);
        }
        return false;
      };
      var TalentShield_1;
      TalentShield = TalentShield_1 = __decorate([ ccclass ], TalentShield);
      return TalentShield;
    }(Talent_1.default);
    exports.default = TalentShield;
    cc._RF.pop();
  }, {
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Logic": "Logic",
    "../manager/StatusManager": "StatusManager",
    "../utils/AudioPlayer": "AudioPlayer",
    "./Talent": "Talent"
  } ],
  TalentTree: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "72de9AsMtdHLrzBNccvkOkS", "TalentTree");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TalentTree = function() {
      function TalentTree() {}
      return TalentTree;
    }();
    exports.default = TalentTree;
    cc._RF.pop();
  }, {} ],
  Talent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11194HbWx5MlLwfYetzGt8W", "Talent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NextStep_1 = require("../utils/NextStep");
    var Player_1 = require("../logic/Player");
    var EventHelper_1 = require("../logic/EventHelper");
    var CoolDownView_1 = require("../ui/CoolDownView");
    var Utils_1 = require("../utils/Utils");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Talent = function(_super) {
      __extends(Talent, _super);
      function Talent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.talentSkill = new NextStep_1.default();
        _this.coolDownId = CoolDownView_1.default.PROFESSION;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Talent_1 = Talent;
      Object.defineProperty(Talent.prototype, "IsExcuting", {
        get: function() {
          return this.talentSkill.IsExcuting;
        },
        set: function(flag) {
          this.talentSkill.IsExcuting = flag;
        },
        enumerable: false,
        configurable: true
      });
      Talent.prototype.onLoad = function() {};
      Talent.prototype.init = function(data) {
        this.player = this.getComponent(Player_1.default);
        this.data = data;
      };
      Talent.prototype.initCoolDown = function(data, storePointMax) {
        var _this = this;
        this.talentSkill.init(false, storePointMax, data.storePoint, data.cooldown, data.lastTime, function(lastTime) {
          _this.updateCooldownAndHud(data.cooldown, lastTime);
        });
      };
      Talent.prototype.useSKill = function() {
        var _this = this;
        if (!this.talentSkill) return;
        if (this.talentSkill.IsExcuting) return;
        if (this.player.data.currentDream >= this.data.cost && this.skillCanUse()) {
          var cooldown_1 = this.data.cooldown;
          this.talentSkill.next(function() {
            _this.data.lastTime = Date.now();
            _this.talentSkill.IsExcuting = true;
            _this.player.updateDream(_this.data.cost);
            _this.data.useCount++;
            _this.doSkill();
            _this.updateCooldownAndHud(cooldown_1, _this.data.lastTime);
          }, cooldown_1, true, function(lastTime) {
            _this.updateCooldownAndHud(cooldown_1, lastTime);
          });
        } else if (this.skillCanUse()) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_SHAKE_PLAYER_DREAMBAR);
          Utils_1.default.toast("\u80fd\u91cf\u4e0d\u8db3\u3002");
        } else AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
      };
      Talent.prototype.refreshCooldown = function() {
        this.data.lastTime = this.talentSkill.refreshCoolDown(this.data.cooldown);
        this.updateCooldownAndHud(this.data.cooldown, this.data.lastTime);
      };
      Talent.prototype.cutCooldown = function(cutSecond) {
        this.data.lastTime = this.talentSkill.cutCoolDown(cutSecond);
        this.updateCooldownAndHud(this.data.cooldown, this.data.lastTime);
      };
      Talent.prototype.updateCooldownAndHud = function(duration, lastTime) {
        if (!this.node) return;
        this.data.storePoint = this.talentSkill.StorePoint;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_COOLDOWN, {
          id: this.coolDownId,
          duration: duration,
          lastTime: lastTime,
          storePoint: this.talentSkill.StorePoint,
          storePointMax: this.talentSkill.StorePointMax
        });
      };
      Talent.prototype.getSpriteChildSprite = function(childNames) {
        var node = this.node;
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      Talent.prototype.hashTalent = function(resName) {
        var _a;
        return (null === (_a = this.data) || void 0 === _a ? void 0 : _a.resName) == resName;
      };
      Talent.prototype.shoot = function(shooter, bulletArcExNum, bulletLineExNum, bulletType, prefab, data) {
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(0, null, 0, 0, prefab, data);
      };
      Talent.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      var Talent_1;
      Talent.DASH = "1000000";
      Talent.SHIELD = "2000000";
      Talent.MAGIC = "3000000";
      Talent.ARCHER = "4000000";
      Talent.DASH_01 = Talent_1.DASH + 1;
      Talent.DASH_02 = Talent_1.DASH + 2;
      Talent.DASH_03 = Talent_1.DASH + 3;
      Talent.DASH_04 = Talent_1.DASH + 4;
      Talent.DASH_05 = Talent_1.DASH + 5;
      Talent.DASH_06 = Talent_1.DASH + 6;
      Talent.DASH_07 = Talent_1.DASH + 7;
      Talent.DASH_08 = Talent_1.DASH + 8;
      Talent.DASH_09 = Talent_1.DASH + 9;
      Talent.DASH_10 = Talent_1.DASH + 10;
      Talent.DASH_11 = Talent_1.DASH + 11;
      Talent.DASH_12 = Talent_1.DASH + 12;
      Talent.DASH_13 = Talent_1.DASH + 13;
      Talent.DASH_14 = Talent_1.DASH + 14;
      Talent.SHIELD_01 = Talent_1.SHIELD + 1;
      Talent.SHIELD_02 = Talent_1.SHIELD + 2;
      Talent.SHIELD_03 = Talent_1.SHIELD + 3;
      Talent.SHIELD_04 = Talent_1.SHIELD + 4;
      Talent.SHIELD_05 = Talent_1.SHIELD + 5;
      Talent.SHIELD_06 = Talent_1.SHIELD + 6;
      Talent.SHIELD_07 = Talent_1.SHIELD + 7;
      Talent.SHIELD_08 = Talent_1.SHIELD + 8;
      Talent.SHIELD_09 = Talent_1.SHIELD + 9;
      Talent.SHIELD_10 = Talent_1.SHIELD + 10;
      Talent.SHIELD_11 = Talent_1.SHIELD + 11;
      Talent.SHIELD_12 = Talent_1.SHIELD + 12;
      Talent.SHIELD_13 = Talent_1.SHIELD + 13;
      Talent.SHIELD_14 = Talent_1.SHIELD + 14;
      Talent.MAGIC_01 = Talent_1.MAGIC + 1;
      Talent.MAGIC_02 = Talent_1.MAGIC + 2;
      Talent.MAGIC_03 = Talent_1.MAGIC + 3;
      Talent.MAGIC_04 = Talent_1.MAGIC + 4;
      Talent.MAGIC_05 = Talent_1.MAGIC + 5;
      Talent.MAGIC_06 = Talent_1.MAGIC + 6;
      Talent.MAGIC_07 = Talent_1.MAGIC + 7;
      Talent.MAGIC_08 = Talent_1.MAGIC + 8;
      Talent.MAGIC_09 = Talent_1.MAGIC + 9;
      Talent.MAGIC_10 = Talent_1.MAGIC + 10;
      Talent.MAGIC_11 = Talent_1.MAGIC + 11;
      Talent.MAGIC_12 = Talent_1.MAGIC + 12;
      Talent.MAGIC_13 = Talent_1.MAGIC + 13;
      Talent.MAGIC_14 = Talent_1.MAGIC + 14;
      Talent.MAGIC_15 = Talent_1.MAGIC + 15;
      Talent.MAGIC_16 = Talent_1.MAGIC + 16;
      Talent.TALENT_000 = "talent000";
      Talent.TALENT_001 = "talent001";
      Talent.TALENT_002 = "talent002";
      Talent.TALENT_003 = "talent003";
      Talent.TALENT_004 = "talent004";
      Talent.TALENT_005 = "talent005";
      Talent.TALENT_006 = "talent006";
      Talent.TALENT_007 = "talent007";
      Talent.TALENT_008 = "talent008";
      Talent.TALENT_009 = "talent009";
      Talent.TALENT_010 = "talent010";
      Talent.TALENT_011 = "talent011";
      Talent.TALENT_012 = "talent012";
      Talent.TALENT_013 = "talent013";
      Talent.TALENT_014 = "talent014";
      Talent.TALENT_015 = "talent015";
      Talent.TALENT_016 = "talent016";
      Talent.TALENT_017 = "talent017";
      Talent.TALENT_018 = "talent018";
      Talent.TALENT_019 = "talent019";
      Talent.TALENT_100 = "talent100";
      Talent.TALENT_101 = "talent101";
      Talent.TALENT_102 = "talent102";
      Talent.TALENT_103 = "talent103";
      Talent.TALENT_200 = "talent200";
      Talent.TALENT_201 = "talent201";
      Talent = Talent_1 = __decorate([ ccclass ], Talent);
      return Talent;
    }(cc.Component);
    exports.default = Talent;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper",
    "../logic/Player": "Player",
    "../ui/CoolDownView": "CoolDownView",
    "../utils/AudioPlayer": "AudioPlayer",
    "../utils/NextStep": "NextStep",
    "../utils/Utils": "Utils"
  } ],
  TargetCondition: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "efa2arztO5LRpoxhRQRViF9", "TargetCondition");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../../Constants");
    var B3Condition_1 = require("../../core/B3Condition");
    var TargetCondition = function(_super) {
      __extends(TargetCondition, _super);
      function TargetCondition() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TargetCondition.prototype.tick = function(tick) {
        if (this.target == tick.blackboard.get("target")) return Constants_1.EnumStatus.SUCCESS;
        Constants_1.EnumStatus.FAILURE;
      };
      return TargetCondition;
    }(B3Condition_1.B3Condition);
    exports.default = TargetCondition;
    cc._RF.pop();
  }, {
    "../../Constants": "Constants",
    "../../core/B3Condition": "B3Condition"
  } ],
  TarotCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4b2bYbHidG7bCWzE85sIMb", "TarotCard");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TarotData_1 = require("../data/TarotData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TarotCard = function(_super) {
      __extends(TarotCard, _super);
      function TarotCard() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.indexLabel = null;
        _this.anim = null;
        _this.frontNode = null;
        _this.backNode = null;
        _this.data = new TarotData_1.default();
        return _this;
      }
      TarotCard.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.frontNode = this.node.getChildByName("sprite").getChildByName("front");
        this.backNode = this.node.getChildByName("sprite").getChildByName("back");
        this.indexLabel = this.node.getChildByName("sprite").getChildByName("front").getChildByName("index").getComponent(cc.Label);
        this.frontNode.scaleX = 0;
        this.backNode.scaleY = 1;
      };
      TarotCard.prototype.initFromGround = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("TarotIdle");
      };
      TarotCard.prototype.showCard = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("TarotFilpToFront");
      };
      TarotCard.prototype.coverCard = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("TarotFilpToBack");
      };
      TarotCard.prototype.start = function() {};
      TarotCard = __decorate([ ccclass ], TarotCard);
      return TarotCard;
    }(cc.Component);
    exports.default = TarotCard;
    cc._RF.pop();
  }, {
    "../data/TarotData": "TarotData"
  } ],
  TarotData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2921ee/FxFNuIPjZdXjGRw+", "TarotData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var TarotData = function() {
      function TarotData() {
        this.nameCn = "";
        this.nameEn = "";
        this.desc = "";
        this.resName = "";
        this.index = 0;
        this.word1 = "";
        this.word2 = "";
        this.word3 = "";
        this.word4 = "";
        this.word5 = "";
        this.word6 = "";
      }
      TarotData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data, true);
      };
      TarotData.prototype.clone = function() {
        var e = new TarotData();
        e.valueCopy(this);
        return e;
      };
      return TarotData;
    }();
    exports.default = TarotData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils"
  } ],
  TarotManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b67c009qhlE0oYcKSjCxjFX", "TarotManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TarotCard_1 = require("../item/TarotCard");
    var Dungeon_1 = require("../logic/Dungeon");
    var IndexZ_1 = require("../utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TarotManager = function(_super) {
      __extends(TarotManager, _super);
      function TarotManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.card = null;
        return _this;
      }
      TarotManager.prototype.getCard = function(resName, pos) {
        var cardPrefab = cc.instantiate(this.card);
        cardPrefab.parent = this.node;
        cardPrefab.position = Dungeon_1.default.getPosInMap(pos);
        cardPrefab.zIndex = IndexZ_1.default.getActorZIndex(cardPrefab.position);
        var card = cardPrefab.getComponent(TarotCard_1.default);
        card.data.resName = resName;
        return card;
      };
      TarotManager.THE_FOOL = "tarot00";
      TarotManager.THE_MAGICIAN = "tarot01";
      TarotManager.THE_HIGH_PRIESTESS = "tarot02";
      TarotManager.THE_EMPRESS = "tarot03";
      TarotManager.THE_EMPEROR = "tarot04";
      TarotManager.THE_HIEROPHANT = "tarot05";
      TarotManager.THE_LOVERS = "tarot06";
      TarotManager.THE_CHARIOT = "tarot07";
      TarotManager.STRENGTH = "tarot08";
      TarotManager.THE_HERMIT = "tarot09";
      TarotManager.THE_WHEEL_OF_FORTUNE = "tarot10";
      TarotManager.JUSTICE = "tarot11";
      TarotManager.THE_HANGEDMAN = "tarot12";
      TarotManager.DEATH = "tarot13";
      TarotManager.TEMPERANCE = "tarot14";
      TarotManager.THE_DEVIL = "tarot15";
      TarotManager.THE_TOWER = "tarot16";
      TarotManager.THE_STAR = "tarot17";
      TarotManager.THE_MOON = "tarot18";
      TarotManager.THE_SUN = "tarot19";
      TarotManager.JUDGEMENT = "tarot20";
      TarotManager.THE_WORLD = "tarot21";
      __decorate([ property(cc.Prefab) ], TarotManager.prototype, "card", void 0);
      return TarotManager;
    }(cc.Component);
    exports.default = TarotManager;
    cc._RF.pop();
  }, {
    "../item/TarotCard": "TarotCard",
    "../logic/Dungeon": "Dungeon",
    "../utils/IndexZ": "IndexZ"
  } ],
  TarotTable: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f0e8dVSyEpP0bI6DNiqwoQc", "TarotTable");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Tips_1 = require("../ui/Tips");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TarotTable = function(_super) {
      __extends(TarotTable, _super);
      function TarotTable() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TarotTable.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        this.tips = this.node.getChildByName("Tips").getComponent(Tips_1.default);
        this.tips.onInteract(function() {
          _this.node && _this.showCards();
        });
      };
      TarotTable.prototype.start = function() {};
      TarotTable.prototype.showCards = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play();
      };
      TarotTable.prototype.setPos = function(pos) {
        this.pos = pos;
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(pos);
        this.node.position = this.entity.Transform.position.clone();
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.entity.Transform.position);
      };
      TarotTable = __decorate([ ccclass ], TarotTable);
      return TarotTable;
    }(Building_1.default);
    exports.default = TarotTable;
    cc._RF.pop();
  }, {
    "../logic/Dungeon": "Dungeon",
    "../ui/Tips": "Tips",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  TestAI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b52d3pSMSdM6KQ2H7DmlzLK", "TestAI");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var B3BehaviorTree_1 = require("./behavior3/core/B3BehaviorTree");
    var B3Blackboard_1 = require("./behavior3/core/B3Blackboard");
    var B3Utils_1 = require("./behavior3/utils/B3Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TestAI = function(_super) {
      __extends(TestAI, _super);
      function TestAI() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.attckTarget = null;
        return _this;
      }
      TestAI.prototype.start = function() {
        var _this = this;
        cc.tween(this.attckTarget).repeatForever(cc.tween(this.attckTarget).to(1, {
          x: 100
        }).to(1, {
          x: 0
        })).start();
        this.blackboardData = new B3Blackboard_1.B3Blackboard();
        cc.loader.loadRes("behavior3/testai3", cc.JsonAsset, function(err, json) {
          if (json) {
            _this.testTree = new B3BehaviorTree_1.B3BehaviorTree(B3Utils_1.createUUID());
            var data = json.json;
            _this.testTree.load(data, data.custom_nodes);
          }
        });
      };
      TestAI.prototype.update = function(dt) {
        this.attckTarget && this.blackboardData.set("targetpos", this.attckTarget.position);
        this.blackboardData.set("mypos", this.node.position);
        this.testTree && this.testTree.tick({}, this.blackboardData);
      };
      __decorate([ property(cc.Node) ], TestAI.prototype, "attckTarget", void 0);
      TestAI = __decorate([ ccclass ], TestAI);
      return TestAI;
    }(cc.Component);
    exports.default = TestAI;
    cc._RF.pop();
  }, {
    "./behavior3/core/B3BehaviorTree": "B3BehaviorTree",
    "./behavior3/core/B3Blackboard": "B3Blackboard",
    "./behavior3/utils/B3Utils": "B3Utils"
  } ],
  TestFog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1aa806ypbFLYIf29yLJ7ObM", "TestFog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TestFrog = function(_super) {
      __extends(TestFrog, _super);
      function TestFrog() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TestFrog.prototype.start = function() {};
      TestFrog.prototype.show = function() {
        this.mat || (this.mat = this.node.getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("wh_ratio", this.node.width / this.node.height);
        this.mat.setProperty("center", cc.v2(.5, .5));
        this.mat.setProperty("radius", .5);
      };
      TestFrog = __decorate([ ccclass ], TestFrog);
      return TestFrog;
    }(cc.Component);
    exports.default = TestFrog;
    cc._RF.pop();
  }, {} ],
  Test: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f27abc9Kq9M9YY+mw/i2T6U", "Test");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Test = function(_super) {
      __extends(Test, _super);
      function Test() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.graphics = null;
        _this.graphicsTest = null;
        _this.camera = null;
        _this.ray = null;
        _this.shadow = null;
        _this.shadowCamera = null;
        _this.bg = null;
        _this.radius = 200;
        _this.playerPos = cc.v2(640, 360);
        _this.zoomArr = [ 1, .5 ];
        _this.index = 0;
        _this.waveOffset = 0;
        _this.rad = 200;
        return _this;
      }
      Test.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var pos = event.getLocation();
          _this.playerPos = pos.clone();
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          var pos = event.getLocation();
          _this.playerPos = pos.clone();
          cc.log("playerPos:" + pos.x + "," + pos.y);
        }, this);
        this.mat2 = this.bg.getComponent(cc.Sprite).getMaterial(0);
        this.bg.on(cc.Node.EventType.TOUCH_END, function(evt) {
          var pos = _this.camera.getWorldToScreenPoint(evt.getLocation());
          var canvasSize = cc.view.getCanvasSize();
          var visibleSize = cc.view.getVisibleSize();
          var visibleRatio = visibleSize.width / visibleSize.height;
          var scale = canvasSize.width / visibleSize.width;
          _this.mat2.setProperty("canvas_size", cc.v2(canvasSize.width, canvasSize.height));
          _this.mat2.setProperty("wh_ratio", visibleRatio);
          var center = cc.v2(pos.x / visibleSize.width, pos.y / visibleSize.height);
          var y = Math.abs(center.y - .5) * visibleSize.height * scale / canvasSize.height;
          _this.mat2.setProperty("center", cc.v2(center.x, center.y > .5 ? .5 + y : .5 - y));
          _this.waveOffset = 0;
        }, this);
        this.graphicsTest.strokeColor = cc.Color.RED;
        this.graphicsTest.lineWidth = 32;
        this.graphicsTest.moveTo(0, 0);
        this.graphicsTest.lineTo(300, 0);
        this.graphicsTest.stroke();
        this.graphicsTest.lineWidth = 64;
        this.graphicsTest.moveTo(0, 0);
        this.graphicsTest.lineTo(1, 0);
        this.graphicsTest.stroke();
        this.graphicsTest.lineWidth = 64;
        this.graphicsTest.moveTo(300, 0);
        this.graphicsTest.lineTo(301, 0);
        this.graphicsTest.stroke();
      };
      Test.prototype.changeZoom = function() {
        if (this.camera) {
          this.camera.zoomRatio = this.zoomArr[this.index++];
          this.index > this.zoomArr.length - 1 && (this.index = 0);
        }
      };
      Test.prototype.changeRayCast = function() {
        this.graphicsTest.clear();
        this.graphicsTest.fillColor = cc.color(255, 255, 255, 30);
        this.graphicsTest.strokeColor = cc.color(255, 255, 255, 30);
        this.rad -= 10;
        this.graphicsTest.lineWidth = this.rad;
        this.graphicsTest.moveTo(0, 0);
        this.graphicsTest.lineTo(1, 0);
        this.graphicsTest.stroke();
      };
      Test.prototype.start = function() {
        this.mat = this.graphics.getMaterial(0);
        this.mat1 = this.ray.getMaterial(0);
        this.render(this.playerPos);
        var texture = new cc.RenderTexture();
        texture.initWithSize(cc.visibleRect.width / 8, cc.visibleRect.height / 8);
        texture.setFilters(cc.Texture2D.Filter.NEAREST, cc.Texture2D.Filter.NEAREST);
        this.shadowCamera.targetTexture = texture;
        this.shadowCamera.render();
        this.shadow.spriteFrame = new cc.SpriteFrame(texture);
      };
      Test.prototype.render = function(pos) {
        var p = this.graphics.node.convertToNodeSpaceAR(pos);
        this.graphics.clear();
        this.graphics.fillColor = cc.color(0, 255, 0);
        this.graphics.moveTo(p.x - this.radius / 4, p.y);
        this.graphics.lineTo(p.x - this.radius, p.y - this.radius);
        this.graphics.lineTo(p.x + this.radius, p.y - this.radius);
        this.graphics.lineTo(p.x + this.radius / 4, p.y);
        this.graphics.close();
        this.graphics.fill();
      };
      Test.prototype.updateMat = function(mat, pos, rayRadius) {
        var canvasSize = cc.view.getCanvasSize();
        var visibleSize = cc.view.getVisibleSize();
        var visibleRatio = visibleSize.width / visibleSize.height;
        var r = rayRadius / visibleSize.height;
        var scale = canvasSize.width / visibleSize.width;
        mat.setProperty("screen", cc.v2(canvasSize.width, canvasSize.height));
        mat.setProperty("maxRadius", r * this.camera.zoomRatio);
        mat.setProperty("whRatio", visibleRatio);
        var lightPos = cc.v2(pos.x / visibleSize.width, pos.y / visibleSize.height);
        var y = Math.abs(lightPos.y - .5) * visibleSize.height * scale / canvasSize.height;
        mat.setProperty("lightPos", cc.v2(lightPos.x, lightPos.y > .5 ? .5 + y : .5 - y));
      };
      Test.prototype.lateUpdate = function(dt) {
        this.render(this.playerPos);
        var pos = this.camera.getWorldToScreenPoint(this.playerPos);
        this.updateMat(this.mat, cc.v2(pos.x, pos.y), this.radius);
      };
      Test.prototype.update = function(dt) {
        if (this.waveOffset > 2) return;
        this.waveOffset += 2 * dt;
        this.mat2.setProperty("wave_offset", this.waveOffset);
      };
      __decorate([ property(cc.Graphics) ], Test.prototype, "graphics", void 0);
      __decorate([ property(cc.Graphics) ], Test.prototype, "graphicsTest", void 0);
      __decorate([ property(cc.Camera) ], Test.prototype, "camera", void 0);
      __decorate([ property(cc.Graphics) ], Test.prototype, "ray", void 0);
      __decorate([ property(cc.Sprite) ], Test.prototype, "shadow", void 0);
      __decorate([ property(cc.Camera) ], Test.prototype, "shadowCamera", void 0);
      __decorate([ property(cc.Node) ], Test.prototype, "bg", void 0);
      Test = __decorate([ ccclass ], Test);
      return Test;
    }(cc.Component);
    exports.default = Test;
    cc._RF.pop();
  }, {} ],
  Tile: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8047r9sJ5IqqTgIdjYi6dc", "Tile");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Random_1 = require("../utils/Random");
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Tile = function(_super) {
      __extends(Tile, _super);
      function Tile() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.isBroken = false;
        _this.isAutoShow = true;
        _this.isAnimPlaying = false;
        _this.isBreakingNow = false;
        _this.tileType = "*0000";
        _this.resName = "";
        _this.w = 1;
        _this.h = 1;
        _this.isWater = false;
        _this.rect = cc.rect(0, 0, 128, 128);
        return _this;
      }
      Tile.prototype.onLoad = function() {
        this.isAutoShow = true;
        this.anim = this.getComponent(cc.Animation);
        this.floor = this.node.getChildByName("sprite").getChildByName("floor").getComponent(cc.Sprite);
      };
      Tile.prototype.start = function() {
        this.changeRes(this.resName, this.w, this.h);
        this.rect.x = this.node.position.x;
        this.rect.y = this.node.position.y;
        this.rect.width = this.floor.node.width * this.floor.node.scale;
        this.rect.height = this.floor.node.height * this.floor.node.scale;
        this.isWater && this.waterIdle();
      };
      Tile.prototype.TileBreak = function() {};
      Tile.prototype.TileBreakFinish = function() {
        var _this = this;
        this.isBroken = true;
        this.isAnimPlaying = false;
        this.isAutoShow && this.scheduleOnce(function() {
          _this.showTile();
        }, 2);
      };
      Tile.prototype.TileShow = function() {
        this.isAnimPlaying = false;
      };
      Tile.prototype.breakTile = function() {
        if (this.isAnimPlaying || this.isWater) return;
        this.anim.play("TileBreak");
        this.isBreakingNow = true;
        this.isAnimPlaying = true;
      };
      Tile.prototype.showTile = function() {
        if (this.isAnimPlaying || !this.anim || this.isWater) return;
        this.anim.play("TileShow");
        this.isBroken = false;
        this.isBreakingNow = false;
        this.isAnimPlaying = true;
      };
      Tile.prototype.containsRect = function(rect) {
        if (this.rect.containsRect(rect)) return true;
        var inrect = cc.rect();
        this.rect.intersection(inrect, rect);
        return inrect.width > .9 * rect.width || inrect.height > .9 * rect.height;
      };
      Tile.prototype.changeRes = function(resName, width, height) {
        this.floor.spriteFrame = Logic_1.default.spriteFrameRes(resName);
        null == this.floor.spriteFrame && (this.floor.spriteFrame = Logic_1.default.spriteFrameRes(resName));
        this.floor.node.width = 32 * width;
        this.floor.node.height = 32 * height;
      };
      Tile.prototype.waterIdle = function() {
        var _this = this;
        var action = cc.tween().delay(.2).call(function() {
          _this.changeRes("wateridle000", _this.w, _this.h);
        }).delay(.2).call(function() {
          _this.changeRes("wateridle001", _this.w, _this.h);
        }).delay(.2).call(function() {
          _this.changeRes("wateridle002", _this.w, _this.h);
        }).delay(.2).call(function() {
          _this.changeRes("wateridle003", _this.w, _this.h);
        });
        this.floor.node.stopAllActions();
        cc.tween(this.floor.node).repeatForever(action).start();
      };
      Tile.prototype.disappear = function() {
        cc.tween(this.node).to(.5 + Random_1.default.rand(), {
          opacity: 0
        }).start();
      };
      __decorate([ property(cc.Label) ], Tile.prototype, "label", void 0);
      Tile = __decorate([ ccclass ], Tile);
      return Tile;
    }(cc.Component);
    exports.default = Tile;
    cc._RF.pop();
  }, {
    "../utils/Random": "Random",
    "./Logic": "Logic"
  } ],
  Tips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36c4bnGdrlOy4Y1XkbF9xfT", "Tips");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseColliderComponent_1 = require("../base/BaseColliderComponent");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Tips = function(_super) {
      __extends(Tips, _super);
      function Tips() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isTriggering = false;
        return _this;
      }
      Tips.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.node.opacity = 0;
        this.entity && this.entity.Move && (this.entity.Move.isStatic = true);
      };
      Tips.prototype.start = function() {};
      Tips.prototype.next = function(isLongPress, player) {
        var _this = this;
        if (this.node && this.node.active && this.interactCallback) {
          if (this.isTriggering) return;
          this.isTriggering = true;
          var anim = this.getComponent(cc.Animation);
          anim.hasAnimationState("TipsTrigger") && anim.play("TipsTrigger");
          this.scheduleOnce(function() {
            _this.isTriggering = false;
          }, .4);
          this.interactCallback(isLongPress, player);
        }
      };
      Tips.prototype.onInteract = function(callback) {
        this.interactCallback = callback;
      };
      Tips.prototype.onEnter = function(callback) {
        this.enterCallback = callback;
      };
      Tips.prototype.onExit = function(callback) {
        this.exitCallback = callback;
      };
      Tips.prototype.onColliderEnter = function(other, self) {
        if (other.tag == CCollider_1.default.TAG.PLAYER_INTERACT) {
          this.node.opacity = 255;
          this.enterCallback && this.enterCallback(other.node);
        }
      };
      Tips.prototype.onColliderExit = function(other, self) {
        if (other.tag == CCollider_1.default.TAG.PLAYER_INTERACT) {
          this.node.opacity = 0;
          this.exitCallback && this.exitCallback(other.node);
        }
      };
      Tips = __decorate([ ccclass ], Tips);
      return Tips;
    }(BaseColliderComponent_1.default);
    exports.default = Tips;
    cc._RF.pop();
  }, {
    "../base/BaseColliderComponent": "BaseColliderComponent",
    "../collider/CCollider": "CCollider"
  } ],
  Toast: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2b27dQlgMFPKqLUuvpM/s/8", "Toast");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Message = function() {
      function Message(msg, isCenter, isTap) {
        this.msg = msg;
        this.isCenter = isCenter;
        this.isTap = isTap;
      }
      return Message;
    }();
    var Toast = function(_super) {
      __extends(Toast, _super);
      function Toast() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.messgeQueue = [];
        _this.isShowing = false;
        return _this;
      }
      Toast.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_TOAST, function(detail) {
          _this.node && _this.addToast(detail.msg, detail.isCenter, detail.isTap);
        });
      };
      Toast.prototype.addToast = function(msg, isCenter, isTap) {
        if (msg.length < 1) return;
        var isSame = false;
        this.messgeQueue.length > 0 && msg == this.messgeQueue[this.messgeQueue.length - 1].msg && (isSame = true);
        isSame || this.messgeQueue.splice(0, 0, new Message(msg, isCenter, isTap));
      };
      Toast.prototype.showToast = function(msg, isCenter, isTap) {
        var _this = this;
        if (msg.length < 1) return;
        this.isShowing = true;
        this.label.node.width = isCenter ? 300 : 600;
        var node = this.node;
        node.stopAllActions();
        var delay = 3;
        if (isTap) {
          delay = .07 * msg.length;
          delay < 3 && (delay = 3);
          var count_1 = 0;
          this.schedule(function() {
            _this.label.string = "" + msg.substr(0, count_1++);
            node.width = _this.label.node.width + 10;
            node.height = _this.label.node.height + 10;
            node.opacity = 255;
          }, .05, msg.length, .3);
        } else this.scheduleOnce(function() {
          _this.label.string = "" + msg;
          node.width = _this.label.node.width + 10;
          node.height = _this.label.node.height + 10;
          node.opacity = 255;
        }, .05);
        var y = isCenter ? 360 : 100;
        node.y = y - 100;
        node.scale = 0;
        cc.tween(node).to(.1, {
          scaleX: 1
        }).to(.1, {
          scaleY: 1
        }).to(.2, {
          y: y
        }).delay(delay).to(.1, {
          scaleY: .1
        }).to(.1, {
          scaleX: 0
        }).to(.1, {
          opacity: 0
        }).call(function() {
          _this.isShowing = false;
        }).start();
      };
      Toast.prototype.update = function(dt) {
        if (!this.isShowing && this.messgeQueue.length > 0) {
          var message = this.messgeQueue.pop();
          this.showToast(message.msg, message.isCenter, message.isTap);
        }
      };
      __decorate([ property(cc.Label) ], Toast.prototype, "label", void 0);
      Toast = __decorate([ ccclass ], Toast);
      return Toast;
    }(cc.Component);
    exports.default = Toast;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper"
  } ],
  TransformComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b88f7ydsjZIxpocDUXOvbUx", "TransformComponent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TransformComponent = void 0;
    var ECS_1 = require("../ECS");
    var TransformComponent = function(_super) {
      __extends(TransformComponent, _super);
      function TransformComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._position = cc.Vec3.ZERO;
        _this._lastPosition = cc.Vec3.ZERO;
        _this.z = 0;
        _this.base = 0;
        _this.fixBase = 0;
        return _this;
      }
      Object.defineProperty(TransformComponent.prototype, "position", {
        get: function() {
          return this._position;
        },
        set: function(pos) {
          this._position = pos;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TransformComponent.prototype, "lastPosition", {
        get: function() {
          return this._lastPosition;
        },
        enumerable: false,
        configurable: true
      });
      TransformComponent.prototype.reset = function() {
        this.position = cc.Vec3.ZERO;
        this.z = 0;
      };
      TransformComponent = __decorate([ ECS_1.ecs.register("Transform") ], TransformComponent);
      return TransformComponent;
    }(ECS_1.ecs.IComponent);
    exports.TransformComponent = TransformComponent;
    cc._RF.pop();
  }, {
    "../ECS": "ECS"
  } ],
  Trap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67e3dv84GNOwbSynhs23bOv", "Trap");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../logic/Dungeon");
    var Player_1 = require("../logic/Player");
    var DamageData_1 = require("../data/DamageData");
    var Building_1 = require("./Building");
    var FromData_1 = require("../data/FromData");
    var IndexZ_1 = require("../utils/IndexZ");
    var InventoryManager_1 = require("../manager/InventoryManager");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Trap = function(_super) {
      __extends(Trap, _super);
      function Trap() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.openSpriteFrame = null;
        _this.closeSpriteFrame = null;
        _this.halfSpriteFrame = null;
        _this.isOpen = false;
        _this.pos = cc.v3(0, 0);
        _this.timeDelay = 0;
        return _this;
      }
      Trap.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite");
      };
      Trap.prototype.start = function() {};
      Trap.prototype.setPos = function(pos) {
        this.pos = pos;
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(pos);
        this.node.position = this.entity.Transform.position.clone();
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      Trap.prototype.openTrap = function() {
        var _this = this;
        if (this.isOpen) return;
        this.isOpen = true;
        this.sprite.getComponent(cc.Sprite).spriteFrame = this.openSpriteFrame;
        this.scheduleOnce(function() {
          _this.isOpen = false;
          if (_this.halfSpriteFrame) {
            _this.sprite.getComponent(cc.Sprite).spriteFrame = _this.halfSpriteFrame;
            _this.scheduleOnce(function() {
              _this.closeSpriteFrame && (_this.sprite.getComponent(cc.Sprite).spriteFrame = _this.closeSpriteFrame);
            }, .2);
          }
        }, .5);
      };
      Trap.prototype.onColliderStay = function(other, self) {
        if (other.tag == CCollider_1.default.TAG.PLAYER && this.isOpen) {
          this.isOpen = false;
          var player = other.getComponent(Player_1.default);
          player && player.inventoryMgr.getEquipBySuit(player.inventoryMgr.equips[InventoryManager_1.default.SHOES]).ignoreTrap < 1 && player.takeDamage(new DamageData_1.default(1), FromData_1.default.getClone(this.actorName(), "trap001", this.node.position), this);
        }
      };
      Trap.prototype.update = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > 3) {
          this.openTrap();
          this.timeDelay = 0;
        }
      };
      Trap.prototype.actorName = function() {
        return "\u5c16\u523a";
      };
      __decorate([ property(cc.SpriteFrame) ], Trap.prototype, "openSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], Trap.prototype, "closeSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], Trap.prototype, "halfSpriteFrame", void 0);
      Trap = __decorate([ ccclass ], Trap);
      return Trap;
    }(Building_1.default);
    exports.default = Trap;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Dungeon": "Dungeon",
    "../logic/Player": "Player",
    "../manager/InventoryManager": "InventoryManager",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  TriggerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d284fgMt1JO66faF7E9Mas", "TriggerData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataUtils_1 = require("../utils/DataUtils");
    var BaseData_1 = require("./BaseData");
    var TriggerData = function(_super) {
      __extends(TriggerData, _super);
      function TriggerData() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.name = "";
        _this.uuid = "";
        _this.res = "";
        _this.id = 0;
        _this.group = 0;
        _this.type = 0;
        _this.count = 0;
        _this.target = 0;
        _this.range = 0;
        _this.autoInterval = 0;
        _this.maxAmmo = 0;
        _this.bulletInterval = 0;
        _this.bulletAngle = 0;
        _this.bulletSize = 0;
        _this.bulletOffsetX = 0;
        _this.bulletArcOffsetX = 0;
        _this.bulletArcExNum = 0;
        _this.bulletLineExNum = 0;
        _this.bulletLineInterval = 0;
        _this.bulletSpeed = 0;
        return _this;
      }
      TriggerData.prototype.valueCopy = function(data) {
        if (!data) return;
        DataUtils_1.default.baseCopy(this, data);
      };
      TriggerData.prototype.clone = function() {
        var e = new TriggerData();
        e.valueCopy(this);
        return e;
      };
      TriggerData.ID_STATUS = 0;
      TriggerData.ID_BULLET = 1;
      TriggerData.ID_TALENT = 2;
      TriggerData.GROUP_ATTACK = 0;
      TriggerData.GROUP_HIT = 1;
      TriggerData.GROUP_HURT = 2;
      TriggerData.GROUP_USE = 3;
      TriggerData.GROUP_AUTO = 4;
      TriggerData.GROUP_JUMP = 5;
      TriggerData.TYPE_ATTACK_1 = 1;
      TriggerData.TYPE_ATTACK_2 = 2;
      TriggerData.TYPE_ATTACK_3 = 3;
      TriggerData.TYPE_ATTTACK_REMOTE = 4;
      TriggerData.TYPE_HIT = 0;
      TriggerData.TYPE_HIT_CRIT = 1;
      TriggerData.TYPE_HIT_BACK = 2;
      TriggerData.TYPE_HIT_REMOTE = 3;
      TriggerData.TYPE_HIT_CRIT_REMOTE = 4;
      TriggerData.TYPE_HURT = 0;
      TriggerData.TYPE_HURT_BLOCK = 1;
      TriggerData.TYPE_HURT_PARRAY = 2;
      TriggerData.TYPE_HURT_DODGE = 3;
      TriggerData.TYPE_HURT_DREAM = 4;
      TriggerData.TYPE_USE_ITEM = 0;
      TriggerData.TYPE_USE_TALENT = 1;
      TriggerData.TYPE_AUTO = 0;
      TriggerData.TYPE_JUMP_START = 0;
      TriggerData.TYPE_JUMP_HIGHEST = 1;
      TriggerData.TYPE_JUMP_END = 2;
      TriggerData.TARGET_SELF = 0;
      TriggerData.TARGET_OTHER = 1;
      TriggerData.TARGET_OTHER_NEAREST = 2;
      TriggerData.TARGET_ALL = 3;
      TriggerData.TARGET_ALL_ENEMY = 4;
      TriggerData.TARGET_ALL_ALLY = 5;
      return TriggerData;
    }(BaseData_1.default);
    exports.default = TriggerData;
    cc._RF.pop();
  }, {
    "../utils/DataUtils": "DataUtils",
    "./BaseData": "BaseData"
  } ],
  Utils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f719fThqrBMn6NkMcXey0jG", "Utils");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../logic/EventHelper");
    var Utils = function() {
      function Utils() {}
      Utils.log = function(msg) {
        this.showLog && cc.log(msg);
      };
      Utils.clearComponentArray = function(arr) {
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var n = arr_1[_i];
          n && n.isValid && n.destroy();
        }
      };
      Utils.toast = function(msg, isCenter, isTap) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_TOAST, {
          msg: msg,
          isCenter: isCenter,
          isTap: isTap
        });
      };
      Utils.getRotateAngle = function(direction, isFlip) {
        var angle = 180 * cc.v2(1, 0).signAngle(cc.v2(direction.normalize())) / Math.PI;
        return isFlip ? -angle : angle;
      };
      Utils.getPlayTime = function(time) {
        var hour = Math.floor(time / 36e5);
        var min = Math.floor((time - 36e5 * hour) / 6e4);
        var second = Math.floor((time - 36e5 * hour - 6e4 * min) / 1e3);
        return Utils.getNumberStr2(hour) + ":" + Utils.getNumberStr2(min) + ":" + Utils.getNumberStr2(second);
      };
      Utils.getFullFormatTime = function(time) {
        var date = new Date(time);
        var y = date.getFullYear();
        var mo = date.getMonth() + 1;
        var d = date.getDate();
        var h = date.getHours() + 1;
        h > 23 && (h = 0);
        var m = date.getMinutes();
        var s = date.getSeconds();
        return Utils.getNumberStr2(y) + "/" + Utils.getNumberStr2(mo) + "/" + Utils.getNumberStr2(d) + " " + Utils.getNumberStr2(h) + ":" + Utils.getNumberStr2(m) + ":" + Utils.getNumberStr2(s);
      };
      Utils.getDay = function(time) {
        var date = new Date(time);
        var m = date.getMonth() + 1;
        var d = date.getDate();
        return (m < 10 ? "0" : "") + m + "\u6708" + (d < 10 ? "0" : "") + d + "\u65e5 " + this.getWeek(date);
      };
      Utils.getHour = function(time) {
        var date = new Date(time);
        var h = date.getHours() + 1;
        h > 23 && (h = 0);
        var m = date.getMinutes();
        return (h < 10 ? "0" : "") + h + ":" + (m < 10 ? "0" : "") + m;
      };
      Utils.getYear = function(time) {
        var date = new Date(time);
        return date.getFullYear() + "\u5e74";
      };
      Utils.getWeek = function(date) {
        var week = "";
        0 == date.getDay() && (week = "\u661f\u671f\u65e5");
        1 == date.getDay() && (week = "\u661f\u671f\u4e00");
        2 == date.getDay() && (week = "\u661f\u671f\u4e8c");
        3 == date.getDay() && (week = "\u661f\u671f\u4e09");
        4 == date.getDay() && (week = "\u661f\u671f\u56db");
        5 == date.getDay() && (week = "\u661f\u671f\u4e94");
        6 == date.getDay() && (week = "\u661f\u671f\u516d");
        return week;
      };
      Utils.clamp = function(value, max, min) {
        if (value > max) return max;
        if (value < min) return min;
        return value;
      };
      Utils.clampPos = function(value, max, min) {
        var pos = value.clone();
        value.x > max.x && (pos.x = max.x);
        value.y > max.y && (pos.y = max.y);
        value.x < min.x && (pos.x = min.x);
        value.y < min.y && (pos.y = min.y);
        return pos;
      };
      Utils.isFirstEqual = function(mapStr, typeStr) {
        if (!mapStr) return false;
        var isequal = mapStr[0] == typeStr;
        return isequal;
      };
      Utils.hasThe = function(mapStr, typeStr) {
        if (!mapStr) return false;
        var isequal = -1 != mapStr.indexOf(typeStr);
        return isequal;
      };
      Utils.getNumberStr3 = function(i) {
        return i < 10 ? "00" + i : i < 100 ? "0" + i : "" + i;
      };
      Utils.getNumberStr2 = function(i) {
        return i < 10 ? "0" + i : "" + i;
      };
      Utils.getDashDistanceBySpeed = function(speed, damping) {
        if (0 == damping) return 0;
        return Math.abs(speed * speed * .5 / damping);
      };
      Utils.getDashSpeedByDistance = function(distance, damping) {
        if (0 == damping) return 0;
        return Math.sqrt(distance * damping * 2);
      };
      Utils.getDashDistanceByTime = function(speed, damping, second) {
        var v = speed;
        var a = damping;
        var t = second;
        if (0 != a) {
          var t0 = v / a;
          t > t0 && (t = t0);
        }
        return v * t - a * t * t * .5;
      };
      Utils.getJumpTimeBySpeedDistance = function(distance, speed, damping) {
        var s = Utils.getDashDistanceBySpeed(speed, damping);
        if (distance < s) return 0;
        s = distance - s;
        return s / speed;
      };
      Utils.getDashTime = function(speed, damping) {
        if (0 != damping) return speed / damping;
        return 0;
      };
      Utils.getDirByHv = function(hv) {
        var dir = 4;
        if (!hv || hv.equals(cc.Vec2.ZERO)) return dir;
        if (Math.abs(hv.x) < Math.abs(hv.y)) {
          hv.y > .3 && (dir = 0);
          hv.y < -.3 && (dir = 1);
        }
        if (Math.abs(hv.x) > Math.abs(hv.y)) {
          hv.x < -.3 && (dir = 2);
          hv.x > .3 && (dir = 3);
        }
        return dir;
      };
      Utils.changeNodeGroups = function(node, group) {
        if (node) {
          node.group = group;
          if (node.childrenCount > 0) for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
            var child = _a[_i];
            this.changeNodeGroups(child, group);
          }
        }
      };
      Utils.getMixColor = function(color1, color2) {
        var c1 = cc.color().fromHEX(color1);
        var c2 = cc.color().fromHEX(color2);
        var c3 = cc.color();
        var r = c1.getR() + c2.getR();
        var g = c1.getG() + c2.getG();
        var b = c1.getB() + c2.getB();
        c3.setR(r > 255 ? 255 : r);
        c3.setG(g > 255 ? 255 : g);
        c3.setB(b > 255 ? 255 : b);
        return "#" + c3.toHEX("#rrggbb");
      };
      Utils.showLog = false;
      return Utils;
    }();
    exports.default = Utils;
    cc._RF.pop();
  }, {
    "../logic/EventHelper": "EventHelper"
  } ],
  Vector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8b39avq6pdFOKx9CQMo7TwK", "Vector");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Vector = function() {
      function Vector(x, y) {
        void 0 === x && (x = 0);
        void 0 === y && (y = 0);
        this.x = 0;
        this.y = 0;
        if (x && "object" === typeof x) {
          this.x = x.x || 0;
          this.y = x.y || 0;
        } else {
          this.x = x || 0;
          this.y = y || 0;
        }
      }
      Vector.prototype.clone = function() {
        return new Vector(this.x, this.y);
      };
      Vector.prototype.equals = function(other) {
        return other && this.x === other.x && this.y === other.y;
      };
      Vector.v2 = function(x, y) {
        return new Vector(x, y);
      };
      return Vector;
    }();
    exports.default = Vector;
    cc._RF.pop();
  }, {} ],
  Vehicle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "048dfZQGdBPVr4AOnt8Wdts", "Vehicle");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Building_1 = require("./Building");
    var Logic_1 = require("../logic/Logic");
    var CCollider_1 = require("../collider/CCollider");
    var Dungeon_1 = require("../logic/Dungeon");
    var IndexZ_1 = require("../utils/IndexZ");
    var EventHelper_1 = require("../logic/EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Vehicle = function(_super) {
      __extends(Vehicle, _super);
      function Vehicle() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.root = null;
        _this.shadow = null;
        _this.sprite = null;
        _this.resName = "";
        _this.needStop = false;
        _this.isMoving = false;
        _this.isAniming = false;
        _this.isRepeat = true;
        _this.isPlayerIn = false;
        return _this;
      }
      Vehicle.prototype.onLoad = function() {};
      Vehicle.prototype.init = function(dungeon, resName) {
        var _this = this;
        this.dungeon = dungeon;
        this.resName = resName;
        this.root.y = 0;
        this.entity.Transform.z = 0;
        this.changeRes(0);
        this.data.indexZ && (this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position.add(cc.v3(0, this.data.indexZ))));
        this.isMoving = true;
        this.startPos = Dungeon_1.default.getPosInMap(this.data.defaultPos);
        this.endPos = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE, this.data.defaultPos.y));
        this.entity.Transform.position = this.startPos.clone();
        this.entity.NodeRender.root = this.root;
        this.scheduleOnce(function() {
          if (_this.dungeon && _this.dungeon.player) {
            _this.isRepeat = false;
            _this.dungeon.player.drive();
            _this.dungeon.changeCameraTarget(_this, cc.v3(500, 0));
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN_LOCK);
            _this.isPlayerIn = true;
          }
        });
      };
      Vehicle.prototype.changeRes = function(index) {
        var spriteFrame = Logic_1.default.spriteFrameRes(this.resName + "anim" + (index < 0 ? 0 : index));
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes("" + this.resName));
        if (spriteFrame) {
          this.sprite.spriteFrame = spriteFrame;
          this.sprite.node.width = spriteFrame.getOriginalSize().width;
          this.sprite.node.height = spriteFrame.getOriginalSize().height;
          this.shadow.spriteFrame = spriteFrame;
          this.shadow.node.width = spriteFrame.getOriginalSize().width;
          this.shadow.node.height = spriteFrame.getOriginalSize().height;
        }
      };
      Vehicle.prototype.onColliderStay = function(other, self) {
        self.sensor && other.tag == CCollider_1.default.TAG.PLAYER && (this.isMoving = false);
      };
      Vehicle.prototype.playMove = function() {
        var _this = this;
        if (this.isAniming) return;
        this.isAniming = true;
        var time = .1;
        var action = cc.tween().delay(time).call(function() {
          _this.changeRes(1);
        }).delay(time).call(function() {
          _this.changeRes(2);
        }).delay(time).call(function() {
          _this.changeRes(3);
        }).delay(time).call(function() {
          _this.changeRes(0);
        });
        this.node.stopAllActions();
        cc.tween(this.node).repeatForever(action).start();
        this.entity.Move.linearVelocity = cc.v2(15, 0);
        this.entity.Move.damping = 0;
      };
      Vehicle.prototype.playStop = function() {
        if (!this.isAniming) return;
        this.isAniming = false;
        this.node.stopAllActions();
        this.entity.Move.damping = 10;
      };
      Vehicle.prototype.update = function(dt) {
        this.isMoving ? this.playMove() : this.playStop();
        this.isMoving = true;
        Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099 && 6 == Logic_1.default.chapterIndex;
        this.endPos && this.endPos.x < this.node.position.x && (this.isRepeat ? this.entity.Transform.position = this.startPos.clone() : this.isMoving = false);
      };
      __decorate([ property(cc.Node) ], Vehicle.prototype, "root", void 0);
      __decorate([ property(cc.Sprite) ], Vehicle.prototype, "shadow", void 0);
      __decorate([ property(cc.Sprite) ], Vehicle.prototype, "sprite", void 0);
      Vehicle = __decorate([ ccclass ], Vehicle);
      return Vehicle;
    }(Building_1.default);
    exports.default = Vehicle;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../logic/Dungeon": "Dungeon",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  WalkSmoke: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3d56K96jBFs6t/GiwCmf8x", "WalkSmoke");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WalkSmoke = function(_super) {
      __extends(WalkSmoke, _super);
      function WalkSmoke() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      WalkSmoke.prototype.start = function() {
        var _this = this;
        this.scheduleOnce(function() {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.POOL_DESTORY_WALKSMOKE, {
            coinNode: _this.node
          });
        }, .3);
      };
      WalkSmoke = __decorate([ ccclass ], WalkSmoke);
      return WalkSmoke;
    }(cc.Component);
    exports.default = WalkSmoke;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper"
  } ],
  WallPaint: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8d015BSVUpN0Ib41MCFXakS", "WallPaint");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Building_1 = require("./Building");
    var Logic_1 = require("../logic/Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WallPaint = function(_super) {
      __extends(WallPaint, _super);
      function WallPaint() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.RANGE = 3;
        _this.RANGE_PlAYER = 300;
        _this.frame = null;
        _this.paint = null;
        return _this;
      }
      WallPaint.prototype.init = function(mapStr) {
        this.entity.destroy();
        this.mapStr = mapStr;
        var letter = mapStr[1];
        var resName = "wallpaint24x32_000";
        switch (letter) {
         case "0":
          resName = "wallpaint24x32_000";
          break;

         case "1":
          resName = "wallpaint24x32_001";
          break;

         case "2":
          resName = "wallpaint24x32_002";
          break;

         case "3":
          resName = "wallpaint24x32_003";
          break;

         case "4":
          resName = "wallpaint32x16_000";
          break;

         case "5":
          resName = "wallpaint24x32_005";
          break;

         case "6":
         case "7":
         case "8":
         case "9":
          resName = "wallpaint24x32_000";
        }
        var spriteframe = Logic_1.default.spriteFrameRes(resName);
        if (spriteframe) {
          this.paint.spriteFrame = spriteframe;
          this.paint.node.width = spriteframe.getRect().width;
          this.paint.node.height = spriteframe.getRect().height;
          this.frame.node.width = this.paint.node.width + this.RANGE;
          this.frame.node.height = this.paint.node.height + this.RANGE;
        }
      };
      __decorate([ property(cc.Sprite) ], WallPaint.prototype, "frame", void 0);
      __decorate([ property(cc.Sprite) ], WallPaint.prototype, "paint", void 0);
      WallPaint = __decorate([ ccclass ], WallPaint);
      return WallPaint;
    }(Building_1.default);
    exports.default = WallPaint;
    cc._RF.pop();
  }, {
    "../logic/Logic": "Logic",
    "./Building": "Building"
  } ],
  Wall: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7c06zRjp9J+piF+ZsFdjSH", "Wall");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./../logic/EventHelper");
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var Building_1 = require("./Building");
    var CCollider_1 = require("../collider/CCollider");
    var Utils_1 = require("../utils/Utils");
    var MapManager_1 = require("../manager/MapManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Wall = function(_super) {
      __extends(Wall, _super);
      function Wall() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.half = false;
        _this.mapStr = "##";
        _this.wallName = "";
        _this.roofName = "";
        _this.resNameSecond = "";
        _this.type = Wall_1.TYPE_EMPTY;
        _this.dir = 0;
        _this.isFence = false;
        _this.alpha = 255;
        return _this;
      }
      Wall_1 = Wall;
      Wall.prototype.onLoad = function() {
        this.wallsprite = this.node.getChildByName("sprite").getChildByName("wallsprite").getComponent(cc.Sprite);
        this.roofsprite = this.node.getChildByName("sprite").getChildByName("roofsprite").getComponent(cc.Sprite);
        this.shadowsprite = this.node.getChildByName("sprite").getChildByName("shadow").getComponent(cc.Sprite);
      };
      Wall.prototype.isEmptyWall = function() {
        return this.type == Wall_1.TYPE_EMPTY;
      };
      Wall.prototype.changeRes = function(wallName) {
        var rand4save = Logic_1.default.mapManager.getRandom4Save(this.seed, MapManager_1.default.RANDOM_WALL);
        var spriteframe = Logic_1.default.spriteFrameRes(wallName);
        if (this.type == Wall_1.TYPE_EMPTY) {
          this.node.opacity = 0;
          return;
        }
        if (this.type == Wall_1.TYPE_OTHER) {
          this.roofsprite.node.opacity = 0;
          this.wallsprite.spriteFrame = spriteframe;
          this.wallsprite.node.width = 16;
          this.wallsprite.node.height = 32;
          return;
        }
        if (Utils_1.default.hasThe(wallName, "fence")) {
          this.isFence = true;
          this.roofsprite.node.opacity = 0;
          this.wallsprite.spriteFrame = null;
          this.wallsprite.trim = false;
          this.wallsprite.node.width = 16;
          this.wallsprite.node.height = 32;
          switch (this.type) {
           case Wall_1.TYPE_INNER_CORNER_BOTTOM_RIGHT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim10");
            break;

           case Wall_1.TYPE_BOTTOM:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim1");
            break;

           case Wall_1.TYPE_INNER_CORNER_BOTTOM_LEFT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim11");
            break;

           case Wall_1.TYPE__RIGHT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim3");
            break;

           case Wall_1.TYPE_CENTER:
            break;

           case Wall_1.TYPE_LEFT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim2");
            break;

           case Wall_1.TYPE_INNER_CORNER_TOP_RIGHT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim9");
            break;

           case Wall_1.TYPE_TOP:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim0");
            break;

           case Wall_1.TYPE_INNER_CORNER_TOP_LEFT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim8");
            break;

           case Wall_1.TYPE_CORNER_TOP_LEFT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim4");
            break;

           case Wall_1.TYPE_CORNER_TOP_RIGHT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim5");
            break;

           case Wall_1.TYPE_CORNER_BOTTOM_LEFT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim7");
            break;

           case Wall_1.TYPE_CORNER_BOTTOM_RIGHT:
            this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName + "anim6");
            break;

           case Wall_1.TYPE_INNER_CORNER_TOP_RIGHT_BOTTOM_LEFT:
           case Wall_1.TYPE_INNER_CORNER_TOP_LEFT_BOTTOM_RIGHT:
          }
          this.ajustSpriteShow(false);
          return;
        }
        var rect = spriteframe.getRect();
        var sf1 = spriteframe.clone();
        var sf2 = spriteframe.clone();
        this.roofsprite.trim = true;
        this.wallsprite.trim = true;
        this.roofsprite.node.width = 16;
        this.roofsprite.node.height = 16;
        this.wallsprite.node.width = 16;
        this.wallsprite.node.height = 16;
        this.roofsprite.spriteFrame = sf1;
        this.wallsprite.spriteFrame = sf2;
        var unit = 16;
        var pos1 = cc.v2(0, 0);
        var pos2 = cc.v2(0, 0);
        switch (this.type) {
         case Wall_1.TYPE_INNER_CORNER_BOTTOM_RIGHT:
          pos1 = cc.v2(0, 0);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_BOTTOM:
          pos1 = cc.v2(1, 0);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_INNER_CORNER_BOTTOM_LEFT:
          pos1 = cc.v2(2, 0);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE__RIGHT:
          pos1 = cc.v2(0, 1);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_CENTER:
          pos1 = cc.v2(1, 1);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_LEFT:
          pos1 = cc.v2(2, 1);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_INNER_CORNER_TOP_RIGHT:
          pos1 = cc.v2(0, 2);
          pos2 = cc.v2(0, 3);
          break;

         case Wall_1.TYPE_TOP:
          pos1 = cc.v2(1, 2);
          pos2 = cc.v2(rand4save.getRandomNum(1, 3), 3);
          break;

         case Wall_1.TYPE_INNER_CORNER_TOP_LEFT:
          pos1 = cc.v2(2, 2);
          pos2 = cc.v2(4, 3);
          break;

         case Wall_1.TYPE_CORNER_TOP_LEFT:
          pos1 = cc.v2(3, 0);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_CORNER_TOP_RIGHT:
          pos1 = cc.v2(4, 0);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_CORNER_BOTTOM_LEFT:
          pos1 = cc.v2(3, 1);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_CORNER_BOTTOM_RIGHT:
          pos1 = cc.v2(4, 1);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_INNER_CORNER_TOP_RIGHT_BOTTOM_LEFT:
          pos1 = cc.v2(3, 2);
          pos2 = cc.v2(1, 3);
          break;

         case Wall_1.TYPE_INNER_CORNER_TOP_LEFT_BOTTOM_RIGHT:
          pos1 = cc.v2(4, 2);
          pos2 = cc.v2(1, 3);
        }
        sf1.setRect(cc.rect(rect.x + unit * pos1.x, rect.y + unit * pos1.y, unit, unit));
        sf2.setRect(cc.rect(rect.x + unit * pos2.x, rect.y + unit * pos2.y, unit, unit));
        this.roofsprite.spriteFrame = sf1;
        this.wallsprite.spriteFrame = sf2;
      };
      Wall.prototype.setPos = function(pos) {
        this.pos = pos;
        this.entity.Transform.position = Dungeon_1.default.getPosInMap(pos);
        this.node.position = this.entity.Transform.position.clone();
      };
      Wall.prototype.start = function() {};
      Wall.prototype.ajustSpriteShow = function(isShowShadow) {
        this.wallsprite || (this.shadowsprite = this.node.getChildByName("sprite").getChildByName("shadow").getComponent(cc.Sprite));
        this.shadowsprite.node.opacity = isShowShadow ? 40 : 0;
      };
      Wall.typeNeedTransparent = function(type) {
        return type == Wall_1.TYPE_INNER_CORNER_BOTTOM_RIGHT || type == Wall_1.TYPE_BOTTOM || type == Wall_1.TYPE_INNER_CORNER_BOTTOM_LEFT || type == Wall_1.TYPE_OTHER;
      };
      Wall.getType = function(mapStr) {
        var type = Wall_1.TYPE_EMPTY;
        if (Utils_1.default.hasThe(mapStr, "###")) type = Wall_1.TYPE_EMPTY; else if (Utils_1.default.hasThe(mapStr, "##")) type = Wall_1.TYPE_OTHER; else {
          var index = parseInt(mapStr.substring(3));
          type = index;
        }
        return type;
      };
      Wall.prototype.init = function(mapStr, leveldata, onlyShow, combineCountX, combineCountY) {
        var _this = this;
        this.node.opacity = 255;
        this.mapStr = mapStr;
        this.type = Wall_1.getType(mapStr);
        this.type == Wall_1.TYPE_OTHER ? this.wallName = leveldata.getWallRes(parseInt(mapStr.substring(2)), true) : this.wallName = leveldata.getWallRes(parseInt(mapStr.substring(1, 3)));
        this.changeRes(this.wallName);
        this.setTargetTags(CCollider_1.default.TAG.PLAYER, CCollider_1.default.TAG.NONPLAYER, CCollider_1.default.TAG.GOODNONPLAYER, CCollider_1.default.TAG.BOSS, CCollider_1.default.TAG.BUILDING, CCollider_1.default.TAG.BULLET, CCollider_1.default.TAG.PLAYER_HIT);
        if (onlyShow) this.entity.destroy(); else if (combineCountX > 0) for (var _i = 0, _a = this.ccolliders; _i < _a.length; _i++) {
          var collider = _a[_i];
          var half = collider.w / 2;
          collider.w += collider.w * combineCountX;
          collider.offsetX = collider.w / 2 - half;
        } else if (combineCountY > 0) for (var _b = 0, _c = this.ccolliders; _b < _c.length; _b++) {
          var collider = _c[_b];
          if (collider.sensor) collider.offsetY += combineCountY * collider.offsetY; else {
            var half = collider.h / 2;
            collider.h += collider.h * combineCountY;
            collider.offsetY = collider.h / 2 - half;
          }
        }
        if (this.combineWall) {
          onlyShow || this.entity.destroy();
          EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_WALL_COLLIDER + this.combineWall.node.uuid, function(detail) {
            _this.node && (0 == detail.type ? _this.onColliderEnter(detail.other, detail.self) : 1 == detail.type ? _this.onColliderStay(detail.other, detail.self) : 2 == detail.type && _this.onColliderExit(detail.other, detail.self));
          });
        }
      };
      Wall.prototype.onColliderEnter = function(other, self) {
        if (!self.sensor) return;
        if (Wall_1.typeNeedTransparent(this.type) && (other.tag == CCollider_1.default.TAG.PLAYER || other.tag == CCollider_1.default.TAG.NONPLAYER)) {
          this.combineWall || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_WALL_COLLIDER + this.node.uuid, {
            type: 0,
            other: other,
            self: self
          });
          Wall_1.typeNeedTransparent(this.type) && (this.alpha = 80);
        }
      };
      Wall.prototype.onColliderStay = function(other, self) {
        if (!self.sensor) return;
        if (other.tag == CCollider_1.default.TAG.PLAYER || other.tag == CCollider_1.default.TAG.NONPLAYER) {
          this.combineWall || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_WALL_COLLIDER + this.node.uuid, {
            type: 1,
            other: other,
            self: self
          });
          Wall_1.typeNeedTransparent(this.type) && (this.alpha = 80);
        }
      };
      Wall.prototype.onColliderExit = function(other, self) {
        if (!self.sensor) return;
        if (other.tag == CCollider_1.default.TAG.PLAYER || other.tag == CCollider_1.default.TAG.NONPLAYER) {
          this.combineWall || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_WALL_COLLIDER + this.node.uuid, {
            type: 2,
            other: other,
            self: self
          });
          Wall_1.typeNeedTransparent(this.type) && (this.type == Wall_1.TYPE_OTHER || this.isFence, 
          this.alpha = 255);
        }
      };
      Wall.prototype.update = function(dt) {
        Wall_1.typeNeedTransparent(this.type) && (this.type == Wall_1.TYPE_OTHER || this.isFence ? this.wallsprite.node.opacity = Logic_1.default.lerp(this.wallsprite.node.opacity, this.alpha, 3 * dt) : this.roofsprite.node.opacity = Logic_1.default.lerp(this.roofsprite.node.opacity, this.alpha, 5 * dt));
      };
      var Wall_1;
      Wall.TYPE_EMPTY = -1;
      Wall.TYPE_INNER_CORNER_BOTTOM_RIGHT = 0;
      Wall.TYPE_BOTTOM = 1;
      Wall.TYPE_INNER_CORNER_BOTTOM_LEFT = 2;
      Wall.TYPE__RIGHT = 3;
      Wall.TYPE_CENTER = 4;
      Wall.TYPE_LEFT = 5;
      Wall.TYPE_INNER_CORNER_TOP_RIGHT = 6;
      Wall.TYPE_TOP = 7;
      Wall.TYPE_INNER_CORNER_TOP_LEFT = 8;
      Wall.TYPE_CORNER_TOP_LEFT = 9;
      Wall.TYPE_CORNER_TOP_RIGHT = 10;
      Wall.TYPE_CORNER_BOTTOM_LEFT = 11;
      Wall.TYPE_CORNER_BOTTOM_RIGHT = 12;
      Wall.TYPE_INNER_CORNER_TOP_RIGHT_BOTTOM_LEFT = 13;
      Wall.TYPE_INNER_CORNER_TOP_LEFT_BOTTOM_RIGHT = 14;
      Wall.TYPE_OTHER = 30;
      Wall = Wall_1 = __decorate([ ccclass ], Wall);
      return Wall;
    }(Building_1.default);
    exports.default = Wall;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../manager/MapManager": "MapManager",
    "../utils/Utils": "Utils",
    "./../logic/EventHelper": "EventHelper",
    "./Building": "Building"
  } ],
  WarMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e27dcjzJmBGK54bflNR6COZ", "WarMachine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var DamageData_1 = require("../data/DamageData");
    var Shooter_1 = require("../logic/Shooter");
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var StatusManager_1 = require("../manager/StatusManager");
    var AudioPlayer_1 = require("../utils/AudioPlayer");
    var FromData_1 = require("../data/FromData");
    var Achievement_1 = require("../logic/Achievement");
    var ActorUtils_1 = require("../utils/ActorUtils");
    var CCollider_1 = require("../collider/CCollider");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WarMachine = function(_super) {
      __extends(WarMachine, _super);
      function WarMachine() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.text = "hello";
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.isMissileCoolDown = false;
        _this.isGatlingCoolDown = false;
        _this.isMainGunCoolDown = false;
        _this.isMoveRight = false;
        _this.actionTimeDelay = 0;
        return _this;
      }
      WarMachine.prototype.init = function(type) {
        throw new Error("Method not implemented.");
      };
      WarMachine.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter01 = this.node.getChildByName("Shooter01").getComponent(Shooter_1.default);
        this.shooter02 = this.node.getChildByName("Shooter02").getComponent(Shooter_1.default);
        this.shooter03 = this.node.getChildByName("Shooter03").getComponent(Shooter_1.default);
        this.shooter04 = this.node.getChildByName("Shooter04").getComponent(Shooter_1.default);
        this.shooter05 = this.node.getChildByName("Shooter05").getComponent(Shooter_1.default);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        var from = FromData_1.default.getClone(this.actorName(), "bossmachinehead", this.node.position);
        this.shooter01.from.valueCopy(from);
        this.shooter02.from.valueCopy(from);
        this.shooter03.from.valueCopy(from);
        this.shooter04.from.valueCopy(from);
        this.shooter05.from.valueCopy(from);
      };
      WarMachine.prototype.start = function() {
        this.initGuns();
      };
      WarMachine.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.MaxHealth && (this.data.currentHealth = this.data.Common.MaxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      WarMachine.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        this.anim && this.anim.pause();
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      WarMachine.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.changeZIndex();
        var isHalf = this.data.currentHealth < this.data.Common.MaxHealth / 2;
        this.dungeon && Logic_1.default.getChance(90) && this.fireMainGun();
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        playerDis < 300 ? this.fireMissile(isHalf) : Logic_1.default.getChance(20) && this.fireMissile(isHalf);
        this.fireGatling(isHalf);
        if (isHalf) {
          if (this.isMoveRight && this.pos.x - this.defaultPos.x > 2) {
            this.isMoveRight = false;
            AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          } else if (!this.isMoveRight && this.defaultPos.x - this.pos.x > 2) {
            this.isMoveRight = true;
            AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
          }
          var pos_1 = cc.v3(this.isMoveRight ? 1 : -1, 0);
          if (!pos_1.equals(cc.Vec3.ZERO)) {
            pos_1 = pos_1.normalizeSelf();
            this.move(pos_1, 8);
          }
        }
        this.shooter01.setHv(cc.v2(0, -1));
        var pos = this.entity.Transform.position.clone().add(this.shooter01.node.position);
        var hv = this.dungeon.player.getCenterPosition().sub(pos);
        hv.equals(cc.Vec3.ZERO) || this.shooter01.setHv(cc.v2(hv).normalize());
      };
      WarMachine.prototype.initGuns = function() {
        this.isMainGunCoolDown = false;
        this.isGatlingCoolDown = false;
        this.isMissileCoolDown = false;
        this.shooter01.setHv(cc.v2(0, -1));
        this.shooter02.setHv(cc.v2(0, -1));
        this.shooter03.setHv(cc.v2(0, -1));
        this.shooter04.setHv(cc.v2(0, -1));
        this.shooter05.setHv(cc.v2(0, -1));
        var pos = this.entity.Transform.position.clone().add(this.shooter01.node.position);
        var hv = this.dungeon.player.getCenterPosition().sub(pos);
        hv.equals(cc.Vec3.ZERO) || this.shooter01.setHv(cc.v2(hv).normalize());
      };
      WarMachine.prototype.fireMainGun = function() {
        var _this = this;
        if (this.isMainGunCoolDown) return;
        this.isMainGunCoolDown = true;
        this.anim.play("WarMachineMainGunShoot");
        this.scheduleOnce(function() {
          _this.isMainGunCoolDown = false;
        }, 3);
      };
      WarMachine.prototype.MainGunShootFinish = function() {
        this.shooter01.setHv(cc.v2(0, -1));
        var pos = this.entity.Transform.position.clone().add(this.shooter01.node.position);
        var hv = this.dungeon.player.getCenterPosition().sub(pos);
        if (!hv.equals(cc.Vec3.ZERO)) {
          this.shooter01.setHv(cc.v2(hv).normalize());
          this.fireShooter(this.shooter01, "bullet016", 0, 0, 0, cc.v3(48, 0));
        }
        this.anim.play("WarMachineIdle");
      };
      WarMachine.prototype.fireGatling = function(isHalf) {
        var _this = this;
        if (this.isGatlingCoolDown) return;
        this.isGatlingCoolDown = true;
        this.shooter02.setHv(cc.v2(0, -1));
        this.shooter03.setHv(cc.v2(0, -1));
        this.shooter02.data.bulletLineInterval = .5;
        this.shooter03.data.bulletLineInterval = .5;
        var cooldown = 6;
        var angle = Logic_1.default.getRandomNum(0, 15);
        angle = Logic_1.default.getHalfChance() ? angle : -angle;
        if (isHalf) {
          this.fireShooter(this.shooter02, "bullet111", 0, 4);
          this.fireShooter(this.shooter03, "bullet111", 0, 4);
          cooldown = 3;
        } else {
          this.fireShooter(this.shooter02, "bullet111", 2, 2);
          this.fireShooter(this.shooter03, "bullet111", 2, 2);
        }
        this.scheduleOnce(function() {
          _this.isGatlingCoolDown = false;
        }, cooldown);
      };
      WarMachine.prototype.fireMissile = function(isHalf) {
        var _this = this;
        if (this.isMissileCoolDown) return;
        this.isMissileCoolDown = true;
        this.shooter04.setHv(cc.v2(0, -1));
        this.shooter05.setHv(cc.v2(0, -1));
        this.shooter04.data.bulletLineInterval = .5;
        this.shooter05.data.bulletLineInterval = .5;
        this.fireShooter(this.shooter04, "bullet015", 2, isHalf ? 1 : 0);
        this.fireShooter(this.shooter05, "bullet015", 2, isHalf ? 1 : 0);
        this.scheduleOnce(function() {
          _this.isMissileCoolDown = false;
        }, isHalf ? 2 : 4);
      };
      WarMachine.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle, defaultPos) {
        shooter.dungeon = this.dungeon;
        shooter.actor = this;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle, defaultPos);
      };
      WarMachine.prototype.showBoss = function() {
        this.initGuns();
        this.sc.isShow = true;
        this.entity.NodeRender.node = this.node;
        this.entity.Move.damping = 6;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.MaxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      WarMachine.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      WarMachine.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
      };
      WarMachine.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.entity.Transform.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.normalize().mul(speed);
        this.entity.Move.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.changeZIndex();
      };
      WarMachine.prototype.onColliderEnter = function(other, self) {
        if (self.tag == CCollider_1.default.TAG.BOSS_HIT) {
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
          if (target && !this.sc.isDied) {
            var d = new DamageData_1.default();
            d.physicalDamage = 8;
            target.takeDamage(d, FromData_1.default.getClone(this.actorName(), "bossmachinehead", this.node.position), this);
          }
        }
      };
      WarMachine.prototype.actorName = function() {
        return "\u6218\u4e89\u673a\u5668";
      };
      __decorate([ property(cc.Label) ], WarMachine.prototype, "label", void 0);
      __decorate([ property ], WarMachine.prototype, "text", void 0);
      WarMachine = __decorate([ ccclass ], WarMachine);
      return WarMachine;
    }(Boss_1.default);
    exports.default = WarMachine;
    cc._RF.pop();
  }, {
    "../collider/CCollider": "CCollider",
    "../data/DamageData": "DamageData",
    "../data/FromData": "FromData",
    "../logic/Achievement": "Achievement",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../logic/Shooter": "Shooter",
    "../manager/StatusManager": "StatusManager",
    "../utils/ActorUtils": "ActorUtils",
    "../utils/AudioPlayer": "AudioPlayer",
    "./Boss": "Boss"
  } ],
  WeatherEffect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4cf48SLNidBQ47BFZw5059s", "WeatherEffect");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WeatherEffect = function(_super) {
      __extends(WeatherEffect, _super);
      function WeatherEffect() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      WeatherEffect = __decorate([ ccclass ], WeatherEffect);
      return WeatherEffect;
    }(cc.Component);
    exports.default = WeatherEffect;
    cc._RF.pop();
  }, {} ],
  WeatherManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "47cfd5ASC5GSaOZNk50q4sU", "WeatherManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WeatherEffect_1 = require("../effect/weather/WeatherEffect");
    var WeatherRain_1 = require("../effect/weather/WeatherRain");
    var Dungeon_1 = require("../logic/Dungeon");
    var Logic_1 = require("../logic/Logic");
    var IndexZ_1 = require("../utils/IndexZ");
    var Utils_1 = require("../utils/Utils");
    var BaseManager_1 = require("./BaseManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WeatherManager = function(_super) {
      __extends(WeatherManager, _super);
      function WeatherManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.rain = null;
        _this.effectList = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      WeatherManager.prototype.clear = function() {
        Utils_1.default.clearComponentArray(this.effectList);
        this.effectList = new Array();
      };
      WeatherManager.prototype.addRain = function(indexPos, zHeight) {
        this.weatherRain = this.addWeatherEffect(this.rain, indexPos).getComponent(WeatherRain_1.default);
        this.weatherRain.root.y = zHeight;
      };
      WeatherManager.prototype.addWeatherEffect = function(prefab, indexPos) {
        var effectNode = cc.instantiate(prefab);
        effectNode.parent = this.node;
        effectNode.position = Dungeon_1.default.getPosInMap(indexPos);
        effectNode.zIndex = IndexZ_1.default.FOG;
        var effect = effectNode.getComponent(WeatherEffect_1.default);
        effect;
        this.effectList.push(effect);
        return effectNode;
      };
      WeatherManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      WeatherManager.prototype.updateLogic = function(dt, player) {
        if (this.weatherRain) {
          var p = player.node.position.clone();
          player.entity && (p.y += player.entity.Transform.z);
          this.weatherRain.node.setPosition(Logic_1.default.lerpPos(this.weatherRain.node.position, p, .05 * dt));
        }
      };
      __decorate([ property(cc.Prefab) ], WeatherManager.prototype, "rain", void 0);
      WeatherManager = __decorate([ ccclass ], WeatherManager);
      return WeatherManager;
    }(BaseManager_1.default);
    exports.default = WeatherManager;
    cc._RF.pop();
  }, {
    "../effect/weather/WeatherEffect": "WeatherEffect",
    "../effect/weather/WeatherRain": "WeatherRain",
    "../logic/Dungeon": "Dungeon",
    "../logic/Logic": "Logic",
    "../utils/IndexZ": "IndexZ",
    "../utils/Utils": "Utils",
    "./BaseManager": "BaseManager"
  } ],
  WeatherRain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ce77NY0itO/48vBXouVEYC", "WeatherRain");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WeatherEffect_1 = require("./WeatherEffect");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WeatherRain = function(_super) {
      __extends(WeatherRain, _super);
      function WeatherRain() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.root = null;
        _this.rain = null;
        _this.drop = null;
        return _this;
      }
      __decorate([ property(cc.Node) ], WeatherRain.prototype, "root", void 0);
      __decorate([ property(cc.ParticleSystem) ], WeatherRain.prototype, "rain", void 0);
      __decorate([ property(cc.ParticleSystem) ], WeatherRain.prototype, "drop", void 0);
      WeatherRain = __decorate([ ccclass ], WeatherRain);
      return WeatherRain;
    }(WeatherEffect_1.default);
    exports.default = WeatherRain;
    cc._RF.pop();
  }, {
    "./WeatherEffect": "WeatherEffect"
  } ],
  WordManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c333CGNPJP0ov5KegA/Xzf", "WordManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WordManager = function() {
      function WordManager() {}
      return WordManager;
    }();
    exports.default = WordManager;
    cc._RF.pop();
  }, {} ],
  WorldLoader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1da44Z4XqpEhJs0KUhYRpQR", "WorldLoader");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChapterData_1 = require("../data/ChapterData");
    var LevelData_1 = require("../data/LevelData");
    var EventHelper_1 = require("../logic/EventHelper");
    var Logic_1 = require("../logic/Logic");
    var LoadingIcon_1 = require("../ui/LoadingIcon");
    var WorldLoader = function() {
      function WorldLoader() {
        this.worldMap = [];
        this.realWorldMap = new ChapterData_1.default(99);
        this.isloaded = false;
        this.isloaded00 = false;
        this.isloaded01 = false;
        this.isloaded02 = false;
        this.isloaded03 = false;
        this.isloaded04 = false;
        this.isloaded05 = false;
        this.isloaded99 = false;
        this.isLoading = false;
        this.callbacks = [];
        this.isloaded = false;
      }
      WorldLoader.prototype.emitCallbacks = function() {
        for (var i = this.callbacks.length - 1; i >= 0; i--) {
          var c = this.callbacks.pop();
          c && c();
        }
      };
      WorldLoader.prototype.loadWorld = function(callback) {
        callback && this.callbacks.push(callback);
        if (this.isLoading) return;
        this.isLoading = true;
        if (this.worldMap.length > 0) {
          this.emitCallbacks();
          this.isloaded = true;
          this.isLoading = false;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.LOADING_ICON, {
            type: LoadingIcon_1.default.TYPE_MAP
          });
          return;
        }
        this.worldMap = new Array();
        for (var i = 0; i < 6; i++) {
          var chapter = new ChapterData_1.default(i);
          this.worldMap.push(chapter);
        }
        this.loadTileSets();
      };
      WorldLoader.prototype.loadTileSets = function() {
        var _this = this;
        cc.log("\u52a0\u8f7d\u5730\u56fe\u5757");
        cc.resources.load("Data/world/tileset", function(err, resource) {
          if (err) cc.error(err); else {
            cc.log("\u52a0\u8f7d\u5730\u56fe\u5757\u5b8c\u6210");
            var tileset = {};
            for (var _i = 0, _a = resource.json.tiles; _i < _a.length; _i++) {
              var value = _a[_i];
              tileset[value.id] = value.class;
            }
            _this.loadTiledMaps(tileset);
          }
        });
      };
      WorldLoader.prototype.loadTiledMaps = function(tileset) {
        var _this = this;
        cc.log("\u52a0\u8f7d\u4e16\u754c");
        cc.resources.loadDir("Data/world/tiledmap", cc.JsonAsset, function(err, assert) {
          for (var _i = 0, assert_1 = assert; _i < assert_1.length; _i++) {
            var tiledmap = assert_1[_i];
            var arr = tiledmap.name.split("_");
            var chapter = parseInt(arr[1]);
            var data = 99 == chapter ? _this.realWorldMap : _this.worldMap[chapter];
            var temp = tiledmap.json.layers[1].properties;
            if (!temp.width) {
              temp = new LevelData_1.default();
              var tarr = tiledmap.json.layers[1].properties;
              for (var _a = 0, tarr_1 = tarr; _a < tarr_1.length; _a++) {
                var ld = tarr_1[_a];
                ld.name && (temp[ld.name] = ld.value);
              }
            }
            var map = new Array();
            var floormap = new Array();
            var rooms = new Array();
            var w = temp.width * temp.roomWidth;
            var h = temp.height * temp.roomHeight;
            for (var i = 0; i < h; i++) {
              map[i] = new Array();
              floormap[i] = new Array();
              rooms[i] = new Array();
              for (var j = 0; j < w; j++) {
                var value0 = tiledmap.json.layers[0].data[i * w + j];
                floormap[i][j] = tileset[value0 - 1];
                var value1 = tiledmap.json.layers[1].data[i * w + j];
                map[i][j] = tileset[value1 - 1];
                var value2 = tiledmap.json.layers[2].data[i * w + j];
                rooms[i][j] = tileset[value2 - 1];
              }
            }
            var turnMap = new Array();
            var turnfloorMap = new Array();
            var turnRooms = new Array();
            for (var i = 0; i < map[0].length; i++) {
              turnfloorMap[i] = new Array();
              turnMap[i] = new Array();
              turnRooms[i] = new Array();
              for (var j = 0; j < map.length; j++) {
                turnfloorMap[i][map.length - 1 - j] = floormap[j][i];
                turnMap[i][map.length - 1 - j] = map[j][i];
                turnRooms[i][rooms.length - 1 - j] = rooms[j][i];
              }
            }
            temp.map = turnMap;
            temp.floormap = turnfloorMap;
            var flagMap = new Array();
            var shadowMap = new Array();
            var outSideMap = new Array();
            for (var i = 0; i < temp.width; i++) {
              flagMap[i] = new Array();
              shadowMap[i] = new Array();
              outSideMap[i] = new Array();
              for (var j = 0; j < temp.height; j++) {
                flagMap[i][j] = turnRooms[i * temp.roomWidth][j * temp.roomHeight];
                shadowMap[i][j] = turnRooms[i * temp.roomWidth + 1][j * temp.roomHeight];
                outSideMap[i][j] = 1 == turnRooms[i * temp.roomWidth + 2][j * temp.roomHeight];
              }
            }
            temp.roomTypes = flagMap;
            temp.shadowMap = shadowMap;
            temp.outSideMap = outSideMap;
            tiledmap.json.layers[3] && tiledmap.json.layers[3].objects && (temp.lights = tiledmap.json.layers[3].objects);
            var level = new LevelData_1.default();
            level.valueCopy(temp);
            data.list.push(level);
          }
          _this.realWorldMap.list.sort(function(a, b) {
            return a.index - b.index;
          });
          for (var _b = 0, _c = _this.worldMap; _b < _c.length; _b++) {
            var c = _c[_b];
            c.list.sort(function(a, b) {
              return a.index - b.index;
            });
          }
          _this.emitCallbacks();
          _this.isloaded = true;
          _this.isLoading = false;
          cc.log("\u52a0\u8f7d\u4e16\u754c\u5b8c\u6210");
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.LOADING_ICON, {
            type: LoadingIcon_1.default.TYPE_MAP
          });
        });
      };
      WorldLoader.prototype.getChapterLength = function() {
        return this.worldMap.length;
      };
      WorldLoader.prototype.getChapterData = function(chapterIndex) {
        if (chapterIndex >= 99) return this.realWorldMap;
        return this.worldMap[chapterIndex];
      };
      WorldLoader.prototype.getLevelList = function(chapterIndex) {
        return this.getChapterData(chapterIndex).list;
      };
      WorldLoader.prototype.getLevelData = function(chapterIndex, levelIndex) {
        var levelList = this.getLevelList(chapterIndex);
        if (levelList.length < 1) return null;
        levelList[levelIndex].chapter = chapterIndex;
        return levelList[levelIndex];
      };
      WorldLoader.prototype.getCurrentLevelData = function() {
        return this.getLevelData(Logic_1.default.chapterIndex, Logic_1.default.level);
      };
      return WorldLoader;
    }();
    exports.default = WorldLoader;
    cc._RF.pop();
  }, {
    "../data/ChapterData": "ChapterData",
    "../data/LevelData": "LevelData",
    "../logic/EventHelper": "EventHelper",
    "../logic/Logic": "Logic",
    "../ui/LoadingIcon": "LoadingIcon"
  } ],
  WxHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4e113prls5Op7r/tgtPErZz", "WxHelper");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WxHelper = function(_super) {
      __extends(WxHelper, _super);
      function WxHelper() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.wx = window["wx"];
        _this.user = null;
        _this.startButtonNode = null;
        _this.rankList = null;
        _this.rankListOpen = false;
        return _this;
      }
      WxHelper.prototype.start = function() {
        if (this.rankList) {
          this.CloseDialog();
          this.rankList.node.active = this.rankListOpen;
        }
        if (!this.wx) return;
        if (!this.startButtonNode) {
          this.saveRankData();
          return;
        }
        var btnSize = cc.size(this.startButtonNode.width + 10, this.startButtonNode.height + 10);
        var frameSize = cc.view.getFrameSize();
        var winSize = cc.director.getWinSize();
        var left = (.5 * winSize.width + this.startButtonNode.x - .5 * btnSize.width) / winSize.width * frameSize.width;
        var top = (.5 * winSize.height - this.startButtonNode.y - .5 * btnSize.height) / winSize.height * frameSize.height;
        var width = btnSize.width / winSize.width * frameSize.width;
        var height = btnSize.height / winSize.height * frameSize.height;
        var button = this.wx.createUserInfoButton({
          type: "text",
          text: "",
          style: {
            left: left,
            top: top,
            width: width,
            height: height,
            lineHeight: 0,
            backgroundColor: "",
            color: "#000000",
            textAlign: "center",
            fontSize: 10,
            borderRadius: 3
          }
        });
        var that = this;
        var userInfo = null;
        button.onTap(function(res) {
          if (userInfo) {
            button.hide();
            return;
          }
          switch (res.errMsg) {
           case "getUserInfo:ok":
            button.hide();
            cc.sys.localStorage.setItem("hasUserInfo", "1");
            userInfo = res.userInfo;
            var nickName = userInfo.nickName;
            var avatarUrl = userInfo.avatarUrl;
            that.setUserConfig(nickName, avatarUrl);
            that.wx.getOpenDataContext().postMessage({
              message: "User info get success."
            });

           default:
            console.error(res.errMsg);
          }
        });
        var hasUserInfo = cc.sys.localStorage.getItem("hasUserInfo");
        "1" == hasUserInfo && button.hide();
      };
      WxHelper.prototype.setUserConfig = function(nickName, avatarUrl) {
        if (!this.user) return;
        var userAvatarSprite = this.user.getChildByName("mask").getComponentInChildren(cc.Sprite);
        var nickNameLabel = this.user.getChildByName("userName").getComponent(cc.Label);
        nickNameLabel.string = nickName;
        cc.loader.load({
          url: avatarUrl,
          type: "png"
        }, function(err, texture) {
          err && console.error(err);
          userAvatarSprite.spriteFrame = new cc.SpriteFrame(texture);
        });
      };
      WxHelper.prototype.CloseDialog = function() {
        if (this.wx && this.node && this.rankList && this.rankList.node) {
          this.rankList.node.active = false;
          var openDataContext = this.wx.getOpenDataContext();
          openDataContext.postMessage({
            message: "close"
          });
        }
      };
      WxHelper.prototype.OpenDialog = function() {
        if (this.wx && this.rankList) {
          this.rankList.node.active = true;
          this.saveRankData();
        }
      };
      WxHelper.prototype.saveRankData = function() {
        if (!this.wx) {
          console.log("wx is empty");
          return;
        }
        var that = this;
        that.wx.setUserCloudStorage({
          KVDataList: [ {
            key: "score",
            value: Logic_1.default.coins + ""
          } ],
          success: function(res) {
            console.log("score" + Logic_1.default.coins);
            console.log(res);
            var openDataContext = that.wx.getOpenDataContext();
            openDataContext.postMessage({
              message: "updateMaxScore"
            });
          },
          fail: function(res) {
            console.log("failed" + Logic_1.default.coins);
            console.log(res);
          }
        });
      };
      __decorate([ property(cc.Node) ], WxHelper.prototype, "user", void 0);
      __decorate([ property(cc.Node) ], WxHelper.prototype, "startButtonNode", void 0);
      __decorate([ property(cc.WXSubContextView) ], WxHelper.prototype, "rankList", void 0);
      __decorate([ property ], WxHelper.prototype, "rankListOpen", void 0);
      WxHelper = __decorate([ ccclass ], WxHelper);
      return WxHelper;
    }(cc.Component);
    exports.default = WxHelper;
    cc._RF.pop();
  }, {
    "./Logic": "Logic"
  } ],
  use_reversed_rotateBy: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "20f25G5HaZKk4Y2GuqawsGN", "use_reversed_rotateBy");
    "use strict";
    cc.RotateBy._reverse = true;
    cc._RF.pop();
  }, {} ]
}, {}, [ "ActorAttackBox", "ActorBottomDir", "AreaDetector", "AreaOfEffect", "JumpingAbility", "NonPlayerActorState", "PlayerActorState", "ShadowPlayer", "Actor", "BaseAvatar", "BaseColliderComponent", "BaseNodeComponent", "BaseNonPlayerActorState", "BasePlayerActorState", "PlayActor", "StateContext", "TestAI", "Constants", "B3Error", "B3Failer", "B3Runner", "B3Succeeder", "B3Wait", "B3MemPriority", "B3MemSequence", "B3Priority", "B3Sequence", "B3Action", "B3BaseNode", "B3BehaviorTree", "B3BehaviorTreeGroup", "B3Blackboard", "B3Composite", "B3Condition", "B3Decorator", "B3INodeProperties", "B3Tick", "CustomAction", "Log", "DisCondition", "TargetCondition", "B3Inverter", "B3Limiter", "B3MaxTime", "B3RepeatUntilFailure", "B3RepeatUntilSuccess", "B3Repeater", "B3ActionsClsRegister", "B3CompositesClsRegister", "B3CustomClsRegister", "B3DecoratorsClsRegister", "B3Utils", "DefaultStateMachine", "FsmEvent", "StackStateMachine", "State", "StateMachine", "Boss", "BossAttackCollider", "Captain", "CaptainSword", "Dragon", "Dryad", "DryadGrass", "EvilEye", "IceDemon", "IceDemonThron", "Kraken", "KrakenSwingHand", "Rah", "Slime", "SlimeVenom", "Sphinx", "WarMachine", "AirExit", "Box", "Building", "CampFire", "Chest", "DecorationFloor", "DecorationWall", "Door", "Emplacement", "EnergyShield", "ExitDoor", "FallStone", "FootBoard", "Furniture", "InteractBuilding", "Ladder", "LightBuilding", "MagicLightening", "MartCashier", "MartShelves", "MgCrack", "MgWentLine", "MonsterGenerator", "MushRoomChild", "NormalBuilding", "Portal", "RoomBed", "RoomClock", "RoomFishtank", "RoomKitchen", "RoomStool", "RoomTrashCan", "RoomTv", "RoomWaterDispenser", "SavePoint", "Saw", "ShopMart", "ShopTable", "Stairs", "TarotTable", "Trap", "Vehicle", "Wall", "WallPaint", "CCollider", "OnContactListener", "Quadtree", "Vector", "AchievementData", "AffixData", "AffixMapData", "AreaOfEffectData", "AttributeData", "AvatarData", "BaseData", "BuildingData", "BulletData", "CellphoneData", "ChapterData", "ChunkData", "CommonData", "DamageData", "DialogueActorData", "DialogueButtonData", "DialogueData", "DialogueTextData", "DungeonStyleData", "EquipItemMapData", "EquipmentData", "EquipmentDescData", "EquipmentStringData", "ExitData", "FloatingLabelData", "FromData", "GoodsData", "GroundOilGoldData", "InventoryData", "ItemData", "LevelData", "LifeData", "MapData", "MapLightData", "MapManagerData", "MetalTalentData", "NonPlayerData", "OilGoldData", "PlayerData", "ProfessionData", "ProfileData", "ProfileGlobalData", "SavePointData", "SettingsData", "StatusData", "SuitData", "TalentData", "TarotData", "TriggerData", "ECS", "ColliderComponent", "InputComponent", "MoveComponent", "NodeRenderComponent", "TransformComponent", "ActorEntity", "NodeEntity", "ColliderSystem", "GameWorldSystem", "InputSystem", "MoveSystem", "RayCastResult", "AvatarFileEditor", "AvatarItem", "AvatarItemList", "AlertDialog", "OptimizeList", "QuestConditionData", "QuestData", "QuestRewardData", "QuestTargetData", "QuestTreeData", "QuestAlertDialog", "QuestCard", "QuestConditionItem", "QuestDateInputItem", "QuestFileEditManager", "QuestFileEditor", "QuestInputItem", "QuestSpriteInfoDialog", "QuestSpriteItem", "QuestSpritePickDialog", "FileOperator", "JsCallAndroid", "RevokeHelper", "BlockLight", "FloorPaper", "HitBlood", "Light", "ReflectLight", "ShadowOfSight", "WeatherEffect", "WeatherRain", "Equipment", "GameWorld", "Bullet", "Coin", "DashShadow", "Goods", "Item", "Laser", "OilGold", "TarotCard", "Achievement", "AiController", "BaseController", "CameraControl", "Chapter", "CoinCount", "Controller", "Dungeon", "EventHelper", "FrameAvatar", "Game", "GameFinish", "GameOver", "HealthBar", "Inventory", "JoyController", "Joystick", "KeyboardController", "Loading", "Logic", "MeleeCollideHelper", "MeleeShadowWeapon", "MeleeWeapon", "NonPlayer", "OilGoldCount", "Player", "PlayerAvatar", "PlayerController", "PlayerWeapon", "RealCoinCount", "Shield", "Shooter", "Start", "Test", "Tile", "WalkSmoke", "WxHelper", "AffixManager", "AiPlayerManager", "AoeManager", "BaseManager", "BuildingManager", "DungeonStyleManager", "EffectItemManager", "EquipmentManager", "FloatingLabelManager", "InventoryManager", "ItemManager", "LightManager", "LoadingManager", "MapManager", "MonsterManager", "MonsterRandomAttr", "NonPlayerManager", "ProfileManager", "QuestManager", "SpecialManager", "StatusManager", "TalentManager", "TarotManager", "WeatherManager", "WordManager", "Chunk", "ChunkLookCamera", "ChunkWorld", "Seeker", "WorldLoader", "OilLake", "PerlinNoise2D", "RectDoor", "RectDungeon", "RectRoom", "RoomType", "Status", "StatusConditionType", "StatusEventType", "EquipItemTalent", "FireGhost", "IceThron", "MagicCircle", "MagicIce", "MetalDagger", "MetalHand", "MetalShield", "OilGoldMetal", "OilGoldTalent", "OrganizationTalent", "ProfessionTalent", "Talent", "TalentDash", "TalentMagic", "TalentShield", "TalentTree", "AchievementItem", "ActorIcon", "ActorIconList", "ActorIconView", "AttributeSelector", "BrightnessBar", "CellphoneItem", "ColorPicker", "CoolDownView", "CursorArea", "CutScene", "Dialogue", "Doll", "DollJoyStick", "FloatingLabel", "GameHud", "HighPrecisionSlider", "InventoryItem", "LoadingIcon", "MetalTalentItem", "MiniMap", "MiniTile", "PaletteSelector", "ParallaxBackground", "PickAvatar", "PlayerInfoDialog", "QuestItem", "QuestTargetItem", "SatietyView", "SaveSlotItem", "StartBackground", "StartFlies", "StatusIcon", "StatusIconList", "TestFog", "Tips", "Toast", "AchievementItemDialog", "ActionSettingDialog", "BaseDialog", "CellphoneDialog", "DollMachineDialog", "EquipmentAndItemDialog", "GameAlertDialog", "InventoryDialog", "MartShelvesDialog", "MetalTalentDialog", "NoticeDialog", "QuestBoardDialog", "SaveSlotDialog", "SettingsDialog", "StatusIconDialog", "ActorUtils", "AudioPlayer", "DataUtils", "IndexZ", "Ldtk", "LdtkUtils", "LocalStorage", "NextStep", "NodeKey", "Random", "Random4Save", "Utils", "use_reversed_rotateBy" ]);