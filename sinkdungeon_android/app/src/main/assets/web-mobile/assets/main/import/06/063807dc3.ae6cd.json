[1,["3aXfEm4CxOrISMT4CdbsV6","7b2bYaE+1KeKjrv5Q2GazO"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],2,11],["cc.Material",["_name","_techniqueData"],1]],[[0,0,1,2,4],[1,0,1,2],[2,0,1,3]],[[[[0,"OutlineBlackShadowEffect",[{"hash":3286638618,"record":null,"name":"OutlineBlackShadowEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties{\n  vec4 outlineColor;\n  float outlineSize;\n  float textureSizeWidth;\n  float textureSizeHeight;\n};\nint getIsStrokeWithAngel(float angel)\n{\n  int stroke = 0;\n  vec2 textureSize = vec2(textureSizeWidth,textureSizeHeight);\n  float rad = angel * 0.01745329252;\n  vec2 unit = 1.0 / textureSize.xy;\n  vec2 offset = vec2(outlineSize * cos(rad) * unit.x, outlineSize * sin(rad) * unit.y);\n  vec2 v = v_uv0 + offset;\n  vec4 curr_color = texture2D(texture, v);\n  if (curr_color.a < 0.5 )\n  {\n      stroke = 1;\n  }\n  if(curr_color.r == 0.0&&curr_color.g == 0.0&&curr_color.b == 0.0){\n      stroke = 1;\n  }\n  return stroke;\n}\nvoid main () {\n  vec4 curr_color = texture2D(texture, v_uv0);\n  if(curr_color.r == 0.0&&curr_color.g == 0.0&&curr_color.b == 0.0){\n      curr_color = vec4(0,0,0,0);\n      gl_FragColor = curr_color;\n      return;\n  }\n  if (curr_color.a < 0.5)\n  {\n      gl_FragColor = v_color*curr_color;\n      return;\n  }\n  if(v_uv0.x == 0.0||v_uv0.x==1.0||v_uv0.y==0.0||v_uv0.y==1.0)\n  {\n    curr_color = outlineColor;\n    gl_FragColor = v_color*curr_color;\n    return;\n  }\n  int strokeCount = 0;\n  strokeCount += getIsStrokeWithAngel(0.0);\n  strokeCount += getIsStrokeWithAngel(30.0);\n  strokeCount += getIsStrokeWithAngel(60.0);\n  strokeCount += getIsStrokeWithAngel(90.0);\n  strokeCount += getIsStrokeWithAngel(120.0);\n  strokeCount += getIsStrokeWithAngel(150.0);\n  strokeCount += getIsStrokeWithAngel(180.0);\n  strokeCount += getIsStrokeWithAngel(210.0);\n  strokeCount += getIsStrokeWithAngel(240.0);\n  strokeCount += getIsStrokeWithAngel(270.0);\n  strokeCount += getIsStrokeWithAngel(300.0);\n  strokeCount += getIsStrokeWithAngel(330.0);\n  if (strokeCount > 0)\n  {\n      curr_color = outlineColor;\n  }else {\n    curr_color = vec4(0,0,0,0.6);\n  }\n  gl_FragColor = v_color * curr_color;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 outlineColor;\nuniform float outlineSize;\nuniform float textureSizeWidth;\nuniform float textureSizeHeight;\nint getIsStrokeWithAngel(float angel)\n{\n  int stroke = 0;\n  vec2 textureSize = vec2(textureSizeWidth,textureSizeHeight);\n  float rad = angel * 0.01745329252;\n  vec2 unit = 1.0 / textureSize.xy;\n  vec2 offset = vec2(outlineSize * cos(rad) * unit.x, outlineSize * sin(rad) * unit.y);\n  vec2 v = v_uv0 + offset;\n  vec4 curr_color = texture2D(texture, v);\n  if (curr_color.a < 0.5 )\n  {\n      stroke = 1;\n  }\n  if(curr_color.r == 0.0&&curr_color.g == 0.0&&curr_color.b == 0.0){\n      stroke = 1;\n  }\n  return stroke;\n}\nvoid main () {\n  vec4 curr_color = texture2D(texture, v_uv0);\n  if(curr_color.r == 0.0&&curr_color.g == 0.0&&curr_color.b == 0.0){\n      curr_color = vec4(0,0,0,0);\n      gl_FragColor = curr_color;\n      return;\n  }\n  if (curr_color.a < 0.5)\n  {\n      gl_FragColor = v_color*curr_color;\n      return;\n  }\n  if(v_uv0.x == 0.0||v_uv0.x==1.0||v_uv0.y==0.0||v_uv0.y==1.0)\n  {\n    curr_color = outlineColor;\n    gl_FragColor = v_color*curr_color;\n    return;\n  }\n  int strokeCount = 0;\n  strokeCount += getIsStrokeWithAngel(0.0);\n  strokeCount += getIsStrokeWithAngel(30.0);\n  strokeCount += getIsStrokeWithAngel(60.0);\n  strokeCount += getIsStrokeWithAngel(90.0);\n  strokeCount += getIsStrokeWithAngel(120.0);\n  strokeCount += getIsStrokeWithAngel(150.0);\n  strokeCount += getIsStrokeWithAngel(180.0);\n  strokeCount += getIsStrokeWithAngel(210.0);\n  strokeCount += getIsStrokeWithAngel(240.0);\n  strokeCount += getIsStrokeWithAngel(270.0);\n  strokeCount += getIsStrokeWithAngel(300.0);\n  strokeCount += getIsStrokeWithAngel(330.0);\n  if (strokeCount > 0)\n  {\n      curr_color = outlineColor;\n  }else {\n    curr_color = vec4(0,0,0,0.6);\n  }\n  gl_FragColor = v_color * curr_color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Properties","binding":1,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"outlineSize","type":13,"count":1},{"name":"textureSizeWidth","type":13,"count":1},{"name":"textureSizeHeight","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"OutlineBlackShadowEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"outlineSize":{"type":13,"value":[2]},"textureSizeWidth":{"type":13,"value":[1]},"textureSizeHeight":{"type":13,"value":[1]},"outlineColor":{"type":16,"value":[0,0,0,0],"inspector":{"type":"color"}}}}]}]]],0,0,[],[],[]],[[[0,"HoleEffect",[{"hash":1461060540,"record":null,"name":"HoleEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec4 lightColor;\n  vec2 size;\n};\nvec4 getC(vec2 pos){\n  vec4 color = texture2D(texture, pos);\n  if(color.a == 0.){\n    return lightColor;\n  }else {\n    return vec4(0.,0.,0.,0.);\n  }\n}\nconst float RADIUS = 3.0;\nvec4 blur13color(vec2 pos){\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353);\n  vec2 off2 = vec2(3.2941176470588234);\n  vec2 off3 = vec2(5.176470588235294);\n  vec2 off4 = vec2(-1.411764705882353,1.411764705882353);\n  vec2 off5 = vec2(-3.2941176470588234,3.2941176470588234);\n  vec2 off6 = vec2(-5.176470588235294,5.176470588235294);\n  color += getC(pos) * 0.1964825501511404;\n  color += getC(pos + (off1 / size)) * 0.1484534823364172;\n  color += getC(pos - (off1 / size)) * 0.1484534823364172;\n  color += getC(pos + (off2 / size)) * 0.04723519892522366;\n  color += getC(pos - (off2 / size)) * 0.04723519892522366;\n  color += getC(pos + (off3 / size)) * 0.00519068120057402;\n  color += getC(pos - (off3 / size)) * 0.00519068120057402;\n  color += getC(pos + (off4 / size)) * 0.1484534823364172;\n  color += getC(pos - (off4 / size)) * 0.1484534823364172;\n  color += getC(pos + (off5 / size)) * 0.04723519892522366;\n  color += getC(pos - (off5 / size)) * 0.04723519892522366;\n  color += getC(pos + (off6 / size)) * 0.00519068120057402;\n  color += getC(pos - (off6 / size)) * 0.00519068120057402;\n  return color;\n}\nvoid main () {\n  vec4 o = blur13color(v_uv0);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 lightColor;\nuniform vec2 size;\nvec4 getC(vec2 pos){\n  vec4 color = texture2D(texture, pos);\n  if(color.a == 0.){\n    return lightColor;\n  }else {\n    return vec4(0.,0.,0.,0.);\n  }\n}\nconst float RADIUS = 3.0;\nvec4 blur13color(vec2 pos){\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353);\n  vec2 off2 = vec2(3.2941176470588234);\n  vec2 off3 = vec2(5.176470588235294);\n  vec2 off4 = vec2(-1.411764705882353,1.411764705882353);\n  vec2 off5 = vec2(-3.2941176470588234,3.2941176470588234);\n  vec2 off6 = vec2(-5.176470588235294,5.176470588235294);\n  color += getC(pos) * 0.1964825501511404;\n  color += getC(pos + (off1 / size)) * 0.1484534823364172;\n  color += getC(pos - (off1 / size)) * 0.1484534823364172;\n  color += getC(pos + (off2 / size)) * 0.04723519892522366;\n  color += getC(pos - (off2 / size)) * 0.04723519892522366;\n  color += getC(pos + (off3 / size)) * 0.00519068120057402;\n  color += getC(pos - (off3 / size)) * 0.00519068120057402;\n  color += getC(pos + (off4 / size)) * 0.1484534823364172;\n  color += getC(pos - (off4 / size)) * 0.1484534823364172;\n  color += getC(pos + (off5 / size)) * 0.04723519892522366;\n  color += getC(pos - (off5 / size)) * 0.04723519892522366;\n  color += getC(pos + (off6 / size)) * 0.00519068120057402;\n  color += getC(pos - (off6 / size)) * 0.00519068120057402;\n  return color;\n}\nvoid main () {\n  vec4 o = blur13color(v_uv0);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Properties","binding":1,"members":[{"name":"lightColor","type":16,"count":1},{"name":"size","type":14,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"HoleEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.7]},"size":{"type":14,"value":[160,90],"editor":{"tooltip":"节点尺寸"}},"lightColor":{"type":16,"value":[0,0,0.1,0.1],"inspector":{"type":"color"}}}}]}]]],0,0,[],[],[]],[[[1,"OutlineBlackShadowMat",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_ALPHA_TEST":false}},"props",11,[{"textureSizeWidth":96,"textureSizeHeight":96,"outlineSize":4},"outlineColor",8,[4,4294967295]]]]]],0,0,[0],[0],[0]],[[[2,"HoleMat",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[0],[1]]]]