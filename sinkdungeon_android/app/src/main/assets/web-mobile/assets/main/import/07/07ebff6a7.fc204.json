[1,["ecpdLyjvZBwrvm+cedCcQy","a2MjXRFdtLlYQ5ouAFv/+R","27I5oi35dJup9fBJOedvhD","ec6LVSim9KbpE7sP22tQK+","afUMEfbGdLl69MGzYmB5uM","fanphVJJZA36mUS0LmiMTL","2bem2KQKBAkKnLgeglqTsD","02delMVqdBD70a/HSD99FK","e8pm9732JNMZP7b3bTA4+b","12NXH2oOtAhKhYcE6cgMmW","52LD0cDVVAjb0gwineV8yU","c46mKwv3ZEQJcVCFkvFJBC","d6gsoi/AtPqKoBggk2jTCm","5eQTcVCM1C17MzTs/npXGx"],["node","_spriteFrame","_effectAsset","_textureSetter","texture","shadowCamera","shadow","ray","camera","graphics","scene","_parent"],[["cc.Node",["_name","_active","_id","_components","_contentSize","_parent","_children","_trs","_color"],0,9,5,1,2,7,5],["cc.Node",["_name","_active","_parent","_components","_contentSize","_trs","_children","_anchorPoint"],1,1,2,5,7,2,5],["cc.Sprite",["_sizeMode","_materials","node","_spriteFrame"],2,3,1,6],"cc.SpriteFrame",["cc.Widget",["_alignFlags","_left","_right","_top","_bottom","node"],-2,1],["cc.Camera",["_cullingMask","_clearFlags","_depth","_nearClip","node"],-1,1],["cc.Graphics",["_materials","node"],3,3,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1],["cc.Material",["_name","_techniqueData"],2,11],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.Canvas",["_fitWidth","node","_designResolution"],2,1,5],["f27abc9Kq9M9YY+mw/i2T6U",["node","graphics","camera","ray","shadow","shadowCamera"],3,1,1,1,1,1,1],["cc.Scene",["_name","_active","autoReleaseAssets","_children","_anchorPoint","_trs"],0,2,5,7],["cc.Label",["_string","_N$horizontalAlign","_N$verticalAlign","node","_materials"],0,1,3]],[[2,0,2,1,3,2],[7,0,1,2,4],[9,0,1,2],[0,0,1,5,3,4,3],[0,0,1,5,3,4,7,3],[1,0,1,2,3,4,3],[4,0,5,2],[8,0,1,3],[10,0,1,3],[0,0,2,6,3,4,7,3],[0,0,5,6,2],[0,0,5,6,3,4,2],[0,0,5,3,8,4,2],[0,0,5,3,4,2],[1,0,2,6,3,7,2],[1,0,2,3,4,5,2],[1,0,2,3,5,2],[11,0,1,2,2],[4,0,1,2,3,4,5,6],[12,0,1,2,3,4,5,1],[2,0,1,2],[2,0,2,1,2],[13,0,1,2,3,4,5,4],[5,0,1,2,4,4],[5,0,1,3,4,4],[14,0,1,2,3,4,4],[6,1,0,1],[6,0,1]],[[[{"name":"monster016","rect":[0,0,21,21],"offset":[0,0],"originalSize":[21,21],"capInsets":[0,0,0,0]}],[3],0,[0],[3],[3]],[[[1,"BlurEffect",[{"hash":861408306,"record":null,"name":"BlurEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 size;\n};\nfloat getA(vec2 pos){\n  vec4 color = texture2D(texture, pos);\n  float a = 0.0;\n  if(color.r == 1.0&&color.g == 1.0&&color.b == 1.0){\n    a = 0.0;\n  }else{\n    a = 1.0;\n  }\n  return a;\n}\nfloat blur13(vec2 pos){\n  float alpha = 0.0;\n  vec2 off1 = vec2(1.411764705882353);\n  vec2 off2 = vec2(3.2941176470588234);\n  vec2 off3 = vec2(5.176470588235294);\n  vec2 off4 = vec2(-1.411764705882353,1.411764705882353);\n  vec2 off5 = vec2(-3.2941176470588234,3.2941176470588234);\n  vec2 off6 = vec2(-5.176470588235294,5.176470588235294);\n  alpha += getA(pos) * 0.1964825501511404;\n  alpha += getA(pos + (off1 / size)) * 0.1484534823364172;\n  alpha += getA(pos - (off1 / size)) * 0.1484534823364172;\n  alpha += getA(pos + (off2 / size)) * 0.04723519892522366;\n  alpha += getA(pos - (off2 / size)) * 0.04723519892522366;\n  alpha += getA(pos + (off3 / size)) * 0.00519068120057402;\n  alpha += getA(pos - (off3 / size)) * 0.00519068120057402;\n  alpha += getA(pos + (off4 / size)) * 0.1484534823364172;\n  alpha += getA(pos - (off4 / size)) * 0.1484534823364172;\n  alpha += getA(pos + (off5 / size)) * 0.04723519892522366;\n  alpha += getA(pos - (off5 / size)) * 0.04723519892522366;\n  alpha += getA(pos + (off6 / size)) * 0.00519068120057402;\n  alpha += getA(pos - (off6 / size)) * 0.00519068120057402;\n  return alpha;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 0.8);\n  o *= v_color;\n  o.a = o.a*blur13(v_uv0);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 size;\nfloat getA(vec2 pos){\n  vec4 color = texture2D(texture, pos);\n  float a = 0.0;\n  if(color.r == 1.0&&color.g == 1.0&&color.b == 1.0){\n    a = 0.0;\n  }else{\n    a = 1.0;\n  }\n  return a;\n}\nfloat blur13(vec2 pos){\n  float alpha = 0.0;\n  vec2 off1 = vec2(1.411764705882353);\n  vec2 off2 = vec2(3.2941176470588234);\n  vec2 off3 = vec2(5.176470588235294);\n  vec2 off4 = vec2(-1.411764705882353,1.411764705882353);\n  vec2 off5 = vec2(-3.2941176470588234,3.2941176470588234);\n  vec2 off6 = vec2(-5.176470588235294,5.176470588235294);\n  alpha += getA(pos) * 0.1964825501511404;\n  alpha += getA(pos + (off1 / size)) * 0.1484534823364172;\n  alpha += getA(pos - (off1 / size)) * 0.1484534823364172;\n  alpha += getA(pos + (off2 / size)) * 0.04723519892522366;\n  alpha += getA(pos - (off2 / size)) * 0.04723519892522366;\n  alpha += getA(pos + (off3 / size)) * 0.00519068120057402;\n  alpha += getA(pos - (off3 / size)) * 0.00519068120057402;\n  alpha += getA(pos + (off4 / size)) * 0.1484534823364172;\n  alpha += getA(pos - (off4 / size)) * 0.1484534823364172;\n  alpha += getA(pos + (off5 / size)) * 0.04723519892522366;\n  alpha += getA(pos - (off5 / size)) * 0.04723519892522366;\n  alpha += getA(pos + (off6 / size)) * 0.00519068120057402;\n  alpha += getA(pos - (off6 / size)) * 0.00519068120057402;\n  return alpha;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 0.8);\n  o *= v_color;\n  o.a = o.a*blur13(v_uv0);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Properties","binding":1,"members":[{"name":"size","type":14,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"BlurEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"size":{"type":14,"value":[500,500],"editor":{"tooltip":"节点尺寸"}}}}]}]]],0,0,[],[],[]],[[[7,"NewSightMat",{"0":{"defines":{"USE_ALPHA_TEST":true},"props":{"alphaThreshold":0.1}}}]],0,0,[0],[2],[4]],[[[2,"BlurMat",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_ALPHA_TEST":true}},"props",11,[{},"size",8,[0,1280,720],"texture",6,0]]]]],0,0,[0,0],[4,2],[5,6]],[[{"name":"default_sprite_splash","rect":[0,0,2,2],"offset":[0,0],"originalSize":[2,2],"capInsets":[0,0,0,0]}],[3],0,[0],[3],[7]],[[[1,"NewSight",[{"hash":1594810393,"record":null,"name":"NewSight|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin float a_dist;\nout float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin float v_dist;\nuniform Props {\n  vec2 screen;\n  vec2 lightPos;\n  float maxRadius;\n  float whRatio;\n};\nvoid main () {\n  vec4 o = v_color;\n  vec2 st = gl_FragCoord.xy / screen.xy;\n  float scaleWH = screen.x/screen.y;\n  ALPHA_TEST(o);\n  vec2 uv = st - lightPos;\n  float rx = abs(uv.x);\n  float ry = abs(uv.y);\n  float fade = o.a;\n  float radius = length(vec2(rx * whRatio, ry / scaleWH * whRatio));\n  float radiusX = length(vec2(rx * whRatio, 0.0));\n  float radiusY = length(vec2(0.0, ry / scaleWH * whRatio));\n  float radiusXy = radiusX;\n  if(radiusX<radiusY){\n    radiusXy = radiusY;\n  }\n  o.a = 1.0 - smoothstep(0.05, maxRadius, radiusXy);\n  o.a *= fade;\n  #if CC_SUPPORT_standard_derivatives\n    float aa = fwidth(v_dist);\n  #else\n    float aa = 0.05;\n  #endif\n  float alpha = 1. - smoothstep(-aa, 0., abs(v_dist) - 1.0);\n  o.rgb *= o.a;\n  o *= alpha;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute float a_dist;\nvarying float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying float v_dist;\nuniform vec2 screen;\nuniform vec2 lightPos;\nuniform float maxRadius;\nuniform float whRatio;\nvoid main () {\n  vec4 o = v_color;\n  vec2 st = gl_FragCoord.xy / screen.xy;\n  float scaleWH = screen.x/screen.y;\n  ALPHA_TEST(o);\n  vec2 uv = st - lightPos;\n  float rx = abs(uv.x);\n  float ry = abs(uv.y);\n  float fade = o.a;\n  float radius = length(vec2(rx * whRatio, ry / scaleWH * whRatio));\n  float radiusX = length(vec2(rx * whRatio, 0.0));\n  float radiusY = length(vec2(0.0, ry / scaleWH * whRatio));\n  float radiusXy = radiusX;\n  if(radiusX<radiusY){\n    radiusXy = radiusY;\n  }\n  o.a = 1.0 - smoothstep(0.05, maxRadius, radiusXy);\n  o.a *= fade;\n  #if CC_SUPPORT_standard_derivatives\n    float aa = fwidth(v_dist);\n  #else\n    float aa = 0.05;\n  #endif\n  float alpha = 1. - smoothstep(-aa, 0., abs(v_dist) - 1.0);\n  o.rgb *= o.a;\n  o *= alpha;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_SUPPORT_standard_derivatives","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Props","binding":1,"members":[{"name":"screen","type":14,"count":1},{"name":"lightPos","type":14,"count":1},{"name":"maxRadius","type":13,"count":1},{"name":"whRatio","type":13,"count":1}],"defines":[]}],"samplers":[]}],[{"passes":[{"program":"NewSight|vs|fs","blendState":{"targets":[{"blend":true,"blendSrc":775,"blendDst":1,"blendSrcAlpha":775,"blendDstAlpha":1}]},"rasterizerState":{"cullMode":0},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"screen":{"type":14,"value":[400,400]},"lightPos":{"type":14,"value":[0.5,0.5]},"maxRadius":{"type":13,"value":[0.75]},"whRatio":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]],[[[2,"FogMat",[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{"radius":0.5,"wh_ratio":1},"center",8,[0,0.5,0.5]]]]]],0,0,[0],[2],[8]],[[[1,"FogEffect",[{"hash":2819043487,"record":null,"name":"FogEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform Properties{\n  float wh_ratio;\n  float radius;\n  vec2 center;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture(texture, v_uv0);\n  o *= v_color;\n  float circle = radius * radius;\n  float rx = center.x * wh_ratio;\n  float ry = center.y;\n  float blur = radius;\n  float dis = (v_uv0.x * wh_ratio - rx) * (v_uv0.x * wh_ratio - rx) + (v_uv0.y  - ry) * (v_uv0.y - ry);\n  float alpha = o.a;\n  o.a = smoothstep(circle, circle - blur, dis);\n  o.a*=alpha;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float wh_ratio;\nuniform float radius;\nuniform vec2 center;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture2D(texture, v_uv0);\n  o *= v_color;\n  float circle = radius * radius;\n  float rx = center.x * wh_ratio;\n  float ry = center.y;\n  float blur = radius;\n  float dis = (v_uv0.x * wh_ratio - rx) * (v_uv0.x * wh_ratio - rx) + (v_uv0.y  - ry) * (v_uv0.y - ry);\n  float alpha = o.a;\n  o.a = smoothstep(circle, circle - blur, dis);\n  o.a*=alpha;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Properties","binding":1,"members":[{"name":"wh_ratio","type":13,"count":1},{"name":"radius","type":13,"count":1},{"name":"center","type":14,"count":1}],"defines":["USE_TEXTURE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"FogEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"wh_ratio":{"type":13,"value":[1]},"radius":{"type":13,"value":[0.5]},"center":{"type":14,"value":[0.5,0.5]}}}]}]]],0,0,[],[],[]],[[[8,"test",null],[9,"Canvas","a5esZu+45LA5mBpvttspPD",[-3,-4,-5,-6,-7,-8,-9,-10],[[17,true,-1,[5,1280,720]],[6,45,-2]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[10,"Dungeon",1,[-11,-12,-13]],[11,"Sight",2,[-21],[[19,-19,-18,-17,-16,-15,-14],[18,45,-640,-640,-360,-360,-20]],[5,1280,720]],[12,"bg",1,[[0,0,-22,[0],1],[6,45,-23]],[4,4281282351],[5,1280,720]],[14,"graphics",3,[-25],[-24],[0,0,0]],[22,"New Node",false,true,[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[15,"Main Camera",1,[-26],[5,1280,720],[0,0,232.09480821422957,0,0,0,1,1,1,1]],[23,-65,7,10,7],[16,"ShadowCamera",1,[-27],[0,0,554.2562584220408,0,0,0,1,1,1,1]],[24,64,7,0.1,9],[13,"New Label",5,[[25,"Label",1,1,-28,[2]]],[5,97.87,50.4]],[26,5,[3]],[27,[4]],[5,"ray",false,2,[13],[5,1280,720]],[20,0,[5]],[5,"shadow",false,1,[15],[5,1280,720]],[3,"New Sprite(Splash)",false,2,[[0,0,-29,[6],7]],[5,100,100]],[4,"monster016",false,1,[[0,0,-30,[8],9]],[5,100,100],[113.508,31.238,0,0,0,0,1,1,1,1]],[4,"monster017",false,1,[[0,0,-31,[10],11]],[5,100,100],[-28.319,30.678,0,0,0,0,1,1,1,1]],[3,"sprite",false,1,[[21,0,-32,[12]]],[5,1280,720]]],0,[0,0,1,0,0,1,0,-1,4,0,-2,7,0,-3,9,0,-4,2,0,-5,18,0,-6,19,0,-7,20,0,-8,16,0,-1,3,0,-2,14,0,-3,17,0,5,10,0,6,15,0,7,13,0,8,8,0,9,12,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,-1,12,0,-1,11,0,-1,8,0,-1,10,0,0,11,0,0,17,0,0,18,0,0,19,0,0,20,0,10,6,1,11,6,13,0,14,15,0,16,32],[0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,-1,-1,-1,-1,1,-1,1,-1,1,-1],[0,1,0,9,10,11,12,1,13,2,0,2,0]]]]