window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
        o = b;
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  AchievementData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a835W88Z5L36Zxiky/P1I6", "AchievementData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AchievementData = function() {
      function AchievementData() {
        this.index = 0;
        this.monsters = {};
        this.items = {};
        this.equips = {};
        this.npcs = {};
        this.maps = {};
        this.challenges = {};
        this.furnitures = {};
        this.playerLifes = 0;
      }
      AchievementData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.index = data.index ? data.index : 0;
        this.monsters = data.monsters ? data.monsters : {};
        this.items = data.items ? data.items : {};
        this.equips = data.equips ? data.equips : {};
        this.npcs = data.npcs ? data.npcs : {};
        this.maps = data.maps ? data.maps : {};
        this.challenges = data.challenges ? data.challenges : {};
        this.furnitures = data.furnitures ? data.furnitures : {};
        this.playerLifes = data.playerLifes ? data.playerLifes : 0;
      };
      return AchievementData;
    }();
    exports.default = AchievementData;
    cc._RF.pop();
  }, {} ],
  AchievementItemDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96567VnqW1J7rI4r4v/kGbc", "AchievementItemDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentManager_1 = require("../../Manager/EquipmentManager");
    var AudioPlayer_1 = require("../../Utils/AudioPlayer");
    var BaseDialog_1 = require("./BaseDialog");
    var EquipmentAndItemDialog_1 = require("./EquipmentAndItemDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AchievementItemDialog = function(_super) {
      __extends(AchievementItemDialog, _super);
      function AchievementItemDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.equipmentAndItemDialogPrefab = null;
        _this.equipmentAndItemDialog = null;
        _this.icon = null;
        return _this;
      }
      AchievementItemDialog.prototype.onLoad = function() {
        this.equipmentAndItemDialog = this.initDialog();
      };
      AchievementItemDialog.prototype.initDialog = function() {
        var node = cc.instantiate(this.equipmentAndItemDialogPrefab);
        node.parent = this.node;
        var dialog = node.getComponent(EquipmentAndItemDialog_1.default);
        dialog.changeBgAndAnchor(EquipmentAndItemDialog_1.default.BG_TYPE_NONE);
        dialog.hideDialog();
        return dialog;
      };
      AchievementItemDialog.prototype.start = function() {};
      AchievementItemDialog.prototype.show = function(nonPlayerData, itemData, equipData, furnitureData, spriteFrame) {
        _super.prototype.show.call(this);
        if (spriteFrame) {
          this.icon.spriteFrame = spriteFrame;
          this.icon.node.width = 160;
          this.icon.node.height = 160 / spriteFrame.getOriginalSize().width * spriteFrame.getOriginalSize().height;
        }
        equipData && (equipData = EquipmentManager_1.default.getOriginEquipData(equipData.img));
        this.equipmentAndItemDialog.showDialog(cc.v3(80, 150), nonPlayerData, itemData, equipData, furnitureData);
      };
      AchievementItemDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      __decorate([ property(cc.Prefab) ], AchievementItemDialog.prototype, "equipmentAndItemDialogPrefab", void 0);
      __decorate([ property(cc.Sprite) ], AchievementItemDialog.prototype, "icon", void 0);
      AchievementItemDialog = __decorate([ ccclass ], AchievementItemDialog);
      return AchievementItemDialog;
    }(BaseDialog_1.default);
    exports.default = AchievementItemDialog;
    cc._RF.pop();
  }, {
    "../../Manager/EquipmentManager": "EquipmentManager",
    "../../Utils/AudioPlayer": "AudioPlayer",
    "./BaseDialog": "BaseDialog",
    "./EquipmentAndItemDialog": "EquipmentAndItemDialog"
  } ],
  AchievementItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "769e5+ojuhFiYvxDanjxQKn", "AchievementItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AchievementItem = function(_super) {
      __extends(AchievementItem, _super);
      function AchievementItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isSelect = false;
        _this.sprite = null;
        _this.label = null;
        _this.index = 0;
        _this.parentIndex = 0;
        _this.count = 0;
        _this.spriteFrame = null;
        return _this;
      }
      AchievementItem_1 = AchievementItem;
      AchievementItem.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {}, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          if (_this.node && _this.count > 0) {
            AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
            _this.achievements.achievementItemDialog.show(_this.nonPlayerData, _this.itemData, _this.equipData, _this.furnitureData, _this.sprite.spriteFrame);
          } else AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {}, this);
      };
      AchievementItem.prototype.init = function(achievements, parentIndex, index, count, spriteFrame, nonPlayerData, itemData, equipData, furnitureData) {
        this.nonPlayerData = nonPlayerData;
        this.itemData = itemData;
        this.equipData = equipData;
        this.furnitureData = furnitureData;
        this.achievements = achievements;
        this.parentIndex = parentIndex;
        this.index = index;
        this.count = count;
        this.spriteFrame = spriteFrame;
        this.isSelect = false;
        this.updateData();
      };
      AchievementItem.prototype.updateData = function() {
        this.isSelect = false;
        this.label.string = "";
        this.sprite.spriteFrame = null;
        if (this.spriteFrame) {
          this.sprite.spriteFrame = this.spriteFrame;
          var w = this.spriteFrame.getOriginalSize().width;
          var h = this.spriteFrame.getOriginalSize().height;
          this.sprite.node.width = 4 * w;
          this.sprite.node.height = 4 * h;
          if (this.sprite.node.height > 96) {
            this.sprite.node.height = 96;
            this.sprite.node.width = 96 / this.spriteFrame.getOriginalSize().height * this.spriteFrame.getOriginalSize().width;
          }
          var scale = 4;
          h > 96 && (scale = .5);
          this.mat || (this.mat = this.sprite.getMaterial(0));
          this.mat.setProperty("textureSizeWidth", this.spriteFrame.getTexture().width * scale);
          this.mat.setProperty("textureSizeHeight", this.spriteFrame.getTexture().height * scale);
          this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
          this.mat.setProperty("blackBg", this.count > 0 ? 0 : 1);
          this.mat.setProperty("openOutline", this.count > 0 ? 0 : 1);
        }
        if (this.count > 0) {
          var length = this.count % 20;
          this.count > 100 && (length = 20);
          var str = "";
          for (var i_1 = 0; i_1 < length; i_1 += 4) str += "\u2605";
          this.label.string = str;
          var i = Math.floor(this.count / 20);
          i > AchievementItem_1.COLORS.length - 1 && (i = AchievementItem_1.COLORS.length - 1);
          this.label.node.color = cc.Color.WHITE.fromHEX(AchievementItem_1.COLORS[i]);
        }
      };
      AchievementItem.prototype.setEmpty = function() {
        this.label.string = "";
        this.sprite.spriteFrame = null;
      };
      AchievementItem.prototype.start = function() {};
      var AchievementItem_1;
      AchievementItem.TYPE_EMPTY = 0;
      AchievementItem.TYPE_CHALLENGE = 1;
      AchievementItem.TYPE_MAP = 2;
      AchievementItem.TYPE_FURNITURE = 3;
      AchievementItem.TYPE_NPC = 4;
      AchievementItem.TYPE_BOSS = 5;
      AchievementItem.TYPE_MONSTER = 6;
      AchievementItem.TYPE_EQUIP = 7;
      AchievementItem.TYPE_ITEM = 8;
      AchievementItem.COLORS = [ "#ffffff", "#00ff00", "#0000ff", "#800080", "#ffa500" ];
      __decorate([ property(cc.Sprite) ], AchievementItem.prototype, "sprite", void 0);
      __decorate([ property(cc.Label) ], AchievementItem.prototype, "label", void 0);
      AchievementItem = AchievementItem_1 = __decorate([ ccclass ], AchievementItem);
      return AchievementItem;
    }(cc.Component);
    exports.default = AchievementItem;
    cc._RF.pop();
  }, {
    "../Utils/AudioPlayer": "AudioPlayer"
  } ],
  Achievement: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5607byYvNBEQ4yBaPsgf0sF", "Achievement");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentData_1 = require("./Data/EquipmentData");
    var FurnitureData_1 = require("./Data/FurnitureData");
    var ItemData_1 = require("./Data/ItemData");
    var NonPlayerData_1 = require("./Data/NonPlayerData");
    var Logic_1 = require("./Logic");
    var InventoryManager_1 = require("./Manager/InventoryManager");
    var LoadingManager_1 = require("./Manager/LoadingManager");
    var AchievementItem_1 = require("./UI/AchievementItem");
    var AchievementItemDialog_1 = require("./UI/dialog/AchievementItemDialog");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var LocalStorage_1 = require("./Utils/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Achievement = function(_super) {
      __extends(Achievement, _super);
      function Achievement() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.content = null;
        _this.prefab = null;
        _this.lifesLabel = null;
        _this.coinLabel = null;
        _this.goldLabel = null;
        _this.loadingBackground = null;
        _this.achievementItemDialog = null;
        _this.bossSpriteFrames = null;
        _this.isBossLoaded = false;
        _this.currentListIndex = 0;
        _this.currentItemIndex = -1;
        _this.loadingManager = new LoadingManager_1.default();
        return _this;
      }
      Achievement_1 = Achievement;
      Achievement.prototype.onLoad = function() {
        this.loadingManager.init();
        this.content.removeAllChildren();
        this.data = LocalStorage_1.default.getAchievementData();
        this.lifesLabel && this.data.playerLifes && (this.lifesLabel.string = "DIED " + this.data.playerLifes);
        if (this.coinLabel) {
          var c = LocalStorage_1.default.getValueFromData(LocalStorage_1.default.KEY_COIN);
          this.coinLabel.string = "" + (c ? parseInt(c) : 0);
        }
        this.achievementItemDialog && (this.achievementItemDialog.node.active = false);
      };
      Achievement.prototype.start = function() {
        this.loadingManager.loadEquipment();
        this.loadingManager.loadAutoSpriteFrames();
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_TEXTURES, "ammo");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_NPC, "monster000anim000");
        this.loadingManager.loadMonsters();
        this.loadingManager.loadItems();
        this.loadingManager.loadNonplayer();
        this.loadingManager.loadSuits();
        this.loadingManager.loadFurnitures();
        this.loadBossSpriteFrames();
        this.loadingBackground.active = true;
      };
      Achievement.prototype.changeList = function(toggle, index) {
        this.currentListIndex = parseInt(index);
        switch (this.currentListIndex) {
         case Achievement_1.TYPE_CHALLENGE:
         case Achievement_1.TYPE_MAP:
          this.content.removeAllChildren();
          break;

         case Achievement_1.TYPE_FURNITURE:
          this.showFurnitureList();
          break;

         case Achievement_1.TYPE_NPC:
          this.showNpcList();
          break;

         case Achievement_1.TYPE_BOSS:
          this.showBossList();
          break;

         case Achievement_1.TYPE_MONSTER:
          this.showMonsterList();
          break;

         case Achievement_1.TYPE_EQUIP:
          this.showEquipList();
          break;

         case Achievement_1.TYPE_ITEM:
          this.showItemList();
        }
      };
      Achievement.prototype.showMonsterList = function() {
        this.content.removeAllChildren();
        var index = 0;
        for (var key in Logic_1.default.monsters) {
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.default.monsters[key]);
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          icon.init(this, this.currentListIndex, index++, this.data.monsters[data.resName], Logic_1.default.spriteFrameRes(data.resName + "anim000"), data, null, null, null);
          this.content.addChild(icon.node);
        }
      };
      Achievement.prototype.showBossList = function() {
        this.content.removeAllChildren();
        for (var i = 0; i < Achievement_1.BOSS_SIZE; i++) {
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          icon.init(this, this.currentListIndex, i, this.data.monsters["iconboss00" + i], this.bossSpriteFrames["iconboss00" + i], null, null, null, null);
          this.content.addChild(icon.node);
        }
      };
      Achievement.prototype.showNpcList = function() {
        this.content.removeAllChildren();
        var index = 0;
        for (var key in Logic_1.default.nonplayers) {
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.default.nonplayers[key]);
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          icon.init(this, this.currentListIndex, index++, this.data.npcs[data.resName], Logic_1.default.spriteFrameRes(data.resName + "anim000"), data, null, null, null);
          this.content.addChild(icon.node);
        }
      };
      Achievement.prototype.showItemList = function() {
        this.content.removeAllChildren();
        var index = 0;
        for (var key in Logic_1.default.items) {
          var data = new ItemData_1.default();
          data.valueCopy(Logic_1.default.items[key]);
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          icon.init(this, this.currentListIndex, index++, this.data.items[data.resName], Logic_1.default.spriteFrameRes(data.resName), null, data, null, null);
          index > 5 && this.content.addChild(icon.node);
        }
      };
      Achievement.prototype.showEquipList = function() {
        this.content.removeAllChildren();
        var index = 0;
        for (var key in Logic_1.default.equipments) {
          var data = new EquipmentData_1.default();
          data.valueCopy(Logic_1.default.equipments[key]);
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          var spriteFrame = Logic_1.default.spriteFrameRes(data.img);
          data.equipmetType == InventoryManager_1.default.CLOTHES ? spriteFrame = Logic_1.default.spriteFrameRes(data.img + "anim0") : data.equipmetType == InventoryManager_1.default.HELMET ? spriteFrame = Logic_1.default.spriteFrameRes(data.img + "anim0") : data.equipmetType == InventoryManager_1.default.REMOTE && (spriteFrame = Logic_1.default.spriteFrameRes(data.img + "anim0"));
          icon.init(this, this.currentListIndex, index++, this.data.equips[data.img], spriteFrame, null, null, data, null);
          index > 1 && this.content.addChild(icon.node);
        }
      };
      Achievement.prototype.showFurnitureList = function() {
        this.content.removeAllChildren();
        var index = 0;
        for (var key in Logic_1.default.furnitures) {
          var data = new FurnitureData_1.default();
          data.valueCopy(Logic_1.default.furnitures[key]);
          var icon = cc.instantiate(this.prefab).getComponent(AchievementItem_1.default);
          icon.init(this, this.currentListIndex, index++, this.data.furnitures[data.id], Logic_1.default.spriteFrameRes(data.resName), null, null, null, data);
          this.content.addChild(icon.node);
        }
      };
      Achievement.prototype.show = function() {
        this.changeList(null, "0");
      };
      Achievement.prototype.loadBossSpriteFrames = function() {
        var _this = this;
        if (this.bossSpriteFrames) {
          this.isBossLoaded = true;
          return;
        }
        cc.resources.load("OtherTexture/bossicons", cc.SpriteAtlas, function(err, atlas) {
          _this.bossSpriteFrames = {};
          for (var _i = 0, _a = atlas.getSpriteFrames(); _i < _a.length; _i++) {
            var frame = _a[_i];
            _this.bossSpriteFrames[frame.name] = frame;
          }
          _this.isBossLoaded = true;
          cc.log("bossicons spriteatlas loaded");
        });
      };
      Achievement.prototype.backToHome = function() {
        cc.director.loadScene("start");
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      Achievement.addMonsterKillAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.monsters[name]) {
          data.monsters[name] = data.monsters[name] + 1;
          data.monsters[name] > 9999 && (data.monsters[name] = 9999);
        } else data.monsters[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addPlayerDiedLifesAchievement = function() {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.playerLifes) {
          data.playerLifes = data.playerLifes + 1;
          data.playerLifes > 9999 && (data.playerLifes = 9999);
        } else data.playerLifes = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addItemAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.items[name]) {
          data.items[name] = data.items[name] + 1;
          data.items[name] > 9999 && (data.items[name] = 9999);
        } else data.items[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addEquipsAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.equips[name]) {
          data.equips[name] = data.equips[name] + 1;
          data.equips[name] > 9999 && (data.equips[name] = 9999);
        } else data.equips[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addNpcsAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.npcs[name]) {
          data.npcs[name] = data.npcs[name] + 1;
          data.npcs[name] > 9999 && (data.npcs[name] = 9999);
        } else data.npcs[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addMapsAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.maps[name]) {
          data.maps[name] = data.maps[name] + 1;
          data.maps[name] > 9999 && (data.maps[name] = 9999);
        } else data.maps[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addChallengesAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.challenges[name]) {
          data.challenges[name] = data.challenges[name] + 1;
          data.challenges[name] > 9999 && (data.challenges[name] = 9999);
        } else data.challenges[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.addFurnituresAchievement = function(name) {
        var data = LocalStorage_1.default.getAchievementData();
        if (data.furnitures[name]) {
          data.furnitures[name] = data.furnitures[name] + 1;
          data.furnitures[name] > 9999 && (data.furnitures[name] = 9999);
        } else data.furnitures[name] = 1;
        LocalStorage_1.default.saveAchievementData(data);
      };
      Achievement.prototype.update = function(dt) {
        if (this.isBossLoaded && this.loadingManager.isEquipmentLoaded && this.loadingManager.isAllSpriteFramesLoaded() && this.loadingManager.isMonsterLoaded && this.loadingManager.isNonplayerLoaded && this.loadingManager.isItemsLoaded && this.loadingManager.isFurnituresLoaded && this.loadingManager.isSuitsLoaded) {
          this.isBossLoaded = true;
          this.loadingBackground.active = false;
          this.loadingManager.reset();
          this.show();
        }
      };
      var Achievement_1;
      Achievement.MONSTER_SIZE = 33;
      Achievement.BOSS_SIZE = 9;
      Achievement.TYPE_CHALLENGE = 0;
      Achievement.TYPE_MAP = 1;
      Achievement.TYPE_FURNITURE = 2;
      Achievement.TYPE_NPC = 3;
      Achievement.TYPE_BOSS = 4;
      Achievement.TYPE_MONSTER = 5;
      Achievement.TYPE_EQUIP = 6;
      Achievement.TYPE_ITEM = 7;
      __decorate([ property(cc.Node) ], Achievement.prototype, "content", void 0);
      __decorate([ property(cc.Prefab) ], Achievement.prototype, "prefab", void 0);
      __decorate([ property(cc.Label) ], Achievement.prototype, "lifesLabel", void 0);
      __decorate([ property(cc.Label) ], Achievement.prototype, "coinLabel", void 0);
      __decorate([ property(cc.Label) ], Achievement.prototype, "goldLabel", void 0);
      __decorate([ property(cc.Node) ], Achievement.prototype, "loadingBackground", void 0);
      __decorate([ property(AchievementItemDialog_1.default) ], Achievement.prototype, "achievementItemDialog", void 0);
      Achievement = Achievement_1 = __decorate([ ccclass ], Achievement);
      return Achievement;
    }(cc.Component);
    exports.default = Achievement;
    cc._RF.pop();
  }, {
    "./Data/EquipmentData": "EquipmentData",
    "./Data/FurnitureData": "FurnitureData",
    "./Data/ItemData": "ItemData",
    "./Data/NonPlayerData": "NonPlayerData",
    "./Logic": "Logic",
    "./Manager/InventoryManager": "InventoryManager",
    "./Manager/LoadingManager": "LoadingManager",
    "./UI/AchievementItem": "AchievementItem",
    "./UI/dialog/AchievementItemDialog": "AchievementItemDialog",
    "./Utils/AudioPlayer": "AudioPlayer",
    "./Utils/LocalStorage": "LocalStorage"
  } ],
  ActorAttackBox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5bd3A3tgpJso8uoa83DjVW", "ActorAttackBox");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FromData_1 = require("../Data/FromData");
    var Actor_1 = require("../Base/Actor");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var Utils_1 = require("../Utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ActorAttackBox = function(_super) {
      __extends(ActorAttackBox, _super);
      function ActorAttackBox() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isEnemy = false;
        _this.attackType = 0;
        _this.isAttacking = false;
        _this.hv = cc.v3(1, 0);
        _this.isSpecial = false;
        _this.isLarge = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      ActorAttackBox_1 = ActorAttackBox;
      ActorAttackBox.prototype.onLoad = function() {
        this.node.opacity = 0;
        this.collider = this.getComponent(cc.BoxCollider);
      };
      ActorAttackBox.prototype.init = function(nonPlayer, dungeon, isEnemy) {
        this.isEnemy = isEnemy;
        this.nonPlayer = nonPlayer;
        this.dungeon = dungeon;
      };
      ActorAttackBox.prototype.start = function() {};
      ActorAttackBox.prototype.show = function(attackType, isSpecial, isLarge, hv) {
        if (!this.nonPlayer) return;
        this.isLarge = isLarge;
        this.isSpecial = isSpecial;
        this.attackType = attackType;
        this.changeBoxSize(attackType);
        this.node.opacity = 80;
        this.setHv(hv);
      };
      ActorAttackBox.prototype.changeBoxSize = function(attackType) {
        var length = 80;
        var offset = cc.v2(length / 2, 0);
        this.node.anchorX = 0;
        this.node.width = this.isLarge ? 1.5 * length : length;
        this.node.height = length;
        this.node.position = cc.v3(-16, 32);
        this.collider.offset = offset;
        this.collider.size.width = this.isLarge ? 1.5 * length : length;
        this.collider.size.height = length;
        switch (attackType) {
         case ActorAttackBox_1.ATTACK_NORMAL:
          break;

         case ActorAttackBox_1.ATTACK_STAB:
          this.node.width = this.isSpecial ? 400 : 200;
          this.collider.offset = cc.v2(0, 0);
          break;

         case ActorAttackBox_1.ATTACK_AREA:
          this.node.anchorX = .5;
          length = 160;
          this.isLarge && (length = 320);
          this.node.width = length;
          this.node.height = length;
          this.node.position = cc.v3(0, 32);
          this.collider.size.width = length;
          this.collider.size.height = length;
          this.collider.offset = cc.v2(0, 0);
        }
      };
      ActorAttackBox.prototype.hide = function(isMiss) {
        this.isAttacking = !isMiss;
        this.node.opacity = 0;
      };
      ActorAttackBox.prototype.finish = function() {
        this.node.opacity = 0;
        this.isAttacking = false;
        this.isSpecial = false;
      };
      ActorAttackBox.prototype.onCollisionStay = function(other, self) {
        if (this.isAttacking && this.nonPlayer) {
          var a = other.getComponent(Actor_1.default);
          var m = this.nonPlayer;
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other, !this.isEnemy);
          if (target) {
            this.isAttacking = false;
            var from = FromData_1.default.getClone(m.data.nameCn, m.data.resName + "anim000");
            var dd = m.data.getAttackPoint();
            dd.isBackAttack = m.isFaceTargetBehind(a) && m.data.FinalCommon.damageBack > 0;
            dd.isBackAttack && (dd.realDamage += m.data.FinalCommon.damageBack);
            dd.isMelee = true;
            this.isSpecial && (dd.physicalDamage = 2 * dd.physicalDamage);
            a.takeDamage(dd, from, this.nonPlayer) && m.addPlayerStatus(a, from);
            this.isSpecial = false;
          }
        }
      };
      ActorAttackBox.prototype.setHv = function(hv) {
        this.hv = hv;
        this.rotateCollider(cc.v2(this.hv));
      };
      ActorAttackBox.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .02) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      ActorAttackBox.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        this.node.angle = Utils_1.default.getRotateAngle(direction, this.node.scaleX < 0);
      };
      var ActorAttackBox_1;
      ActorAttackBox.ATTACK_NORMAL = 0;
      ActorAttackBox.ATTACK_STAB = 1;
      ActorAttackBox.ATTACK_AREA = 2;
      ActorAttackBox = ActorAttackBox_1 = __decorate([ ccclass ], ActorAttackBox);
      return ActorAttackBox;
    }(cc.Component);
    exports.default = ActorAttackBox;
    cc._RF.pop();
  }, {
    "../Base/Actor": "Actor",
    "../Data/FromData": "FromData",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/Utils": "Utils"
  } ],
  ActorUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01700dV3iVC1p7rezKVnsyV", "ActorUtils");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var Actor_1 = require("../Base/Actor");
    var Boss_1 = require("../Boss/Boss");
    var Logic_1 = require("../Logic");
    var NonPlayer_1 = require("../NonPlayer");
    var Player_1 = require("../Player");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ActorUtils = function() {
      function ActorUtils() {}
      ActorUtils_1 = ActorUtils;
      ActorUtils.getEnemyCollisionTarget = function(other, isPlayer) {
        if (isPlayer) {
          if (other.tag == ColliderTag_1.ColliderTag.NONPLAYER || other.tag == ColliderTag_1.ColliderTag.BOSS) return other.node.getComponent(Actor_1.default);
        } else if (other.tag == ColliderTag_1.ColliderTag.PLAYER || other.tag == ColliderTag_1.ColliderTag.GOODNONPLAYER) return other.node.getComponent(Actor_1.default);
        return null;
      };
      ActorUtils.getEnemyActorByNode = function(other, isPlayer) {
        if (isPlayer) {
          var non = other.getComponent(NonPlayer_1.default);
          if (non && non.data.isEnemy > 0) return non;
          var boss = other.getComponent(Boss_1.default);
          if (boss) return boss;
        } else {
          var player = other.getComponent(Player_1.default);
          if (player) return player;
          var non = other.getComponent(NonPlayer_1.default);
          if (non && non.data.isEnemy < 1) return non;
        }
        return null;
      };
      ActorUtils.getPlayerPosition = function(selfPosition, dungeon, distance) {
        return ActorUtils_1.getNearestTargetPosition(selfPosition, [ Actor_1.default.TARGET_PLAYER ], dungeon, true, distance);
      };
      ActorUtils.getDirectionFromNearestEnemy = function(selfPosition, selfIsEnemy, dungeon, needRandom, distance) {
        var pos = ActorUtils_1.getNearestTargetPosition(selfPosition, selfIsEnemy ? [ Actor_1.default.TARGET_PLAYER, Actor_1.default.TARGET_NONPLAYER ] : [ Actor_1.default.TARGET_MONSTER, Actor_1.default.TARGET_NONPLAYER_ENEMY, Actor_1.default.TARGET_BOSS ], dungeon, needRandom, distance);
        return pos.equals(cc.Vec3.ZERO) ? cc.Vec3.ZERO : pos.subtract(selfPosition).normalize();
      };
      ActorUtils.getNearestEnemyPosition = function(selfPosition, selfIsEnemy, dungeon, needRandom, distance) {
        return ActorUtils_1.getNearestTargetPosition(selfPosition, selfIsEnemy ? [ Actor_1.default.TARGET_PLAYER, Actor_1.default.TARGET_NONPLAYER ] : [ Actor_1.default.TARGET_MONSTER, Actor_1.default.TARGET_NONPLAYER_ENEMY, Actor_1.default.TARGET_BOSS ], dungeon, needRandom, distance);
      };
      ActorUtils.getNearestTargetPosition = function(selfPosition, targetTypes, dungeon, needRandom, distance) {
        var targetActor = ActorUtils_1.getNearestTargetActor(selfPosition, targetTypes, dungeon, distance || 999999);
        if (targetActor) return targetActor.getCenterPosition();
        if (needRandom) return selfPosition.clone().addSelf(cc.v3(Logic_1.default.getRandomNum(0, 600) - 300, Logic_1.default.getRandomNum(0, 600) - 300));
        return cc.Vec3.ZERO;
      };
      ActorUtils.getNearestEnemyActor = function(selfPosition, selfIsEnemy, dungeon) {
        return ActorUtils_1.getNearestTargetActor(selfPosition, selfIsEnemy ? [ Actor_1.default.TARGET_PLAYER, Actor_1.default.TARGET_NONPLAYER ] : [ Actor_1.default.TARGET_MONSTER, Actor_1.default.TARGET_NONPLAYER_ENEMY, Actor_1.default.TARGET_BOSS ], dungeon);
      };
      ActorUtils.getNearestTargetActor = function(selfPosition, targetTypes, dungeon, distance) {
        if (!dungeon) return null;
        var shortdis = distance || 999999;
        var targetActor;
        var targetList = [];
        for (var _i = 0, targetTypes_1 = targetTypes; _i < targetTypes_1.length; _i++) {
          var targetType = targetTypes_1[_i];
          if (targetType == Actor_1.default.TARGET_PLAYER) targetList.push(dungeon.player); else if (targetType == Actor_1.default.TARGET_MONSTER) targetList = targetList.concat(dungeon.monsterManager.monsterList); else if (targetType == Actor_1.default.TARGET_BOSS) targetList = targetList.concat(dungeon.monsterManager.bossList); else if (targetType == Actor_1.default.TARGET_NONPLAYER) for (var _a = 0, _b = dungeon.nonPlayerManager.nonPlayerList; _a < _b.length; _a++) {
            var non = _b[_a];
            non.data.isEnemy < 1 && targetList.push(non);
          } else if (targetType == Actor_1.default.TARGET_NONPLAYER_ENEMY) for (var _c = 0, _d = dungeon.nonPlayerManager.nonPlayerList; _c < _d.length; _c++) {
            var non = _d[_c];
            non.data.isEnemy > 0 && targetList.push(non);
          }
        }
        for (var _e = 0, targetList_1 = targetList; _e < targetList_1.length; _e++) {
          var target = targetList_1[_e];
          if (this.isTargetCanTrack(target)) {
            var dis = Logic_1.default.getDistanceNoSqrt(selfPosition, target.getCenterPosition());
            if (dis < shortdis) {
              shortdis = dis;
              targetActor = target;
            }
          }
        }
        if (targetActor) return targetActor;
        return null;
      };
      ActorUtils.getTargetDistance = function(actor, target) {
        if (!target) return 999999;
        var dis = Logic_1.default.getDistanceNoSqrt(actor.node.position, target.node.position);
        return dis;
      };
      ActorUtils.isTargetAlive = function(target) {
        if (!target || target.invisible || target.sc.isDied || !target.sc.isShow) return false;
        return true;
      };
      ActorUtils.isTargetCanTrack = function(target) {
        if (target.isValid && !target.sc.isDied && target.sc.isShow && !target.sc.isJumping) return true;
        return false;
      };
      var ActorUtils_1;
      ActorUtils = ActorUtils_1 = __decorate([ ccclass ], ActorUtils);
      return ActorUtils;
    }();
    exports.default = ActorUtils;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Base/Actor": "Actor",
    "../Boss/Boss": "Boss",
    "../Logic": "Logic",
    "../NonPlayer": "NonPlayer",
    "../Player": "Player"
  } ],
  Actor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1527FzjXVGUp0qJt0LJYgx", "Actor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StateContext_1 = require("./StateContext");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Actor = function(_super) {
      __extends(Actor, _super);
      function Actor() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.invisible = false;
        _this.isFaceRight = true;
        _this.isFaceUp = true;
        _this.lights = [];
        _this.sc = new StateContext_1.default();
        _this.seed = 0;
        return _this;
      }
      Actor.TARGET_PLAYER = 0;
      Actor.TARGET_MONSTER = 1;
      Actor.TARGET_BOSS = 2;
      Actor.TARGET_NONPLAYER = 3;
      Actor.TARGET_NONPLAYER_ENEMY = 4;
      Actor = __decorate([ ccclass ], Actor);
      return Actor;
    }(cc.Component);
    exports.default = Actor;
    cc._RF.pop();
  }, {
    "./StateContext": "StateContext"
  } ],
  AirExit: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "091edkNmgRCZq+fEAizpd4W", "AirExit");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Player_1 = require("../Player");
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../Utils/IndexZ");
    var Dungeon_1 = require("../Dungeon");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AirExit = function(_super) {
      __extends(AirExit, _super);
      function AirExit() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        _this.dir = 0;
        _this.status = AirExit_1.STATUS_CLOSE;
        _this.sprite = null;
        return _this;
      }
      AirExit_1 = AirExit;
      AirExit.prototype.onLoad = function() {
        this.sprite = this.getComponent(cc.Sprite);
        this.collider = this.getComponent(cc.PhysicsBoxCollider);
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      AirExit.prototype.init = function(dir, length) {
        this.dir = dir;
        switch (dir) {
         case 0:
          break;

         case 1:
          this.node.scaleY = -8;
          break;

         case 2:
          this.node.angle = 90;
          break;

         case 3:
          this.node.angle = 90;
          this.node.scaleY = -8;
        }
        this.node.opacity = 60;
        this.node.width = Dungeon_1.default.TILE_SIZE / 8 * length;
        this.collider || (this.collider = this.getComponent(cc.PhysicsBoxCollider));
        this.getComponent(cc.BoxCollider).size = cc.size(this.node.width, this.node.height);
        this.collider.size = cc.size(this.node.width, this.node.height);
        this.collider.apply();
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
        this.changeStatus(AirExit_1.STATUS_CLOSE);
      };
      AirExit.prototype.changeStatus = function(status) {
        this.status = status;
        var resName = "";
        switch (this.status) {
         case AirExit_1.STATUS_CLOSE:
          resName = "outertips3";
          break;

         case AirExit_1.STATUS_WAIT:
          resName = "outertips2";
          break;

         case AirExit_1.STATUS_OPEN:
          resName = "outertips1";
        }
        if (this.status == AirExit_1.STATUS_OPEN) {
          if (!this.collider.sensor) {
            this.collider.sensor = true;
            this.collider.apply();
          }
        } else if (this.collider.sensor) {
          this.collider.sensor = false;
          this.collider.apply();
        }
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
      };
      AirExit.prototype.start = function() {};
      AirExit.prototype.onCollisionEnter = function(other, self) {
        var _this = this;
        if (other.tag == ColliderTag_1.ColliderTag.PLAYER) {
          var player_1 = other.node.getComponent(Player_1.default);
          player_1 && this.status == AirExit_1.STATUS_OPEN && this.scheduleOnce(function() {
            Logic_1.default.playerData = player_1.data.clone();
            Logic_1.default.loadingNextRoom(_this.dir);
          }, .1);
        }
      };
      var AirExit_1;
      AirExit.STATUS_CLOSE = 0;
      AirExit.STATUS_WAIT = 1;
      AirExit.STATUS_OPEN = 2;
      AirExit = AirExit_1 = __decorate([ ccclass ], AirExit);
      return AirExit;
    }(Building_1.default);
    exports.default = AirExit;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../Player": "Player",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  AreaDetector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "77810+lX7JF67u57+eViJLm", "AreaDetector");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Bullet_1 = require("../Item/Bullet");
    var NonPlayer_1 = require("../NonPlayer");
    var NextStep_1 = require("../Utils/NextStep");
    var Random_1 = require("../Utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AreaDetector = function(_super) {
      __extends(AreaDetector, _super);
      function AreaDetector() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.step = new NextStep_1.default();
        return _this;
      }
      AreaDetector.prototype.start = function() {};
      AreaDetector.prototype.onCollisionEnter = function(other, self) {
        var _this = this;
        this.step.next(function() {
          var bullet = other.getComponent(Bullet_1.default);
          var monster = _this.node.parent.getComponent(NonPlayer_1.default);
          if (bullet && (bullet.isFromPlayer && monster.data.isEnemy > 0 || !bullet.isFromPlayer && monster.data.isEnemy < 1)) {
            var pos = _this.getRoate90Point(bullet.node.position, monster.node.position, Random_1.default.getHalfChance());
            pos = pos.sub(monster.node.position);
            monster.dodge(pos);
          }
        }, 3);
      };
      AreaDetector.prototype.getRoate90Point = function(posA, posB, reverse) {
        return reverse ? cc.v3(posB.x + posA.y - posB.y, posB.y - posA.x + posB.x) : cc.v3(posB.x - posA.y + posB.y, posB.y + posA.x - posB.x);
      };
      AreaDetector = __decorate([ ccclass ], AreaDetector);
      return AreaDetector;
    }(cc.Component);
    exports.default = AreaDetector;
    cc._RF.pop();
  }, {
    "../Item/Bullet": "Bullet",
    "../NonPlayer": "NonPlayer",
    "../Utils/NextStep": "NextStep",
    "../Utils/Random": "Random"
  } ],
  AreaOfEffectData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33991eUauZNwoZkS4LCMfg4", "AreaOfEffectData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IndexZ_1 = require("../Utils/IndexZ");
    var DamageData_1 = require("./DamageData");
    var FromData_1 = require("./FromData");
    var AreaOfEffectData = function() {
      function AreaOfEffectData() {
        this.duration = 0;
        this.interval = .1;
        this.delay = 0;
        this.scale = 0;
        this.zIndex = IndexZ_1.default.ACTOR;
        this.isRotate = false;
        this.isFromEnemy = false;
        this.canBreakBuilding = false;
        this.canBreakBullet = false;
        this.canBeatBack = false;
        this.damage = new DamageData_1.default();
        this.from = new FromData_1.default();
        this.statusList = [];
      }
      AreaOfEffectData.prototype.init = function(duration, interval, delay, scale, zIndex, isFromEnemy, canBreakBuilding, canBreakBullet, canBeatBack, isRotate, damage, from, statusList) {
        this.duration = duration;
        this.delay = delay;
        this.interval = interval;
        this.scale = scale;
        this.zIndex = zIndex;
        this.isFromEnemy = isFromEnemy;
        this.canBreakBuilding = canBreakBuilding;
        this.canBreakBullet = canBreakBullet;
        this.canBeatBack = canBeatBack;
        this.isRotate = isRotate;
        this.damage = damage;
        this.from = from;
        this.statusList = statusList;
        return this;
      };
      AreaOfEffectData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.duration = data.duration ? data.duration : 0;
        this.interval = data.interval ? data.interval : .1;
        this.delay = data.delay ? data.delay : 0;
        this.scale = data.scale ? data.scale : 0;
        this.zIndex = data.zIndex ? data.zIndex : IndexZ_1.default.ACTOR;
        this.isFromEnemy = !!data.isFromEnemy && data.isFromEnemy;
        this.canBreakBuilding = !!data.canBreakBuilding && data.canBreakBuilding;
        this.canBreakBullet = !!data.canBreakBullet && data.canBreakBullet;
        this.isRotate = !!data.isRotate && data.isRotate;
        this.canBeatBack = !!data.canBeatBack && data.canBeatBack;
        this.statusList = data.statusList ? data.statusList : [];
        this.damage.valueCopy(data.damage);
        this.from.valueCopy(data.from);
      };
      AreaOfEffectData.prototype.clone = function() {
        var e = new AreaOfEffectData();
        e.duration = this.duration;
        e.interval = this.interval;
        e.delay = this.delay;
        e.scale = this.scale;
        e.isFromEnemy = this.isFromEnemy;
        e.canBreakBuilding = this.canBreakBuilding;
        e.canBreakBullet = this.canBreakBullet;
        e.canBeatBack = this.canBeatBack;
        e.damage = this.damage.clone();
        e.from = this.from.clone();
        e.statusList = this.statusList;
        e.zIndex = this.zIndex;
        e.isRotate = this.isRotate;
        return e;
      };
      return AreaOfEffectData;
    }();
    exports.default = AreaOfEffectData;
    cc._RF.pop();
  }, {
    "../Utils/IndexZ": "IndexZ",
    "./DamageData": "DamageData",
    "./FromData": "FromData"
  } ],
  AreaOfEffect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a73blWLNVEw7zhXpbo521b", "AreaOfEffect");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("../Boss/Boss");
    var DamageData_1 = require("../Data/DamageData");
    var IndexZ_1 = require("../Utils/IndexZ");
    var HitBuilding_1 = require("../Building/HitBuilding");
    var AreaOfEffectData_1 = require("../Data/AreaOfEffectData");
    var ColliderTag_1 = require("./ColliderTag");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var InteractBuilding_1 = require("../Building/InteractBuilding");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AreaOfEffect = function(_super) {
      __extends(AreaOfEffect, _super);
      function AreaOfEffect() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hasTargetMap = {};
        _this.isAttacking = false;
        _this.data = new AreaOfEffectData_1.default();
        _this.usePool = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Object.defineProperty(AreaOfEffect.prototype, "IsAttacking", {
        get: function() {
          return this.isAttacking;
        },
        enumerable: false,
        configurable: true
      });
      AreaOfEffect.prototype.onLoad = function() {};
      AreaOfEffect.prototype.onEnable = function() {
        this.hasTargetMap = {};
        this.isAttacking = false;
      };
      AreaOfEffect.prototype.start = function() {};
      AreaOfEffect.prototype.AnimFinish = function() {
        this.close();
      };
      AreaOfEffect.prototype.close = function() {
        var _this = this;
        this.scheduleOnce(function() {
          _this.node && _this.node.isValid && !_this.usePool && _this.node.destroy();
          _this.destoryCallBack && _this.usePool && _this.destoryCallBack(_this.node);
        }, 1);
        this.isAttacking = false;
      };
      AreaOfEffect.prototype.show = function(parentNode, postion, hv, angleOffset, data, killCallBack, usePool, destoryCallBack) {
        var _this = this;
        this.data.valueCopy(data);
        this.node.active = true;
        this.node.parent = parentNode;
        this.usePool = usePool;
        this.isAttacking = true;
        this.killCallBack = killCallBack;
        this.destoryCallBack = destoryCallBack;
        this.node.setPosition(postion);
        if (this.data.scale > 0) {
          this.node.scale = this.data.scale;
          this.node.scaleX = this.node.scaleX > 0 ? this.data.scale : -this.data.scale;
          this.node.scaleY = this.node.scaleY > 0 ? this.data.scale : -this.data.scale;
        }
        if (this.data.isRotate) {
          var direction = this.getHv(hv, angleOffset);
          var angle = cc.v2(direction.x, direction.y).signAngle(cc.v2(1, 0));
          var degree = cc.misc.radiansToDegrees(angle);
          this.node.angle = 360 - degree;
        }
        this.node.zIndex = this.data.zIndex ? this.data.zIndex : IndexZ_1.default.ACTOR;
        this.scheduleOnce(function() {
          _this.isAttacking = true;
        }, this.data.delay);
        this.data.duration > 0 && this.scheduleOnce(function() {
          _this.close();
        }, this.data.duration);
        var anim = this.getComponent(cc.Animation);
        anim && !anim.playOnLoad && anim.play();
      };
      AreaOfEffect.prototype.getHv = function(hv, angleOffset) {
        var pos = cc.v3(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180));
        return pos.normalizeSelf();
      };
      AreaOfEffect.prototype.onCollisionStay = function(other, self) {
        if (self.isValid && this.isAttacking) if (this.hasTargetMap[other.node.uuid] && this.hasTargetMap[other.node.uuid] > 0) this.hasTargetMap[other.node.uuid]++; else {
          this.hasTargetMap[other.node.uuid] = 1;
          var isAttack = true;
          this.data.isFromEnemy || other.tag != ColliderTag_1.ColliderTag.GOODNONPLAYER && other.tag != ColliderTag_1.ColliderTag.PLAYER || (isAttack = false);
          !this.data.isFromEnemy || other.tag != ColliderTag_1.ColliderTag.NONPLAYER && other.tag != ColliderTag_1.ColliderTag.BOSS || (isAttack = false);
          isAttack && this.attacking(other.node, other.tag);
        }
      };
      AreaOfEffect.prototype.attacking = function(attackTarget, tag) {
        if (!attackTarget) return;
        var damage = new DamageData_1.default();
        damage.valueCopy(this.data.damage);
        damage.isRemote = true;
        if (tag == ColliderTag_1.ColliderTag.PLAYER || tag == ColliderTag_1.ColliderTag.NONPLAYER || tag == ColliderTag_1.ColliderTag.GOODNONPLAYER || tag == ColliderTag_1.ColliderTag.BOSS) {
          var normal = attackTarget.convertToWorldSpaceAR(cc.Vec3.ZERO).subSelf(this.node.convertToWorldSpaceAR(cc.Vec3.ZERO)).normalizeSelf();
          var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget, !this.data.isFromEnemy);
          if (target && !target.sc.isDied) {
            var damageSuccess = target.takeDamage(damage, this.data.from);
            if (damageSuccess) {
              target.data.currentHealth <= 0 && this.killCallBack && this.killCallBack(target);
              this.data.canBeatBack && !target.getComponent(Boss_1.default) && this.beatBack(target, normal);
            }
            for (var _i = 0, _a = this.data.statusList; _i < _a.length; _i++) {
              var status = _a[_i];
              target.addStatus(status, this.data.from);
            }
          }
        } else if (tag == ColliderTag_1.ColliderTag.BUILDING) {
          var interactBuilding = attackTarget.getComponent(InteractBuilding_1.default);
          if (this.data.canBreakBuilding && interactBuilding) {
            interactBuilding.takeDamage(damage);
            return;
          }
          var hitBuilding = attackTarget.getComponent(HitBuilding_1.default);
          this.data.canBreakBuilding && hitBuilding && hitBuilding.takeDamage(damage);
        }
      };
      AreaOfEffect.prototype.beatBack = function(actor, hv) {
        var rigidBody = actor.getComponent(cc.RigidBody);
        var pos = hv.clone();
        pos.equals(cc.Vec3.ZERO) && (pos = cc.v3(1, 0));
        var power = 100;
        pos = pos.normalizeSelf().mul(power);
        this.scheduleOnce(function() {
          rigidBody.linearVelocity = cc.Vec2.ZERO;
          rigidBody.applyLinearImpulse(cc.v2(pos.x, pos.y), rigidBody.getLocalCenter(), true);
        }, .1);
      };
      AreaOfEffect.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > this.data.interval) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      AreaOfEffect.prototype.update = function(dt) {
        this.isCheckTimeDelay(dt) && (this.hasTargetMap = {});
      };
      AreaOfEffect = __decorate([ ccclass ], AreaOfEffect);
      return AreaOfEffect;
    }(cc.Component);
    exports.default = AreaOfEffect;
    cc._RF.pop();
  }, {
    "../Boss/Boss": "Boss",
    "../Building/HitBuilding": "HitBuilding",
    "../Building/InteractBuilding": "InteractBuilding",
    "../Data/AreaOfEffectData": "AreaOfEffectData",
    "../Data/DamageData": "DamageData",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/IndexZ": "IndexZ",
    "./ColliderTag": "ColliderTag"
  } ],
  AttributeData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3df7eU5e+9JzoOx3mUEhHmJ", "AttributeData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AttributeData = function() {
      function AttributeData(id, name, resName, desc, name1, desc1) {
        this.name = "";
        this.id = 0;
        this.resName = "";
        this.desc = "";
        this.name1 = "";
        this.desc1 = "";
        this.id = id;
        this.name = name;
        this.resName = resName;
        this.desc = desc;
        this.desc1 = desc1;
        this.name1 = name1;
      }
      return AttributeData;
    }();
    exports.default = AttributeData;
    cc._RF.pop();
  }, {} ],
  AttributeSelector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ba37UErLJKsamr/CQR4tOg", "AttributeSelector");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AttributeSelector = function(_super) {
      __extends(AttributeSelector, _super);
      function AttributeSelector() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.arrowLeft = null;
        _this.arrowRight = null;
        _this.label = null;
        _this.title = null;
        _this.nameList = [];
        _this.currentIndex = 0;
        return _this;
      }
      AttributeSelector.prototype.onLoad = function() {
        var _this = this;
        this.arrowLeft.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.currentIndex--;
          _this.updateAttribute();
        });
        this.arrowRight.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.currentIndex++;
          _this.updateAttribute();
        });
      };
      AttributeSelector.prototype.selectRandom = function() {
        this.currentIndex = Logic_1.default.getRandomNum(0, this.nameList.length - 1);
        this.updateAttribute();
      };
      AttributeSelector.prototype.selectNext = function(isLeft) {
        isLeft ? this.currentIndex-- : this.currentIndex++;
        this.updateAttribute();
      };
      AttributeSelector.prototype.init = function(title, nameList, defaultIndex) {
        this.title.string = title;
        this.nameList = nameList;
        this.currentIndex = defaultIndex || 0;
        this.updateAttribute();
      };
      AttributeSelector.prototype.updateAttribute = function() {
        this.currentIndex < 0 ? this.currentIndex = this.nameList.length - 1 : this.currentIndex > this.nameList.length - 1 && (this.currentIndex = 0);
        this.label.string = this.nameList[this.currentIndex].name;
        this.selectorCallback && this.selectorCallback(this.nameList[this.currentIndex]);
      };
      Object.defineProperty(AttributeSelector.prototype, "CurrentData", {
        get: function() {
          return this.nameList[this.currentIndex];
        },
        enumerable: false,
        configurable: true
      });
      __decorate([ property(cc.Node) ], AttributeSelector.prototype, "arrowLeft", void 0);
      __decorate([ property(cc.Node) ], AttributeSelector.prototype, "arrowRight", void 0);
      __decorate([ property(cc.Label) ], AttributeSelector.prototype, "label", void 0);
      __decorate([ property(cc.Label) ], AttributeSelector.prototype, "title", void 0);
      AttributeSelector = __decorate([ ccclass ], AttributeSelector);
      return AttributeSelector;
    }(cc.Component);
    exports.default = AttributeSelector;
    cc._RF.pop();
  }, {
    "../Logic": "Logic"
  } ],
  AudioPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "76c8da4ThVB/L/QkXaZyrPc", "AudioPlayer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AudioPlayer = function(_super) {
      __extends(AudioPlayer, _super);
      function AudioPlayer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.monsterHit = null;
        _this.monsterHit1 = null;
        _this.monsterHit2 = null;
        _this.pickUp = null;
        _this.playerHit = null;
        _this.remoteLaser = null;
        _this.shoot = null;
        _this.coin = null;
        _this.boom = null;
        _this.dash = null;
        _this.die = null;
        _this.exit = null;
        _this.pickItem = null;
        _this.melee = null;
        _this.walk = null;
        _this.blink = null;
        _this.select = null;
        _this.selectfail = null;
        _this.bossicedemonattack = null;
        _this.meleereflect = null;
        _this.raindrop = null;
        _this.skillfireball = null;
        _this.skillicethron = null;
        _this.skillmagicball = null;
        _this.skillmagicball1 = null;
        _this.bossicedemondash = null;
        _this.bossicedemondefend = null;
        _this.bossicedemonhit = null;
        _this.bossicedemonthron = null;
        _this.wentlineopen = null;
        _this.wentlineshow = null;
        _this.zombieattack = null;
        _this.zombiespitting = null;
        _this.swordshow = null;
        _this.electricattack = null;
        _this.punch = null;
        _this.punch1 = null;
        _this.punch2 = null;
        _this.fist = null;
        _this.fist1 = null;
        _this.fist2 = null;
        _this.swordattack = null;
        _this.swordattack1 = null;
        _this.swordattack2 = null;
        _this.swordhit = null;
        _this.swordhit1 = null;
        _this.swordhit2 = null;
        _this.bleeding = null;
        _this.cashiering = null;
        _this.chicken = null;
        _this.closestool = null;
        _this.fireball = null;
        _this.mutant = null;
        _this.reload = null;
        _this.scarabcrawl = null;
        _this.shoot001 = null;
        _this.shoot002 = null;
        _this.shoot003 = null;
        _this.shoot004 = null;
        _this.takephoto = null;
        _this.transportship = null;
        _this.tvcolor = null;
        _this.tvwhite = null;
        _this.welcome = null;
        _this.iceboom = null;
        _this.levelup = null;
        _this.complete = null;
        _this.oilgold = null;
        _this.dog = null;
        _this.feedfish = null;
        _this.fishtank = null;
        _this.cat = null;
        _this.bg01 = null;
        _this.bg02 = null;
        _this.lastName = "";
        _this.isSoundNeedPause = false;
        _this.audioList = {};
        _this.lastBgmIndex = -1;
        return _this;
      }
      AudioPlayer_1 = AudioPlayer;
      AudioPlayer.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAY_AUDIO, function(detail) {
          _this.playSound(detail.name, detail.bgm, detail.loop);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.STOP_ALL_AUDIO_EFFECT, function(detail) {
          _this.stopAllEffect();
        });
        cc.audioEngine.setMusicVolume(.2);
        cc.audioEngine.setEffectsVolume(.4);
        this.audioList[AudioPlayer_1.MONSTER_HIT] = this.monsterHit;
        this.audioList[AudioPlayer_1.MONSTER_HIT1] = this.monsterHit1;
        this.audioList[AudioPlayer_1.MONSTER_HIT2] = this.monsterHit2;
        this.audioList[AudioPlayer_1.PICK_UP] = this.pickUp;
        this.audioList[AudioPlayer_1.PLAYER_HIT] = this.playerHit;
        this.audioList[AudioPlayer_1.REMOTE_LASER] = this.remoteLaser;
        this.audioList[AudioPlayer_1.SHOOT] = this.shoot;
        this.audioList[AudioPlayer_1.BOOM] = this.boom;
        this.audioList[AudioPlayer_1.COIN] = this.coin;
        this.audioList[AudioPlayer_1.MELEE] = this.melee;
        this.audioList[AudioPlayer_1.WALK] = this.walk;
        this.audioList[AudioPlayer_1.EXIT] = this.exit;
        this.audioList[AudioPlayer_1.DASH] = this.dash;
        this.audioList[AudioPlayer_1.DIE] = this.die;
        this.audioList[AudioPlayer_1.PICK_ITEM] = this.pickItem;
        this.audioList[AudioPlayer_1.SELECT] = this.select;
        this.audioList[AudioPlayer_1.SELECT_FAIL] = this.selectfail;
        this.audioList[AudioPlayer_1.BLINK] = this.blink;
        this.audioList[AudioPlayer_1.BOSS_ICEDEMON_DASH] = this.bossicedemondash;
        this.audioList[AudioPlayer_1.BOSS_ICEDEMON_DEFEND] = this.bossicedemondefend;
        this.audioList[AudioPlayer_1.BOSS_ICEDEMON_HIT] = this.bossicedemonhit;
        this.audioList[AudioPlayer_1.BOSS_ICEDEMON_THRON] = this.bossicedemonthron;
        this.audioList[AudioPlayer_1.BOOS_ICEDEMON_ATTACK] = this.bossicedemonattack;
        this.audioList[AudioPlayer_1.MELEE_PARRY] = this.meleereflect;
        this.audioList[AudioPlayer_1.RAINDROP] = this.raindrop;
        this.audioList[AudioPlayer_1.SKILL_FIREBALL] = this.skillfireball;
        this.audioList[AudioPlayer_1.SKILL_ICETHRON] = this.skillicethron;
        this.audioList[AudioPlayer_1.SKILL_MAGICBALL] = this.skillmagicball;
        this.audioList[AudioPlayer_1.SKILL_MAGICBALL1] = this.skillmagicball1;
        this.audioList[AudioPlayer_1.WENTLINE_OPEN] = this.wentlineopen;
        this.audioList[AudioPlayer_1.WENTLINE_SHOW] = this.wentlineshow;
        this.audioList[AudioPlayer_1.ZOMBIE_ATTACK] = this.zombieattack;
        this.audioList[AudioPlayer_1.ZOMBIE_SPITTING] = this.zombiespitting;
        this.audioList[AudioPlayer_1.SWORD_SHOW] = this.swordshow;
        this.audioList[AudioPlayer_1.ELECTRIC_ATTACK] = this.electricattack;
        this.audioList[AudioPlayer_1.PUNCH] = this.punch;
        this.audioList[AudioPlayer_1.PUNCH1] = this.punch1;
        this.audioList[AudioPlayer_1.PUNCH2] = this.punch2;
        this.audioList[AudioPlayer_1.SWORD_ATTACK] = this.swordattack;
        this.audioList[AudioPlayer_1.SWORD_ATTACK1] = this.swordattack1;
        this.audioList[AudioPlayer_1.SWORD_ATTACK2] = this.swordattack2;
        this.audioList[AudioPlayer_1.SWORD_HIT] = this.swordhit;
        this.audioList[AudioPlayer_1.SWORD_HIT1] = this.swordhit1;
        this.audioList[AudioPlayer_1.SWORD_HIT2] = this.swordhit2;
        this.audioList[AudioPlayer_1.FIST] = this.fist;
        this.audioList[AudioPlayer_1.FIST1] = this.fist1;
        this.audioList[AudioPlayer_1.FIST2] = this.fist2;
        this.audioList[AudioPlayer_1.BLEEDING] = this.bleeding;
        this.audioList[AudioPlayer_1.CASHIERING] = this.cashiering;
        this.audioList[AudioPlayer_1.CHICKEN] = this.chicken;
        this.audioList[AudioPlayer_1.CLOSESTOOL] = this.closestool;
        this.audioList[AudioPlayer_1.FIREBALL] = this.fireball;
        this.audioList[AudioPlayer_1.MUTANT] = this.mutant;
        this.audioList[AudioPlayer_1.RELOAD] = this.reload;
        this.audioList[AudioPlayer_1.SCARABCRAWL] = this.scarabcrawl;
        this.audioList[AudioPlayer_1.SHOOT001] = this.shoot001;
        this.audioList[AudioPlayer_1.SHOOT002] = this.shoot002;
        this.audioList[AudioPlayer_1.SHOOT003] = this.shoot003;
        this.audioList[AudioPlayer_1.SHOOT004] = this.shoot004;
        this.audioList[AudioPlayer_1.TAKEPHOTO] = this.takephoto;
        this.audioList[AudioPlayer_1.TRANSPORTSHIP] = this.transportship;
        this.audioList[AudioPlayer_1.TVCOLOR] = this.tvcolor;
        this.audioList[AudioPlayer_1.TVWHITE] = this.tvwhite;
        this.audioList[AudioPlayer_1.WELCOME] = this.welcome;
        this.audioList[AudioPlayer_1.ICEBOOM] = this.iceboom;
        this.audioList[AudioPlayer_1.LEVELUP] = this.levelup;
        this.audioList[AudioPlayer_1.COMPLETE] = this.complete;
        this.audioList[AudioPlayer_1.OILGOLD] = this.oilgold;
        this.audioList[AudioPlayer_1.DOG] = this.dog;
        this.audioList[AudioPlayer_1.FEED_FISH] = this.feedfish;
        this.audioList[AudioPlayer_1.FISHTANK] = this.fishtank;
        this.audioList[AudioPlayer_1.CAT] = this.cat;
      };
      AudioPlayer.prototype.playbg = function() {
        var bgms = [ this.bg01, this.bg02 ];
        var clip = bgms[Logic_1.default.lastBgmIndex];
        if (clip && (!cc.audioEngine.isMusicPlaying() || this.lastBgmIndex != Logic_1.default.lastBgmIndex)) {
          cc.audioEngine.stopMusic();
          cc.audioEngine.playMusic(clip, true);
          this.lastBgmIndex = Logic_1.default.lastBgmIndex;
        }
      };
      AudioPlayer.prototype.stopAllEffect = function() {
        cc.audioEngine.stopAllEffects();
      };
      AudioPlayer.prototype.playSound = function(name, isBgm, loop) {
        var _this = this;
        if (name == this.lastName && name == AudioPlayer_1.COIN && this.isSoundNeedPause) return;
        if (isBgm) switch (name) {
         case AudioPlayer_1.STOP_BG:
          cc.audioEngine.stopMusic();
          break;

         case AudioPlayer_1.PLAY_BG:
          this.playbg();
        } else this.audioList[name] && cc.audioEngine.playEffect(this.audioList[name], loop);
        this.lastName = name;
        this.isSoundNeedPause = false;
        if (name == AudioPlayer_1.COIN) {
          this.isSoundNeedPause = true;
          this.scheduleOnce(function() {
            _this.isSoundNeedPause = false;
          }, .05);
        }
      };
      AudioPlayer.play = function(audioName, bgm, loop) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
          name: audioName,
          bgm: bgm,
          loop: loop
        });
      };
      AudioPlayer.stopAllEffect = function() {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.STOP_ALL_AUDIO_EFFECT, {});
      };
      var AudioPlayer_1;
      AudioPlayer.MONSTER_HIT = "MONSTER_HIT";
      AudioPlayer.MONSTER_HIT1 = "MONSTER_HIT1";
      AudioPlayer.MONSTER_HIT2 = "MONSTER_HIT2";
      AudioPlayer.PICK_UP = "PICK_UP";
      AudioPlayer.PLAYER_HIT = "PLAYER_HIT";
      AudioPlayer.REMOTE_LASER = "REMOTE_LASER";
      AudioPlayer.SHOOT = "SHOOT";
      AudioPlayer.BOOM = "BOOM";
      AudioPlayer.COIN = "COIN";
      AudioPlayer.MELEE = "MELEE";
      AudioPlayer.WALK = "WALK";
      AudioPlayer.DASH = "DASH";
      AudioPlayer.DIE = "DIE";
      AudioPlayer.PICK_ITEM = "PICK_ITEM";
      AudioPlayer.EXIT = "EXIT";
      AudioPlayer.STOP_BG = "STOP_BG";
      AudioPlayer.PLAY_BG = "PLAY_BG";
      AudioPlayer.SELECT = "SELECT";
      AudioPlayer.SELECT_FAIL = "SELECT_FAIL";
      AudioPlayer.BLINK = "BLINK";
      AudioPlayer.BOSS_ICEDEMON_DASH = "BOSS_ICEDEMON_DASH";
      AudioPlayer.BOSS_ICEDEMON_DEFEND = "BOSS_ICEDEMON_DEFEND";
      AudioPlayer.BOSS_ICEDEMON_HIT = "BOSS_ICEDEMON_HIT";
      AudioPlayer.BOSS_ICEDEMON_THRON = "BOSS_ICEDEMON_THRON";
      AudioPlayer.BOOS_ICEDEMON_ATTACK = "BOOS_ICEDEMON_ATTACK";
      AudioPlayer.MELEE_PARRY = "MELEE_PARRY";
      AudioPlayer.RAINDROP = "RAINDROP";
      AudioPlayer.SKILL_FIREBALL = "SKILL_FIREBALL";
      AudioPlayer.SKILL_ICETHRON = "SKILL_ICETHRON";
      AudioPlayer.SKILL_MAGICBALL = "SKILL_MAGICBALL";
      AudioPlayer.SKILL_MAGICBALL1 = "SKILL_MAGICBALL";
      AudioPlayer.WENTLINE_OPEN = "WENTLINE_OPEN";
      AudioPlayer.WENTLINE_SHOW = "WENTLINE_SHOW";
      AudioPlayer.ZOMBIE_ATTACK = "ZOMBIE_ATTACK";
      AudioPlayer.ZOMBIE_SPITTING = "ZOMBIE_SPITTING";
      AudioPlayer.SWORD_SHOW = "SWORD_SHOW";
      AudioPlayer.ELECTRIC_ATTACK = "ELECTRIC_ATTACK";
      AudioPlayer.PUNCH = "PUNCH";
      AudioPlayer.PUNCH1 = "PUNCH1";
      AudioPlayer.PUNCH2 = "PUNCH2";
      AudioPlayer.FIST = "FIST";
      AudioPlayer.FIST1 = "FIST1";
      AudioPlayer.FIST2 = "FIST2";
      AudioPlayer.SWORD_ATTACK = "SWORD_ATTACK";
      AudioPlayer.SWORD_ATTACK1 = "SWORD_ATTACK1";
      AudioPlayer.SWORD_ATTACK2 = "SWORD_ATTACK2";
      AudioPlayer.SWORD_HIT = "SWORD_HIT";
      AudioPlayer.SWORD_HIT1 = "SWORD_HIT1";
      AudioPlayer.SWORD_HIT2 = "SWORD_HIT2";
      AudioPlayer.BLEEDING = "BLEEDING";
      AudioPlayer.CASHIERING = "CASHIERING";
      AudioPlayer.CHICKEN = "CHICKEN";
      AudioPlayer.CLOSESTOOL = "CLOSESTOOL";
      AudioPlayer.FIREBALL = "FIREBALL";
      AudioPlayer.MUTANT = "MUTANT ";
      AudioPlayer.RELOAD = "RELOAD ";
      AudioPlayer.SCARABCRAWL = "SCARABCRAWL";
      AudioPlayer.SHOOT001 = "SHOOT001";
      AudioPlayer.SHOOT002 = "SHOOT002";
      AudioPlayer.SHOOT003 = "SHOOT003";
      AudioPlayer.SHOOT004 = "SHOOT004";
      AudioPlayer.TAKEPHOTO = "TAKEPHOTO ";
      AudioPlayer.TRANSPORTSHIP = "TRANSPORTSHIP";
      AudioPlayer.TVCOLOR = "TVCOLOR";
      AudioPlayer.TVWHITE = "TVWHITE";
      AudioPlayer.WELCOME = "WELCOME";
      AudioPlayer.ICEBOOM = "ICEBOOM";
      AudioPlayer.LEVELUP = "LEVELUP";
      AudioPlayer.COMPLETE = "COMPLETE";
      AudioPlayer.OILGOLD = "OILGOLD";
      AudioPlayer.DOG = "DOG";
      AudioPlayer.FEED_FISH = "FEED_FISH";
      AudioPlayer.FISHTANK = "FISHTANK";
      AudioPlayer.CAT = "CAT";
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "monsterHit", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "monsterHit1", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "monsterHit2", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "pickUp", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "playerHit", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "remoteLaser", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "shoot", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "coin", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "boom", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "dash", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "die", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "exit", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "pickItem", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "melee", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "walk", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "blink", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "select", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "selectfail", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "bossicedemonattack", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "meleereflect", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "raindrop", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "skillfireball", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "skillicethron", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "skillmagicball", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "skillmagicball1", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "bossicedemondash", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "bossicedemondefend", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "bossicedemonhit", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "bossicedemonthron", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "wentlineopen", void 0);
      __decorate([ property({
        type: cc.AudioClip
      }) ], AudioPlayer.prototype, "wentlineshow", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "zombieattack", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "zombiespitting", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "swordshow", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "electricattack", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "punch", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "punch1", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "punch2", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "fist", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "fist1", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "fist2", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "swordattack", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "swordattack1", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "swordattack2", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "swordhit", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "swordhit1", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "swordhit2", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "bleeding", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "cashiering", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "chicken", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "closestool", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "fireball", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "mutant", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "reload", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "scarabcrawl", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "shoot001", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "shoot002", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "shoot003", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "shoot004", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "takephoto", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "transportship", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "tvcolor", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "tvwhite", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "welcome", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "iceboom", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "levelup", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "complete", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "oilgold", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "dog", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "feedfish", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "fishtank", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "cat", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "bg01", void 0);
      __decorate([ property(cc.AudioClip) ], AudioPlayer.prototype, "bg02", void 0);
      AudioPlayer = AudioPlayer_1 = __decorate([ ccclass ], AudioPlayer);
      return AudioPlayer;
    }(cc.Component);
    exports.default = AudioPlayer;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper",
    "../Logic": "Logic"
  } ],
  AvatarData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78b51+ej+hHW50Cw1oQcuRl", "AvatarData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfessionData_1 = require("./ProfessionData");
    var AvatarData = function() {
      function AvatarData() {
        this.organizationIndex = 0;
        this.professionData = new ProfessionData_1.default();
        this.skinColor = "#ffe1c5";
        this.hairResName = "avatarhair000anim00";
        this.hairColor = "#000000";
        this.eyesResName = "avatareyes000";
        this.eyesColor = "#000000";
        this.faceResName = "avatarface000";
        this.faceColor = "#FBA1DE";
        this.petName = "nonplayer100";
      }
      AvatarData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.organizationIndex = data.organizationIndex ? data.organizationIndex : this.organizationIndex;
        this.professionData.valueCopy(data.professionData);
        this.skinColor = data.skinColor ? data.skinColor : this.skinColor;
        this.hairResName = data.hairResName ? data.hairResName : this.hairResName;
        this.hairColor = data.hairColor ? data.hairColor : this.hairColor;
        this.eyesResName = data.eyesResName ? data.eyesResName : this.eyesResName;
        this.eyesColor = data.eyesColor ? data.eyesColor : this.eyesColor;
        this.faceResName = data.faceResName ? data.faceResName : this.faceResName;
        this.faceColor = data.faceColor ? data.faceColor : this.faceColor;
        this.petName = data.petName && data.petName ? data.petName : this.petName;
      };
      AvatarData.prototype.clone = function() {
        var e = new AvatarData();
        e.organizationIndex = this.organizationIndex;
        e.professionData = this.professionData;
        e.skinColor = this.skinColor;
        e.hairResName = this.hairResName;
        e.hairColor = this.hairColor;
        e.eyesResName = this.eyesResName;
        e.eyesColor = this.eyesColor;
        e.faceResName = this.faceResName;
        e.faceColor = this.faceColor;
        e.petName = this.petName;
        return e;
      };
      AvatarData.FOLLOWER = 0;
      AvatarData.HUNTER = 1;
      AvatarData.GURAD = 2;
      AvatarData.TECH = 3;
      AvatarData.ORGANIZATION = [ "\u5f25\u4e16\u9010\u6d41", "\u5b9d\u85cf\u730e\u4eba", "\u5e7d\u5149\u5b88\u62a4", "\u7fe0\u91d1\u79d1\u6280" ];
      return AvatarData;
    }();
    exports.default = AvatarData;
    cc._RF.pop();
  }, {
    "./ProfessionData": "ProfessionData"
  } ],
  BaseData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "104f7mgC6BFIYLmzL4FKFUV", "BaseData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Random_1 = require("../Utils/Random");
    var BaseData = function() {
      function BaseData() {}
      BaseData.prototype.genNonDuplicateID = function() {
        return Number(Random_1.default.rand().toString().substr(3, 16) + Date.now()).toString(36);
      };
      return BaseData;
    }();
    exports.default = BaseData;
    cc._RF.pop();
  }, {
    "../Utils/Random": "Random"
  } ],
  BaseDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5de11HhcHdDHbXLJONfG55W", "BaseDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseDialog = function(_super) {
      __extends(BaseDialog, _super);
      function BaseDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bg = null;
        _this.dialogBg = null;
        _this.cancelOutSide = true;
        _this._isAniming = false;
        return _this;
      }
      Object.defineProperty(BaseDialog.prototype, "isAniming", {
        get: function() {
          return this._isAniming;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseDialog.prototype, "isShow", {
        get: function() {
          return true == this.node.active;
        },
        enumerable: false,
        configurable: true
      });
      BaseDialog.prototype.onLoad = function() {
        var _this = this;
        this.bg = this.node.getChildByName("bg");
        this.dialogBg = this.node.getChildByName("dialogbg");
        this.bg.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.cancelOutSide && _this.dismiss();
        }, this);
      };
      BaseDialog.prototype.start = function() {};
      BaseDialog.prototype.setCanceledOnTouchOutside = function(flag) {
        this.cancelOutSide = flag;
      };
      BaseDialog.prototype.show = function() {
        var _this = this;
        if (this._isAniming) return;
        this._isAniming = true;
        this.node.active = true;
        this.node.opacity = 255;
        this.node.scale = 0;
        cc.tween(this.node).to(.1, {
          scale: .1
        }).to(.1, {
          scaleX: 1
        }).to(.1, {
          scaleY: 1
        }).call(function() {
          _this._isAniming = false;
        }).start();
      };
      BaseDialog.prototype.dismiss = function() {
        var _this = this;
        if (this._isAniming) return;
        this._isAniming = true;
        cc.tween(this.node).to(.1, {
          scaleY: .1
        }).to(.1, {
          scaleX: 0
        }).to(.1, {
          opacity: 0
        }).call(function() {
          _this.node.active = false;
          _this._isAniming = false;
          _this.dismissCallBack && _this.dismissCallBack();
        }).start();
      };
      BaseDialog.prototype.onDismissListener = function(callback) {
        this.dismissCallBack = callback;
      };
      BaseDialog = __decorate([ ccclass ], BaseDialog);
      return BaseDialog;
    }(cc.Component);
    exports.default = BaseDialog;
    cc._RF.pop();
  }, {} ],
  BaseManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0fb6uxoAJAR6KX1Qx/juNE", "BaseManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseManager = function(_super) {
      __extends(BaseManager, _super);
      function BaseManager() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BaseManager = __decorate([ ccclass ], BaseManager);
      return BaseManager;
    }(cc.Component);
    exports.default = BaseManager;
    cc._RF.pop();
  }, {} ],
  BaseNonPlayerActorState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "920bbZwmdhLNqox7T/WQBj5", "BaseNonPlayerActorState");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseNonPlayerActorState = function() {
      function BaseNonPlayerActorState() {
        this._isRunnig = false;
        this.showLog = true;
      }
      Object.defineProperty(BaseNonPlayerActorState.prototype, "isRunnig", {
        get: function() {
          return this._isRunnig;
        },
        enumerable: false,
        configurable: true
      });
      BaseNonPlayerActorState.prototype.enter = function(entity) {
        this._isRunnig = true;
      };
      BaseNonPlayerActorState.prototype.update = function(entity) {};
      BaseNonPlayerActorState.prototype.exit = function(entity) {
        this._isRunnig = false;
      };
      BaseNonPlayerActorState.prototype.event = function(entity, event) {
        this._isRunnig = true;
        return true;
      };
      BaseNonPlayerActorState.prototype.log = function(msg) {
        this.showLog && cc.log(msg);
      };
      BaseNonPlayerActorState = __decorate([ ccclass ], BaseNonPlayerActorState);
      return BaseNonPlayerActorState;
    }();
    exports.default = BaseNonPlayerActorState;
    cc._RF.pop();
  }, {} ],
  BlockLight: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "200a5VPMNZOQ7QKn+qhQpb0", "BlockLight");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BlockLight = function(_super) {
      __extends(BlockLight, _super);
      function BlockLight() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BlockLight.prototype.show = function() {
        var _this = this;
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play();
        this.scheduleOnce(function() {
          cc.director.emit(EventHelper_1.EventHelper.POOL_DESTORY_WALKSMOKE, {
            detail: {
              targetNode: _this.node
            }
          });
        }, .5);
      };
      BlockLight = __decorate([ ccclass ], BlockLight);
      return BlockLight;
    }(cc.Component);
    exports.default = BlockLight;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper"
  } ],
  BossAttackCollider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "955f3FE6OVI9rSVX2x0s/2h", "BossAttackCollider");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var FromData_1 = require("../Data/FromData");
    var Actor_1 = require("../Base/Actor");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BossAttackCollider = function(_super) {
      __extends(BossAttackCollider, _super);
      function BossAttackCollider() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.damage = 9;
        _this.parentNode = null;
        _this.from = new FromData_1.default();
        _this.isShow = false;
        return _this;
      }
      BossAttackCollider.prototype.start = function() {
        this.isShow = false;
      };
      BossAttackCollider.prototype.showCollider = function(coolingTime, delayTime) {
        var _this = this;
        var delay = delayTime || 0;
        this.scheduleOnce(function() {
          _this.isShow = true;
        }, delay);
        this.scheduleOnce(function() {
          _this.isShow = false;
        }, coolingTime);
      };
      BossAttackCollider.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isShow && this.node.active && this.parentNode) {
          this.isShow = false;
          var dd = new DamageData_1.default();
          dd.physicalDamage = this.damage;
          target.takeDamage(dd, this.from, this.parentNode.getComponent(Actor_1.default));
        }
      };
      __decorate([ property ], BossAttackCollider.prototype, "damage", void 0);
      __decorate([ property(cc.Node) ], BossAttackCollider.prototype, "parentNode", void 0);
      BossAttackCollider = __decorate([ ccclass ], BossAttackCollider);
      return BossAttackCollider;
    }(cc.Component);
    exports.default = BossAttackCollider;
    cc._RF.pop();
  }, {
    "../Base/Actor": "Actor",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Utils/ActorUtils": "ActorUtils"
  } ],
  Boss: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27ef0INO8BDnrQF5OkIl5aV", "Boss");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var Dungeon_1 = require("../Dungeon");
    var StatusManager_1 = require("../Manager/StatusManager");
    var EventHelper_1 = require("../EventHelper");
    var Actor_1 = require("../Base/Actor");
    var Item_1 = require("../Item/Item");
    var IndexZ_1 = require("../Utils/IndexZ");
    var NonPlayerData_1 = require("../Data/NonPlayerData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Boss = function(_super) {
      __extends(Boss, _super);
      function Boss() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.statusManager = null;
        _this.healthBar = null;
        _this.pos = cc.v3(0, 0);
        _this.data = new NonPlayerData_1.default();
        return _this;
      }
      Boss.prototype.addStatus = function(statusType, from) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager && this.statusManager.addStatus(statusType, from);
      };
      Boss.prototype.getNearPlayerDistance = function(playerNode, offset) {
        var p = this.node.position.clone();
        offset && p.addSelf(offset);
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, playerNode.position);
        return dis;
      };
      Boss.prototype.getCenterPosition = function() {
        return this.node.position.clone().addSelf(cc.v3(0, 32 * this.node.scaleY));
      };
      Boss.prototype.playHit = function(sprite) {
        if (sprite) {
          sprite.stopAllActions();
          sprite.position = cc.v3(0, 0);
          cc.tween(sprite).to(.1, {
            position: cc.v3(2, 0)
          }).to(.1, {
            position: cc.v3(-2, 0)
          }).to(.1, {
            position: cc.v3(2, 0)
          }).to(.1, {
            position: cc.v3(-2, 0)
          }).to(.1, {
            position: cc.v3(2, 0)
          }).to(.1, {
            position: cc.v3(-2, 0)
          }).to(.1, {
            position: cc.v3(2, 0)
          }).to(.1, {
            position: cc.v3(0, 0)
          }).start();
        }
      };
      Boss.prototype.updatePlayerPos = function() {
        this.node.position = Dungeon_1.default.getPosInMap(this.pos);
      };
      Boss.prototype.transportBoss = function(x, y) {
        this.pos.x = x;
        this.pos.y = y;
        this.changeZIndex();
        this.updatePlayerPos();
      };
      Boss.prototype.changeZIndex = function() {
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      Boss.prototype.start = function() {
        var _this = this;
        this.changeZIndex();
        this.scheduleOnce(function() {
          _this.healthBar && _this.healthBar.refreshHealth(_this.data.currentHealth, _this.data.Common.maxHealth);
        }, .1);
      };
      Boss.prototype.getLoot = function(isSteal) {
        if (this.dungeon) {
          var rand4save = Logic_1.default.mapManager.getRandom4Save(this.seed);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
            pos: this.node.position,
            count: isSteal ? 9 : 19
          });
          isSteal || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, {
            pos: this.node.position,
            count: 100
          });
          var chance = Logic_1.default.getHalfChance() && isSteal || !isSteal;
          if (chance) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              pos: this.node.position,
              res: Item_1.default.HEART
            });
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              pos: this.node.position,
              res: Item_1.default.DREAM
            });
          }
          this.dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(this.pos), null, isSteal ? 0 : 3);
        }
      };
      Boss.prototype.showBoss = function() {};
      Boss.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle);
      };
      Boss.prototype.takeDizz = function(dizzDuration) {};
      Boss.prototype.updateStatus = function(statusList, totalStatusData) {
        this.data.StatusTotalData.valueCopy(totalStatusData);
      };
      Boss.prototype.hideSelf = function(hideDuration) {};
      Boss.prototype.updateDream = function(offset) {
        return 0;
      };
      Boss.prototype.setLinearVelocity = function(movement) {};
      __decorate([ property(StatusManager_1.default) ], Boss.prototype, "statusManager", void 0);
      Boss = __decorate([ ccclass ], Boss);
      return Boss;
    }(Actor_1.default);
    exports.default = Boss;
    cc._RF.pop();
  }, {
    "../Base/Actor": "Actor",
    "../Data/NonPlayerData": "NonPlayerData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Item/Item": "Item",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/IndexZ": "IndexZ"
  } ],
  Box: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84b7dB47rlIALRzq2ZvOGc3", "Box");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var IndexZ_1 = require("../Utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Box = function(_super) {
      __extends(Box, _super);
      function Box() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isBreaking = false;
        _this.boxType = 0;
        return _this;
      }
      Box_1 = Box;
      Box.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.anim.play("BoxShow");
      };
      Box.prototype.start = function() {
        var resName = "box";
        switch (this.boxType) {
         case Box_1.BOX:
          resName = "box";
          break;

         case Box_1.PLANT:
          resName = "plant";
          break;

         case Box_1.BOXBREAKABLE:
          resName = "box";
        }
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          this.changeRes(resName + "000");
          break;

         case Logic_1.default.CHAPTER01:
          this.changeRes(resName + "001");
          break;

         case Logic_1.default.CHAPTER02:
          this.changeRes(resName + "002");
          break;

         case Logic_1.default.CHAPTER03:
          this.changeRes(resName + "003");
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          this.changeRes(resName + "004");
          break;

         case Logic_1.default.CHAPTER099:
          this.changeRes(resName + "000");
        }
      };
      Box.prototype.changeRes = function(resName) {
        var sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        sprite.spriteFrame = spriteFrame;
      };
      Box.prototype.setDefaultPos = function(defaultPos) {
        this.data.defaultPos = defaultPos;
        this.node.position = Dungeon_1.default.getPosInMap(defaultPos);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      Box.prototype.BreakingFinish = function() {
        this.reset();
      };
      Box.prototype.breakBox = function() {
        if (this.isBreaking) return;
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("BoxBroken");
        this.isBreaking = true;
      };
      Box.prototype.reset = function() {
        this.node.position = Dungeon_1.default.getPosInMap(this.data.defaultPos);
        this.isBreaking = false;
      };
      Box.prototype.update = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .2) {
          this.data.position = this.node.position;
          var saveBox = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
          saveBox && (saveBox.position = this.data.position);
          this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
        }
      };
      var Box_1;
      Box.BOX = 0;
      Box.PLANT = 1;
      Box.BOXBREAKABLE = 2;
      Box = Box_1 = __decorate([ ccclass ], Box);
      return Box;
    }(Building_1.default);
    exports.default = Box;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  BrightnessBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd2d8XSihFHJ5/ASmPsHcdm", "BrightnessBar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BrightnessBar = function(_super) {
      __extends(BrightnessBar, _super);
      function BrightnessBar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.slider = null;
        return _this;
      }
      BrightnessBar_1 = BrightnessBar;
      BrightnessBar.prototype.onLoad = function() {};
      BrightnessBar.prototype.init = function() {};
      BrightnessBar.prototype.setSelectorCallback = function(callback) {
        this.selectorCallback = callback;
        this.updateAttribute();
      };
      BrightnessBar.prototype.selectRandom = function() {
        this.slider.progress = Logic_1.default.getRandomNum(0, 10) / 10;
        this.updateAttribute();
      };
      BrightnessBar.prototype.updateAttribute = function() {
        if (this.selectorCallback) {
          var colors = BrightnessBar_1.SKIN_COLORS;
          var num = Math.floor(10 * this.slider.progress);
          this.selectorCallback(cc.Color.WHITE.fromHEX(colors[num]));
        }
      };
      var BrightnessBar_1;
      BrightnessBar.SKIN = 0;
      BrightnessBar.SKIN_COLORS = [ "#ffe8d2", "#ffe1c5", "#ebcaac", "#e0c1a4", "#ccad8f", "#ad9075", "#997E5B", "#664e38", "#473524", "#291404", "#1f1711" ];
      __decorate([ property(cc.Slider) ], BrightnessBar.prototype, "slider", void 0);
      BrightnessBar = BrightnessBar_1 = __decorate([ ccclass ], BrightnessBar);
      return BrightnessBar;
    }(cc.Component);
    exports.default = BrightnessBar;
    cc._RF.pop();
  }, {
    "../Logic": "Logic"
  } ],
  BuildingData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78dc5pt0FFGDaglLh5AJv4K", "BuildingData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentData_1 = require("./EquipmentData");
    var ItemData_1 = require("./ItemData");
    var BuildingData = function() {
      function BuildingData() {
        this.isOpen = false;
        this.quality = 1;
        this.price = 60;
        this.shopType = 0;
        this.isSaled = false;
        this.maxHealth = 1;
        this.currentHealth = 1;
        this.generatorList = [];
        this.generatorCount = 0;
        this.generatorInterval = 0;
        this.interact = 0;
        this.rollover = 0;
      }
      BuildingData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.defaultPos = data.defaultPos ? cc.v3(data.defaultPos.x, data.defaultPos.y) : cc.v3(0, 0);
        this.position = data.position ? cc.v3(data.position.x, data.position.y) : cc.v3(0, 0);
        if (data.equipdata) {
          this.equipdata = new EquipmentData_1.default();
          this.equipdata.valueCopy(data.equipdata);
        }
        if (data.itemdata) {
          this.itemdata = new ItemData_1.default();
          this.itemdata.valueCopy(data.itemdata);
        }
        this.price = data.price;
        this.isSaled = data.isSaled;
        this.shopType = data.shopType;
        this.quality = data.quality ? data.quality : 1;
        this.isOpen = data.isOpen;
        this.maxHealth = data.maxHealth ? data.maxHealth : 0;
        this.currentHealth = data.currentHealth ? data.currentHealth : 0;
        this.generatorList = [];
        data.generatorList && (this.generatorList = data.generatorList);
        this.generatorCount = data.generatorCount ? data.generatorCount : 0;
        this.generatorInterval = data.generatorInterval ? data.generatorInterval : 0;
        this.interact = data.interact ? data.interact : 0;
        this.rollover = data.rollover ? data.rollover : 0;
      };
      BuildingData.prototype.clone = function() {
        var data = new BuildingData();
        data.defaultPos = this.defaultPos;
        data.position = this.position;
        data.isOpen = this.isOpen;
        data.quality = this.quality;
        if (this.equipdata) {
          data.equipdata = new EquipmentData_1.default();
          data.equipdata.valueCopy(this.equipdata);
        }
        if (this.itemdata) {
          data.itemdata = new ItemData_1.default();
          data.itemdata.valueCopy(this.itemdata);
        }
        data.price = this.price;
        data.shopType = this.shopType;
        data.isSaled = this.isSaled;
        data.maxHealth = this.maxHealth;
        data.currentHealth = this.currentHealth;
        data.generatorInterval = this.generatorInterval;
        data.generatorCount = this.generatorCount;
        data.generatorList = this.generatorList;
        data.interact = this.interact;
        data.rollover = this.rollover;
        return data;
      };
      return BuildingData;
    }();
    exports.default = BuildingData;
    cc._RF.pop();
  }, {
    "./EquipmentData": "EquipmentData",
    "./ItemData": "ItemData"
  } ],
  BuildingManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac92cjzIYlNDKOIneo1Pkvl", "BuildingManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var FootBoard_1 = require("../Building/FootBoard");
    var IndexZ_1 = require("../Utils/IndexZ");
    var Saw_1 = require("../Building/Saw");
    var Emplacement_1 = require("../Building/Emplacement");
    var DecorationFloor_1 = require("../Building/DecorationFloor");
    var Chest_1 = require("../Building/Chest");
    var Box_1 = require("../Building/Box");
    var ShopTable_1 = require("../Building/ShopTable");
    var FallStone_1 = require("../Building/FallStone");
    var MagicLightening_1 = require("../Building/MagicLightening");
    var HitBuilding_1 = require("../Building/HitBuilding");
    var ExitDoor_1 = require("../Building/ExitDoor");
    var Door_1 = require("../Building/Door");
    var Wall_1 = require("../Building/Wall");
    var AirExit_1 = require("../Building/AirExit");
    var Portal_1 = require("../Building/Portal");
    var RoomBed_1 = require("../Building/RoomBed");
    var Building_1 = require("../Building/Building");
    var ExitData_1 = require("../Data/ExitData");
    var BaseManager_1 = require("./BaseManager");
    var DryadGrass_1 = require("../Boss/DryadGrass");
    var Utils_1 = require("../Utils/Utils");
    var ShadowOfSight_1 = require("../Effect/ShadowOfSight");
    var LightManager_1 = require("./LightManager");
    var SavePoint_1 = require("../Building/SavePoint");
    var MartShelves_1 = require("../Building/MartShelves");
    var NonPlayerManager_1 = require("./NonPlayerManager");
    var MonsterManager_1 = require("./MonsterManager");
    var MgWentLine_1 = require("../Building/MgWentLine");
    var RoomStool_1 = require("../Building/RoomStool");
    var MgCrack_1 = require("../Building/MgCrack");
    var InteractBuilding_1 = require("../Building/InteractBuilding");
    var EnergyShield_1 = require("../Building/EnergyShield");
    var EquipmentManager_1 = require("./EquipmentManager");
    var Furniture_1 = require("../Building/Furniture");
    var FurnitureData_1 = require("../Data/FurnitureData");
    var LocalStorage_1 = require("../Utils/LocalStorage");
    var RoomFishtank_1 = require("../Building/RoomFishtank");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BuildingManager = function(_super) {
      __extends(BuildingManager, _super);
      function BuildingManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.footboards = new Array();
        _this.exitdoors = new Array();
        _this.portals = new Array();
        _this.doors = new Array();
        _this.airExits = new Array();
        _this.monsterGeneratorList = new Array();
        _this.coastColliderList = [ "128,128,0,0", "128,128,0,0", "128,128,0,0", "128,128,0,0", "128,64,0,-32", "128,64,0,32", "64,128,32,0", "64,128,-32,0", "64,64,-32,32", "64,64,32,32", "64,64,-32,-32", "64,64,32,-32" ];
        _this.shelvesFoodIndex = 0;
        _this.shelvesDrinkIndex = 0;
        _this.drinkList = [];
        _this.foodList = [];
        _this.interactBuildings = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      BuildingManager_1 = BuildingManager;
      BuildingManager.prototype.clear = function() {
        Utils_1.default.clearComponentArray(this.footboards);
        Utils_1.default.clearComponentArray(this.exitdoors);
        Utils_1.default.clearComponentArray(this.portals);
        Utils_1.default.clearComponentArray(this.doors);
        Utils_1.default.clearComponentArray(this.airExits);
        Utils_1.default.clearComponentArray(this.interactBuildings);
        this.footboards = new Array();
        this.exitdoors = new Array();
        this.portals = new Array();
        this.doors = new Array();
        this.airExits = new Array();
        this.drinkList = new Array();
        this.foodList = new Array();
        this.interactBuildings = new Array();
        this.shelvesFoodIndex = 0;
        this.shelvesDrinkIndex = 0;
      };
      BuildingManager.prototype.isThe = function(mapStr, typeStr) {
        var isequal = -1 != mapStr.indexOf(typeStr);
        return isequal;
      };
      BuildingManager.prototype.isFirstEqual = function(mapStr, typeStr) {
        var isequal = mapStr[0] == typeStr;
        return isequal;
      };
      BuildingManager.prototype.addBuilding = function(prefab, indexPos) {
        var building = cc.instantiate(prefab);
        building.parent = this.node;
        building.position = Dungeon_1.default.getPosInMap(indexPos);
        building.zIndex = IndexZ_1.default.getActorZIndex(building.position);
        var b = building.getComponent(Building_1.default);
        if (b) {
          b.seed = Logic_1.default.mapManager.getSeedFromRoom();
          b.data.defaultPos = indexPos.clone();
          b.lights = b.getComponentsInChildren(ShadowOfSight_1.default);
          b.lights && LightManager_1.default.registerLight(b.lights, b.node);
        }
        return building;
      };
      BuildingManager.prototype.addBuildingsFromMap = function(dungeon, mapDataStr, indexPos, levelData, exits) {
        if (this.isFirstEqual(mapDataStr, "*")) ; else if (this.isFirstEqual(mapDataStr, "#")) this.addDirWalls(mapDataStr, indexPos, levelData, false); else if (this.isFirstEqual(mapDataStr, "-")) {
          var dn = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.DARKNESS), indexPos);
          dn.zIndex = IndexZ_1.default.DARKNESS;
          "-0" == mapDataStr && (dn.zIndex = IndexZ_1.default.ROOF);
        } else if (this.isFirstEqual(mapDataStr, "~")) this.addWater(mapDataStr, indexPos); else if (this.isFirstEqual(mapDataStr, "+")) this.addDecorate(dungeon, mapDataStr, indexPos); else if ("@@" == mapDataStr) {
          var foot = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.FOOTBOARD), indexPos);
          foot.zIndex = IndexZ_1.default.FLOOR;
          this.footboards.push(foot.getComponent(FootBoard_1.default));
        } else if ("@S" == mapDataStr) {
          var save = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.SAVEPOINT), indexPos);
          this.savePointS = save.getComponent(SavePoint_1.default);
        } else if (this.isFirstEqual(mapDataStr, "B")) this.addBox(mapDataStr, indexPos); else if ("C0" == mapDataStr) this.addChest(indexPos); else if (this.isFirstEqual(mapDataStr, "D")) this.addDoor(mapDataStr, indexPos, false); else if (this.isFirstEqual(mapDataStr, "E")) this.addExitDoor(mapDataStr, indexPos, exits); else if ("F0" == mapDataStr) this.addFallStone(Dungeon_1.default.getPosInMap(indexPos), false); else if ("F1" == mapDataStr) this.addLighteningFall(Dungeon_1.default.getPosInMap(indexPos), true, true, true); else if (this.isFirstEqual(mapDataStr, "G")) {
          var em = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.EMPLACEMENT), indexPos).getComponent(Emplacement_1.default);
          em.setDirType(mapDataStr);
          em.dungeon = dungeon;
        } else if (this.isFirstEqual(mapDataStr, "H")) this.addHitBuilding(dungeon, mapDataStr, indexPos); else if ("I0" == mapDataStr) {
          var p = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.WENTLINE), indexPos).getComponent(MgWentLine_1.default);
          p.init(dungeon, 5, 3, [ MonsterManager_1.default.MONSTER_ZOOMBIE, MonsterManager_1.default.MONSTER_BITE_ZOMBIE ]);
          this.monsterGeneratorList.push(p);
        } else if ("I0" == mapDataStr) {
          var p = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.WENTLINE), indexPos).getComponent(MgWentLine_1.default);
          p.init(dungeon, 5, 3, [ MonsterManager_1.default.MONSTER_ZOOMBIE, MonsterManager_1.default.MONSTER_BITE_ZOMBIE ]);
          this.monsterGeneratorList.push(p);
        } else if ("I6" == mapDataStr) {
          var p = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.CRACK), indexPos).getComponent(MgCrack_1.default);
          p.init(dungeon, .5, 15, [ MonsterManager_1.default.MONSTER_SCARAB ]);
          this.monsterGeneratorList.push(p);
        } else if (this.isFirstEqual(mapDataStr, "J")) ; else if (this.isFirstEqual(mapDataStr, "K")) ; else if (this.isFirstEqual(mapDataStr, "L")) this.addLamp(mapDataStr, indexPos); else if (this.isFirstEqual(mapDataStr, "O")) {
          var head = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.DECORATIONOVERHEAD), indexPos);
          "O1" == mapDataStr && (head.angle = 90);
          head.opacity = 80;
          head.zIndex = IndexZ_1.default.ROOF;
        } else if (this.isFirstEqual(mapDataStr, "P")) {
          if (Logic_1.default.isCheatMode) {
            var d = ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level);
            for (var _i = 0, exits_1 = exits; _i < exits_1.length; _i++) {
              var e = exits_1[_i];
              if (e.fromPos.equals(indexPos) && e.fromRoomPos.equals(cc.v3(Logic_1.default.mapManager.getCurrentRoom().x, Logic_1.default.mapManager.getCurrentRoom().y))) {
                d.valueCopy(e);
                break;
              }
            }
            var p = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.PORTAL), indexPos);
            var portal = p.getComponent(Portal_1.default);
            portal.exitData.valueCopy(d);
            this.portals.push(portal);
          }
        } else if ("Q0" == mapDataStr) this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.TAROTTABLE), indexPos); else if ("R0" == mapDataStr) {
          var node = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.SHIPSTAIRS), indexPos);
          node.setScale(16);
          node.zIndex = IndexZ_1.default.WALLINTERNAL;
        } else if ("R1" == mapDataStr) {
          var node = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.SHIPSTAIRS), indexPos);
          node.setScale(-16, 16);
          node.getComponent(cc.PhysicsBoxCollider).offset = cc.v2(-8, 0);
          node.getComponent(cc.PhysicsBoxCollider).apply();
          node.zIndex = IndexZ_1.default.WALLINTERNAL;
        } else if ("S0" == mapDataStr) this.addShopTable(indexPos); else if ("S1" == mapDataStr) this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.SHOP), indexPos); else if ("S2" == mapDataStr) {
          var mart = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.SHOPMART), indexPos);
          mart.zIndex += 10;
        } else if ("Sa" == mapDataStr || "Sb" == mapDataStr || "Sc" == mapDataStr) this.addMartShelves(mapDataStr, indexPos); else if ("Sd" == mapDataStr) {
          this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.MARTCASHIER), indexPos);
          var pos = Dungeon_1.default.getPosInMap(indexPos);
          dungeon.nonPlayerManager.addNonPlayerFromData(NonPlayerManager_1.default.SHOP_KEEPER, cc.v3(pos.x - 60, pos.y + 180), dungeon);
        } else if ("Se" == mapDataStr) this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.MARTTABLE), indexPos); else if ("T0" == mapDataStr) this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.TRAP), indexPos); else if (this.isFirstEqual(mapDataStr, "W")) this.addInteractBuilding(mapDataStr, indexPos); else if ("X0" == mapDataStr) {
          var saw = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.SAW), indexPos);
          saw.getComponent(Saw_1.default).setPos(indexPos);
        } else if (this.isFirstEqual(mapDataStr, "Z")) if (0 == parseInt(mapDataStr[1]) || 1 == parseInt(mapDataStr[1])) {
          var p = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.ROOMBED), indexPos);
          var rb = p.getComponent(RoomBed_1.default);
          rb.init(dungeon, 1 == parseInt(mapDataStr[1]));
        } else this.addFurnitures(dungeon, mapDataStr, indexPos);
      };
      BuildingManager.prototype.addBuildingsFromSideMap = function(mapDataStr, indexPos, levelData) {
        if (this.isFirstEqual(mapDataStr, "#")) this.addDirWalls(mapDataStr, indexPos, levelData, true); else if (this.isFirstEqual(mapDataStr, "-")) {
          var dn = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.DARKNESS), indexPos);
          dn.zIndex = IndexZ_1.default.DARKNESS;
          "-0" == mapDataStr && (dn.zIndex = IndexZ_1.default.ROOF);
        } else this.isFirstEqual(mapDataStr, "~") ? this.addWater(mapDataStr, indexPos) : "+3" == mapDataStr ? this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.AIRTRANSPORTMODEL), indexPos) : this.isFirstEqual(mapDataStr, "D") && this.addDoor(mapDataStr, indexPos, true);
      };
      BuildingManager.prototype.addInteractBuilding = function(mapDataStr, indexPos) {
        var saveBox = Logic_1.default.mapManager.getCurrentMapBuilding(indexPos);
        var isReborn = Logic_1.default.mapManager.getCurrentRoom().isReborn;
        if (saveBox) {
          if (saveBox.currentHealth > 0 || isReborn) {
            var interactBuilding = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.INTERACTBUILDING), indexPos);
            var d = interactBuilding.getComponent(InteractBuilding_1.default);
            d.node.position = saveBox.position.clone();
            d.data.valueCopy(saveBox);
            if (isReborn) {
              d.node.position = Dungeon_1.default.getPosInMap(d.data.defaultPos);
              d.data.currentHealth = d.data.maxHealth;
            }
            d.init(true, parseInt(mapDataStr[1]));
            this.interactBuildings.push(d);
          }
        } else {
          var interactBuilding = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.INTERACTBUILDING), indexPos);
          var d = interactBuilding.getComponent(InteractBuilding_1.default);
          d.data.currentHealth = 5;
          Logic_1.default.mapManager.setCurrentBuildingData(d.data.clone());
          d.init(true, parseInt(mapDataStr[1]));
          this.interactBuildings.push(d);
        }
      };
      BuildingManager.prototype.addBox = function(mapDataStr, indexPos) {
        var box = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.BOX), indexPos);
        var b = box.getComponent(Box_1.default);
        b.setDefaultPos(indexPos);
        "B1" == mapDataStr && (b.boxType = Box_1.default.PLANT);
        var saveBox = Logic_1.default.mapManager.getCurrentMapBuilding(b.data.defaultPos);
        saveBox ? b.node.position = saveBox.position.clone() : Logic_1.default.mapManager.setCurrentBuildingData(b.data.clone());
      };
      BuildingManager.prototype.addShopTable = function(indexPos) {
        var table = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.SHOPTABLE), indexPos);
        var ta = table.getComponent(ShopTable_1.default);
        ta.setDefaultPos(indexPos);
        var isReborn = Logic_1.default.mapManager.getCurrentRoom().isReborn;
        var rand4save = Logic_1.default.mapManager.getRandom4Save(ta.seed);
        ta.data.shopType = rand4save.getRandomNum(0, 100) > 10 ? ShopTable_1.default.EQUIPMENT : ShopTable_1.default.ITEM;
        var saveTable = Logic_1.default.mapManager.getCurrentMapBuilding(ta.data.defaultPos);
        if (saveTable) {
          if (isReborn && saveTable.isSaled) {
            saveTable.isSaled = false;
            saveTable.equipdata = null;
            saveTable.itemdata = null;
            rand4save = Logic_1.default.mapManager.getRandom4Save(Logic_1.default.mapManager.getRebornSeed(ta.seed));
            saveTable.shopType = rand4save.getRandomNum(0, 100) > 10 ? ShopTable_1.default.EQUIPMENT : ShopTable_1.default.ITEM;
          }
          ta.data.valueCopy(saveTable);
        } else Logic_1.default.mapManager.setCurrentBuildingData(ta.data.clone());
        ta.showItem();
      };
      BuildingManager.prototype.addChest = function(indexPos) {
        var chest = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.CHEST), indexPos);
        var c = chest.getComponent(Chest_1.default);
        c.seDefaultPos(indexPos);
        var rand4save = Logic_1.default.mapManager.getRandom4Save(c.seed);
        var rand = rand4save.rand();
        var quality = 1;
        rand > .5 && rand < .7 ? quality = 2 : rand > .7 && rand < .8 ? quality = 3 : rand > .8 && rand < .85 && (quality = 4);
        c.setQuality(quality, false);
        var saveChest = Logic_1.default.mapManager.getCurrentMapBuilding(c.data.defaultPos);
        saveChest ? c.setQuality(saveChest.quality, saveChest.isOpen) : Logic_1.default.mapManager.setCurrentBuildingData(c.data.clone());
      };
      BuildingManager.prototype.addDecorate = function(dungeon, mapDataStr, indexPos) {
        if ("+0" == mapDataStr) {
          var camp = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.CAMPFIRE), indexPos);
          camp.parent = this.node;
          var shadow = camp.getChildByName("sprite").getChildByName("shadow");
          shadow.position = Dungeon_1.default.getPosInMap(indexPos);
          shadow.position = cc.v3(shadow.position.x, shadow.position.y + 40);
          shadow.parent = this.node;
          shadow.zIndex = IndexZ_1.default.FLOOR;
          var fallentree = camp.getChildByName("sprite").getChildByName("fallentree");
          fallentree.position = Dungeon_1.default.getPosInMap(indexPos);
          fallentree.position = cc.v3(shadow.position.x, shadow.position.y + 40);
          fallentree.parent = this.node;
          fallentree.zIndex = IndexZ_1.default.getActorZIndex(fallentree.position);
          fallentree.setScale(6, 4);
        } else if ("+3" == mapDataStr) this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.AIRTRANSPORTMODEL), indexPos); else if ("+4" == mapDataStr) this.addPracticeEquipItem(dungeon, indexPos); else if ("+a" == mapDataStr) this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.GRASS01), indexPos); else if ("+b" == mapDataStr) this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.GRASS02), indexPos); else if ("+c" == mapDataStr) this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.GRASS03), indexPos); else if ("+d" == mapDataStr) this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.GRASS04), indexPos); else {
          var fd = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.DECORATIONFLOOR), indexPos);
          var df = fd.getComponent(DecorationFloor_1.default);
          "++" == mapDataStr ? df.init(dungeon, "exitarrow", 4, 0) : "+2" == mapDataStr ? df.init(dungeon, "exitarrow", 4, 0) : "+5" == mapDataStr ? df.init(dungeon, "roomoutside0", 32, 1, cc.v3(.95, .5), 255, IndexZ_1.default.BASE) : "+6" == mapDataStr ? df.init(dungeon, "roomoutside1", 32, 1, cc.v3(.95, .5), 255, IndexZ_1.default.BASE) : "+7" == mapDataStr ? df.init(dungeon, "roomoutside2", 32, 1, cc.v3(0, .5), 255, IndexZ_1.default.BASE) : df.init(dungeon, "dev", 4, 0);
        }
      };
      BuildingManager.prototype.addWater = function(mapDataStr, indexPos) {
        var pint = parseInt(mapDataStr[1]);
        if (pint >= 0 && pint <= 9 || "~a" == mapDataStr || "~b" == mapDataStr) {
          var co = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.COAST), indexPos);
          var pbc = co.getComponent(cc.PhysicsBoxCollider);
          var fint = pint;
          "~a" == mapDataStr ? fint = 10 : "~b" == mapDataStr && (fint = 11);
          co.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("coast00" + fint);
          var arr = this.coastColliderList[fint].split(",");
          pbc.size = cc.size(parseInt(arr[0]), parseInt(arr[1]));
          pbc.offset = cc.v2(parseInt(arr[2]), parseInt(arr[3]));
          pbc.apply();
          co.zIndex = IndexZ_1.default.WATER;
        } else if ("~f" == mapDataStr) var dn = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.WATERFALL), indexPos); else {
          var dn = this.addBuilding(Logic_1.default.getBuildings("~#" == mapDataStr ? BuildingManager_1.WATERCOLLIDER : BuildingManager_1.WATER), indexPos);
          dn.zIndex = IndexZ_1.default.WATER;
        }
      };
      BuildingManager.prototype.addLamp = function(mapDataStr, indexPos) {
        var prefabName = BuildingManager_1.LAMPLIGHT;
        var isOverHead = false;
        switch (mapDataStr) {
         case "L0":
          prefabName = BuildingManager_1.LAMPLIGHT;
          break;

         case "L1":
          prefabName = BuildingManager_1.LAMPSUN;
          isOverHead = true;
          break;

         case "L2":
          prefabName = BuildingManager_1.LAMPSHIP;
          isOverHead = true;
          break;

         case "L3":
          prefabName = BuildingManager_1.MUSHROOM01;
          break;

         case "L4":
          prefabName = BuildingManager_1.MUSHROOM02;
          break;

         case "L5":
          prefabName = BuildingManager_1.MUSHROOM03;
          break;

         case "L6":
          prefabName = BuildingManager_1.MUSHROOM04;
          break;

         case "L7":
          prefabName = BuildingManager_1.LAMPSEARCH;
          isOverHead = true;
          break;

         case "L8":
          prefabName = BuildingManager_1.LAMPTORCH;
          isOverHead = true;
          break;

         case "L9":
          prefabName = BuildingManager_1.LAMPFIREPAN;
          break;

         case "La":
          prefabName = BuildingManager_1.LAMPROAD;
          break;

         case "Lb":
          prefabName = BuildingManager_1.LAMPFIREFLY;
          break;

         case "Lc":
          prefabName = BuildingManager_1.LAMPDIRECT;
        }
        var node = this.addBuilding(Logic_1.default.getBuildings(prefabName), indexPos);
        isOverHead && (node.zIndex = IndexZ_1.default.OVERHEAD + 100);
      };
      BuildingManager.prototype.getGoodsList = function(type) {
        if (this.foodList.length < 1 && this.drinkList.length < 1) {
          var prefix = "goods";
          for (var _i = 0, _a = Logic_1.default.goodsNameList; _i < _a.length; _i++) {
            var goods = _a[_i];
            var index = goods.substring(prefix.length, prefix.length + 1);
            "0" == index ? this.drinkList.push(goods) : "1" == index && this.foodList.push(goods);
          }
        }
        if (type == MartShelves_1.default.TYPE_FRIDGE) {
          var tempdrinks = [];
          for (var i = this.shelvesDrinkIndex % MartShelves_1.default.SIZE_FRIDGE; i < MartShelves_1.default.SIZE_FRIDGE; i++) this.shelvesDrinkIndex < this.drinkList.length && tempdrinks.push(this.drinkList[this.shelvesDrinkIndex++]);
          return tempdrinks;
        }
        var tempfoods = [];
        for (var i = this.shelvesFoodIndex % MartShelves_1.default.SIZE_NORMAL; i < MartShelves_1.default.SIZE_NORMAL; i++) this.shelvesFoodIndex < this.foodList.length && tempfoods.push(this.foodList[this.shelvesFoodIndex++]);
        return tempfoods;
      };
      BuildingManager.prototype.addMartShelves = function(mapDataStr, indexPos) {
        var ms = this.addBuilding(mapDataStr == MartShelves_1.default.TYPE_FRIDGE ? Logic_1.default.getBuildings(BuildingManager_1.MARTFRIDGE) : Logic_1.default.getBuildings(BuildingManager_1.MARTSHELVES), indexPos).getComponent(MartShelves_1.default);
        ms.init(mapDataStr, this.getGoodsList(mapDataStr));
      };
      BuildingManager.prototype.addExitDoor = function(mapDataStr, indexPos, exits) {
        var dir = parseInt(mapDataStr[1]);
        isNaN(dir) && ("Ea" == mapDataStr ? dir = 10 : "Eb" == mapDataStr && (dir = 11));
        var d = ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level);
        for (var _i = 0, exits_2 = exits; _i < exits_2.length; _i++) {
          var e = exits_2[_i];
          if (e.fromPos.equals(indexPos) && e.fromRoomPos.equals(cc.v3(Logic_1.default.mapManager.getCurrentRoom().x, Logic_1.default.mapManager.getCurrentRoom().y))) {
            d.valueCopy(e);
            break;
          }
        }
        var p = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.EXITDOOR), indexPos);
        var exitdoor = p.getComponent(ExitDoor_1.default);
        exitdoor.init(dir, d);
        this.exitdoors.push(exitdoor);
      };
      BuildingManager.prototype.addAirExit = function(mapData) {
        var top = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.AIREXIT), cc.v3(Math.floor(mapData.length / 2), mapData[0].length)).getComponent(AirExit_1.default);
        var bottom = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.AIREXIT), cc.v3(Math.floor(mapData.length / 2), -1)).getComponent(AirExit_1.default);
        var left = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.AIREXIT), cc.v3(-1, Math.floor(mapData[0].length / 2))).getComponent(AirExit_1.default);
        var right = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.AIREXIT), cc.v3(mapData.length, Math.floor(mapData[0].length / 2))).getComponent(AirExit_1.default);
        this.airExits.push(top);
        this.airExits.push(bottom);
        this.airExits.push(left);
        this.airExits.push(right);
        for (var i = 0; i < this.airExits.length; i++) this.airExits[i].init(i, i < 2 ? mapData.length + 2 : mapData[0].length + 2);
      };
      BuildingManager.prototype.addDoor = function(mapDataStr, indexPos, isDecorate) {
        var dir = parseInt(mapDataStr[1]);
        isNaN(dir) && ("Da" == mapDataStr ? dir = 8 : "Db" == mapDataStr ? dir = 9 : "Dc" == mapDataStr ? dir = 10 : "Dd" == mapDataStr && (dir = 11));
        var door = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.DOOR), indexPos).getComponent(Door_1.default);
        door.isDoor = true;
        door.dir = dir % 4;
        door.isEmpty = dir > 3 && dir < 8;
        door.isLock = dir > 7;
        door.isDecorate = isDecorate;
        this.doors.push(door);
      };
      BuildingManager.prototype.setDoors = function(isOpen, immediately) {
        for (var _i = 0, _a = this.doors; _i < _a.length; _i++) {
          var door = _a[_i];
          door.setOpen(isOpen, immediately);
        }
        for (var _b = 0, _c = this.airExits; _b < _c.length; _b++) {
          var air = _c[_b];
          air.changeStatus(isOpen ? AirExit_1.default.STATUS_OPEN : AirExit_1.default.STATUS_CLOSE);
        }
        if (this.exitdoors.length > 0) for (var _d = 0, _e = this.exitdoors; _d < _e.length; _d++) {
          var ed = _e[_d];
          isOpen ? ed.openGate() : ed.closeGate();
        }
        if (this.portals.length > 0) for (var _f = 0, _g = this.portals; _f < _g.length; _f++) {
          var ed = _g[_f];
          isOpen ? ed.openGate() : ed.closeGate();
        }
      };
      BuildingManager.prototype.addDirWalls = function(mapDataStr, indexPos, levelData, onlyShow) {
        var node = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.WALL), indexPos);
        var wall = node.getComponent(Wall_1.default);
        wall.init(mapDataStr, levelData, onlyShow);
      };
      BuildingManager.prototype.addFurnitures = function(dungeon, mapDataStr, indexPos) {
        var data = new FurnitureData_1.default();
        data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.STOOL]);
        switch (mapDataStr) {
         case "Z2":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.DESK]);
          break;

         case "Z3":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.TV]);
          break;

         case "Z4":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.SOFA]);
          break;

         case "Z5":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.DINNER_TABLE]);
          break;

         case "Z6":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.FRIDGE]);
          break;

         case "Z7":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.WASHING_MACHINE]);
          break;

         case "Z8":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.CUPBOARD]);
          break;

         case "Z9":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.STOOL]);
          break;

         case "Za":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.COOKING_BENCH]);
          break;

         case "Zb":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.COOKING_BENCH_1]);
          break;

         case "Zc":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.COOKING_BENCH_2]);
          break;

         case "Zd":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.COOKING_BENCH_3]);
          break;

         case "Ze":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.BATH]);
          break;

         case "Zf":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.LITTLE_TABLE]);
          break;

         case "Zg":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.LITTLE_TABLE_1]);
          break;

         case "Zh":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.LITTLE_TABLE_2]);
          break;

         case "Zi":
          data.valueCopy(Logic_1.default.furnitures[Furniture_1.default.FISHTANK]);
        }
        var save = LocalStorage_1.default.getFurnitureData(data.id);
        data.valueCopy(save);
        if (!data.purchased) return;
        var building;
        if ("Z3" == mapDataStr) building = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.ROOMTV), indexPos); else if ("Z4" == mapDataStr) {
          building = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.ROOMSOFA), indexPos);
          building.zIndex = IndexZ_1.default.ACTOR;
        } else if ("Z9" == mapDataStr) {
          building = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.ROOMSTOOL), indexPos);
          building.getComponent(RoomStool_1.default).init(indexPos, dungeon);
        } else if ("Zi" == mapDataStr) {
          building = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.ROOMFISHTANK), indexPos);
          building.getComponent(RoomFishtank_1.default).init(indexPos);
        } else building = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.FURNITURE), indexPos);
        var script = building.getComponent(Furniture_1.default);
        script.init(data);
      };
      BuildingManager.prototype.addHitBuilding = function(dungeon, mapDataStr, indexPos) {
        var isCustom = false;
        var hitBuilding = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.HITBUILDING), indexPos);
        var h = hitBuilding.getComponent(HitBuilding_1.default);
        h.setDefaultPos(indexPos);
        var resName = "car";
        var equipmentNames = [];
        var itemNames = [];
        var maxhealth = 9999;
        var scale = 4;
        var colliderExtrude = 0;
        switch (mapDataStr) {
         case "H0":
          resName = "car";
          equipmentNames = [ "shield001" ];
          itemNames = [];
          maxhealth = 5;
          scale = 8;
          colliderExtrude = 3;
        }
        h.init(dungeon, resName, itemNames, equipmentNames, maxhealth, maxhealth, scale, isCustom, colliderExtrude);
        var saveHit = Logic_1.default.mapManager.getCurrentMapBuilding(h.data.defaultPos);
        saveHit ? h.init(dungeon, resName, itemNames, equipmentNames, maxhealth, saveHit.currentHealth, scale, isCustom, colliderExtrude) : Logic_1.default.mapManager.setCurrentBuildingData(h.data.clone());
      };
      BuildingManager.prototype.addFallStone = function(pos, isAuto, withFire) {
        if (!this.node) return;
        var stone = cc.instantiate(Logic_1.default.getBuildings(BuildingManager_1.FALLSTONE));
        var stoneScript = stone.getComponent(FallStone_1.default);
        stoneScript.isAuto = isAuto;
        stone.parent = this.node;
        stone.position = pos;
        stone.zIndex = IndexZ_1.default.FLOOR;
        stoneScript.isAuto && stoneScript.fall(withFire);
      };
      BuildingManager.prototype.addLighteningFall = function(pos, isTrigger, needPrepare, showArea, damagePoint) {
        if (!this.node) return;
        var fall = cc.instantiate(Logic_1.default.getBuildings(BuildingManager_1.LIGHTENINGFALL));
        var fallScript = fall.getComponent(MagicLightening_1.default);
        fall.parent = this.node;
        fall.position = pos;
        fall.zIndex = IndexZ_1.default.FLOOR;
        fallScript.isTrigger = isTrigger;
        fallScript.isTrigger || fallScript.fall(needPrepare, showArea, damagePoint);
      };
      BuildingManager.prototype.addTwineGrass = function(pos, isAuto) {
        if (!this.node) return;
        var grass = cc.instantiate(Logic_1.default.getBuildings(BuildingManager_1.DRYADTWINE));
        var dryadGrassScript = grass.getComponent(DryadGrass_1.default);
        dryadGrassScript.isAuto = isAuto;
        grass.parent = this.node;
        grass.position = pos;
        grass.zIndex = IndexZ_1.default.getActorZIndex(pos);
        dryadGrassScript.isAuto && dryadGrassScript.fall();
      };
      BuildingManager.prototype.addEnergyShield = function(player) {
        if (!this.node) return null;
        var shield = this.addBuilding(Logic_1.default.getBuildings(BuildingManager_1.ENERGYSHIELD), player.pos);
        shield.position = player.node.position.clone();
        var script = shield.getComponent(EnergyShield_1.default);
        var scale = 8 + Math.floor(Logic_1.default.playerData.OilGoldData.level / 5);
        script.init(player, 20 + 5 * Logic_1.default.playerData.OilGoldData.level, scale);
        return script;
      };
      BuildingManager.prototype.addPracticeEquipItem = function(dungeon, indexPos) {
        if (dungeon) {
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_SWORD, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(-2, 0))));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_SPEAR, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(-1, 0))));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_DAGGER, Dungeon_1.default.getPosInMap(indexPos));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_HAMMER, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(1, 0))));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_LONG_CROSS, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(2, 0))));
          dungeon.addEquipment(EquipmentManager_1.default.WEAPON_WOOD_LONG_STICK, Dungeon_1.default.getPosInMap(indexPos.add(cc.v3(-3, 0))));
        }
      };
      BuildingManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      BuildingManager.prototype.updateLogic = function(dt, player) {
        if (this.isCheckTimeDelay(dt)) {
          var distance = 200;
          var building = null;
          for (var i = this.interactBuildings.length - 1; i >= 0; i--) {
            var b = this.interactBuildings[i];
            b.highLight(false);
            if (b.isTaken || !b.isValid || b.data.currentHealth <= 0) continue;
            var d = Logic_1.default.getDistanceNoSqrt(b.node.position, player.node.position);
            if (d < distance) {
              distance = d;
              building = b;
            }
          }
          if (distance < 96 && building) {
            building.highLight(true);
            this.lastInteractBuilding = building;
          } else this.lastInteractBuilding = null;
        }
      };
      var BuildingManager_1;
      BuildingManager.AIREXIT = "AirExit";
      BuildingManager.AIRTRANSPORT = "AirTransport";
      BuildingManager.AIRTRANSPORTMODEL = "AirTransportModel";
      BuildingManager.BED = "Bed";
      BuildingManager.BOX = "Box";
      BuildingManager.CAMPFIRE = "CampFire";
      BuildingManager.CHEST = "Chest";
      BuildingManager.COAST = "Coast";
      BuildingManager.DARKNESS = "Darkness";
      BuildingManager.INTERACTBUILDING = "InteractBuilding";
      BuildingManager.DECORATIONFLOOR = "DecorationFloor";
      BuildingManager.DECORATIONOVERHEAD = "DecorationOverHead";
      BuildingManager.DOOR = "Door";
      BuildingManager.DRYADTWINE = "DryadTwine";
      BuildingManager.EMPLACEMENT = "Emplacement";
      BuildingManager.EXITDOOR = "ExitDoor";
      BuildingManager.FALLSTONE = "FallStone";
      BuildingManager.FOOTBOARD = "FootBoard";
      BuildingManager.HITBUILDING = "HitBuilding";
      BuildingManager.ICEDEMONTHRON = "IceDemonThron";
      BuildingManager.LIGHTENINGFALL = "LighteningFall";
      BuildingManager.MARTCASHIER = "MartCashier";
      BuildingManager.MARTFRIDGE = "MartFridge";
      BuildingManager.MARTSHELVES = "MartShelves";
      BuildingManager.MARTTABLE = "MartTable";
      BuildingManager.MIST = "Mist";
      BuildingManager.PORTAL = "Portal";
      BuildingManager.ROOMBED = "RoomBed";
      BuildingManager.ROOMTV = "RoomTv";
      BuildingManager.ROOMSTOOL = "RoomStool";
      BuildingManager.ROOMSOFA = "RoomSofa";
      BuildingManager.ROOMFISHTANK = "RoomFishtank";
      BuildingManager.SAVEPOINT = "SavePoint";
      BuildingManager.SAW = "Saw";
      BuildingManager.SHIPSTAIRS = "Shipstairs";
      BuildingManager.SHOP = "Shop";
      BuildingManager.SHOPMART = "ShopMart";
      BuildingManager.SHOPTABLE = "ShopTable";
      BuildingManager.TAROTTABLE = "TarotTable";
      BuildingManager.TRAP = "Trap";
      BuildingManager.WALL = "Wall";
      BuildingManager.WATER = "Water";
      BuildingManager.LAMPLIGHT = "LampLight";
      BuildingManager.LAMPSUN = "LampSun";
      BuildingManager.LAMPSHIP = "LampShip";
      BuildingManager.LAMPSEARCH = "LampSearch";
      BuildingManager.LAMPFIREPAN = "LampFirePan";
      BuildingManager.LAMPTORCH = "LampTorch";
      BuildingManager.LAMPROAD = "LampRoad";
      BuildingManager.LAMPFIREFLY = "LampFireFly";
      BuildingManager.LAMPDIRECT = "LampDirectLight";
      BuildingManager.MUSHROOM01 = "MushRoom01";
      BuildingManager.MUSHROOM02 = "MushRoom02";
      BuildingManager.MUSHROOM03 = "MushRoom03";
      BuildingManager.MUSHROOM04 = "MushRoom04";
      BuildingManager.GRASS01 = "Grass01";
      BuildingManager.GRASS02 = "Grass02";
      BuildingManager.GRASS03 = "Grass03";
      BuildingManager.GRASS04 = "Grass04";
      BuildingManager.WENTLINE = "WentLine";
      BuildingManager.CRACK = "Crack";
      BuildingManager.WATERCOLLIDER = "WaterCollider";
      BuildingManager.WATERFALL = "WaterFall";
      BuildingManager.ENERGYSHIELD = "EnergyShield";
      BuildingManager.FURNITURE = "Furniture";
      BuildingManager = BuildingManager_1 = __decorate([ ccclass ], BuildingManager);
      return BuildingManager;
    }(BaseManager_1.default);
    exports.default = BuildingManager;
    cc._RF.pop();
  }, {
    "../Boss/DryadGrass": "DryadGrass",
    "../Building/AirExit": "AirExit",
    "../Building/Box": "Box",
    "../Building/Building": "Building",
    "../Building/Chest": "Chest",
    "../Building/DecorationFloor": "DecorationFloor",
    "../Building/Door": "Door",
    "../Building/Emplacement": "Emplacement",
    "../Building/EnergyShield": "EnergyShield",
    "../Building/ExitDoor": "ExitDoor",
    "../Building/FallStone": "FallStone",
    "../Building/FootBoard": "FootBoard",
    "../Building/Furniture": "Furniture",
    "../Building/HitBuilding": "HitBuilding",
    "../Building/InteractBuilding": "InteractBuilding",
    "../Building/MagicLightening": "MagicLightening",
    "../Building/MartShelves": "MartShelves",
    "../Building/MgCrack": "MgCrack",
    "../Building/MgWentLine": "MgWentLine",
    "../Building/Portal": "Portal",
    "../Building/RoomBed": "RoomBed",
    "../Building/RoomFishtank": "RoomFishtank",
    "../Building/RoomStool": "RoomStool",
    "../Building/SavePoint": "SavePoint",
    "../Building/Saw": "Saw",
    "../Building/ShopTable": "ShopTable",
    "../Building/Wall": "Wall",
    "../Data/ExitData": "ExitData",
    "../Data/FurnitureData": "FurnitureData",
    "../Dungeon": "Dungeon",
    "../Effect/ShadowOfSight": "ShadowOfSight",
    "../Logic": "Logic",
    "../Utils/IndexZ": "IndexZ",
    "../Utils/LocalStorage": "LocalStorage",
    "../Utils/Utils": "Utils",
    "./BaseManager": "BaseManager",
    "./EquipmentManager": "EquipmentManager",
    "./LightManager": "LightManager",
    "./MonsterManager": "MonsterManager",
    "./NonPlayerManager": "NonPlayerManager"
  } ],
  Building: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "255a9MnBFxLp4C3tatPRINn", "Building");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Actor_1 = require("../Base/Actor");
    var BuildingData_1 = require("../Data/BuildingData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Building = function(_super) {
      __extends(Building, _super);
      function Building() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.data = new BuildingData_1.default();
        return _this;
      }
      Building.prototype.takeDamage = function(damage) {
        return false;
      };
      Building.prototype.addStatus = function(statusType, from) {};
      Building.prototype.getCenterPosition = function() {
        return this.node.position.clone();
      };
      Building.prototype.actorName = function() {
        return "";
      };
      Building.prototype.takeDizz = function(dizzDuration) {};
      Building.prototype.updateStatus = function(statusList, totalStatusData) {};
      Building.prototype.hideSelf = function(hideDuration) {};
      Building.prototype.updateDream = function(offset) {
        return 0;
      };
      Building.prototype.setLinearVelocity = function(movement) {};
      Building = __decorate([ ccclass ], Building);
      return Building;
    }(Actor_1.default);
    exports.default = Building;
    cc._RF.pop();
  }, {
    "../Base/Actor": "Actor",
    "../Data/BuildingData": "BuildingData"
  } ],
  BulletData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "081a6xA9tZAiZxbsh2+6iXp", "BulletData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("./DamageData");
    var FromData_1 = require("./FromData");
    var BulletData = function() {
      function BulletData() {
        this.speed = 0;
        this.isRect = 0;
        this.isRotate = 0;
        this.rotateAngle = 0;
        this.isLaser = 0;
        this.isDecelerate = 0;
        this.decelerateDelta = 0;
        this.delayDecelerate = 0;
        this.isBoom = 0;
        this.isPhysical = 0;
        this.delaytrack = 0;
        this.isTracking = 0;
        this.lifeTime = 0;
        this.size = 1;
        this.resName = "";
        this.lightName = "";
        this.resNameLaser = "";
        this.lightColor = "#ffffff";
        this.fixedRotation = 0;
        this.statusType = "";
        this.statusRate = 0;
        this.canBreakBuilding = 0;
        this.isInvincible = 0;
        this.damage = new DamageData_1.default();
        this.from = new FromData_1.default();
      }
      BulletData.prototype.valueCopy = function(data) {
        this.speed = data.speed ? data.speed : 0;
        this.isRect = data.isRect ? data.isRect : 0;
        this.isRotate = data.isRotate ? data.isRotate : 0;
        this.rotateAngle = data.rotateAngle ? data.rotateAngle : 0;
        this.isDecelerate = data.isDecelerate ? data.isDecelerate : 0;
        this.decelerateDelta = data.decelerateDelta ? data.decelerateDelta : 0;
        this.delayDecelerate = data.delayDecelerate ? data.delayDecelerate : 0;
        this.isLaser = data.isLaser ? data.isLaser : 0;
        this.isBoom = data.isBoom ? data.isBoom : 0;
        this.isTracking = data.isTracking ? data.isTracking : 0;
        this.isPhysical = data.isPhysical ? data.isPhysical : 0;
        this.delaytrack = data.delaytrack ? data.delaytrack : 0;
        this.fixedRotation = data.fixedRotation ? data.fixedRotation : 0;
        this.size = data.size ? data.size : 1;
        this.lifeTime = data.lifeTime ? data.lifeTime : 0;
        this.resName = data.resName ? data.resName : "";
        this.resNameLaser = data.resNameLaser ? data.resNameLaser : "";
        this.lightName = data.lightName ? data.lightName : "";
        this.statusType = data.statusType ? data.statusType : "";
        this.statusRate = data.statusRate ? data.statusRate : 0;
        this.canBreakBuilding = data.canBreakBuilding ? data.canBreakBuilding : 0;
        this.isInvincible = data.isInvincible ? data.isInvincible : 0;
        this.lightColor = data.lightColor ? data.lightColor : "#ffffff";
        this.damage.valueCopy(data.damage);
        this.from.valueCopy(data.from);
      };
      BulletData.prototype.clone = function() {
        var e = new BulletData();
        e.speed = this.speed;
        e.isRect = this.isRect;
        e.isRotate = this.isRotate;
        e.rotateAngle = this.rotateAngle;
        e.decelerateDelta = this.decelerateDelta;
        e.isDecelerate = this.isDecelerate;
        e.delayDecelerate = this.delayDecelerate;
        e.size = this.size;
        e.isLaser = this.isLaser;
        e.isBoom = this.isBoom;
        e.isTracking = this.isTracking;
        e.resName = this.resName;
        e.resNameLaser = this.resNameLaser;
        e.lightName = this.lightName;
        e.lightColor = this.lightColor;
        e.lifeTime = this.lifeTime;
        e.isPhysical = this.isPhysical;
        e.delaytrack = this.delaytrack;
        e.fixedRotation = this.fixedRotation;
        e.statusType = this.statusType;
        e.statusRate = this.statusRate;
        e.canBreakBuilding = this.canBreakBuilding;
        e.isInvincible = this.isInvincible;
        e.damage = this.damage.clone();
        e.from = this.from.clone();
        return e;
      };
      return BulletData;
    }();
    exports.default = BulletData;
    cc._RF.pop();
  }, {
    "./DamageData": "DamageData",
    "./FromData": "FromData"
  } ],
  Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d243aeNu+tEJJbz1ng6i61f", "Bullet");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var NonPlayer_1 = require("../NonPlayer");
    var Player_1 = require("../Player");
    var MeleeWeapon_1 = require("../MeleeWeapon");
    var DamageData_1 = require("../Data/DamageData");
    var Logic_1 = require("../Logic");
    var Boss_1 = require("../Boss/Boss");
    var BulletData_1 = require("../Data/BulletData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var HitBuilding_1 = require("../Building/HitBuilding");
    var Shield_1 = require("../Shield");
    var Wall_1 = require("../Building/Wall");
    var AreaOfEffect_1 = require("../Actor/AreaOfEffect");
    var AreaOfEffectData_1 = require("../Data/AreaOfEffectData");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var ExitDoor_1 = require("../Building/ExitDoor");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var InteractBuilding_1 = require("../Building/InteractBuilding");
    var EnergyShield_1 = require("../Building/EnergyShield");
    var MeleeShadowWeapon_1 = require("../MeleeShadowWeapon");
    var Utils_1 = require("../Utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Bullet = function(_super) {
      __extends(Bullet, _super);
      function Bullet() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.boom = null;
        _this.data = new BulletData_1.default();
        _this.dir = 0;
        _this.tagetPos = cc.v3(0, 0);
        _this.hv = cc.v3(0, 0);
        _this.isFromPlayer = false;
        _this.startPos = cc.v3(0, 0);
        _this.isTrackDelay = false;
        _this.isDecelerateDelay = false;
        _this.isHit = false;
        _this.isReserved = false;
        _this.skipTopwall = false;
        _this.aoeData = new AreaOfEffectData_1.default();
        _this.currentLinearVelocity = cc.v2(0, 0);
        _this.timeDelay = 0;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Bullet.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.rigidBody = this.getComponent(cc.RigidBody);
        this.circleCollider = this.getComponent(cc.CircleCollider);
        this.boxCollider = this.getComponent(cc.BoxCollider);
        this.circlePCollider = this.getComponent(cc.PhysicsCircleCollider);
        this.boxPCollider = this.getComponent(cc.PhysicsBoxCollider);
        this.sprite = this.node.getChildByName("sprite");
        this.sprite.opacity = 255;
        this.sprite.angle = 0;
        this.light = this.node.getChildByName("light");
        this.light.opacity = 0;
        this.laserNode = this.node.getChildByName("laser");
        this.laserSpriteNode = this.laserNode.getChildByName("sprite");
        this.laserLightSprite = this.laserNode.getChildByName("light").getComponent(cc.Sprite);
        this.laserHeadSprite = this.laserNode.getChildByName("head").getComponent(cc.Sprite);
      };
      Bullet.prototype.onEnable = function() {
        this.tagetPos = cc.v3(0, 0);
        this.rigidBody.linearVelocity = cc.v2(0, 0);
        this.currentLinearVelocity = cc.v2(0, 0);
        this.sprite = this.node.getChildByName("sprite");
        this.sprite.opacity = 255;
        this.sprite.angle = 0;
        this.light = this.node.getChildByName("light");
        this.light.opacity = 0;
        this.laserNode = this.node.getChildByName("laser");
        this.laserSpriteNode = this.laserNode.getChildByName("sprite");
        this.laserLightSprite = this.laserNode.getChildByName("light").getComponent(cc.Sprite);
        this.laserHeadSprite = this.laserNode.getChildByName("head").getComponent(cc.Sprite);
        this.isTrackDelay = false;
        this.isDecelerateDelay = false;
        this.isHit = false;
        this.isReserved = false;
      };
      Bullet.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) {
          this.rigidBody.linearVelocity = cc.v2(0, 0);
          return;
        }
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .5) {
          this.checkTraking();
          this.checkTimeDelay = 0;
        }
        1 == this.data.fixedRotation && (this.node.angle = 0);
        if (1 == this.data.isDecelerate && this.isDecelerateDelay) {
          this.timeDelay += dt;
          if (this.timeDelay > .016) {
            this.timeDelay = 0;
            var d = this.data.decelerateDelta > 0 ? this.data.decelerateDelta : 1;
            this.currentLinearVelocity = this.currentLinearVelocity.lerp(cc.v2(0, 0), d * dt);
          }
        }
        this.rigidBody.linearVelocity = this.currentLinearVelocity;
      };
      Bullet.prototype.checkTraking = function() {
        if (1 == this.data.isTracking && 1 != this.data.isLaser && this.isTrackDelay && !this.isHit) {
          var pos = this.hasNearEnemy();
          if (!pos.equals(cc.Vec3.ZERO)) {
            this.rotateCollider(cc.v2(pos.x, pos.y));
            this.hv = pos;
            this.currentLinearVelocity = cc.v2(this.data.speed * this.hv.x, this.data.speed * this.hv.y);
          }
        }
      };
      Bullet.prototype.changeBullet = function(data) {
        this.data = data;
        this.changeRes(data.resName, data.lightName, data.lightColor);
        this.circleCollider.enabled = 1 != data.isRect;
        this.boxCollider.enabled = 1 == data.isRect;
        this.circlePCollider.enabled = 1 != data.isRect;
        this.boxPCollider.enabled = 1 == data.isRect;
        this.light.position = 1 == data.isRect ? cc.v3(8, 0) : cc.v3(0, 0);
        this.node.scale = data.size > 0 ? data.size : 1;
        if (data.size > 1) {
          this.circlePCollider.radius = this.circlePCollider.radius / this.node.scale;
          this.boxPCollider.size.width = this.boxPCollider.size.width / this.node.scale;
          this.boxPCollider.size.height = this.boxPCollider.size.height / this.node.scale;
        }
        if (this.circlePCollider.enabled) {
          this.circlePCollider.sensor = 0 == data.isPhysical;
          this.circlePCollider.apply();
        }
        if (this.boxPCollider.enabled) {
          this.boxPCollider.sensor = 0 == data.isPhysical;
          this.boxPCollider.apply();
        }
        this.initLaser();
      };
      Bullet.prototype.initLaser = function() {
        var _this = this;
        this.laserNode.active = 1 == this.data.isLaser;
        if (1 != this.data.isLaser) return;
        this.laserNode || (this.laserNode = this.node.getChildByName("laser"));
        this.sprite.opacity = 0;
        this.sprite.getComponent(cc.Sprite).spriteFrame = null;
        this.sprite.angle = 0;
        this.laserNode.opacity = 0;
        this.laserSpriteNode.getComponent(cc.Sprite).spriteFrame = this.getSpriteFrameByName(this.data.resNameLaser);
        this.laserHeadSprite.spriteFrame = this.getSpriteFrameByName(this.data.resNameLaser, "head");
        this.laserNode.stopAllActions();
        cc.tween(this.laserLightSprite.node).repeatForever(cc.tween().delay(.05).call(function() {
          _this.laserLightSprite.spriteFrame = _this.getSpriteFrameByName(_this.data.resNameLaser, "light001");
        }).delay(.05).call(function() {
          _this.laserLightSprite.spriteFrame = _this.getSpriteFrameByName(_this.data.resNameLaser, "light002");
        }).delay(.05).call(function() {
          _this.laserLightSprite.spriteFrame = _this.getSpriteFrameByName(_this.data.resNameLaser, "light003");
        })).start();
      };
      Bullet.prototype.showLaser = function() {
        var _this = this;
        if (1 != this.data.isLaser) return;
        var endPos = this.node.convertToWorldSpaceAR(cc.v3(0, 0));
        var distance = Logic_1.default.getDistance(this.startPos, endPos);
        var offset = 32;
        if (distance <= 0) {
          distance = 0;
          offset = 0;
        }
        var finalwidth = distance - offset;
        this.laserSpriteNode.width = finalwidth / this.node.scaleY;
        this.laserSpriteNode.setPosition(cc.v3(-finalwidth / this.node.scaleY, 0));
        this.laserHeadSprite.node.setPosition(cc.v3(-finalwidth / this.node.scaleY, 0));
        this.laserNode.opacity = 255;
        this.sprite.opacity = 0;
        this.laserNode.scaleX = 1;
        this.laserNode.scaleY = 1;
        this.laserLightSprite.node.setPosition(-16 * this.node.scaleY, 0);
        cc.tween(this.laserNode).to(.1, {
          scale: 1
        }).to(.1, {
          scaleY: 0
        }).delay(.1).call(function() {
          _this.shooter.addDestroyBullet(_this.node);
        }).start();
        cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
          detail: {
            name: AudioPlayer_1.default.REMOTE_LASER
          }
        });
      };
      Bullet.prototype.changeRes = function(resName, lightName, lightColor, suffix) {
        this.sprite || (this.sprite = this.node.getChildByName("sprite"));
        if (!this.sprite || resName.length < 1) return;
        var s1 = this.getSpriteFrameByName(resName, suffix);
        var s2 = this.getSpriteFrameByName(lightName, suffix);
        s1 && (this.sprite.getComponent(cc.Sprite).spriteFrame = s1);
        if (s2) {
          this.light.getComponent(cc.Sprite).spriteFrame = s2;
          var color = cc.color(255, 255, 255).fromHEX(lightColor);
          this.light.color = color;
        }
      };
      Bullet.prototype.getSpriteFrameByName = function(resName, suffix, needDefaultSuffix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(needDefaultSuffix ? resName + "anim000" : resName));
        return spriteFrame;
      };
      Bullet.prototype.MeleeFinish = function() {
        this.shooter.addDestroyBullet(this.node);
      };
      Bullet.prototype.showBullet = function(hv) {
        this.hv = hv;
        this.rotateCollider(cc.v2(this.hv.x, this.hv.y));
        this.fire(this.hv.clone());
      };
      Bullet.prototype.BulletDestory = function() {
        this.shooter.addDestroyBullet(this.node);
      };
      Bullet.prototype.fire = function(hv) {
        var _this = this;
        this.rigidBody || (this.rigidBody = this.getComponent(cc.RigidBody));
        this.currentLinearVelocity = cc.v2(this.data.speed * hv.x, this.data.speed * hv.y);
        this.rigidBody.linearVelocity = this.currentLinearVelocity;
        this.startPos = this.node.convertToWorldSpaceAR(cc.v3(0, 0));
        this.sprite.stopAllActions();
        this.node.stopAllActions();
        var ss = this.sprite.getComponent(cc.Sprite);
        var idletween = cc.tween().delay(.1).call(function() {
          ss.spriteFrame = _this.getSpriteFrameByName(_this.data.resName, "anim000", true);
        }).delay(.1).call(function() {
          ss.spriteFrame = _this.getSpriteFrameByName(_this.data.resName, "anim001", true);
        }).delay(.1).call(function() {
          ss.spriteFrame = _this.getSpriteFrameByName(_this.data.resName, "anim002", true);
        });
        var spawntween = cc.tween(this.sprite).parallel(idletween, cc.tween().by(.3, {
          angle: this.data.rotateAngle > 0 ? this.data.rotateAngle : 15
        }));
        this.data.isRotate > 0 ? cc.tween(this.sprite).repeatForever(spawntween).start() : cc.tween(this.sprite).repeatForever(idletween).start();
        this.data.lifeTime > 0 ? this.scheduleOnce(function() {
          _this.bulletHit();
        }, this.data.lifeTime) : this.scheduleOnce(function() {
          _this.bulletHit();
        }, 30);
        this.isTrackDelay = false;
        1 == this.data.isTracking && this.scheduleOnce(function() {
          _this.isTrackDelay = true;
        }, this.data.delaytrack);
        this.isDecelerateDelay = false;
        1 == this.data.isDecelerate && this.scheduleOnce(function() {
          _this.isDecelerateDelay = true;
        }, this.data.delayDecelerate);
      };
      Bullet.prototype.start = function() {};
      Bullet.prototype.onBeginContact = function(contact, selfCollider, otherCollider) {
        var isDestory = true;
        (otherCollider.tag == ColliderTag_1.ColliderTag.PLAYER || otherCollider.tag == ColliderTag_1.ColliderTag.NONPLAYER || otherCollider.tag == ColliderTag_1.ColliderTag.BOSS || otherCollider.tag == ColliderTag_1.ColliderTag.BULLET || otherCollider.tag == ColliderTag_1.ColliderTag.WARTER || otherCollider.sensor || otherCollider.tag == ColliderTag_1.ColliderTag.WALL_TOP || this.data.isInvincible > 0) && (isDestory = false);
        isDestory && this.bulletHit();
      };
      Bullet.prototype.onCollisionEnter = function(other, self) {
        var isAttack = true;
        this.isFromPlayer || other.tag != ColliderTag_1.ColliderTag.NONPLAYER && other.tag != ColliderTag_1.ColliderTag.BOSS || (isAttack = false);
        !this.isFromPlayer || other.tag != ColliderTag_1.ColliderTag.PLAYER && other.tag != ColliderTag_1.ColliderTag.GOODNONPLAYER || (isAttack = false);
        other.tag == ColliderTag_1.ColliderTag.BULLET && (isAttack = false);
        isAttack && this.attacking(other.node, other.tag);
      };
      Bullet.prototype.attacking = function(attackTarget, tag) {
        if (!attackTarget || this.isHit) return;
        var damage = new DamageData_1.default();
        var damageSuccess = false;
        damage.valueCopy(this.data.damage);
        damage.isRemote = true;
        var isDestory = false;
        if (this.data.isInvincible > 0) isDestory = false; else if (tag == ColliderTag_1.ColliderTag.NONPLAYER || tag == ColliderTag_1.ColliderTag.GOODNONPLAYER) {
          var monster = attackTarget.getComponent(NonPlayer_1.default);
          if (monster && !monster.sc.isDied) {
            damageSuccess = monster.takeDamage(damage);
            damageSuccess && this.addTargetAllStatus(monster, new FromData_1.default());
            isDestory = true;
          }
        } else if (tag == ColliderTag_1.ColliderTag.PLAYER) {
          var player = attackTarget.getComponent(Player_1.default);
          if (player && !player.sc.isDied) {
            var isReverse = false;
            player.shield.Status == Shield_1.default.STATUS_PARRY && 1 == player.shield.data.isReflect && (isReverse = this.revserseBullet(player.node.convertToWorldSpaceAR(cc.Vec2.ZERO)));
            if (!isReverse) {
              damageSuccess = player.takeDamage(damage, this.data.from);
              damageSuccess && this.addTargetAllStatus(player, this.data.from);
              isDestory = true;
            }
          }
        } else if (tag == ColliderTag_1.ColliderTag.AOE) {
          var aoe = attackTarget.getComponent(AreaOfEffect_1.default);
          aoe && aoe.IsAttacking && aoe.data.canBreakBullet && (isDestory = true);
        } else if (tag == ColliderTag_1.ColliderTag.BOSS) {
          var boss = attackTarget.getComponent(Boss_1.default);
          if (boss && !boss.sc.isDied) {
            damageSuccess = boss.takeDamage(damage);
            damageSuccess && this.addTargetAllStatus(boss, new FromData_1.default());
            isDestory = true;
          }
        } else if (tag == ColliderTag_1.ColliderTag.MELEE) {
          var meleeWeapon = attackTarget.getComponent(MeleeWeapon_1.default);
          var shadowWeapon = void 0;
          if (!meleeWeapon) {
            shadowWeapon = attackTarget.getComponent(MeleeShadowWeapon_1.default);
            shadowWeapon && (meleeWeapon = shadowWeapon.meleeWeapon);
          }
          if (meleeWeapon && meleeWeapon.IsAttacking && !this.isFromPlayer) {
            var isReverse = false;
            if (meleeWeapon.IsReflect) {
              var n = shadowWeapon ? shadowWeapon.meleeWeapon.node : meleeWeapon.node;
              isReverse = this.revserseBullet(n.convertToWorldSpaceAR(cc.Vec2.ZERO));
            }
            isReverse || (isDestory = true);
          }
        } else if (tag == ColliderTag_1.ColliderTag.BUILDING || tag == ColliderTag_1.ColliderTag.WALL) {
          var interactBuilding = attackTarget.getComponent(InteractBuilding_1.default);
          if (1 == this.data.canBreakBuilding && interactBuilding) {
            damageSuccess = true;
            interactBuilding.takeDamage(damage);
          }
          if (!damageSuccess) {
            var hitBuilding = attackTarget.getComponent(HitBuilding_1.default);
            if (1 == this.data.canBreakBuilding && hitBuilding) {
              damageSuccess = true;
              hitBuilding.takeDamage(damage);
            }
          }
          if (!damageSuccess) {
            var wall = attackTarget.getComponent(Wall_1.default);
            wall && (isDestory = wall.isTop() ? !this.skipTopwall : wall.isSide());
            isDestory && attackTarget.getComponent(ExitDoor_1.default) && (isDestory = false);
          }
        } else if (!this.isFromPlayer && tag == ColliderTag_1.ColliderTag.ENERGY_SHIELD) {
          var shield = attackTarget.getComponent(EnergyShield_1.default);
          shield && shield.isValid && (damageSuccess = shield.takeDamage(damage));
          damageSuccess && (isDestory = true);
        }
        isDestory && this.bulletHit();
      };
      Bullet.prototype.revserseBullet = function(targetWorldPos) {
        if (this.isReserved) {
          this.isReserved = true;
          return false;
        }
        if (1 != this.data.isLaser) {
          var angle = -180 + Logic_1.default.getRandomNum(0, 10) - 20;
          this.node.angle += angle;
          this.currentLinearVelocity = this.currentLinearVelocity.rotate(angle * Math.PI / 180);
          this.isFromPlayer = true;
          this.data.isTracking = 0;
          return true;
        }
        return false;
      };
      Bullet.prototype.bulletHit = function() {
        if (this.isHit) return;
        this.isHit = true;
        if (this.anim && !this.anim.getAnimationState("Bullet001Hit").isPlaying) {
          this.currentLinearVelocity = cc.v2(0, 0);
          this.rigidBody.linearVelocity = cc.v2(0, 0);
          1 == this.data.isLaser ? this.showLaser() : this.anim.play("Bullet001Hit");
        }
        if (this.data.isBoom > 0) {
          var boom = cc.instantiate(this.boom).getComponent(AreaOfEffect_1.default);
          if (boom) {
            boom.show(this.node.parent, this.node.position, this.hv, 0, new AreaOfEffectData_1.default().init(1, .2, 0, 0, IndexZ_1.default.OVERHEAD, !this.isFromPlayer, true, true, false, false, new DamageData_1.default(2), FromData_1.default.getClone("\u7206\u70b8", "boom000anim004"), []));
            cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
              detail: {
                name: AudioPlayer_1.default.BOOM
              }
            });
            cc.director.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
              detail: {
                isHeavyShaking: true
              }
            });
          }
        }
        if (this.aoePrefab) {
          var aoe = cc.instantiate(this.aoePrefab).getComponent(AreaOfEffect_1.default);
          aoe && aoe.show(this.node.parent, this.node.position, this.hv, 0, this.aoeData);
        }
      };
      Bullet.prototype.hasNearEnemy = function() {
        if (1 != this.data.isTracking || 1 == this.data.isLaser || !this.dungeon) return cc.Vec3.ZERO;
        return ActorUtils_1.default.getDirectionFromNearestEnemy(this.node.position, !this.isFromPlayer, this.dungeon, false, 500);
      };
      Bullet.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        if (1 == this.data.fixedRotation) return;
        this.node.angle = Utils_1.default.getRotateAngle(direction, this.node.scaleX < 0);
      };
      Bullet.prototype.addTargetAllStatus = function(target, from) {
        this.addTargetStatus(this.data.damage.iceRate, target, StatusManager_1.default.FROZEN, from);
        this.addTargetStatus(this.data.damage.fireRate, target, StatusManager_1.default.BURNING, from);
        this.addTargetStatus(this.data.damage.lighteningRate, target, StatusManager_1.default.DIZZ, from);
        this.addTargetStatus(this.data.damage.toxicRate, target, StatusManager_1.default.TOXICOSIS, from);
        this.addTargetStatus(this.data.damage.curseRate, target, StatusManager_1.default.CURSING, from);
        this.addTargetStatus(this.data.damage.realRate, target, StatusManager_1.default.BLEEDING, from);
        this.addTargetStatus(this.data.statusRate, target, this.data.statusType, from);
      };
      Bullet.prototype.addTargetStatus = function(rate, target, statusType, from) {
        Logic_1.default.getRandomNum(0, 100) < rate && target.addStatus(statusType, from);
      };
      __decorate([ property(cc.Prefab) ], Bullet.prototype, "boom", void 0);
      Bullet = __decorate([ ccclass ], Bullet);
      return Bullet;
    }(cc.Component);
    exports.default = Bullet;
    cc._RF.pop();
  }, {
    "../Actor/AreaOfEffect": "AreaOfEffect",
    "../Actor/ColliderTag": "ColliderTag",
    "../Boss/Boss": "Boss",
    "../Building/EnergyShield": "EnergyShield",
    "../Building/ExitDoor": "ExitDoor",
    "../Building/HitBuilding": "HitBuilding",
    "../Building/InteractBuilding": "InteractBuilding",
    "../Building/Wall": "Wall",
    "../Data/AreaOfEffectData": "AreaOfEffectData",
    "../Data/BulletData": "BulletData",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../MeleeShadowWeapon": "MeleeShadowWeapon",
    "../MeleeWeapon": "MeleeWeapon",
    "../NonPlayer": "NonPlayer",
    "../Player": "Player",
    "../Shield": "Shield",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "../Utils/Utils": "Utils"
  } ],
  CameraControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aaca098lw9M94SueX+ajVM7", "CameraControl");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("./Dungeon");
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CameraControl = function(_super) {
      __extends(CameraControl, _super);
      function CameraControl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.dungeon = null;
        _this.isShaking = false;
        _this.isHeavyShaking = false;
        _this.offsetIndex = 0;
        _this.offsetArr = [ cc.v3(0, 2), cc.v3(0, 2), cc.v3(0, -3), cc.v3(0, -3), cc.v3(1, 2), cc.v3(1, 2), cc.v3(-1, -1), cc.v3(-1, -1) ];
        _this.offsetArr1 = [ cc.v3(0, 3), cc.v3(0, 3), cc.v3(0, -6), cc.v3(0, -6), cc.v3(3, 6), cc.v3(3, 6), cc.v3(-3, -3), cc.v3(-3, -3) ];
        return _this;
      }
      CameraControl.prototype.onLoad = function() {
        var _this = this;
        this.camera = this.getComponent(cc.Camera);
        cc.director.on(EventHelper_1.EventHelper.CAMERA_SHAKE, function(event) {
          _this.shakeCamera(event.detail.isHeavyShaking);
        });
        cc.director.on(EventHelper_1.EventHelper.CAMERA_LOOK, function(event) {
          _this.followPlayer(true);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN, function(event) {
          _this.dungeon && (_this.dungeon.CameraZoom = Dungeon_1.default.DEFAULT_ZOOM_MAX);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_OUT, function(event) {
          _this.dungeon && (_this.dungeon.CameraZoom = _this.dungeon.needZoomIn ? Dungeon_1.default.DEFAULT_ZOOM_MIN : Dungeon_1.default.DEFAULT_ZOOM);
        });
      };
      CameraControl.prototype.onEnable = function() {};
      CameraControl.prototype.onDisable = function() {};
      CameraControl.prototype.start = function() {};
      CameraControl.prototype.lateUpdate = function() {
        if (!this.dungeon.player) return;
        this.followPlayer(false);
        this.camera.zoomRatio = this.lerpNumber(this.camera.zoomRatio, this.dungeon.CameraZoom, .05);
      };
      CameraControl.prototype.followPlayer = function(isDirect) {
        if (!this.dungeon || !this.dungeon.player) return;
        var xmax = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE - 4, 0)).x;
        var xmin = Dungeon_1.default.getPosInMap(cc.v3(3, 0)).x;
        var ymax = Dungeon_1.default.getPosInMap(cc.v3(0, Dungeon_1.default.HEIGHT_SIZE - 3)).y;
        var ymin = Dungeon_1.default.getPosInMap(cc.v3(0, 2)).y;
        var offset = cc.v3(0, 0);
        this.dungeon.player.node.x < xmin && (offset.x = xmin - this.dungeon.player.node.x);
        this.dungeon.player.node.x > xmax && (offset.x = xmax - this.dungeon.player.node.x);
        this.dungeon.player.node.y < ymin && (offset.y = ymin - this.dungeon.player.node.y);
        this.dungeon.player.node.y > ymax && (offset.y = ymax - this.dungeon.player.node.y);
        var targetPos = this.dungeon.node.convertToWorldSpaceAR(this.dungeon.player.getCenterPosition().addSelf(offset));
        this.node.position = isDirect ? this.node.parent.convertToNodeSpaceAR(targetPos) : this.lerp(this.node.position, this.node.parent.convertToNodeSpaceAR(targetPos), .1);
        if (this.isShaking) {
          this.offsetIndex > this.offsetArr.length - 1 && (this.offsetIndex = 0);
          this.node.position = this.node.position.addSelf(this.isHeavyShaking ? this.offsetArr1[this.offsetIndex] : this.offsetArr[this.offsetIndex]);
          this.offsetIndex++;
        }
      };
      CameraControl.prototype.shakeCamera = function(isHeavyShaking) {
        var _this = this;
        if (!this.node) return;
        this.isHeavyShaking = isHeavyShaking;
        this.isShaking = true;
        this.scheduleOnce(function() {
          _this.isShaking = false;
        }, .2);
      };
      CameraControl.prototype.lerpNumber = function(a, b, r) {
        return a + (b - a) * r;
      };
      CameraControl.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      __decorate([ property(Dungeon_1.default) ], CameraControl.prototype, "dungeon", void 0);
      CameraControl = __decorate([ ccclass ], CameraControl);
      return CameraControl;
    }(cc.Component);
    exports.default = CameraControl;
    cc._RF.pop();
  }, {
    "./Dungeon": "Dungeon",
    "./EventHelper": "EventHelper"
  } ],
  CampFire: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1c424MJYhhGnYiXSF5IIdkC", "CampFire");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var FromData_1 = require("../Data/FromData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var Player_1 = require("../Player");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CampFire = function(_super) {
      __extends(CampFire, _super);
      function CampFire() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isAddTime = true;
        _this.timeDelay = 0;
        return _this;
      }
      CampFire.prototype.onCollisionStay = function(other, self) {
        if (other.tag == ColliderTag_1.ColliderTag.PLAYER && this.isAddTime) {
          this.isAddTime = false;
          var player = other.getComponent(Player_1.default);
          player && player.addStatus(StatusManager_1.default.CAMP_FIRE, new FromData_1.default());
        }
      };
      CampFire.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > 5) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      CampFire.prototype.update = function(dt) {
        this.isTimeDelay(dt) && (this.isAddTime = true);
      };
      CampFire = __decorate([ ccclass ], CampFire);
      return CampFire;
    }(Building_1.default);
    exports.default = CampFire;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Data/FromData": "FromData",
    "../Manager/StatusManager": "StatusManager",
    "../Player": "Player",
    "./Building": "Building"
  } ],
  CaptainSword: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e541b/KaoRBdL9VgXHoN6dM", "CaptainSword");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var FromData_1 = require("../Data/FromData");
    var Captain_1 = require("./Captain");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CaptainSword = function(_super) {
      __extends(CaptainSword, _super);
      function CaptainSword() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.damage = 3;
        _this.parentNode = null;
        _this.isShow = false;
        return _this;
      }
      CaptainSword.prototype.start = function() {
        this.isShow = false;
      };
      CaptainSword.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isShow && this.node.active) {
          this.isShow = false;
          var dd = new DamageData_1.default();
          dd.physicalDamage = this.damage;
          target.takeDamage(dd, FromData_1.default.getClone(this.actorName(), "captain_head"), this.parentNode.getComponent(Captain_1.default));
        }
      };
      CaptainSword.prototype.actorName = function() {
        return "\u90aa\u6076\u8239\u957f";
      };
      __decorate([ property ], CaptainSword.prototype, "damage", void 0);
      __decorate([ property(cc.Node) ], CaptainSword.prototype, "parentNode", void 0);
      CaptainSword = __decorate([ ccclass ], CaptainSword);
      return CaptainSword;
    }(cc.Component);
    exports.default = CaptainSword;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Utils/ActorUtils": "ActorUtils",
    "./Captain": "Captain"
  } ],
  Captain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6d826iFR+pBDJHGFIoYZ400", "Captain");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CaptainSword_1 = require("./CaptainSword");
    var Dungeon_1 = require("../Dungeon");
    var EventHelper_1 = require("../EventHelper");
    var Shooter_1 = require("../Shooter");
    var DamageData_1 = require("../Data/DamageData");
    var Boss_1 = require("./Boss");
    var NextStep_1 = require("../Utils/NextStep");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Captain = function(_super) {
      __extends(Captain, _super);
      function Captain() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sword = null;
        _this.healthBar = null;
        _this.isFaceRight = true;
        _this.isMoving = false;
        _this.timeDelay = 0;
        _this.isFall = false;
        _this.shooter = null;
        _this.exshooter = null;
        _this.attackSkill = new NextStep_1.default();
        _this.fireSkill = new NextStep_1.default();
        _this.jumpSkill = new NextStep_1.default();
        return _this;
      }
      Captain.prototype.onLoad = function() {
        this.attackSkill.IsExcuting = false;
        this.sc.isDied = false;
        this.anim = this.getComponent(cc.Animation);
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.shooter = this.node.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.exshooter = this.node.getChildByName("ExShooter").getComponent(Shooter_1.default);
        this.shooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "captain_head"));
        this.exshooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "captain_head"));
        this.updatePlayerPos();
      };
      Captain.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      Captain.prototype.AttackDamageStart = function() {
        this.sword.isShow = true;
      };
      Captain.prototype.AttackDamageFinish = function() {
        this.sword.isShow = false;
      };
      Captain.prototype.AttackStart = function() {
        this.attackSkill.IsExcuting = true;
        cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
          detail: {
            name: AudioPlayer_1.default.MELEE
          }
        });
      };
      Captain.prototype.AttackFinish = function() {
        this.attackSkill.IsExcuting = false;
      };
      Captain.prototype.JumpStart = function() {
        this.jumpSkill.IsExcuting = true;
        this.getComponent(cc.PhysicsBoxCollider).sensor = true;
        this.getComponent(cc.PhysicsBoxCollider).apply();
      };
      Captain.prototype.FireSwordLight = function() {
        this.shooter.setHv(cc.v3(1, 0));
        this.shooter.dungeon = this.dungeon;
        this.shooter.data.bulletType = "bullet043";
        this.shooter.fireBullet(0, cc.v3(16, 0));
      };
      Captain.prototype.JumpFinish = function() {
        var _this = this;
        this.jumpSkill.IsExcuting = false;
        this.isFall = true;
        this.scheduleOnce(function() {
          _this.isFall = false;
        }, .1);
        this.getComponent(cc.PhysicsBoxCollider).sensor = false;
        this.getComponent(cc.PhysicsBoxCollider).apply();
        if (!this.dungeon || !this.exshooter) return;
        var hv = this.dungeon.player.getCenterPosition().sub(this.node.position);
        if (!hv.equals(cc.Vec3.ZERO)) {
          hv = hv.normalizeSelf();
          this.exshooter.setHv(hv);
          this.exshooter.dungeon = this.dungeon;
          this.exshooter.data.bulletType = "bullet033";
          this.exshooter.data.bulletArcExNum = 99;
          this.exshooter.data.bulletLineInterval = 1;
          this.data.currentHealth < this.data.Common.maxHealth / 2 && (this.exshooter.data.bulletLineExNum = 1);
          this.exshooter.fireBullet(0, cc.v3(16, 0));
        }
      };
      Captain.prototype.fireWithAngles = function(angles) {
        if (!this.dungeon || !this.shooter) return;
        var hv = this.dungeon.player.getCenterPosition().sub(this.node.position);
        if (!hv.equals(cc.Vec3.ZERO)) {
          hv = hv.normalizeSelf();
          this.shooter.setHv(hv);
          this.shooter.dungeon = this.dungeon;
          this.shooter.data.bulletType = "bullet002";
          for (var _i = 0, angles_1 = angles; _i < angles_1.length; _i++) {
            var angle = angles_1[_i];
            this.shooter.fireBullet(angle, cc.v3(16, 0));
          }
        }
      };
      Captain.prototype.OpenFire = function() {
        var _this = this;
        if (!this.dungeon || !this.shooter) return;
        var angles1 = [ 0, 10, 15, -30, -40, -10, -15, 30, 40 ];
        var angles2 = [ 5, 10, -10 ];
        var angles3 = [ -5, 10, 20, -10, -20, -30, -40, 30, 40 ];
        this.shooter.data.bulletArcExNum = 0;
        this.fireWithAngles(angles1);
        if (this.data.currentHealth < this.data.Common.maxHealth / 2) {
          this.scheduleOnce(function() {
            _this.fireWithAngles(angles2);
          }, .3);
          this.scheduleOnce(function() {
            _this.fireWithAngles(angles3);
          }, .5);
        }
      };
      Captain.prototype.onCollisionStay = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && self.tag == ColliderTag_1.ColliderTag.BOSS_ATTACK && this.isFall && !this.sc.isDied) {
          this.isFall = false;
          var dd = new DamageData_1.default();
          dd.physicalDamage = 2;
          target.takeDamage(dd, FromData_1.default.getClone(this.actorName(), "captain_head"), this);
        }
      };
      Captain.prototype.updateLogic = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.healthBar.node.active = !this.sc.isDied;
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          this.bossAction();
          this.JumpMove();
        }
        if (this.dungeon) {
          var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
          playerDis < 96 && (this.rigidbody.linearVelocity = cc.Vec2.ZERO);
        }
        this.sc.isDied && (this.rigidbody.linearVelocity = cc.Vec2.ZERO);
        this.healthBar.node.active = !this.sc.isDied;
        this.data.currentHealth < 1 && this.killed();
        this.node.scaleX = this.isFaceRight ? 1 : -1;
      };
      Captain.prototype.takeDamage = function(damage) {
        var isPlayJump = this.anim.getAnimationState("CaptainJump").isPlaying;
        if (this.sc.isDied || isPlayJump) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Captain.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.anim.play("CaptainDie");
        var collider = this.getComponent("cc.PhysicsCollider");
        collider.sensor = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Captain.prototype.bossAction = function() {
        var _this = this;
        if (this.sc.isDied || !this.dungeon) return;
        this.node.position = Dungeon_1.default.fixOuterMap(this.node.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.node.position);
        this.changeZIndex();
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos).sub(this.node.position);
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        var isPlayJump = this.anim.getAnimationState("CaptainJump").isPlaying;
        var isPlayFire = this.anim.getAnimationState("CaptainFire").isPlaying;
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        this.isFaceRight = h > 0;
        if (isPlayJump || isPlayFire) return;
        var speed = 200;
        isPlayJump || this.fireSkill.next(function() {
          speed = 50;
          _this.anim.play("CaptainFire");
        }, 5);
        if (playerDis < 140 && !this.dungeon.player.sc.isDied) this.attackSkill.next(function() {
          _this.attackSkill.IsExcuting = true;
          _this.anim.play("CaptainAttack");
        }, 1); else {
          playerDis > 300 && this.jumpSkill.next(function() {
            _this.anim.play("CaptainJump");
            isPlayJump = true;
          }, 8);
          if (!pos.equals(cc.Vec3.ZERO) && !isPlayJump && !this.attackSkill.IsExcuting) {
            pos = pos.normalizeSelf();
            this.move(pos, speed);
          }
        }
      };
      Captain.prototype.JumpMove = function() {
        if (!this.dungeon || !this.jumpSkill.IsExcuting) return;
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos).sub(this.node.position);
        if (!pos.equals(cc.Vec3.ZERO)) {
          this.pos = Dungeon_1.default.getIndexInMap(this.node.position);
          pos = pos.normalizeSelf();
        }
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        var speed = 200;
        this.data.currentHealth < this.data.Common.maxHealth / 2 && (speed = 240);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
      };
      Captain.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        this.attackSkill.IsExcuting && !pos.equals(cc.Vec3.ZERO) && (pos = pos.mul(.5));
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.node.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.isMoving && (this.isFaceRight = h > 0);
        this.isMoving ? this.anim.getAnimationState("CaptainMove").isPlaying || this.anim.playAdditive("CaptainMove") : this.anim.getAnimationState("CaptainMove").isPlaying && this.anim.play("CaptainIdle");
        this.changeZIndex();
      };
      Captain.prototype.actorName = function() {
        return "\u90aa\u6076\u8239\u957f";
      };
      __decorate([ property(CaptainSword_1.default) ], Captain.prototype, "sword", void 0);
      Captain = __decorate([ ccclass ], Captain);
      return Captain;
    }(Boss_1.default);
    exports.default = Captain;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Actor/ColliderTag": "ColliderTag",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Shooter": "Shooter",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/NextStep": "NextStep",
    "./Boss": "Boss",
    "./CaptainSword": "CaptainSword"
  } ],
  CellphoneData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ca606JzDZxBpJXGyzhO8Xom", "CellphoneData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseData_1 = require("./BaseData");
    var FurnitureData_1 = require("./FurnitureData");
    var ItemData_1 = require("./ItemData");
    var CellphoneData = function(_super) {
      __extends(CellphoneData, _super);
      function CellphoneData() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.createTime = 0;
        _this.type = 0;
        return _this;
      }
      CellphoneData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.type = data.type ? data.type : 0;
        this.price = data.price ? data.price : 0;
        if (data.furnitureData) {
          this.furnitureData = new FurnitureData_1.default();
          this.furnitureData.valueCopy(data.furnitureData);
          this.price = this.furnitureData.price;
        }
        if (data.itemData) {
          this.itemData = new ItemData_1.default();
          this.itemData.valueCopy(data.itemData);
        }
        this.itemData = data.itemData;
        this.createTime = data.createTime ? data.createTime : 0;
      };
      CellphoneData.prototype.clone = function() {
        var e = new CellphoneData();
        e.furnitureData = this.furnitureData;
        e.itemData = this.itemData;
        e.createTime = this.createTime;
        e.type = this.type;
        e.price = this.price;
        return e;
      };
      CellphoneData.prototype.setEmpty = function() {
        this.type = 0;
        this.furnitureData = null;
        this.itemData = null;
        this.createTime = 0;
        this.price = 0;
      };
      return CellphoneData;
    }(BaseData_1.default);
    exports.default = CellphoneData;
    cc._RF.pop();
  }, {
    "./BaseData": "BaseData",
    "./FurnitureData": "FurnitureData",
    "./ItemData": "ItemData"
  } ],
  CellphoneDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7e27cFOFVVGe4YHWxa4+CC5", "CellphoneDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Achievement_1 = require("../../Achievement");
    var CellphoneData_1 = require("../../Data/CellphoneData");
    var FurnitureData_1 = require("../../Data/FurnitureData");
    var EventHelper_1 = require("../../EventHelper");
    var Logic_1 = require("../../Logic");
    var AudioPlayer_1 = require("../../Utils/AudioPlayer");
    var LocalStorage_1 = require("../../Utils/LocalStorage");
    var Utils_1 = require("../../Utils/Utils");
    var CellphoneItem_1 = require("../CellphoneItem");
    var BaseDialog_1 = require("./BaseDialog");
    var EquipmentAndItemDialog_1 = require("./EquipmentAndItemDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CellphoneDialog = function(_super) {
      __extends(CellphoneDialog, _super);
      function CellphoneDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.item = null;
        _this.content = null;
        _this.equipmentAndItemDialogPrefab = null;
        _this.buyButton = null;
        _this.list = [];
        _this.itemSelect = null;
        _this.tabSelect = null;
        _this.priceLabel = null;
        _this.equipmentAndItemDialog = null;
        _this.itemList = [];
        _this.tabIndex = 0;
        return _this;
      }
      CellphoneDialog.prototype.onLoad = function() {
        this.itemSelect.opacity = 0;
        this.equipmentAndItemDialog = this.initDialog();
        this.updateList(this.tabIndex);
      };
      CellphoneDialog.prototype.initDialog = function() {
        var node = cc.instantiate(this.equipmentAndItemDialogPrefab);
        node.parent = this.node;
        var dialog = node.getComponent(EquipmentAndItemDialog_1.default);
        dialog.changeBgAndAnchor(EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_NONE);
        dialog.hideDialog();
        return dialog;
      };
      CellphoneDialog.prototype.getItem = function(index, data) {
        var prefab = cc.instantiate(this.item);
        prefab.parent = this.content;
        var item = prefab.getComponent(CellphoneItem_1.default);
        item.init(this, index, data);
        return item;
      };
      CellphoneDialog.prototype.start = function() {};
      CellphoneDialog.prototype.show = function() {
        _super.prototype.show.call(this);
        this.updateList(this.tabIndex);
      };
      CellphoneDialog.prototype.changeTab = function(event, index) {
        if (0 == index) {
          this.tabSelect.position = cc.v3(-96, 320);
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        } else {
          this.tabSelect.position = cc.v3(96, 320);
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
        }
        this.updateList(index);
      };
      CellphoneDialog.prototype.clearSelect = function() {
        this.currentSelectIndex = -1;
        this.equipmentAndItemDialog.hideDialog();
        this.buyButton.active = false;
        this.priceLabel.string = "";
        this.itemSelect.opacity = 0;
      };
      CellphoneDialog.prototype.showSelect = function(item) {
        this.currentSelectIndex = item.index;
        this.itemSelect.parent = item.node;
        this.itemSelect.position = cc.Vec3.ZERO;
        this.itemSelect.opacity = 200;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.priceLabel.string = "" + Math.floor(item.data.price);
        this.buyButton.active = true;
        this.equipmentAndItemDialog.showDialog(cc.v3(-240, 160), null, item.data.itemData, null, item.data.furnitureData);
      };
      CellphoneDialog.prototype.updateList = function(tabIndex) {
        this.clearSelect();
        this.list = [];
        this.content.removeAllChildren();
        this.tabIndex = tabIndex;
        var dataList = [];
        if (0 == tabIndex) {
          var normallist = [];
          var purchasedlist = [];
          var index = 0;
          for (var key in Logic_1.default.furnitures) {
            var fd = new FurnitureData_1.default();
            fd.valueCopy(Logic_1.default.furnitures[key]);
            var save = LocalStorage_1.default.getFurnitureData(fd.id);
            fd.valueCopy(save);
            var data = new CellphoneData_1.default();
            data.createTime = new Date().getTime();
            data.type = CellphoneItem_1.default.TYPE_FURNITURE;
            data.furnitureData = fd;
            fd.purchased ? purchasedlist.push(data) : normallist.push(data);
            this.list.push(this.getItem(index++, data));
          }
          dataList = normallist.concat(purchasedlist);
          for (var i = 0; i < this.list.length; i++) this.list[i].updateData(dataList[i]);
        } else Utils_1.default.toast("\u8fd9\u91cc\u7a7a\u7a7a\u5982\u4e5f", true);
      };
      CellphoneDialog.prototype.sale = function() {
        if (-1 == this.currentSelectIndex || this.list[this.currentSelectIndex].data.type == CellphoneItem_1.default.TYPE_EMPTY) return;
        var current = this.list[this.currentSelectIndex];
        if (current.data.type == CellphoneItem_1.default.TYPE_FURNITURE) {
          var fd = current.data.furnitureData;
          if (!fd.purchased && Logic_1.default.coins >= fd.price) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
              count: -fd.price
            });
            AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
            current.data.furnitureData.purchased = true;
            current.updateData();
            Achievement_1.default.addFurnituresAchievement(fd.id);
            LocalStorage_1.default.saveFurnitureData(fd);
            this.clearSelect();
            Utils_1.default.toast("\u8d2d\u4e70\u6210\u529f", true);
            AudioPlayer_1.default.play(AudioPlayer_1.default.CASHIERING);
          } else {
            Utils_1.default.toast("\u8d2d\u4e70\u5931\u8d25\uff0c\u4f59\u989d\u4e0d\u8db3", true);
            AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
          }
        }
      };
      CellphoneDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
        this.content.removeAllChildren();
      };
      __decorate([ property(cc.Prefab) ], CellphoneDialog.prototype, "item", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "content", void 0);
      __decorate([ property(cc.Prefab) ], CellphoneDialog.prototype, "equipmentAndItemDialogPrefab", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "buyButton", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "itemSelect", void 0);
      __decorate([ property(cc.Node) ], CellphoneDialog.prototype, "tabSelect", void 0);
      __decorate([ property(cc.Label) ], CellphoneDialog.prototype, "priceLabel", void 0);
      CellphoneDialog = __decorate([ ccclass ], CellphoneDialog);
      return CellphoneDialog;
    }(BaseDialog_1.default);
    exports.default = CellphoneDialog;
    cc._RF.pop();
  }, {
    "../../Achievement": "Achievement",
    "../../Data/CellphoneData": "CellphoneData",
    "../../Data/FurnitureData": "FurnitureData",
    "../../EventHelper": "EventHelper",
    "../../Logic": "Logic",
    "../../Utils/AudioPlayer": "AudioPlayer",
    "../../Utils/LocalStorage": "LocalStorage",
    "../../Utils/Utils": "Utils",
    "../CellphoneItem": "CellphoneItem",
    "./BaseDialog": "BaseDialog",
    "./EquipmentAndItemDialog": "EquipmentAndItemDialog"
  } ],
  CellphoneItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "998cfMDHbFCeYkBTaoitXnc", "CellphoneItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CellphoneData_1 = require("../Data/CellphoneData");
    var Logic_1 = require("../Logic");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CellphoneItem = function(_super) {
      __extends(CellphoneItem, _super);
      function CellphoneItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isSelect = false;
        _this.sprite = null;
        _this.label = null;
        _this.disableCover = null;
        _this.index = 0;
        _this.data = new CellphoneData_1.default();
        return _this;
      }
      CellphoneItem_1 = CellphoneItem;
      CellphoneItem.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.isSelect && _this.index == _this.dialog.currentSelectIndex ? _this.isSelect = false : _this.isSelect = _this.data.type != CellphoneItem_1.TYPE_EMPTY;
          _this.data.type == CellphoneItem_1.TYPE_FURNITURE && _this.data.furnitureData && _this.data.furnitureData.purchased && (_this.isSelect = false);
          _this.dialog.clearSelect();
          _this.isSelect ? _this.dialog.showSelect(_this) : AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
        }, this);
      };
      CellphoneItem.prototype.init = function(cellphoneDialog, index, data) {
        this.dialog = cellphoneDialog;
        this.index = index;
        this.isSelect = false;
        this.updateData(data);
      };
      CellphoneItem.prototype.updateData = function(data) {
        this.isSelect = false;
        this.data.valueCopy(data);
        this.label.string = "";
        this.sprite.spriteFrame = null;
        this.disableCover.active = false;
        var spriteFrame = null;
        if (this.data.type == CellphoneItem_1.TYPE_ITEM && this.data.itemData) {
          this.label.string = this.data.itemData.nameCn + "\n" + this.data.itemData.price;
          spriteFrame = Logic_1.default.spriteFrameRes(this.data.itemData.resName);
        } else if (this.data.type == CellphoneItem_1.TYPE_FURNITURE && this.data.furnitureData) {
          spriteFrame = Logic_1.default.spriteFrameRes(this.data.furnitureData.resName);
          this.label.string = this.data.furnitureData.nameCn + "\n" + this.data.furnitureData.price;
          this.disableCover.active = this.data.furnitureData.purchased;
        }
        if (spriteFrame) {
          this.sprite.spriteFrame = spriteFrame;
          var w = spriteFrame.getOriginalSize().width;
          var h = spriteFrame.getOriginalSize().height;
          this.sprite.node.width = 4 * w;
          this.sprite.node.height = 4 * h;
          if (this.sprite.node.height > 128) {
            this.sprite.node.height = 128;
            this.sprite.node.width = 128 / spriteFrame.getOriginalSize().height * spriteFrame.getOriginalSize().width;
          }
        }
      };
      CellphoneItem.prototype.setEmpty = function() {
        this.label.string = "";
        this.sprite.spriteFrame = null;
      };
      CellphoneItem.prototype.start = function() {};
      var CellphoneItem_1;
      CellphoneItem.TYPE_EMPTY = 0;
      CellphoneItem.TYPE_FURNITURE = 1;
      CellphoneItem.TYPE_ITEM = 2;
      __decorate([ property(cc.Sprite) ], CellphoneItem.prototype, "sprite", void 0);
      __decorate([ property(cc.Label) ], CellphoneItem.prototype, "label", void 0);
      __decorate([ property(cc.Node) ], CellphoneItem.prototype, "disableCover", void 0);
      CellphoneItem = CellphoneItem_1 = __decorate([ ccclass ], CellphoneItem);
      return CellphoneItem;
    }(cc.Component);
    exports.default = CellphoneItem;
    cc._RF.pop();
  }, {
    "../Data/CellphoneData": "CellphoneData",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer"
  } ],
  Cellphone: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d0343ZPI0tH4L2hhGPghjrG", "Cellphone");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var CellphoneDialog_1 = require("./dialog/CellphoneDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Cellphone = function(_super) {
      __extends(Cellphone, _super);
      function Cellphone() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.dialog = null;
        _this.isOpen = false;
        return _this;
      }
      Cellphone.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CELLPHONE_SHOW, function(detail) {
          if (_this.node && !_this.isOpen) {
            AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
            _this.anim.play("CellphoneShow");
          }
        });
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          if (!_this.isOpen) {
            AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
            _this.anim.play("CellphoneShow");
          }
        }, this);
        this.dialog.onDismissListener(function() {
          _this.anim.play("CellphoneHide");
        });
      };
      Cellphone.prototype.Show = function() {
        this.dialog.show();
      };
      Cellphone.prototype.Hide = function() {
        this.isOpen = false;
      };
      __decorate([ property(CellphoneDialog_1.default) ], Cellphone.prototype, "dialog", void 0);
      Cellphone = __decorate([ ccclass ], Cellphone);
      return Cellphone;
    }(cc.Component);
    exports.default = Cellphone;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./dialog/CellphoneDialog": "CellphoneDialog"
  } ],
  ChapterData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb6073McgVKOpRjZZ5su/Nf", "ChapterData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChapterData = function() {
      function ChapterData(chapter) {
        this.chapter = 0;
        this.list = [];
        this.chapter = chapter;
      }
      return ChapterData;
    }();
    exports.default = ChapterData;
    cc._RF.pop();
  }, {} ],
  Chapter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e966c6tQ3FASbN1WCJi24PI", "Chapter");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Chapter = function(_super) {
      __extends(Chapter, _super);
      function Chapter() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chapter00 = null;
        _this.chapter01 = null;
        _this.chapter02 = null;
        _this.chapter03 = null;
        _this.chapter04 = null;
        _this.timeDelay = 0;
        return _this;
      }
      Chapter.prototype.start = function() {};
      Chapter.prototype.clickChapter = function(event, chapter) {
        if (chapter) {
          Logic_1.default.profileManager.clearData();
          Logic_1.default.jumpChapter = parseInt(chapter);
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
          cc.director.loadScene("pickavatar");
        }
      };
      Chapter.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter00", void 0);
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter01", void 0);
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter02", void 0);
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter03", void 0);
      __decorate([ property(cc.Button) ], Chapter.prototype, "chapter04", void 0);
      Chapter = __decorate([ ccclass ], Chapter);
      return Chapter;
    }(cc.Component);
    exports.default = Chapter;
    cc._RF.pop();
  }, {
    "./Logic": "Logic",
    "./Utils/AudioPlayer": "AudioPlayer"
  } ],
  Chest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a259fOC11hFpJCy2hycs7kH", "Chest");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var IndexZ_1 = require("../Utils/IndexZ");
    var EquipmentManager_1 = require("../Manager/EquipmentManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Chest = function(_super) {
      __extends(Chest, _super);
      function Chest() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.openSpriteFrame = null;
        _this.closeSpriteFrame = null;
        return _this;
      }
      Chest.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite");
      };
      Chest.prototype.start = function() {};
      Chest.prototype.setQuality = function(quality, isOpen) {
        this.data.quality = quality;
        this.data.isOpen = isOpen;
        this.sprite || (this.sprite = this.node.getChildByName("sprite"));
        var name1 = "chest001";
        var name2 = "chestopen001";
        switch (quality) {
         case 1:
          name1 = "chest001";
          name2 = "chestopen001";
          break;

         case 2:
          name1 = "chest003";
          name2 = "chestopen003";
          break;

         case 3:
         case 4:
          name1 = "chest002";
          name2 = "chestopen002";
        }
        var openFrame = Logic_1.default.spriteFrameRes(name1);
        var closeFrame = Logic_1.default.spriteFrameRes(name2);
        this.openSpriteFrame = openFrame;
        this.closeSpriteFrame = closeFrame;
        this.sprite.getComponent(cc.Sprite).spriteFrame = this.openSpriteFrame;
        isOpen && (this.sprite.getComponent(cc.Sprite).spriteFrame = this.closeSpriteFrame);
      };
      Chest.prototype.seDefaultPos = function(defaultPos) {
        this.data.defaultPos = defaultPos;
        this.node.position = Dungeon_1.default.getPosInMap(defaultPos);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      Chest.prototype.openChest = function() {
        var _this = this;
        if (this.data.isOpen) return;
        this.data.isOpen = true;
        cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
          detail: {
            name: AudioPlayer_1.default.PICK_UP
          }
        });
        cc.tween(this.sprite).to(.1, {
          position: cc.v3(5, 16)
        }).to(.1, {
          position: cc.v3(-5, 0)
        }).to(.1, {
          position: cc.v3(5, 0)
        }).to(.1, {
          position: cc.v3(-5, 0)
        }).to(.1, {
          position: cc.v3(0, 0)
        }).call(function() {
          _this.sprite.getComponent(cc.Sprite).spriteFrame = _this.closeSpriteFrame;
          if (_this.node.parent) {
            var dungeon = _this.node.parent.getComponent(Dungeon_1.default);
            if (dungeon) {
              var rand4save = Logic_1.default.mapManager.getRandom4Save(_this.seed);
              if (Logic_1.default.isCheatMode) {
                dungeon.addEquipment(EquipmentManager_1.default.CLOAK_WARRIOR, Dungeon_1.default.getPosInMap(_this.data.defaultPos), null, _this.data.quality);
                dungeon.addEquipment(EquipmentManager_1.default.SHIELD_CARDOOR, Dungeon_1.default.getPosInMap(_this.data.defaultPos), null, _this.data.quality);
              }
              dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(_this.data.defaultPos), null, _this.data.quality);
            }
          }
        }).start();
        var saveChest = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
        if (saveChest) {
          saveChest.isOpen = this.data.isOpen;
          saveChest.quality = this.data.quality;
        } else Logic_1.default.mapManager.setCurrentBuildingData(this.data.clone());
      };
      Chest.prototype.onCollisionStay = function(other, self) {
        other.tag == ColliderTag_1.ColliderTag.PLAYER && (this.data.isOpen || this.openChest());
      };
      __decorate([ property(cc.SpriteFrame) ], Chest.prototype, "openSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], Chest.prototype, "closeSpriteFrame", void 0);
      Chest = __decorate([ ccclass ], Chest);
      return Chest;
    }(Building_1.default);
    exports.default = Chest;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/EquipmentManager": "EquipmentManager",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  ChunkData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2e5707we6VLmaJfbSZnGeFv", "ChunkData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChunkData = function() {
      function ChunkData() {}
      return ChunkData;
    }();
    exports.default = ChunkData;
    cc._RF.pop();
  }, {} ],
  ChunkLookCamera: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "86753OU1JJLlZ74OEo6fP9C", "ChunkLookCamera");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChunkLookCamera = function(_super) {
      __extends(ChunkLookCamera, _super);
      function ChunkLookCamera() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.target = null;
        return _this;
      }
      ChunkLookCamera.prototype.onLoad = function() {
        var _this = this;
        this.camera = this.getComponent(cc.Camera);
        cc.director.on(EventHelper_1.EventHelper.CAMERA_LOOK, function(event) {
          _this.lookAt(event.detail.position);
        });
      };
      ChunkLookCamera.prototype.lookAt = function(position) {
        this.targetPosition = position;
      };
      ChunkLookCamera.prototype.lateUpdate = function() {
        this.targetPosition;
        this.node.position = this.lerp(this.node.position, this.node.parent.convertToNodeSpaceAR(this.target.convertToWorldSpaceAR(cc.Vec3.ZERO)), .1);
      };
      ChunkLookCamera.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      __decorate([ property(cc.Node) ], ChunkLookCamera.prototype, "target", void 0);
      ChunkLookCamera = __decorate([ ccclass ], ChunkLookCamera);
      return ChunkLookCamera;
    }(cc.Component);
    exports.default = ChunkLookCamera;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper"
  } ],
  ChunkWorld: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8888aikYhVNfJXCQphMoSyV", "ChunkWorld");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Chunk_1 = require("./Chunk");
    var EventHelper_1 = require("../EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChunkWorld = function(_super) {
      __extends(ChunkWorld, _super);
      function ChunkWorld() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chunkPrefab = null;
        _this.worldMap = new Array();
        _this.currentMap = new Array();
        return _this;
      }
      ChunkWorld_1 = ChunkWorld;
      ChunkWorld.prototype.onLoad = function() {
        var _this = this;
        var CENTER = Math.floor(ChunkWorld_1.SIZE / 2);
        cc.director.on(EventHelper_1.EventHelper.CHUNK_LOAD, function(event) {
          var pos = event.detail.pos;
          var p = ChunkWorld_1.getIndexInMap(pos, _this.currentMap[0][0].targetPosition);
          cc.log(p);
          _this.changeMap(p.x, p.y);
        });
        this.initMap();
      };
      ChunkWorld.prototype.initMap = function() {
        for (var i = 0; i < ChunkWorld_1.SIZE; i++) {
          this.currentMap[i] = new Array(i);
          for (var j = 0; j < ChunkWorld_1.SIZE; j++) {
            var c = cc.instantiate(this.chunkPrefab);
            c.parent = this.node;
            c.position = ChunkWorld_1.getPosInMap(cc.v3(i, j));
            c.zIndex = 100;
            var chunk = c.getComponent(Chunk_1.default);
            chunk.data.x = i;
            chunk.data.y = j;
            this.currentMap[i][j] = chunk;
            chunk.targetPosition = c.position.clone();
            chunk.loadMap();
          }
        }
        this.printMapIndex();
      };
      ChunkWorld.prototype.getTargetChunkPos = function(targetPosition) {
        var leftBottomPos = cc.v3(this.currentMap[0][0].data.x, this.currentMap[0][0].data.y);
      };
      ChunkWorld.prototype.changeMap = function(x, y) {
        var CENTER = Math.floor(ChunkWorld_1.SIZE / 2);
        if (x == CENTER && y == CENTER) return;
        var selectPosition = this.currentMap[x][y].targetPosition.clone();
        var tempMap = new Array();
        for (var i = 0; i < ChunkWorld_1.SIZE; i++) {
          tempMap[i] = new Array(i);
          for (var j = 0; j < ChunkWorld_1.SIZE; j++) {
            var pos = this.getCorrectIndex(cc.v3(x, y), cc.v3(i, j));
            tempMap[i][j] = this.currentMap[pos.x][pos.y];
            tempMap[i][j].data.x = i;
            tempMap[i][j].data.y = j;
            if (1 == pos.z) {
              var offset = cc.v3(i, j).subSelf(cc.v3(CENTER, CENTER));
              var offsetPos = ChunkWorld_1.getPosInMap(offset);
              tempMap[i][j].targetPosition = selectPosition.clone().addSelf(offsetPos);
              tempMap[i][j].loadMap();
            }
          }
        }
        this.printMapIndex();
        this.currentMap = tempMap;
      };
      ChunkWorld.prototype.printMapIndex = function() {
        var str = "";
        for (var i = ChunkWorld_1.SIZE - 1; i >= 0; i--) {
          for (var j = 0; j < ChunkWorld_1.SIZE; j++) str += "(" + this.currentMap[j][i].data.x + "," + this.currentMap[j][i].data.y + ")";
          str += "\n";
        }
      };
      ChunkWorld.prototype.getCorrectIndex = function(select, target) {
        var CENTER = Math.floor(ChunkWorld_1.SIZE / 2);
        var pos = target.clone();
        var offsetX = select.x - CENTER;
        var offsetY = select.y - CENTER;
        pos.x = pos.x + offsetX;
        pos.y = pos.y + offsetY;
        var isOuter = false;
        if (pos.x < 0) {
          pos.x = pos.x + ChunkWorld_1.SIZE;
          isOuter = true;
        } else if (pos.x >= ChunkWorld_1.SIZE) {
          pos.x = pos.x - ChunkWorld_1.SIZE;
          isOuter = true;
        }
        if (pos.y < 0) {
          pos.y = pos.y + ChunkWorld_1.SIZE;
          isOuter = true;
        } else if (pos.y >= ChunkWorld_1.SIZE) {
          pos.y = pos.y - ChunkWorld_1.SIZE;
          isOuter = true;
        }
        return new cc.Vec3(pos.x, pos.y, isOuter ? 1 : 0);
      };
      ChunkWorld.getPosInMap = function(pos) {
        var x = pos.x * Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE;
        var y = pos.y * Chunk_1.default.HEIGHT * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE;
        return cc.v3(x, y);
      };
      ChunkWorld.fixOuterMap = function(pos, offset) {
        var x = (pos.x - offset.x) / (Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE);
        var y = (pos.y - offset.y) / (Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE);
        x = Math.round(x);
        y = Math.round(y);
        var isOuter = false;
        if (x < 0) {
          x = 0;
          isOuter = true;
        }
        if (x >= ChunkWorld_1.SIZE) {
          x = ChunkWorld_1.SIZE - 1;
          isOuter = true;
        }
        if (y < 0) {
          y = 0;
          isOuter = true;
        }
        if (y >= ChunkWorld_1.SIZE) {
          y = ChunkWorld_1.SIZE - 1;
          isOuter = true;
        }
        return isOuter ? ChunkWorld_1.getPosInMap(cc.v3(x, y)) : pos;
      };
      ChunkWorld.getIndexInMap = function(pos, offset) {
        var x = (pos.x - offset.x) / (Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE);
        var y = (pos.y - offset.y) / (Chunk_1.default.WIDTH * Chunk_1.default.TILE_SCALE * Chunk_1.default.TILE_SIZE);
        x = Math.round(x);
        y = Math.round(y);
        x < 0 && (x = 0);
        x >= ChunkWorld_1.SIZE && (x = ChunkWorld_1.SIZE - 1);
        y < 0 && (y = 0);
        y >= ChunkWorld_1.SIZE && (y = ChunkWorld_1.SIZE - 1);
        return cc.v3(x, y);
      };
      ChunkWorld.prototype.start = function() {};
      var ChunkWorld_1;
      ChunkWorld.SIZE = 5;
      __decorate([ property(cc.Prefab) ], ChunkWorld.prototype, "chunkPrefab", void 0);
      ChunkWorld = ChunkWorld_1 = __decorate([ ccclass ], ChunkWorld);
      return ChunkWorld;
    }(cc.Component);
    exports.default = ChunkWorld;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper",
    "./Chunk": "Chunk"
  } ],
  Chunk: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8d511RPE5CG7SWZpmVYfu9", "Chunk");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChunkData_1 = require("../Data/ChunkData");
    var Random_1 = require("../Utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Chunk = function(_super) {
      __extends(Chunk, _super);
      function Chunk() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.floor = null;
        _this.label = null;
        _this.select = null;
        _this.wall = null;
        _this.data = new ChunkData_1.default();
        _this.targetPosition = cc.v3(0, 0);
        return _this;
      }
      Chunk_1 = Chunk;
      Chunk.prototype.onLoad = function() {
        this.layer = this.node.getChildByName("layer");
        this.floor.scale = Chunk_1.TILE_SCALE;
        this.floor.width = Chunk_1.TILE_SIZE * Chunk_1.WIDTH;
        this.floor.height = Chunk_1.TILE_SIZE * Chunk_1.HEIGHT;
        this.select.scale = Chunk_1.TILE_SCALE;
        this.select.width = Chunk_1.TILE_SIZE * Chunk_1.WIDTH;
        this.select.height = Chunk_1.TILE_SIZE * Chunk_1.HEIGHT;
        this.node.width = Chunk_1.TILE_SCALE * Chunk_1.TILE_SIZE * Chunk_1.WIDTH;
        this.node.height = Chunk_1.TILE_SCALE * Chunk_1.TILE_SIZE * Chunk_1.HEIGHT;
      };
      Chunk.prototype.onClicked = function() {
        var _this = this;
        this.floor.color = cc.Color.GREEN;
        this.scheduleOnce(function() {
          _this.floor.color = cc.Color.WHITE;
        }, 1);
      };
      Chunk.prototype.loadMap = function() {
        this.label.node.position = cc.v3(this.node.width / 2, this.node.height / 2);
        this.label.string = this.targetPosition.x + "," + this.targetPosition.y;
        this.node.position = this.targetPosition.clone();
        this.layer.removeAllChildren();
        for (var i = 0; i < 2; i++) {
          var w = cc.instantiate(this.wall);
          w.parent = this.layer;
          w.position = cc.v3(Random_1.default.getRandomNum(0, this.node.width), Random_1.default.getRandomNum(0, this.node.height));
          w.zIndex = 100;
        }
      };
      Chunk.prototype.lateUpdate = function() {};
      Chunk.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      var Chunk_1;
      Chunk.TYPE_EMPTY = 0;
      Chunk.TYPE_NORMAL = 1;
      Chunk.TYPE_WALL_VERTICAL = 2;
      Chunk.TYPE_WALL_HORIZONTAL = 3;
      Chunk.TYPE_WALL_CROSS = 4;
      Chunk.WIDTH = 5;
      Chunk.HEIGHT = 5;
      Chunk.TILE_SIZE = 16;
      Chunk.TILE_SCALE = 4;
      __decorate([ property(cc.Node) ], Chunk.prototype, "floor", void 0);
      __decorate([ property(cc.Label) ], Chunk.prototype, "label", void 0);
      __decorate([ property(cc.Node) ], Chunk.prototype, "select", void 0);
      __decorate([ property(cc.Prefab) ], Chunk.prototype, "wall", void 0);
      Chunk = Chunk_1 = __decorate([ ccclass ], Chunk);
      return Chunk;
    }(cc.Component);
    exports.default = Chunk;
    cc._RF.pop();
  }, {
    "../Data/ChunkData": "ChunkData",
    "../Utils/Random": "Random"
  } ],
  CoinCount: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "91131vqXzhODZpby3U0hjQL", "CoinCount");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CoinCount = function(_super) {
      __extends(CoinCount, _super);
      function CoinCount() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        return _this;
      }
      CoinCount.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        cc.director.on(EventHelper_1.EventHelper.HUD_ADD_COIN, function(event) {
          _this.addCount(event.detail.count);
        });
      };
      CoinCount.prototype.start = function() {};
      CoinCount.prototype.addCount = function(value) {
        if (!this.anim) return;
        var c = parseInt(value);
        Logic_1.default.coins += c;
        if (c > 0) {
          Logic_1.default.coinDreamCount += c;
          if (Logic_1.default.coinDreamCount >= 1) {
            Logic_1.default.coinDreamCount = 0;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_USEDREAM, {
              value: -1
            });
          }
        }
      };
      CoinCount.prototype.update = function(dt) {
        this.label && (this.label.string = "" + Logic_1.default.coins);
      };
      __decorate([ property(cc.Label) ], CoinCount.prototype, "label", void 0);
      CoinCount = __decorate([ ccclass ], CoinCount);
      return CoinCount;
    }(cc.Component);
    exports.default = CoinCount;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  Coin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "586a7ZPuVJNUIhnMRyd39J4", "Coin");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var EventHelper_1 = require("../EventHelper");
    var Random_1 = require("../Utils/Random");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Coin = function(_super) {
      __extends(Coin, _super);
      function Coin() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.value = 0;
        _this.valueRes = [ "gem01", "gem02", "gem03", "gem04" ];
        _this.isReady = false;
        _this.soundPlaying = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Coin_1 = Coin;
      Coin.prototype.onLoad = function() {};
      Coin.prototype.onEnable = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        this.rigidBody = this.getComponent(cc.RigidBody);
        var speed = 1200;
        var x = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        var y = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        this.rigidBody.linearVelocity = cc.v2(x, y);
        this.rigidBody.linearDamping = 10;
        this.isReady = false;
        this.scheduleOnce(function() {
          _this.isReady = true;
        }, .5);
      };
      Coin.prototype.changeValue = function(value) {
        this.value = value;
        var index = 1;
        if (this.value == Coin_1.FACE_VALUE) {
          index = 3;
          this.node.scale = 1.2;
        } else {
          index = 1;
          this.node.scale = 1;
        }
        this.node.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes(this.valueRes[index]);
      };
      Coin.prototype.start = function() {};
      Coin.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          this.soundPlaying = false;
          return true;
        }
        return false;
      };
      Coin.prototype.getNearPlayerDistance = function(playerNode) {
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, playerNode.position.clone().addSelf(cc.v3(0, 32)));
        return dis;
      };
      Coin.prototype.update = function(dt) {
        if (this.isCheckTimeDelay(dt) && this.player && this.getNearPlayerDistance(this.player.node) < 400 && this.node.active && this.isReady) {
          var p = this.player.node.position.clone();
          p.y += 10;
          var pos = p.sub(this.node.position);
          if (!pos.equals(cc.Vec3.ZERO)) {
            pos = pos.normalizeSelf();
            pos = pos.mul(800);
            this.rigidBody.linearVelocity = cc.v2(pos);
            this.rigidBody.linearDamping = 1;
          }
        }
        if (this.player && this.getNearPlayerDistance(this.player.node) < 64 && this.node.active && this.isReady) {
          this.isReady = false;
          if (!this.soundPlaying) {
            this.soundPlaying = true;
            cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
              detail: {
                name: AudioPlayer_1.default.COIN
              }
            });
          }
          cc.director.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            detail: {
              count: this.value
            }
          });
          cc.director.emit("destorycoin", {
            detail: {
              coinNode: this.node
            }
          });
        }
      };
      var Coin_1;
      Coin.FACE_VALUE = 10;
      Coin = Coin_1 = __decorate([ ccclass ], Coin);
      return Coin;
    }(cc.Component);
    exports.default = Coin;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/Random": "Random"
  } ],
  ColliderManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1fbf6fswWBDrpMz6x2uV8lI", "ColliderManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseManager_1 = require("../Manager/BaseManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ColliderManager = function(_super) {
      __extends(ColliderManager, _super);
      function ColliderManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.checkTimeDelay = 0;
        return _this;
      }
      ColliderManager_1 = ColliderManager;
      ColliderManager.prototype.clear = function() {
        ColliderManager_1.list = [];
      };
      ColliderManager.prototype.onLoad = function() {};
      ColliderManager.registerCollider = function(colliders) {
        for (var _i = 0, colliders_1 = colliders; _i < colliders_1.length; _i++) {
          var collider = colliders_1[_i];
          ColliderManager_1.list.push(collider);
        }
      };
      ColliderManager.unRegisterCollider = function(collider) {
        var index = ColliderManager_1.list.indexOf(collider);
        -1 != index && ColliderManager_1.list.splice(index, 1);
      };
      ColliderManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .05) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      ColliderManager.prototype.update = function(dt) {};
      var ColliderManager_1;
      ColliderManager.list = [];
      ColliderManager = ColliderManager_1 = __decorate([ ccclass ], ColliderManager);
      return ColliderManager;
    }(BaseManager_1.default);
    exports.default = ColliderManager;
    cc._RF.pop();
  }, {
    "../Manager/BaseManager": "BaseManager"
  } ],
  ColliderTag: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30fe7gJEPJDaIQxIDcTlk/U", "ColliderTag");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ColliderTag = void 0;
    var ColliderTag;
    (function(ColliderTag) {
      ColliderTag[ColliderTag["DEFAULT"] = 0] = "DEFAULT";
      ColliderTag[ColliderTag["WALL"] = 1] = "WALL";
      ColliderTag[ColliderTag["WALL_TOP"] = 2] = "WALL_TOP";
      ColliderTag[ColliderTag["PLAYER"] = 3] = "PLAYER";
      ColliderTag[ColliderTag["NONPLAYER"] = 4] = "NONPLAYER";
      ColliderTag[ColliderTag["BOSS_ATTACK"] = 5] = "BOSS_ATTACK";
      ColliderTag[ColliderTag["BOSS"] = 6] = "BOSS";
      ColliderTag[ColliderTag["BULLET"] = 7] = "BULLET";
      ColliderTag[ColliderTag["BUILDING"] = 8] = "BUILDING";
      ColliderTag[ColliderTag["AOE"] = 9] = "AOE";
      ColliderTag[ColliderTag["ITEM"] = 10] = "ITEM";
      ColliderTag[ColliderTag["EQUIPMENT"] = 11] = "EQUIPMENT";
      ColliderTag[ColliderTag["COIN"] = 12] = "COIN";
      ColliderTag[ColliderTag["TIPS"] = 13] = "TIPS";
      ColliderTag[ColliderTag["MELEE"] = 14] = "MELEE";
      ColliderTag[ColliderTag["GOODNONPLAYER"] = 15] = "GOODNONPLAYER";
      ColliderTag[ColliderTag["WARTER"] = 16] = "WARTER";
      ColliderTag[ColliderTag["ENERGY_SHIELD"] = 17] = "ENERGY_SHIELD";
      ColliderTag[ColliderTag["LIGHT"] = 20] = "LIGHT";
    })(ColliderTag = exports.ColliderTag || (exports.ColliderTag = {}));
    cc._RF.pop();
  }, {} ],
  CommonData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b86e6PjawlOxqFoYPp0y0Jk", "CommonData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CommonData = function() {
      function CommonData() {
        this.maxHealth = 0;
        this.maxDream = 0;
        this.damageMin = 0;
        this.damageMax = 0;
        this.damageBack = 0;
        this.criticalStrikeRate = 0;
        this.defence = 0;
        this.blockPhysical = 0;
        this.blockMagic = 0;
        this.blockDamage = 0;
        this.lifeDrain = 0;
        this.moveSpeed = 0;
        this.attackSpeed = 0;
        this.dodge = 0;
        this.remoteCooldown = 0;
        this.remoteDamage = 0;
        this.remoteCritRate = 0;
        this.realDamage = 0;
        this.realRate = 0;
        this.magicDamage = 0;
        this.magicDefence = 0;
        this.iceRate = 0;
        this.fireRate = 0;
        this.lighteningRate = 0;
        this.toxicRate = 0;
        this.curseRate = 0;
      }
      CommonData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.maxHealth = data.maxHealth ? data.maxHealth : 0;
        this.maxDream = data.maxDream ? data.maxDream : 0;
        this.damageMin = data.damageMin ? data.damageMin : 0;
        this.damageMax = data.damageMax ? data.damageMax : 0;
        this.remoteDamage = data.remoteDamage ? data.remoteDamage : 0;
        this.criticalStrikeRate = data.criticalStrikeRate ? data.criticalStrikeRate : 0;
        this.remoteCritRate = data.remoteCritRate ? data.remoteCritRate : 0;
        this.defence = data.defence ? data.defence : 0;
        this.lifeDrain = data.lifeDrain ? data.lifeDrain : 0;
        this.damageBack = data.damageBack ? data.damageBack : 0;
        this.moveSpeed = data.moveSpeed ? data.moveSpeed : 0;
        this.attackSpeed = data.attackSpeed ? data.attackSpeed : 0;
        this.remoteCooldown = data.remoteCooldown ? data.remoteCooldown : 0;
        this.dodge = data.dodge ? data.dodge : 0;
        this.realDamage = data.realDamage ? data.realDamage : 0;
        this.realRate = data.realRate ? data.realRate : 0;
        this.magicDefence = data.magicDefence ? data.magicDefence : 0;
        this.iceRate = data.iceRate ? data.iceRate : 0;
        this.magicDamage = data.magicDamage ? data.magicDamage : 0;
        this.fireRate = data.fireRate ? data.fireRate : 0;
        this.lighteningRate = data.lighteningRate ? data.lighteningRate : 0;
        this.toxicRate = data.toxicRate ? data.toxicRate : 0;
        this.curseRate = data.curseRate ? data.curseRate : 0;
        this.blockPhysical = data.blockPhysical ? data.blockPhysical : 0;
        this.blockMagic = data.blockMagic ? data.blockMagic : 0;
        this.blockDamage = data.blockDamage ? data.blockDamage : 0;
      };
      CommonData.prototype.clone = function() {
        var e = new CommonData();
        e.maxHealth = this.maxHealth;
        e.maxDream = this.maxDream;
        e.damageMin = this.damageMin;
        e.damageMax = this.damageMax;
        e.criticalStrikeRate = this.criticalStrikeRate;
        e.defence = this.defence;
        e.lifeDrain = this.lifeDrain;
        e.damageBack = this.damageBack;
        e.moveSpeed = this.moveSpeed;
        e.attackSpeed = this.attackSpeed;
        e.remoteCooldown = this.remoteCooldown;
        e.dodge = this.dodge;
        e.realDamage = this.realDamage;
        e.realRate = this.realRate;
        e.magicDefence = this.magicDefence;
        e.magicDamage = this.magicDamage;
        e.iceRate = this.iceRate;
        e.fireRate = this.fireRate;
        e.lighteningRate = this.lighteningRate;
        e.toxicRate = this.toxicRate;
        e.curseRate = this.curseRate;
        e.remoteDamage = this.remoteDamage;
        e.remoteCritRate = this.remoteCritRate;
        e.blockPhysical = this.blockPhysical;
        e.blockMagic = this.blockMagic;
        e.blockDamage = this.blockDamage;
        return e;
      };
      CommonData.prototype.add = function(data) {
        this.maxHealth += data.maxHealth ? data.maxHealth : 0;
        this.maxDream += data.maxDream ? data.maxDream : 0;
        this.damageMin += data.damageMin ? data.damageMin : 0;
        this.damageMax += data.damageMax ? data.damageMax : 0;
        this.remoteDamage += data.remoteDamage ? data.remoteDamage : 0;
        this.criticalStrikeRate = data.criticalStrikeRate ? CommonData.addPercent(this.criticalStrikeRate, data.criticalStrikeRate) : this.criticalStrikeRate;
        this.remoteCritRate = data.remoteCritRate ? CommonData.addPercent(this.remoteCritRate, data.remoteCritRate) : this.remoteCritRate;
        this.lifeDrain = data.lifeDrain ? CommonData.addPercent(this.lifeDrain, data.lifeDrain) : this.lifeDrain;
        this.dodge = data.dodge ? CommonData.addPercent(this.dodge, data.dodge) : this.dodge;
        this.defence += data.defence ? data.defence : 0;
        this.damageBack += data.damageBack ? data.damageBack : 0;
        this.moveSpeed += data.moveSpeed ? data.moveSpeed : 0;
        this.attackSpeed += data.attackSpeed ? data.attackSpeed : 0;
        this.remoteCooldown += data.remoteCooldown ? data.remoteCooldown : 0;
        this.realDamage += data.realDamage ? data.realDamage : 0;
        this.realRate += data.realRate ? data.realRate : 0;
        this.magicDefence += data.magicDefence ? data.magicDefence : 0;
        this.magicDamage += data.magicDamage ? data.magicDamage : 0;
        this.iceRate += data.iceRate ? data.iceRate : 0;
        this.fireRate += data.fireRate ? data.fireRate : 0;
        this.lighteningRate += data.lighteningRate ? data.lighteningRate : 0;
        this.toxicRate += data.toxicRate ? data.toxicRate : 0;
        this.curseRate += data.curseRate ? data.curseRate : 0;
        this.blockPhysical += data.blockPhysical ? data.blockPhysical : 0;
        this.blockMagic += data.blockMagic ? data.blockMagic : 0;
        this.blockDamage += data.blockDamage ? data.blockDamage : 0;
        this.iceRate = CommonData.fixRateRange(this.iceRate);
        this.fireRate = CommonData.fixRateRange(this.fireRate);
        this.lighteningRate = CommonData.fixRateRange(this.lighteningRate);
        this.toxicRate = CommonData.fixRateRange(this.toxicRate);
        this.curseRate = CommonData.fixRateRange(this.curseRate);
        this.blockPhysical = CommonData.fixRateRange(this.blockPhysical);
        this.blockMagic = CommonData.fixRateRange(this.blockMagic);
        this.magicDefence = CommonData.fixRateRange(this.magicDefence);
        this.realRate = CommonData.fixRateRange(this.realRate);
        this.lifeDrain = CommonData.fixRateRange(this.lifeDrain);
        this.dodge = CommonData.fixRateRange(this.dodge);
        this.remoteCritRate = CommonData.fixRateRange(this.remoteCritRate);
        this.criticalStrikeRate = CommonData.fixRateRange(this.criticalStrikeRate);
        this.iceRate = CommonData.fixRateRange(this.iceRate);
        return this;
      };
      CommonData.addPercent = function(rate1, rate2) {
        var rate = 1;
        rate *= 1 - rate1 / 100;
        rate *= 1 - rate2 / 100;
        return 100 * (1 - rate);
      };
      CommonData.getPercentRate = function(rate) {
        return rate / 100;
      };
      CommonData.fixRateRange = function(rate) {
        rate = rate < 0 ? 0 : rate;
        rate = rate > 100 ? 100 : rate;
        return rate;
      };
      return CommonData;
    }();
    exports.default = CommonData;
    cc._RF.pop();
  }, {} ],
  Controller: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12f66EVamVPmoXVKYdoGHk5", "Controller");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EventHelper_1 = require("./EventHelper");
    var Logic_1 = require("./Logic");
    var CoolDownView_1 = require("./UI/CoolDownView");
    var Controller = function(_super) {
      __extends(Controller, _super);
      function Controller() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.attackAction = null;
        _this.attackActionTouched = false;
        _this.shootAction = null;
        _this.shootActionTouched = false;
        _this.interactAction = null;
        _this.interactActionTouched = false;
        _this.interactEmpty = null;
        _this.skillAction = null;
        _this.skillAction1 = null;
        _this.coolDown = null;
        _this.coolDown1 = null;
        _this.skillActionTouched = false;
        _this.skillActionTouched1 = false;
        _this.timeDelay = 0;
        return _this;
      }
      Controller.prototype.onLoad = function() {
        var _this = this;
        this.coolDown.init(CoolDownView_1.default.PROFESSION);
        this.coolDown1.init(CoolDownView_1.default.ORGANIZATION);
        this.attackAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.attackActionTouched = true;
        }, this);
        this.attackAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.attackActionTouched = false;
        }, this);
        this.attackAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.attackActionTouched = false;
        }, this);
        this.shootAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.shootActionTouched = true;
        }, this);
        this.shootAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.shootActionTouched = false;
          cc.director.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK_CANCEL);
        }, this);
        this.shootAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.shootActionTouched = false;
          cc.director.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK_CANCEL);
        }, this);
        this.skillAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.skillActionTouched = true;
        }, this);
        this.skillAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.skillActionTouched = false;
        }, this);
        this.skillAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.skillActionTouched = false;
        }, this);
        this.skillAction1.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.skillActionTouched1 = true;
        }, this);
        this.skillAction1.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.skillActionTouched1 = false;
        }, this);
        this.skillAction1.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.skillActionTouched1 = false;
        }, this);
        var isLongPress = false;
        var touchStart = false;
        this.interactAction.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.interactActionTouched = true;
          touchStart = true;
          _this.scheduleOnce(function() {
            if (!touchStart) return;
            isLongPress = true;
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_TRIGGER, {
              isLongPress: true
            });
          }, .3);
        }, this);
        this.interactAction.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.interactActionTouched = false;
          isLongPress || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_TRIGGER);
          touchStart = false;
          isLongPress = false;
        }, this);
        this.interactAction.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.interactActionTouched = false;
          touchStart = false;
          isLongPress = false;
        }, this);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CHANGE_CONTROLLER_SHIELD, function(detail) {
          _this.node && _this.changeRes(detail.isShield);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CONTROLLER_UPDATE_GAMEPAD, function(detail) {
          _this.node && _this.updateGamepad();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CONTROLLER_INTERACT_SHOW, function(detail) {
          if (_this.node) {
            _this.interactAction.active = detail.isShow;
            _this.interactEmpty.active = !detail.iiShow;
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CONTROLLER_REMOTE_SHOW, function(detail) {
          _this.node && (_this.shootAction.active = detail.isShow);
        });
        this.updateGamepad();
      };
      Controller.prototype.updateGamepad = function() {
        if (cc.sys.isMobile || Logic_1.default.settings.showGamepad) {
          this.node.getChildByName("actions").active = true;
          this.coolDown.node.position = this.skillAction.position.clone();
          this.coolDown1.node.position = this.skillAction1.position.clone();
        } else {
          this.node.getChildByName("actions").active = false;
          this.coolDown.node.position = cc.v3(0, 180);
          this.coolDown1.node.position = cc.v3(-96, 180);
        }
      };
      Controller.prototype.changeRes = function(isShield) {
        if (!this.shootAction) return;
        var button = this.shootAction.getComponent(cc.Button);
        if (!button) return;
        button.normalSprite = Logic_1.default.spriteFrameRes(isShield ? "uishield" : "uiremote");
        button.pressedSprite = Logic_1.default.spriteFrameRes(isShield ? "uishieldpress" : "uiremotepress");
        button.hoverSprite = Logic_1.default.spriteFrameRes(isShield ? "uishieldlight" : "uiremotelight");
        button.disabledSprite = Logic_1.default.spriteFrameRes(isShield ? "uishieldpress" : "uiremotepress");
      };
      Controller.prototype.drawSkillCoolDown = function(coolDown, count, graphics, coolDownFuc, coolDownNode, skillIcon, label) {
        var _this = this;
        label && (label.string = count > 0 ? "" + count : "");
        if (coolDown < 0) return;
        if (!coolDownNode) return;
        coolDownFuc && this.unschedule(coolDownFuc);
        0 == coolDown && graphics && graphics.clear();
        var p = cc.Vec3.ZERO;
        var percent = 100;
        var delta = .1;
        var offset = 100 / coolDown * delta;
        coolDownFuc = function() {
          percent -= offset;
          graphics && graphics.clear();
          _this.drawArc(360 * percent / 100, p, graphics);
          skillIcon.node.opacity = 200;
          if (percent < 0) {
            skillIcon.node.opacity = 0;
            graphics && graphics.clear();
            _this.unschedule(coolDownFuc);
          }
        };
        this.schedule(coolDownFuc, delta, cc.macro.REPEAT_FOREVER);
      };
      Controller.prototype.drawArc = function(angle, center, graphics) {
        if (!graphics) return;
        graphics.clear();
        if (angle < 0) return;
        var r = 48;
        var endAngle = 2 * angle * Math.PI / 360;
        graphics.arc(center.x, center.y, r, 2 * Math.PI, 2 * Math.PI - endAngle);
        graphics.stroke();
      };
      Controller.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .03) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      Controller.prototype.update = function(dt) {
        if (this.isTimeDelay(dt) && !Logic_1.default.isGamePause) {
          this.attackActionTouched && cc.director.emit(EventHelper_1.EventHelper.PLAYER_ATTACK);
          this.shootActionTouched && cc.director.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK);
          this.skillActionTouched && cc.director.emit(EventHelper_1.EventHelper.PLAYER_SKILL);
          this.skillActionTouched1 && cc.director.emit(EventHelper_1.EventHelper.PLAYER_SKILL1);
        }
      };
      __decorate([ property(cc.Node) ], Controller.prototype, "attackAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "shootAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "interactAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "interactEmpty", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "skillAction", void 0);
      __decorate([ property(cc.Node) ], Controller.prototype, "skillAction1", void 0);
      __decorate([ property(CoolDownView_1.default) ], Controller.prototype, "coolDown", void 0);
      __decorate([ property(CoolDownView_1.default) ], Controller.prototype, "coolDown1", void 0);
      Controller = __decorate([ ccclass ], Controller);
      return Controller;
    }(cc.Component);
    exports.default = Controller;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./UI/CoolDownView": "CoolDownView"
  } ],
  CoolDownView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58d32PM1/ZHL6BBvFTBgSIk", "CoolDownView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CoolDownView = function(_super) {
      __extends(CoolDownView, _super);
      function CoolDownView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.id = CoolDownView_1.PROFESSION;
        _this.skillIcon = null;
        _this.graphics = null;
        _this.coolDownFuc = null;
        _this.label = null;
        _this.secondCount = 0;
        _this.secondCountLerp = 0;
        _this.duration = 0;
        _this.storePoint = 1;
        _this.storePointMax = 1;
        _this.timeDelay = 0;
        return _this;
      }
      CoolDownView_1 = CoolDownView;
      CoolDownView.prototype.onLoad = function() {
        var _this = this;
        this.graphics = this.getComponent(cc.Graphics);
        this.label = this.getComponentInChildren(cc.Label);
        this.skillIcon = this.node.getChildByName("mask").getChildByName("sprite").getComponent(cc.Sprite);
        this.skillIcon.node.opacity = 255;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_CONTROLLER_COOLDOWN, function(detail) {
          _this.node && detail.id == _this.id && _this.setData(detail.duration, detail.secondCount, detail.storePoint, detail.storePointMax);
        });
      };
      CoolDownView.prototype.init = function(id) {
        this.id = id;
        this.skillIcon || (this.skillIcon = this.node.getChildByName("mask").getChildByName("sprite").getComponent(cc.Sprite));
        id == CoolDownView_1.PROFESSION ? this.setSkillIcon(Logic_1.default.playerData.AvatarData.professionData.talent) : id == CoolDownView_1.ORGANIZATION && this.setSkillIcon("talent10" + Logic_1.default.playerData.AvatarData.organizationIndex);
      };
      CoolDownView.prototype.setSkillIcon = function(resName) {
        this.skillIcon.spriteFrame = Logic_1.default.spriteFrameRes(resName);
      };
      CoolDownView.prototype.setData = function(duration, secondCount, storePoint, storePointMax) {
        if (!this.node) return;
        secondCount > duration && (secondCount = duration);
        duration <= 0 && (duration = 0);
        this.storePointMax = storePointMax;
        this.duration = duration;
        this.secondCountLerp = secondCount;
        this.secondCount = secondCount;
        this.storePoint = storePoint;
        this.drawSkillCoolDown();
      };
      CoolDownView.prototype.drawSkillCoolDown = function() {
        if (this.duration <= 0) return;
        this.label.string = this.storePoint > 0 && this.storePointMax > 1 ? "" + this.storePoint : "";
        this.graphics && this.graphics.clear();
        this.secondCountLerp > 1 && (this.secondCount = Logic_1.default.lerp(this.secondCount, this.secondCountLerp - 1, .1));
        if (this.secondCount > 0) {
          var p = cc.Vec3.ZERO;
          var percent = this.secondCount / this.duration;
          this.drawArc(360 * percent, p, this.graphics);
        }
      };
      CoolDownView.prototype.drawArc = function(angle, center, graphics) {
        if (!graphics) return;
        graphics.clear();
        if (angle < 0) return;
        var r = 48;
        var endAngle = 2 * angle * Math.PI / 360;
        graphics.arc(center.x, center.y, r, 2 * Math.PI, 2 * Math.PI - endAngle);
        graphics.stroke();
      };
      CoolDownView.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .1) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      CoolDownView.prototype.start = function() {};
      CoolDownView.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.drawSkillCoolDown();
      };
      var CoolDownView_1;
      CoolDownView.PROFESSION = 0;
      CoolDownView.ORGANIZATION = 1;
      CoolDownView = CoolDownView_1 = __decorate([ ccclass ], CoolDownView);
      return CoolDownView;
    }(cc.Component);
    exports.default = CoolDownView;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper",
    "../Logic": "Logic"
  } ],
  CustomCollider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9b5bliO/dPG4LBVgkSO8yf", "CustomCollider");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CustomCollider = function(_super) {
      __extends(CustomCollider, _super);
      function CustomCollider() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.tag = 0;
        _this.offset = cc.Vec2.ZERO;
        _this.type = CustomCollider_1.TYPE.CIRCLE;
        _this.radius = 64;
        _this.size = cc.size(128, 128);
        return _this;
      }
      CustomCollider_1 = CustomCollider;
      CustomCollider.prototype.start = function() {};
      var CustomCollider_1;
      CustomCollider.TYPE = cc.Enum({
        CIRCLE: 0,
        RECT: 1
      });
      __decorate([ property ], CustomCollider.prototype, "tag", void 0);
      __decorate([ property(cc.Vec2) ], CustomCollider.prototype, "offset", void 0);
      __decorate([ property({
        type: CustomCollider_1.TYPE,
        displayName: "\u7ec4\u4ef6\u7c7b\u578b"
      }) ], CustomCollider.prototype, "type", void 0);
      __decorate([ property({
        visible: function() {
          return this.type == CustomCollider_1.TYPE.CIRCLE;
        }
      }) ], CustomCollider.prototype, "radius", void 0);
      __decorate([ property({
        visible: function() {
          return this.type == CustomCollider_1.TYPE.RECT;
        }
      }) ], CustomCollider.prototype, "size", void 0);
      CustomCollider = CustomCollider_1 = __decorate([ ccclass ], CustomCollider);
      return CustomCollider;
    }(cc.Component);
    exports.default = CustomCollider;
    cc._RF.pop();
  }, {} ],
  CutScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb0c7YcdndBfpVkO+dBgo79", "CutScene");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CutScene = function(_super) {
      __extends(CutScene, _super);
      function CutScene() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isSkip = false;
        return _this;
      }
      CutScene.prototype.onLoad = function() {
        var _this = this;
        this.skipNode = this.node.getChildByName("skip");
        this.cut001 = this.node.getChildByName("sprite").getChildByName("cut001");
        this.cut002 = this.node.getChildByName("sprite").getChildByName("cut002");
        this.cut003 = this.node.getChildByName("sprite").getChildByName("cut003");
        this.cut004 = this.node.getChildByName("sprite").getChildByName("cut004");
        this.cut006 = this.node.getChildByName("sprite").getChildByName("cut006");
        this.cut007 = this.node.getChildByName("sprite").getChildByName("cut007");
        this.cut008 = this.node.getChildByName("sprite").getChildByName("cut008");
        this.cut009 = this.node.getChildByName("sprite").getChildByName("cut009");
        this.cutList = new Array();
        this.cutList.push(this.cut001);
        this.cutList.push(this.cut002);
        this.cutList.push(this.cut003);
        this.cutList.push(this.cut004);
        this.cutList.push(this.cut006);
        this.cutList.push(this.cut007);
        this.cutList.push(this.cut008);
        this.cutList.push(this.cut009);
        this.skipNode.opacity = 0;
        this.node.opacity = 0;
        this.hideAllCuts();
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          255 == _this.skipNode.opacity && (_this.isSkip = true);
          _this.skipNode.opacity = 255;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {}, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {}, this);
      };
      CutScene.prototype.playShow = function() {
        var _this = this;
        this.node.opacity = 255;
        this.getComponent(cc.Animation).play();
        this.scheduleOnce(function() {
          _this.isSkip = true;
        }, 12);
      };
      CutScene.prototype.unregisterClick = function() {
        this.node.off(cc.Node.EventType.TOUCH_START);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL);
        this.node.off(cc.Node.EventType.TOUCH_END);
      };
      CutScene.prototype.hideAllCuts = function() {
        for (var _i = 0, _a = this.cutList; _i < _a.length; _i++) {
          var cut = _a[_i];
          cut.opacity = 0;
        }
      };
      CutScene.prototype.start = function() {};
      CutScene = __decorate([ ccclass ], CutScene);
      return CutScene;
    }(cc.Component);
    exports.default = CutScene;
    cc._RF.pop();
  }, {} ],
  DamageData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "140ebm8pJ5CBb4RE4tI9c22", "DamageData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData = function() {
      function DamageData(realDamage) {
        this.realDamage = 0;
        this.physicalDamage = 0;
        this.magicDamage = 0;
        this.realRate = 0;
        this.iceRate = 0;
        this.fireRate = 0;
        this.lighteningRate = 0;
        this.toxicRate = 0;
        this.curseRate = 0;
        this.stoneRate = 0;
        this.isCriticalStrike = false;
        this.isBackAttack = false;
        this.isRemote = false;
        this.isStab = false;
        this.isFar = false;
        this.isFist = false;
        this.isBlunt = false;
        this.isMelee = false;
        this.comboType = 0;
        this.realDamage = realDamage || 0;
      }
      DamageData.prototype.valueCopy = function(data) {
        this.realDamage = data.realDamage ? data.realDamage : 0;
        this.physicalDamage = data.physicalDamage ? data.physicalDamage : 0;
        this.magicDamage = data.magicDamage ? data.magicDamage : 0;
        this.realRate = data.realRate ? data.realRate : 0;
        this.iceRate = data.iceRate ? data.iceRate : 0;
        this.fireRate = data.fireRate ? data.fireRate : 0;
        this.lighteningRate = data.lighteningRate ? data.lighteningRate : 0;
        this.toxicRate = data.toxicRate ? data.toxicRate : 0;
        this.curseRate = data.curseRate ? data.curseRate : 0;
        this.stoneRate = data.stoneRate ? data.stoneRate : 0;
        this.isCriticalStrike = !!data.isCriticalStrike;
        this.isBackAttack = !!data.isBackAttack;
        this.isRemote = !!data.isRemote;
        this.isStab = !!data.isStab;
        this.isFar = !!data.isFar;
        this.isFist = !!data.isFist;
        this.isBlunt = !!data.isBlunt;
        this.isMelee = !!data.isMelee;
        this.comboType = data.comboType ? data.comboType : 0;
      };
      DamageData.prototype.clone = function() {
        var e = new DamageData();
        e.realDamage = this.realDamage;
        e.physicalDamage = this.physicalDamage;
        e.magicDamage = this.magicDamage;
        e.realRate = this.realRate;
        e.iceRate = this.iceRate;
        e.fireRate = this.fireRate;
        e.lighteningRate = this.lighteningRate;
        e.toxicRate = this.toxicRate;
        e.curseRate = this.curseRate;
        e.stoneRate = this.stoneRate;
        e.isCriticalStrike = this.isCriticalStrike;
        e.isBackAttack = this.isBackAttack;
        e.isRemote = this.isRemote;
        e.isBlunt = this.isBlunt;
        e.isFar = this.isFar;
        e.isFist = this.isFist;
        e.isStab = this.isStab;
        e.isMelee = this.isMelee;
        e.comboType = this.comboType;
        return e;
      };
      DamageData.prototype.getTotalDamage = function() {
        var d = this.physicalDamage + this.magicDamage + this.realDamage;
        if (isNaN(d)) {
          console.log(d);
          d = 0;
        }
        return d;
      };
      return DamageData;
    }();
    exports.default = DamageData;
    cc._RF.pop();
  }, {} ],
  DashShadow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "909e64n9VxBGoAX7rWiFEbf", "DashShadow");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var Dungeon_1 = require("../Dungeon");
    var Talent_1 = require("../Talent/Talent");
    var Shooter_1 = require("../Shooter");
    var IndexZ_1 = require("../Utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DashShadow = function(_super) {
      __extends(DashShadow, _super);
      function DashShadow() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hv = cc.v3(1, 0);
        _this.shooter = null;
        return _this;
      }
      DashShadow.prototype.onLoad = function() {
        this.rigidBody = this.getComponent(cc.RigidBody);
        this.motionStreak = this.getComponent(cc.MotionStreak);
        this.sprite = this.node.getChildByName("sprite");
      };
      DashShadow.prototype.init = function(talentDash) {
        this.talentDash = talentDash;
        this.shooter.dungeon = this.talentDash.player.node.parent.getComponent(Dungeon_1.default);
      };
      DashShadow.prototype.changeDashPerformance = function(talentList) {
        this.motionStreak.color = cc.Color.BLACK;
        for (var _i = 0, talentList_1 = talentList; _i < talentList_1.length; _i++) var t = talentList_1[_i];
      };
      DashShadow.prototype.onEnable = function() {};
      DashShadow.prototype.start = function() {};
      DashShadow.prototype.getPlayerPosition = function() {
        return this.talentDash.player.node.position.clone().addSelf(cc.v3(8, 8));
      };
      DashShadow.prototype.getNearPlayerDistance = function(playerNode) {
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, this.getPlayerPosition());
        return dis;
      };
      DashShadow.prototype.show = function() {
        var _this = this;
        this.node.active = true;
        this.node.parent = this.talentDash.player.node.parent;
        var faceright = this.talentDash.player.isFaceRight;
        this.sprite.scaleX = faceright ? 1 : -1;
        this.node.setPosition(this.getPlayerPosition());
        var speed = 1200;
        this.rigidBody.linearDamping = 1;
        if (this.talentDash.hashTalent(Talent_1.default.DASH_14)) {
          speed = 2e3;
          this.rigidBody.linearDamping = 1;
        }
        var hs = this.hv.mul(speed);
        this.rigidBody.linearVelocity = cc.v2(hs.x, hs.y);
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
        this.fire(this.shooter);
        this.scheduleOnce(function() {
          _this.hide();
        }, .45);
      };
      DashShadow.prototype.hide = function() {
        this.talentDash.player.node.setPosition(Dungeon_1.default.fixOuterMap(this.node.position.clone()));
        this.node.active = false;
        this.rigidBody.linearVelocity = cc.Vec2.ZERO;
      };
      DashShadow.prototype.onBeginContact = function(contact, selfCollider, otherCollider) {
        this.talentDash && this.talentDash.hashTalent(Talent_1.default.DASH_02) && this.talentDash.attacking(otherCollider, this.node);
      };
      DashShadow.prototype.fire = function(shooter) {
        shooter.data.bulletLineExNum = 5;
        shooter.data.bulletLineInterval = .05;
        if (this.talentDash.hashTalent(Talent_1.default.DASH_11)) {
          shooter.data.bulletLineExNum = 10;
          shooter.data.bulletLineInterval = .03;
        }
        var isOpenFire = false;
        if (this.talentDash.hashTalent(Talent_1.default.DASH_09)) {
          isOpenFire = true;
          shooter.data.bulletType = "bullet025";
        } else if (this.talentDash.hashTalent(Talent_1.default.DASH_10)) {
          isOpenFire = true;
          shooter.data.bulletType = "bullet026";
        }
        isOpenFire && shooter.fireBullet(0, cc.v3(0, 0));
      };
      DashShadow.prototype.setHv = function(hv) {
        hv.equals(cc.Vec3.ZERO) ? this.hv = cc.v3(1, 0) : this.hv = hv;
      };
      __decorate([ property(Shooter_1.default) ], DashShadow.prototype, "shooter", void 0);
      DashShadow = __decorate([ ccclass ], DashShadow);
      return DashShadow;
    }(cc.Component);
    exports.default = DashShadow;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../Shooter": "Shooter",
    "../Talent/Talent": "Talent",
    "../Utils/IndexZ": "IndexZ"
  } ],
  DecorationFloor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0e43WuUrFGu7HrB9h8NrBh", "DecorationFloor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DecorationFloor = function(_super) {
      __extends(DecorationFloor, _super);
      function DecorationFloor() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.parallexLevel = 0;
        _this.RANGE = 300;
        return _this;
      }
      DecorationFloor.prototype.init = function(dungeon, resName, scale, parallexLevel, anchor, opacity, zIndex) {
        this.dungeon = dungeon;
        this.parallexLevel = parallexLevel;
        zIndex && (this.node.zIndex = zIndex);
        this.node.scale = scale;
        if (anchor) {
          this.node.anchorX = anchor.x;
          this.node.anchorY = anchor.y;
        }
        var sprite = this.getComponent(cc.Sprite);
        sprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
        this.node.width = sprite.spriteFrame.getOriginalSize().width;
        this.node.height = sprite.spriteFrame.getOriginalSize().height;
        this.node.opacity = opacity || 255;
        this.originPos = this.node.position.clone();
      };
      DecorationFloor.prototype.update = function(dt) {
        if (this.dungeon && this.parallexLevel > 0) {
          var pos = this.dungeon.player.node.position.sub(this.node.position);
          pos.x > this.RANGE && (pos.x = this.RANGE);
          pos.x < -this.RANGE && (pos.x = -this.RANGE);
          pos.y > this.RANGE && (pos.y = this.RANGE);
          pos.y < -this.RANGE && (pos.y = -this.RANGE);
          var p = cc.v3(pos.x / this.RANGE * Dungeon_1.default.TILE_SIZE * this.parallexLevel, -pos.y / this.RANGE * Dungeon_1.default.TILE_SIZE * this.parallexLevel / 2);
          this.node.position = Logic_1.default.lerpPos(this.node.position, this.originPos.add(p), 5 * dt);
        }
      };
      DecorationFloor = __decorate([ ccclass ], DecorationFloor);
      return DecorationFloor;
    }(Building_1.default);
    exports.default = DecorationFloor;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "./Building": "Building"
  } ],
  DefaultStateMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4327d7ykMVKAbwAJoU8o/85", "DefaultStateMachine");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DefaultStateMachine = function() {
      function DefaultStateMachine(owner, initialState, globalState) {
        this.owner = owner;
        this.setInitialState(initialState);
        this.setGlobalState(globalState);
      }
      DefaultStateMachine.prototype.getOwner = function() {
        return this.owner;
      };
      DefaultStateMachine.prototype.setOwner = function(owner) {
        this.owner = owner;
      };
      DefaultStateMachine.prototype.setInitialState = function(state) {
        this.previousState = null;
        this.currentState = state;
      };
      DefaultStateMachine.prototype.setGlobalState = function(state) {
        this.globalState = state;
      };
      DefaultStateMachine.prototype.getCurrentState = function() {
        return this.currentState;
      };
      DefaultStateMachine.prototype.getGlobalState = function() {
        return this.globalState;
      };
      DefaultStateMachine.prototype.getPreviousState = function() {
        return this.previousState;
      };
      DefaultStateMachine.prototype.update = function() {
        this.globalState && this.globalState.update(this.owner);
        this.currentState && this.currentState.update(this.owner);
      };
      DefaultStateMachine.prototype.changeState = function(newState) {
        this.previousState = this.currentState;
        this.currentState && this.currentState.exit(this.owner);
        this.currentState = newState;
        this.currentState && this.currentState.enter(this.owner);
      };
      DefaultStateMachine.prototype.revertToPreviousState = function() {
        if (!this.previousState) return false;
        this.changeState(this.previousState);
        return true;
      };
      DefaultStateMachine.prototype.isInState = function(state) {
        return this.currentState == state;
      };
      DefaultStateMachine.prototype.handleEvent = function(event) {
        if (this.currentState && this.currentState.event(this.owner, event)) return true;
        if (this.globalState && this.globalState.event(this.owner, event)) return true;
        return false;
      };
      return DefaultStateMachine;
    }();
    exports.default = DefaultStateMachine;
    cc._RF.pop();
  }, {} ],
  Door: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f14f52tIg1Ivb0Rnl80O8tL", "Door");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Door = function(_super) {
      __extends(Door, _super);
      function Door() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        _this.isDoor = true;
        _this.isHidden = false;
        _this.isEmpty = false;
        _this.isLock = false;
        _this.isDecorate = false;
        _this.dir = 0;
        _this.sprite = null;
        _this.roof = null;
        _this.leftside = null;
        _this.rightside = null;
        _this.lockInfo = null;
        return _this;
      }
      Door.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.roof = this.node.getChildByName("roof").getComponent(cc.Sprite);
        this.leftside = this.node.getChildByName("leftside").getComponent(cc.Sprite);
        this.rightside = this.node.getChildByName("rightside").getComponent(cc.Sprite);
        this.lockInfo = this.node.getChildByName("roof").getChildByName("info");
        this.arrow = this.node.getChildByName("doorarrow");
        this.arrow.opacity = 0;
        this.boxCollider = this.getComponent(cc.PhysicsBoxCollider);
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      Door.prototype.start = function() {
        if (this.sprite) {
          this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("door" + (this.dir > 1 ? "side" : "") + "0" + Logic_1.default.chapterIndex + "anim000");
          this.sprite.node.width = 128;
          this.sprite.node.height = this.dir > 1 ? 384 : 128;
          this.isDecorate && (this.sprite.node.opacity = 0);
        }
        this.roof || (this.roof = this.node.getChildByName("roof").getComponent(cc.Sprite));
        var roofframe = Logic_1.default.spriteFrameRes("roof" + Logic_1.default.worldLoader.getCurrentLevelData().wallRes1 + "anim000");
        var sideframe = Logic_1.default.spriteFrameRes("wall" + Logic_1.default.worldLoader.getCurrentLevelData().wallRes1 + "anim002");
        if (this.dir > 1) {
          roofframe = null;
          sideframe = null;
          this.node.zIndex -= 120;
        } else this.node.zIndex += 4;
        this.leftside.spriteFrame = sideframe;
        this.rightside.spriteFrame = sideframe;
        this.roof.spriteFrame = roofframe;
        this.roof.node.parent = this.node.parent;
        var p = this.node.convertToWorldSpaceAR(cc.v3(0, 128));
        this.roof.node.position = this.roof.node.parent.convertToNodeSpaceAR(p);
        this.roof.node.zIndex = IndexZ_1.default.OVERHEAD;
        switch (this.dir) {
         case 0:
          break;

         case 1:
          this.roof.node.angle = 180;
          this.lockInfo.angle = -180;
          break;

         case 2:
          break;

         case 3:
          this.sprite.node.scaleX = -1;
        }
        this.lockInfo && this.isLock && !Logic_1.default.mapManager.isNeighborRoomStateClear(this.dir) && !this.isDecorate ? this.lockInfo.opacity = 255 : 1 == this.dir && (this.roof.node.opacity = 128);
        var collider = this.boxCollider;
        collider.offset = cc.v2(0, 7);
        collider.size = cc.size(128, 114);
        if (this.dir > 1) {
          collider.offset = cc.v2(0, -64);
          collider.size = cc.size(64, 256);
        }
        collider.apply();
      };
      Door.prototype.setOpen = function(isOpen, immediately) {
        if (!this.isDoor) return;
        isOpen ? this.openGate(immediately) : this.closeGate(immediately);
      };
      Door.prototype.openGate = function(immediately) {
        var _this = this;
        if (this.lockInfo && this.isLock && !Logic_1.default.mapManager.isNeighborRoomStateClear(this.dir) && !this.isDecorate) {
          this.lockInfo.opacity = 255;
          return;
        }
        if (this.isOpen) return;
        this.sprite || (this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite));
        this.lockInfo && (this.lockInfo.opacity = 0);
        this.isOpen = true;
        var index = 0;
        this.schedule(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("door" + (_this.dir > 1 ? "side" : "") + "0" + Logic_1.default.chapterIndex + "anim00" + index++);
          if (index > 4) {
            _this.boxCollider.sensor = true;
            _this.boxCollider.apply();
          }
        }, immediately ? 0 : .15, 4);
      };
      Door.prototype.closeGate = function(immediately) {
        var _this = this;
        if (!this.isOpen || this.isEmpty) return;
        this.isOpen = false;
        var index = 4;
        this.schedule(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("door" + (_this.dir > 1 ? "side" : "") + "0" + Logic_1.default.chapterIndex + "anim00" + index--);
          if (index < 0) {
            _this.boxCollider.sensor = false;
            _this.boxCollider.apply();
          }
        }, immediately ? 0 : .1, 4);
      };
      Door.prototype.onCollisionEnter = function(other, self) {
        this.dir < 2 && (other.tag == ColliderTag_1.ColliderTag.PLAYER || other.tag == ColliderTag_1.ColliderTag.NONPLAYER) && (this.roof.node.opacity = 128);
      };
      Door.prototype.onCollisionStay = function(other, self) {
        this.dir < 2 && (other.tag == ColliderTag_1.ColliderTag.PLAYER || other.tag == ColliderTag_1.ColliderTag.NONPLAYER) && (this.roof.node.opacity = 128);
      };
      Door.prototype.onCollisionExit = function(other, self) {
        if (this.dir < 2 && (other.tag == ColliderTag_1.ColliderTag.PLAYER || other.tag == ColliderTag_1.ColliderTag.NONPLAYER)) {
          this.roof.node.opacity = 255;
          (this.lockInfo && this.lockInfo.opacity < 1 || this.isDecorate) && (this.roof.node.opacity = 180);
        }
      };
      Door.prototype.checkLock = function() {};
      Door = __decorate([ ccclass ], Door);
      return Door;
    }(Building_1.default);
    exports.default = Door;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Logic": "Logic",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  Dragon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a38f40rLRxEErH92pL9pLeC", "Dragon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var DamageData_1 = require("../Data/DamageData");
    var Shooter_1 = require("../Shooter");
    var Dungeon_1 = require("../Dungeon");
    var StatusManager_1 = require("../Manager/StatusManager");
    var NextStep_1 = require("../Utils/NextStep");
    var Random_1 = require("../Utils/Random");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Dragon = function(_super) {
      __extends(Dragon, _super);
      function Dragon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.fireSkill = new NextStep_1.default();
        _this.rainSkill = new NextStep_1.default();
        _this.isRainReady = false;
        _this.actionCount = 0;
        _this.actionTimeDelay = 0;
        return _this;
      }
      Dragon.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter01 = this.node.getChildByName("Shooter01").getComponent(Shooter_1.default);
        this.shooter01.from.valueCopy(FromData_1.default.getClone(this.actorName(), "dragonhead"));
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.physicBox = this.getComponent(cc.PhysicsBoxCollider);
      };
      Dragon.prototype.start = function() {};
      Dragon.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow || this.rainSkill.IsExcuting) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Dragon.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Dragon.prototype.fireFire = function() {
        var _this = this;
        this.fireSkill.next(function() {
          _this.fireSkill.IsExcuting = true;
          _this.anim.play("DragonFire");
          _this.scheduleOnce(function() {
            _this.shooter01.setHv(cc.v3(0, -1));
            _this.shooter01.data.bulletLineInterval = .5;
            _this.fireShooter(_this.shooter01, "bullet200", 2, 5);
          }, 1.1);
          _this.scheduleOnce(function() {
            _this.fireSkill.IsExcuting = false;
            _this.anim.play("DragonIdle");
          }, 2);
        }, 5, true);
      };
      Dragon.prototype.fireRain = function() {
        var _this = this;
        if (!this.isRainReady) return;
        this.rainSkill.next(function() {
          _this.rainSkill.IsExcuting = true;
          _this.physicBox.sensor = true;
          _this.physicBox.apply();
          _this.rigidbody.linearVelocity = cc.v2(0, 0);
          _this.anim.stop();
          _this.anim.play("DragonFlyHigh");
          _this.scheduleOnce(function() {
            _this.anim.play("DragonFlyLow");
            _this.physicBox.sensor = false;
            _this.physicBox.apply();
          }, 13);
          _this.scheduleOnce(function() {
            _this.rainSkill.IsExcuting = false;
          }, 15);
          _this.schedule(function() {
            _this.dungeon.addFallStone(_this.dungeon.player.node.position, true, true);
            _this.dungeon.addFallStone(Dungeon_1.default.getPosInMap(cc.v3(Random_1.default.getRandomNum(0, Dungeon_1.default.WIDTH_SIZE - 1), Random_1.default.getRandomNum(0, Dungeon_1.default.HEIGHT_SIZE - 1))), true, true);
            _this.dungeon.addFallStone(Dungeon_1.default.getPosInMap(cc.v3(Random_1.default.getRandomNum(0, Dungeon_1.default.WIDTH_SIZE - 1), Random_1.default.getRandomNum(0, Dungeon_1.default.HEIGHT_SIZE - 1))), true, true);
            _this.dungeon.addFallStone(Dungeon_1.default.getPosInMap(cc.v3(Random_1.default.getRandomNum(0, Dungeon_1.default.WIDTH_SIZE - 1), Random_1.default.getRandomNum(0, Dungeon_1.default.HEIGHT_SIZE - 1))), true, true);
          }, .5, 20, 2);
        }, 30);
      };
      Dragon.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) {
          this.actionCount = 0;
          return;
        }
        this.changeZIndex();
        this.fireRain();
        this.rainSkill.IsExcuting || this.fireFire();
        if (!this.rainSkill.IsExcuting) {
          this.actionCount++;
          var pos = cc.v3(1, 0);
          this.actionCount > 10 && (pos = cc.v3(-1, 0));
          this.actionCount > 20 && (this.actionCount = 0);
          if (!pos.equals(cc.Vec3.ZERO)) {
            pos = pos.normalizeSelf();
            this.move(pos, 800);
          }
        }
      };
      Dragon.prototype.changeZIndex = function() {
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
      };
      Dragon.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.node.position));
        var h = pos.x;
        var v = pos.y;
        var movement = cc.v2(h, v);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.changeZIndex();
      };
      Dragon.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.setHv(cc.v3(0, -1));
        shooter.fireBullet(angle, cc.Vec3.ZERO);
      };
      Dragon.prototype.showBoss = function() {
        var _this = this;
        this.sc.isShow = true;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
        this.scheduleOnce(function() {
          _this.isRainReady = true;
        }, 10);
      };
      Dragon.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Dragon.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
      };
      Dragon.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && !this.sc.isDied && !this.physicBox.sensor) {
          var d = new DamageData_1.default();
          d.physicalDamage = 3;
          target.takeDamage(d, FromData_1.default.getClone(this.actorName(), "dragonhead"), this);
        }
      };
      Dragon.prototype.actorName = function() {
        return "\u672b\u65e5\u9ed1\u9f99";
      };
      Dragon = __decorate([ ccclass ], Dragon);
      return Dragon;
    }(Boss_1.default);
    exports.default = Dragon;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Shooter": "Shooter",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "../Utils/NextStep": "NextStep",
    "../Utils/Random": "Random",
    "./Boss": "Boss"
  } ],
  DryadGrass: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7d90DMrjlILYsaGuEm//pn", "DryadGrass");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var Actor_1 = require("../Base/Actor");
    var StatusManager_1 = require("../Manager/StatusManager");
    var FromData_1 = require("../Data/FromData");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DryadGrass = function(_super) {
      __extends(DryadGrass, _super);
      function DryadGrass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isUp = false;
        _this.isAuto = true;
        _this.isUping = false;
        return _this;
      }
      DryadGrass.prototype.onLoad = function() {
        this.isUp = false;
      };
      DryadGrass.prototype.takeDamage = function() {
        return false;
      };
      DryadGrass.prototype.fall = function() {
        this.anim = this.getComponent(cc.Animation);
        this.anim.play();
        this.isUping = true;
      };
      DryadGrass.prototype.TwineUp = function() {
        var _this = this;
        this.isUp = true;
        this.scheduleOnce(function() {
          _this.isUp = false;
        }, .1);
        this.scheduleOnce(function() {
          _this.node && _this.node.destroy();
        }, 6);
      };
      DryadGrass.prototype.start = function() {};
      DryadGrass.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        !target || this.isAuto || this.isUping || this.fall();
      };
      DryadGrass.prototype.onCollisionStay = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isUp && this.isValid) {
          this.isUp = false;
          var from = FromData_1.default.getClone(this.actorName(), "dryadtwine03");
          target.takeDamage(new DamageData_1.default(2), from) && target.addStatus(StatusManager_1.default.TWINE, from);
        }
      };
      DryadGrass.prototype.addStatus = function(statusType, from) {};
      DryadGrass.prototype.getCenterPosition = function() {
        return this.node.position.clone();
      };
      DryadGrass.prototype.actorName = function() {
        return "\u6811\u6839\u7f20\u7ed5";
      };
      DryadGrass.prototype.takeDizz = function(dizzDuration) {};
      DryadGrass.prototype.updateStatus = function(statusList, totalStatusData) {};
      DryadGrass.prototype.hideSelf = function(hideDuration) {};
      DryadGrass.prototype.updateDream = function(offset) {
        return 0;
      };
      DryadGrass.prototype.setLinearVelocity = function(movement) {};
      DryadGrass = __decorate([ ccclass ], DryadGrass);
      return DryadGrass;
    }(Actor_1.default);
    exports.default = DryadGrass;
    cc._RF.pop();
  }, {
    "../Base/Actor": "Actor",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/ActorUtils": "ActorUtils"
  } ],
  Dryad: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1a62Oo+gRDI5+v2dxAMRw+", "Dryad");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var Shooter_1 = require("../Shooter");
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var StatusManager_1 = require("../Manager/StatusManager");
    var NextStep_1 = require("../Utils/NextStep");
    var BossAttackCollider_1 = require("./BossAttackCollider");
    var EventHelper_1 = require("../EventHelper");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Dryad = function(_super) {
      __extends(Dryad, _super);
      function Dryad() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hand01 = null;
        _this.hand02 = null;
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.flower01 = null;
        _this.flower02 = null;
        _this.twoFlowerSkill = new NextStep_1.default();
        _this.twineGrassSkill = new NextStep_1.default();
        _this.meleeSkill = new NextStep_1.default();
        _this.stoneSkill = new NextStep_1.default();
        _this.actionTimeDelay = 0;
        return _this;
      }
      Dryad.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter01 = this.node.getChildByName("Shooter01").getComponent(Shooter_1.default);
        this.shooter02 = this.node.getChildByName("Shooter02").getComponent(Shooter_1.default);
        this.shooter03 = this.node.getChildByName("Shooter03").getComponent(Shooter_1.default);
        var from = FromData_1.default.getClone(this.actorName(), "dryadflower04");
        this.shooter01.from.valueCopy(from);
        this.shooter02.from.valueCopy(from);
        this.shooter03.from.valueCopy(from);
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.hand01.from.valueCopy(from);
        this.hand02.from.valueCopy(from);
      };
      Dryad.prototype.start = function() {};
      Dryad.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        this.playHit(this.node.getChildByName("sprite"));
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Dryad.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Dryad.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.changeZIndex();
        this.twoFlowerSkill.IsExcuting || this.stoneSkill.IsExcuting || this.attack();
        this.meleeSkill.IsExcuting || this.stoneSkill.IsExcuting || this.twoFlowers();
        this.meleeSkill.IsExcuting || this.twoFlowerSkill.IsExcuting || this.fireStone();
        this.twineGrass();
      };
      Dryad.prototype.attack = function() {
        var _this = this;
        this.meleeSkill.next(function() {
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.MELEE
            }
          });
          _this.meleeSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          var attackName = "DryadAttack01";
          if (Logic_1.default.getHalfChance()) {
            _this.anim.play("DryadAttack01");
            _this.hand01.showCollider(2, 1);
          } else {
            _this.anim.play("DryadAttack02");
            _this.hand02.showCollider(2, 1);
          }
          _this.scheduleOnce(function() {
            _this.anim.play("DryadIdle");
            _this.meleeSkill.IsExcuting = false;
          }, 1);
        }, 2, true);
      };
      Dryad.prototype.twineGrass = function() {
        var _this = this;
        this.twineGrassSkill.next(function() {
          _this.schedule(function() {
            _this.dungeon.buildingManager.addTwineGrass(Dungeon_1.default.getPosInMap(_this.dungeon.player.pos.clone()), true);
          }, 1, 2);
        }, 8, true);
      };
      Dryad.prototype.twoFlowers = function() {
        var _this = this;
        this.twoFlowerSkill.next(function() {
          _this.twoFlowerSkill.IsExcuting = true;
          _this.shooter02.setHv(cc.v3(0, -1));
          _this.shooter03.setHv(cc.v3(0, -1));
          _this.anim.play("DryadOpen");
          _this.flower01.getComponent(cc.Animation).play();
          _this.flower02.getComponent(cc.Animation).play();
          _this.scheduleOnce(function() {
            _this.shooter02.data.bulletLineInterval = .5;
            _this.shooter03.data.bulletLineInterval = .5;
            _this.fireShooter(_this.shooter02, "bullet021", 99, 2);
            _this.fireShooter(_this.shooter03, "bullet021", 99, 2);
          }, 2);
          _this.scheduleOnce(function() {
            _this.anim.play("DryadIdle");
            _this.twoFlowerSkill.IsExcuting = false;
          }, 4);
        }, 6, true);
      };
      Dryad.prototype.fireStone = function() {
        var _this = this;
        this.stoneSkill.next(function() {
          _this.stoneSkill.IsExcuting = true;
          _this.anim.play("DryadStone");
          _this.scheduleOnce(function() {
            var pos = _this.node.position.clone().add(_this.shooter01.node.position);
            var hv = _this.dungeon.player.getCenterPosition().sub(pos);
            if (!hv.equals(cc.Vec3.ZERO)) {
              hv = hv.normalizeSelf();
              _this.shooter01.setHv(hv);
              _this.fireShooter(_this.shooter01, "bullet022", 0, 0);
            }
          }, .55);
          _this.scheduleOnce(function() {
            _this.stoneSkill.IsExcuting = false;
            _this.anim.play("DryadIdle");
          }, 1);
        }, 4, true);
      };
      Dryad.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle, cc.Vec3.ZERO);
      };
      Dryad.prototype.showBoss = function() {
        this.sc.isShow = true;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      Dryad.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Dryad.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.rigidbody.linearVelocity = cc.Vec2.ZERO;
      };
      Dryad.prototype.actorName = function() {
        return "\u8fdc\u53e4\u4e4b\u6811";
      };
      __decorate([ property(BossAttackCollider_1.default) ], Dryad.prototype, "hand01", void 0);
      __decorate([ property(BossAttackCollider_1.default) ], Dryad.prototype, "hand02", void 0);
      __decorate([ property(cc.Node) ], Dryad.prototype, "flower01", void 0);
      __decorate([ property(cc.Node) ], Dryad.prototype, "flower02", void 0);
      Dryad = __decorate([ ccclass ], Dryad);
      return Dryad;
    }(Boss_1.default);
    exports.default = Dryad;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Shooter": "Shooter",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/NextStep": "NextStep",
    "./Boss": "Boss",
    "./BossAttackCollider": "BossAttackCollider"
  } ],
  DungeonStyleData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6e0bc4Ume5FZZHLhQzz4NXv", "DungeonStyleData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DungeonStyleData = function() {
      function DungeonStyleData(background, topwall, sidewall, door, doorframe, bg02color, floor) {
        this.background = background;
        this.topwall = topwall;
        this.doorframe = doorframe;
        this.sidewall = sidewall;
        this.door = door;
        this.bg02color = bg02color;
        this.floor = floor;
      }
      return DungeonStyleData;
    }();
    exports.default = DungeonStyleData;
    cc._RF.pop();
  }, {} ],
  DungeonStyleManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96118QtbixO743MdRQKBctE", "DungeonStyleManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var Dungeon_1 = require("../Dungeon");
    var DungeonStyleData_1 = require("../Data/DungeonStyleData");
    var ParallaxBackground_1 = require("../UI/ParallaxBackground");
    var IndexZ_1 = require("../Utils/IndexZ");
    var BaseManager_1 = require("./BaseManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DungeonStyleManager = function(_super) {
      __extends(DungeonStyleManager, _super);
      function DungeonStyleManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.background01 = null;
        _this.floor = null;
        _this.parallaxBackground = null;
        _this.darksides = "darksides";
        return _this;
      }
      DungeonStyleManager.prototype.clear = function() {};
      DungeonStyleManager.prototype.runBackgroundAnim = function(resName) {
        if (!this.background01) return;
        var spf1 = Logic_1.default.spriteFrameRes(resName);
        var spf2 = Logic_1.default.spriteFrameRes(resName + "1");
        spf2 || (spf2 = Logic_1.default.spriteFrameRes(resName));
        if (!spf1) return;
        this.background01.stopAllActions();
        var sprite = this.background01.getComponent(cc.Sprite);
        cc.tween(this.background01).repeatForever(cc.tween().delay(.4).call(function() {
          sprite.spriteFrame = spf1;
        }).delay(.4).call(function() {
          sprite.spriteFrame = spf2;
        })).start();
      };
      DungeonStyleManager.prototype.addDecorations = function() {
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          this.styleData = new DungeonStyleData_1.default("pipeline", "restwall1", "restsides", "restdoor", "restdoorframe", "#000000", "tile_lab001");
          break;

         case Logic_1.default.CHAPTER01:
          this.styleData = new DungeonStyleData_1.default("sea", "shipwall1", "shipsides", "shipdoor", "shipdoorframe", "#000000", "tile_deck001");
          break;

         case Logic_1.default.CHAPTER02:
          this.styleData = new DungeonStyleData_1.default("grass", "junglewall1", "junglesides", "jungledoor", "jungledoorframe", "#000000", "tile_dirt001");
          break;

         case Logic_1.default.CHAPTER03:
          this.styleData = new DungeonStyleData_1.default("sandsea", "pyramidwall1", "pyramidsides", "pyramiddoor", "pyramiddoorframe", "#000000", "tile003");
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          this.styleData = new DungeonStyleData_1.default("magmasea", "dungeonwall1", "dungeonsides", "dungeondoor", "dungeondoorframe", "#000000", "tile004");
          break;

         case Logic_1.default.CHAPTER099:
          this.styleData = new DungeonStyleData_1.default("pipeline", "restwall1", "restsides", "restdoor", "restdoorframe", "#000000", "tile_lab001");
        }
        if (!this.styleData) return;
        this.addFloor();
        this.background01.getComponent(cc.Sprite).spriteFrame = null;
      };
      DungeonStyleManager.prototype.addDecorateBg = function() {
        var bg = cc.instantiate(this.parallaxBackground);
        bg.parent = this.node;
        var pos = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE / 2, Dungeon_1.default.HEIGHT_SIZE / 2));
        bg.setPosition(pos);
        bg.zIndex = IndexZ_1.default.BACKGROUND;
        var pbg = bg.getComponent(ParallaxBackground_1.default);
        pbg.background.width = Dungeon_1.default.TILE_SIZE / 2 * Dungeon_1.default.WIDTH_SIZE;
        pbg.background.height = Dungeon_1.default.TILE_SIZE / 2 * (Dungeon_1.default.HEIGHT_SIZE + 4);
        pbg.background.color = cc.Color.WHITE.fromHEX(this.styleData.bg02color);
        pbg.init();
      };
      DungeonStyleManager.prototype.addFloor = function() {
        var leveldata = Logic_1.default.worldLoader.getCurrentLevelData();
        var room = Logic_1.default.mapManager.getCurrentRoom();
        var offset = 4;
        var pos = Dungeon_1.default.getPosInMap(cc.v3(-offset, -offset));
        if (0 == room.x) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(0, -offset));
          0 == room.y ? pos = Dungeon_1.default.getPosInMap(cc.v3(0, 0)) : room.y == leveldata.height - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(0, 2 * -offset)));
        } else if (room.x == leveldata.width - 1) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, -offset));
          0 == room.y ? pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 2 * -offset)) : room.y == leveldata.height - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 0)));
        }
        if (0 == room.x) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(0, -offset));
          0 == room.y ? pos = Dungeon_1.default.getPosInMap(cc.v3(0, 0)) : room.y == leveldata.height - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(0, 2 * -offset)));
        } else if (room.x == leveldata.width - 1) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, -offset));
          0 == room.y ? pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 2 * -offset)) : room.y == leveldata.height - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 0)));
        }
        if (0 == room.y) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(-offset, 0));
          0 == room.x ? pos = Dungeon_1.default.getPosInMap(cc.v3(0, 0)) : room.x == leveldata.width - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 2 * -offset)));
        } else if (room.y == leveldata.height - 1) {
          pos = Dungeon_1.default.getPosInMap(cc.v3(-offset, 2 * -offset));
          0 == room.x ? pos = Dungeon_1.default.getPosInMap(cc.v3(0, 2 * -offset)) : room.x == leveldata.width - 1 && (pos = Dungeon_1.default.getPosInMap(cc.v3(2 * -offset, 0)));
        }
        this.floor.width = Dungeon_1.default.TILE_SIZE / 4 * (Dungeon_1.default.WIDTH_SIZE + 3 * offset);
        this.floor.height = Dungeon_1.default.TILE_SIZE / 4 * (Dungeon_1.default.HEIGHT_SIZE + 3 * offset);
        this.floor.position = cc.v3(pos.x - Dungeon_1.default.TILE_SIZE / 2, pos.y - Dungeon_1.default.TILE_SIZE / 2);
        this.floor.zIndex = IndexZ_1.default.BACKGROUNDFLOOR;
        this.floor.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes(leveldata.floorRes + "001");
      };
      __decorate([ property(cc.Node) ], DungeonStyleManager.prototype, "background01", void 0);
      __decorate([ property(cc.Node) ], DungeonStyleManager.prototype, "floor", void 0);
      __decorate([ property(cc.Prefab) ], DungeonStyleManager.prototype, "parallaxBackground", void 0);
      DungeonStyleManager = __decorate([ ccclass ], DungeonStyleManager);
      return DungeonStyleManager;
    }(BaseManager_1.default);
    exports.default = DungeonStyleManager;
    cc._RF.pop();
  }, {
    "../Data/DungeonStyleData": "DungeonStyleData",
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../UI/ParallaxBackground": "ParallaxBackground",
    "../Utils/IndexZ": "IndexZ",
    "./BaseManager": "BaseManager"
  } ],
  Dungeon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6dd52klzMJJgafrk2kw2YVi", "Dungeon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Player_1 = require("./Player");
    var Tile_1 = require("./Tile");
    var Logic_1 = require("./Logic");
    var EventHelper_1 = require("./EventHelper");
    var MonsterManager_1 = require("./Manager/MonsterManager");
    var EquipmentManager_1 = require("./Manager/EquipmentManager");
    var DungeonStyleManager_1 = require("./Manager/DungeonStyleManager");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var RoomType_1 = require("./Rect/RoomType");
    var IndexZ_1 = require("./Utils/IndexZ");
    var BuildingManager_1 = require("./Manager/BuildingManager");
    var NonPlayerManager_1 = require("./Manager/NonPlayerManager");
    var ItemManager_1 = require("./Manager/ItemManager");
    var Utils_1 = require("./Utils/Utils");
    var LightManager_1 = require("./Manager/LightManager");
    var DamageData_1 = require("./Data/DamageData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Dungeon = function(_super) {
      __extends(Dungeon, _super);
      function Dungeon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.tile = null;
        _this.playerPrefab = null;
        _this.fog = null;
        _this.map = new Array();
        _this.floorIndexmap = new Array();
        _this.timeDelay = 0;
        _this.checkTimeDelay = 0;
        _this.player = null;
        _this.monsterManager = null;
        _this.nonPlayerManager = null;
        _this.equipmentManager = null;
        _this.dungeonStyleManager = null;
        _this.itemManager = null;
        _this.buildingManager = null;
        _this.lightManager = null;
        _this.CameraZoom = Dungeon_1.DEFAULT_ZOOM;
        _this.needZoomIn = false;
        _this.isInitFinish = false;
        _this.isClear = false;
        _this.isComplete = false;
        _this.currentPos = cc.v3(0, 0);
        return _this;
      }
      Dungeon_1 = Dungeon;
      Dungeon.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_MOVE, function(detail) {
          _this.playerAction(detail.dir, detail.pos, detail.dt);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_SETEQUIPMENT, function(detail) {
          _this.node && _this.addEquipment(detail.equipmentData.img, detail.pos, detail.equipmentData);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, function(detail) {
          _this.addCoin(detail.pos, detail.count);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, function(detail) {
          _this.addOilGold(detail.pos, detail.count);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, function(detail) {
          _this.node && _this.addItem(detail.pos, detail.res, detail.count);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_FALLSTONE, function(detail) {
          _this.addFallStone(detail.pos, detail.isAuto);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_ADD_LIGHTENINGFALL, function(detail) {
          _this.addLighteningFall(detail.pos, false, false, detail.showArea, detail.damage);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.DUNGEON_SHAKEONCE, function(detail) {
          _this.anim && _this.anim.play("DungeonShakeOnce");
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.BOSS_ADDSLIME, function(detail) {
          _this.addBossSlime(detail.slimeType, detail.posIndex);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.TEST_SHOW_NODE_COUNT, function(detail) {
          _this.logNodeCount();
        });
        this.monsterManager = this.getComponent(MonsterManager_1.default);
        this.nonPlayerManager = this.getComponent(NonPlayerManager_1.default);
        this.equipmentManager = this.getComponent(EquipmentManager_1.default);
        this.itemManager = this.getComponent(ItemManager_1.default);
        this.dungeonStyleManager = this.getComponent(DungeonStyleManager_1.default);
        this.buildingManager = this.getComponent(BuildingManager_1.default);
        this.lightManager = this.getComponent(LightManager_1.default);
        this.reset();
      };
      Dungeon.prototype.reset = function() {
        var _this = this;
        Logic_1.default.lastBgmIndex = Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099 ? 1 : 0;
        AudioPlayer_1.default.play(AudioPlayer_1.default.PLAY_BG, true);
        this.monsterManager.clear();
        this.nonPlayerManager.clear();
        this.equipmentManager.clear();
        this.itemManager.clear();
        this.dungeonStyleManager.clear();
        this.buildingManager.clear();
        this.lightManager.clear();
        this.fog.zIndex = IndexZ_1.default.FOG;
        this.fog.scale = .6;
        this.fog.opacity = 255;
        this.lightManager.shadow.node.zIndex = IndexZ_1.default.SHADOW;
        this.lightManager.shadowRay.node.zIndex = IndexZ_1.default.SHADOW + 10;
        this.currentPos = cc.v3(Logic_1.default.mapManager.getCurrentRoom().x, Logic_1.default.mapManager.getCurrentRoom().y);
        var mapData = Logic_1.default.mapManager.getCurrentMapStringArray();
        var leveldata = Logic_1.default.worldLoader.getCurrentLevelData();
        var exits = leveldata.getExitList();
        Logic_1.default.changeDungeonSize();
        this.dungeonStyleManager.addDecorations();
        for (var _i = 0, _a = this.map; _i < _a.length; _i++) {
          var arr = _a[_i];
          Utils_1.default.clearComponentArray(arr);
        }
        this.map = new Array();
        this.floorIndexmap = new Array();
        this.addItemListOnGround();
        this.addEquipmentListOnGround();
        this.buildingManager.addAirExit(mapData);
        for (var i = 0; i < Dungeon_1.WIDTH_SIZE; i++) {
          this.map[i] = new Array(i);
          for (var j = 0; j < Dungeon_1.HEIGHT_SIZE; j++) {
            this.addTiles(mapData[i][j], cc.v3(i, j), leveldata, false);
            this.buildingManager.addBuildingsFromMap(this, mapData[i][j], cc.v3(i, j), leveldata, exits);
            Logic_1.default.mapManager.isCurrentRoomStateClear() && !Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.TEST_ROOM) || this.itemManager.addItemFromMap(mapData[i][j], cc.v3(i, j));
            (!Logic_1.default.mapManager.isCurrentRoomStateClear() || Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.TEST_ROOM) || Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.START_ROOM)) && this.monsterManager.addMonstersAndBossFromMap(this, mapData[i][j], cc.v3(i, j));
            this.nonPlayerManager.addNonPlayerFromMap(this, mapData[i][j], cc.v3(i, j));
          }
        }
        var offsets = [ cc.v3(-1, -1, 4), cc.v3(-1, 0, 2), cc.v3(-1, 1, 6), cc.v3(0, -1, 0), cc.v3(0, 1, 1), cc.v3(1, -1, 5), cc.v3(1, 0, 3), cc.v3(1, 1, 7) ];
        for (var _b = 0, offsets_1 = offsets; _b < offsets_1.length; _b++) {
          var offset = offsets_1[_b];
          this.addBuildingsFromSideMap(offset);
        }
        this.player = cc.instantiate(this.playerPrefab).getComponent(Player_1.default);
        this.player.node.parent = this.node;
        Logic_1.default.mapManager.isCurrentRoomStateClear() && !Logic_1.default.mapManager.getCurrentRoom().isReborn || !RoomType_1.default.isMonsterGenerateRoom(Logic_1.default.mapManager.getCurrentRoomType()) || Logic_1.default.isTour || this.monsterManager.addRandomMonsters(this, Logic_1.default.mapManager.getCurrentRoom().reborn);
        var list = new Array().concat(Logic_1.default.nonPlayerList);
        this.scheduleOnce(function() {
          _this.nonPlayerManager.addNonPlayerListFromSave(_this, list, _this.player.node.position);
        }, 1);
        this.setDoors(true, true);
        cc.log("load finished");
        this.scheduleOnce(function() {
          _this.isInitFinish = true;
          cc.tween(_this.fog).to(3, {
            scale: 5
          }).start();
          var blackcenter = _this.fog.getChildByName("sprite").getChildByName("blackcenter");
          cc.tween(blackcenter).delay(.1).to(.5, {
            opacity: 0
          }).start();
          _this.logNodeCount();
          _this.addOilGoldOnGround();
        }, .5);
      };
      Dungeon.prototype.addTiles = function(mapDataStr, indexPos, leveldata, onlyShow) {
        if (Dungeon_1.isFirstEqual(mapDataStr, "*") && "**" != mapDataStr) {
          var t = cc.instantiate(this.tile);
          t.parent = this.node;
          t.position = Dungeon_1.getPosInMap(indexPos.clone());
          t.zIndex = IndexZ_1.default.BASE + 10 * (Dungeon_1.HEIGHT_SIZE - indexPos.y);
          var tile = t.getComponent(Tile_1.default);
          tile.isAutoShow = false;
          tile.tileType = mapDataStr;
          tile.coverPrefix = leveldata.floorCoverRes;
          tile.cover1 = leveldata.floorCoverRes1;
          tile.cover2 = leveldata.floorCoverRes2;
          tile.cover3 = leveldata.floorCoverRes3;
          tile.cover4 = leveldata.floorCoverRes4;
          tile.cover5 = leveldata.floorCoverRes5;
          tile.floorPrefix = leveldata.floorRes;
          onlyShow || (this.map[indexPos.x][indexPos.y] = tile);
        }
        !onlyShow && Dungeon_1.isFirstEqual(mapDataStr, "*") && this.floorIndexmap.push(indexPos.clone());
      };
      Dungeon.prototype.logNodeCount = function() {
        if (!this.node) return;
        var names = {};
        var log = "childrenCount:" + this.node.childrenCount + " children:\n";
        for (var _i = 0, _a = this.node.children; _i < _a.length; _i++) {
          var child = _a[_i];
          names[child.name] ? names[child.name]++ : names[child.name] = 1;
        }
        for (var key in names) log += key + "(" + names[key] + ")\n";
        console.log(log);
      };
      Dungeon.prototype.addBuildingsFromSideMap = function(offset) {
        var mapData = Logic_1.default.mapManager.getCurrentSideMapStringArray(offset);
        var leveldata = Logic_1.default.worldLoader.getCurrentLevelData();
        if (!mapData[0]) return;
        for (var i = 0; i < Dungeon_1.WIDTH_SIZE; i++) for (var j = 0; j < Dungeon_1.HEIGHT_SIZE; j++) {
          var needAdd = false;
          var length = 4;
          switch (offset.z) {
           case 0:
            needAdd = j > Dungeon_1.HEIGHT_SIZE - length;
            break;

           case 1:
            needAdd = j < length;
            break;

           case 2:
            needAdd = i > Dungeon_1.WIDTH_SIZE - length;
            break;

           case 3:
            needAdd = i < length;
            break;

           case 4:
            needAdd = i > Dungeon_1.WIDTH_SIZE - length && j > Dungeon_1.HEIGHT_SIZE - length;
            break;

           case 5:
            needAdd = i < length && j > Dungeon_1.HEIGHT_SIZE - length;
            break;

           case 6:
            needAdd = i > Dungeon_1.WIDTH_SIZE - length && j < length;
            break;

           case 7:
            needAdd = i < length && j < length;
          }
          if (needAdd) {
            var indexPos = cc.v3(i + Dungeon_1.WIDTH_SIZE * offset.x, j + Dungeon_1.HEIGHT_SIZE * offset.y);
            this.addTiles(mapData[i][j], indexPos.clone(), leveldata, true);
            this.buildingManager.addBuildingsFromSideMap(mapData[i][j], indexPos.clone(), leveldata);
          }
        }
      };
      Dungeon.prototype.darkAfterKill = function() {
        cc.tween(this.fog).to(1, {
          scale: .6
        }).start();
        var blackcenter = this.fog.getChildByName("sprite").getChildByName("blackcenter");
        cc.tween(blackcenter).delay(.2).to(1, {
          opacity: 255
        }).start();
      };
      Dungeon.isFirstEqual = function(mapStr, typeStr) {
        var isequal = mapStr[0] == typeStr;
        return isequal;
      };
      Dungeon.prototype.addItem = function(pos, resName, count, shopTable) {
        if (this.itemManager) {
          pos || (pos = this.player.node.position.clone());
          this.itemManager.addItem(pos, resName, count, shopTable);
        }
      };
      Dungeon.prototype.addFallStone = function(pos, isAuto, withFire) {
        this.buildingManager.addFallStone(pos, isAuto, withFire);
      };
      Dungeon.prototype.addLighteningFall = function(pos, isTrigger, needPrepare, showArea, damagePoint) {
        if (!this.buildingManager) return;
        this.buildingManager.addLighteningFall(pos, isTrigger, needPrepare, showArea, damagePoint);
      };
      Dungeon.prototype.addCoin = function(pos, count) {
        this.itemManager && this.itemManager.getValueCoin(count, pos, this.node);
      };
      Dungeon.prototype.addOilGold = function(pos, count) {
        this.itemManager && this.itemManager.getValueOilGold(count, pos, this.node);
      };
      Dungeon.prototype.addEquipmentListOnGround = function() {
        var currequipments = Logic_1.default.mapManager.getCurrentMapEquipments();
        if (currequipments) for (var _i = 0, currequipments_1 = currequipments; _i < currequipments_1.length; _i++) {
          var tempequip = currequipments_1[_i];
          if (tempequip.test > 0 && Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099) continue;
          this.equipmentManager && this.equipmentManager.getEquipment(tempequip.img, Dungeon_1.getPosInMap(tempequip.pos), this.node, tempequip, null, null).data;
        }
      };
      Dungeon.prototype.addItemListOnGround = function() {
        var curritems = Logic_1.default.mapManager.getCurrentMapItems();
        Logic_1.default.mapManager.setCurrentItemsArr(new Array());
        if (curritems) for (var _i = 0, curritems_1 = curritems; _i < curritems_1.length; _i++) {
          var tempeitem = curritems_1[_i];
          tempeitem.isTaken || this.addItem(Dungeon_1.getPosInMap(tempeitem.pos), tempeitem.resName, tempeitem.count);
        }
      };
      Dungeon.prototype.addOilGoldOnGround = function() {
        this.scheduleOnce(function() {
          var data = Logic_1.default.groundOilGoldData.clone();
          if (data.chapter == Logic_1.default.chapterIndex && data.level == Logic_1.default.level && data.x == Logic_1.default.mapManager.rectDungeon.currentPos.x && data.y == Logic_1.default.mapManager.rectDungeon.currentPos.y && data.value > 0) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_OILGOLD, {
              count: data.value
            });
            Logic_1.default.saveGroundOilGold(0);
            cc.director.emit(EventHelper_1.EventHelper.HUD_OILGOLD_RECOVERY_SHOW);
          }
        }, 1);
      };
      Dungeon.prototype.addEquipment = function(equipType, pos, equipData, chestQuality, shopTable) {
        if (this.equipmentManager) {
          pos || (pos = this.player.node.position.clone());
          var data = this.equipmentManager.getEquipment(equipType, pos, this.node, equipData, chestQuality, shopTable).data;
          if (shopTable) return;
          var currequipments = Logic_1.default.mapManager.getCurrentMapEquipments();
          if (currequipments) currequipments.push(data); else {
            currequipments = new Array();
            currequipments.push(data);
            Logic_1.default.mapManager.setCurrentEquipmentsArr(currequipments);
          }
        }
      };
      Dungeon.prototype.addBossSlime = function(type, index) {
        this.monsterManager && this.monsterManager.addBossSlime(type, index, this);
      };
      Dungeon.prototype.shakeForKraken = function() {
        var _this = this;
        this.CameraZoom = Dungeon_1.DEFAULT_ZOOM_MIN;
        this.needZoomIn = true;
        this.anim.playAdditive("DungeonShakeOnce");
        this.scheduleOnce(function() {
          _this.anim.playAdditive("DungeonShakeOnce");
        }, 1);
        this.scheduleOnce(function() {
          _this.anim.playAdditive("DungeonShakeOnce");
        }, 2);
      };
      Dungeon.getPosInMap = function(pos) {
        var x = Dungeon_1.MAPX + pos.x * Dungeon_1.TILE_SIZE;
        var y = Dungeon_1.MAPY + pos.y * Dungeon_1.TILE_SIZE;
        return cc.v3(x, y);
      };
      Dungeon.getIndexInMap = function(pos, canOuter) {
        var x = (pos.x - Dungeon_1.MAPX) / Dungeon_1.TILE_SIZE;
        var y = (pos.y - Dungeon_1.MAPY) / Dungeon_1.TILE_SIZE;
        x = Math.round(x);
        y = Math.round(y);
        if (!canOuter) {
          x < 0 && (x = 0);
          x >= Dungeon_1.WIDTH_SIZE && (x = Dungeon_1.WIDTH_SIZE - 1);
          y < 0 && (y = 0);
          y >= Dungeon_1.HEIGHT_SIZE && (y = Dungeon_1.HEIGHT_SIZE - 1);
        }
        return cc.v3(x, y);
      };
      Dungeon.fixOuterMap = function(pos) {
        var x = (pos.x - Dungeon_1.MAPX) / Dungeon_1.TILE_SIZE;
        var y = (pos.y - Dungeon_1.MAPY) / Dungeon_1.TILE_SIZE;
        x = Math.round(x);
        y = Math.round(y);
        var isOuter = false;
        if (x < 0) {
          x = 0;
          isOuter = true;
        }
        if (x >= Dungeon_1.WIDTH_SIZE) {
          x = Dungeon_1.WIDTH_SIZE - 1;
          isOuter = true;
        }
        if (y < 0) {
          y = 0;
          isOuter = true;
        }
        if (y >= Dungeon_1.HEIGHT_SIZE) {
          y = Dungeon_1.HEIGHT_SIZE - 1;
          isOuter = true;
        }
        return isOuter ? Dungeon_1.getPosInMap(cc.v3(x, y)) : pos;
      };
      Dungeon.prototype.start = function() {
        var _this = this;
        this.scheduleOnce(function() {
          cc.director.emit(EventHelper_1.EventHelper.CHANGE_MINIMAP, {
            detail: {
              x: _this.currentPos.x,
              y: _this.currentPos.y
            }
          });
          _this.checkRoomClear();
        }, .1);
      };
      Dungeon.prototype.breakTile = function(pos) {
        var tile = this.map[pos.x][pos.y];
        tile && !tile.isBroken && tile.breakTile();
      };
      Dungeon.prototype.playerAction = function(dir, pos, dt) {
        this.player && this.player.playerAction(dir, pos, dt, this);
      };
      Dungeon.prototype.getMonsterAliveNum = function() {
        var count = 0;
        for (var _i = 0, _a = this.monsterManager.monsterList; _i < _a.length; _i++) {
          var monster = _a[_i];
          (monster.sc.isDied || monster.data.isTest > 0) && count++;
        }
        return this.monsterManager.monsterList.length - count;
      };
      Dungeon.prototype.checkRoomClear = function() {
        var count = this.getMonsterAliveNum();
        this.isClear = count <= 0;
        if (this.isClear && this.monsterManager.bossList.length > 0) {
          for (var _i = 0, _a = this.monsterManager.bossList; _i < _a.length; _i++) {
            var boss = _a[_i];
            boss.sc.isDied && count++;
          }
          this.isClear = count >= this.monsterManager.bossList.length;
        }
        for (var _b = 0, _c = this.buildingManager.footboards; _b < _c.length; _b++) {
          var footboard = _c[_b];
          footboard.isOpen || footboard.hasActive || (this.isClear = false);
        }
        for (var _d = 0, _e = this.buildingManager.monsterGeneratorList; _d < _e.length; _d++) {
          var monsterGenerator = _e[_d];
          monsterGenerator.addFinish || (this.isClear = false);
        }
        Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.TEST_ROOM) && (this.isClear = true);
        this.setDoors(this.isClear);
        if (this.isClear) {
          if (this.monsterManager.isRoomInitWithEnemy && Logic_1.default.mapManager.getCurrentRoomType().isNotEqual(RoomType_1.default.TEST_ROOM)) {
            cc.director.emit(EventHelper_1.EventHelper.HUD_COMPLETE_SHOW);
            if (!this.isComplete && this.player && this.player.data && this.player.data.StatusTotalData.clearHealth > 0) {
              this.isComplete = true;
              this.player.takeDamage(new DamageData_1.default(-this.player.data.StatusTotalData.clearHealth));
            }
          }
          this.buildingManager.savePointS && this.buildingManager.savePointS.open();
          Logic_1.default.mapManager.setRoomClear(this.currentPos.x, this.currentPos.y);
        }
      };
      Dungeon.prototype.setDoors = function(isClear, immediately) {
        if (!this.buildingManager) return;
        this.buildingManager.setDoors(isClear, immediately);
      };
      Dungeon.prototype.checkPlayerPos = function(dt) {
        if (!this.map || !this.player || !this.node) return;
        this.fog.setPosition(this.lerp(this.fog.position, this.player.node.position, 3 * dt));
        var pos = Dungeon_1.getIndexInMap(this.player.node.position);
        if (!this.map[pos.x] || !this.map[pos.x][pos.y]) return;
        var tile = this.map[pos.x][pos.y];
        tile && tile.isBroken && this.player.fall();
        tile && tile.isAutoShow && this.breakTile(pos);
      };
      Dungeon.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      Dungeon.prototype.checkMonstersPos = function() {
        for (var _i = 0, _a = this.monsterManager.monsterList; _i < _a.length; _i++) {
          var monster = _a[_i];
          if (monster.sc.isDied) return;
        }
      };
      Dungeon.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      Dungeon.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      Dungeon.prototype.update = function(dt) {
        if (this.isInitFinish && !Logic_1.default.isGamePause) {
          if (this.isTimeDelay(dt)) {
            this.checkPlayerPos(dt);
            this.monsterManager.updateLogic(dt);
            this.nonPlayerManager.updateLogic(dt);
            this.buildingManager.updateLogic(dt, this.player);
            this.equipmentManager.updateLogic(dt, this.player);
            this.itemManager.updateLogic(dt, this.player);
          }
          this.isCheckTimeDelay(dt) && this.checkRoomClear();
        }
      };
      var Dungeon_1;
      Dungeon.WIDTH_SIZE = 7;
      Dungeon.HEIGHT_SIZE = 7;
      Dungeon.MAPX = 64;
      Dungeon.MAPY = 64;
      Dungeon.TILE_SIZE = 128;
      Dungeon.DEFAULT_ZOOM_MAX = 2;
      Dungeon.DEFAULT_ZOOM_MIN = .6;
      Dungeon.DEFAULT_ZOOM = .9;
      __decorate([ property(cc.Prefab) ], Dungeon.prototype, "tile", void 0);
      __decorate([ property(cc.Prefab) ], Dungeon.prototype, "playerPrefab", void 0);
      __decorate([ property(cc.Node) ], Dungeon.prototype, "fog", void 0);
      Dungeon = Dungeon_1 = __decorate([ ccclass ], Dungeon);
      return Dungeon;
    }(cc.Component);
    exports.default = Dungeon;
    cc._RF.pop();
  }, {
    "./Data/DamageData": "DamageData",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./Manager/BuildingManager": "BuildingManager",
    "./Manager/DungeonStyleManager": "DungeonStyleManager",
    "./Manager/EquipmentManager": "EquipmentManager",
    "./Manager/ItemManager": "ItemManager",
    "./Manager/LightManager": "LightManager",
    "./Manager/MonsterManager": "MonsterManager",
    "./Manager/NonPlayerManager": "NonPlayerManager",
    "./Player": "Player",
    "./Rect/RoomType": "RoomType",
    "./Tile": "Tile",
    "./Utils/AudioPlayer": "AudioPlayer",
    "./Utils/IndexZ": "IndexZ",
    "./Utils/Utils": "Utils"
  } ],
  Emplacement: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78b9bpQ7+BAGrpzYzxR/1mq", "Emplacement");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Shooter_1 = require("../Shooter");
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var FromData_1 = require("../Data/FromData");
    var IndexZ_1 = require("../Utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Emplacement = function(_super) {
      __extends(Emplacement, _super);
      function Emplacement() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.shooterTop = null;
        _this.shooterBottom = null;
        _this.shooterLeft = null;
        _this.shooterRight = null;
        _this.isOpen = false;
        _this.pos = cc.v3(0, 0);
        _this.timeDelay = 0;
        _this.dirType = 0;
        return _this;
      }
      Emplacement_1 = Emplacement;
      Emplacement.prototype.onLoad = function() {
        this.setShooterHv(this.shooterTop, cc.v3(0, 1));
        this.setShooterHv(this.shooterBottom, cc.v3(0, -1));
        this.setShooterHv(this.shooterLeft, cc.v3(-1, 0));
        this.setShooterHv(this.shooterRight, cc.v3(1, 0));
        var from = FromData_1.default.getClone("\u70ae\u53f0", "emplacement");
        this.shooterTop.from.valueCopy(from);
        this.shooterBottom.from.valueCopy(from);
        this.shooterLeft.from.valueCopy(from);
        this.shooterRight.from.valueCopy(from);
      };
      Emplacement.prototype.setDirType = function(mapStr) {
        switch (mapStr) {
         case "G0":
          this.dirType = Emplacement_1.ALL;
          this.hideOrShowShooter(1, 1, 1, 1);
          break;

         case "G1":
          this.dirType = Emplacement_1.TOP;
          this.hideOrShowShooter(1, 0, 0, 0);
          break;

         case "G2":
          this.dirType = Emplacement_1.BOTTOM;
          this.hideOrShowShooter(0, 1, 0, 0);
          break;

         case "G3":
          this.dirType = Emplacement_1.LEFT;
          this.hideOrShowShooter(0, 0, 1, 0);
          break;

         case "G4":
          this.dirType = Emplacement_1.RIGHT;
          this.hideOrShowShooter(0, 0, 0, 1);
          break;

         case "G5":
          this.dirType = Emplacement_1.TOPBOTTOM;
          this.hideOrShowShooter(1, 1, 0, 0);
          break;

         case "G6":
          this.dirType = Emplacement_1.TOPLEFT;
          this.hideOrShowShooter(1, 0, 1, 0);
          break;

         case "G7":
          this.dirType = Emplacement_1.TOPRIGHT;
          this.hideOrShowShooter(1, 0, 0, 1);
          break;

         case "G8":
          this.dirType = Emplacement_1.BOTTOMLEFT;
          this.hideOrShowShooter(0, 1, 1, 0);
          break;

         case "G9":
          this.dirType = Emplacement_1.BOTTOMRIGHT;
          this.hideOrShowShooter(0, 1, 0, 1);
          break;

         case "Ga":
          this.dirType = Emplacement_1.LEFTRIGHT;
          this.hideOrShowShooter(0, 0, 1, 1);
        }
      };
      Emplacement.prototype.hideOrShowShooter = function(top, bottom, left, right) {
        this.shooterTop.node.active = top > 0;
        this.shooterBottom.node.active = bottom > 0;
        this.shooterLeft.node.active = left > 0;
        this.shooterRight.node.active = right > 0;
      };
      Emplacement.prototype.start = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        this.scheduleOnce(function() {
          _this.fire();
        }, 1);
      };
      Emplacement.prototype.setPos = function(pos) {
        this.pos = pos;
        this.node.position = Dungeon_1.default.getPosInMap(pos);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      Emplacement.prototype.OpenFire = function() {
        if (!this.dungeon) return;
        switch (this.dirType) {
         case Emplacement_1.ALL:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterBottom);
          this.fireShooter(this.shooterLeft);
          this.fireShooter(this.shooterRight);
          break;

         case Emplacement_1.TOP:
          this.fireShooter(this.shooterTop);
          break;

         case Emplacement_1.BOTTOM:
          this.fireShooter(this.shooterBottom);
          break;

         case Emplacement_1.LEFT:
          this.fireShooter(this.shooterLeft);
          break;

         case Emplacement_1.RIGHT:
          this.fireShooter(this.shooterRight);
          break;

         case Emplacement_1.TOPBOTTOM:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterBottom);
          break;

         case Emplacement_1.TOPLEFT:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterLeft);
          break;

         case Emplacement_1.TOPRIGHT:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterRight);
          break;

         case Emplacement_1.BOTTOMLEFT:
          this.fireShooter(this.shooterBottom);
          this.fireShooter(this.shooterLeft);
          break;

         case Emplacement_1.BOTTOMRIGHT:
          this.fireShooter(this.shooterBottom);
          this.fireShooter(this.shooterRight);
          break;

         case Emplacement_1.LEFTRIGHT:
          this.fireShooter(this.shooterLeft);
          this.fireShooter(this.shooterRight);
          break;

         default:
          this.fireShooter(this.shooterTop);
          this.fireShooter(this.shooterBottom);
          this.fireShooter(this.shooterLeft);
          this.fireShooter(this.shooterRight);
        }
      };
      Emplacement.prototype.fire = function() {
        this.anim && this.anim.play();
      };
      Emplacement.prototype.fireShooter = function(shooter) {
        if (!shooter.dungeon) {
          shooter.dungeon = this.dungeon;
          shooter.data.bulletType = "bullet010";
          shooter.data.bulletLineExNum = 0;
          shooter.data.img = "emplacement";
          shooter.isBuilding = true;
          switch (Logic_1.default.chapterIndex) {
           case Logic_1.default.CHAPTER00:
            shooter.data.bulletLineExNum = 3;
            shooter.data.bulletType = "laser001";
            break;

           case Logic_1.default.CHAPTER01:
            shooter.data.bulletType = "bullet010";
            break;

           case Logic_1.default.CHAPTER02:
            shooter.data.bulletType = "bullet013";
            break;

           case Logic_1.default.CHAPTER03:
            shooter.data.bulletType = "bullet006";
            shooter.data.bulletLineExNum = 1;
            break;

           case Logic_1.default.CHAPTER04:
           case Logic_1.default.CHAPTER05:
            shooter.data.bulletType = "bullet024";
            shooter.data.bulletLineExNum = 1;
            break;

           case Logic_1.default.CHAPTER099:
            shooter.data.bulletType = "bullet010";
          }
        }
        shooter.fireBullet(0, cc.v3(64, 0));
      };
      Emplacement.prototype.setShooterHv = function(shooter, hv) {
        shooter.setHv(hv);
      };
      Emplacement.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.timeDelay += dt;
        if (this.timeDelay > 3) {
          this.timeDelay = 0;
          this.fire();
        }
      };
      var Emplacement_1;
      Emplacement.ALL = 0;
      Emplacement.TOP = 1;
      Emplacement.BOTTOM = 2;
      Emplacement.LEFT = 3;
      Emplacement.RIGHT = 4;
      Emplacement.TOPBOTTOM = 5;
      Emplacement.TOPLEFT = 6;
      Emplacement.TOPRIGHT = 7;
      Emplacement.BOTTOMLEFT = 8;
      Emplacement.BOTTOMRIGHT = 9;
      Emplacement.LEFTRIGHT = 10;
      __decorate([ property(Shooter_1.default) ], Emplacement.prototype, "shooterTop", void 0);
      __decorate([ property(Shooter_1.default) ], Emplacement.prototype, "shooterBottom", void 0);
      __decorate([ property(Shooter_1.default) ], Emplacement.prototype, "shooterLeft", void 0);
      __decorate([ property(Shooter_1.default) ], Emplacement.prototype, "shooterRight", void 0);
      Emplacement = Emplacement_1 = __decorate([ ccclass ], Emplacement);
      return Emplacement;
    }(Building_1.default);
    exports.default = Emplacement;
    cc._RF.pop();
  }, {
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../Shooter": "Shooter",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  EnergyShield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b7ba1woN/lIqoplh/wf+2rX", "EnergyShield");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var IndexZ_1 = require("../Utils/IndexZ");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EnergyShield = function(_super) {
      __extends(EnergyShield, _super);
      function EnergyShield() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isShow = false;
        _this.timeDelay = 0;
        _this.recoveryTimeDelay = 0;
        return _this;
      }
      EnergyShield.prototype.onLoad = function() {
        this.cover = this.node.getChildByName("sprite").getChildByName("cover");
        this.element = this.node.getChildByName("sprite").getChildByName("cover").getChildByName("element");
        this.anim = this.getComponent(cc.Animation);
        this.collider = this.getComponent(cc.BoxCollider);
      };
      EnergyShield.prototype.init = function(player, maxHealth, scale) {
        this.player = player;
        this.data.currentHealth = maxHealth;
        this.data.maxHealth = maxHealth;
        this.node.scale = scale;
        this.anim = this.getComponent(cc.Animation);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(cc.v3(this.node.position.x, this.node.position.y - 8 * scale));
        this.base = this.node.getChildByName("base");
        this.base.parent = this.node.parent;
        this.base.position = this.node.position;
        cc.tween(this.base).to(1, {
          scale: scale,
          opacity: 255
        }).start();
        this.base.zIndex = IndexZ_1.default.FLOOR;
      };
      EnergyShield.prototype.hitLight = function(isHit) {
        this.mat || (this.mat = this.node.getChildByName("sprite").getChildByName("cover").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
      };
      EnergyShield.prototype.ShowFinish = function() {
        this.isShow = true;
        this.changeIdle();
      };
      EnergyShield.prototype.changeIdle = function() {
        if (!this.isShow) return;
        this.checkTargetIn(this.player.node) ? this.anim.getAnimationState("EnergyShieldIdle").isPlaying || this.anim.play("EnergyShieldIdle") : this.anim.getAnimationState("EnergyShieldIdle1").isPlaying || this.anim.play("EnergyShieldIdle1");
      };
      EnergyShield.prototype.checkTargetIn = function(targetNode) {
        var x = this.node.position.x - this.collider.size.width / 2 * this.node.scale;
        var y = this.node.position.y - (this.collider.size.width / 2 - this.collider.offset.y) * this.node.scale;
        var w = this.collider.size.width * this.node.scale;
        var h = this.collider.size.height * this.node.scale;
        var rect = cc.rect(x, y, w, h);
        return rect.contains(cc.v2(targetNode.position.x, targetNode.position.y));
      };
      EnergyShield.prototype.takeDamage = function(damage) {
        var _this = this;
        if (!this.isShow || this.data.currentHealth <= 0) return false;
        AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_HIT);
        this.hitLight(true);
        this.scheduleOnce(function() {
          _this.hitLight(false);
        }, .15);
        this.data.currentHealth -= damage.getTotalDamage();
        this.changeColor();
        if (this.data.currentHealth <= 0) {
          this.data.currentHealth = 0;
          this.isShow = false;
          this.node.active = false;
          this.base.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
            _this.base.destroy();
          }, 1);
        }
        return true;
      };
      EnergyShield.prototype.changeColor = function() {
        var progress = Math.floor(255 * this.data.currentHealth / this.data.maxHealth);
        progress < 0 ? progress = 0 : progress > 255 && (progress = 255);
        this.cover.color = cc.color(255, progress, progress);
        this.element.color = cc.color(255, progress, progress);
        this.base.color = cc.color(255, progress, progress);
      };
      EnergyShield.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      EnergyShield.prototype.isRecoveryTimeDelay = function(dt) {
        this.recoveryTimeDelay += dt;
        if (this.recoveryTimeDelay > 2) {
          this.recoveryTimeDelay = 0;
          return true;
        }
        return false;
      };
      EnergyShield.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.changeIdle();
        this.isRecoveryTimeDelay(dt) && this.checkTargetIn(this.player.node) && this.player.updateDream(-1);
      };
      EnergyShield = __decorate([ ccclass ], EnergyShield);
      return EnergyShield;
    }(Building_1.default);
    exports.default = EnergyShield;
    cc._RF.pop();
  }, {
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  EquipmentAndItemDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "af5ccf4cCpAz5dS6cSfKkBs", "EquipmentAndItemDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EquipmentAndItemDialog = function(_super) {
      __extends(EquipmentAndItemDialog, _super);
      function EquipmentAndItemDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.layout = null;
        _this.labelTitle = null;
        _this.infoBase = null;
        _this.info1 = null;
        _this.info2 = null;
        _this.info3 = null;
        _this.extraInfo = null;
        _this.infoSuit1 = null;
        _this.infoSuit2 = null;
        _this.infoSuit3 = null;
        _this.infoDesc = null;
        _this.count = null;
        _this.arrowNoneBg = null;
        _this.arrowRightBg = null;
        _this.arrowDownBg = null;
        _this.arrowLeftBg = null;
        _this.bgType = 0;
        return _this;
      }
      EquipmentAndItemDialog_1 = EquipmentAndItemDialog;
      EquipmentAndItemDialog.prototype.onLoad = function() {};
      EquipmentAndItemDialog.prototype.changeBgAndAnchor = function(bgType) {
        this.bgType = bgType;
        var sprite = this.layout.getComponent(cc.Sprite);
        this.layout.anchorX = 1;
        this.layout.anchorY = 1;
        switch (this.bgType) {
         case EquipmentAndItemDialog_1.BG_TYPE_NONE:
          sprite.spriteFrame = null;
          break;

         case EquipmentAndItemDialog_1.BG_TYPE_ARROW_NONE:
          sprite.spriteFrame = this.arrowNoneBg;
          break;

         case EquipmentAndItemDialog_1.BG_TYPE_ARROW_RIGHT:
          sprite.spriteFrame = this.arrowRightBg;
          break;

         case EquipmentAndItemDialog_1.BG_TYPE_ARROW_DOWN:
          sprite.spriteFrame = this.arrowDownBg;
          this.layout.anchorX = 0;
          this.layout.anchorY = 0;
          break;

         case EquipmentAndItemDialog_1.BG_TYPE_ARROW_LEFT:
          sprite.spriteFrame = this.arrowLeftBg;
          this.layout.anchorX = 0;
          this.layout.anchorY = 1;
        }
      };
      EquipmentAndItemDialog.prototype.refreshEquipInfo = function(equipment) {
        this.infoBase.node.active = true;
        this.info1.node.active = true;
        this.info2.node.active = true;
        this.info3.node.active = true;
        this.extraInfo.node.active = true;
        this.infoSuit1.node.active = true;
        this.infoSuit2.node.active = true;
        this.infoSuit3.node.active = true;
        this.labelTitle.string = equipment.prefix + equipment.nameCn;
        this.labelTitle.node.color = this.labelTitle.node.color.fromHEX(equipment.titlecolor);
        this.infoBase.string = "\u4ef7\u683c\uff1a" + equipment.price + "\n" + equipment.infobase;
        this.infoBase.node.color = this.infoBase.node.color.fromHEX(equipment.infobasecolor);
        this.info1.string = equipment.info1;
        this.info1.node.color = this.info1.node.color.fromHEX(equipment.infocolor1);
        this.info2.string = equipment.info2;
        this.info2.node.color = this.info2.node.color.fromHEX(equipment.infocolor2);
        this.info3.string = equipment.info3;
        this.info3.node.color = this.info3.node.color.fromHEX(equipment.infocolor3);
        this.extraInfo.string = equipment.extraInfo;
        this.infoSuit1.string = equipment.suit1;
        this.infoSuit2.string = equipment.suit2;
        this.infoSuit3.string = equipment.suit3;
        this.infoSuit1.node.color = this.infoSuit1.node.color.fromHEX(equipment.suitcolor1);
        this.infoSuit2.node.color = this.infoSuit2.node.color.fromHEX(equipment.suitcolor2);
        this.infoSuit3.node.color = this.infoSuit3.node.color.fromHEX(equipment.suitcolor3);
        this.infoDesc.string = equipment.desc;
        this.infoBase.node.active = this.infoBase.string.length > 0;
        this.info1.node.active = this.info1.string.length > 0;
        this.info2.node.active = this.info2.string.length > 0;
        this.info3.node.active = this.info3.string.length > 0;
        this.extraInfo.node.active = this.extraInfo.string.length > 0;
        this.infoSuit1.node.active = this.infoSuit1.string.length > 0;
        this.infoSuit2.node.active = this.infoSuit2.string.length > 0;
        this.infoSuit3.node.active = this.infoSuit3.string.length > 0;
        this.count.string = "";
      };
      EquipmentAndItemDialog.prototype.showDialogEquipInfo = function(equipment, inventoryManager) {
        this.refreshEquipInfo(equipment);
        this.node.active = true;
        if (inventoryManager) {
          var count = 0;
          equipment.suitType.length > 0 && inventoryManager.suitMap[equipment.suitType] && (count = inventoryManager.suitMap[equipment.suitType].count);
          this.infoSuit1.node.opacity = count > 1 ? 255 : 50;
          this.infoSuit2.node.opacity = count > 2 ? 255 : 50;
          this.infoSuit3.node.opacity = count > 3 ? 255 : 50;
        }
      };
      EquipmentAndItemDialog.prototype.refreshItemInfo = function(item) {
        this.infoBase.node.active = true;
        this.info1.node.active = false;
        this.info2.node.active = false;
        this.info3.node.active = false;
        this.extraInfo.node.active = false;
        this.infoSuit1.node.active = false;
        this.infoSuit2.node.active = false;
        this.infoSuit3.node.active = false;
        this.labelTitle.string = "" + item.nameCn;
        this.infoBase.string = "\u4ef7\u683c\uff1a" + item.price + "\n" + item.info;
        this.infoDesc.string = item.desc;
        this.count.string = item.count > 0 ? "\xd7" + item.count : "\u221e";
        this.labelTitle.node.color = this.labelTitle.node.color.fromHEX("#F4C021");
      };
      EquipmentAndItemDialog.prototype.showDialogItemInfo = function(item) {
        this.node.active = true;
        this.refreshItemInfo(item);
      };
      EquipmentAndItemDialog.prototype.showDialogNonPlayerInfo = function(data) {
        this.node.active = true;
        this.refreshNonPlayerInfo(data);
      };
      EquipmentAndItemDialog.prototype.refreshNonPlayerInfo = function(data) {
        this.infoBase.node.active = true;
        this.info1.node.active = false;
        this.info2.node.active = false;
        this.info3.node.active = false;
        this.extraInfo.node.active = false;
        this.infoSuit1.node.active = false;
        this.infoSuit2.node.active = false;
        this.infoSuit3.node.active = false;
        this.labelTitle.string = "" + data.nameCn;
        this.infoBase.string = "";
        this.infoDesc.string = "";
        this.count.string = "";
        this.labelTitle.node.color = this.labelTitle.node.color.fromHEX("#F4C021");
      };
      EquipmentAndItemDialog.prototype.showDialogFurnitureInfo = function(data) {
        this.node.active = true;
        this.refreshFurnitureInfo(data);
      };
      EquipmentAndItemDialog.prototype.refreshFurnitureInfo = function(data) {
        this.infoBase.node.active = true;
        this.info1.node.active = false;
        this.info2.node.active = false;
        this.info3.node.active = false;
        this.extraInfo.node.active = false;
        this.infoSuit1.node.active = false;
        this.infoSuit2.node.active = false;
        this.infoSuit3.node.active = false;
        this.labelTitle.string = "" + data.nameCn;
        this.infoBase.string = "\u4ef7\u683c\uff1a" + data.price + "\n" + data.info;
        this.infoDesc.string = "" + data.desc;
        this.count.string = "";
        this.labelTitle.node.color = this.labelTitle.node.color.fromHEX("#F4C021");
      };
      EquipmentAndItemDialog.prototype.showDialog = function(position, nonPlayerData, item, equipment, furniture, inventoryManager, bgType) {
        (bgType || 0 == bgType) && this.changeBgAndAnchor(bgType);
        this.node.position = position.clone();
        nonPlayerData ? this.showDialogNonPlayerInfo(nonPlayerData) : item ? this.showDialogItemInfo(item) : equipment ? this.showDialogEquipInfo(equipment, inventoryManager) : furniture && this.showDialogFurnitureInfo(furniture);
      };
      EquipmentAndItemDialog.prototype.hideDialog = function() {
        this.node.active = false;
      };
      var EquipmentAndItemDialog_1;
      EquipmentAndItemDialog.BG_TYPE_NONE = 0;
      EquipmentAndItemDialog.BG_TYPE_ARROW_NONE = 1;
      EquipmentAndItemDialog.BG_TYPE_ARROW_RIGHT = 2;
      EquipmentAndItemDialog.BG_TYPE_ARROW_DOWN = 3;
      EquipmentAndItemDialog.BG_TYPE_ARROW_LEFT = 4;
      __decorate([ property(cc.Node) ], EquipmentAndItemDialog.prototype, "layout", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "labelTitle", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoBase", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "info1", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "info2", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "info3", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "extraInfo", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoSuit1", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoSuit2", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoSuit3", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "infoDesc", void 0);
      __decorate([ property(cc.Label) ], EquipmentAndItemDialog.prototype, "count", void 0);
      __decorate([ property(cc.SpriteFrame) ], EquipmentAndItemDialog.prototype, "arrowNoneBg", void 0);
      __decorate([ property(cc.SpriteFrame) ], EquipmentAndItemDialog.prototype, "arrowRightBg", void 0);
      __decorate([ property(cc.SpriteFrame) ], EquipmentAndItemDialog.prototype, "arrowDownBg", void 0);
      __decorate([ property(cc.SpriteFrame) ], EquipmentAndItemDialog.prototype, "arrowLeftBg", void 0);
      EquipmentAndItemDialog = EquipmentAndItemDialog_1 = __decorate([ ccclass ], EquipmentAndItemDialog);
      return EquipmentAndItemDialog;
    }(cc.Component);
    exports.default = EquipmentAndItemDialog;
    cc._RF.pop();
  }, {} ],
  EquipmentData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5970exQi1ISK2QZd4VAwv9", "EquipmentData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CommonData_1 = require("./CommonData");
    var BaseData_1 = require("./BaseData");
    var EquipmentData = function(_super) {
      __extends(EquipmentData, _super);
      function EquipmentData() {
        var _this = _super.call(this) || this;
        _this.uuid = "";
        _this.id = 1e7;
        _this.pos = cc.v3(0, 0);
        _this.nameCn = "";
        _this.nameEn = "";
        _this.equipmetType = "empty";
        _this.equipmetTypeCn = "";
        _this.prefix = "";
        _this.desc = "";
        _this.color = "#ffffff";
        _this.lightcolor = "#ffffff";
        _this.titlecolor = "#ffffff";
        _this.img = "emptyequipment";
        _this.level = 0;
        _this.stab = 0;
        _this.far = 0;
        _this.blunt = 0;
        _this.isLocked = 0;
        _this.isReflect = 0;
        _this.trouserslong = 0;
        _this.bulletType = "";
        _this.bulletSize = 0;
        _this.bulletArcExNum = 0;
        _this.bulletLineExNum = 0;
        _this.bulletLineInterval = 0;
        _this.bulletNets = 0;
        _this.showShooter = 0;
        _this.isHeavy = 0;
        _this.isLineAim = 0;
        _this.hideHair = 0;
        _this.bulletExSpeed = 0;
        _this.statusName = "";
        _this.statusInterval = 0;
        _this.statusNameParrySelf = "";
        _this.statusNameParryOther = "";
        _this.statusRateParry = 0;
        _this.statusNameBlockSelf = "";
        _this.statusNameBlockOther = "";
        _this.statusRateBlock = 0;
        _this.statusNameHurtSelf = "";
        _this.statusNameHurtOther = "";
        _this.statusRateHurt = 0;
        _this.exBulletTypeAttack = "";
        _this.exBulletTypeHurt = "";
        _this.exBulletTypeParry = "";
        _this.exBulletTypeBlock = "";
        _this.exBulletRate = 0;
        _this.exBulletCombo1 = 0;
        _this.exBulletCombo2 = 0;
        _this.exBulletCombo3 = 0;
        _this.exBulletOffsetX = 0;
        _this.ignoreTrap = 0;
        _this.remoteAudio = "";
        _this.exBeatBack = 0;
        _this.test = 0;
        _this.price = 0;
        _this.info1 = "";
        _this.info2 = "";
        _this.info3 = "";
        _this.extraInfo = "";
        _this.suitType = "";
        _this.suit1 = "";
        _this.suit2 = "";
        _this.suit3 = "";
        _this.infobase = "";
        _this.infocolor1 = "#ffffff";
        _this.infocolor2 = "#ffffff";
        _this.infocolor3 = "#ffffff";
        _this.suitcolor1 = "#ffffff";
        _this.suitcolor2 = "#ffffff";
        _this.suitcolor3 = "#ffffff";
        _this.infobasecolor = "#ffffff";
        _this.common = new CommonData_1.default();
        return _this;
      }
      Object.defineProperty(EquipmentData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      EquipmentData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.uuid = data.uuid ? data.uuid : "";
        this.id = data.id ? data.id : 1e7;
        this.pos = data.pos ? cc.v3(data.pos.x, data.pos.y) : cc.v3(0, 0);
        this.common.valueCopy(data.common);
        this.nameCn = data.nameCn ? data.nameCn : "";
        this.nameEn = data.nameEn ? data.nameEn : "";
        this.equipmetType = data.equipmetType ? data.equipmetType : "";
        this.equipmetTypeCn = data.equipmetTypeCn ? data.equipmetTypeCn : "";
        this.prefix = data.prefix ? data.prefix : "";
        this.desc = data.desc ? data.desc : "";
        this.color = data.color ? data.color : "#ffffff";
        this.titlecolor = data.titlecolor ? data.titlecolor : "#ffffff";
        this.lightcolor = data.lightcolor ? data.lightcolor : "#ffffff";
        this.img = data.img ? data.img : "emptyequipment";
        this.stab = data.stab ? data.stab : 0;
        this.far = data.far ? data.far : 0;
        this.blunt = data.blunt ? data.blunt : 0;
        this.isLocked = data.isLocked ? data.isLocked : 0;
        this.bulletArcExNum = data.bulletArcExNum ? data.bulletArcExNum : 0;
        this.bulletLineExNum = data.bulletLineExNum ? data.bulletLineExNum : 0;
        this.bulletLineInterval = data.bulletLineInterval ? data.bulletLineInterval : 0;
        this.bulletNets = data.bulletNets ? data.bulletNets : 0;
        this.level = data.level ? data.level : 0;
        this.trouserslong = data.trouserslong ? data.trouserslong : 0;
        this.showShooter = data.showShooter ? data.showShooter : 0;
        this.isHeavy = data.isHeavy ? data.isHeavy : 0;
        this.bulletType = data.bulletType ? data.bulletType : "";
        this.exBulletTypeAttack = data.exBulletTypeAttack ? data.exBulletTypeAttack : "";
        this.exBulletTypeHurt = data.exBulletTypeHurt ? data.exBulletTypeHurt : "";
        this.exBulletTypeParry = data.exBulletTypeParry ? data.exBulletTypeParry : "";
        this.exBulletTypeBlock = data.exBulletTypeBlock ? data.exBulletTypeBlock : "";
        this.isLineAim = data.isLineAim ? data.isLineAim : 0;
        this.hideHair = data.hideHair ? data.hideHair : 0;
        this.bulletSize = data.bulletSize ? data.bulletSize : 0;
        this.bulletExSpeed = data.bulletExSpeed ? data.bulletExSpeed : 0;
        this.statusName = data.statusName ? data.statusName : "";
        this.statusNameParryOther = data.statusNameParryOther ? data.statusNameParryOther : "";
        this.statusNameParrySelf = data.statusNameParrySelf ? data.statusNameParrySelf : "";
        this.statusRateParry = data.statusRateParry ? data.statusRateParry : 0;
        this.statusNameBlockOther = data.statusNameBlockOther ? data.statusNameBlockOther : "";
        this.statusNameBlockSelf = data.statusNameBlockSelf ? data.statusNameBlockSelf : "";
        this.statusNameHurtSelf = data.statusNameHurtSelf ? data.statusNameHurtSelf : "";
        this.statusNameHurtOther = data.statusNameHurtOther ? data.statusNameHurtOther : "";
        this.statusRateHurt = data.statusRateHurt ? data.statusRateHurt : 0;
        this.statusRateBlock = data.statusRateBlock ? data.statusRateBlock : 0;
        this.statusInterval = data.statusInterval ? data.statusInterval : 0;
        this.isReflect = data.isReflect ? data.isReflect : 0;
        this.exBulletRate = data.exBulletRate ? data.exBulletRate : 0;
        this.exBulletCombo1 = data.exBulletCombo1 ? data.exBulletCombo1 : 0;
        this.exBulletCombo2 = data.exBulletCombo2 ? data.exBulletCombo2 : 0;
        this.exBulletCombo3 = data.exBulletCombo3 ? data.exBulletCombo3 : 0;
        this.exBulletOffsetX = data.exBulletOffsetX ? data.exBulletOffsetX : 0;
        this.ignoreTrap = data.ignoreTrap ? data.ignoreTrap : 0;
        this.price = data.price ? data.price : 0;
        this.info1 = data.info1 ? data.info1 : "";
        this.info2 = data.info2 ? data.info2 : "";
        this.info3 = data.info3 ? data.info3 : "";
        this.extraInfo = data.extraInfo ? data.extraInfo : "";
        this.suit1 = data.suit1 ? data.suit1 : "";
        this.suit2 = data.suit2 ? data.suit2 : "";
        this.suit3 = data.suit3 ? data.suit3 : "";
        this.suitType = data.suitType ? data.suitType : "";
        this.infobase = data.infobase ? data.infobase : "";
        this.infocolor1 = data.infocolor1 ? data.infocolor1 : "#ffffff";
        this.infocolor2 = data.infocolor2 ? data.infocolor2 : "#ffffff";
        this.infocolor3 = data.infocolor3 ? data.infocolor3 : "#ffffff";
        this.suitcolor1 = data.suitcolor1 ? data.suitcolor1 : "#ffffff";
        this.suitcolor2 = data.suitcolor2 ? data.suitcolor2 : "#ffffff";
        this.suitcolor3 = data.suitcolor3 ? data.suitcolor3 : "#ffffff";
        this.infobasecolor = data.infobasecolor ? data.infobasecolor : "#ffffff";
        this.remoteAudio = data.remoteAudio ? data.remoteAudio : "";
        this.exBeatBack = data.exBeatBack ? data.exBeatBack : 0;
        this.test = data.test ? data.test : 0;
      };
      EquipmentData.prototype.clone = function() {
        var e = new EquipmentData();
        e.uuid = this.uuid;
        e.id = this.id;
        e.pos = this.pos;
        e.common = this.common.clone();
        e.nameCn = this.nameCn;
        e.nameEn = this.nameEn;
        e.equipmetType = this.equipmetType;
        e.equipmetTypeCn = this.equipmetTypeCn;
        e.prefix = this.prefix;
        e.desc = this.desc;
        e.color = this.color;
        e.titlecolor = this.titlecolor;
        e.lightcolor = this.lightcolor;
        e.img = this.img;
        e.stab = this.stab;
        e.far = this.far;
        e.blunt = this.blunt;
        e.isLocked = this.isLocked;
        e.level = this.level;
        e.trouserslong = this.trouserslong;
        e.showShooter = this.showShooter;
        e.bulletType = this.bulletType;
        e.exBulletTypeAttack = this.exBulletTypeAttack;
        e.exBulletTypeHurt = this.exBulletTypeHurt;
        e.exBulletTypeParry = this.exBulletTypeParry;
        e.exBulletTypeBlock = this.exBulletTypeBlock;
        e.isHeavy = this.isHeavy;
        e.isLineAim = this.isLineAim;
        e.bulletArcExNum = this.bulletArcExNum;
        e.bulletLineExNum = this.bulletLineExNum;
        e.bulletLineInterval = this.bulletLineInterval;
        e.bulletNets = this.bulletNets;
        e.hideHair = this.hideHair;
        e.bulletSize = this.bulletSize;
        e.bulletExSpeed = this.bulletExSpeed;
        e.isReflect = this.isReflect;
        e.statusName = this.statusName;
        e.statusInterval = this.statusInterval;
        e.statusNameBlockOther = this.statusNameBlockOther;
        e.statusNameBlockSelf = this.statusNameBlockSelf;
        e.statusRateBlock = this.statusRateBlock;
        e.statusRateParry = this.statusRateParry;
        e.statusNameParryOther = this.statusNameParryOther;
        e.statusNameParrySelf = this.statusNameParrySelf;
        e.statusNameHurtSelf = this.statusNameHurtSelf;
        e.statusNameHurtOther = this.statusNameHurtOther;
        e.statusRateHurt = this.statusRateHurt;
        e.exBulletRate = this.exBulletRate;
        e.exBulletCombo1 = this.exBulletCombo1;
        e.exBulletCombo2 = this.exBulletCombo2;
        e.exBulletCombo3 = this.exBulletCombo3;
        e.exBulletOffsetX = this.exBulletOffsetX;
        e.ignoreTrap = this.ignoreTrap;
        e.suitType = this.suitType;
        e.price = this.price;
        e.info1 = this.info1;
        e.info2 = this.info2;
        e.info3 = this.info3;
        e.extraInfo = this.extraInfo;
        e.suit1 = this.suit1;
        e.suit2 = this.suit2;
        e.suit3 = this.suit3;
        e.infobase = this.infobase;
        e.infocolor1 = this.infocolor1;
        e.infocolor2 = this.infocolor2;
        e.infocolor3 = this.infocolor3;
        e.suitcolor1 = this.suitcolor1;
        e.suitcolor2 = this.suitcolor2;
        e.suitcolor3 = this.suitcolor3;
        e.infobasecolor = this.infobasecolor;
        e.remoteAudio = this.remoteAudio;
        e.exBeatBack = this.exBeatBack;
        e.test = this.test;
        return e;
      };
      EquipmentData.prototype.add = function(data) {
        this.common = this.common.clone().add(data.Common);
        this.ignoreTrap = this.ignoreTrap + data.ignoreTrap;
        this.exBeatBack = this.exBeatBack + data.exBeatBack;
        return this;
      };
      return EquipmentData;
    }(BaseData_1.default);
    exports.default = EquipmentData;
    cc._RF.pop();
  }, {
    "./BaseData": "BaseData",
    "./CommonData": "CommonData"
  } ],
  EquipmentDescData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7742jFusdGiIE+18obcC2k", "EquipmentDescData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CommonData_1 = require("./CommonData");
    var EquipmentDescData = function() {
      function EquipmentDescData() {
        this.nameCn = "";
        this.nameEn = "";
        this.titlecolor = "#ffffff";
        this.color = "#ffffff";
        this.prefix = "";
        this.level = 0;
        this.common = new CommonData_1.default();
        this.info1 = "";
        this.info2 = "";
        this.info3 = "";
        this.suit1 = "";
        this.suit2 = "";
        this.suit3 = "";
        this.infobase = "";
        this.infocolor1 = "#ffffff";
        this.infocolor2 = "#ffffff";
        this.infocolor3 = "#ffffff";
        this.suitcolor1 = "#ffffff";
        this.suitcolor2 = "#ffffff";
        this.suitcolor3 = "#ffffff";
        this.infobasecolor = "#ffffff";
      }
      return EquipmentDescData;
    }();
    exports.default = EquipmentDescData;
    cc._RF.pop();
  }, {
    "./CommonData": "CommonData"
  } ],
  EquipmentManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "29c053rRnlLqrw1VkMXkISC", "EquipmentManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var EquipmentData_1 = require("../Data/EquipmentData");
    var EquipmentDescData_1 = require("../Data/EquipmentDescData");
    var Equipment_1 = require("../Equipment/Equipment");
    var IndexZ_1 = require("../Utils/IndexZ");
    var BaseManager_1 = require("./BaseManager");
    var EventHelper_1 = require("../EventHelper");
    var InventoryManager_1 = require("./InventoryManager");
    var SuitData_1 = require("../Data/SuitData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EquipmentManager = function(_super) {
      __extends(EquipmentManager, _super);
      function EquipmentManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.equipment = null;
        _this.groundList = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      EquipmentManager_1 = EquipmentManager;
      EquipmentManager.prototype.clear = function() {
        this.groundList = [];
      };
      EquipmentManager.getRandomDesc = function(data, chestQuality) {
        var desc = new EquipmentDescData_1.default();
        var arr = [ "", "\u666e\u901a\u7684", "\u7cbe\u826f\u7684", "\u4f18\u79c0\u7684", "\u53f2\u8bd7\u7684", "\u4f20\u8bf4\u7684" ];
        var colors = [ "#dcdcdc", "#ffffff", "#00ff00", "#0000ff", "#800080", "#ffa500" ];
        var level = 0;
        var rand4save = Logic_1.default.mapManager.getCurrentRoomRandom4Save();
        var criticalStrikeRate = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.WEAPON, InventoryManager_1.default.HELMET, InventoryManager_1.default.GLOVES, InventoryManager_1.default.CLOAK, InventoryManager_1.default.REMOTE ]) && data.Common.criticalStrikeRate > 0) {
          var csk = 20 - data.Common.criticalStrikeRate;
          csk < 5 && (csk = 5);
          criticalStrikeRate = EquipmentManager_1.getRandomQuality(0, csk, chestQuality, rand4save);
          level = criticalStrikeRate.y > level ? criticalStrikeRate.y : level;
          desc.prefix += criticalStrikeRate.y > 2 ? "\u66b4\u51fb" : "";
          desc.color = EquipmentManager_1.getMixColor("#000000", criticalStrikeRate.y > 2 ? EquipmentManager_1.COLOR_CRITICALSTRIKE : "#000000");
        }
        var damageMin = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.WEAPON, InventoryManager_1.default.GLOVES, InventoryManager_1.default.CLOTHES, InventoryManager_1.default.REMOTE ]) && data.Common.damageMin > 0) {
          damageMin = EquipmentManager_1.getRandomQuality(0, EquipmentManager_1.getRandomRange(), chestQuality, rand4save);
          level = damageMin.y > level ? damageMin.y : level;
        }
        var remoteDamage = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.GLOVES, InventoryManager_1.default.REMOTE ]) && data.Common.remoteDamage > 0) {
          remoteDamage = rand4save.rand() < .2 ? EquipmentManager_1.getRandomQuality(0, EquipmentManager_1.getRandomRange(), chestQuality, rand4save) : cc.v3(0, 0);
          level = remoteDamage.y > level ? remoteDamage.y : level;
        }
        var damageMax = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.WEAPON, InventoryManager_1.default.GLOVES, InventoryManager_1.default.CLOTHES, InventoryManager_1.default.REMOTE ]) && data.Common.damageMax > 0) {
          damageMax = EquipmentManager_1.getRandomQuality(damageMin.x, damageMin.x + EquipmentManager_1.getRandomRange(), chestQuality, rand4save);
          level = damageMax.y > level ? damageMax.y : level;
          desc.prefix += damageMax.y > 2 ? "\u5f3a\u529b" : "";
          desc.color = EquipmentManager_1.getMixColor(desc.color, damageMax.y > 2 ? EquipmentManager_1.COLOR_POWERFUL : "#000000");
        }
        var defence = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.HELMET, InventoryManager_1.default.GLOVES, InventoryManager_1.default.CLOAK, InventoryManager_1.default.TROUSERS, InventoryManager_1.default.SHOES, InventoryManager_1.default.SHIELD, InventoryManager_1.default.CLOTHES ]) && data.Common.defence > 0) {
          defence = EquipmentManager_1.getRandomQuality(0, EquipmentManager_1.getRandomRange(), chestQuality, rand4save);
          level = defence.y > level ? defence.y : level;
          desc.prefix += defence.y > 2 ? "\u575a\u56fa" : "";
          desc.color = EquipmentManager_1.getMixColor(desc.color, defence.y > 5 ? EquipmentManager_1.COLOR_STABLE : "#000000");
        }
        var lifeDrain = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.WEAPON, InventoryManager_1.default.HELMET, InventoryManager_1.default.GLOVES, InventoryManager_1.default.REMOTE ]) && data.Common.lifeDrain > 0) {
          var ld = 50 - data.Common.lifeDrain;
          ld < 5 && (ld = 5);
          lifeDrain = EquipmentManager_1.getRandomQuality(0, ld, chestQuality, rand4save);
          level = lifeDrain.y > level ? lifeDrain.y : level;
          desc.prefix += lifeDrain.y > 2 ? "\u90aa\u6076" : "";
          desc.color = EquipmentManager_1.getMixColor(desc.color, lifeDrain.y > 2 ? EquipmentManager_1.COLOR_LIFEDRAIN : "#000000");
        }
        var damageBack = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.WEAPON, InventoryManager_1.default.GLOVES, InventoryManager_1.default.CLOTHES, InventoryManager_1.default.REMOTE ]) && data.Common.damageBack > 0) {
          damageBack = EquipmentManager_1.getRandomQuality(0, EquipmentManager_1.getRandomRange(), chestQuality, rand4save);
          level = damageBack.y > level ? damageBack.y : level;
          desc.prefix += damageBack.y > 2 ? "\u9634\u51b7" : "";
          desc.color = EquipmentManager_1.getMixColor(desc.color, damageBack.y > 2 ? EquipmentManager_1.COLOR_BACK : "#000000");
        }
        var moveSpeed = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.CLOAK, InventoryManager_1.default.TROUSERS, InventoryManager_1.default.SHOES, InventoryManager_1.default.CLOTHES ]) && data.Common.moveSpeed > 0) {
          var ms = 80 - data.Common.moveSpeed;
          ms < 10 && (ms = 10);
          moveSpeed = EquipmentManager_1.getRandomQuality(0, ms, chestQuality, rand4save);
          level = moveSpeed.y > level ? moveSpeed.y : level;
          desc.prefix += moveSpeed.y > 2 ? "\u7075\u52a8" : "";
          desc.color = EquipmentManager_1.getMixColor(desc.color, moveSpeed.y > 2 ? EquipmentManager_1.COLOR_MOVESPEED : "#000000");
        }
        var attackSpeed = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.WEAPON, InventoryManager_1.default.GLOVES, InventoryManager_1.default.CLOTHES, InventoryManager_1.default.REMOTE ]) && data.Common.attackSpeed > 0) {
          var as = 30 - data.Common.attackSpeed;
          as < 5 && (as = 5);
          attackSpeed = EquipmentManager_1.getRandomQuality(0, as, chestQuality, rand4save);
          level = attackSpeed.y > level ? attackSpeed.y : level;
          desc.prefix += attackSpeed.y > 2 ? "\u8fc5\u6377" : "";
          desc.color = EquipmentManager_1.getMixColor(desc.color, attackSpeed.y > 2 ? EquipmentManager_1.COLOR_ATTACKSPPED : "#000000");
        }
        var dodge = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.HELMET, InventoryManager_1.default.CLOAK, InventoryManager_1.default.TROUSERS, InventoryManager_1.default.SHOES, InventoryManager_1.default.CLOTHES ]) && data.Common.dodge > 0) {
          var d1 = 30 - data.Common.dodge;
          d1 < 10 && (d1 = 10);
          dodge = EquipmentManager_1.getRandomQuality(0, d1, chestQuality, rand4save);
          level = dodge.y > level ? dodge.y : level;
          desc.prefix += dodge.y > 2 ? "\u98d8\u9038" : "";
          desc.color = EquipmentManager_1.getMixColor(desc.color, dodge.y > 2 ? EquipmentManager_1.COLOR_DODGE : "#000000");
        }
        var health = cc.v3(0, 0);
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.HELMET, InventoryManager_1.default.GLOVES, InventoryManager_1.default.CLOAK, InventoryManager_1.default.TROUSERS, InventoryManager_1.default.SHIELD, InventoryManager_1.default.SHOES, InventoryManager_1.default.CLOTHES ]) && data.Common.maxHealth > 0) {
          health = EquipmentManager_1.getRandomQuality(0, EquipmentManager_1.getRandomRange(), chestQuality, rand4save);
          level = health.y > level ? health.y : level;
          desc.prefix += health.y > 2 ? "\u5065\u5eb7" : "";
          desc.color = EquipmentManager_1.getMixColor(desc.color, health.y > 2 ? EquipmentManager_1.COLOR_HEALTHY : "#000000");
        }
        var dream = cc.v3(0, 0);
        if (data.Common.maxDream > 0) {
          dream = EquipmentManager_1.getRandomQuality(0, EquipmentManager_1.getRandomRange(), chestQuality, rand4save);
          level = dream.y > level ? dream.y : level;
          desc.prefix += dream.y > 2 ? "\u68a6\u5e7b" : "";
          desc.color = EquipmentManager_1.getMixColor(desc.color, dream.y > 2 ? EquipmentManager_1.COLOR_DREAM : "#000000");
        }
        var damageRate = .1;
        var damage = EquipmentManager_1.getRandomRange();
        if (EquipmentManager_1.isTheEquipType(data.equipmetType, [ InventoryManager_1.default.GLOVES, InventoryManager_1.default.REMOTE, InventoryManager_1.default.WEAPON ])) {
          var realDamage = rand4save.rand() < damageRate ? EquipmentManager_1.getRandomQuality(0, damage, chestQuality, rand4save) : cc.v3(0, 0);
          level = realDamage.y > level ? realDamage.y : level;
          desc.prefix += realDamage.y > damage / 2 ? "\u950b\u5229" : "";
          var magicDamage = rand4save.rand() < damageRate ? EquipmentManager_1.getRandomQuality(0, damage, chestQuality, rand4save) : cc.v3(0, 0);
          level = magicDamage.y > level ? magicDamage.y : level;
          desc.prefix += magicDamage.y > damage / 2 ? "\u795e\u79d8" : "";
          desc.common.realDamage = realDamage.x;
          desc.common.magicDamage = magicDamage.x;
        }
        var defenceMax = 60;
        var defenceMin = 30;
        var defenceRate = .1;
        var magicDefence = rand4save.rand() < defenceRate ? EquipmentManager_1.getRandomQuality(defenceMin, defenceMax, chestQuality, rand4save) : cc.v3(0, 0);
        level = magicDefence.y > level ? magicDefence.y : level;
        var rateMax = 60;
        var rateMin = 10;
        var rateRate = .05;
        var realRate = rand4save.rand() < rateRate ? EquipmentManager_1.getRandomQuality(rateMin, rateMax, chestQuality, rand4save) : cc.v3(0, 0);
        level = realRate.y > level ? realRate.y : level;
        var iceRate = rand4save.rand() < rateRate ? EquipmentManager_1.getRandomQuality(rateMin, rateMax, chestQuality, rand4save) : cc.v3(0, 0);
        level = iceRate.y > level ? iceRate.y : level;
        desc.prefix += iceRate.y > rateMax / 2 ? "\u5bd2\u51b7" : "";
        var fireRate = rand4save.rand() < rateRate ? EquipmentManager_1.getRandomQuality(rateMin, rateMax, chestQuality, rand4save) : cc.v3(0, 0);
        level = fireRate.y > level ? fireRate.y : level;
        desc.prefix += fireRate.y > rateMax / 2 ? "\u708e\u70ed" : "";
        var lighteningRate = rand4save.rand() < rateRate ? EquipmentManager_1.getRandomQuality(rateMin, rateMax, chestQuality, rand4save) : cc.v3(0, 0);
        level = lighteningRate.y > level ? lighteningRate.y : level;
        desc.prefix += lighteningRate.y > rateMax / 2 ? "\u95ea\u7535" : "";
        var toxicRate = rand4save.rand() < rateRate ? EquipmentManager_1.getRandomQuality(rateMin, rateMax, chestQuality, rand4save) : cc.v3(0, 0);
        level = toxicRate.y > level ? toxicRate.y : level;
        desc.prefix += toxicRate.y > rateMax / 2 ? "\u5267\u6bd2" : "";
        var curseRate = rand4save.rand() < rateRate ? EquipmentManager_1.getRandomQuality(rateMin, rateMax, chestQuality, rand4save) : cc.v3(0, 0);
        level = curseRate.y > level ? curseRate.y : level;
        desc.prefix += curseRate.y > rateMax / 2 ? "\u8bc5\u5492" : "";
        desc.prefix = arr[level] + desc.prefix;
        desc.titlecolor = colors[level];
        desc.level = level;
        desc.color = "#000000" == desc.color ? "#ffffff" : desc.color;
        desc.common.criticalStrikeRate = criticalStrikeRate.x;
        desc.common.damageMin = damageMin.x;
        desc.common.damageMax = damageMax.x;
        desc.common.defence = defence.x;
        desc.common.lifeDrain = lifeDrain.x;
        desc.common.damageBack = damageBack.x;
        desc.common.moveSpeed = moveSpeed.x;
        desc.common.attackSpeed = attackSpeed.x;
        desc.common.dodge = dodge.x;
        desc.common.maxHealth = health.x;
        desc.common.magicDefence = magicDefence.x;
        desc.common.realRate = realRate.x;
        desc.common.iceRate = iceRate.x;
        desc.common.fireRate = fireRate.x;
        desc.common.lighteningRate = lighteningRate.x;
        desc.common.toxicRate = toxicRate.x;
        desc.common.curseRate = curseRate.x;
        desc.common.maxDream = dream.x;
        return desc;
      };
      EquipmentManager.getRandomRange = function() {
        return 5 + Logic_1.default.chapterMaxIndex + Math.floor(Logic_1.default.playerData.OilGoldData.level / 5);
      };
      EquipmentManager.isTheEquipType = function(theType, types) {
        var isTheType = false;
        for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
          var t = types_1[_i];
          t == theType && (isTheType = true);
        }
        return isTheType;
      };
      EquipmentManager.getRandomQuality = function(min, max, chestQuality, rand4save) {
        var per = (max - min) / 5;
        var quality = rand4save.rand();
        if (chestQuality && chestQuality > 0) switch (chestQuality) {
         case 1:
          quality = rand4save.rand() > .5 ? .06 : quality;
          break;

         case 2:
          quality = rand4save.rand() > .5 ? .08 : quality;
          break;

         case 3:
          quality = rand4save.rand() > .5 ? .086 : quality;
          break;

         case 4:
          quality = rand4save.rand() > .5 ? .09 : quality;
        }
        var data = cc.v3(0, 0);
        if (quality < .05) {
          data.x = rand4save.getRandomNum(0, per);
          per > 5 && data.x < 5 && (data.x = 5);
          data.y = 1;
        } else if (quality >= .05 && quality < .075) {
          data.x = rand4save.getRandomNum(per, 2 * per);
          data.y = 2;
        } else if (quality >= .075 && quality < .085) {
          data.x = rand4save.getRandomNum(2 * per, 3 * per);
          data.y = 3;
        } else if (quality >= .085 && quality < .09) {
          data.x = rand4save.getRandomNum(3 * per, 4 * per);
          data.y = 4;
        } else if (quality >= .09 && quality < .091) {
          data.x = rand4save.getRandomNum(4 * per, 5 * per);
          data.y = 5;
        }
        data.x = parseFloat(data.x.toFixed(0));
        return data;
      };
      EquipmentManager.prototype.getEquipment = function(equipType, pos, parent, equipData, chestQuality, shopTable) {
        var equipmentPrefab = cc.instantiate(this.equipment);
        equipmentPrefab.parent = parent;
        equipmentPrefab.position = pos;
        equipmentPrefab.zIndex = IndexZ_1.default.OVERHEAD;
        var equipment = equipmentPrefab.getComponent(Equipment_1.default);
        equipment.pos = Dungeon_1.default.getIndexInMap(pos);
        if (equipData) {
          if (shopTable) {
            equipment.shopTable = shopTable;
            equipData.price = 30 * (equipData.level + 1);
            shopTable.data.equipdata = equipData.clone();
          }
          equipment.refresh(equipData);
        } else {
          var data = EquipmentManager_1.getNewEquipData(equipType, chestQuality);
          if (shopTable) {
            equipment.shopTable = shopTable;
            shopTable.data.equipdata = data.clone();
            shopTable.data.price = data.price;
          }
          equipment.refresh(data);
        }
        this.groundList.push(equipment);
        return equipment;
      };
      EquipmentManager.getNewEquipData = function(equipType, chestQuality) {
        if (0 == equipType.length) return;
        var data = new EquipmentData_1.default();
        data.valueCopy(Logic_1.default.equipments[equipType]);
        var tempid = data.img.substr(data.equipmetType.length);
        tempid.length > 0 && (data.id = data.id + parseInt(tempid));
        data.uuid = data.genNonDuplicateID();
        var desc = EquipmentManager_1.getRandomDesc(data, chestQuality);
        var common = data.Common.clone().add(desc.common);
        data.infobase = EquipmentManager_1.getEquipmentInfoBase(common);
        data.info1 = EquipmentManager_1.getEquipmentInfo1(common);
        data.info2 = EquipmentManager_1.getEquipmentInfo2(common, data);
        data.info3 = EquipmentManager_1.getEquipmentInfo3(common);
        data.suit1 = EquipmentManager_1.getSuitDesc(data.suitType, 0);
        data.suit2 = EquipmentManager_1.getSuitDesc(data.suitType, 1);
        data.suit3 = EquipmentManager_1.getSuitDesc(data.suitType, 2);
        data.infobasecolor = "#fffff0";
        data.infocolor1 = "#9370DB";
        data.infocolor2 = "#87CEFA";
        data.infocolor3 = "#BC8F8F";
        data.suitcolor1 = "#FFD700";
        data.suitcolor2 = "#FFD700";
        data.suitcolor3 = "#FFD700";
        data.Common.add(desc.common);
        data.prefix = desc.prefix;
        data.titlecolor = desc.titlecolor;
        if ("#ffffff" != desc.color) {
          data.color = desc.color;
          "#ffffff" != data.lightcolor ? data.lightcolor = EquipmentManager_1.getMixColor(desc.color, data.lightcolor) : data.lightcolor = desc.color;
        }
        data.level = desc.level;
        data.price += EquipmentManager_1.getPrice(data);
        return data;
      };
      EquipmentManager.getOriginEquipData = function(equipType) {
        if (0 == equipType.length) return;
        var data = new EquipmentData_1.default();
        data.valueCopy(Logic_1.default.equipments[equipType]);
        var tempid = data.img.substr(data.equipmetType.length);
        tempid.length > 0 && (data.id = data.id + parseInt(tempid));
        data.uuid = data.genNonDuplicateID();
        var common = data.Common.clone();
        data.infobase = EquipmentManager_1.getEquipmentInfoBase(common);
        data.info1 = EquipmentManager_1.getEquipmentInfo1(common);
        data.info2 = EquipmentManager_1.getEquipmentInfo2(common, data);
        data.info3 = EquipmentManager_1.getEquipmentInfo3(common);
        data.suit1 = EquipmentManager_1.getSuitDesc(data.suitType, 0);
        data.suit2 = EquipmentManager_1.getSuitDesc(data.suitType, 1);
        data.suit3 = EquipmentManager_1.getSuitDesc(data.suitType, 2);
        data.infobasecolor = "#fffff0";
        data.infocolor1 = "#9370DB";
        data.infocolor2 = "#87CEFA";
        data.infocolor3 = "#BC8F8F";
        data.suitcolor1 = "#FFD700";
        data.suitcolor2 = "#FFD700";
        data.suitcolor3 = "#FFD700";
        data.titlecolor = "#FFFFFF";
        data.price += EquipmentManager_1.getPrice(data);
        return data;
      };
      EquipmentManager.getSuitDesc = function(suitType, suitIndex) {
        var suit = Logic_1.default.suits[suitType];
        if (!suit) return "";
        var data = new SuitData_1.default();
        data.valueCopy(Logic_1.default.suits[suitType]);
        if (suitIndex >= data.EquipList.length) return "";
        var info = "";
        var title = 0 == suitIndex ? data.nameCn + "\n" : "";
        var base = EquipmentManager_1.getEquipmentInfoBase(data.EquipList[suitIndex].Common);
        var info1 = EquipmentManager_1.getEquipmentInfo1(data.EquipList[suitIndex].Common);
        var info2 = EquipmentManager_1.getEquipmentInfo2(data.EquipList[suitIndex].Common, data.EquipList[suitIndex]);
        var info3 = EquipmentManager_1.getEquipmentInfo3(data.EquipList[suitIndex].Common);
        info += base + " ";
        info += info1 + " ";
        info += info2 + " ";
        info += info3 + " ";
        info += data.EquipList[suitIndex].extraInfo;
        return title + info.replace("\n", "");
      };
      EquipmentManager.getEquipmentInfoBase = function(common) {
        var info = "";
        info += 0 == common.remoteDamage ? "" : "\u8fdc\u7a0b\u4f24\u5bb3" + common.remoteDamage + "\n";
        info += 0 == common.remoteCritRate ? "" : "\u8fdc\u7a0b\u66b4\u51fb\u7387" + common.remoteCritRate.toFixed(1).replace(".0", "") + "\n";
        info += 0 == common.remoteCooldown ? "" : "\u8fdc\u7a0b\u51b7\u5374" + common.remoteCooldown / 1e3 + "s\n";
        info += 0 == common.damageMin ? "" : "\u653b\u51fb" + common.damageMin + " \u6700\u5927\u653b\u51fb\u529b" + common.damageMax + "\n";
        info += 0 == common.damageMin && 0 != common.damageMax ? "\u6700\u5927\u653b\u51fb\u529b" + common.damageMax + "\n" : "";
        info += 0 == common.defence ? "" : "\u9632\u5fa1" + common.defence + "\n";
        info += 0 == common.maxHealth ? "" : "\u751f\u547d" + common.maxHealth + "\n";
        info += 0 == common.maxDream ? "" : "\u68a6\u5883" + common.maxDream + "\n";
        info.length > 0 && -1 != info.lastIndexOf("\n") && (info = info.substring(0, info.lastIndexOf("\n")));
        info = info.replace("+-", "-");
        return info;
      };
      EquipmentManager.getEquipmentInfo1 = function(common) {
        var info = "";
        info += 0 == common.criticalStrikeRate ? "" : "\u66b4\u51fb" + common.criticalStrikeRate.toFixed(1).replace(".0", "") + "%\n";
        info += 0 == common.lifeDrain ? "" : "\u5438\u8840" + common.lifeDrain.toFixed(1).replace(".0", "") + "%\n";
        info += 0 == common.damageBack ? "" : "\u80cc\u523a" + common.damageBack + "\n";
        info += 0 == common.moveSpeed ? "" : "\u79fb\u901f" + common.moveSpeed + "\n";
        info += 0 == common.attackSpeed ? "" : "\u653b\u901f" + common.attackSpeed + "\n";
        info += 0 == common.dodge ? "" : "\u95ea\u907f" + common.dodge.toFixed(1).replace(".0", "") + "%\n";
        info += 0 == common.blockDamage ? "" : "\u5f39\u53cd\u4f24\u5bb3" + common.blockDamage + "\n";
        info += 0 == common.blockPhysical ? "" : "\u683c\u6321\u7269\u514d" + common.blockPhysical + "%\n";
        info += 0 == common.blockMagic ? "" : "\u683c\u6321\u9b54\u514d" + common.blockMagic + "%\n";
        info.length > 0 && -1 != info.lastIndexOf("\n") && (info = info.substring(0, info.lastIndexOf("\n")));
        info = info.replace("+-", "-");
        return info;
      };
      EquipmentManager.getEquipmentInfo2 = function(common, data) {
        var info = "";
        info += data && 0 == data.isReflect ? "" : "\u53cd\u5f39\u5b50\u5f39\n";
        info += 0 == common.realDamage ? "" : "\u653b\u51fb\u9644\u52a0" + common.realDamage + "\u70b9\u6d41\u8840\u4f24\u5bb3\n";
        info += 0 == common.realRate ? "" : "\u653b\u51fb\u6709" + common.realRate + "%\u51e0\u7387\u91ca\u653e\u6d41\u8840\n";
        info += 0 == common.magicDamage ? "" : "\u653b\u51fb\u9644\u52a0" + common.magicDamage + "\u70b9\u5143\u7d20\u4f24\u5bb3\n";
        info += 0 == common.iceRate ? "" : "\u653b\u51fb\u6709" + common.iceRate + "%\u51e0\u7387\u91ca\u653e\u51b0\u51bb\n";
        info += 0 == common.fireRate ? "" : "\u653b\u51fb\u6709" + common.fireRate + "%\u51e0\u7387\u91ca\u653e\u71c3\u70e7\n";
        info += 0 == common.lighteningRate ? "" : "\u653b\u51fb\u6709" + common.lighteningRate + "%\u51e0\u7387\u91ca\u653e\u95ea\u7535\n";
        info += 0 == common.toxicRate ? "" : "\u6bd2\u653b\u51fb\u6709" + common.toxicRate + "%\u51e0\u7387\u91ca\u653e\u6bd2\u7d20\n";
        info += 0 == common.curseRate ? "" : "\u653b\u51fb\u6709" + common.curseRate + "%\u51e0\u7387\u91ca\u653e\u8bc5\u5492\n";
        info.length > 0 && -1 != info.lastIndexOf("\n") && (info = info.substring(0, info.lastIndexOf("\n")));
        info = info.replace("+-", "-");
        return info;
      };
      EquipmentManager.getEquipmentInfo3 = function(common) {
        var info = "";
        info += 0 == common.magicDefence ? "" : "\u5143\u7d20\u6297\u6027" + common.magicDefence + "%\n";
        info.length > 0 && -1 != info.lastIndexOf("\n") && (info = info.substring(0, info.lastIndexOf("\n")));
        info = info.replace("+-", "-");
        return info;
      };
      EquipmentManager.prototype.start = function() {};
      EquipmentManager.getMixColor = function(color1, color2) {
        var c1 = cc.color().fromHEX(color1);
        var c2 = cc.color().fromHEX(color2);
        var c3 = cc.color();
        var r = c1.getR() + c2.getR();
        var g = c1.getG() + c2.getG();
        var b = c1.getB() + c2.getB();
        c3.setR(r > 255 ? 255 : r);
        c3.setG(g > 255 ? 255 : g);
        c3.setB(b > 255 ? 255 : b);
        return "#" + c3.toHEX("#rrggbb");
      };
      EquipmentManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      EquipmentManager.getPrice = function(data) {
        var price = 0;
        if (data.test > 0) return 0;
        price += 5 * data.Common.maxHealth;
        price += 10 * data.Common.maxDream;
        price += 10 * data.Common.damageMin;
        price += 5 * data.Common.damageMax;
        price += 5 * data.Common.damageBack;
        price += 3 * data.Common.criticalStrikeRate;
        price += 5 * data.Common.defence;
        price += data.Common.blockPhysical / 2;
        price += data.Common.blockMagic / 2;
        price += 5 * data.Common.blockDamage;
        price += data.Common.lifeDrain;
        data.Common.moveSpeed < 0 ? price += -20 : price += data.Common.moveSpeed;
        data.Common.attackSpeed < 0 ? price += -10 : price += data.Common.attackSpeed;
        price += 2 * data.Common.dodge;
        data.Common.remoteCooldown > 0 ? price += Math.floor(1e3 / data.Common.remoteCooldown * 20) : price += Math.floor(data.Common.remoteCooldown / 20);
        price += 30 * data.Common.remoteDamage;
        price += data.Common.remoteCritRate;
        price += 20 * data.Common.realDamage;
        price += 2 * data.Common.realRate;
        price += 10 * data.Common.magicDamage;
        price += data.Common.magicDefence;
        price += data.Common.iceRate;
        price += 2 * data.Common.fireRate;
        price += data.Common.lighteningRate;
        price += 2 * data.Common.toxicRate;
        price += 2 * data.Common.curseRate;
        return price > 0 ? Math.floor(price) : 0;
      };
      EquipmentManager.prototype.updateLogic = function(dt, player) {
        if (this.isCheckTimeDelay(dt)) {
          var distance = 200;
          var equip = null;
          for (var i = this.groundList.length - 1; i >= 0; i--) {
            var e = this.groundList[i];
            e.highLight(false);
            if (e.isTaken || !e.isValid) {
              this.groundList.splice(i, 1);
              continue;
            }
            var d = Logic_1.default.getDistanceNoSqrt(e.node.position, player.node.position);
            if (d < distance) {
              distance = d;
              equip = e;
            }
          }
          if (distance < 64 && equip) {
            equip.highLight(true);
            equip.taketips || (equip.taketips = this.node.getChildByName("sprite").getChildByName("taketips"));
            if (!this.lastGroundEquip || this.lastGroundEquip.uuid != equip.uuid) {
              cc.tween(equip.taketips).to(.2, {
                opacity: 255
              }).delay(1).to(.2, {
                opacity: 0
              }).start();
              cc.director.emit(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_SHOW, {
                detail: {
                  worldPos: equip.node.convertToWorldSpaceAR(cc.v3(0, 32)),
                  equipData: equip.data
                }
              });
            }
            this.lastGroundEquip = equip;
          } else {
            this.lastGroundEquip = null;
            cc.director.emit(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_HIDE);
          }
        }
      };
      var EquipmentManager_1;
      EquipmentManager.EMPTY = "emptyequipment";
      EquipmentManager.WEAPON_DINNERFORK = "weapon000";
      EquipmentManager.WEAPON_KNIFE = "weapon001";
      EquipmentManager.WEAPON_CHOPPER = "weapon002";
      EquipmentManager.WEAPON_HUGEBLADE = "weapon003";
      EquipmentManager.WEAPON_PITCHFORK = "weapon004";
      EquipmentManager.WEAPON_HUGEAXE = "weapon005";
      EquipmentManager.WEAPON_CROWBAR = "weapon006";
      EquipmentManager.WEAPON_KATANA = "weapon007";
      EquipmentManager.WEAPON_FRUITKNIFE = "weapon008";
      EquipmentManager.WEAPON_HAPPYFIRE = "weapon009";
      EquipmentManager.WEAPON_SADICE = "weapon010";
      EquipmentManager.WEAPON_EGYPTWAND = "weapon011";
      EquipmentManager.WEAPON_TOXICDAGGER = "weapon012";
      EquipmentManager.WEAPON_OLDROOTDAGGER = "weapon013";
      EquipmentManager.WEAPON_COOKCHOPPER = "weapon014";
      EquipmentManager.WEAPON_LIGHTENINGBLADE = "weapon015";
      EquipmentManager.WEAPON_JUNGLEFORK = "weapon016";
      EquipmentManager.WEAPON_KUNAI = "weapon017";
      EquipmentManager.WEAPON_DEATH = "weapon018";
      EquipmentManager.WEAPON_SHADOW = "weapon019";
      EquipmentManager.WEAPON_BLOOD = "weapon020";
      EquipmentManager.WEAPON_WOOD_SWORD = "weapon039";
      EquipmentManager.WEAPON_WOOD_HAMMER = "weapon040";
      EquipmentManager.WEAPON_WOOD_DAGGER = "weapon041";
      EquipmentManager.WEAPON_WOOD_SPEAR = "weapon042";
      EquipmentManager.WEAPON_WOOD_LONG_STICK = "weapon043";
      EquipmentManager.WEAPON_WOOD_LONG_CROSS = "weapon044";
      EquipmentManager.REMOTE_CROSSBOW = "remote001";
      EquipmentManager.REMOTE_LONGBOW = "remote002";
      EquipmentManager.REMOTE_WAND = "remote003";
      EquipmentManager.REMOTE_ALIENGUN = "remote004";
      EquipmentManager.REMOTE_WINCHESTER = "remote005";
      EquipmentManager.REMOTE_RPG = "remote006";
      EquipmentManager.REMOTE_SHURIKEN = "remote007";
      EquipmentManager.REMOTE_CHICKEN = "remote008";
      EquipmentManager.REMOTE_OLDGUN = "remote009";
      EquipmentManager.REMOTE_BASKETBALL = "remote011";
      EquipmentManager.SHIELD_CIRCLE = "shield000";
      EquipmentManager.SHIELD_CARDOOR = "shield001";
      EquipmentManager.SHIELD_POLICE = "shield002";
      EquipmentManager.CLOTHES_VEST = "clothes001";
      EquipmentManager.CLOTHES_SHIRT = "clothes002";
      EquipmentManager.CLOTHES_NAVY = "clothes003";
      EquipmentManager.CLOTHES_PIRATE = "clothes004";
      EquipmentManager.CLOTHES_BUCKET = "clothes005";
      EquipmentManager.CLOTHES_REDROBE = "clothes006";
      EquipmentManager.CLOTHES_WHITEROBE = "clothes007";
      EquipmentManager.CLOTHES_GENTLEMAN = "clothes008";
      EquipmentManager.CLOTHES_RADIATION = "clothes009";
      EquipmentManager.CLOTHES_JUNGLE = "clothes010";
      EquipmentManager.CLOTHES_PHARAOH = "clothes011";
      EquipmentManager.CLOTHES_KNIGHT = "clothes012";
      EquipmentManager.CLOTHES_DEATH = "clothes013";
      EquipmentManager.CLOTHES_ENERGY = "clothes014";
      EquipmentManager.CLOTHES_CAI = "clothes026";
      EquipmentManager.HELMET_BUCKETHAT = "helmet002";
      EquipmentManager.HELMET_PIRATEHAT = "helmet003";
      EquipmentManager.HELMET_REDHAT = "helmet004";
      EquipmentManager.HELMET_WHITEHAT = "helmet005";
      EquipmentManager.HELMET_PHARAOH = "helmet006";
      EquipmentManager.HELMET_CAT = "helmet007";
      EquipmentManager.HELMET_CHIEF = "helmet008";
      EquipmentManager.HELMET_HORUS = "helmet009";
      EquipmentManager.HELMET_GENTLEMAN = "helmet010";
      EquipmentManager.HELMET_CHICKEN = "helmet011";
      EquipmentManager.HELMET_DUCK = "helmet012";
      EquipmentManager.HELMET_GOOSE = "helmet013";
      EquipmentManager.HELMET_RADIATION = "helmet014";
      EquipmentManager.HELMET_JUNGLE = "helmet015";
      EquipmentManager.HELMET_ANUBIS = "helmet016";
      EquipmentManager.HELMET_KNIGHT = "helmet017";
      EquipmentManager.HELMET_DEATH = "helmet018";
      EquipmentManager.HELMET_ENERY = "helmet019";
      EquipmentManager.CLOAK_WARRIOR = "cloak001";
      EquipmentManager.TROUSERS_LONG = "trousers001";
      EquipmentManager.TROUSERS_SHORT = "trousers002";
      EquipmentManager.TROUSERS_RADIATION = "trousers003";
      EquipmentManager.TROUSERS_JUNGLE = "trousers004";
      EquipmentManager.TROUSERS_PHARAOH = "trousers005";
      EquipmentManager.TROUSERS_KNIGHT = "trousers006";
      EquipmentManager.TROUSERS_DEATH = "trousers007";
      EquipmentManager.TROUSERS_ENERGY = "trousers008";
      EquipmentManager.GLOVES_WARRIOR = "gloves001";
      EquipmentManager.GLOVES_DEMON = "gloves002";
      EquipmentManager.GLOVES_BLOODCRAW = "gloves003";
      EquipmentManager.GLOVES_RADIATION = "gloves004";
      EquipmentManager.GLOVES_JUNGLE = "gloves005";
      EquipmentManager.GLOVES_PHARAOH = "gloves006";
      EquipmentManager.GLOVES_KNIGHT = "gloves007";
      EquipmentManager.GLOVES_DEATH = "gloves008";
      EquipmentManager.GLOVES_ENERGY = "gloves009";
      EquipmentManager.SHOES_WARRIOR = "shoes001";
      EquipmentManager.SHOES_SKATEBOARD = "shoes002";
      EquipmentManager.SHOES_DEMON = "shoes003";
      EquipmentManager.SHOES_RADIATION = "shoes004";
      EquipmentManager.SHOES_JUNGLE = "shoes005";
      EquipmentManager.SHOES_PHARAOH = "shoes006";
      EquipmentManager.SHOES_KNIGHT = "shoes007";
      EquipmentManager.SHOES_DEATH = "shoes008";
      EquipmentManager.SHOES_ENERGY = "shoes009";
      EquipmentManager.COLOR_CRITICALSTRIKE = "#DC143C";
      EquipmentManager.COLOR_ATTACKSPPED = "#5F9EA0";
      EquipmentManager.COLOR_MOVESPEED = "#00BFFF";
      EquipmentManager.COLOR_DODGE = "#FFFF00";
      EquipmentManager.COLOR_STABLE = "#DEB887";
      EquipmentManager.COLOR_POWERFUL = "#ADFF2F";
      EquipmentManager.COLOR_HEALTHY = "#90EE90";
      EquipmentManager.COLOR_LIFEDRAIN = "#FFC0CB";
      EquipmentManager.COLOR_BACK = "#9370DB";
      EquipmentManager.COLOR_DREAM = "#800080";
      __decorate([ property(cc.Prefab) ], EquipmentManager.prototype, "equipment", void 0);
      EquipmentManager = EquipmentManager_1 = __decorate([ ccclass ], EquipmentManager);
      return EquipmentManager;
    }(BaseManager_1.default);
    exports.default = EquipmentManager;
    cc._RF.pop();
  }, {
    "../Data/EquipmentData": "EquipmentData",
    "../Data/EquipmentDescData": "EquipmentDescData",
    "../Data/SuitData": "SuitData",
    "../Dungeon": "Dungeon",
    "../Equipment/Equipment": "Equipment",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Utils/IndexZ": "IndexZ",
    "./BaseManager": "BaseManager",
    "./InventoryManager": "InventoryManager"
  } ],
  EquipmentStringData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92198gP7T1AvKS5hasHWtsb", "EquipmentStringData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentStringData = function() {
      function EquipmentStringData() {
        this.nameCn = "";
        this.nameEn = "";
        this.equipmetType = "empty";
        this.desc = "";
        this.img = "emptyequipment";
        this.maxHealth = 0;
        this.maxDream = 0;
        this.damageMin = 0;
        this.damageMax = 0;
        this.criticalStrikeRate = 0;
        this.defence = 0;
        this.lifeDrain = 0;
        this.damageBack = 0;
        this.moveSpeed = 0;
        this.attackSpeed = 0;
        this.dodge = 0;
        this.remoteCooldown = 0;
        this.realDamage = 0;
        this.realRate = 0;
        this.magicDamage = 0;
        this.magicDefence = 0;
        this.iceRate = 0;
        this.fireRate = 0;
        this.lighteningRate = 0;
        this.toxicRate = 0;
        this.curseRate = 0;
        this.stab = 0;
        this.far = 0;
        this.trouserslong = 0;
        this.bulletType = "";
        this.bulletSize = 0;
        this.bulletArcExNum = 0;
        this.bulletLineExNum = 0;
        this.bulletLineInterval = 0;
        this.showShooter = 0;
        this.isHeavy = 0;
        this.isLineAim = 0;
        this.hideHair = 0;
        this.bulletExSpeed = 0;
      }
      EquipmentStringData.prototype.valueCopy = function(data) {
        this.maxHealth = data.Common.maxHealth ? data.Common.maxHealth : 0;
        this.maxDream = data.Common.maxDream ? data.Common.maxDream : 0;
        this.damageMin = data.Common.damageMin ? data.Common.damageMin : 0;
        this.damageMax = data.Common.damageMax ? data.Common.damageMax : 0;
        this.criticalStrikeRate = data.Common.criticalStrikeRate ? data.Common.criticalStrikeRate : 0;
        this.defence = data.Common.defence ? data.Common.defence : 0;
        this.lifeDrain = data.Common.lifeDrain ? data.Common.lifeDrain : 0;
        this.damageBack = data.Common.damageBack ? data.Common.damageBack : 0;
        this.moveSpeed = data.Common.moveSpeed ? data.Common.moveSpeed : 0;
        this.attackSpeed = data.Common.attackSpeed ? data.Common.attackSpeed : 0;
        this.remoteCooldown = data.Common.remoteCooldown ? data.Common.remoteCooldown : 0;
        this.dodge = data.Common.dodge ? data.Common.dodge : 0;
        this.realDamage = data.Common.realDamage ? data.Common.realDamage : 0;
        this.realRate = data.Common.realRate ? data.Common.realRate : 0;
        this.magicDefence = data.Common.magicDefence ? data.Common.magicDefence : 0;
        this.iceRate = data.Common.iceRate ? data.Common.iceRate : 0;
        this.magicDamage = data.Common.magicDamage ? data.Common.magicDamage : 0;
        this.fireRate = data.Common.fireRate ? data.Common.fireRate : 0;
        this.lighteningRate = data.Common.lighteningRate ? data.Common.lighteningRate : 0;
        this.toxicRate = data.Common.toxicRate ? data.Common.toxicRate : 0;
        this.curseRate = data.Common.curseRate ? data.Common.curseRate : 0;
        this.nameCn = data.nameCn ? data.nameCn : "";
        this.nameEn = data.nameEn ? data.nameEn : "";
        this.equipmetType = data.equipmetType ? data.equipmetType : "";
        this.desc = data.desc ? data.desc : "";
        this.img = data.img ? data.img : "emptyequipment";
        this.stab = data.stab ? data.stab : 0;
        this.far = data.far ? data.far : 0;
        this.bulletArcExNum = data.bulletArcExNum ? data.bulletArcExNum : 0;
        this.bulletLineExNum = data.bulletLineExNum ? data.bulletLineExNum : 0;
        this.bulletLineInterval = data.bulletLineInterval ? data.bulletLineInterval : 0;
        this.trouserslong = data.trouserslong ? data.trouserslong : 0;
        this.showShooter = data.showShooter ? data.showShooter : 0;
        this.isHeavy = data.isHeavy ? data.isHeavy : 0;
        this.bulletType = data.bulletType ? data.bulletType : "";
        this.isLineAim = data.isLineAim ? data.isLineAim : 0;
        this.hideHair = data.hideHair ? data.hideHair : 0;
        this.bulletSize = data.bulletSize ? data.bulletSize : 0;
        this.bulletExSpeed = data.bulletExSpeed ? data.bulletExSpeed : 0;
      };
      EquipmentStringData.prototype.clone = function() {
        var e = new EquipmentStringData();
        e.nameCn = this.nameCn;
        e.nameEn = this.nameEn;
        e.equipmetType = this.equipmetType;
        e.desc = this.desc;
        e.img = this.img;
        e.stab = this.stab;
        e.far = this.far;
        e.trouserslong = this.trouserslong;
        e.showShooter = this.showShooter;
        e.bulletType = this.bulletType;
        e.isHeavy = this.isHeavy;
        e.isLineAim = this.isLineAim;
        e.bulletArcExNum = this.bulletArcExNum;
        e.bulletLineExNum = this.bulletLineExNum;
        e.bulletLineInterval = this.bulletLineInterval;
        e.hideHair = this.hideHair;
        e.bulletSize = this.bulletSize;
        e.bulletExSpeed = this.bulletExSpeed;
        e.maxHealth = this.maxHealth;
        e.damageMin = this.damageMin;
        e.damageMax = this.damageMax;
        e.criticalStrikeRate = this.criticalStrikeRate;
        e.defence = this.defence;
        e.lifeDrain = this.lifeDrain;
        e.damageBack = this.damageBack;
        e.moveSpeed = this.moveSpeed;
        e.attackSpeed = this.attackSpeed;
        e.remoteCooldown = this.remoteCooldown;
        e.dodge = this.dodge;
        e.realDamage = this.realDamage;
        e.realRate = this.realRate;
        e.magicDefence = this.magicDefence;
        e.iceRate = this.iceRate;
        e.magicDamage = this.magicDamage;
        e.fireRate = this.fireRate;
        e.lighteningRate = this.lighteningRate;
        e.toxicRate = this.toxicRate;
        e.curseRate = this.curseRate;
        return e;
      };
      return EquipmentStringData;
    }();
    exports.default = EquipmentStringData;
    cc._RF.pop();
  }, {} ],
  Equipment: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46d3aM6X2VOCJtzuWiGZaWE", "Equipment");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var EquipmentData_1 = require("../Data/EquipmentData");
    var EventHelper_1 = require("../EventHelper");
    var Dungeon_1 = require("../Dungeon");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var Achievement_1 = require("../Achievement");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Equipment = function(_super) {
      __extends(Equipment, _super);
      function Equipment() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.data = new EquipmentData_1.default();
        _this.pos = cc.v3(0, 0);
        _this.isTaken = false;
        return _this;
      }
      Equipment.prototype.onLoad = function() {
        this.isTaken = false;
        this.sprite = this.node.getChildByName("sprite");
        this.taketips = this.node.getChildByName("sprite").getChildByName("taketips");
      };
      Equipment.prototype.refresh = function(data) {
        this.data.valueCopy(data);
        var spriteFrame = Logic_1.default.spriteFrameRes(this.data.img);
        "trousers" == data.equipmetType && (spriteFrame = 1 == data.trouserslong ? Logic_1.default.spriteFrameRes("trousers000") : spriteFrame);
        "clothes" == data.equipmetType ? spriteFrame = Logic_1.default.spriteFrameRes(this.data.img + "anim0") : "helmet" == data.equipmetType ? spriteFrame = Logic_1.default.spriteFrameRes(this.data.img + "anim0") : "remote" == data.equipmetType && (spriteFrame = Logic_1.default.spriteFrameRes(this.data.img + "anim0"));
        this.sprite.getComponent(cc.Sprite).spriteFrame = spriteFrame;
        this.sprite.width = spriteFrame.getOriginalSize().width;
        this.sprite.height = spriteFrame.getOriginalSize().height;
        var color = cc.color(255, 255, 255).fromHEX(this.data.color);
        this.sprite.color = color;
        this.mat = this.sprite.getComponent(cc.Sprite).getMaterial(0);
        this.mat.setProperty("textureSizeWidth", spriteFrame.getTexture().width * this.sprite.scaleX);
        this.mat.setProperty("textureSizeHeight", spriteFrame.getTexture().height * this.sprite.scaleY);
        this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
        this.highLight(false);
        if ("remote" == data.equipmetType) {
          this.sprite.width = this.sprite.width / 2;
          this.sprite.height = this.sprite.height / 2;
        }
        this.data.pos = Dungeon_1.default.getIndexInMap(this.node.position.clone());
      };
      Equipment.prototype.highLight = function(isHigh) {
        this.mat || (this.mat = this.sprite.getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("openOutline", isHigh ? 1 : 0);
      };
      Equipment.prototype.start = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      Equipment.prototype.onEnable = function() {};
      Equipment.prototype.taken = function(isReplace) {
        if (this.isTaken) return false;
        if (!this.shopTable) {
          this._taken(isReplace);
          return true;
        }
        if (Logic_1.default.coins >= this.data.price) {
          cc.director.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            detail: {
              count: -this.data.price
            }
          });
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.COIN
            }
          });
          this.shopTable.sale(true);
          this._taken(isReplace);
          return true;
        }
        return false;
      };
      Equipment.prototype._taken = function(isReplace) {
        var _this = this;
        this.isTaken = true;
        this.anim.play("EquipmentTaken");
        Achievement_1.default.addEquipsAchievement(this.data.img);
        cc.director.emit(EventHelper_1.EventHelper.PLAYER_CHANGEEQUIPMENT, {
          detail: {
            equipData: this.data,
            isReplace: isReplace
          }
        });
        this.node.getChildByName("shadow").active = false;
        cc.director.emit(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_HIDE);
        this.scheduleOnce(function() {
          _this.node && _this.destroy();
        }, 1);
        var currequipments = Logic_1.default.mapManager.getCurrentMapEquipments();
        var newlist = new Array();
        if (currequipments) for (var _i = 0, currequipments_1 = currequipments; _i < currequipments_1.length; _i++) {
          var temp = currequipments_1[_i];
          temp.uuid && temp.uuid != this.data.uuid && newlist.push(temp);
        }
        Logic_1.default.mapManager.setCurrentEquipmentsArr(newlist);
        cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
          detail: {
            name: AudioPlayer_1.default.PICK_UP
          }
        });
      };
      Equipment = __decorate([ ccclass ], Equipment);
      return Equipment;
    }(cc.Component);
    exports.default = Equipment;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/EquipmentData": "EquipmentData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer"
  } ],
  EventHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4128feS00VLAILEQToHDge5", "EventHelper");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventHelper = void 0;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EventHelper = function(_super) {
      __extends(EventHelper, _super);
      function EventHelper() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      EventHelper.emit = function(key, customDetail) {
        customDetail ? cc.director.emit(key, {
          detail: customDetail
        }) : cc.director.emit(key);
      };
      EventHelper.on = function(key, callback) {
        cc.director.on(key, function(event) {
          callback(event ? event.detail : {});
        });
      };
      EventHelper.PLAYER_MOVE = "PLAYER_MOVE";
      EventHelper.PLAYER_ROTATE = "PLAYER_ROTATE";
      EventHelper.PLAYER_TRIGGER = "PLAYER_TRIGGER";
      EventHelper.PLAYER_USEITEM = "PLAYER_USEITEM";
      EventHelper.USEITEM_KEYBOARD = "USEITEM_KEYBOARD";
      EventHelper.PLAYER_SKILL = "PLAYER_SKILL";
      EventHelper.PLAYER_SKILL1 = "PLAYER_SKILL1";
      EventHelper.PLAYER_ATTACK = "PLAYER_ATTACK";
      EventHelper.PLAYER_REMOTEATTACK = "PLAYER_REMOTEATTACK";
      EventHelper.PLAYER_REMOTEATTACK_CANCEL = "PLAYER_REMOTEATTACK_CANCEL";
      EventHelper.PLAYER_GETITEM = "PLAYER_GETITEM";
      EventHelper.PLAYER_USEDREAM = "PLAYER_USEDREAM";
      EventHelper.PLAYER_CHANGEITEM = "PLAYER_CHANGEITEM";
      EventHelper.PLAYER_CHANGEEQUIPMENT = "PLAYER_CHANGEEQUIPMENT";
      EventHelper.PLAYER_STATUSUPDATE = "PLAYER_STATUSUPDATE";
      EventHelper.PLAYER_EXIT_FROM_SETTINGS = "PLAYER_EXIT_FROM_SETTINGS";
      EventHelper.PLAYER_UPDATE_OILGOLD_DATA = "PLAYER_UPDATE_OILGOLD_DATA";
      EventHelper.INVENTORY_CHANGEITEM = "INVENTORY_CHANGEITEM";
      EventHelper.CHANGE_MINIMAP = "CHANGE_MINIMAP";
      EventHelper.HUD_ADD_COIN = "HUD_ADD_COIN";
      EventHelper.HUD_ADD_OILGOLD = "HUD_ADD_OILGOLD";
      EventHelper.HUD_LOSE_OILGOLD = "HUD_LOSE_OILGOLD";
      EventHelper.HUD_OILGOLD_LOSE_SHOW = "HUD_OILGOLD_LOSE_SHOW";
      EventHelper.HUD_OILGOLD_RECOVERY_SHOW = "HUD_OILGOLD_RECOVERY_SHOW";
      EventHelper.HUD_STOP_COUNTTIME = "HUD_STOP_COUNTTIME";
      EventHelper.HUD_LIGHT_CONTROLLER = "HUD_LIGHT_CONTROLLER";
      EventHelper.HUD_CHANGE_CONTROLLER_SHIELD = "HUD_CHANGE_CONTROLLER_SHIELD";
      EventHelper.HUD_CONTROLLER_COOLDOWN = "HUD_CONTROLLER_COOLDOWN";
      EventHelper.HUD_CONTROLLER_UPDATE_GAMEPAD = "HUD_CONTROLLER_UPDATE_GAMEPAD";
      EventHelper.HUD_CONTROLLER_INTERACT_SHOW = "HUD_CONTROLLER_INTERACT_SHOW";
      EventHelper.HUD_CONTROLLER_REMOTE_SHOW = "HUD_CONTROLLER_REMOTE_SHOW";
      EventHelper.HUD_DAMAGE_CORNER_SHOW = "HUD_DAMAGE_CORNER_SHOW";
      EventHelper.HUD_GROUND_EQUIPMENT_INFO_SHOW = "HUD_GROUND_EQUIPMENT_INFO_SHOW";
      EventHelper.HUD_GROUND_EQUIPMENT_INFO_HIDE = "HUD_GROUND_EQUIPMENT_INFO_HIDE";
      EventHelper.HUD_GROUND_ITEM_INFO_SHOW = "HUD_GROUND_ITEM_INFO_SHOW";
      EventHelper.HUD_GROUND_ITEM_INFO_HIDE = "HUD_GROUND_ITEM_INFO_HIDE";
      EventHelper.HUD_FADE_IN = "HUD_FADE_IN";
      EventHelper.HUD_FADE_OUT = "HUD_FADE_OUT";
      EventHelper.HUD_COMPLETE_SHOW = "HUD_COMPLETE_SHOW";
      EventHelper.HUD_MART_SHELVES_DIALOG = "HUD_MART_SHELVES_DIALOG";
      EventHelper.HUD_MART_SHELVES_DIALOG_PAY = "HUD_MART_SHELVES_DIALOG_BUY";
      EventHelper.HUD_CAMERA_ZOOM_IN = "HUD_CAMERA_ZOOM_IN";
      EventHelper.HUD_CAMERA_ZOOM_OUT = "HUD_CAMERA_ZOOM_OUT";
      EventHelper.HUD_CANCEL_OR_PAUSE = "HUD_CANCEL_OR_PAUSE";
      EventHelper.DUNGEON_SETEQUIPMENT = "DUNGEON_SETEQUIPMENT";
      EventHelper.DUNGEON_ADD_ITEM = "DUNGEON_ADD_ITEM";
      EventHelper.DUNGEON_SHAKEONCE = "DUNGEON_SHAKEONCE";
      EventHelper.DUNGEON_ADD_COIN = "DUNGEON_ADD_COIN";
      EventHelper.DUNGEON_ADD_OILGOLD = "DUNGEON_ADD_OILGOLD";
      EventHelper.DUNGEON_ADD_FALLSTONE = "DUNGEON_ADD_FALLSTONE";
      EventHelper.DUNGEON_ADD_LIGHTENINGFALL = "DUNGEON_ADD_LIGHTENINGFALL";
      EventHelper.MONSTER_STATUSUPDATE = "MONSTER_STATUSUPDATE";
      EventHelper.BOSS_ADDSLIME = "BOSS_ADDSLIME";
      EventHelper.HUD_UPDATE_PLAYER_INFODIALOG = "HUD_UPDATE_PLAYER_INFO_DIALOG";
      EventHelper.HUD_UPDATE_PLAYER_HEALTHBAR = "HUD_UPDATE_PLAYER_HEALTHBAR";
      EventHelper.HUD_UPDATE_PLAYER_DREAMBAR = "HUD_UPDATE_PLAYER_DREAMBAR";
      EventHelper.HUD_SHAKE_PLAYER_DREAMBAR = "HUD_SHAKE_PLAYER_DREAMBAR";
      EventHelper.HUD_INVENTORY_SHOW = "HUD_INVENTORY_SHOW";
      EventHelper.HUD_CELLPHONE_SHOW = "HUD_CELLPHONE_SHOW";
      EventHelper.HUD_INVENTORY_ITEM_UPDATE = "HUD_INVENTORY_ITEM_UPDATE";
      EventHelper.HUD_INVENTORY_ALL_UPDATE = "HUD_INVENTORY_ALL_UPDATE";
      EventHelper.HUD_TOAST = "HUD_TOAST";
      EventHelper.TALENT_TREE_UPDATE = "TALENT_TREE_UPDATE";
      EventHelper.TALENT_TREE_SELECT = "TALENT_TREE_SELECT";
      EventHelper.PLAY_AUDIO = "PLAY_AUDIO";
      EventHelper.STOP_ALL_AUDIO_EFFECT = "STOP_AUDIO_EFFECT";
      EventHelper.CAMERA_SHAKE = "CAMERA_SHAKE";
      EventHelper.CAMERA_LOOK = "CAMERA_LOOK";
      EventHelper.CHUNK_LOAD = "CHUNK_LOAD";
      EventHelper.POOL_DESTORY_WALKSMOKE = "destorysmoke";
      EventHelper.POOL_DESTORY_BLOCKLIGHT = "destoryblocklight";
      EventHelper.TEST_SHOW_NODE_COUNT = "TEST_SHOW_NODE_COUNT";
      EventHelper.eventHandler = new cc.Node();
      EventHelper = __decorate([ ccclass ], EventHelper);
      return EventHelper;
    }(cc.Component);
    exports.EventHelper = EventHelper;
    cc._RF.pop();
  }, {} ],
  EvilEye: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4c205mgXoJFWIARHvt3fCFo", "EvilEye");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var EventHelper_1 = require("../EventHelper");
    var Shooter_1 = require("../Shooter");
    var DamageData_1 = require("../Data/DamageData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var Boss_1 = require("./Boss");
    var NextStep_1 = require("../Utils/NextStep");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EvilEye = function(_super) {
      __extends(EvilEye, _super);
      function EvilEye() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.viceEyesFireSkill = new NextStep_1.default();
        _this.mainEyesFireSkill = new NextStep_1.default();
        _this.dashSkill = new NextStep_1.default();
        _this.isHalfBlood = false;
        _this.actionTimeDelay = 0;
        return _this;
      }
      EvilEye.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.graphics = this.getComponent(cc.Graphics);
        this.anim = this.getComponent(cc.Animation);
        this.shooter = this.node.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.viceEyes = new Array();
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb1").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb2").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb3").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb4").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb5").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceEyes.push(this.node.getChildByName("sprite").getChildByName("limb6").getChildByName("tentacle1").getChildByName("tentacle2").getChildByName("tentacle3").getChildByName("eye"));
        this.viceShooters = new Array();
        this.viceShooters.push(this.node.getChildByName("Shooter1").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter2").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter3").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter4").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter5").getComponent(Shooter_1.default));
        this.viceShooters.push(this.node.getChildByName("Shooter6").getComponent(Shooter_1.default));
        var from = FromData_1.default.getClone(this.actorName(), "evileyeeye");
        this.shooter.from.valueCopy(from);
        for (var _i = 0, _a = this.viceShooters; _i < _a.length; _i++) {
          var vice = _a[_i];
          vice.from.valueCopy(from);
        }
      };
      EvilEye.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      EvilEye.prototype.takeDamage = function(damage) {
        var _this = this;
        if (this.sc.isDied || !this.sc.isShow || this.anim.getAnimationState("EvilEyeHurt").isPlaying) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        var isHalf = this.data.currentHealth < this.data.Common.maxHealth / 2;
        if (isHalf && !this.isHalfBlood) {
          this.isHalfBlood = true;
          this.anim.play("EvilEyeHurt");
          this.scheduleOnce(function() {
            _this.anim.play("EvilEyeBite");
          }, 2.5);
        }
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      EvilEye.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        cc.tween(this.node).to(3, {
          opacity: 0
        }).start();
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      EvilEye.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.node.position = Dungeon_1.default.fixOuterMap(this.node.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.node.position);
        this.changeZIndex();
        var pos = this.getMovePos();
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        var isHalf = this.data.currentHealth < this.data.Common.maxHealth / 2;
        playerDis < 100 && (this.rigidbody.linearVelocity = cc.Vec2.ZERO);
        this.mainEyesFireSkill.IsExcuting || !isHalf || this.anim.getAnimationState("EvilEyeHurt").isPlaying || this.dash();
        this.fireWithViceEyes(isHalf);
        this.dashSkill.IsExcuting || this.fireWithMainEye();
        if (!pos.equals(cc.Vec3.ZERO) && playerDis > 100 && !this.shooter.isAiming && !this.dashSkill.IsExcuting) {
          pos = pos.normalizeSelf();
          this.move(pos, 20);
        }
      };
      EvilEye.prototype.getMovePos = function() {
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos);
        pos.y += 32;
        pos = pos.sub(this.node.position);
        var h = pos.x;
        return pos;
      };
      EvilEye.prototype.fireWithViceEyes = function(isHalf) {
        var _this = this;
        this.viceEyesFireSkill.next(function() {
          _this.viceEyesFireSkill.IsExcuting = true;
          _this.scheduleOnce(function() {
            _this.viceEyesFireSkill.IsExcuting = false;
          }, 2);
          isHalf ? _this.schedule(function() {
            _this.fireViceBullet();
          }, .5, 2, 0) : _this.fireViceBullet();
        }, 3);
      };
      EvilEye.prototype.fireViceBullet = function() {
        for (var i = 0; i < this.viceShooters.length; i++) {
          var p = this.viceEyes[i].convertToWorldSpaceAR(cc.v3(0, 0));
          p = this.node.convertToNodeSpaceAR(p);
          this.viceShooters[i].node.setPosition(p);
          var pos = this.node.position.clone().add(p);
          var hv = this.dungeon.player.getCenterPosition().sub(pos);
          if (!hv.equals(cc.Vec3.ZERO)) {
            hv = hv.normalizeSelf();
            this.viceShooters[i].setHv(hv);
            this.fireShooter(this.viceShooters[i], "bullet101", 0, 0, 0, cc.v3(0, 0));
          }
        }
      };
      EvilEye.prototype.fireWithMainEye = function() {
        var _this = this;
        this.mainEyesFireSkill.next(function() {
          _this.mainEyesFireSkill.IsExcuting = true;
          _this.scheduleOnce(function() {
            _this.mainEyesFireSkill.IsExcuting = false;
          }, 3);
          var p = _this.shooter.node.convertToWorldSpaceAR(cc.v3(0, 0));
          p = _this.node.convertToNodeSpaceAR(p);
          _this.shooter.node.setPosition(p);
          var pos = _this.node.position.clone().add(p);
          var hv = _this.dungeon.player.getCenterPosition().sub(pos);
          if (!hv.equals(cc.Vec3.ZERO)) {
            hv = hv.normalizeSelf();
            _this.shooter.setHv(hv);
            _this.shooter.data.isLineAim = 1;
            _this.fireShooter(_this.shooter, "laser003", 0, 3, 0, cc.v3(0, 0));
            _this.anim.playAdditive("EvilEyeStone");
          }
        }, 7);
      };
      EvilEye.prototype.dash = function() {
        var _this = this;
        this.dashSkill.next(function() {
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.MELEE
            }
          });
          _this.dashSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("EvilEyeBite");
          var pos = _this.getMovePos();
          pos.equals(cc.Vec3.ZERO) || (pos = pos.normalizeSelf());
          var h = pos.x;
          var v = pos.y;
          var movement = cc.v2(h, v);
          movement = movement.mul(800);
          _this.rigidbody.linearVelocity = movement;
          _this.scheduleOnce(function() {
            _this.dashSkill.IsExcuting = false;
          }, 2);
        }, 3, true);
      };
      EvilEye.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle, defaultPos) {
        shooter.dungeon = this.dungeon;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle, defaultPos);
      };
      EvilEye.prototype.showBoss = function() {
        this.sc.isShow = true;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      EvilEye.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      EvilEye.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.sc.isDied && (this.rigidbody.linearVelocity = cc.Vec2.ZERO);
      };
      EvilEye.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.node.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.changeZIndex();
      };
      EvilEye.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.dashSkill.IsExcuting) {
          var d = new DamageData_1.default();
          d.physicalDamage = 15;
          var from = FromData_1.default.getClone(this.actorName(), "evileyeeye");
          target.takeDamage(d, from, this) && target.addStatus(StatusManager_1.default.BLEEDING, from);
        }
      };
      EvilEye.prototype.actorName = function() {
        return "\u90aa\u773c";
      };
      EvilEye = __decorate([ ccclass ], EvilEye);
      return EvilEye;
    }(Boss_1.default);
    exports.default = EvilEye;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Shooter": "Shooter",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/NextStep": "NextStep",
    "./Boss": "Boss"
  } ],
  ExitData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "76ad8SnMG9NL67Zj9BTup1j", "ExitData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var ExitData = function() {
      function ExitData() {
        this.fromRoomPos = cc.v3(0, 0);
        this.fromPos = cc.v3(0, 0);
        this.fromChapter = 0;
        this.fromLevel = 0;
        this.toChapter = 0;
        this.toLevel = 0;
        this.toPos = cc.v3(0, 0);
      }
      ExitData.prototype.valueCopy = function(data) {
        this.fromChapter = data.fromChapter ? data.fromChapter : 0;
        this.fromLevel = data.fromLevel ? data.fromLevel : 0;
        this.toChapter = data.toChapter ? data.toChapter : 0;
        this.toLevel = data.toLevel ? data.toLevel : 0;
        this.fromRoomPos = data.fromRoomPos ? cc.v3(data.fromRoomPos.x, data.fromRoomPos.y) : cc.v3(0, 0);
        this.toPos = data.toPos ? cc.v3(data.toPos.x, data.toPos.y) : cc.v3(0, 0);
        this.fromPos = data.fromPos ? cc.v3(data.fromPos.x, data.fromPos.y) : cc.v3(0, 0);
      };
      ExitData.prototype.clone = function() {
        var data = new ExitData();
        data.toPos = this.toPos.clone();
        data.fromRoomPos = this.fromRoomPos.clone();
        data.fromPos = this.fromPos.clone();
        data.fromChapter = this.fromChapter;
        data.fromLevel = this.fromLevel;
        data.toChapter = this.toChapter;
        data.toLevel = this.toLevel;
        return data;
      };
      ExitData.getRealWorldExitDataFromDream = function(fromChapter, fromLevel) {
        var data = new ExitData();
        data.fromChapter = fromChapter;
        data.fromLevel = fromLevel;
        data.toChapter = Logic_1.default.CHAPTER099;
        data.toLevel = 0;
        data.toPos = cc.v3(6, 7);
        return data;
      };
      ExitData.getDreamExitDataFromReal = function() {
        var data = new ExitData();
        data.fromChapter = Logic_1.default.CHAPTER099;
        data.fromLevel = 0;
        data.toChapter = Logic_1.default.savePoinitData.chapter;
        data.toLevel = Logic_1.default.savePoinitData.level;
        data.toPos = cc.v3(Logic_1.default.savePoinitData.x, Logic_1.default.savePoinitData.y);
        return data;
      };
      return ExitData;
    }();
    exports.default = ExitData;
    cc._RF.pop();
  }, {
    "../Logic": "Logic"
  } ],
  ExitDoor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "479c1KI84hEjY9sMAyTcSmq", "ExitDoor");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Player_1 = require("../Player");
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ExitData_1 = require("../Data/ExitData");
    var Dungeon_1 = require("../Dungeon");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ExitDoor = function(_super) {
      __extends(ExitDoor, _super);
      function ExitDoor() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        _this.isDoor = true;
        _this.bgSprite = null;
        _this.closeSprite = null;
        _this.openSprite = null;
        _this.spriteNode = null;
        _this.roof = null;
        _this.isBackToUpLevel = false;
        _this.dir = 0;
        _this.exitData = new ExitData_1.default();
        return _this;
      }
      ExitDoor.prototype.init = function(dir, exitData) {
        this.dir = dir;
        this.exitData.valueCopy(exitData);
        this.isBackToUpLevel = 4 == dir || 5 == dir || 6 == dir || 7 == dir;
        if (this.dir > 7) {
          this.node.opacity = 0;
          this.roof.node.opacity = 0;
          var indexPos = this.data.defaultPos.clone();
          var collider = this.node.getComponent(cc.BoxCollider);
          collider.size = cc.size(128, 128);
          collider.offset = cc.v2(0, 0);
          8 == this.dir && (indexPos.y += 1);
          9 == this.dir && (indexPos.y -= 1);
          10 == this.dir && (indexPos.x -= 1);
          11 == this.dir && (indexPos.x += 1);
          this.node.position = Dungeon_1.default.getPosInMap(indexPos);
        }
        var label = this.roof.getComponentInChildren(cc.Label);
        label.string = "-" + Logic_1.default.worldLoader.getLevelData(this.exitData.toChapter, this.exitData.toLevel).name;
      };
      ExitDoor.prototype.onLoad = function() {
        this.spriteNode = this.node.getChildByName("sprite");
        this.bgSprite = this.node.getChildByName("sprite").getChildByName("exitbg").getComponent(cc.Sprite);
        this.closeSprite = this.node.getChildByName("sprite").getChildByName("exitopen").getComponent(cc.Sprite);
        this.openSprite = this.node.getChildByName("sprite").getChildByName("exitclose").getComponent(cc.Sprite);
        this.roof = this.node.getChildByName("roof").getComponent(cc.Sprite);
        this.openSprite.node.zIndex = IndexZ_1.default.FLOOR;
        this.closeSprite.node.zIndex = IndexZ_1.default.ACTOR;
      };
      ExitDoor.prototype.start = function() {
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          this.changeRes("exit000");
          break;

         case Logic_1.default.CHAPTER01:
          this.changeRes("exit001");
          break;

         case Logic_1.default.CHAPTER02:
          this.changeRes("exit002");
          break;

         case Logic_1.default.CHAPTER03:
          this.changeRes("exit003");
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          this.changeRes("exit004");
          break;

         case Logic_1.default.CHAPTER099:
          this.changeRes("exit000");
        }
        var subfix = "anim000";
        var spriteframe = Logic_1.default.spriteFrameRes("roof" + Logic_1.default.worldLoader.getCurrentLevelData().wallRes1 + subfix);
        (this.dir % 4 > 1 || this.dir > 7) && (spriteframe = null);
        this.roof.spriteFrame = spriteframe;
        this.roof.node.parent = this.node.parent;
        var p = this.node.convertToWorldSpaceAR(cc.v3(0, 128));
        this.roof.node.position = this.roof.node.parent.convertToNodeSpaceAR(p);
        this.roof.node.zIndex = IndexZ_1.default.OVERHEAD;
        this.roof.node.opacity = 255;
        switch (this.dir % 4) {
         case 0:
          break;

         case 1:
          this.roof.node.angle = 180;
          this.roof.node.opacity = 128;
          this.roof.node.getChildByName("info").angle = 180;
        }
      };
      ExitDoor.prototype.openGate = function(immediately) {
        if (this.isOpen) return;
        this.isOpen = true;
        this.getComponent(cc.PhysicsBoxCollider).sensor = true;
        this.getComponent(cc.PhysicsBoxCollider).apply();
        cc.tween(this.closeSprite.node).to(immediately ? 0 : 1, {
          opacity: 0
        }).start();
      };
      ExitDoor.prototype.closeGate = function(immediately) {
        if (!this.isOpen) return;
        this.isOpen = false;
        this.getComponent(cc.PhysicsBoxCollider).sensor = false;
        this.getComponent(cc.PhysicsBoxCollider).apply();
        cc.tween(this.closeSprite.node).to(immediately ? 0 : 1, {
          opacity: 255
        }).start();
      };
      ExitDoor.prototype.onCollisionEnter = function(other, self) {
        if (other.tag == ColliderTag_1.ColliderTag.PLAYER) {
          var player = other.node.getComponent(Player_1.default);
          if (player && this.isOpen) {
            this.isOpen = false;
            cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
              detail: {
                name: AudioPlayer_1.default.EXIT
              }
            });
            Logic_1.default.playerData = player.data.clone();
            Logic_1.default.loadingNextLevel(this.exitData);
          }
        }
      };
      ExitDoor.prototype.changeRes = function(resName) {
        this.bgSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName + "bg");
        this.openSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName + "open");
        this.closeSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName + "close");
      };
      ExitDoor = __decorate([ ccclass ], ExitDoor);
      return ExitDoor;
    }(Building_1.default);
    exports.default = ExitDoor;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Data/ExitData": "ExitData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Player": "Player",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  FallStone: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "606fd8guh5COozFgkmej6tZ", "FallStone");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var Building_1 = require("./Building");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var NonPlayer_1 = require("../NonPlayer");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FallStone = function(_super) {
      __extends(FallStone, _super);
      function FallStone() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isFall = false;
        _this.isAuto = true;
        _this.isFalling = false;
        return _this;
      }
      FallStone.prototype.onLoad = function() {
        this.isFall = false;
      };
      FallStone.prototype.fall = function(withFire) {
        if (withFire) {
          this.node.getChildByName("stone").getChildByName("fire").active = true;
          this.node.getChildByName("stone").color = cc.color(253, 122, 37);
        }
        this.anim = this.getComponent(cc.Animation);
        this.anim.play();
        this.isFalling = true;
      };
      FallStone.prototype.FallFinish = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
        this.isFall = true;
        this.scheduleOnce(function() {
          _this.isFall = false;
        }, .1);
        this.scheduleOnce(function() {
          _this.node && _this.node.destroy();
        }, 2);
      };
      FallStone.prototype.start = function() {};
      FallStone.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        !target || this.isAuto || this.isFalling || this.fall();
      };
      FallStone.prototype.onCollisionStay = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isFall && this.isValid) {
          this.isFall = false;
          target.takeDamage(new DamageData_1.default(2), FromData_1.default.getClone("\u843d\u77f3", "stone"));
        }
        var monster = other.getComponent(NonPlayer_1.default);
        if (monster && this.isFall && this.isValid) {
          this.isFall = false;
          monster.takeDamage(new DamageData_1.default(2));
        }
      };
      FallStone = __decorate([ ccclass ], FallStone);
      return FallStone;
    }(Building_1.default);
    exports.default = FallStone;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../NonPlayer": "NonPlayer",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  FireGhost: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "63945bTi0VH3q4BT6nw6+98", "FireGhost");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var FromData_1 = require("../Data/FromData");
    var Logic_1 = require("../Logic");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FireGhost = function(_super) {
      __extends(FireGhost, _super);
      function FireGhost() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isRotating = false;
        _this.isAttacking = false;
        _this.angleOffset = 0;
        _this.angle = 0;
        _this.isDied = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      FireGhost.prototype.onLoad = function() {
        this.rigidBody = this.getComponent(cc.RigidBody);
      };
      FireGhost.prototype.start = function() {};
      FireGhost.prototype.init = function(player, angleOffset) {
        var _this = this;
        this.player = player;
        this.node.setPosition(player.node.position.clone());
        this.node.zIndex = IndexZ_1.default.OVERHEAD;
        this.angleOffset = angleOffset;
        this.scheduleOnce(function() {
          _this.node.setPosition(_this.getPlayerFarPosition(_this.player, 50, _this.angle + _this.angleOffset));
          _this.isRotating = true;
        }, .2);
      };
      FireGhost.prototype.getPlayerFarPosition = function(player, distance, angleOffset) {
        var hv = player.Hv.clone();
        var pos = cc.v3(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180).mul(distance));
        return player.node.position.clone().addSelf(cc.v3(8, 48).addSelf(pos));
      };
      FireGhost.prototype.onCollisionEnter = function(other, self) {
        if (self.radius > 0 && this.isAttacking && this.isRotating) {
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other, true);
          if (target) {
            this.isAttacking = false;
            this.attacking(other.node);
          }
        }
      };
      FireGhost.prototype.attacking = function(attackTarget) {
        if (!attackTarget) return;
        var damage = new DamageData_1.default();
        var status = StatusManager_1.default.BURNING;
        var d = 1;
        damage.magicDamage = d;
        var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget, true);
        if (target && !target.sc.isDied) {
          target.takeDamage(damage);
          target.addStatus(status, new FromData_1.default());
        }
        this.isDied = true;
        cc.director.emit("destoryfireghost", {
          detail: {
            coinNode: this.node
          }
        });
      };
      FireGhost.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      FireGhost.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        if (this.isCheckTimeDelay(dt)) {
          var pos = this.hasNearEnemy();
          if (pos.equals(cc.Vec3.ZERO)) {
            if (this.isRotating && this.player) {
              this.angle += 5;
              this.angle > 360 && (this.angle = 0);
              pos = this.getPlayerFarPosition(this.player, 50, this.angle + this.angleOffset);
              var ps = pos.sub(this.node.position).normalizeSelf().mulSelf(200);
              this.rigidBody.linearVelocity = cc.v2(ps.x, ps.y);
            }
          } else {
            this.isAttacking = true;
            var ps = pos.normalizeSelf().mulSelf(400);
            this.rigidBody.linearVelocity = cc.v2(ps.x, ps.y);
          }
        }
      };
      FireGhost.prototype.hasNearEnemy = function() {
        if (!this.player || !this.isRotating) return cc.Vec3.ZERO;
        return ActorUtils_1.default.getDirectionFromNearestEnemy(this.player.node.position, false, this.player.dungeon, false, 400);
      };
      FireGhost = __decorate([ ccclass ], FireGhost);
      return FireGhost;
    }(cc.Component);
    exports.default = FireGhost;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/IndexZ": "IndexZ"
  } ],
  FloatingLabelManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70be4qc1pdJGpxF0vSkBTb1", "FloatingLabelManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FloatingLabel_1 = require("../UI/FloatingLabel");
    var IndexZ_1 = require("../Utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloatinglabelManager = function(_super) {
      __extends(FloatinglabelManager, _super);
      function FloatinglabelManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        return _this;
      }
      FloatinglabelManager.prototype.clear = function() {};
      FloatinglabelManager.prototype.onLoad = function() {
        var _this = this;
        this.labelPool = new cc.NodePool();
        cc.director.on("destorylabel", function(event) {
          _this.destroyLabel(event.detail.labelNode);
        });
      };
      FloatinglabelManager.prototype.getFloaingLabel = function(parentNode) {
        var p = this.node.position.clone();
        p = this.node.convertToWorldSpaceAR(p);
        p = parentNode.convertToNodeSpaceAR(p);
        var labelPrefab = null;
        this.labelPool.size() > 0 && (labelPrefab = this.labelPool.get());
        labelPrefab && !labelPrefab.active || (labelPrefab = cc.instantiate(this.label));
        labelPrefab.parent = parentNode;
        labelPrefab.position = p.clone();
        var label = labelPrefab.getComponent(FloatingLabel_1.default);
        labelPrefab.zIndex = IndexZ_1.default.UI;
        labelPrefab.opacity = 255;
        labelPrefab.active = true;
        return label;
      };
      FloatinglabelManager.prototype.destroyLabel = function(labelNode) {
        labelNode.active = false;
        this.labelPool && this.labelPool.put(labelNode);
      };
      FloatinglabelManager.prototype.start = function() {};
      __decorate([ property(cc.Prefab) ], FloatinglabelManager.prototype, "label", void 0);
      FloatinglabelManager = __decorate([ ccclass ], FloatinglabelManager);
      return FloatinglabelManager;
    }(cc.Component);
    exports.default = FloatinglabelManager;
    cc._RF.pop();
  }, {
    "../UI/FloatingLabel": "FloatingLabel",
    "../Utils/IndexZ": "IndexZ"
  } ],
  FloatingLabel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cae6fbyiQhHL5VOrhWuq2d6", "FloatingLabel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FloatingLabel = function(_super) {
      __extends(FloatingLabel, _super);
      function FloatingLabel() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FloatingLabel.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.label = this.node.getChildByName("label").getComponent(cc.Label);
      };
      FloatingLabel.prototype.start = function() {};
      FloatingLabel.prototype.showLabel = function(text, color, scale) {
        if (scale) {
          scale > 3 && (scale = 3);
          this.node.scale = scale;
        }
        var sc = this.node.scale;
        this.node.scale = 1.5 * sc;
        this.label.node.opacity = 255;
        this.label.node.position = cc.v3(0, 0);
        this.label.string = text;
        this.label.node.color = color;
        this.anim.play("FontFloating");
        cc.tween(this.node).to(.1, {
          scale: sc
        }).start();
      };
      FloatingLabel.prototype.showMiss = function() {
        this.showLabel("\u4e22\u5931", cc.color(255, 255, 255), 1);
      };
      FloatingLabel.prototype.showDoge = function() {
        this.showLabel("\u95ea\u907f", cc.color(255, 255, 255), 1);
      };
      FloatingLabel.prototype.showBlock = function() {
        this.showLabel("\u683c\u6321", cc.color(211, 211, 211), 1);
      };
      FloatingLabel.prototype.showAvoidDeath = function() {
        this.showLabel("\u683c\u6321\u81f4\u547d\u4f24", cc.color(255, 0, 0), 5);
      };
      FloatingLabel.prototype.showDamage = function(damage, isCritical, isBackStab) {
        var color = damage < 0 ? cc.color(255, 0, 0) : cc.color(0, 255, 0);
        var baseScale = 1;
        if (isCritical) {
          color = cc.color(255, 255, 0);
          baseScale = 2;
        }
        isBackStab && (color = cc.color(186, 85, 211));
        var absd = Math.abs(damage);
        var sd = parseFloat(damage.toFixed(1));
        this.showLabel((damage > 0 ? "+" : "") + (0 != sd ? sd : ""), color, baseScale + absd / 50);
      };
      FloatingLabel.prototype.hideLabel = function() {
        this.node.active = false;
        cc.director.emit("destorylabel", {
          detail: {
            labelNode: this.node
          }
        });
      };
      FloatingLabel.prototype.FloatingFinish = function() {
        this.hideLabel();
      };
      FloatingLabel = __decorate([ ccclass ], FloatingLabel);
      return FloatingLabel;
    }(cc.Component);
    exports.default = FloatingLabel;
    cc._RF.pop();
  }, {} ],
  FootBoard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a20d6iwPAJLg7AtbBgYX0yS", "FootBoard");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FootBoard = function(_super) {
      __extends(FootBoard, _super);
      function FootBoard() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.openSpriteFrame = null;
        _this.closeSpriteFrame = null;
        _this.isOpen = false;
        _this.hasActive = false;
        _this.pos = cc.v3(0, 0);
        _this.timeDelay = 0;
        return _this;
      }
      FootBoard.prototype.onLoad = function() {
        this.spriteNode = this.node.getChildByName("sprite");
        this.sprite = this.spriteNode.getComponent(cc.Sprite);
      };
      FootBoard.prototype.start = function() {};
      FootBoard.prototype.setPos = function(pos) {
        this.pos = pos;
        this.node.position = Dungeon_1.default.getPosInMap(pos);
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      FootBoard.prototype.openTrap = function() {
        if (this.isOpen) return;
        this.isOpen = true;
        this.sprite.spriteFrame = this.isOpen ? this.openSpriteFrame : this.closeSpriteFrame;
      };
      FootBoard.prototype.onCollisionStay = function(other, self) {
        if (other.tag == ColliderTag_1.ColliderTag.BUILDING) {
          this.isOpen = true;
          this.hasActive = true;
        }
        if (other.tag == ColliderTag_1.ColliderTag.PLAYER) {
          this.isOpen = true;
          this.hasActive = true;
        }
      };
      FootBoard.prototype.onCollisionEnter = function(other, self) {
        if (other.tag == ColliderTag_1.ColliderTag.BUILDING) {
          this.isOpen = true;
          this.hasActive = true;
        }
        if (other.tag == ColliderTag_1.ColliderTag.PLAYER) {
          this.isOpen = true;
          this.hasActive = true;
        }
      };
      FootBoard.prototype.onCollisionExit = function(other, self) {
        other.tag == ColliderTag_1.ColliderTag.BUILDING && (this.isOpen = false);
        other.tag == ColliderTag_1.ColliderTag.PLAYER && (this.isOpen = false);
      };
      FootBoard.prototype.update = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .2) {
          this.timeDelay = 0;
          this.sprite.spriteFrame = this.isOpen ? this.openSpriteFrame : this.closeSpriteFrame;
        }
      };
      __decorate([ property(cc.SpriteFrame) ], FootBoard.prototype, "openSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], FootBoard.prototype, "closeSpriteFrame", void 0);
      FootBoard = __decorate([ ccclass ], FootBoard);
      return FootBoard;
    }(Building_1.default);
    exports.default = FootBoard;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Dungeon": "Dungeon",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  FromData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf8a1Noa0FD6qIEI4bqHV5c", "FromData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FromData = function() {
      function FromData() {
        this.name = "";
        this.res = "";
        this.id = 0;
      }
      FromData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.name = data.name ? data.name : "";
        this.res = data.res ? data.res : "";
        this.id = data.id ? data.id : 0;
      };
      FromData.getClone = function(name, res, id) {
        var e = new FromData();
        e.name = name;
        e.res = res;
        e.id = id;
        return e;
      };
      FromData.prototype.clone = function() {
        var e = new FromData();
        e.name = this.name;
        e.res = this.res;
        e.id = this.id;
        return e;
      };
      return FromData;
    }();
    exports.default = FromData;
    cc._RF.pop();
  }, {} ],
  FsmEvent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b77f3K+NxhBaYwLRNLbbGxg", "FsmEvent");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FsmEvent = function() {
      function FsmEvent() {}
      return FsmEvent;
    }();
    exports.default = FsmEvent;
    cc._RF.pop();
  }, {} ],
  FurnitureData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "995a0Fy66ZBko3/UdM2GS2a", "FurnitureData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FurnitureData = function() {
      function FurnitureData() {
        this.id = "";
        this.price = 60;
        this.nameCn = "";
        this.nameEn = "";
        this.resName = "";
        this.info = "";
        this.desc = "";
        this.scale = 1;
        this.collider = "";
        this.isOpen = false;
        this.purchased = false;
      }
      FurnitureData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.id = data.id ? data.id : "";
        this.purchased = data.purchased;
        this.price = data.price;
        this.nameCn = data.nameCn ? data.nameCn : "";
        this.nameEn = data.nameEn ? data.nameEn : "";
        this.resName = data.resName ? data.resName : "";
        this.info = data.info ? data.info : "";
        this.scale = data.scale ? data.scale : 1;
        this.collider = data.collider ? data.collider : "";
        this.isOpen = data.isOpen;
      };
      FurnitureData.prototype.clone = function() {
        var data = new FurnitureData();
        data.purchased = this.purchased;
        data.scale = this.scale;
        data.price = this.price;
        data.nameCn = this.nameCn;
        data.nameEn = this.nameEn;
        data.info = this.info;
        data.scale = this.scale;
        data.collider = this.collider;
        data.isOpen = this.isOpen;
        data.resName = this.resName;
        data.id = this.id;
        return data;
      };
      return FurnitureData;
    }();
    exports.default = FurnitureData;
    cc._RF.pop();
  }, {} ],
  Furniture: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12170bzXSpDtaz5MoM+l14L", "Furniture");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Achievement_1 = require("../Achievement");
    var FurnitureData_1 = require("../Data/FurnitureData");
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var Tips_1 = require("../UI/Tips");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var LocalStorage_1 = require("../Utils/LocalStorage");
    var Utils_1 = require("../Utils/Utils");
    var Building_1 = require("./Building");
    var RoomFishtank_1 = require("./RoomFishtank");
    var RoomStool_1 = require("./RoomStool");
    var RoomTv_1 = require("./RoomTv");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Furniture = function(_super) {
      __extends(Furniture, _super);
      function Furniture() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpening = false;
        return _this;
      }
      Furniture_1 = Furniture;
      Furniture.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.boxcover = this.node.getChildByName("boxcover").getComponent(cc.Sprite);
        this.boxback = this.node.getChildByName("boxback").getComponent(cc.Sprite);
        this.tips = this.getComponentInChildren(Tips_1.default);
        this.tips.onInteract(function() {
          _this.furnitureData && (_this.furnitureData.isOpen ? _this.interact() : _this.openBox());
        });
        this.tips.onEnter(function() {
          _this.furnitureData && _this.furnitureData.isOpen && _this.onEnter();
        });
        this.tips.onExit(function() {
          _this.furnitureData && _this.furnitureData.isOpen && _this.onExit();
        });
      };
      Furniture.prototype.interact = function() {
        switch (this.furnitureData.id) {
         case Furniture_1.TV:
          var tv = this.getComponent(RoomTv_1.default);
          tv && tv.interact();
          break;

         case Furniture_1.STOOL:
          var stool = this.getComponent(RoomStool_1.default);
          stool && stool.open();
          break;

         case Furniture_1.FISHTANK:
          var fishtank = this.getComponent(RoomFishtank_1.default);
          fishtank && fishtank.feed();
          break;

         default:
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
          Utils_1.default.toast("\u68a6\u5883\u5f00\u53d1\u4e2d,\u65e0\u6cd5\u4f7f\u7528");
        }
      };
      Furniture.prototype.onEnter = function() {
        switch (this.furnitureData.id) {
         case Furniture_1.FISHTANK:
          var fishtank = this.getComponent(RoomFishtank_1.default);
          fishtank && fishtank.zoomCamera(true);
        }
      };
      Furniture.prototype.onExit = function() {
        switch (this.furnitureData.id) {
         case Furniture_1.FISHTANK:
          var fishtank = this.getComponent(RoomFishtank_1.default);
          fishtank && fishtank.zoomCamera(false);
        }
      };
      Furniture.prototype.init = function(furnitureData) {
        this.furnitureData = new FurnitureData_1.default();
        this.furnitureData.valueCopy(furnitureData);
        if (this.furnitureData.isOpen) {
          this.boxcover.node.active = false;
          this.boxback.node.active = false;
        } else {
          this.boxcover.node.active = true;
          this.boxback.node.active = true;
        }
        this.changeRes(this.furnitureData.resName);
        if (this.furnitureData.collider.length > 0) {
          var arr = this.furnitureData.collider.split(",");
          var pcollider = this.getComponent(cc.PhysicsBoxCollider);
          pcollider.offset = cc.v2(parseInt(arr[0]), parseInt(arr[1]));
          pcollider.size = cc.size(parseInt(arr[2]), parseInt(arr[3]));
          pcollider.apply();
        }
        LocalStorage_1.default.saveFurnitureData(this.furnitureData);
        Achievement_1.default.addFurnituresAchievement(this.furnitureData.id);
      };
      Furniture.prototype.changeRes = function(resName) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        if (spriteFrame) {
          this.sprite.spriteFrame = spriteFrame;
          this.sprite.node.width = spriteFrame.getOriginalSize().width;
          this.sprite.node.height = spriteFrame.getOriginalSize().height;
          this.boxback.node.width = spriteFrame.getOriginalSize().width;
          this.boxback.node.height = spriteFrame.getOriginalSize().height;
          this.boxcover.node.width = spriteFrame.getOriginalSize().width;
          this.boxcover.node.height = spriteFrame.getOriginalSize().height;
          this.sprite.node.scale = this.furnitureData.scale;
          this.tips.node.scale = 2;
          this.boxback.node.scale = this.furnitureData.scale;
          this.boxcover.node.scale = this.furnitureData.scale;
          var width = this.sprite.node.width * this.sprite.node.scale;
          var height = this.sprite.node.height * this.sprite.node.scale;
          if (this.furnitureData.id != Furniture_1.STOOL && this.furnitureData.id != Furniture_1.TV && this.furnitureData.id != Furniture_1.SOFA && this.furnitureData.id != Furniture_1.FISHTANK) {
            this.tips.node.position = cc.v3(width / 2 - Dungeon_1.default.TILE_SIZE / 2, height - Dungeon_1.default.TILE_SIZE / 2);
            var collider = this.tips.node.getComponent(cc.CircleCollider);
            collider.radius = width > height ? height / 2 : width / 2;
            if (width > height) {
              collider.radius = height / 2;
              collider.offset = cc.v2(0, -height / 2);
            } else {
              collider.radius = width / 2;
              collider.offset = cc.v2(0, -height + width);
            }
          }
        }
      };
      Furniture.prototype.openBox = function() {
        if (this.furnitureData.isOpen) return;
        this.furnitureData.isOpen = true;
        LocalStorage_1.default.saveFurnitureData(this.furnitureData);
        this.anim.play("FurnitureOpen");
      };
      Furniture.prototype.start = function() {};
      var Furniture_1;
      Furniture.SOFA = "furniture001";
      Furniture.BATH = "furniture002";
      Furniture.DINNER_TABLE = "furniture003";
      Furniture.WASHING_MACHINE = "furniture004";
      Furniture.COOKING_BENCH = "furniture005";
      Furniture.COOKING_BENCH_1 = "furniture006";
      Furniture.COOKING_BENCH_2 = "furniture007";
      Furniture.COOKING_BENCH_3 = "furniture008";
      Furniture.FRIDGE = "furniture009";
      Furniture.DESK = "furniture010";
      Furniture.CUPBOARD = "furniture011";
      Furniture.LITTLE_TABLE = "furniture012";
      Furniture.LITTLE_TABLE_1 = "furniture013";
      Furniture.LITTLE_TABLE_2 = "furniture014";
      Furniture.STOOL = "furniture015";
      Furniture.TV = "furniture016";
      Furniture.FISHTANK = "furniture017";
      Furniture = Furniture_1 = __decorate([ ccclass ], Furniture);
      return Furniture;
    }(Building_1.default);
    exports.default = Furniture;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/FurnitureData": "FurnitureData",
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../UI/Tips": "Tips",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/LocalStorage": "LocalStorage",
    "../Utils/Utils": "Utils",
    "./Building": "Building",
    "./RoomFishtank": "RoomFishtank",
    "./RoomStool": "RoomStool",
    "./RoomTv": "RoomTv"
  } ],
  GameFinish: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "98577N+o/RGi4cE+Wsz8Pp4", "GameFinish");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var WxHelper_1 = require("./WxHelper");
    var EventHelper_1 = require("./EventHelper");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NewClass = function(_super) {
      __extends(NewClass, _super);
      function NewClass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.wxhelper = null;
        _this.level = null;
        _this.clock = null;
        return _this;
      }
      NewClass.prototype.start = function() {
        this.clock && (this.clock.string = "" + Logic_1.default.time);
        this.level && (this.level.string = "Level " + (Logic_1.default.chapterIndex + 1) + "-" + Logic_1.default.level);
      };
      NewClass.prototype.retry = function() {
        Logic_1.default.resetData();
        cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
          detail: {
            name: AudioPlayer_1.default.SELECT
          }
        });
        cc.director.loadScene("loading");
      };
      NewClass.prototype.home = function() {
        this.wxhelper && this.wxhelper.CloseDialog();
        cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
          detail: {
            name: AudioPlayer_1.default.SELECT
          }
        });
        cc.director.loadScene("start");
      };
      __decorate([ property(WxHelper_1.default) ], NewClass.prototype, "wxhelper", void 0);
      __decorate([ property(cc.Label) ], NewClass.prototype, "level", void 0);
      __decorate([ property(cc.Label) ], NewClass.prototype, "clock", void 0);
      NewClass = __decorate([ ccclass ], NewClass);
      return NewClass;
    }(cc.Component);
    exports.default = NewClass;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./Utils/AudioPlayer": "AudioPlayer",
    "./WxHelper": "WxHelper"
  } ],
  GameHud: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34bc5nmZdpM3J3SaZigF3c3", "GameHud");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerInfoDialog_1 = require("./PlayerInfoDialog");
    var HealthBar_1 = require("../HealthBar");
    var EventHelper_1 = require("../EventHelper");
    var PlayerData_1 = require("../Data/PlayerData");
    var Logic_1 = require("../Logic");
    var SettingsDialog_1 = require("./dialog/SettingsDialog");
    var MartShelvesDialog_1 = require("./dialog/MartShelvesDialog");
    var InventoryDialog_1 = require("./dialog/InventoryDialog");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameHud = function(_super) {
      __extends(GameHud, _super);
      function GameHud() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.healthBar = null;
        _this.dreamBar = null;
        _this.bossHealthBar = null;
        _this.playerInfoDialog = null;
        _this.level = null;
        _this.clock = null;
        _this.damageCorner = null;
        _this.pasueButton = null;
        _this.zoomButton = null;
        _this.settingsDialog = null;
        _this.martShelvesDialog = null;
        _this.completeLabel = null;
        _this.oilGoldLabel = null;
        _this.inventoryDialog = null;
        _this.isCompleteShowed = false;
        _this.checkTimeDelay = 0;
        _this.startCountTime = true;
        _this.hour = 0;
        _this.minute = 0;
        _this.second = 0;
        return _this;
      }
      GameHud.prototype.onLoad = function() {
        var _this = this;
        cc.director.on(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_INFODIALOG, function(event) {
          var data = new PlayerData_1.default();
          data.valueCopy(event.detail.data);
          _this.statusUpdate(data);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_HEALTHBAR, function(event) {
          _this.healthBarUpdate(event.detail.x, event.detail.y);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_DREAMBAR, function(event) {
          _this.dreamBarUpdate(event.detail.x, event.detail.y);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_SHAKE_PLAYER_DREAMBAR, function(event) {
          _this.dreamBar && _this.dreamBar.shake();
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_DAMAGE_CORNER_SHOW, function(event) {
          _this.showDamageCorner();
          _this.healthBar && _this.healthBar.shake();
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_MART_SHELVES_DIALOG, function(event) {
          _this.showMartShelvesDialog(event.detail.type, event.detail.goodsNameList);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_COMPLETE_SHOW, function(event) {
          _this.showComplete();
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_OILGOLD_LOSE_SHOW, function(event) {
          _this.showOilGoldInfo(true);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_OILGOLD_RECOVERY_SHOW, function(event) {
          _this.showOilGoldInfo(false);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_INVENTORY_SHOW, function(event) {
          _this.showInventoryDialog();
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_CANCEL_OR_PAUSE, function(event) {
          _this.cancelOrPause();
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_STOP_COUNTTIME, function(event) {
          _this.startCountTime = false;
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_FADE_IN, function(event) {
          _this.fadeIn();
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_FADE_OUT, function(event) {
          _this.fadeOut();
        });
        this.clock && (this.clock.string = "" + Logic_1.default.time);
        this.level && (this.level.string = "" + Logic_1.default.worldLoader.getCurrentLevelData().name);
        this.damageCorner && (this.damageCorner.opacity = 0);
        this.pasueButton.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.pauseGame();
        });
        this.zoomButton.on(cc.Node.EventType.TOUCH_START, function(event) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN, {});
        });
        this.zoomButton.on(cc.Node.EventType.TOUCH_END, function(event) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_OUT, {});
        });
        this.zoomButton.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_OUT, {});
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.TEST_SHOW_NODE_COUNT);
        });
        this.healthBarUpdate(Logic_1.default.playerData.currentHealth, Logic_1.default.playerData.getHealth().y);
        this.dreamBarUpdate(Logic_1.default.playerData.currentDream, Logic_1.default.playerData.getDream().y);
        this.fadeIn();
      };
      GameHud.prototype.showOilGoldInfo = function(isLose) {
        var _this = this;
        if (!this.oilGoldLabel) return;
        var arr0 = [ "\u788e", "\u788e\u7247", "\u788e\u7247\u4e22", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22\u5931", "\u788e\u7247\u4e22", "\u788e\u7247", "\u788e", "" ];
        var arr1 = [ "\u788e", "\u788e\u7247", "\u788e\u7247\u627e", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e\u56de", "\u788e\u7247\u627e", "\u788e\u7247", "\u788e", "" ];
        isLose || AudioPlayer_1.default.play(AudioPlayer_1.default.COMPLETE);
        var arr = isLose ? arr0 : arr1;
        var i = 0;
        this.oilGoldLabel.string = "";
        this.oilGoldLabel.unscheduleAllCallbacks();
        this.oilGoldLabel.schedule(function() {
          i < arr.length && (_this.oilGoldLabel.string = arr[i++]);
        }, .15, arr.length);
      };
      GameHud.prototype.showComplete = function() {
        var _this = this;
        if (!this.completeLabel || this.isCompleteShowed) return;
        AudioPlayer_1.default.play(AudioPlayer_1.default.COMPLETE);
        var arr = [ "\u6e05", "\u6e05\u7406", "\u6e05\u7406\u5b8c", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c\u6210", "\u6e05\u7406\u5b8c", "\u6e05\u7406", "\u6e05", "" ];
        var i = 0;
        this.completeLabel.string = "";
        this.completeLabel.unscheduleAllCallbacks();
        this.isCompleteShowed = true;
        this.completeLabel.schedule(function() {
          i < arr.length && (_this.completeLabel.string = arr[i++]);
        }, .1, arr.length, .5);
      };
      GameHud.prototype.fadeOut = function() {
        if (!this.node) return;
        this.node.opacity = 255;
        cc.tween(this.node).to(.5, {
          opacity: 0
        }).start();
      };
      GameHud.prototype.fadeIn = function() {
        if (!this.node) return;
        this.node.opacity = 0;
        cc.tween(this.node).to(3, {
          opacity: 255
        }).start();
      };
      GameHud.prototype.statusUpdate = function(data) {
        if (!this.playerInfoDialog) return;
        this.playerInfoDialog.refreshDialog(data, data.EquipmentTotalData, data.StatusTotalData);
      };
      GameHud.prototype.showDamageCorner = function() {
        if (!this.damageCorner) return;
        this.damageCorner.stopAllActions();
        this.damageCorner.opacity = 255;
        this.damageCorner.scale = 1;
        cc.tween(this.damageCorner).parallel(cc.tween(this.damageCorner).to(.5, {
          scale: 1.05
        }), cc.tween(this.damageCorner).to(1, {
          opacity: 0
        })).start();
      };
      GameHud.prototype.healthBarUpdate = function(currentHealth, maxHealth) {
        this.healthBar && this.healthBar.refreshHealth(currentHealth, maxHealth);
      };
      GameHud.prototype.dreamBarUpdate = function(currentHealth, maxHealth) {
        this.dreamBar && this.dreamBar.refreshHealth(currentHealth, maxHealth);
      };
      GameHud.prototype.start = function() {
        var arr = Logic_1.default.time.split(":");
        this.hour = parseInt(arr[0]);
        this.minute = parseInt(arr[1]);
        this.second = parseInt(arr[2]);
      };
      GameHud.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      GameHud.prototype.update = function(dt) {
        if (this.isCheckTimeDelay(dt) && this.clock && this.startCountTime) {
          this.changeTime();
          this.clock.string = "" + Logic_1.default.time;
        }
        this.settingsDialog.node.active || this.martShelvesDialog.node.active ? Logic_1.default.isGamePause = true : Logic_1.default.isGamePause = false;
      };
      GameHud.prototype.useItem = function() {};
      GameHud.prototype.changeTime = function() {
        if (Logic_1.default.isGamePause) return;
        this.second = this.second + 1;
        if (this.second >= 60) {
          this.second = 0;
          this.minute = this.minute + 1;
        }
        if (this.minute >= 60) {
          this.minute = 0;
          this.hour = this.hour + 1;
        }
        var strHour = "" + this.hour;
        strHour = strHour.length > 1 ? strHour : "0" + strHour;
        var strMinute = "" + this.minute;
        strMinute = strMinute.length > 1 ? strMinute : "0" + strMinute;
        var strSecond = "" + this.second;
        strSecond = strSecond.length > 1 ? strSecond : "0" + strSecond;
        Logic_1.default.time = strHour + ":" + strMinute + ":" + strSecond;
      };
      GameHud.prototype.cancelOrPause = function() {
        if (!this.node) return;
        if (this.inventoryDialog.isShow) {
          this.inventoryDialog.dismiss();
          return;
        }
        if (this.martShelvesDialog.isShow) {
          this.martShelvesDialog.dismiss();
          return;
        }
        this.showSettingsDialog();
      };
      GameHud.prototype.pauseGame = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.showSettingsDialog();
      };
      GameHud.prototype.showInventoryDialog = function() {
        if (!this.node) return;
        this.inventoryDialog.isShow ? this.inventoryDialog.dismiss() : this.inventoryDialog.show();
      };
      GameHud.prototype.showSettingsDialog = function() {
        var _this = this;
        if (!this.node) return;
        if (this.settingsDialog.isShow) {
          this.settingsDialog.dismiss();
          cc.director.getScheduler().setTimeScale(1);
        } else {
          this.scheduleOnce(function() {
            _this.settingsDialog.isShow && !_this.settingsDialog.isAniming ? cc.director.getScheduler().setTimeScale(0) : cc.director.getScheduler().setTimeScale(1);
          }, 1);
          this.settingsDialog.show();
        }
      };
      GameHud.prototype.showMartShelvesDialog = function(type, goodsList) {
        if (!this.martShelvesDialog) return;
        if (this.martShelvesDialog.isShow) this.martShelvesDialog.dismiss(); else {
          this.martShelvesDialog.updateUI(type, goodsList);
          this.martShelvesDialog.show();
        }
      };
      __decorate([ property(HealthBar_1.default) ], GameHud.prototype, "healthBar", void 0);
      __decorate([ property(HealthBar_1.default) ], GameHud.prototype, "dreamBar", void 0);
      __decorate([ property(HealthBar_1.default) ], GameHud.prototype, "bossHealthBar", void 0);
      __decorate([ property(PlayerInfoDialog_1.default) ], GameHud.prototype, "playerInfoDialog", void 0);
      __decorate([ property(cc.Label) ], GameHud.prototype, "level", void 0);
      __decorate([ property(cc.Label) ], GameHud.prototype, "clock", void 0);
      __decorate([ property(cc.Node) ], GameHud.prototype, "damageCorner", void 0);
      __decorate([ property(cc.Node) ], GameHud.prototype, "pasueButton", void 0);
      __decorate([ property(cc.Node) ], GameHud.prototype, "zoomButton", void 0);
      __decorate([ property(SettingsDialog_1.default) ], GameHud.prototype, "settingsDialog", void 0);
      __decorate([ property(MartShelvesDialog_1.default) ], GameHud.prototype, "martShelvesDialog", void 0);
      __decorate([ property(cc.Label) ], GameHud.prototype, "completeLabel", void 0);
      __decorate([ property(cc.Label) ], GameHud.prototype, "oilGoldLabel", void 0);
      __decorate([ property(InventoryDialog_1.default) ], GameHud.prototype, "inventoryDialog", void 0);
      GameHud = __decorate([ ccclass ], GameHud);
      return GameHud;
    }(cc.Component);
    exports.default = GameHud;
    cc._RF.pop();
  }, {
    "../Data/PlayerData": "PlayerData",
    "../EventHelper": "EventHelper",
    "../HealthBar": "HealthBar",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./PlayerInfoDialog": "PlayerInfoDialog",
    "./dialog/InventoryDialog": "InventoryDialog",
    "./dialog/MartShelvesDialog": "MartShelvesDialog",
    "./dialog/SettingsDialog": "SettingsDialog"
  } ],
  GameOver: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0e28bkl25dNTqUQmquXpqGi", "GameOver");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var Random_1 = require("./Utils/Random");
    var ExitData_1 = require("./Data/ExitData");
    var LocalStorage_1 = require("./Utils/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameOver = function(_super) {
      __extends(GameOver, _super);
      function GameOver() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.info = null;
        _this.infoIcon = null;
        _this.level = null;
        _this.clock = null;
        _this.tips = null;
        _this.tipsStr = "";
        return _this;
      }
      GameOver_1 = GameOver;
      GameOver.prototype.start = function() {
        var _this = this;
        var ach = LocalStorage_1.default.getAchievementData();
        this.clock && (this.clock.string = "\u7528\u65f6\uff1a" + Logic_1.default.time);
        this.level && (this.level.string = "");
        var dieinfo = "\u6b7b\u4e8e\u975e\u547d";
        Logic_1.default.dieFrom.name.length > 0 && (dieinfo = "\u7b2c" + ach.playerLifes + "\u6b21\u6b7b\u4ea1\uff0c\u5728 " + Logic_1.default.worldLoader.getCurrentLevelData().name + " \u88ab " + Logic_1.default.dieFrom.name + " \u51fb\u5012");
        if (this.infoIcon && Logic_1.default.dieFrom.res.length > 0) {
          this.infoIcon.spriteFrame = Logic_1.default.spriteFrameRes(Logic_1.default.dieFrom.res);
          this.infoIcon.node.width = 64;
          this.infoIcon.node.height = 64 / this.infoIcon.spriteFrame.getOriginalSize().width * this.infoIcon.spriteFrame.getOriginalSize().height;
        }
        this.info && (this.info.string = dieinfo);
        if (this.tips) {
          var count_1 = 0;
          this.tips.string = "";
          var str_1 = GameOver_1.TIPS[Random_1.default.getRandomNum(0, GameOver_1.TIPS.length - 1)];
          this.schedule(function() {
            count_1++;
            count_1 > str_1.length && (count_1 = str_1.length);
            _this.tips.string = str_1.substr(0, count_1);
          }, .05, str_1.length, .2);
        }
      };
      GameOver.prototype.retry = function() {
        Logic_1.default.resetData();
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.loadingNextLevel(ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level));
      };
      GameOver.prototype.home = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.loadScene("start");
      };
      GameOver.prototype.resetWorld = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.loadScene("start");
        Logic_1.default.profileManager.clearData();
      };
      var GameOver_1;
      GameOver.TIPS = [ "\u5f53\u4f60\u51dd\u89c6\u6df1\u6e0a\u7684\u65f6\u5019,\u6df1\u6e0a\u4e5f\u5728\u51dd\u89c6\u7740\u4f60", "\u4e0a\u9501\u7684\u95e8\u9700\u8981\u4ece\u53e6\u4e00\u9762\u624d\u80fd\u6253\u5f00", "\u68a6\u9192\u53ef\u4ee5\u8eba\u5728\u5e8a\u4e0a\u56de\u5230\u4e0a\u4e00\u4e2a\u7fe0\u91d1\u70b9", "\u76fe\u724c\u53ef\u4ee5\u683c\u6321\u5b50\u5f39\uff0c\u751a\u81f3\u5f39\u53cd\u5bf9\u9762", "\u7fe0\u6e56\u7684\u6c34\u5f88\u51b0\u51b7", "\u5408\u7406\u4f7f\u7528\u7269\u54c1\u6765\u589e\u5f3a\u81ea\u5df1", "\u4f60\u6c89\u6c89\u5730\u7761\u7740\u4e86", "\u7535\u773c\u4f1a\u9ebb\u75f9\u4f60\u7684\u601d\u7ef4", "\u7fe0\u91d1\u70b9\u662f\u7528\u6765\u81ea\u52a8\u4fdd\u5b58\u8fdb\u5ea6\u7684", "\u6fc0\u5149\u6709\u4e00\u4e2a\u77ed\u6682\u7684\u7784\u51c6\u671f\uff0c\u6293\u4f4f\u673a\u4f1a\u518d\u8865\u4e00\u5200", "\u51b0\u9b54\u7684\u523a\u4f1a\u963b\u6321\u4f60\u7684\u884c\u52a8", "\u6b66\u58eb\u5200\u53ef\u4ee5\u53cd\u51fb\u5b50\u5f39", "\u4f60\u7684\u5934\u76d6\u9aa8\u88ab\u505a\u6210\u4e86\u7897", "\u5e7d\u5149\u5728\u547c\u5524\u7740\u4f60" ];
      __decorate([ property(cc.Label) ], GameOver.prototype, "info", void 0);
      __decorate([ property(cc.Sprite) ], GameOver.prototype, "infoIcon", void 0);
      __decorate([ property(cc.Label) ], GameOver.prototype, "level", void 0);
      __decorate([ property(cc.Label) ], GameOver.prototype, "clock", void 0);
      __decorate([ property(cc.Label) ], GameOver.prototype, "tips", void 0);
      GameOver = GameOver_1 = __decorate([ ccclass ], GameOver);
      return GameOver;
    }(cc.Component);
    exports.default = GameOver;
    cc._RF.pop();
  }, {
    "./Data/ExitData": "ExitData",
    "./Logic": "Logic",
    "./Utils/AudioPlayer": "AudioPlayer",
    "./Utils/LocalStorage": "LocalStorage",
    "./Utils/Random": "Random"
  } ],
  Game: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c30ffLX6hVIjoNslRhRCM7w", "Game");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("./Dungeon");
    var Logic_1 = require("./Logic");
    var GameHud_1 = require("./UI/GameHud");
    var LocalStorage_1 = require("./Utils/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Game = function(_super) {
      __extends(Game, _super);
      function Game() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Game.prototype.onLoad = function() {
        Logic_1.default.settings.showShadow = LocalStorage_1.default.isSwitchOpen(LocalStorage_1.default.KEY_SWITCH_SHOW_SHADOW);
        Logic_1.default.settings.showGamepad = LocalStorage_1.default.isSwitchOpen(LocalStorage_1.default.KEY_SWITCH_SHOW_GAMEPAD);
        Logic_1.default.settings.showEquipDialog = LocalStorage_1.default.isSwitchOpen(LocalStorage_1.default.KEY_SWITCH_SHOW_EQUIPDIALOG);
        cc.director.getScheduler().setTimeScale(1);
      };
      Object.defineProperty(Game.prototype, "Dungeon", {
        get: function() {
          this.dungeonBase || (this.dungeonBase = this.getComponentInChildren(Dungeon_1.default));
          return this.dungeonBase;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Game.prototype, "hud", {
        get: function() {
          this.hudBase || (this.hudBase = this.getComponentInChildren(GameHud_1.default));
          return this.hudBase;
        },
        enumerable: false,
        configurable: true
      });
      Game = __decorate([ ccclass ], Game);
      return Game;
    }(cc.Component);
    exports.default = Game;
    cc._RF.pop();
  }, {
    "./Dungeon": "Dungeon",
    "./Logic": "Logic",
    "./UI/GameHud": "GameHud",
    "./Utils/LocalStorage": "LocalStorage"
  } ],
  GoodsData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9eba4cjM5REaKZZ0yKseRh9", "GoodsData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseData_1 = require("./BaseData");
    var ItemData_1 = require("./ItemData");
    var GoodsData = function(_super) {
      __extends(GoodsData, _super);
      function GoodsData() {
        var _this = _super.call(this) || this;
        _this.uuid = "";
        _this.count = 10;
        _this.item = new ItemData_1.default();
        return _this;
      }
      GoodsData.prototype.valueCopy = function(data) {
        this.uuid = data.uuid ? data.uuid : "";
        this.count = data.count ? data.count : this.count;
        this.item.valueCopy(data.item);
      };
      GoodsData.prototype.clone = function() {
        var e = new GoodsData();
        e.uuid = this.uuid;
        e.count = this.count;
        e.item = this.item.clone();
        return e;
      };
      return GoodsData;
    }(BaseData_1.default);
    exports.default = GoodsData;
    cc._RF.pop();
  }, {
    "./BaseData": "BaseData",
    "./ItemData": "ItemData"
  } ],
  Goods: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1cb63YYvfBC97O0f5MEeafg", "Goods");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GoodsData_1 = require("../Data/GoodsData");
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Goods = function(_super) {
      __extends(Goods, _super);
      function Goods() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.data = new GoodsData_1.default();
        return _this;
      }
      Goods.prototype.onLoad = function() {
        var _this = this;
        this.sprite1 = this.node.getChildByName("sprite1").getComponent(cc.Sprite);
        this.sprite2 = this.node.getChildByName("sprite2").getComponent(cc.Sprite);
        this.sprite3 = this.node.getChildByName("sprite3").getComponent(cc.Sprite);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_MART_SHELVES_DIALOG_PAY, {
            data: _this.data
          });
          AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        });
      };
      Goods.prototype.init = function(data) {
        this.data = data;
        this.updateSprite();
      };
      Goods.prototype.updateSprite = function() {
        if (!this.sprite1) {
          this.sprite1 = this.node.getChildByName("sprite1").getComponent(cc.Sprite);
          this.sprite2 = this.node.getChildByName("sprite2").getComponent(cc.Sprite);
          this.sprite3 = this.node.getChildByName("sprite3").getComponent(cc.Sprite);
        }
        this.sprite1.node.opacity = 255;
        this.sprite2.node.opacity = 255;
        this.sprite3.node.opacity = 255;
        this.sprite1.spriteFrame = Logic_1.default.spriteFrameRes(this.data.item.resName);
        this.sprite2.spriteFrame = Logic_1.default.spriteFrameRes(this.data.item.resName);
        this.sprite3.spriteFrame = Logic_1.default.spriteFrameRes(this.data.item.resName);
        this.label.string = this.data.item.nameCn + "\n$:" + this.data.item.price;
        if (2 == this.data.count) this.sprite1.node.opacity = 0; else if (1 == this.data.count) {
          this.sprite2.node.opacity = 0;
          this.sprite1.node.opacity = 0;
        } else if (this.data.count <= 0) {
          this.sprite1.node.opacity = 0;
          this.sprite2.node.opacity = 0;
          this.sprite3.node.opacity = 0;
        }
      };
      Goods.prototype.click = function() {};
      __decorate([ property(cc.Label) ], Goods.prototype, "label", void 0);
      Goods = __decorate([ ccclass ], Goods);
      return Goods;
    }(cc.Component);
    exports.default = Goods;
    cc._RF.pop();
  }, {
    "../Data/GoodsData": "GoodsData",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer"
  } ],
  GroundOilGoldData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "06da22NYo5DOLe6uR2c2v0D", "GroundOilGoldData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GroundOilGoldData = function() {
      function GroundOilGoldData() {
        this.x = 0;
        this.y = 0;
        this.chapter = 0;
        this.level = 0;
        this.value = 0;
      }
      GroundOilGoldData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.x = data.x ? data.x : 0;
        this.y = data.y ? data.y : 0;
        this.chapter = data.chapter ? data.chapter : 0;
        this.level = data.level ? data.level : 0;
        this.value = data.value ? data.value : 0;
      };
      GroundOilGoldData.prototype.clone = function() {
        var data = new GroundOilGoldData();
        data.x = this.x;
        data.y = this.y;
        data.chapter = this.chapter;
        data.level = this.level;
        data.value = this.value;
        return data;
      };
      return GroundOilGoldData;
    }();
    exports.default = GroundOilGoldData;
    cc._RF.pop();
  }, {} ],
  HealthBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4298eVZsIJFhKykTJYXRBP0", "HealthBar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HealthBar = function(_super) {
      __extends(HealthBar, _super);
      function HealthBar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.backbar = null;
        _this.label = null;
        _this.isPlayer = false;
        _this.timeDelay = 0;
        return _this;
      }
      HealthBar_1 = HealthBar;
      HealthBar.prototype.onLoad = function() {
        this.progressBar = this.getComponent(cc.ProgressBar);
        this.progressBar.progress = 1;
      };
      HealthBar.prototype.start = function() {};
      HealthBar.prototype.refreshHealth = function(currentHealth, maxHealth) {
        if (this.progressBar) {
          if (this.isPlayer) {
            this.progressBar.totalLength = maxHealth * HealthBar_1.ICON_SIZE;
            this.node.width = this.progressBar.totalLength;
          }
          this.progressBar.progress = currentHealth / maxHealth;
          this.label && (this.label.string = parseFloat(currentHealth.toFixed(1)) + "/" + maxHealth);
        }
      };
      HealthBar.prototype.shake = function() {
        cc.tween(this.node).to(.05, {
          scale: 1.05
        }).to(.05, {
          scale: .95
        }).to(.1, {
          scale: 1.05
        }).to(.05, {
          scale: 1
        }).start();
      };
      HealthBar.prototype.update = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > .016 && (this.timeDelay = 0);
        this.backbar.width = this.lerp(this.backbar.width, this.progressBar.barSprite.node.width, 5 * dt);
      };
      HealthBar.prototype.lerp = function(a, b, r) {
        return a + (b - a) * r;
      };
      var HealthBar_1;
      HealthBar.ICON_SIZE = 17;
      __decorate([ property(cc.Node) ], HealthBar.prototype, "backbar", void 0);
      __decorate([ property(cc.Label) ], HealthBar.prototype, "label", void 0);
      __decorate([ property ], HealthBar.prototype, "isPlayer", void 0);
      HealthBar = HealthBar_1 = __decorate([ ccclass ], HealthBar);
      return HealthBar;
    }(cc.Component);
    exports.default = HealthBar;
    cc._RF.pop();
  }, {} ],
  HitBuilding: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "94f4daN5WxHhp3nfQbY7apH", "HitBuilding");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Building_1 = require("./Building");
    var Logic_1 = require("../Logic");
    var Dungeon_1 = require("../Dungeon");
    var IndexZ_1 = require("../Utils/IndexZ");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HitBuilding = function(_super) {
      __extends(HitBuilding, _super);
      function HitBuilding() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.resName = "";
        _this.itemNames = [];
        _this.equipmentNames = [];
        _this.isCustom = false;
        _this.colliderExtrude = 0;
        return _this;
      }
      HitBuilding.prototype.init = function(dungeon, resName, itemNames, equipmentNames, maxHealth, currentHealth, scale, isCustom, colliderExtrude) {
        this.dungeon = dungeon;
        this.resName = resName;
        this.itemNames = itemNames;
        this.equipmentNames = equipmentNames;
        this.data.maxHealth = maxHealth;
        this.data.currentHealth = currentHealth;
        this.colliderExtrude = colliderExtrude;
        this.isCustom = isCustom;
        this.sprite || (this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite));
        this.sprite.node.scale = scale;
        this.changeRes(resName, "" + this.data.currentHealth);
        if (this.data.currentHealth <= 0) {
          this.getComponent(cc.PhysicsBoxCollider).sensor = true;
          this.getComponent(cc.PhysicsBoxCollider).apply();
        }
      };
      HitBuilding.prototype.hitLight = function(isHit) {
        this.mat || (this.mat = this.node.getChildByName("sprite").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
      };
      HitBuilding.prototype.setDefaultPos = function(defaultPos) {
        this.data.defaultPos = defaultPos;
        this.node.position = Dungeon_1.default.getPosInMap(defaultPos);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      HitBuilding.prototype.takeDamage = function(damage) {
        var _this = this;
        if (this.data.currentHealth <= 0 || this.data.currentHealth >= 9999) return false;
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        this.data.currentHealth -= 1;
        this.changeRes(this.resName, "" + this.data.currentHealth);
        this.hitLight(true);
        this.scheduleOnce(function() {
          _this.hitLight(false);
        }, .15);
        if (this.data.currentHealth <= 0) {
          for (var _i = 0, _a = this.itemNames; _i < _a.length; _i++) {
            var name = _a[_i];
            name && name.length > 0 && this.dungeon.addItem(this.node.position.clone(), name);
          }
          for (var _b = 0, _c = this.equipmentNames; _b < _c.length; _b++) {
            var name = _c[_b];
            name && name.length > 0 && this.dungeon.addEquipment(name, Dungeon_1.default.getPosInMap(this.data.defaultPos), null, 1);
          }
          this.getComponent(cc.PhysicsBoxCollider).sensor = true;
          this.getComponent(cc.PhysicsBoxCollider).apply();
        }
        var saveHit = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
        saveHit && (saveHit.currentHealth = this.data.currentHealth);
        return true;
      };
      HitBuilding.prototype.changeRes = function(resName, suffix) {
        this.sprite || (this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite));
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        var width = (spriteFrame.getOriginalSize().width - this.colliderExtrude) * this.sprite.node.scale;
        var height = (spriteFrame.getOriginalSize().height - this.colliderExtrude) * this.sprite.node.scale;
        suffix && Logic_1.default.spriteFrameRes(resName + suffix) && (spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix));
        if (!spriteFrame) return;
        this.sprite.node.opacity = 255;
        this.sprite.node.width = spriteFrame.getOriginalSize().width;
        this.sprite.node.height = spriteFrame.getOriginalSize().height;
        if (this.isCustom) return;
        var size = cc.size(width, height);
        var collider = this.getComponent(cc.BoxCollider);
        var pcollider = this.getComponent(cc.PhysicsBoxCollider);
        collider.size = size.clone();
        pcollider.size = size.clone();
        pcollider.apply();
        this.sprite.spriteFrame = spriteFrame;
      };
      HitBuilding = __decorate([ ccclass ], HitBuilding);
      return HitBuilding;
    }(Building_1.default);
    exports.default = HitBuilding;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  IceDemonThron: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "24e5dr3bslGlZZLL6MjYCjj", "IceDemonThron");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var FromData_1 = require("../Data/FromData");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var IceDemonThron = function(_super) {
      __extends(IceDemonThron, _super);
      function IceDemonThron() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isUp = false;
        _this.isAuto = true;
        _this.isUping = false;
        return _this;
      }
      IceDemonThron.prototype.onLoad = function() {
        this.isUp = false;
        var mat = this.node.getChildByName("thron").getComponent(cc.Sprite).getMaterial(0);
        mat.setProperty("addColor", cc.color(194, 255, 255));
      };
      IceDemonThron.prototype.fall = function() {
        this.anim = this.getComponent(cc.Animation);
        this.anim.play();
        this.isUping = true;
      };
      IceDemonThron.prototype.ThronUp = function() {
        var _this = this;
        this.isUp = true;
        this.scheduleOnce(function() {
          _this.isUp = false;
        }, .1);
        this.scheduleOnce(function() {
          _this.node && _this.node.destroy();
        }, 2);
      };
      IceDemonThron.prototype.start = function() {};
      IceDemonThron.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        !target || this.isAuto || this.isUping || this.fall();
      };
      IceDemonThron.prototype.onCollisionStay = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isUp && this.isValid) {
          this.isUp = false;
          var from = FromData_1.default.getClone("\u51b0\u523a", "bossicethron02");
          target.takeDamage(new DamageData_1.default(3), from) && target.addStatus(StatusManager_1.default.FROZEN, from);
        }
      };
      IceDemonThron = __decorate([ ccclass ], IceDemonThron);
      return IceDemonThron;
    }(cc.Component);
    exports.default = IceDemonThron;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/ActorUtils": "ActorUtils"
  } ],
  IceDemon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4043fv41gFB1o18Orugu9B9", "IceDemon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var EventHelper_1 = require("../EventHelper");
    var Shooter_1 = require("../Shooter");
    var DamageData_1 = require("../Data/DamageData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var Boss_1 = require("./Boss");
    var NextStep_1 = require("../Utils/NextStep");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var AreaOfEffectData_1 = require("../Data/AreaOfEffectData");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var MagicIce_1 = require("../Talent/MagicIce");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var IceDemon = function(_super) {
      __extends(IceDemon, _super);
      function IceDemon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isFaceRight = true;
        _this.isMoving = false;
        _this.dashSkill = new NextStep_1.default();
        _this.thronSkill = new NextStep_1.default();
        _this.defenceSkill = new NextStep_1.default();
        _this.meleeSkill = new NextStep_1.default();
        _this.groundThron = null;
        _this.selfThron = null;
        _this.magicice = null;
        _this.actionTimeDelay = 0;
        return _this;
      }
      IceDemon.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter = this.node.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.shooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "bossicepart01"));
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
      };
      IceDemon.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      IceDemon.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        var isHalf = this.data.currentHealth < this.data.Common.maxHealth / 2;
        this.defence(isHalf);
        if (this.defenceSkill.IsExcuting) AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_HIT); else {
          var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
          AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        }
        return true;
      };
      IceDemon.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        cc.tween(this.node).to(3, {
          opacity: 0
        }).start();
        this.sc.isDied = true;
        this.anim.play("IceDemonDefence");
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      IceDemon.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.node.position = Dungeon_1.default.fixOuterMap(this.node.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.node.position);
        this.changeZIndex();
        var pos = this.getMovePos();
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        var isHalf = this.data.currentHealth < this.data.Common.maxHealth / 2;
        playerDis < 100 && (this.rigidbody.linearVelocity = cc.Vec2.ZERO);
        !isHalf || this.magicice.isShow || this.defenceSkill.IsInCooling || this.magicice.showIce();
        !(playerDis < 200) || this.defenceSkill.IsExcuting || this.meleeSkill.IsExcuting || this.thronSkill.IsExcuting || this.dashSkill.IsExcuting || this.attack();
        this.meleeSkill.IsExcuting || this.defenceSkill.IsExcuting || this.thronSkill.IsExcuting || this.dash();
        this.meleeSkill.IsExcuting || this.defenceSkill.IsExcuting || this.dashSkill.IsExcuting || this.thronGround(isHalf);
        if (!pos.equals(cc.Vec3.ZERO) && !this.meleeSkill.IsExcuting && !this.defenceSkill.IsExcuting && !this.thronSkill.IsExcuting && !this.dashSkill.IsExcuting && playerDis > 60) {
          pos = pos.normalizeSelf();
          this.move(pos, 500);
        }
      };
      IceDemon.prototype.getMovePos = function() {
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos);
        pos.y += 32;
        pos = pos.sub(this.node.position);
        var h = pos.x;
        this.isFaceRight = h > 0;
        return pos;
      };
      IceDemon.prototype.thronGround = function(isHalf) {
        var _this = this;
        this.thronSkill.next(function() {
          _this.thronSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("IceDemonThron");
          var count = 1;
          _this.scheduleOnce(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_THRON);
          }, 1);
          _this.scheduleOnce(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_THRON);
          }, 2);
          _this.schedule(function() {
            var p = _this.pos.clone();
            var ps = [ cc.v3(p.x, p.y + count), cc.v3(p.x, p.y - count), cc.v3(p.x + count, p.y + count), cc.v3(p.x + count, p.y - count), cc.v3(p.x + count, p.y), cc.v3(p.x - count, p.y), cc.v3(p.x - count, p.y + count), cc.v3(p.x - count, p.y - count) ];
            for (var i = 0; i < ps.length; i++) {
              var d = new DamageData_1.default();
              d.physicalDamage = 3;
              _this.shooter.dungeon = _this.dungeon;
              _this.shooter.fireAoe(_this.selfThron, new AreaOfEffectData_1.default().init(0, 2, .4, 4, IndexZ_1.default.getActorZIndex(Dungeon_1.default.getPosInMap(ps[i])), true, true, true, false, true, d, FromData_1.default.getClone("\u51b0\u523a", "bossicethron02"), [ StatusManager_1.default.FROZEN ]), Dungeon_1.default.getPosInMap(ps[i]).subSelf(_this.getCenterPosition()), 0, null, true);
            }
            count++;
          }, .2, isHalf ? 7 : 5, 1);
          isHalf && _this.scheduleOnce(function() {
            var p = _this.pos.clone();
            var ps = [ cc.v3(p.x + 2, p.y + 1), cc.v3(p.x + 2, p.y - 1), cc.v3(p.x - 2, p.y + 1), cc.v3(p.x - 2, p.y - 1), cc.v3(p.x + 4, p.y + 2), cc.v3(p.x + 4, p.y - 2), cc.v3(p.x - 4, p.y + 2), cc.v3(p.x - 4, p.y - 2), cc.v3(p.x + 5, p.y + 3), cc.v3(p.x + 5, p.y - 3), cc.v3(p.x - 5, p.y + 3), cc.v3(p.x - 5, p.y - 3), cc.v3(p.x + 6, p.y + 2), cc.v3(p.x + 6, p.y - 2), cc.v3(p.x - 6, p.y + 2), cc.v3(p.x - 6, p.y - 2), cc.v3(p.x + 6, p.y + 4), cc.v3(p.x + 6, p.y - 4), cc.v3(p.x - 6, p.y + 4), cc.v3(p.x - 6, p.y - 4), cc.v3(p.x + 1, p.y + 2), cc.v3(p.x + 1, p.y - 2), cc.v3(p.x - 1, p.y + 2), cc.v3(p.x - 1, p.y - 2), cc.v3(p.x + 2, p.y + 4), cc.v3(p.x + 2, p.y - 4), cc.v3(p.x - 2, p.y + 4), cc.v3(p.x - 2, p.y - 4), cc.v3(p.x + 3, p.y + 5), cc.v3(p.x + 3, p.y - 5), cc.v3(p.x - 3, p.y + 5), cc.v3(p.x - 3, p.y - 5), cc.v3(p.x + 2, p.y + 6), cc.v3(p.x + 2, p.y - 6), cc.v3(p.x - 2, p.y + 6), cc.v3(p.x - 2, p.y - 6), cc.v3(p.x + 4, p.y + 6), cc.v3(p.x + 4, p.y - 6), cc.v3(p.x - 4, p.y + 6), cc.v3(p.x - 4, p.y - 6) ];
            for (var i = 0; i < ps.length; i++) {
              var d = new DamageData_1.default();
              d.physicalDamage = 3;
              _this.shooter.dungeon = _this.dungeon;
              _this.shooter.fireAoe(_this.selfThron, new AreaOfEffectData_1.default().init(0, 2, .4, 4, IndexZ_1.default.getActorZIndex(Dungeon_1.default.getPosInMap(ps[i])), true, true, true, false, true, d, FromData_1.default.getClone("\u51b0\u523a", "bossicethron02"), [ StatusManager_1.default.FROZEN ]), Dungeon_1.default.getPosInMap(ps[i]).subSelf(_this.getCenterPosition()), 0, null, true);
            }
          }, 1.5);
          _this.scheduleOnce(function() {
            _this.thronSkill.IsExcuting = false;
          }, 4);
        }, 15, true);
      };
      IceDemon.prototype.thronSelf = function() {
        this.scheduleOnce(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_ICETHRON);
        }, 1);
        var angles = [ 0, 45, 90, 135, 180, 225, 270, 315 ];
        var disdance = 40;
        var posRight = [ cc.v3(0, disdance), cc.v3(-disdance / 2, disdance / 2), cc.v3(-disdance, 0), cc.v3(-disdance / 2, -disdance / 2), cc.v3(0, -disdance), cc.v3(disdance / 2, -disdance / 2), cc.v3(disdance, 0), cc.v3(disdance / 2, disdance / 2) ];
        var posLeft = [ cc.v3(0, -disdance), cc.v3(-disdance / 2, -disdance / 2), cc.v3(-disdance, 0), cc.v3(-disdance / 2, disdance / 2), cc.v3(0, disdance), cc.v3(disdance / 2, disdance / 2), cc.v3(disdance, 0), cc.v3(disdance / 2, -disdance / 2) ];
        var d = new DamageData_1.default();
        d.magicDamage = 1;
        for (var i = 0; i < angles.length; i++) {
          this.shooter.dungeon = this.dungeon;
          this.shooter.fireAoe(this.selfThron, new AreaOfEffectData_1.default().init(0, 2, .4, 3, IndexZ_1.default.OVERHEAD, true, true, true, false, true, d, FromData_1.default.getClone(this.actorName(), "bossicepart01"), [ StatusManager_1.default.FROZEN ]), cc.v3(this.isFaceRight ? posRight[i] : posLeft[i]), angles[i], null, true);
        }
      };
      IceDemon.prototype.attack = function() {
        var _this = this;
        this.meleeSkill.next(function() {
          _this.meleeSkill.IsExcuting = true;
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.MELEE
            }
          });
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("IceDemonAttack001");
          _this.scheduleOnce(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.BOOS_ICEDEMON_ATTACK);
            var pos = _this.getMovePos();
            pos.equals(cc.Vec3.ZERO) || (pos = pos.normalizeSelf());
            var h = pos.x;
            var v = pos.y;
            var movement = cc.v2(h, v);
            movement = movement.mul(1500);
            _this.rigidbody.linearVelocity = movement;
          }, 1);
          _this.scheduleOnce(function() {
            _this.meleeSkill.IsExcuting = false;
          }, 2);
        }, 3, true);
      };
      IceDemon.prototype.dash = function() {
        var _this = this;
        this.dashSkill.next(function() {
          _this.dashSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.scheduleOnce(function() {
            AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_DASH);
          }, 2.5);
          _this.anim.play("IceDemonDash");
          _this.scheduleOnce(function() {
            var pos = _this.getMovePos();
            pos.equals(cc.Vec3.ZERO) || (pos = pos.normalizeSelf());
            var h = pos.x;
            var v = pos.y;
            var movement = cc.v2(h, v);
            movement = movement.mul(2500);
            _this.rigidbody.linearVelocity = movement;
          }, 2.4);
          _this.scheduleOnce(function() {
            _this.dashSkill.IsExcuting = false;
          }, 3);
        }, 8, true);
      };
      IceDemon.prototype.defence = function(isHalf) {
        var _this = this;
        this.defenceSkill.next(function() {
          _this.defenceSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("IceDemonDefence");
          _this.data.Common.defence = 9999;
          _this.data.Common.magicDefence = 9999;
          AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_DEFEND);
          _this.scheduleOnce(function() {
            _this.defenceSkill.IsExcuting = false;
            _this.data.Common.defence = 0;
            _this.data.Common.magicDefence = 0;
          }, 3);
          if (isHalf) {
            _this.magicice.isShow && _this.magicice.breakIce();
            _this.thronSelf();
          }
        }, 6, true);
      };
      IceDemon.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle);
      };
      IceDemon.prototype.showBoss = function() {
        this.sc.isShow = true;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      IceDemon.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      IceDemon.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.sc.isDied && (this.rigidbody.linearVelocity = cc.Vec2.ZERO);
        this.node.scaleX = this.isFaceRight ? 1 : -1;
      };
      IceDemon.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.node.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.isMoving ? this.anim.getAnimationState("IceDemonWalk").isPlaying || this.anim.playAdditive("IceDemonWalk") : this.anim.getAnimationState("IceDemonWalk").isPlaying && this.anim.play("IceDemonIdle");
        this.changeZIndex();
      };
      IceDemon.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && (this.meleeSkill.IsExcuting || this.dashSkill.IsExcuting) && !this.sc.isDied) {
          var d = new DamageData_1.default();
          d.physicalDamage = 3;
          var from = FromData_1.default.getClone(this.actorName(), "bossicepart01");
          target.takeDamage(d, from, this) && target.addStatus(StatusManager_1.default.FROZEN, from);
        }
      };
      IceDemon.prototype.actorName = function() {
        return "\u51b0\u9b54";
      };
      __decorate([ property(cc.Prefab) ], IceDemon.prototype, "groundThron", void 0);
      __decorate([ property(cc.Prefab) ], IceDemon.prototype, "selfThron", void 0);
      __decorate([ property(MagicIce_1.default) ], IceDemon.prototype, "magicice", void 0);
      IceDemon = __decorate([ ccclass ], IceDemon);
      return IceDemon;
    }(Boss_1.default);
    exports.default = IceDemon;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/AreaOfEffectData": "AreaOfEffectData",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Shooter": "Shooter",
    "../Talent/MagicIce": "MagicIce",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "../Utils/NextStep": "NextStep",
    "./Boss": "Boss"
  } ],
  IceThron: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "732e0QfOMxFu5eXTn+nHJEI", "IceThron");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var FromData_1 = require("../Data/FromData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var IceThron = function(_super) {
      __extends(IceThron, _super);
      function IceThron() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hasTargetMap = {};
        _this.isAttacking = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      IceThron.prototype.onLoad = function() {};
      IceThron.prototype.start = function() {};
      IceThron.prototype.AnimFinish = function() {
        var _this = this;
        this.isAttacking = false;
        this.scheduleOnce(function() {
          _this.node && _this.node.destroy();
        }, 1);
      };
      IceThron.prototype.show = function(player, angle, distance, scale) {
        this.player = player;
        this.node.active = true;
        this.node.parent = player.node.parent;
        this.node.setPosition(this.getPlayerPosition(player, angle, distance));
        this.node.scale = scale;
        angle > 90 && angle < 270 && (this.node.scaleX = -this.node.scaleX);
        this.isAttacking = true;
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      IceThron.prototype.getPlayerPosition = function(player, angleOffset, distance) {
        var hv = player.Hv.clone();
        var pos = cc.v3(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180)).normalizeSelf();
        return player.node.position.clone().addSelf(pos.mulSelf(distance));
      };
      IceThron.prototype.onCollisionStay = function(other, self) {
        if (!self.size.equals(cc.Size.ZERO) && this.isAttacking) if (this.hasTargetMap[other.node.uuid] && this.hasTargetMap[other.node.uuid] > 0) this.hasTargetMap[other.node.uuid]++; else {
          this.hasTargetMap[other.node.uuid] = 1;
          var target = ActorUtils_1.default.getEnemyCollisionTarget(other, true);
          target && this.attacking(other.node);
        }
      };
      IceThron.prototype.attacking = function(attackTarget) {
        if (!attackTarget) return;
        var damage = new DamageData_1.default();
        var status = StatusManager_1.default.FROZEN;
        var d = 4;
        damage.magicDamage = d;
        var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget, true);
        if (target && !target.sc.isDied) {
          target.takeDamage(damage);
          target.addStatus(status, new FromData_1.default());
        }
      };
      IceThron.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .5) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      IceThron.prototype.update = function(dt) {
        this.isCheckTimeDelay(dt) && (this.hasTargetMap = {});
      };
      IceThron = __decorate([ ccclass ], IceThron);
      return IceThron;
    }(cc.Component);
    exports.default = IceThron;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/IndexZ": "IndexZ"
  } ],
  IndexZ: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee2b0v0Hy5Er7bVWcKf3jFS", "IndexZ");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IndexZ = function() {
      function IndexZ() {}
      IndexZ.getActorZIndex = function(pos) {
        var index = IndexZ.ACTOR + 3e3 - pos.y;
        return index;
      };
      IndexZ.BACKGROUND = 100;
      IndexZ.BACKGROUNDFLOOR = 300;
      IndexZ.DOORWALLBEHIND = 400;
      IndexZ.BASE = 500;
      IndexZ.FLOOR = 600;
      IndexZ.WATER = 610;
      IndexZ.KRAKENBODY = 620;
      IndexZ.DARKNESS = 650;
      IndexZ.WALL = 700;
      IndexZ.WALLCORNER = 800;
      IndexZ.WALLINTERNAL = 900;
      IndexZ.ACTOR = 2e3;
      IndexZ.OVERHEAD = 6e3;
      IndexZ.ROOF = 6100;
      IndexZ.SHADOW = 6200;
      IndexZ.FOG = 6500;
      IndexZ.UI = 7e3;
      return IndexZ;
    }();
    exports.default = IndexZ;
    cc._RF.pop();
  }, {} ],
  InteractBuilding: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7b8abAQqgxLbKCSpiTgLOQk", "InteractBuilding");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var EventHelper_1 = require("../EventHelper");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var Item_1 = require("../Item/Item");
    var IndexZ_1 = require("../Utils/IndexZ");
    var DamageData_1 = require("../Data/DamageData");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var Boss_1 = require("../Boss/Boss");
    var AvatarData_1 = require("../Data/AvatarData");
    var CommonData_1 = require("../Data/CommonData");
    var FromData_1 = require("../Data/FromData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var NonPlayer_1 = require("../NonPlayer");
    var Box_1 = require("./Box");
    var HitBuilding_1 = require("./HitBuilding");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var InteractBuilding = function(_super) {
      __extends(InteractBuilding, _super);
      function InteractBuilding() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.decorateType = 0;
        _this.resName = "decorate000";
        _this.isTaken = false;
        _this.isAttacking = false;
        _this.isThrowing = false;
        _this.isLift = false;
        _this.isAniming = false;
        _this.hasTargetMap = {};
        _this.saveTimeDelay = 0;
        return _this;
      }
      InteractBuilding.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.shadow = this.node.getChildByName("shadow");
        this.rigidBody = this.getComponent(cc.RigidBody);
      };
      InteractBuilding.prototype.start = function() {};
      InteractBuilding.prototype.init = function(isInteract, decorateType) {
        this.decorateType = decorateType;
        this.data.interact = isInteract ? 1 : 0;
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          this.resName = "decorate000" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER01:
          this.resName = "decorate010" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER02:
          this.resName = "decorate020" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER03:
          this.resName = "decorate030" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          this.resName = "decorate040" + this.decorateType;
          break;

         case Logic_1.default.CHAPTER099:
          this.resName = "decorate000" + this.decorateType;
        }
        this.updateCollider();
        this.changeRes(this.resName);
      };
      InteractBuilding.prototype.updateCollider = function() {
        var spriteFrame = Logic_1.default.spriteFrameRes(this.resName);
        var width = spriteFrame.getOriginalSize().width * this.sprite.node.scale;
        var height = spriteFrame.getOriginalSize().height * this.sprite.node.scale / 4;
        var offset = 5;
        var physicCollider = this.getComponent(cc.PhysicsBoxCollider);
        var collider = this.getComponent(cc.BoxCollider);
        if (0 == this.sprite.node.angle) {
          physicCollider.size = cc.size(width, height);
          collider.size = cc.size(width + offset, height + offset);
        } else {
          physicCollider.size = cc.size(height, width);
          collider.size = cc.size(height + offset, width + offset);
        }
        physicCollider.density = this.isThrowing ? 1 : 300;
        physicCollider.sensor = this.data.currentHealth <= 0;
        physicCollider.apply();
      };
      InteractBuilding.prototype.changeRes = function(resName, suffix) {
        this.sprite || (this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite));
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        suffix && Logic_1.default.spriteFrameRes(resName + suffix) && (spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix));
        this.sprite.node.opacity = 255;
        this.sprite.spriteFrame = spriteFrame;
        this.mat || (this.mat = this.node.getChildByName("sprite").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("textureSizeWidth", spriteFrame.getTexture().width * this.sprite.node.scaleX);
        this.mat.setProperty("textureSizeHeight", spriteFrame.getTexture().height * this.sprite.node.scaleY);
        this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
        this.sprite.node.angle = this.data.rollover > 0 ? 90 : 0;
      };
      InteractBuilding.prototype.BreakingFinish = function() {
        this.reset();
      };
      InteractBuilding.prototype.hitLight = function(isHit) {
        this.mat || (this.mat = this.node.getChildByName("sprite").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
      };
      InteractBuilding.prototype.highLight = function(isHigh) {
        this.mat || (this.mat = this.node.getChildByName("sprite").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("openOutline", isHigh ? 1 : 0);
      };
      InteractBuilding.prototype.takeDamage = function(damage) {
        var _this = this;
        if (this.data.currentHealth <= 0) return;
        this.data.currentHealth -= damage.getTotalDamage();
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        if (this.data.currentHealth > 0) {
          this.hitLight(true);
          this.scheduleOnce(function() {
            _this.hitLight(false);
          }, .1);
          return true;
        }
        this.isTaken = false;
        cc.tween(this.sprite.node).call(function() {
          _this.changeRes(_this.resName, "anim001");
          _this.hitLight(true);
        }).delay(.1).call(function() {
          _this.hitLight(false);
          _this.changeRes(_this.resName, "anim002");
        }).delay(.1).call(function() {
          _this.changeRes(_this.resName, "anim003");
        }).delay(.1).call(function() {
          _this.changeRes(_this.resName, "anim004");
          _this.updateCollider();
          var rand4save = Logic_1.default.mapManager.getRandom4Save(Logic_1.default.mapManager.getRebornSeed(_this.seed));
          var rand = rand4save.rand();
          rand > .6 && rand < .8 ? cc.director.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
            detail: {
              pos: _this.node.position,
              count: rand4save.getRandomNum(1, 3)
            }
          }) : rand >= .8 && rand < .85 ? cc.director.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
            detail: {
              pos: _this.node.position,
              res: Item_1.default.HEART
            }
          }) : rand >= .85 && rand < .9 && cc.director.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
            detail: {
              pos: _this.node.position,
              res: Item_1.default.DREAM
            }
          });
        }).delay(10).call(function() {
          _this.reset();
        }).start();
        return true;
      };
      InteractBuilding.prototype.reset = function() {
        this.node.position = Dungeon_1.default.getPosInMap(cc.v3(-10, -10));
        this.data.currentHealth = this.data.maxHealth;
      };
      InteractBuilding.prototype.rollover = function() {
        this.data.rollover = this.data.rollover > 0 ? 0 : 1;
        cc.tween(this.sprite.node).to(.5, {
          angle: this.data.rollover > 0 ? 90 : 0
        }, {
          easing: "bounceOut"
        }).start();
        this.updateCollider();
      };
      InteractBuilding.prototype.interact = function(player, isLongPress, isAttack, isRemote) {
        if (this.data.interact < 1 || this.isAniming) return false;
        this.player = player;
        return isAttack ? this.attack() : isRemote ? this.throwOrKick() : isLongPress ? this.putDown() : this.switchMode();
      };
      InteractBuilding.prototype.taken = function(player, isLongPress) {
        if (this.data.interact < 1 || this.isAniming) return;
        this.player = player;
        if (this.isTaken) return false;
        if (isLongPress) {
          this.rollover();
          return false;
        }
        this._taken();
        return true;
      };
      InteractBuilding.prototype._taken = function() {
        if (this.isAniming) return;
        this.isTaken = true;
        this.isLift = true;
        return true;
      };
      InteractBuilding.prototype.putDown = function() {
        if (this.isAniming) return;
        this.isTaken = false;
        return true;
      };
      InteractBuilding.prototype.switchMode = function() {
        if (this.isAniming) return;
        this.isLift = !this.isLift;
        return true;
      };
      InteractBuilding.prototype.throwOrKick = function() {
        var _this = this;
        if (this.isAniming || this.isThrowing) return;
        this.isAttacking = true;
        this.isThrowing = true;
        this.isAniming = true;
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
        this.updateCollider();
        this.beatBack(this.node, this.player.Hv.clone(), this.isLift ? 2e3 : 3e3);
        this.scheduleOnce(function() {
          cc.director.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            detail: {
              isHeavyShaking: false
            }
          });
        }, this.isLift ? .5 : 0);
        if (this.isLift) {
          cc.tween(this.sprite.node).to(.2, {
            position: cc.v3(0, 128)
          }).to(.2, {
            position: cc.v3(0, 0)
          }, {
            easing: "bounceOut"
          }).start();
          cc.tween(this.shadow).to(.5, {
            scale: 3
          }).to(.5, {
            scale: 4
          }).start();
        }
        this.scheduleOnce(function() {
          _this.isAniming = false;
          _this.isAttacking = false;
          _this.isTaken = false;
          _this.isThrowing = false;
          _this.updateCollider();
        }, 1);
        return true;
      };
      InteractBuilding.prototype.attack = function() {
        var _this = this;
        if (!this.isTaken || this.isAniming || !this.player) return false;
        this.isAniming = true;
        this.hasTargetMap = {};
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE);
        var o = 64;
        if (this.isLift) {
          var p1 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(-o / 2, 0)));
          var p2 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(o, 0)));
          cc.tween(this.sprite.node).to(.2, {
            position: cc.v3(0, 64)
          }).call(function() {
            _this.isAttacking = true;
          }).to(.1, {
            position: cc.v3(0, 96)
          }).to(.1, {
            position: cc.v3(0, 0)
          }).call(function() {
            _this.isAttacking = false;
          }).to(.2, {
            position: cc.v3(0, 96)
          }).call(function() {
            _this.isAniming = false;
          }).start();
          cc.tween(this.node).to(.2, {
            position: p1
          }).to(.2, {
            position: p2
          }).start();
        } else {
          var p1 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(0, o)));
          var p2 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(.7 * o, .7 * o)));
          var p3 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(o, 0)));
          var p4 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(.7 * o, .7 * -o)));
          var p5 = this.node.parent.convertToNodeSpaceAR(this.player.weaponLeft.meleeWeapon.node.convertToWorldSpaceAR(cc.v3(0, -o)));
          cc.tween(this.node).to(.15, {
            position: p1
          }).call(function() {
            _this.isAttacking = true;
          }).to(.1, {
            position: p2
          }).to(.1, {
            position: p3
          }).to(.1, {
            position: p4
          }).to(.1, {
            position: p5
          }).to(.1, {
            position: p4
          }).to(.1, {
            position: p3
          }).call(function() {
            _this.isAttacking = false;
            _this.isAniming = false;
          }).start();
        }
        return true;
      };
      InteractBuilding.prototype.onPreSolve = function(contact, selfCollider, otherCollider) {
        otherCollider.tag != ColliderTag_1.ColliderTag.NONPLAYER && otherCollider.tag != ColliderTag_1.ColliderTag.PLAYER && otherCollider.tag != ColliderTag_1.ColliderTag.GOODNONPLAYER || (this.isTaken || this.isAttacking) && (contact.disabledOnce = true);
      };
      InteractBuilding.prototype.onCollisionStay = function(other, self) {
        if (other.tag != ColliderTag_1.ColliderTag.PLAYER && this.player && this.isTaken && this.isAttacking) {
          other.tag != ColliderTag_1.ColliderTag.BUILDING && other.tag != ColliderTag_1.ColliderTag.WALL && other.tag != ColliderTag_1.ColliderTag.WALL_TOP || this.isThrowing && (this.rigidBody.linearVelocity = cc.Vec2.ZERO);
          if (this.hasTargetMap[other.node.uuid] && this.hasTargetMap[other.node.uuid] > 0) {
            this.hasTargetMap[other.node.uuid]++;
            return false;
          }
          this.hasTargetMap[other.node.uuid] = 1;
          return this.attacking(other);
        }
      };
      InteractBuilding.prototype.updatePosition = function() {
        this.shadow.opacity = 255;
        if (this.player && this.isTaken) {
          this.shadow.opacity = this.isThrowing ? 255 : 0;
          if (!this.isAniming) if (this.isLift) {
            this.sprite.node.position = Logic_1.default.lerpPos(this.sprite.node.position, cc.v3(0, 96), .1);
            this.node.position = Logic_1.default.lerpPos(this.node.position, this.player.node.position.clone(), .1);
          } else {
            var p = this.player.Hv.clone().mul(64);
            var pos = this.player.node.position.add(p);
            this.sprite.node.position = Logic_1.default.lerpPos(this.sprite.node.position, cc.v3(0, 0), .1);
            this.node.position = Logic_1.default.lerpPos(this.node.position, pos, .1);
          }
        }
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      InteractBuilding.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      InteractBuilding.prototype.isSaveTimeDelay = function(dt) {
        this.saveTimeDelay += dt;
        if (this.saveTimeDelay > .2) {
          this.saveTimeDelay = 0;
          return true;
        }
        return false;
      };
      InteractBuilding.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.updatePosition();
        if (this.isSaveTimeDelay(dt)) {
          this.data.position = this.node.position;
          var saveDecorate = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
          saveDecorate && saveDecorate.valueCopy(this.data);
        }
      };
      InteractBuilding.prototype.beatBack = function(node, hv, power) {
        var rigidBody = node.getComponent(cc.RigidBody);
        var pos = hv;
        pos.equals(cc.Vec3.ZERO) && (pos = cc.v3(1, 0));
        pos = pos.normalizeSelf().mul(power);
        this.scheduleOnce(function() {
          rigidBody.linearVelocity = cc.Vec2.ZERO;
          rigidBody.applyLinearImpulse(cc.v2(pos.x, pos.y), rigidBody.getLocalCenter(), true);
        }, .1);
      };
      InteractBuilding.prototype.attacking = function(attackTarget) {
        if (!attackTarget || !this.isAttacking) return false;
        var damage = new DamageData_1.default();
        var common = new CommonData_1.default();
        if (this.player) {
          damage = this.player.data.getFinalAttackPoint();
          common = this.player.data.FinalCommon;
        }
        damage.isMelee = true;
        damage.physicalDamage += this.isThrowing ? 5 : 3;
        var damageSuccess = false;
        var attackSuccess = false;
        if (attackTarget.tag == ColliderTag_1.ColliderTag.NONPLAYER) {
          var monster = attackTarget.node.getComponent(NonPlayer_1.default);
          if (monster && !monster.sc.isDied && monster.data.isEnemy > 0) {
            damage.isBackAttack = monster.isPlayerBehindAttack() && common.damageBack > 0;
            damage.isBackAttack && (damage.realDamage += common.damageBack);
            damageSuccess = monster.takeDamage(damage);
            if (damageSuccess) {
              this.beatBack(monster.node, this.player.Hv.clone(), 500);
              this.addTargetAllStatus(common, monster);
            }
          }
        } else if (attackTarget.tag == ColliderTag_1.ColliderTag.BOSS) {
          var boss = attackTarget.node.getComponent(Boss_1.default);
          if (boss && !boss.sc.isDied) {
            damageSuccess = boss.takeDamage(damage);
            damageSuccess && this.addTargetAllStatus(common, boss);
          }
        } else if (attackTarget.tag == ColliderTag_1.ColliderTag.BUILDING || attackTarget.tag == ColliderTag_1.ColliderTag.WALL) {
          var box = attackTarget.node.getComponent(Box_1.default);
          if (box) {
            attackSuccess = true;
            box.breakBox();
          }
          if (!attackSuccess) {
            var hitBuilding = attackTarget.node.getComponent(HitBuilding_1.default);
            if (hitBuilding) {
              attackSuccess = true;
              hitBuilding.takeDamage(damage);
            }
          }
        }
        (damageSuccess || attackSuccess) && cc.director.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
          detail: {
            isHeavyShaking: false
          }
        });
        damageSuccess && this.player.data.AvatarData.organizationIndex == AvatarData_1.default.TECH && this.player.updateDream(-1);
        return damageSuccess || attackSuccess;
      };
      InteractBuilding.prototype.addTargetAllStatus = function(data, target) {
        this.addTargetStatus(data.iceRate, target, StatusManager_1.default.FROZEN);
        this.addTargetStatus(data.fireRate, target, StatusManager_1.default.BURNING);
        this.addTargetStatus(data.lighteningRate, target, StatusManager_1.default.DIZZ);
        this.addTargetStatus(data.toxicRate, target, StatusManager_1.default.TOXICOSIS);
        this.addTargetStatus(data.curseRate, target, StatusManager_1.default.CURSING);
        this.addTargetStatus(data.realRate, target, StatusManager_1.default.BLEEDING);
      };
      InteractBuilding.prototype.addTargetStatus = function(rate, target, statusType) {
        Logic_1.default.getRandomNum(0, 100) < rate && target.addStatus(statusType, new FromData_1.default());
      };
      InteractBuilding.BOX = 0;
      InteractBuilding.PLANT = 1;
      InteractBuilding.BOXBREAKABLE = 2;
      InteractBuilding = __decorate([ ccclass ], InteractBuilding);
      return InteractBuilding;
    }(Building_1.default);
    exports.default = InteractBuilding;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Boss/Boss": "Boss",
    "../Data/AvatarData": "AvatarData",
    "../Data/CommonData": "CommonData",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Item/Item": "Item",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../NonPlayer": "NonPlayer",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "./Box": "Box",
    "./Building": "Building",
    "./HitBuilding": "HitBuilding"
  } ],
  InventoryData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8d617FHrhNC9JdBH0sgyrgd", "InventoryData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseData_1 = require("./BaseData");
    var EquipmentData_1 = require("./EquipmentData");
    var ItemData_1 = require("./ItemData");
    var InventoryData = function(_super) {
      __extends(InventoryData, _super);
      function InventoryData() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.id = 0;
        _this.createTime = 0;
        _this.level = 0;
        _this.type = 0;
        return _this;
      }
      InventoryData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.type = data.type ? data.type : 0;
        this.price = data.price ? data.price : 0;
        if (data.equipmentData) {
          this.equipmentData = new EquipmentData_1.default();
          this.equipmentData.valueCopy(data.equipmentData);
          this.price = this.equipmentData.price;
          this.id = this.equipmentData.id;
          this.level = this.equipmentData.level;
        }
        if (data.itemData) {
          this.itemData = new ItemData_1.default();
          this.itemData.valueCopy(data.itemData);
          this.price = this.itemData.price;
          this.id = this.itemData.id;
          this.level = 0;
        }
        this.itemData = data.itemData;
        this.createTime = data.createTime ? data.createTime : 0;
      };
      InventoryData.prototype.clone = function() {
        var e = new InventoryData();
        e.equipmentData = this.equipmentData;
        e.itemData = this.itemData;
        e.createTime = this.createTime;
        e.id = this.id;
        e.type = this.type;
        e.price = this.price;
        e.level = this.level;
        return e;
      };
      InventoryData.prototype.setEmpty = function() {
        this.type = 0;
        this.equipmentData = null;
        this.itemData = null;
        this.createTime = 0;
        this.id = 0;
        this.price = 0;
        this.level = 0;
      };
      return InventoryData;
    }(BaseData_1.default);
    exports.default = InventoryData;
    cc._RF.pop();
  }, {
    "./BaseData": "BaseData",
    "./EquipmentData": "EquipmentData",
    "./ItemData": "ItemData"
  } ],
  InventoryDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "66439SRIlRDCK2s/WLS+qDi", "InventoryDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AvatarData_1 = require("../../Data/AvatarData");
    var InventoryData_1 = require("../../Data/InventoryData");
    var EventHelper_1 = require("../../EventHelper");
    var Item_1 = require("../../Item/Item");
    var Logic_1 = require("../../Logic");
    var InventoryManager_1 = require("../../Manager/InventoryManager");
    var AudioPlayer_1 = require("../../Utils/AudioPlayer");
    var InventoryItem_1 = require("../InventoryItem");
    var BaseDialog_1 = require("./BaseDialog");
    var EquipmentAndItemDialog_1 = require("./EquipmentAndItemDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var InventoryDialog = function(_super) {
      __extends(InventoryDialog, _super);
      function InventoryDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.item = null;
        _this.layout = null;
        _this.toggleContainer = null;
        _this.equipmentAndItemDialogPrefab = null;
        _this.useButton = null;
        _this.dropButton = null;
        _this.saleButton = null;
        _this.list = [];
        _this.select = null;
        _this.discountLabel = null;
        _this.discount = .6;
        _this.equipmentAndItemDialog = null;
        return _this;
      }
      InventoryDialog.prototype.onLoad = function() {
        var _this = this;
        this.select.opacity = 0;
        this.equipmentAndItemDialog = this.initDialog();
        this.layout.removeAllChildren();
        for (var i = 0; i < InventoryManager_1.default.INVENTORY_MAX; i++) {
          var data = new InventoryData_1.default();
          data.createTime = new Date().getTime();
          this.list.push(this.getItem(i, data));
        }
        cc.director.on(EventHelper_1.EventHelper.HUD_INVENTORY_ALL_UPDATE, function(event) {
          _this.node && _this.updateList(Logic_1.default.bagSortIndex);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_INVENTORY_ITEM_UPDATE, function(event) {
          if (_this.node) {
            var data = Logic_1.default.inventoryManager.inventoryList[event.detail.index];
            _this.list[event.detail.index].updateData(data);
          }
        });
        this.toggleContainer.toggleItems[Logic_1.default.bagSortIndex].isChecked = true;
        Logic_1.default.playerData.AvatarData.organizationIndex == AvatarData_1.default.HUNTER && (this.discount = .8);
      };
      InventoryDialog.prototype.initDialog = function() {
        var node = cc.instantiate(this.equipmentAndItemDialogPrefab);
        node.parent = this.node.getChildByName("layer");
        var dialog = node.getComponent(EquipmentAndItemDialog_1.default);
        dialog.changeBgAndAnchor(EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_NONE);
        dialog.hideDialog();
        return dialog;
      };
      InventoryDialog.prototype.getItem = function(index, data) {
        var prefab = cc.instantiate(this.item);
        prefab.parent = this.layout;
        var item = prefab.getComponent(InventoryItem_1.default);
        item.init(this, index, data);
        return item;
      };
      InventoryDialog.prototype.start = function() {};
      InventoryDialog.prototype.show = function() {
        _super.prototype.show.call(this);
        this.updateList(Logic_1.default.bagSortIndex);
      };
      InventoryDialog.prototype.changeSort = function(toggle, index) {
        Logic_1.default.bagSortIndex = index;
        this.updateList(index);
      };
      InventoryDialog.prototype.clearSelect = function() {
        this.currentSelectIndex = -1;
        this.equipmentAndItemDialog.hideDialog();
        this.useButton.active = false;
        this.dropButton.active = false;
        this.saleButton.active = false;
        this.select.opacity = 0;
      };
      InventoryDialog.prototype.showSelect = function(item) {
        this.currentSelectIndex = item.index;
        this.select.position = this.node.convertToNodeSpaceAR(item.node.convertToWorldSpaceAR(cc.Vec3.ZERO));
        this.select.opacity = 200;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        if (item.data.type == InventoryItem_1.default.TYPE_EQUIP) {
          this.discountLabel.string = "-" + 100 * this.discount + "%(" + Math.floor(item.data.equipmentData.price * this.discount) + ")";
          this.useButton.active = true;
          this.dropButton.active = true;
          this.saleButton.active = true;
          this.equipmentAndItemDialog.showDialog(cc.v3(420, 160), null, null, item.data.equipmentData, null);
        } else {
          this.discountLabel.string = "-" + 100 * this.discount + "%(" + Math.floor(item.data.itemData.count > 1 ? item.data.itemData.price * item.data.itemData.count * this.discount : item.data.itemData.price * this.discount) + ")";
          this.useButton.active = true;
          this.dropButton.active = true;
          this.saleButton.active = true;
          this.equipmentAndItemDialog.showDialog(cc.v3(420, 160), null, item.data.itemData, null, null);
        }
      };
      InventoryDialog.prototype.updateList = function(sortIndex) {
        this.clearSelect();
        var itemlist = [];
        var equiplist = [];
        var list = [];
        for (var i = 0; i < Logic_1.default.inventoryManager.inventoryList.length; i++) {
          var data = Logic_1.default.inventoryManager.inventoryList[i];
          if (data.type != InventoryItem_1.default.TYPE_EMPTY) {
            list.push(data);
            data.type == InventoryItem_1.default.TYPE_EQUIP ? equiplist.push(data) : data.type == InventoryItem_1.default.TYPE_ITEM && itemlist.push(data);
          }
        }
        if (0 == sortIndex) list.sort(function(a, b) {
          return a.createTime - b.createTime;
        }); else if (1 == sortIndex) list.sort(function(a, b) {
          return a.id - b.id;
        }); else if (2 == sortIndex) {
          itemlist.sort(function(a, b) {
            return a.id - b.id;
          });
          equiplist.sort(function(a, b) {
            return b.equipmentData.level - a.equipmentData.level;
          });
          list = equiplist.concat(itemlist);
        } else 3 == sortIndex && list.sort(function(a, b) {
          return a.price - b.price;
        });
        for (var i = 0; i < InventoryManager_1.default.INVENTORY_MAX; i++) if (i < list.length && list[i].type != InventoryItem_1.default.TYPE_EMPTY) {
          var data = list[i];
          this.list[i].updateData(data);
        } else this.list[i].setEmpty();
        Logic_1.default.inventoryManager.inventoryList = list;
      };
      InventoryDialog.prototype.use = function() {
        if (-1 == this.currentSelectIndex || this.list[this.currentSelectIndex].data.type == InventoryItem_1.default.TYPE_EMPTY) return;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        var current = this.list[this.currentSelectIndex];
        if (current.data.type == InventoryItem_1.default.TYPE_EQUIP) {
          var equipData = current.data.equipmentData.clone();
          if (equipData.equipmetType != InventoryManager_1.default.EMPTY) {
            Logic_1.default.inventoryManager.inventoryList[this.currentSelectIndex].setEmpty();
            this.list[this.currentSelectIndex].setEmpty();
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_CHANGEEQUIPMENT, {
              equipData: equipData,
              isReplace: true,
              index: this.currentSelectIndex
            });
          }
        } else {
          var itemData = current.data.itemData.clone();
          if (itemData.resName != Item_1.default.EMPTY) {
            Logic_1.default.inventoryManager.inventoryList[this.currentSelectIndex].setEmpty();
            this.list[this.currentSelectIndex].setEmpty();
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_CHANGEITEM, {
              itemData: itemData,
              isReplace: true,
              index: this.currentSelectIndex
            });
          }
        }
        this.clearSelect();
      };
      InventoryDialog.prototype.drop = function() {
        if (-1 == this.currentSelectIndex || this.list[this.currentSelectIndex].data.type == InventoryItem_1.default.TYPE_EMPTY) return;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        var current = this.list[this.currentSelectIndex];
        if (current.data.type == InventoryItem_1.default.TYPE_EQUIP) {
          var equipData = current.data.equipmentData;
          equipData.equipmetType != InventoryManager_1.default.EMPTY && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_SETEQUIPMENT, {
            res: equipData.img,
            equipmentData: equipData
          });
        } else {
          var itemData = current.data.itemData;
          itemData.resName != Item_1.default.EMPTY && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
            res: itemData.resName,
            count: itemData.count
          });
        }
        Logic_1.default.inventoryManager.inventoryList[this.currentSelectIndex].setEmpty();
        this.list[this.currentSelectIndex].setEmpty();
        this.clearSelect();
      };
      InventoryDialog.prototype.sale = function() {
        if (-1 == this.currentSelectIndex || this.list[this.currentSelectIndex].data.type == InventoryItem_1.default.TYPE_EMPTY) return;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        var current = this.list[this.currentSelectIndex];
        if (current.data.type == InventoryItem_1.default.TYPE_EQUIP) {
          var equipData = current.data.equipmentData;
          if (equipData.equipmetType != InventoryManager_1.default.EMPTY) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
              count: Math.floor(equipData.price * this.discount)
            });
            AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
          }
        } else {
          var itemData = current.data.itemData;
          if (itemData.resName != Item_1.default.EMPTY) {
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
              count: Math.floor(itemData.count > 1 ? itemData.price * itemData.count * this.discount : itemData.price * this.discount)
            });
            AudioPlayer_1.default.play(AudioPlayer_1.default.COIN);
          }
        }
        Logic_1.default.inventoryManager.inventoryList[this.currentSelectIndex].setEmpty();
        this.list[this.currentSelectIndex].setEmpty();
        this.clearSelect();
      };
      InventoryDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.dismiss();
      };
      __decorate([ property(cc.Prefab) ], InventoryDialog.prototype, "item", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "layout", void 0);
      __decorate([ property(cc.ToggleContainer) ], InventoryDialog.prototype, "toggleContainer", void 0);
      __decorate([ property(cc.Prefab) ], InventoryDialog.prototype, "equipmentAndItemDialogPrefab", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "useButton", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "dropButton", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "saleButton", void 0);
      __decorate([ property(cc.Node) ], InventoryDialog.prototype, "select", void 0);
      __decorate([ property(cc.Label) ], InventoryDialog.prototype, "discountLabel", void 0);
      InventoryDialog = __decorate([ ccclass ], InventoryDialog);
      return InventoryDialog;
    }(BaseDialog_1.default);
    exports.default = InventoryDialog;
    cc._RF.pop();
  }, {
    "../../Data/AvatarData": "AvatarData",
    "../../Data/InventoryData": "InventoryData",
    "../../EventHelper": "EventHelper",
    "../../Item/Item": "Item",
    "../../Logic": "Logic",
    "../../Manager/InventoryManager": "InventoryManager",
    "../../Utils/AudioPlayer": "AudioPlayer",
    "../InventoryItem": "InventoryItem",
    "./BaseDialog": "BaseDialog",
    "./EquipmentAndItemDialog": "EquipmentAndItemDialog"
  } ],
  InventoryItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "51ad8KPmpFIULMuWCViUiMp", "InventoryItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var InventoryData_1 = require("../Data/InventoryData");
    var Logic_1 = require("../Logic");
    var InventoryManager_1 = require("../Manager/InventoryManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var InventoryItem = function(_super) {
      __extends(InventoryItem, _super);
      function InventoryItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isSelect = false;
        _this.sprite = null;
        _this.label = null;
        _this.index = 0;
        _this.data = new InventoryData_1.default();
        return _this;
      }
      InventoryItem_1 = InventoryItem;
      InventoryItem.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.isSelect && _this.index == _this.dialog.currentSelectIndex ? _this.isSelect = false : _this.isSelect = _this.data.type != InventoryItem_1.TYPE_EMPTY;
          _this.dialog.clearSelect();
          _this.isSelect && _this.dialog.showSelect(_this);
        }, this);
      };
      InventoryItem.prototype.init = function(inventoryDialog, index, data) {
        this.dialog = inventoryDialog;
        this.index = index;
        this.isSelect = false;
        this.updateData(data);
      };
      InventoryItem.prototype.updateData = function(data) {
        this.isSelect = false;
        this.data.valueCopy(data);
        this.label.string = "";
        this.sprite.spriteFrame = null;
        if (this.data.type == InventoryItem_1.TYPE_ITEM && this.data.itemData) {
          this.label.string = data.itemData.count > 0 ? "x" + data.itemData.count : "";
          this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(this.data.itemData.resName);
        } else if (this.data.equipmentData) {
          var spriteFrame = Logic_1.default.spriteFrameRes(this.data.equipmentData.img);
          this.data.equipmentData.equipmetType == InventoryManager_1.default.CLOTHES ? spriteFrame = Logic_1.default.spriteFrameRes(this.data.equipmentData.img + "anim0") : this.data.equipmentData.equipmetType == InventoryManager_1.default.HELMET ? spriteFrame = Logic_1.default.spriteFrameRes(this.data.equipmentData.img + "anim0") : this.data.equipmentData.equipmetType == InventoryManager_1.default.REMOTE && (spriteFrame = Logic_1.default.spriteFrameRes(this.data.equipmentData.img + "anim0"));
          this.sprite.spriteFrame = spriteFrame;
        }
      };
      InventoryItem.prototype.setEmpty = function() {
        this.data.setEmpty();
        this.label.string = "";
        this.sprite.spriteFrame = null;
      };
      InventoryItem.prototype.start = function() {};
      var InventoryItem_1;
      InventoryItem.TYPE_EMPTY = 0;
      InventoryItem.TYPE_EQUIP = 1;
      InventoryItem.TYPE_ITEM = 2;
      __decorate([ property(cc.Sprite) ], InventoryItem.prototype, "sprite", void 0);
      __decorate([ property(cc.Label) ], InventoryItem.prototype, "label", void 0);
      InventoryItem = InventoryItem_1 = __decorate([ ccclass ], InventoryItem);
      return InventoryItem;
    }(cc.Component);
    exports.default = InventoryItem;
    cc._RF.pop();
  }, {
    "../Data/InventoryData": "InventoryData",
    "../Logic": "Logic",
    "../Manager/InventoryManager": "InventoryManager"
  } ],
  InventoryManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1dc08IgWM1D6q2nqBDxwhzD", "InventoryManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentData_1 = require("../Data/EquipmentData");
    var ItemData_1 = require("../Data/ItemData");
    var NextStep_1 = require("../Utils/NextStep");
    var InventoryManager = function() {
      function InventoryManager() {
        this.buffer = new EquipmentData_1.default();
        this.itemList = [];
        this.inventoryList = [];
        this.itemCoolDownList = [];
        this.equips = {};
        this.suitMap = {};
        this.suitEquipMap = {};
        this.emptyEquipData = new EquipmentData_1.default();
        for (var _i = 0, _a = InventoryManager.EQUIP_TAGS; _i < _a.length; _i++) {
          var name = _a[_i];
          this.equips[name] = new EquipmentData_1.default();
        }
        for (var i = 0; i < 5; i++) {
          var data = new ItemData_1.default();
          data.count = -1;
          this.itemList.push(data);
          this.itemCoolDownList.push(new NextStep_1.default());
        }
        this.suitMap = {};
        this.suitEquipMap = {};
      }
      InventoryManager.prototype.clear = function() {};
      InventoryManager.prototype.getEquipBySuit = function(e) {
        if (e && this.suitEquipMap[e.suitType]) return this.suitEquipMap[e.suitType];
        return this.emptyEquipData;
      };
      InventoryManager.prototype.getTotalEquipData = function() {
        var e = new EquipmentData_1.default();
        for (var key in this.equips) e.Common.add(this.equips[key].Common);
        e.Common.add(this.buffer.Common);
        for (var key in this.suitEquipMap) {
          var equip = this.suitEquipMap[key];
          equip && e.Common.add(equip.Common);
        }
        return e;
      };
      InventoryManager.INVENTORY_MAX = 30;
      InventoryManager.EMPTY = "empty";
      InventoryManager.WEAPON = "weapon";
      InventoryManager.REMOTE = "remote";
      InventoryManager.SHIELD = "shield";
      InventoryManager.HELMET = "helmet";
      InventoryManager.CLOTHES = "clothes";
      InventoryManager.TROUSERS = "trousers";
      InventoryManager.GLOVES = "gloves";
      InventoryManager.SHOES = "shoes";
      InventoryManager.CLOAK = "cloak";
      InventoryManager.EQUIP_TAGS = [ InventoryManager.WEAPON, InventoryManager.HELMET, InventoryManager.CLOTHES, InventoryManager.TROUSERS, InventoryManager.GLOVES, InventoryManager.SHOES, InventoryManager.CLOAK, InventoryManager.SHIELD, InventoryManager.REMOTE ];
      return InventoryManager;
    }();
    exports.default = InventoryManager;
    cc._RF.pop();
  }, {
    "../Data/EquipmentData": "EquipmentData",
    "../Data/ItemData": "ItemData",
    "../Utils/NextStep": "NextStep"
  } ],
  Inventory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b411lPIzZAv7ApO4pixeng", "Inventory");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EventHelper_1 = require("./EventHelper");
    var Logic_1 = require("./Logic");
    var EquipmentData_1 = require("./Data/EquipmentData");
    var InventoryManager_1 = require("./Manager/InventoryManager");
    var Dungeon_1 = require("./Dungeon");
    var FromData_1 = require("./Data/FromData");
    var ItemData_1 = require("./Data/ItemData");
    var Item_1 = require("./Item/Item");
    var SuitData_1 = require("./Data/SuitData");
    var InventoryData_1 = require("./Data/InventoryData");
    var InventoryItem_1 = require("./UI/InventoryItem");
    var EquipmentAndItemDialog_1 = require("./UI/dialog/EquipmentAndItemDialog");
    var LocalStorage_1 = require("./Utils/LocalStorage");
    var Inventory = function(_super) {
      __extends(Inventory, _super);
      function Inventory() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.dungeon = null;
        _this.weapon = null;
        _this.remote = null;
        _this.shield = null;
        _this.helmet = null;
        _this.clothes = null;
        _this.trousers = null;
        _this.gloves = null;
        _this.shoes = null;
        _this.cloak = null;
        _this.item1 = null;
        _this.item2 = null;
        _this.item3 = null;
        _this.item4 = null;
        _this.item5 = null;
        _this.equipmentAndItemDialogPrefab = null;
        _this.mainCamera = null;
        _this.equipmentNode = null;
        _this.dialogNode = null;
        _this.equipmentAndItemDialog = null;
        _this.equipmentGroundDialog = null;
        _this.itemGroundDialog = null;
        _this.graphics = null;
        _this.suitTimeDelay = 0;
        _this.equipTimeDelays = {};
        _this.equipSprites = {};
        return _this;
      }
      Inventory.prototype.onLoad = function() {
        var _this = this;
        this.equipmentNode.active = Logic_1.default.settings.showEquipDialog;
        this.equipmentGroundDialog = this.initDialog(true);
        this.itemGroundDialog = this.initDialog(true);
        this.equipmentAndItemDialog = this.initDialog(false);
        this.graphics = this.getComponent(cc.Graphics);
        this.inventoryManager = Logic_1.default.inventoryManager;
        cc.director.on(EventHelper_1.EventHelper.PLAYER_CHANGEEQUIPMENT, function(event) {
          if (_this.node) {
            _this.refreshEquipment(event.detail.equipData, false, event.detail.isReplace, event.detail.index);
            _this.refreshSuits();
          }
        });
        this.equipmentGroundDialog && this.equipmentGroundDialog.hideDialog();
        this.itemGroundDialog && this.itemGroundDialog.hideDialog();
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.PLAYER_CHANGEITEM, function(detail) {
          _this.node && _this.refreshItem(detail.itemData, detail.isReplace, detail.index);
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_SHOW, function(detail) {
          if (_this.equipmentGroundDialog) {
            var worldPos = detail.worldPos;
            var pos = _this.node.convertToNodeSpaceAR(worldPos);
            _this.equipmentGroundDialog.showDialog(pos.sub(_this.mainCamera.node.position), null, detail.itemData, detail.equipData, null);
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_GROUND_EQUIPMENT_INFO_HIDE, function(detail) {
          _this.equipmentGroundDialog && _this.equipmentGroundDialog.hideDialog();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_SHOW, function(detail) {
          if (_this.itemGroundDialog) {
            var worldPos = detail.worldPos;
            var pos = _this.node.convertToNodeSpaceAR(worldPos);
            _this.itemGroundDialog.showDialog(pos.sub(_this.mainCamera.node.position), null, detail.itemData, null, null);
          }
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_HIDE, function(detail) {
          _this.itemGroundDialog && _this.itemGroundDialog.hideDialog();
        });
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.USEITEM_KEYBOARD, function(detail) {
          _this.userItem(null, detail.index);
        });
        this.remote.node.parent.active = true;
        this.shield.node.parent.active = false;
        for (var _i = 0, _a = InventoryManager_1.default.EQUIP_TAGS; _i < _a.length; _i++) {
          var name = _a[_i];
          this.equipTimeDelays[name] = 0;
        }
        this.equipSprites[InventoryManager_1.default.WEAPON] = this.weapon;
        this.equipSprites[InventoryManager_1.default.REMOTE] = this.remote;
        this.equipSprites[InventoryManager_1.default.SHIELD] = this.shield;
        this.equipSprites[InventoryManager_1.default.HELMET] = this.helmet;
        this.equipSprites[InventoryManager_1.default.CLOTHES] = this.clothes;
        this.equipSprites[InventoryManager_1.default.TROUSERS] = this.trousers;
        this.equipSprites[InventoryManager_1.default.GLOVES] = this.gloves;
        this.equipSprites[InventoryManager_1.default.SHOES] = this.shoes;
        this.equipSprites[InventoryManager_1.default.CLOAK] = this.cloak;
      };
      Inventory.prototype.initDialog = function(isGround) {
        var node = cc.instantiate(this.equipmentAndItemDialogPrefab);
        node.parent = this.node;
        var dialog = node.getComponent(EquipmentAndItemDialog_1.default);
        dialog.changeBgAndAnchor(isGround ? EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_DOWN : EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_RIGHT);
        dialog.hideDialog();
        isGround || (node.parent = this.dialogNode);
        return dialog;
      };
      Inventory.prototype.showEquipment = function() {
        this.equipmentNode.active = !this.equipmentNode.active;
        Logic_1.default.settings.showEquipDialog = this.equipmentNode.active;
        LocalStorage_1.default.saveSwitch(LocalStorage_1.default.KEY_SWITCH_SHOW_EQUIPDIALOG, Logic_1.default.settings.showEquipDialog);
      };
      Inventory.prototype.start = function() {
        for (var key in this.equipSprites) {
          this.equipSprites[key].spriteFrame = null;
          this.addEquipSpriteTouchEvent(this.equipSprites[key], key);
        }
        for (var key in this.inventoryManager.equips) this.refreshEquipment(this.inventoryManager.equips[key], true);
        this.refreshItemRes();
        var itemSpriteList = [ this.item1, this.item2, this.item3, this.item4, this.item5 ];
        for (var i = 0; i < itemSpriteList.length; i++) this.addItemSpriteTouchEvent(itemSpriteList[i], i);
        this.refreshSuits();
      };
      Inventory.prototype.addEquipSpriteTouchEvent = function(sprite, equipmetType) {
        var _this = this;
        sprite.node.parent.on(cc.Node.EventType.TOUCH_START, function() {
          if (null == sprite.spriteFrame) return;
          var equipData = new EquipmentData_1.default();
          _this.inventoryManager.equips[equipmetType] && (equipData = _this.inventoryManager.equips[equipmetType].clone());
          var pos = _this.node.convertToNodeSpaceAR(sprite.node.parent.convertToWorldSpaceAR(cc.Vec3.ZERO));
          _this.equipmentAndItemDialog.showDialog(pos.add(cc.v3(-32, 0)), null, null, equipData, null, _this.inventoryManager, EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_RIGHT);
        });
        sprite.node.parent.on(cc.Node.EventType.TOUCH_END, function() {
          _this.equipmentAndItemDialog.hideDialog();
        });
        sprite.node.parent.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          _this.equipmentAndItemDialog.hideDialog();
        });
      };
      Inventory.prototype.addItemSpriteTouchEvent = function(sprite, itemIndex) {
        var _this = this;
        var isLongPress = false;
        var touchStart = false;
        sprite.node.parent.parent.on(cc.Node.EventType.TOUCH_START, function() {
          if (null == sprite.spriteFrame) return;
          touchStart = true;
          _this.scheduleOnce(function() {
            if (!touchStart || !_this.inventoryManager || !_this.inventoryManager.itemList || itemIndex > _this.inventoryManager.itemList.length - 1) return;
            isLongPress = true;
            var item = _this.inventoryManager.itemList[itemIndex].clone();
            if (item.resName == Item_1.default.EMPTY) return;
            var pos = _this.node.convertToNodeSpaceAR(sprite.node.parent.convertToWorldSpaceAR(cc.Vec3.ZERO));
            _this.equipmentAndItemDialog.showDialog(pos.add(cc.v3(-32, 0)), null, item, null, null, null, EquipmentAndItemDialog_1.default.BG_TYPE_ARROW_LEFT);
          }, .3);
        });
        sprite.node.parent.parent.on(cc.Node.EventType.TOUCH_END, function() {
          _this.equipmentAndItemDialog.hideDialog();
          isLongPress || _this.userItem(sprite.node, itemIndex);
          touchStart = false;
          isLongPress = false;
        });
        sprite.node.parent.parent.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          _this.equipmentAndItemDialog.hideDialog();
          touchStart = false;
          isLongPress = false;
        });
      };
      Inventory.prototype.setItemToBag = function(itemData, indexFromBag) {
        var list = Logic_1.default.inventoryManager.inventoryList;
        var insertIndex = list.length < InventoryManager_1.default.INVENTORY_MAX ? list.length : -1;
        var isFromBag = indexFromBag && indexFromBag > -1 && indexFromBag < list.length;
        for (var i = list.length - 1; i >= 0; i--) {
          var idata = list[i];
          if (idata.type == InventoryItem_1.default.TYPE_EMPTY) insertIndex = i; else if (idata.type == InventoryItem_1.default.TYPE_ITEM && this.isItemEqualCanAdd(idata.itemData, itemData)) {
            var count = idata.itemData.count + itemData.count;
            idata.itemData = new ItemData_1.default();
            idata.itemData.valueCopy(itemData);
            idata.itemData.count = count;
            idata.price = idata.itemData.price;
            isFromBag && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_ITEM_UPDATE, {
              index: indexFromBag
            });
            return;
          }
        }
        var newdata = new InventoryData_1.default();
        newdata.itemData = new ItemData_1.default();
        newdata.itemData.valueCopy(itemData);
        newdata.type = InventoryItem_1.default.TYPE_ITEM;
        newdata.createTime = new Date().getTime();
        if (isFromBag) {
          list[indexFromBag] = new InventoryData_1.default();
          list[indexFromBag].valueCopy(newdata);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_ITEM_UPDATE, {
            index: indexFromBag
          });
        } else if (-1 == insertIndex) {
          var p = this.dungeon.player.node.position.clone();
          itemData.resName != Item_1.default.EMPTY && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
            pos: p,
            res: itemData.resName,
            count: itemData.count
          });
        } else {
          var d = new InventoryData_1.default();
          d.valueCopy(newdata);
          insertIndex < list.length ? list[insertIndex] = d : list.push(d);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_ALL_UPDATE);
        }
      };
      Inventory.prototype.setEquipmentToBag = function(equipmentData, isInit, indexFromBag) {
        if (isInit || equipmentData.equipmetType == InventoryManager_1.default.EMPTY) return;
        var list = Logic_1.default.inventoryManager.inventoryList;
        var insertIndex = list.length < InventoryManager_1.default.INVENTORY_MAX ? list.length : -1;
        var isFromBag = indexFromBag && indexFromBag > -1 && indexFromBag < list.length;
        for (var i = 0; i < list.length; i++) {
          var idata = list[i];
          if (idata.type == InventoryItem_1.default.TYPE_EMPTY) {
            insertIndex = i;
            break;
          }
        }
        var newdata = new InventoryData_1.default();
        newdata.equipmentData = new EquipmentData_1.default();
        newdata.equipmentData.valueCopy(equipmentData);
        newdata.type = InventoryItem_1.default.TYPE_EQUIP;
        newdata.price = newdata.equipmentData.price;
        newdata.createTime = new Date().getTime();
        if (isFromBag) {
          list[indexFromBag] = new InventoryData_1.default();
          list[indexFromBag].valueCopy(newdata);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_ITEM_UPDATE, {
            index: indexFromBag
          });
        } else if (-1 == insertIndex) {
          var p = this.dungeon.player.node.position.clone();
          equipmentData.equipmetType != InventoryManager_1.default.EMPTY && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_SETEQUIPMENT, {
            pos: p,
            res: equipmentData.img,
            equipmentData: equipmentData
          });
        } else {
          var d = new InventoryData_1.default();
          d.valueCopy(newdata);
          insertIndex < list.length ? list[insertIndex] = d : list.push(d);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_ALL_UPDATE);
        }
      };
      Inventory.prototype.refreshSuits = function() {
        this.inventoryManager.suitMap = {};
        this.inventoryManager.suitEquipMap = {};
        for (var key in this.inventoryManager.equips) {
          var equip = this.inventoryManager.equips[key];
          if (equip.suitType.length < 1) continue;
          if (this.inventoryManager.suitMap[equip.suitType]) this.inventoryManager.suitMap[equip.suitType].count++; else {
            var data = new SuitData_1.default();
            data.valueCopy(Logic_1.default.suits[equip.suitType]);
            data.count = 1;
            this.inventoryManager.suitMap[equip.suitType] = data;
          }
        }
        for (var key in this.inventoryManager.suitMap) {
          var suit = this.inventoryManager.suitMap[key];
          var e = new EquipmentData_1.default();
          if (suit) {
            for (var i = 0; i < suit.count - 1; i++) if (i < suit.EquipList.length) {
              e.add(suit.EquipList[i]);
              this.dungeon && this.dungeon.player && this.dungeon.player.addStatus(suit.EquipList[i].statusName, new FromData_1.default());
            }
            this.inventoryManager.suitEquipMap[key] = e;
          }
        }
      };
      Inventory.prototype.refreshEquipment = function(equipDataNew, isInit, isReplace, indexFromBag) {
        if (!equipDataNew || !this.weapon) return;
        var equip = this.inventoryManager.equips[equipDataNew.equipmetType];
        var hasEquip = equip && equip.equipmetType != InventoryManager_1.default.EMPTY;
        if (!hasEquip) {
          equipDataNew.equipmetType == InventoryManager_1.default.REMOTE && this.inventoryManager.equips[InventoryManager_1.default.SHIELD].equipmetType != InventoryManager_1.default.EMPTY && (hasEquip = true);
          equipDataNew.equipmetType == InventoryManager_1.default.SHIELD && this.inventoryManager.equips[InventoryManager_1.default.REMOTE].equipmetType != InventoryManager_1.default.EMPTY && (hasEquip = true);
        }
        if (!isReplace && !isInit && equip && hasEquip) {
          this.setEquipmentToBag(equipDataNew, isInit, indexFromBag);
          return;
        }
        var color = cc.color(255, 255, 255).fromHEX(equipDataNew.color);
        var spriteFrame = Logic_1.default.spriteFrameRes(equipDataNew.img);
        equipDataNew.equipmetType == InventoryManager_1.default.CLOTHES ? spriteFrame = Logic_1.default.spriteFrameRes(equipDataNew.img + "anim0") : equipDataNew.equipmetType == InventoryManager_1.default.HELMET ? spriteFrame = Logic_1.default.spriteFrameRes(equipDataNew.img + "anim0") : equipDataNew.equipmetType == InventoryManager_1.default.REMOTE && (spriteFrame = Logic_1.default.spriteFrameRes(equipDataNew.img + "anim0"));
        if (equip) {
          this.setEquipmentToBag(equip, isInit, indexFromBag);
          equip.valueCopy(equipDataNew);
        }
        var sprite = this.equipSprites[equipDataNew.equipmetType];
        if (sprite) {
          sprite.node.color = color;
          sprite.spriteFrame = 1 == equipDataNew.trouserslong ? Logic_1.default.spriteFrameRes("trousers000") : spriteFrame;
          equipDataNew.equipmetType == InventoryManager_1.default.TROUSERS && 1 == equipDataNew.trouserslong && (sprite.spriteFrame = Logic_1.default.spriteFrameRes("trousers000"));
        }
        switch (equipDataNew.equipmetType) {
         case InventoryManager_1.default.REMOTE:
          this.remote.node.parent.active = true;
          this.shield.node.parent.active = true;
          this.setEquipmentToBag(this.inventoryManager.equips[InventoryManager_1.default.SHIELD], isInit, indexFromBag);
          this.inventoryManager.equips[InventoryManager_1.default.SHIELD].valueCopy(new EquipmentData_1.default());
          this.shield.spriteFrame = Logic_1.default.spriteFrameRes(this.inventoryManager.equips[InventoryManager_1.default.SHIELD].img);
          this.shield.node.parent.active = false;
          break;

         case InventoryManager_1.default.SHIELD:
          this.remote.node.parent.active = true;
          this.shield.node.parent.active = true;
          this.setEquipmentToBag(this.inventoryManager.equips[InventoryManager_1.default.REMOTE], isInit, indexFromBag);
          if (this.inventoryManager.equips[equipDataNew.equipmetType].equipmetType != InventoryManager_1.default.EMPTY) {
            this.inventoryManager.equips[InventoryManager_1.default.REMOTE].valueCopy(new EquipmentData_1.default());
            this.remote.spriteFrame = Logic_1.default.spriteFrameRes(this.inventoryManager.equips[InventoryManager_1.default.REMOTE].img);
            this.remote.node.parent.active = false;
            this.shield.node.parent.active = true;
          } else {
            this.remote.node.parent.active = true;
            this.shield.node.parent.active = false;
          }
        }
        if (this.dungeon && this.dungeon.player) {
          this.dungeon.player.inventoryManager = this.inventoryManager;
          this.dungeon.player.changeEquipment(equipDataNew, spriteFrame);
          equipDataNew.statusInterval > 0 && equipDataNew.statusName.length > 0 && this.dungeon.player.addStatus(equipDataNew.statusName, FromData_1.default.getClone(equipDataNew.nameCn, equipDataNew.img));
        }
      };
      Inventory.prototype.addPlayerStatus = function(equipmentData) {
        if (!this.dungeon || !this.dungeon.player) return;
        equipmentData.statusInterval > 0 && equipmentData.statusName.length > 0 && this.dungeon.player.addStatus(equipmentData.statusName, FromData_1.default.getClone(equipmentData.nameCn, equipmentData.img));
      };
      Inventory.prototype.getTimeDelay = function(timeDelay, interval, dt) {
        timeDelay += dt;
        if (timeDelay > interval) {
          timeDelay = 0;
          return timeDelay;
        }
        return timeDelay;
      };
      Inventory.prototype.isTimeDelay = function(dt, equipmentData) {
        var timeDelay = -1;
        this.equipTimeDelays[equipmentData.equipmetType] = this.getTimeDelay(this.equipTimeDelays[equipmentData.equipmetType], equipmentData.statusInterval, dt);
        timeDelay = this.equipTimeDelays[equipmentData.equipmetType];
        return 0 == timeDelay;
      };
      Inventory.prototype.update = function(dt) {
        if (!Logic_1.default.isGamePause) {
          for (var key in this.inventoryManager.equips) this.isTimeDelay(dt, this.inventoryManager.equips[key]) && this.addPlayerStatus(this.inventoryManager.equips[key]);
          for (var key in this.inventoryManager.suitMap) {
            var suit = this.inventoryManager.suitMap[key];
            if (suit) for (var i = 0; i < suit.count - 1; i++) if (i < suit.EquipList.length) {
              suit.EquipList[i].equipmetType = suit.suitType;
              this.isTimeDelay(dt, suit.EquipList[i]) && this.addPlayerStatus(suit.EquipList[i]);
            }
          }
        }
      };
      Inventory.prototype.userItem = function(node, itemIndex) {
        var _this = this;
        if (!this.inventoryManager || !this.inventoryManager.itemList || itemIndex > this.inventoryManager.itemList.length - 1) return;
        var item = this.inventoryManager.itemList[itemIndex].clone();
        if (item.resName == Item_1.default.EMPTY) return;
        this.inventoryManager.itemCoolDownList[itemIndex].next(function() {
          _this.drawItemCoolDown(item.cooldown, node.convertToWorldSpaceAR(cc.Vec3.ZERO));
          -1 != item.count && item.count--;
          item.count <= 0 && -1 != item.count ? _this.inventoryManager.itemList[itemIndex].valueCopy(Logic_1.default.items[Item_1.default.EMPTY]) : _this.inventoryManager.itemList[itemIndex].valueCopy(item);
          _this.refreshItemRes();
          item.resName != Item_1.default.EMPTY && cc.director.emit(EventHelper_1.EventHelper.PLAYER_USEITEM, {
            detail: {
              itemData: item
            }
          });
        }, item.cooldown, true);
      };
      Inventory.prototype.isItemEqualCanAdd = function(item1, item2) {
        return item1.resName != Item_1.default.EMPTY && item1.resName == item2.resName && item1.count > 0 && item2.count > 0;
      };
      Inventory.prototype.refreshItem = function(itemDataNew, isReplace, indexFromBag) {
        if (!this.node) return;
        var isRefreshed = false;
        for (var i = 0; i < this.inventoryManager.itemList.length; i++) {
          var item = this.inventoryManager.itemList[i];
          if (this.isItemEqualCanAdd(item, itemDataNew)) {
            var count = item.count + itemDataNew.count;
            item.valueCopy(itemDataNew);
            item.count = count;
            isRefreshed = true;
            break;
          }
        }
        if (!isRefreshed) for (var i = 0; i < this.inventoryManager.itemList.length; i++) {
          var item = this.inventoryManager.itemList[i];
          if (item.resName == Item_1.default.EMPTY) {
            item.valueCopy(itemDataNew);
            isRefreshed = true;
            break;
          }
        }
        if (!isRefreshed) if (isReplace) {
          var item0 = this.inventoryManager.itemList[0].clone();
          var arr = new Array();
          for (var i = 1; i < this.inventoryManager.itemList.length; i++) arr.push(this.inventoryManager.itemList[i]);
          arr.push(itemDataNew);
          for (var i = 0; i < this.inventoryManager.itemList.length; i++) this.inventoryManager.itemList[i].valueCopy(arr[i]);
          this.setItemToBag(item0, indexFromBag);
        } else this.setItemToBag(itemDataNew, indexFromBag);
        this.refreshItemRes();
      };
      Inventory.prototype.refreshItemRes = function() {
        var itemSpriteList = [ this.item1, this.item2, this.item3, this.item4, this.item5 ];
        for (var i = 0; i < itemSpriteList.length; i++) {
          var item = this.inventoryManager.itemList[i];
          itemSpriteList[i].spriteFrame = Logic_1.default.spriteFrameRes(item.resName);
          itemSpriteList[i].node.parent.parent.getComponentInChildren(cc.Label).string = item.count > 0 ? "x" + item.count : "";
        }
      };
      Inventory.prototype.drawItemCoolDown = function(coolDown, position) {
        var _this = this;
        if (coolDown <= 0) return;
        var height = 80;
        var delta = .1;
        var p = this.node.convertToNodeSpaceAR(position);
        var offset = height / coolDown * delta;
        var func = function() {
          height -= offset;
          _this.graphics && _this.graphics.clear();
          _this.drawRect(height, p);
          if (height < 0) {
            _this.graphics && _this.graphics.clear();
            _this.unschedule(func);
          }
        };
        this.schedule(func, delta, cc.macro.REPEAT_FOREVER);
      };
      Inventory.prototype.drawRect = function(height, center) {
        this.graphics.fillColor = cc.color(255, 255, 255, 150);
        this.graphics.rect(center.x - 32, center.y - 32, 64, height);
        this.graphics.fill();
      };
      __decorate([ property(Dungeon_1.default) ], Inventory.prototype, "dungeon", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "weapon", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "remote", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "shield", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "helmet", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "clothes", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "trousers", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "gloves", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "shoes", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "cloak", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "item1", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "item2", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "item3", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "item4", void 0);
      __decorate([ property(cc.Sprite) ], Inventory.prototype, "item5", void 0);
      __decorate([ property(cc.Prefab) ], Inventory.prototype, "equipmentAndItemDialogPrefab", void 0);
      __decorate([ property(cc.Camera) ], Inventory.prototype, "mainCamera", void 0);
      __decorate([ property(cc.Node) ], Inventory.prototype, "equipmentNode", void 0);
      __decorate([ property(cc.Node) ], Inventory.prototype, "dialogNode", void 0);
      Inventory = __decorate([ ccclass ], Inventory);
      return Inventory;
    }(cc.Component);
    exports.default = Inventory;
    cc._RF.pop();
  }, {
    "./Data/EquipmentData": "EquipmentData",
    "./Data/FromData": "FromData",
    "./Data/InventoryData": "InventoryData",
    "./Data/ItemData": "ItemData",
    "./Data/SuitData": "SuitData",
    "./Dungeon": "Dungeon",
    "./EventHelper": "EventHelper",
    "./Item/Item": "Item",
    "./Logic": "Logic",
    "./Manager/InventoryManager": "InventoryManager",
    "./UI/InventoryItem": "InventoryItem",
    "./UI/dialog/EquipmentAndItemDialog": "EquipmentAndItemDialog",
    "./Utils/LocalStorage": "LocalStorage"
  } ],
  ItemData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "371e21tzPlAtY0KmtggGqZV", "ItemData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseData_1 = require("./BaseData");
    var CommonData_1 = require("./CommonData");
    var ItemData = function(_super) {
      __extends(ItemData, _super);
      function ItemData() {
        var _this = _super.call(this) || this;
        _this.uuid = "";
        _this.id = 2e7;
        _this.pos = cc.v3(0, 0);
        _this.nameCn = "";
        _this.nameEn = "";
        _this.duration = 0;
        _this.desc = "";
        _this.info = "";
        _this.resName = "emptyitem";
        _this.price = 0;
        _this.isTaken = false;
        _this.count = 1;
        _this.cooldown = 1;
        _this.statusList = "";
        _this.canSave = 0;
        _this.common = new CommonData_1.default();
        return _this;
      }
      Object.defineProperty(ItemData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      ItemData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.uuid = data.uuid ? data.uuid : "";
        this.id = data.id ? data.id : 2e7;
        this.common.valueCopy(data.common);
        this.pos = data.pos ? cc.v3(data.pos.x, data.pos.y) : cc.v3(0, 0);
        this.nameCn = data.nameCn ? data.nameCn : this.nameCn;
        this.nameEn = data.nameEn;
        this.duration = data.duration;
        this.resName = data.resName ? data.resName : "emptyitem";
        this.info = data.info ? data.info : "";
        this.desc = data.desc ? data.desc : "";
        this.isTaken = !!data.isTaken && data.isTaken;
        this.canSave = data.canSave ? data.canSave : 0;
        this.count = data.count ? data.count : 1;
        this.cooldown = data.cooldown ? data.cooldown : 1;
        this.price = data.price ? data.price : 0;
        this.statusList = data.statusList ? data.statusList : "";
      };
      ItemData.prototype.clone = function() {
        var e = new ItemData();
        e.uuid = this.uuid;
        e.id = this.id;
        e.common = this.common.clone();
        e.pos = this.pos;
        e.nameCn = this.nameCn;
        e.nameEn = this.nameEn;
        e.duration = this.duration;
        e.info = this.info;
        e.desc = this.desc;
        e.resName = this.resName;
        e.isTaken = this.isTaken;
        e.canSave = this.canSave;
        e.count = this.count;
        e.cooldown = this.cooldown;
        e.price = this.price;
        e.statusList = this.statusList;
        return e;
      };
      return ItemData;
    }(BaseData_1.default);
    exports.default = ItemData;
    cc._RF.pop();
  }, {
    "./BaseData": "BaseData",
    "./CommonData": "CommonData"
  } ],
  ItemManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9211357HjhKqavyVFqZ4zof", "ItemManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Coin_1 = require("../Item/Coin");
    var Dungeon_1 = require("../Dungeon");
    var OilGold_1 = require("../Item/OilGold");
    var IndexZ_1 = require("../Utils/IndexZ");
    var BaseManager_1 = require("./BaseManager");
    var Logic_1 = require("../Logic");
    var Item_1 = require("../Item/Item");
    var EventHelper_1 = require("../EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemManager = function(_super) {
      __extends(ItemManager, _super);
      function ItemManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.coin = null;
        _this.oilGold = null;
        _this.item = null;
        _this.groundList = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      ItemManager.prototype.onLoad = function() {
        var _this = this;
        this.coinPool = new cc.NodePool();
        this.oilPool = new cc.NodePool();
        cc.director.on("destorycoin", function(event) {
          _this.destroyCoin(event.detail.coinNode);
        });
        cc.director.on("destoryoilgold", function(event) {
          _this.destroyOilGold(event.detail.oilGoldNode);
        });
      };
      ItemManager.prototype.clear = function() {
        if (this.coinPool) {
          this.coinPool.clear();
          this.oilPool.clear();
        }
        this.groundList = [];
      };
      ItemManager.prototype.getValueCoin = function(count, pos, parentNode) {
        var updateValue = Coin_1.default.FACE_VALUE;
        var v = count % updateValue;
        for (var i = 0; i < v; i++) this.getCoinItem(1, pos, parentNode, true);
        var v1 = (count - v) / updateValue;
        for (var i = 0; i < v1; i++) this.getCoinItem(updateValue, pos, parentNode, true);
      };
      ItemManager.prototype.getValueOilGold = function(count, pos, parentNode) {
        var updateValue = OilGold_1.default.FACE_VALUE;
        var v = count % updateValue;
        for (var i = 0; i < v; i++) this.getCoinItem(1, pos, parentNode, false);
        var v1 = (count - v) / updateValue;
        for (var i = 0; i < v1; i++) this.getCoinItem(updateValue, pos, parentNode, false);
      };
      ItemManager.prototype.getCoinItem = function(value, pos, parentNode, isCoin) {
        var pool = isCoin ? this.coinPool : this.oilPool;
        var prefab = isCoin ? this.coin : this.oilGold;
        var player;
        var dungeon = parentNode.getComponent(Dungeon_1.default);
        dungeon && (player = dungeon.player);
        var itemPrefab = null;
        pool.size() > 0 && (itemPrefab = pool.get());
        itemPrefab && !itemPrefab.active || (itemPrefab = cc.instantiate(prefab));
        itemPrefab.parent = parentNode;
        itemPrefab.position = pos;
        var item = isCoin ? itemPrefab.getComponent(Coin_1.default) : itemPrefab.getComponent(OilGold_1.default);
        item.player = player;
        item.changeValue(value);
        item.node.zIndex = IndexZ_1.default.OVERHEAD;
        itemPrefab.active = true;
      };
      ItemManager.prototype.destroyCoin = function(coinNode) {
        coinNode.active = false;
        this.coinPool && this.coinPool.put(coinNode);
      };
      ItemManager.prototype.destroyOilGold = function(oilGoldNode) {
        oilGoldNode.active = false;
        this.oilPool && this.oilPool.put(oilGoldNode);
      };
      ItemManager.prototype.addItem = function(pos, resName, count, shopTable) {
        if (!this.item || !Logic_1.default.items[resName]) return;
        var item = cc.instantiate(this.item);
        item.parent = this.node;
        item.position = pos;
        var indexpos = Dungeon_1.default.getIndexInMap(pos);
        item.zIndex = IndexZ_1.default.OVERHEAD;
        var itemScript = item.getComponent(Item_1.default);
        itemScript.init(resName, indexpos.clone(), count, shopTable);
        var data = item.getComponent(Item_1.default).data;
        this.groundList.push(itemScript);
        if (shopTable) return;
        var curritems = Logic_1.default.mapManager.getCurrentMapItems();
        if (curritems) curritems.push(data); else {
          curritems = new Array();
          curritems.push(data);
          Logic_1.default.mapManager.setCurrentItemsArr(curritems);
        }
      };
      ItemManager.prototype.addItemFromMap = function(mapStr, indexPos) {
        "A0" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.HEART);
        "A1" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.DREAM);
        "A3" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.REDCAPSULE);
        "A1" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BLUECAPSULE);
        "A4" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.SHIELD);
        "A5" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.GOLDAPPLE);
        "Aa" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_HEALING);
        "Ab" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_MOVESPEED);
        "Ac" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_ATTACK);
        "Ad" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_DREAM);
        "Ae" == mapStr && this.addItem(Dungeon_1.default.getPosInMap(indexPos), Item_1.default.BOTTLE_REMOTE);
      };
      ItemManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      ItemManager.prototype.updateLogic = function(dt, player) {
        if (this.isCheckTimeDelay(dt)) {
          var distance = 200;
          var item = null;
          for (var i = this.groundList.length - 1; i >= 0; i--) {
            var e = this.groundList[i];
            e.highLight(false);
            if (!e.isValid || e.data.isTaken) {
              this.groundList.splice(i, 1);
              continue;
            }
            var d = Logic_1.default.getDistanceNoSqrt(e.node.position, player.node.position);
            if (d < distance) {
              distance = d;
              item = e;
            }
          }
          var min = item && item.data.canSave ? 64 : 48;
          if (distance < min && item) {
            item.highLight(true);
            item.taketips || (item.taketips = this.node.getChildByName("sprite").getChildByName("taketips"));
            if (item.data.canSave) {
              if (!this.lastGroundItem || this.lastGroundItem.uuid != item.uuid) {
                cc.tween(item.taketips).to(.2, {
                  opacity: 255
                }).delay(1).to(.2, {
                  opacity: 0
                }).start();
                cc.director.emit(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_SHOW, {
                  detail: {
                    worldPos: item.node.convertToWorldSpaceAR(cc.v3(0, 32)),
                    itemData: item.data
                  }
                });
              }
              this.lastGroundItem = item;
            } else {
              item.taken(player, false);
              this.lastGroundItem = null;
            }
          } else {
            this.lastGroundItem = null;
            cc.director.emit(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_HIDE);
          }
        }
      };
      __decorate([ property(cc.Prefab) ], ItemManager.prototype, "coin", void 0);
      __decorate([ property(cc.Prefab) ], ItemManager.prototype, "oilGold", void 0);
      __decorate([ property(cc.Prefab) ], ItemManager.prototype, "item", void 0);
      ItemManager = __decorate([ ccclass ], ItemManager);
      return ItemManager;
    }(BaseManager_1.default);
    exports.default = ItemManager;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Item/Coin": "Coin",
    "../Item/Item": "Item",
    "../Item/OilGold": "OilGold",
    "../Logic": "Logic",
    "../Utils/IndexZ": "IndexZ",
    "./BaseManager": "BaseManager"
  } ],
  Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce4de5SY9BKg5Ay5wKpP9r7", "Item");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var ItemData_1 = require("../Data/ItemData");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Item = function(_super) {
      __extends(Item, _super);
      function Item() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.data = new ItemData_1.default();
        return _this;
      }
      Item_1 = Item;
      Item.prototype.onLoad = function() {
        this.taketips = this.node.getChildByName("sprite").getChildByName("taketips");
      };
      Item.prototype.start = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      Item.prototype.init = function(resName, pos, count, shopTable) {
        this.data.valueCopy(Logic_1.default.items[resName]);
        this.data.uuid = this.data.genNonDuplicateID();
        this.data.pos = pos;
        this.data.count = count || this.data.count;
        if (shopTable) {
          this.shopTable = shopTable;
          shopTable.data.itemdata = new ItemData_1.default();
          shopTable.data.itemdata.valueCopy(Logic_1.default.items[resName]);
          shopTable.data.price = this.data.price;
        }
        var spriteFrame = Logic_1.default.spriteFrameRes(this.data.resName);
        if (spriteFrame) {
          this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
          this.node.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          this.sprite.node.width = spriteFrame.getOriginalSize().width;
          this.sprite.node.height = spriteFrame.getOriginalSize().height;
          this.mat = this.sprite.getComponent(cc.Sprite).getMaterial(0);
          this.mat.setProperty("textureSizeWidth", spriteFrame.getTexture().width * this.sprite.node.scaleX);
          this.mat.setProperty("textureSizeHeight", spriteFrame.getTexture().height * this.sprite.node.scaleY);
          this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
          this.highLight(false);
        }
      };
      Item.prototype.highLight = function(isHigh) {
        this.mat || (this.mat = this.sprite.getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("openOutline", isHigh ? 1 : 0);
      };
      Item.prototype.taken = function(player, isReplace) {
        if (this.data.isTaken) return false;
        if (!this.data.canSave) {
          this._taken(player, isReplace);
          return true;
        }
        if (!this.shopTable) {
          this._taken(player, isReplace);
          return true;
        }
        if (Logic_1.default.coins >= this.data.price) {
          cc.director.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            detail: {
              count: -this.data.price
            }
          });
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.COIN
            }
          });
          this._taken(player, isReplace);
          this.shopTable.sale(true);
          return true;
        }
        return false;
      };
      Item.prototype._taken = function(player, isReplace) {
        var _this = this;
        if (!this.data.isTaken && this.anim) {
          this.anim.play("ItemTaken");
          Achievement_1.default.addEquipsAchievement(this.data.resName);
          this.data.isTaken = true;
          AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
          this.data.canSave < 1 ? Item_1.userIt(this.data, player) : cc.director.emit(EventHelper_1.EventHelper.PLAYER_CHANGEITEM, {
            detail: {
              itemData: this.data,
              isReplace: isReplace
            }
          });
          this.scheduleOnce(function() {
            _this.node && (_this.node.active = false);
          }, 3);
        }
        var curritems = Logic_1.default.mapManager.getCurrentMapItems();
        var newlist = new Array();
        if (curritems) for (var _i = 0, curritems_1 = curritems; _i < curritems_1.length; _i++) {
          var temp = curritems_1[_i];
          temp.uuid && temp.uuid != this.data.uuid && newlist.push(temp);
        }
        Logic_1.default.mapManager.setCurrentItemsArr(newlist);
        cc.director.emit(EventHelper_1.EventHelper.HUD_GROUND_ITEM_INFO_HIDE);
      };
      Item.userIt = function(data, player) {
        var from = FromData_1.default.getClone(data.nameCn, data.resName);
        data.resName != Item_1.EMPTY && data.canSave && AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        switch (data.resName) {
         case Item_1.GOLDFINGER:
          player.stopAllDebuffs();
        }
        if (data.statusList.length > 0) {
          var arr = data.statusList.split(",");
          for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var status = arr_1[_i];
            player.addStatus(status, from);
            player.dungeon.nonPlayerManager.isPetAlive() && player.dungeon.nonPlayerManager.pet.addStatus(status, from);
          }
        }
      };
      var Item_1;
      Item.EMPTY = "emptyitem";
      Item.HEART = "heart";
      Item.DREAM = "dream";
      Item.BOTTLE_HEALING = "bottle001";
      Item.BOTTLE_MOVESPEED = "bottle002";
      Item.BOTTLE_ATTACK = "bottle003";
      Item.BOTTLE_DREAM = "bottle004";
      Item.BOTTLE_REMOTE = "bottle005";
      Item.REDCAPSULE = "redcapsule";
      Item.BLUECAPSULE = "bluecapsule";
      Item.SHIELD = "shield";
      Item.GOLDAPPLE = "goldapple";
      Item.GOLDFINGER = "goldfinger";
      Item = Item_1 = __decorate([ ccclass ], Item);
      return Item;
    }(cc.Component);
    exports.default = Item;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/FromData": "FromData",
    "../Data/ItemData": "ItemData",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer"
  } ],
  JoyController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "246e3R5w7RM/68kAxSEZZAX", "JoyController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var JoyController = function(_super) {
      __extends(JoyController, _super);
      function JoyController() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.anglePreDirQuadrant = 23;
        _this.fixedPoint = null;
        _this.movePoint = null;
        _this.movePointMoveRadius = 100;
        _this.timeDelay = 0;
        return _this;
      }
      JoyController.prototype.onLoad = function() {
        var nodeSize = this.node.getContentSize();
        this.touchArea = new cc.Vec3(nodeSize.width, nodeSize.height);
        this.fixedPointMoveCenterPos = cc.v3(0, 0);
        this.fixedPointMoveRadius = this.touchArea.x / 2 - this.movePointMoveRadius;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (-1 == this.touchID) {
            var touchStartPos = event.getLocation();
            var _pos = new cc.Vec3(touchStartPos.x, touchStartPos.y);
            _pos.subSelf(this.node.position);
            var pos = this.clampPos(_pos, this.fixedPointMoveCenterPos, this.fixedPointMoveRadius);
            this.movePointMoveCenterPos = pos;
            this.setFixedPointPos(pos);
            this.touchID = event.getID();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          if (this.touchID == event.getID()) {
            var nowPos = event.getLocation();
            var _pos = new cc.Vec3(nowPos.x, nowPos.y);
            _pos.subSelf(this.node.position);
            var pos = this.clampPos(_pos, this.movePointMoveCenterPos, this.movePointMoveRadius);
            console.log(pos);
            this.setMovePointPos(pos);
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.init();
          cc.director.emit(EventHelper_1.EventHelper.PLAYER_ATTACK);
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.init();
          cc.director.emit(EventHelper_1.EventHelper.PLAYER_ATTACK);
        }, this);
        this.init();
      };
      JoyController.prototype.init = function() {
        this.touchID = -1;
        this.joystickInputDir = new cc.Vec3();
        this.setFixedPointPos(this.fixedPointMoveCenterPos);
        this.setMovePointPos(this.fixedPointMoveCenterPos);
      };
      JoyController.prototype.setFixedPointPos = function(pos) {
        this.fixedPoint.setPosition(cc.v3(0, 0));
      };
      JoyController.prototype.getFixedPointPos = function() {
        return this.fixedPoint.getPosition();
      };
      JoyController.prototype.setMovePointPos = function(pos) {
        this.movePoint.setPosition(pos);
      };
      JoyController.prototype.getMovePointPos = function() {
        return this.movePoint.getPosition();
      };
      JoyController.prototype.clampPos = function(pos, centerPos, radius) {
        var dpos = pos.sub(centerPos);
        return dpos.mag() > radius ? dpos.normalize().mul(radius).add(centerPos) : pos;
      };
      JoyController.prototype.getInputDir = function() {
        var dir = this.movePoint.getPosition().sub(this.fixedPoint.getPosition());
        dir.mag() > 0 && dir.normalizeSelf();
        return dir;
      };
      JoyController.prototype.getInputQuadrantDir = function() {
        return this.getVec2ByQuadrant(this.getDirQuadrant(this.getInputDir()));
      };
      JoyController.prototype.getDirQuadrant = function(vec) {
        var dirQuadrant = null;
        vec.mag() > 0 && (dirQuadrant = Math.floor(this.getAngleByVec2(vec) / this.anglePreDirQuadrant));
        return dirQuadrant;
      };
      JoyController.prototype.getAngleByVec2 = function(vec) {
        return 180 * -Math.atan2(vec.y, vec.x) / Math.PI + this.anglePreDirQuadrant / 2;
      };
      JoyController.prototype.getVec2ByAngle = function(angle) {
        var dir = new cc.Vec2();
        var rad = (this.anglePreDirQuadrant / 2 - angle) * (Math.PI / 180);
        dir.x = Math.cos(rad);
        dir.y = Math.sin(rad);
        return dir.normalizeSelf();
      };
      JoyController.prototype.getVec2ByQuadrant = function(dirQuadrant) {
        if (null != dirQuadrant) {
          var angle = dirQuadrant * this.anglePreDirQuadrant;
          angle += this.anglePreDirQuadrant / 2;
          return this.getVec2ByAngle(angle);
        }
        return cc.Vec2.ZERO;
      };
      JoyController.prototype.sendMoveMessageToPlayer = function(dt) {
        var v = this.getInputQuadrantDir();
        var dir = 4;
        if (Math.abs(v.x) < Math.abs(v.y)) {
          v.y > .3 && (dir = 0);
          v.y < -.3 && (dir = 1);
        }
        if (Math.abs(v.x) > Math.abs(v.y)) {
          v.x < -.3 && (dir = 2);
          v.x > .3 && (dir = 3);
        }
        var pos = this.getInputDir();
        cc.director.emit(EventHelper_1.EventHelper.PLAYER_ROTATE, {
          detail: {
            dir: dir,
            pos: pos,
            dt: dt
          }
        });
      };
      JoyController.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      JoyController.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.sendMoveMessageToPlayer(dt);
      };
      __decorate([ property(cc.Integer) ], JoyController.prototype, "anglePreDirQuadrant", void 0);
      __decorate([ property(cc.Node) ], JoyController.prototype, "fixedPoint", void 0);
      __decorate([ property(cc.Node) ], JoyController.prototype, "movePoint", void 0);
      __decorate([ property ], JoyController.prototype, "movePointMoveRadius", void 0);
      JoyController = __decorate([ ccclass ], JoyController);
      return JoyController;
    }(cc.Component);
    exports.default = JoyController;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper"
  } ],
  Joystick: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3868eVgi9Ewpbgxpufia3p", "Joystick");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./EventHelper");
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NewClass = function(_super) {
      __extends(NewClass, _super);
      function NewClass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.anglePreDirQuadrant = 23;
        _this.fixedPoint = null;
        _this.movePoint = null;
        _this.movePointMoveRadius = 100;
        _this.stopCount = 0;
        _this.timeDelay = 0;
        return _this;
      }
      NewClass.prototype.onLoad = function() {
        var nodeSize = this.node.getContentSize();
        this.touchArea = new cc.Vec3(nodeSize.width, nodeSize.height);
        this.fixedPointMoveCenterPos = this.touchArea.div(0, this.touchArea);
        this.fixedPointMoveRadius = this.touchArea.x / 2 - this.movePointMoveRadius;
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (-1 == this.touchID) {
            var touchStartPos = event.getLocation();
            var _pos = new cc.Vec3(touchStartPos.x, touchStartPos.y);
            _pos.subSelf(this.node.position);
            var pos = this.clampPos(_pos, this.fixedPointMoveCenterPos, this.fixedPointMoveRadius);
            this.movePointMoveCenterPos = pos;
            this.setFixedPointPos(pos);
            this.setMovePointPos(pos);
            this.touchID = event.getID();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          if (this.touchID == event.getID()) {
            var nowPos = event.getLocation();
            var _pos = new cc.Vec3(nowPos.x, nowPos.y);
            _pos.subSelf(this.node.position);
            var pos = this.clampPos(_pos, this.movePointMoveCenterPos, this.movePointMoveRadius);
            this.setMovePointPos(pos);
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.init();
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.init();
        }, this);
        this.init();
      };
      NewClass.prototype.init = function() {
        this.touchID = -1;
        this.joystickInputDir = new cc.Vec3();
        this.setFixedPointPos(this.fixedPointMoveCenterPos);
        this.setMovePointPos(this.fixedPointMoveCenterPos);
      };
      NewClass.prototype.setFixedPointPos = function(pos) {
        this.fixedPoint.setPosition(pos);
      };
      NewClass.prototype.getFixedPointPos = function() {
        return this.fixedPoint.getPosition();
      };
      NewClass.prototype.setMovePointPos = function(pos) {
        this.movePoint.setPosition(pos);
      };
      NewClass.prototype.getMovePointPos = function() {
        return this.movePoint.getPosition();
      };
      NewClass.prototype.clampPos = function(pos, centerPos, radius) {
        var dpos = pos.sub(centerPos);
        return dpos.mag() > radius ? dpos.normalize().mul(radius).add(centerPos) : pos;
      };
      NewClass.prototype.getInputDir = function() {
        var dir = this.movePoint.getPosition().sub(this.fixedPoint.getPosition());
        (isNaN(dir.x) || isNaN(dir.y)) && (dir = cc.v2(0, 0));
        dir.mag() > 0 && dir.normalizeSelf();
        return dir;
      };
      NewClass.prototype.getInputQuadrantDir = function() {
        return this.getVec2ByQuadrant(this.getDirQuadrant(this.getInputDir()));
      };
      NewClass.prototype.getDirQuadrant = function(vec) {
        var dirQuadrant = null;
        vec.mag() > 0 && (dirQuadrant = Math.floor(this.getAngleByVec2(vec) / this.anglePreDirQuadrant));
        return dirQuadrant;
      };
      NewClass.prototype.getAngleByVec2 = function(vec) {
        return 180 * -Math.atan2(vec.y, vec.x) / Math.PI + this.anglePreDirQuadrant / 2;
      };
      NewClass.prototype.getVec2ByAngle = function(angle) {
        var dir = new cc.Vec2();
        var rad = (this.anglePreDirQuadrant / 2 - angle) * (Math.PI / 180);
        dir.x = Math.cos(rad);
        dir.y = Math.sin(rad);
        return dir.normalizeSelf();
      };
      NewClass.prototype.getVec2ByQuadrant = function(dirQuadrant) {
        if (null != dirQuadrant) {
          var angle = dirQuadrant * this.anglePreDirQuadrant;
          angle += this.anglePreDirQuadrant / 2;
          return this.getVec2ByAngle(angle);
        }
        return cc.Vec2.ZERO;
      };
      NewClass.prototype.sendMoveMessageToPlayer = function(dt) {
        if (Logic_1.default.isGamePause) return;
        var v = this.getInputQuadrantDir();
        var dir = 4;
        if (Math.abs(v.x) < Math.abs(v.y)) {
          v.y > .3 && (dir = 0);
          v.y < -.3 && (dir = 1);
        }
        if (Math.abs(v.x) > Math.abs(v.y)) {
          v.x < -.3 && (dir = 2);
          v.x > .3 && (dir = 3);
        }
        var pos = this.getInputDir();
        pos.equals(cc.Vec2.ZERO) ? this.stopCount++ : this.stopCount = 0;
        this.stopCount < 2 && cc.director.emit(EventHelper_1.EventHelper.PLAYER_MOVE, {
          detail: {
            dir: dir,
            pos: pos,
            dt: dt
          }
        });
      };
      NewClass.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      NewClass.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.sendMoveMessageToPlayer(dt);
      };
      __decorate([ property(cc.Integer) ], NewClass.prototype, "anglePreDirQuadrant", void 0);
      __decorate([ property(cc.Node) ], NewClass.prototype, "fixedPoint", void 0);
      __decorate([ property(cc.Node) ], NewClass.prototype, "movePoint", void 0);
      __decorate([ property ], NewClass.prototype, "movePointMoveRadius", void 0);
      NewClass = __decorate([ ccclass ], NewClass);
      return NewClass;
    }(cc.Component);
    exports.default = NewClass;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  KeyboardController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b57f7ePcl9JD6/oAh/+vpUg", "KeyboardController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./EventHelper");
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var KeyboardController = function(_super) {
      __extends(KeyboardController, _super);
      function KeyboardController() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.stopCount = 0;
        _this.isUp = false;
        _this.isDown = false;
        _this.isLeft = false;
        _this.isRight = false;
        _this.isA = false;
        _this.isB = false;
        _this.isC = false;
        _this.isD = false;
        _this.isE = false;
        _this.isLongPress = false;
        _this.touchStart = false;
        _this.mouseArea = null;
        _this.timeDelay = 0;
        return _this;
      }
      KeyboardController.prototype.onLoad = function() {
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
      };
      KeyboardController.prototype.start = function() {};
      KeyboardController.prototype.onKeyDown = function(event) {
        var _this = this;
        switch (event.keyCode) {
         case cc.macro.KEY.w:
          this.isUp = true;
          break;

         case cc.macro.KEY.s:
          this.isDown = true;
          break;

         case cc.macro.KEY.a:
          this.isLeft = true;
          break;

         case cc.macro.KEY.d:
          this.isRight = true;
          break;

         case cc.macro.KEY.i:
          this.openInventory();
          break;

         case cc.macro.KEY.u:
          this.openCellphone();
          break;

         case cc.macro.KEY.j:
          this.isA = true;
          break;

         case cc.macro.KEY.space:
          this.isB = true;
          break;

         case cc.macro.KEY.e:
          this.isC = true;
          this.touchStart = true;
          this.scheduleOnce(function() {
            if (!_this.touchStart) return;
            _this.isLongPress = true;
            _this.trigger(true);
          }, .3);
          break;

         case cc.macro.KEY.r:
          this.isD = true;
          break;

         case cc.macro.KEY.f:
          this.isE = true;
          break;

         case cc.macro.KEY.num1:
          this.useItem(0);
          break;

         case cc.macro.KEY.num2:
          this.useItem(1);
          break;

         case cc.macro.KEY.num3:
          this.useItem(2);
          break;

         case 49:
          this.useItem(0);
          break;

         case 50:
          this.useItem(1);
          break;

         case 51:
          this.useItem(2);
          break;

         case cc.macro.KEY.escape:
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CANCEL_OR_PAUSE);
        }
      };
      KeyboardController.prototype.trigger = function(isLongPress) {
        Logic_1.default.isGamePause || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_TRIGGER, {
          isLongPress: isLongPress
        });
      };
      KeyboardController.prototype.openInventory = function() {
        Logic_1.default.isGamePause || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_SHOW);
      };
      KeyboardController.prototype.openCellphone = function() {
        Logic_1.default.isGamePause || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_INVENTORY_SHOW);
      };
      KeyboardController.prototype.useItem = function(index) {
        Logic_1.default.isGamePause || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.USEITEM_KEYBOARD, {
          index: index
        });
      };
      KeyboardController.prototype.onKeyUp = function(event) {
        switch (event.keyCode) {
         case cc.macro.KEY.w:
          this.isUp = false;
          break;

         case cc.macro.KEY.s:
          this.isDown = false;
          break;

         case cc.macro.KEY.a:
          this.isLeft = false;
          break;

         case cc.macro.KEY.d:
          this.isRight = false;
          break;

         case cc.macro.KEY.j:
          this.isA = false;
          break;

         case cc.macro.KEY.space:
          this.isB = false;
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK_CANCEL);
          break;

         case cc.macro.KEY.e:
          this.isC = false;
          this.isLongPress || this.trigger();
          this.touchStart = false;
          this.isLongPress = false;
          break;

         case cc.macro.KEY.r:
          this.isD = false;
          break;

         case cc.macro.KEY.f:
          this.isE = false;
        }
      };
      KeyboardController.prototype.update = function(dt) {
        this.isTimeDelay(dt) && this.sendMoveMessageToPlayer(dt);
      };
      KeyboardController.prototype.sendMoveMessageToPlayer = function(dt) {
        if (Logic_1.default.isGamePause) return;
        var pos = cc.v3(0, 0);
        this.isUp && pos.addSelf(cc.v3(0, .9));
        this.isDown && pos.addSelf(cc.v3(0, -.9));
        this.isLeft && pos.addSelf(cc.v3(-.9, 0));
        this.isRight && pos.addSelf(cc.v3(.9, 0));
        pos.mag() > 0 && pos.normalizeSelf();
        var dir = 4;
        if (Math.abs(pos.x) < Math.abs(pos.y)) {
          pos.y > .3 && (dir = 0);
          pos.y < -.3 && (dir = 1);
        }
        if (Math.abs(pos.x) > Math.abs(pos.y)) {
          pos.x < -.3 && (dir = 2);
          pos.x > .3 && (dir = 3);
        }
        pos.equals(cc.Vec3.ZERO) ? this.stopCount++ : this.stopCount = 0;
        this.stopCount < 2 && cc.director.emit(EventHelper_1.EventHelper.PLAYER_MOVE, {
          detail: {
            dir: dir,
            pos: pos,
            dt: dt
          }
        });
        this.isA && cc.director.emit(EventHelper_1.EventHelper.PLAYER_ATTACK);
        this.isB && cc.director.emit(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK);
        this.isD && cc.director.emit(EventHelper_1.EventHelper.PLAYER_SKILL);
        this.isE && cc.director.emit(EventHelper_1.EventHelper.PLAYER_SKILL1);
      };
      KeyboardController.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > .03) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      __decorate([ property(cc.Node) ], KeyboardController.prototype, "mouseArea", void 0);
      KeyboardController = __decorate([ ccclass ], KeyboardController);
      return KeyboardController;
    }(cc.Component);
    exports.default = KeyboardController;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper",
    "./Logic": "Logic"
  } ],
  KrakenSwingHand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15ea4rtPQxD8pcJLX7yPozV", "KrakenSwingHand");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var FromData_1 = require("../Data/FromData");
    var Kraken_1 = require("./Kraken");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var KrakenSwingHand = function(_super) {
      __extends(KrakenSwingHand, _super);
      function KrakenSwingHand() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.damage = 2;
        _this.isShow = false;
        return _this;
      }
      KrakenSwingHand.prototype.onLoad = function() {
        this.anim = this.node.parent.getComponent(cc.Animation);
      };
      KrakenSwingHand.prototype.swing = function() {
        this.anim.play();
      };
      KrakenSwingHand.prototype.start = function() {
        this.isShow = false;
      };
      KrakenSwingHand.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isShow && this.node.active) {
          this.node.stopAllActions();
          var dd = new DamageData_1.default();
          dd.physicalDamage = this.damage;
          target.takeDamage(dd, FromData_1.default.getClone(this.actorName(), "boss001"), this.node.parent.getComponent(Kraken_1.default));
        }
      };
      KrakenSwingHand.prototype.actorName = function() {
        return "\u6d77\u5996";
      };
      __decorate([ property ], KrakenSwingHand.prototype, "damage", void 0);
      KrakenSwingHand = __decorate([ ccclass ], KrakenSwingHand);
      return KrakenSwingHand;
    }(cc.Component);
    exports.default = KrakenSwingHand;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Utils/ActorUtils": "ActorUtils",
    "./Kraken": "Kraken"
  } ],
  Kraken: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cbbb1U+Yy5Jtb8PV4hyvH/c", "Kraken");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Shooter_1 = require("../Shooter");
    var EventHelper_1 = require("../EventHelper");
    var KrakenSwingHand_1 = require("./KrakenSwingHand");
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var Boss_1 = require("./Boss");
    var NextStep_1 = require("../Utils/NextStep");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var IndexZ_1 = require("../Utils/IndexZ");
    var Item_1 = require("../Item/Item");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Kraken = function(_super) {
      __extends(Kraken, _super);
      function Kraken() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.swingHand = null;
        _this.timeDelay = 0;
        _this.remoteSkill = new NextStep_1.default();
        _this.handSkill = new NextStep_1.default();
        _this.nearHandSkill = new NextStep_1.default();
        _this.hands = [];
        _this.actionTimeDelay = 0;
        return _this;
      }
      Kraken.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.shooter = this.getComponentInChildren(Shooter_1.default);
        this.shooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "boss001"));
        this.anim = this.getComponent(cc.Animation);
      };
      Kraken.prototype.ShowFinish = function() {
        this.anim.play("KrakenHeadIdle");
        this.sc.isShow = true;
        var pos1 = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE, -4));
        var pos2 = Dungeon_1.default.getPosInMap(cc.v3(-2, -4));
        var pos3 = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE, Dungeon_1.default.HEIGHT_SIZE));
        var pos4 = Dungeon_1.default.getPosInMap(cc.v3(-2, Dungeon_1.default.HEIGHT_SIZE));
        this.hand01 = this.addHand(pos1, true, true);
        this.hand02 = this.addHand(pos2, false, true);
        this.hand03 = this.addHand(pos3, true, false);
        this.hand04 = this.addHand(pos4, false, false);
      };
      Kraken.prototype.addHand = function(pos, isReverse, isUp) {
        var hand = cc.instantiate(this.swingHand);
        this.dungeon.node.addChild(hand);
        hand.setPosition(pos);
        hand.scaleX = isReverse ? -80 : 80;
        hand.scaleY = isUp ? -80 : 80;
        hand.zIndex = IndexZ_1.default.OVERHEAD;
        var h = hand.getComponentInChildren(KrakenSwingHand_1.default);
        this.scheduleOnce(function() {
          h.isShow = true;
        }, 2);
        this.hands.push(h);
        return h;
      };
      Kraken.prototype.updatePlayerPos = function() {
        var pos = Dungeon_1.default.getPosInMap(cc.v3(Dungeon_1.default.WIDTH_SIZE / 2, Dungeon_1.default.HEIGHT_SIZE + 2));
        this.node.setPosition(pos);
      };
      Kraken.prototype.changeZIndex = function() {
        this.node.zIndex = IndexZ_1.default.KRAKENBODY;
      };
      Kraken.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      Kraken.prototype.takeDamage = function(damage) {
        var _this = this;
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        this.nearHandSkill.next(function() {
          _this.dungeon.player.pos.x > Dungeon_1.default.WIDTH_SIZE / 2 ? _this.hand03 && _this.hand03.swing() : _this.hand04 && _this.hand04.swing();
        }, 5);
        return true;
      };
      Kraken.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.changeZIndex();
        for (var _i = 0, _a = this.hands; _i < _a.length; _i++) {
          var hand = _a[_i];
          hand.isShow = false;
          hand.node.active = false;
        }
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Kraken.prototype.getLoot = function(isSteal) {
        if (this.dungeon) {
          var rand4save = Logic_1.default.mapManager.getRandom4Save(this.seed);
          var p = cc.v3(Math.floor(Dungeon_1.default.WIDTH_SIZE / 2), Math.floor(Dungeon_1.default.HEIGHT_SIZE / 2));
          var pos = Dungeon_1.default.getPosInMap(p);
          cc.director.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
            detail: {
              pos: pos,
              count: 19
            }
          });
          isSteal || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, {
            pos: this.node.position,
            count: 100
          });
          var chance = Logic_1.default.getHalfChance() && isSteal || !isSteal;
          if (chance) {
            cc.director.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              detail: {
                pos: this.node.position,
                res: Item_1.default.HEART
              }
            });
            cc.director.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              detail: {
                pos: this.node.position,
                res: Item_1.default.DREAM
              }
            });
          }
          this.dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(p), null, 3);
        }
      };
      Kraken.prototype.showBoss = function() {
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("KrakenHeadShow");
      };
      Kraken.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Kraken.prototype.updateLogic = function(dt) {
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.label && (this.label.string = "" + this.node.zIndex);
        this.healthBar.node.active = !this.sc.isDied;
      };
      Kraken.prototype.bossAction = function() {
        var _this = this;
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.hand01 && (this.hand01.node.parent.y = Logic_1.default.lerp(this.hand01.node.y, this.dungeon.player.node.y, .1));
        this.hand02 && (this.hand02.node.parent.y = Logic_1.default.lerp(this.hand02.node.y, this.dungeon.player.node.y, .1));
        this.shooter && this.remoteSkill.next(function() {
          _this.shooter.skipTopwall = true;
          var pos = _this.node.position.clone().add(_this.shooter.node.position);
          var hv = _this.dungeon.player.getCenterPosition().sub(pos);
          if (!hv.equals(cc.Vec3.ZERO)) {
            hv = hv.normalizeSelf();
            _this.shooter.setHv(hv);
            _this.shooter.dungeon = _this.dungeon;
            _this.shooter.data.bulletType = "bullet004";
            _this.shooter.fireBullet();
            _this.shooter.fireBullet(30);
            _this.shooter.fireBullet(-30);
          }
          if (_this.data.currentHealth < _this.data.Common.maxHealth / 2) {
            _this.dungeon.addFallStone(_this.dungeon.player.node.position, true);
            _this.shooter.fireBullet(30);
            _this.shooter.fireBullet(-30);
            _this.shooter.fireBullet(15);
            _this.shooter.fireBullet(-15);
          }
        }, 3);
        this.handSkill.next(function() {
          _this.dungeon.player.pos.x > Dungeon_1.default.WIDTH_SIZE / 2 ? _this.hand01 && _this.hand01.swing() : _this.hand02 && _this.hand02.swing();
        }, 10);
      };
      Kraken.prototype.actorName = function() {
        return "\u6d77\u5996";
      };
      __decorate([ property(cc.Label) ], Kraken.prototype, "label", void 0);
      __decorate([ property(cc.Prefab) ], Kraken.prototype, "swingHand", void 0);
      Kraken = __decorate([ ccclass ], Kraken);
      return Kraken;
    }(Boss_1.default);
    exports.default = Kraken;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Item/Item": "Item",
    "../Logic": "Logic",
    "../Shooter": "Shooter",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "../Utils/NextStep": "NextStep",
    "./Boss": "Boss",
    "./KrakenSwingHand": "KrakenSwingHand"
  } ],
  LevelData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58686Q/aZlPRJziOF8GmsMo", "LevelData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ExitData_1 = require("./ExitData");
    var LevelData = function() {
      function LevelData() {
        this.name = "";
        this.index = 0;
        this.chapter = 0;
        this.width = 0;
        this.height = 0;
        this.seed = 0;
        this.roomWidth = 0;
        this.roomHeight = 0;
        this.floorRes = "";
        this.floorCoverRes = "";
        this.floorCoverRes1 = "";
        this.floorCoverRes2 = "";
        this.floorCoverRes3 = "";
        this.floorCoverRes4 = "";
        this.floorCoverRes5 = "";
        this.wallRes1 = "";
        this.wallRes2 = "";
        this.wallRes3 = "";
        this.wallRes4 = "";
        this.wallRes5 = "";
        this.wallRes6 = "";
        this.doorRes = "";
        this.exitRes = "";
        this.needRadomDecorate = false;
        this.map = [];
        this.roomTypes = [];
        this.minimap = [];
        this.minimaplock = [];
        this.exits = "";
      }
      LevelData.prototype.valueCopy = function(data) {
        this.name = data.name;
        this.index = data.index;
        this.chapter = data.chapter;
        this.width = data.width;
        this.height = data.height;
        this.seed = data.seed;
        this.roomWidth = data.roomWidth;
        this.roomHeight = data.roomHeight;
        this.map = data.map;
        this.roomTypes = data.roomTypes;
        this.minimap = data.minimap;
        this.minimaplock = data.minimaplock;
        this.floorRes = data.floorRes;
        this.floorCoverRes = data.floorCoverRes;
        this.floorCoverRes1 = data.floorCoverRes1;
        this.floorCoverRes2 = data.floorCoverRes2;
        this.floorCoverRes3 = data.floorCoverRes3;
        this.floorCoverRes4 = data.floorCoverRes4;
        this.floorCoverRes5 = data.floorCoverRes5;
        this.wallRes1 = data.wallRes1;
        this.wallRes2 = data.wallRes2;
        this.wallRes3 = data.wallRes3;
        this.wallRes4 = data.wallRes4;
        this.wallRes5 = data.wallRes5;
        this.wallRes6 = data.wallRes6;
        this.doorRes = data.doorRes;
        this.exitRes = data.exitRes;
        this.exits = data.exits;
        this.needRadomDecorate = data.needRadomDecorate;
      };
      LevelData.prototype.getRoomMap = function(x, y) {
        var temp = new Array();
        if (x < 0 || y < 0 || x > this.width - 1 || y > this.height - 1) return temp;
        for (var i = 0; i < this.roomWidth; i++) {
          temp[i] = new Array();
          for (var j = 0; j < this.roomHeight; j++) temp[i][j] = this.map[i + x * this.roomWidth][j + y * this.roomHeight];
        }
        return temp;
      };
      LevelData.prototype.getExitList = function() {
        var list = new Array();
        if (this.exits && this.exits.length > 0) {
          var arr = this.exits.split("#");
          for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var str = arr_1[_i];
            var data = new ExitData_1.default();
            var temps = str.split(",");
            var fx = parseInt(temps[0]);
            var fy = this.roomHeight * this.height - parseInt(temps[1]) - 1;
            var tx = parseInt(temps[4]);
            var ty = parseInt(temps[5]);
            var roomX = Math.floor(fx / this.roomWidth);
            var roomY = Math.floor(fy / this.roomHeight);
            data.fromRoomPos = cc.v3(roomX, roomY);
            data.fromPos = cc.v3(fx % this.roomWidth, fy % this.roomHeight);
            data.fromChapter = this.chapter;
            data.fromLevel = this.index;
            data.toChapter = parseInt(temps[2]);
            data.toLevel = parseInt(temps[3]);
            data.toPos = cc.v3(tx, ty);
            list.push(data);
          }
        }
        return list;
      };
      return LevelData;
    }();
    exports.default = LevelData;
    cc._RF.pop();
  }, {
    "./ExitData": "ExitData"
  } ],
  LightBuilding: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2591n42odFIbhfimSigtUE", "LightBuilding");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LightBuilding = function(_super) {
      __extends(LightBuilding, _super);
      function LightBuilding() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      LightBuilding.prototype.onLoad = function() {};
      LightBuilding = __decorate([ ccclass ], LightBuilding);
      return LightBuilding;
    }(Building_1.default);
    exports.default = LightBuilding;
    cc._RF.pop();
  }, {
    "./Building": "Building"
  } ],
  LightManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "28a3dFSvA1P3KOJyNBCO1Gn", "LightManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseManager_1 = require("./BaseManager");
    var Logic_1 = require("../Logic");
    var IndexZ_1 = require("../Utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LightManager = function(_super) {
      __extends(LightManager, _super);
      function LightManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.camera = null;
        _this.shadowCamera = null;
        _this.shadow = null;
        _this.shadowRay = null;
        _this.checkTimeDelay = 0;
        return _this;
      }
      LightManager_1 = LightManager;
      LightManager.prototype.clear = function() {
        LightManager_1.lightList = [];
      };
      LightManager.prototype.onLoad = function() {
        this.mat = this.shadow.getMaterial(0);
      };
      LightManager.prototype.render = function() {
        for (var i = 0; i < LightManager_1.lightList.length; i++) {
          var light = LightManager_1.lightList[i];
          if (light) {
            light.renderSightArea(this.camera);
            this.renderRay(light, 0 == i, this.shadowRay);
          }
        }
        if (!this.shadowTexture && Logic_1.default.settings.showShadow) {
          this.shadowTexture = new cc.RenderTexture();
          this.shadowTexture.initWithSize(cc.visibleRect.width / 8, cc.visibleRect.height / 8);
          this.shadowTexture.setFilters(cc.Texture2D.Filter.NEAREST, cc.Texture2D.Filter.NEAREST);
          this.shadowCamera.targetTexture = this.shadowTexture;
          this.shadow.spriteFrame = new cc.SpriteFrame(this.shadowTexture);
        }
      };
      LightManager.registerLight = function(lights, actorNode) {
        for (var _i = 0, lights_1 = lights; _i < lights_1.length; _i++) {
          var light = lights_1[_i];
          light.showShadow = light.node.active;
          if (light.fromSky) {
            var p = light.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
            light.node.parent = actorNode.parent;
            light.node.position = light.node.parent.convertToNodeSpaceAR(p);
            light.node.zIndex = IndexZ_1.default.OVERHEAD;
          }
          LightManager_1.lightList.push(light);
        }
      };
      LightManager.unRegisterLight = function(light) {
        var index = LightManager_1.lightList.indexOf(light);
        -1 != index && LightManager_1.lightList.splice(index, 1);
      };
      LightManager.prototype.renderRay = function(light, isFirst, graphics) {
        var potArr = light.lightVertsArray;
        var lightRects = light.lightRects;
        var circle = light.circle;
        isFirst && graphics.clear(false);
        if (!Logic_1.default.settings.showShadow || !light.showShadow) return;
        graphics.lineWidth = 10;
        graphics.fillColor.fromHEX("ffffff");
        if (potArr && potArr.length > 0) {
          var p0 = graphics.node.convertToNodeSpaceAR(potArr[0]);
          graphics.moveTo(p0.x, p0.y);
          for (var i = 1; i < potArr.length; i++) {
            var p = graphics.node.convertToNodeSpaceAR(potArr[i]);
            graphics.lineTo(p.x, p.y);
          }
          graphics.close();
          graphics.fill();
        }
        for (var key in lightRects) {
          var lightRect = lightRects[key];
          var c = graphics.node.convertToNodeSpaceAR(cc.v2(lightRect.x, lightRect.y));
          graphics.rect(c.x, c.y, lightRect.width, lightRect.height);
          graphics.fill();
        }
        if (circle && circle.z > 0) {
          var center = graphics.node.convertToNodeSpaceAR(cc.v3(circle.x, circle.y));
          graphics.circle(center.x, center.y, circle.z);
          graphics.fill();
        }
      };
      LightManager.prototype.fixShadowPos = function() {
        if (this.camera) {
          var p1 = this.camera.node.convertToWorldSpaceAR(cc.v2(0, 0));
          if (this.shadow) {
            var c1 = this.shadowRay.node.convertToNodeSpaceAR(p1);
            this.shadow.node.position = cc.v3(c1);
          }
        }
      };
      LightManager.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .05) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      LightManager.prototype.update = function(dt) {
        this.isCheckTimeDelay(dt) && this.render();
        this.fixShadowPos();
      };
      var LightManager_1;
      LightManager.lightList = [];
      __decorate([ property(cc.Camera) ], LightManager.prototype, "camera", void 0);
      __decorate([ property(cc.Camera) ], LightManager.prototype, "shadowCamera", void 0);
      __decorate([ property(cc.Sprite) ], LightManager.prototype, "shadow", void 0);
      __decorate([ property(cc.Graphics) ], LightManager.prototype, "shadowRay", void 0);
      LightManager = LightManager_1 = __decorate([ ccclass ], LightManager);
      return LightManager;
    }(BaseManager_1.default);
    exports.default = LightManager;
    cc._RF.pop();
  }, {
    "../Logic": "Logic",
    "../Utils/IndexZ": "IndexZ",
    "./BaseManager": "BaseManager"
  } ],
  LightPointData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c7371Xi6Z1FDZidBXLVH9FT", "LightPointData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LightPointData = function() {
      function LightPointData() {}
      return LightPointData;
    }();
    exports.default = LightPointData;
    cc._RF.pop();
  }, {} ],
  Light: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03c71kep4JPC4OkHwKVSXdP", "Light");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Light = function(_super) {
      __extends(Light, _super);
      function Light() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.layer = null;
        _this.lightPrefab = null;
        return _this;
      }
      Light.prototype.onLoad = function() {};
      Light.prototype.start = function() {};
      __decorate([ property(cc.Node) ], Light.prototype, "layer", void 0);
      __decorate([ property(cc.Prefab) ], Light.prototype, "lightPrefab", void 0);
      Light = __decorate([ ccclass ], Light);
      return Light;
    }(cc.Component);
    exports.default = Light;
    cc._RF.pop();
  }, {} ],
  LoadingManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cdbddTOfANNwo68tyWHiEGz", "LoadingManager");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfessionData_1 = require("../Data/ProfessionData");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LoadingManager = function() {
      function LoadingManager() {
        this.spriteFrameNames = null;
        this.isEquipmentLoaded = false;
        this.isMonsterLoaded = false;
        this.isNonplayerLoaded = false;
        this.isWorldLoaded = false;
        this.isBuffsLoaded = false;
        this.isSuitsLoaded = false;
        this.isBulletsLoaded = false;
        this.isProfessionLoaded = false;
        this.isItemsLoaded = false;
        this.isSkillsLoaded = false;
        this.isBuildingLoaded = false;
        this.isFurnituresLoaded = false;
        this.isTransportAnimFinished = true;
      }
      LoadingManager_1 = LoadingManager;
      LoadingManager.prototype.init = function() {
        this.setAllSpriteFramesUnload();
        Logic_1.default.spriteFrames || (Logic_1.default.spriteFrames = {});
        Logic_1.default.buildings || (Logic_1.default.buildings = {});
        this.isWorldLoaded = false;
        this.isEquipmentLoaded = false;
        this.isMonsterLoaded = false;
        this.isBuffsLoaded = false;
        this.isNonplayerLoaded = false;
        this.isBuildingLoaded = false;
        this.isFurnituresLoaded = false;
      };
      LoadingManager.prototype.reset = function() {
        this.isWorldLoaded = false;
        this.isEquipmentLoaded = false;
        this.setAllSpriteFramesUnload();
        this.isBuffsLoaded = false;
        this.isProfessionLoaded = false;
        this.isBulletsLoaded = false;
        this.isMonsterLoaded = false;
        this.isNonplayerLoaded = false;
        this.isItemsLoaded = false;
        this.isSkillsLoaded = false;
        this.isBuildingLoaded = false;
        this.isTransportAnimFinished = false;
        this.isSuitsLoaded = false;
        this.isFurnituresLoaded = false;
      };
      LoadingManager.prototype.isSpriteFramesLoaded = function(loadedName) {
        if (!this.spriteFrameNames[loadedName]) return false;
        return true;
      };
      LoadingManager.prototype.isAllSpriteFramesLoaded = function() {
        for (var loadedName in this.spriteFrameNames) if (!this.spriteFrameNames[loadedName]) return false;
        return true;
      };
      LoadingManager.prototype.setAllSpriteFramesUnload = function() {
        this.spriteFrameNames = {};
        this.spriteFrameNames[LoadingManager_1.KEY_AUTO] = false;
        this.spriteFrameNames[LoadingManager_1.KEY_TEXTURES] = false;
        this.spriteFrameNames[LoadingManager_1.KEY_NPC] = false;
      };
      LoadingManager.prototype.loadWorld = function() {
        Logic_1.default.worldLoader.isloaded = false;
        Logic_1.default.worldLoader.loadWorld();
      };
      LoadingManager.prototype.loadEquipment = function() {
        var _this = this;
        if (Logic_1.default.equipments) {
          this.isEquipmentLoaded = true;
          return;
        }
        cc.resources.load("Data/equipment", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.equipments = resource.json;
            _this.isEquipmentLoaded = true;
            cc.log("equipment loaded");
            Logic_1.default.equipmentNameList = new Array();
            for (var key in resource.json) Logic_1.default.equipmentNameList.push(key);
          }
        });
      };
      LoadingManager.prototype.loadProfession = function() {
        var _this = this;
        if (Logic_1.default.professionList && Logic_1.default.professionList.length > 0) {
          this.isProfessionLoaded = true;
          return;
        }
        cc.resources.load("Data/profession", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.professionList = new Array();
            var arr = resource.json;
            for (var i = 0; i < arr.length; i++) {
              var data = new ProfessionData_1.default();
              data.valueCopy(arr[i]);
              data.id = i;
              Logic_1.default.professionList.push(data);
            }
            _this.isProfessionLoaded = true;
            cc.log("professionList loaded");
          }
        });
      };
      LoadingManager.prototype.loadTalents = function() {
        var _this = this;
        if (Logic_1.default.talents) {
          this.isSkillsLoaded = true;
          return;
        }
        cc.resources.load("Data/talent", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.talents = resource.json;
            _this.isSkillsLoaded = true;
            cc.log("talent loaded");
          }
        });
      };
      LoadingManager.prototype.loadStatus = function() {
        var _this = this;
        if (Logic_1.default.status) {
          this.isBuffsLoaded = true;
          return;
        }
        cc.resources.load("Data/status", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.status = resource.json;
            _this.isBuffsLoaded = true;
            cc.log("debuffs loaded");
          }
        });
      };
      LoadingManager.prototype.loadSuits = function() {
        var _this = this;
        if (Logic_1.default.suits) {
          this.isSuitsLoaded = true;
          return;
        }
        cc.resources.load("Data/suits", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.suits = resource.json;
            _this.isSuitsLoaded = true;
            cc.log("suits loaded");
          }
        });
      };
      LoadingManager.prototype.loadFurnitures = function() {
        var _this = this;
        if (Logic_1.default.furnitures) {
          this.isFurnituresLoaded = true;
          return;
        }
        cc.resources.load("Data/furnitures", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.furnitures = resource.json;
            _this.isFurnituresLoaded = true;
            cc.log("furnitures loaded");
          }
        });
      };
      LoadingManager.prototype.loadBullets = function() {
        var _this = this;
        if (Logic_1.default.bullets) {
          this.isBulletsLoaded = true;
          return;
        }
        cc.resources.load("Data/bullet", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.bullets = resource.json;
            _this.isBulletsLoaded = true;
            cc.log("bullets loaded");
          }
        });
      };
      LoadingManager.prototype.loadMonsters = function() {
        var _this = this;
        if (Logic_1.default.monsters) {
          this.isMonsterLoaded = true;
          return;
        }
        cc.resources.load("Data/monsters", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.monsters = resource.json;
            _this.isMonsterLoaded = true;
            cc.log("monsters loaded");
          }
        });
      };
      LoadingManager.prototype.loadNonplayer = function() {
        var _this = this;
        if (Logic_1.default.nonplayers) {
          this.isNonplayerLoaded = true;
          return;
        }
        cc.resources.load("Data/nonplayers", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.nonplayers = resource.json;
            _this.isNonplayerLoaded = true;
            cc.log("nonplayers loaded");
          }
        });
      };
      LoadingManager.prototype.loadBuildings = function() {
        var _this = this;
        if (Logic_1.default.buildings && Logic_1.default.buildings["Door"]) {
          this.isBuildingLoaded = true;
          return;
        }
        cc.resources.loadDir("Prefabs/buildings", cc.Prefab, function(err, assert) {
          for (var _i = 0, assert_1 = assert; _i < assert_1.length; _i++) {
            var prefab = assert_1[_i];
            Logic_1.default.buildings[prefab.name] = prefab;
          }
          _this.isBuildingLoaded = true;
          cc.log("buildings loaded");
        });
      };
      LoadingManager.prototype.loadItems = function() {
        var _this = this;
        if (Logic_1.default.items) {
          this.isItemsLoaded = true;
          return;
        }
        cc.resources.load("Data/item", function(err, resource) {
          if (err) cc.error(err); else {
            Logic_1.default.items = resource.json;
            Logic_1.default.itemNameList = new Array();
            Logic_1.default.goodsNameList = new Array();
            for (var key in resource.json) Logic_1.default.items[key].canSave && -1 == key.indexOf("food") && -1 == key.indexOf("goods") ? Logic_1.default.itemNameList.push(key) : -1 != key.indexOf("goods") && Logic_1.default.goodsNameList.push(key);
            _this.isItemsLoaded = true;
            cc.log("items loaded");
          }
        });
      };
      LoadingManager.prototype.loadAutoSpriteFrames = function() {
        var _this = this;
        if (Logic_1.default.spriteFrames && Logic_1.default.spriteFrameRes("auto")) {
          this.spriteFrameNames[LoadingManager_1.KEY_AUTO] = true;
          return;
        }
        cc.resources.loadDir("Texture/Auto", cc.SpriteFrame, function(err, assert) {
          for (var _i = 0, assert_2 = assert; _i < assert_2.length; _i++) {
            var frame = assert_2[_i];
            Logic_1.default.spriteFrames[frame.name] = frame;
          }
          _this.spriteFrameNames[LoadingManager_1.KEY_AUTO] = true;
          cc.log("auto texture loaded");
        });
      };
      LoadingManager.prototype.loadSpriteAtlas = function(typeKey, hasKey) {
        var _this = this;
        if (Logic_1.default.spriteFrames && Logic_1.default.spriteFrames[hasKey]) {
          this.spriteFrameNames[typeKey] = true;
          return;
        }
        cc.resources.load("Texture/" + typeKey, cc.SpriteAtlas, function(err, atlas) {
          for (var _i = 0, _a = atlas.getSpriteFrames(); _i < _a.length; _i++) {
            var frame = _a[_i];
            Logic_1.default.spriteFrames[frame.name] = frame;
          }
          _this.spriteFrameNames[typeKey] = true;
          cc.log(typeKey + " loaded");
        });
      };
      var LoadingManager_1;
      LoadingManager.KEY_AUTO = "auto";
      LoadingManager.KEY_TEXTURES = "textures";
      LoadingManager.KEY_NPC = "npc";
      LoadingManager = LoadingManager_1 = __decorate([ ccclass ], LoadingManager);
      return LoadingManager;
    }();
    exports.default = LoadingManager;
    cc._RF.pop();
  }, {
    "../Data/ProfessionData": "ProfessionData",
    "../Logic": "Logic"
  } ],
  Loading: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a2246gAT5JKc4YhD10URG7K", "Loading");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var CutScene_1 = require("./UI/CutScene");
    var LoadingManager_1 = require("./Manager/LoadingManager");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Loading = function(_super) {
      __extends(Loading, _super);
      function Loading() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.loadingIcon = null;
        _this.cutScene = null;
        _this.shipTransportScene = null;
        _this.elevatorScene = null;
        _this.timeDelay = 0;
        _this.isTransportAnimFinished = true;
        _this.isElevatorAnimFinished = true;
        _this.loadingManager = new LoadingManager_1.default();
        return _this;
      }
      Loading.prototype.onLoad = function() {
        this.loadingManager.init();
        this.loadingIcon.active = true;
      };
      Loading.prototype.start = function() {
        this.loadingManager.loadWorld();
        this.loadingManager.loadEquipment();
        this.loadingManager.loadAutoSpriteFrames();
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_TEXTURES, "ammo");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_NPC, "monster000anim000");
        this.loadingManager.loadMonsters();
        this.loadingManager.loadStatus();
        this.loadingManager.loadBullets();
        this.loadingManager.loadItems();
        this.loadingManager.loadTalents();
        this.loadingManager.loadProfession();
        this.loadingManager.loadNonplayer();
        this.loadingManager.loadBuildings();
        this.loadingManager.loadSuits();
        this.loadingManager.loadFurnitures();
        this.showLoadingLabel();
        if (1 == Logic_1.default.isFirst) {
          this.cutScene.isSkip = true;
          this.cutScene.unregisterClick();
        }
      };
      Loading.prototype.showLoadingLabel = function() {
        if (this.loadingManager.isAllSpriteFramesLoaded()) return;
        this.loadingIcon.active = true;
      };
      Loading.prototype.showCut = function() {
        if (this.loadingManager.isAllSpriteFramesLoaded() && 1 != Logic_1.default.isFirst) {
          Logic_1.default.isFirst = 1;
          this.cutScene.playShow();
        }
      };
      Loading.prototype.showElevator = function() {
        var _this = this;
        if (this.loadingManager.isAllSpriteFramesLoaded() && Logic_1.default.elevatorScene > 0) {
          this.isElevatorAnimFinished = false;
          this.elevatorScene.active = true;
          1 == Logic_1.default.elevatorScene ? this.elevatorScene.getComponent(cc.Animation).play("ElevatorSceneUp") : 2 == Logic_1.default.elevatorScene && this.elevatorScene.getComponent(cc.Animation).play("ElevatorSceneDown");
          Logic_1.default.elevatorScene = 0;
          this.scheduleOnce(function() {
            _this.isElevatorAnimFinished = true;
          }, 1.5);
        }
      };
      Loading.prototype.showTransport = function() {
        var _this = this;
        if (this.loadingManager.isAllSpriteFramesLoaded() && Logic_1.default.shipTransportScene > 0) {
          this.isTransportAnimFinished = false;
          this.shipTransportScene.active = true;
          2 == Logic_1.default.shipTransportScene && (this.shipTransportScene.scaleX = -1);
          AudioPlayer_1.default.play(AudioPlayer_1.default.TRANSPORTSHIP);
          Logic_1.default.shipTransportScene = 0;
          this.scheduleOnce(function() {
            _this.isTransportAnimFinished = true;
          }, 2);
        }
      };
      Loading.prototype.update = function(dt) {
        this.timeDelay += dt;
        this.loadingManager.isWorldLoaded = Logic_1.default.worldLoader.isloaded;
        this.showCut();
        this.showTransport();
        this.showElevator();
        if (this.timeDelay > .02 && this.loadingManager.isEquipmentLoaded && this.loadingManager.isAllSpriteFramesLoaded() && this.loadingManager.isMonsterLoaded && this.loadingManager.isNonplayerLoaded && this.loadingManager.isBuffsLoaded && this.loadingManager.isProfessionLoaded && this.loadingManager.isBulletsLoaded && this.loadingManager.isItemsLoaded && this.loadingManager.isSkillsLoaded && this.loadingManager.isWorldLoaded && this.loadingManager.isBuildingLoaded && this.loadingManager.isSuitsLoaded && this.loadingManager.isFurnituresLoaded && this.cutScene.isSkip && this.isTransportAnimFinished && this.isElevatorAnimFinished) {
          this.timeDelay = 0;
          this.cutScene.unregisterClick();
          this.isTransportAnimFinished = false;
          this.isElevatorAnimFinished = false;
          this.loadingManager.reset();
          Logic_1.default.mapManager.loadMap();
          cc.director.loadScene("game");
        }
      };
      __decorate([ property(cc.Node) ], Loading.prototype, "loadingIcon", void 0);
      __decorate([ property(CutScene_1.default) ], Loading.prototype, "cutScene", void 0);
      __decorate([ property(cc.Node) ], Loading.prototype, "shipTransportScene", void 0);
      __decorate([ property(cc.Node) ], Loading.prototype, "elevatorScene", void 0);
      Loading = __decorate([ ccclass ], Loading);
      return Loading;
    }(cc.Component);
    exports.default = Loading;
    cc._RF.pop();
  }, {
    "./Logic": "Logic",
    "./Manager/LoadingManager": "LoadingManager",
    "./UI/CutScene": "CutScene",
    "./Utils/AudioPlayer": "AudioPlayer"
  } ],
  LocalStorage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0a5cbOqRmZJE4RU1wzXgRD/", "LocalStorage");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AchievementData_1 = require("../Data/AchievementData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LocalStorage = function() {
      function LocalStorage() {}
      LocalStorage_1 = LocalStorage;
      LocalStorage.getValue = function(key) {
        return cc.sys.localStorage.getItem(key);
      };
      LocalStorage.putValue = function(key, value) {
        cc.sys.localStorage.setItem(key, JSON.stringify(value));
      };
      LocalStorage.getData = function() {
        var str = LocalStorage_1.getValue(LocalStorage_1.SAVE_NAME);
        str || (str = "{}");
        return JSON.parse(str);
      };
      LocalStorage.getValueFromData = function(key) {
        var str = LocalStorage_1.getValue(LocalStorage_1.SAVE_NAME);
        str || (str = "{}");
        return LocalStorage_1.getData()[key];
      };
      LocalStorage.saveData = function(key, value) {
        var data = LocalStorage_1.getData();
        data[key] = value;
        LocalStorage_1.putValue(LocalStorage_1.SAVE_NAME, data);
      };
      LocalStorage.getAchievementData = function() {
        var data = new AchievementData_1.default();
        data.valueCopy(LocalStorage_1.getData()[LocalStorage_1.KEY_ACHIEVEMENT]);
        return data;
      };
      LocalStorage.saveAchievementData = function(data) {
        LocalStorage_1.saveData(LocalStorage_1.KEY_ACHIEVEMENT, data);
      };
      LocalStorage.getFurnitureData = function(id) {
        var map = LocalStorage_1.getData()[LocalStorage_1.KEY_FURNITURES];
        map || (map = {});
        return map[id];
      };
      LocalStorage.saveFurnitureData = function(data) {
        if (!data) return;
        var map = LocalStorage_1.getData()[LocalStorage_1.KEY_FURNITURES];
        map || (map = {});
        map[data.id] = data;
        LocalStorage_1.saveData(LocalStorage_1.KEY_FURNITURES, map);
      };
      LocalStorage.isSwitchOpen = function(key) {
        var v = LocalStorage_1.getValueFromData(key);
        var num = v || 0 == v ? parseInt(v) : LocalStorage_1.DEFAULT_MAP[key];
        return 1 == num;
      };
      LocalStorage.saveSwitch = function(key, isOpen) {
        LocalStorage_1.saveData(key, isOpen ? 1 : 0);
      };
      var LocalStorage_1;
      LocalStorage.SAVE_NAME = "SINKDUNGEON_SAVE";
      LocalStorage.SAVE_DUNGEON = "SAVE_DUNGEON";
      LocalStorage.SAVE_DUNGEON_BY_POINT = "SAVE_DUNGEON_BY_POINT";
      LocalStorage.KEY_ACHIEVEMENT = "KEY_ACHIEVEMENT";
      LocalStorage.KEY_COIN = "KEY_COIN";
      LocalStorage.KEY_COIN_DREAM_COUNT = "KEY_DREAM_COIN_COUNT";
      LocalStorage.KEY_SWITCH_SHOW_SHADOW = "KEY_SWITCH_SHOW_SHADOW";
      LocalStorage.KEY_SWITCH_SHOW_GAMEPAD = "KEY_SWITCH_SHOW_GAMEPAD";
      LocalStorage.KEY_SWITCH_SHOW_EQUIPDIALOG = "KEY_SWITCH_SHOW_EQUIPDIALOG";
      LocalStorage.KEY_FURNITURES = "KEY_FURNITURES";
      LocalStorage.VAULE_OPEN = "1";
      LocalStorage.DEFAULT_MAP = {
        KEY_SWITCH_SHOW_SHADOW: 1,
        KEY_SWITCH_SHOW_GAMEPAD: 0,
        KEY_SWITCH_SHOW_EQUIPDIALOG: 0
      };
      LocalStorage = LocalStorage_1 = __decorate([ ccclass ], LocalStorage);
      return LocalStorage;
    }();
    exports.default = LocalStorage;
    cc._RF.pop();
  }, {
    "../Data/AchievementData": "AchievementData"
  } ],
  Logic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2225fYJ0sRMTZjuD7WFmbVi", "Logic");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerData_1 = require("./Data/PlayerData");
    var MapManager_1 = require("./Manager/MapManager");
    var Dungeon_1 = require("./Dungeon");
    var InventoryManager_1 = require("./Manager/InventoryManager");
    var Random_1 = require("./Utils/Random");
    var ProfileManager_1 = require("./Manager/ProfileManager");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var FromData_1 = require("./Data/FromData");
    var WorldLoader_1 = require("./Map/WorldLoader");
    var Settings_1 = require("./Model/Settings");
    var LocalStorage_1 = require("./Utils/LocalStorage");
    var SavePointData_1 = require("./Data/SavePointData");
    var NonPlayerData_1 = require("./Data/NonPlayerData");
    var InventoryData_1 = require("./Data/InventoryData");
    var GroundOilGoldData_1 = require("./Data/GroundOilGoldData");
    var OilGoldData_1 = require("./Data/OilGoldData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Logic = function(_super) {
      __extends(Logic, _super);
      function Logic() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Logic_1 = Logic;
      Logic.prototype.onLoad = function() {
        cc.game.setFrameRate(60);
        cc.game.addPersistRootNode(this.node);
        cc.director.getCollisionManager().enabled = true;
        cc.director.getPhysicsManager().enabled = true;
        cc.PhysicsManager.FIXED_TIME_STEP = 1 / 45;
        cc.PhysicsManager.VELOCITY_ITERATIONS = 8;
        cc.PhysicsManager.POSITION_ITERATIONS = 8;
      };
      Logic.prototype.start = function() {};
      Logic.saveData = function() {
        Logic_1.profileManager.data.playerData = Logic_1.playerData.clone();
        Logic_1.profileManager.data.playerEquips = Logic_1.inventoryManager.equips;
        Logic_1.profileManager.data.playerItemList = Logic_1.inventoryManager.itemList;
        Logic_1.profileManager.data.nonPlayerList = Logic_1.nonPlayerList;
        Logic_1.profileManager.data.playerInventoryList = Logic_1.inventoryManager.inventoryList;
        Logic_1.profileManager.data.rectDungeons[Logic_1.mapManager.rectDungeon.id] = Logic_1.mapManager.rectDungeon;
        Logic_1.profileManager.data.level = Logic_1.level;
        Logic_1.profileManager.data.chapterIndex = Logic_1.chapterIndex;
        Logic_1.profileManager.data.chapterMaxIndex = Logic_1.chapterMaxIndex;
        Logic_1.profileManager.data.time = Logic_1.time;
        Logic_1.profileManager.data.savePointData = Logic_1.savePoinitData.clone();
        Logic_1.profileManager.data.groundOilGoldData = Logic_1.groundOilGoldData.clone();
        Logic_1.profileManager.data.killPlayerCounts = Logic_1.killPlayerCounts;
        Logic_1.profileManager.data.oilGolds = Logic_1.oilGolds;
        Logic_1.profileManager.saveData();
        LocalStorage_1.default.saveData(LocalStorage_1.default.KEY_COIN, Logic_1.coins);
        LocalStorage_1.default.saveData(LocalStorage_1.default.KEY_COIN_DREAM_COUNT, Logic_1.coinDreamCount);
      };
      Logic.resetData = function(chapter) {
        Logic_1.time = Logic_1.profileManager.data.time;
        Logic_1.profileManager.data.chapterIndex = chapter || Logic_1.profileManager.data.chapterIndex;
        Logic_1.profileManager.data.chapterIndex > Logic_1.profileManager.data.chapterMaxIndex && Logic_1.profileManager.data.chapterIndex < this.CHAPTER05 && (Logic_1.profileManager.data.chapterMaxIndex = Logic_1.profileManager.data.chapterIndex);
        Logic_1.chapterIndex = Logic_1.profileManager.data.chapterIndex;
        Logic_1.chapterMaxIndex = Logic_1.profileManager.data.chapterMaxIndex;
        Logic_1.level = Logic_1.profileManager.data.level;
        Logic_1.savePoinitData = Logic_1.profileManager.data.savePointData.clone();
        Logic_1.groundOilGoldData = Logic_1.profileManager.data.groundOilGoldData.clone();
        Logic_1.oilGolds = Logic_1.profileManager.data.oilGolds;
        Logic_1.playerData = Logic_1.profileManager.data.playerData.clone();
        Logic_1.inventoryManager = new InventoryManager_1.default();
        for (var key in Logic_1.profileManager.data.playerEquips) Logic_1.inventoryManager.equips[key].valueCopy(Logic_1.profileManager.data.playerEquips[key]);
        for (var i = 0; i < Logic_1.profileManager.data.playerItemList.length; i++) Logic_1.inventoryManager.itemList[i].valueCopy(Logic_1.profileManager.data.playerItemList[i]);
        for (var i = 0; i < Logic_1.profileManager.data.playerInventoryList.length; i++) {
          var data = new InventoryData_1.default();
          data.valueCopy(Logic_1.profileManager.data.playerInventoryList[i]);
          Logic_1.inventoryManager.inventoryList.push(data);
        }
        Logic_1.nonPlayerList = [];
        for (var i = 0; i < Logic_1.profileManager.data.nonPlayerList.length; i++) {
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.profileManager.data.nonPlayerList[i]);
          Logic_1.nonPlayerList.push(data);
        }
        Logic_1.isMapReset = true;
        Dungeon_1.default.WIDTH_SIZE = 15;
        Dungeon_1.default.HEIGHT_SIZE = 9;
        var c = LocalStorage_1.default.getValueFromData(LocalStorage_1.default.KEY_COIN);
        Logic_1.coins = c ? parseInt(c) : 0;
        var c1 = LocalStorage_1.default.getValueFromData(LocalStorage_1.default.KEY_COIN_DREAM_COUNT);
        Logic_1.coinDreamCount = c1 ? parseInt(c1) : 0;
        Logic_1.lastBgmIndex = 0;
        Logic_1.killPlayerCounts = Logic_1.profileManager.data.killPlayerCounts;
        Logic_1.updateOilGoldCount();
      };
      Logic.updateOilGoldCount = function() {
        var value = Logic_1.oilGolds;
        var data = new OilGoldData_1.default();
        for (var i = 0; i < Logic_1.OIL_GOLD_LIST.length; i++) {
          var offset = value - Logic_1.OIL_GOLD_LIST[i];
          if (!(offset >= 0)) {
            data.index = i;
            break;
          }
          value = offset;
          data.level++;
        }
        data.fragments = value;
        data.Common.damageMin = data.level;
        data.Common.maxHealth = data.level;
        data.Common.maxDream = data.level;
        data.Common.remoteDamage = .25 * data.level;
        Logic_1.playerData.OilGoldData.valueCopy(data);
      };
      Logic.changeDungeonSize = function() {
        var size = Logic_1.mapManager.getCurrentMapSize();
        if (size) {
          Dungeon_1.default.WIDTH_SIZE = size.x;
          Dungeon_1.default.HEIGHT_SIZE = size.y;
        }
      };
      Logic.posToMapPos = function(pos) {
        var levelData = Logic_1.worldLoader.getCurrentLevelData();
        var roomPos = Logic_1.mapManager.rectDungeon.currentPos;
        var mapPos = cc.v3(0, 0);
        mapPos.x = levelData.roomWidth * roomPos.x + pos.x;
        mapPos.y = levelData.height * levelData.roomHeight - 1 - levelData.roomWidth * roomPos.y - pos.y;
        return mapPos;
      };
      Logic.savePonit = function(pos) {
        if (Logic_1.chapterIndex == Logic_1.CHAPTER099) return;
        var savePointData = new SavePointData_1.default();
        var mapPos = Logic_1.posToMapPos(pos);
        savePointData.x = mapPos.x;
        savePointData.y = mapPos.y;
        savePointData.level = Logic_1.level;
        savePointData.chapter = Logic_1.chapterIndex;
        Logic_1.savePoinitData.valueCopy(savePointData);
        Logic_1.saveData();
      };
      Logic.saveGroundOilGold = function(value) {
        var groundOilGoldData = new GroundOilGoldData_1.default();
        if (value > 0) {
          var roomPos = Logic_1.mapManager.rectDungeon.currentPos;
          groundOilGoldData.x = roomPos.x;
          groundOilGoldData.y = roomPos.y;
          groundOilGoldData.level = Logic_1.level;
          groundOilGoldData.chapter = Logic_1.chapterIndex;
          groundOilGoldData.value = value;
        }
        Logic_1.groundOilGoldData.valueCopy(groundOilGoldData);
        Logic_1.saveData();
      };
      Logic.loadingNextRoom = function(dir) {
        Logic_1.mapManager.rand4save = null;
        Logic_1.saveData();
        AudioPlayer_1.default.play(AudioPlayer_1.default.EXIT);
        var room = Logic_1.mapManager.loadingNextRoom(dir);
        if (room) {
          Logic_1.changeDungeonSize();
          switch (dir) {
           case 0:
            Logic_1.playerData.pos = cc.v3(Logic_1.playerData.pos.x, 1);
            break;

           case 1:
            Logic_1.playerData.pos = cc.v3(Logic_1.playerData.pos.x, Dungeon_1.default.HEIGHT_SIZE - 2);
            break;

           case 2:
            Logic_1.playerData.pos = cc.v3(Dungeon_1.default.WIDTH_SIZE - 2, Logic_1.playerData.pos.y);
            break;

           case 3:
            Logic_1.playerData.pos = cc.v3(1, Logic_1.playerData.pos.y);
          }
          cc.director.loadScene("loading");
        }
      };
      Logic.loadingNextLevel = function(exitData) {
        if (!exitData) return;
        var levelData = Logic_1.worldLoader.getLevelData(exitData.toChapter, exitData.toLevel);
        if (!levelData) return;
        if (exitData.fromChapter != Logic_1.CHAPTER099 && exitData.fromChapter != exitData.toChapter) {
          Logic_1.mapManager.rectDungeon.changeAllClearRoomsReborn();
          for (var rd in Logic_1.profileManager.data.rectDungeons) Logic_1.profileManager.data.rectDungeons[rd] && Logic_1.profileManager.data.rectDungeons[rd].changeAllClearRoomsReborn();
        }
        Logic_1.saveData();
        Logic_1.chapterIndex = exitData.toChapter;
        Logic_1.level = exitData.toLevel;
        Logic_1.chapterMaxIndex < Logic_1.chapterIndex && Logic_1.chapterIndex < Logic_1.CHAPTER05 && (Logic_1.chapterMaxIndex = Logic_1.chapterIndex);
        var ty = levelData.height * levelData.roomHeight - 1 - exitData.toPos.y;
        var roomX = Math.floor(exitData.toPos.x / levelData.roomWidth);
        var roomY = Math.floor(ty / levelData.roomHeight);
        Logic_1.playerData.pos = cc.v3(exitData.toPos.x % levelData.roomWidth, ty % levelData.roomHeight);
        Logic_1.mapManager.reset(cc.v3(roomX, roomY));
        Logic_1.changeDungeonSize();
        exitData.fromChapter == Logic_1.CHAPTER00 && Logic_1.chapterIndex == Logic_1.CHAPTER01 ? Logic_1.shipTransportScene = 1 : exitData.fromChapter == Logic_1.CHAPTER02 && Logic_1.chapterIndex == Logic_1.CHAPTER01 ? Logic_1.shipTransportScene = 2 : exitData.fromChapter == Logic_1.CHAPTER01 && Logic_1.chapterIndex == Logic_1.CHAPTER00 ? Logic_1.shipTransportScene = 2 : exitData.fromChapter == Logic_1.CHAPTER01 && Logic_1.chapterIndex == Logic_1.CHAPTER02 && (Logic_1.shipTransportScene = 1);
        exitData.fromChapter == Logic_1.CHAPTER00 && Logic_1.chapterIndex == Logic_1.CHAPTER00 && (0 == exitData.fromLevel && 0 == exitData.toLevel || (Logic_1.elevatorScene = exitData.fromLevel > Logic_1.level ? 1 : 2));
        cc.director.loadScene("loading");
      };
      Logic.getRandomNum = function(min, max) {
        return min + Math.round(Random_1.default.rand() * (max - min));
      };
      Logic.getHalfChance = function() {
        return Random_1.default.rand() > .5;
      };
      Logic.getChance = function(rate) {
        return Logic_1.getRandomNum(0, 100) < rate;
      };
      Logic.getDistance = function(v1, v2) {
        var x = v1.x - v2.x;
        var y = v1.y - v2.y;
        return Math.sqrt(x * x + y * y);
      };
      Logic.getDistanceNoSqrt = function(v1, v2) {
        var x = v1.x - v2.x;
        var y = v1.y - v2.y;
        return Math.abs(x) + Math.abs(y);
      };
      Logic.lerp = function(a, b, r) {
        return a + (b - a) * r;
      };
      Logic.lerpPos = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      Logic.genNonDuplicateID = function() {
        return Number(Random_1.default.rand().toString().substr(3, 16) + Date.now()).toString(36);
      };
      Logic.getRandomEquipType = function(rand4save) {
        return Logic_1.equipmentNameList[rand4save.getRandomNum(1, Logic_1.equipmentNameList.length - 1)];
      };
      Logic.getRandomItemType = function(rand4save) {
        return Logic_1.itemNameList[rand4save.getRandomNum(1, Logic_1.itemNameList.length - 1)];
      };
      Logic.spriteFrameRes = function(spriteFrameName) {
        return Logic_1.spriteFrames[spriteFrameName] ? Logic_1.spriteFrames[spriteFrameName] : null;
      };
      Logic.getBuildings = function(name) {
        return Logic_1.buildings[name];
      };
      Logic.getKillPlayerCount = function(seed) {
        return Logic_1.killPlayerCounts[seed] ? Logic_1.killPlayerCounts[seed] : 0;
      };
      Logic.setKillPlayerCounts = function(dieFrom, isAdd) {
        if (dieFrom && dieFrom.id) {
          Logic_1.killPlayerCounts[dieFrom.id] = Logic_1.getKillPlayerCount(dieFrom.id) + (isAdd ? 1 : -1);
          var counts = Logic_1.killPlayerCounts;
          Logic_1.killPlayerCounts = {};
          for (var key in counts) counts[key] && counts[key] > 0 && (Logic_1.killPlayerCounts[key] = counts[key]);
        }
      };
      var Logic_1;
      Logic.BOSS_LEVEL_1 = 10;
      Logic.CHAPTER00 = 0;
      Logic.CHAPTER01 = 1;
      Logic.CHAPTER02 = 2;
      Logic.CHAPTER03 = 3;
      Logic.CHAPTER04 = 4;
      Logic.CHAPTER05 = 5;
      Logic.CHAPTER099 = 99;
      Logic.OIL_GOLD_LIST = [ 100, 150, 200, 300, 500, 1e3, 1500, 2e3, 3e3, 5e3, 1e4, 15e3, 2e4, 3e4, 5e4, 1e5, 15e4, 2e5, 3e5, 5e5, 1e6, 15e5, 2e6, 3e6, 5e6 ];
      Logic.equipments = null;
      Logic.equipmentNameList = [];
      Logic.itemNameList = [];
      Logic.goodsNameList = [];
      Logic.monsters = null;
      Logic.nonplayers = null;
      Logic.spriteFrames = null;
      Logic.status = null;
      Logic.suits = null;
      Logic.bullets = null;
      Logic.items = null;
      Logic.talents = null;
      Logic.furnitures = null;
      Logic.professionList = [];
      Logic.buildings = null;
      Logic.level = 0;
      Logic.chapterIndex = 0;
      Logic.chapterMaxIndex = 0;
      Logic.playerData = new PlayerData_1.default();
      Logic.inventoryManager = new InventoryManager_1.default();
      Logic.mapManager = new MapManager_1.default();
      Logic.worldLoader = new WorldLoader_1.default();
      Logic.coins = 0;
      Logic.oilGolds = 0;
      Logic.killCount = 0;
      Logic.coinDreamCount = 0;
      Logic.time = "00:00:00";
      Logic.seed = 5;
      Logic.isFirst = 1;
      Logic.jumpChapter = 0;
      Logic.shipTransportScene = 0;
      Logic.elevatorScene = 0;
      Logic.isCheatMode = false;
      Logic.isDebug = false;
      Logic.isTour = false;
      Logic.isGamePause = false;
      Logic.dieFrom = new FromData_1.default();
      Logic.isMapReset = false;
      Logic.lastBgmIndex = 0;
      Logic.savePoinitData = new SavePointData_1.default();
      Logic.groundOilGoldData = new GroundOilGoldData_1.default();
      Logic.killPlayerCounts = {};
      Logic.profileManager = new ProfileManager_1.default();
      Logic.bagSortIndex = 0;
      Logic.settings = new Settings_1.default();
      Logic.nonPlayerList = [];
      Logic = Logic_1 = __decorate([ ccclass ], Logic);
      return Logic;
    }(cc.Component);
    exports.default = Logic;
    cc._RF.pop();
  }, {
    "./Data/FromData": "FromData",
    "./Data/GroundOilGoldData": "GroundOilGoldData",
    "./Data/InventoryData": "InventoryData",
    "./Data/NonPlayerData": "NonPlayerData",
    "./Data/OilGoldData": "OilGoldData",
    "./Data/PlayerData": "PlayerData",
    "./Data/SavePointData": "SavePointData",
    "./Dungeon": "Dungeon",
    "./Manager/InventoryManager": "InventoryManager",
    "./Manager/MapManager": "MapManager",
    "./Manager/ProfileManager": "ProfileManager",
    "./Map/WorldLoader": "WorldLoader",
    "./Model/Settings": "Settings",
    "./Utils/AudioPlayer": "AudioPlayer",
    "./Utils/LocalStorage": "LocalStorage",
    "./Utils/Random": "Random"
  } ],
  MagicCircle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4b4e32e5VZL3KOgwsnsl4rh", "MagicCircle");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MagicCircle = function(_super) {
      __extends(MagicCircle, _super);
      function MagicCircle() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isShow = false;
        _this.spellNow = false;
        return _this;
      }
      MagicCircle.prototype.playMagic = function(spellNow) {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play();
        this.anim.getAnimationState("PlayerMagicShow").speed = 2;
        this.isShow = true;
        this.spellNow = spellNow;
        spellNow && this.talentMaigc && this.talentMaigc.MagicFinish();
      };
      MagicCircle.prototype.MagicFinish = function() {
        !this.spellNow && this.talentMaigc && this.talentMaigc.MagicFinish();
        this.isShow = false;
      };
      MagicCircle = __decorate([ ccclass ], MagicCircle);
      return MagicCircle;
    }(cc.Component);
    exports.default = MagicCircle;
    cc._RF.pop();
  }, {} ],
  MagicIce: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "593bdTc6U9L8aRhkgXkK2Pf", "MagicIce");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MagicIce = function(_super) {
      __extends(MagicIce, _super);
      function MagicIce() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isShow = false;
        return _this;
      }
      MagicIce.prototype.showIce = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.node.opacity = 128;
        this.anim.play("PlayerMagicIceIdle");
        this.isShow = true;
      };
      MagicIce.prototype.breakIce = function() {
        this.anim.play("PlayerMagicIceBreak");
        this.isShow = false;
      };
      MagicIce = __decorate([ ccclass ], MagicIce);
      return MagicIce;
    }(cc.Component);
    exports.default = MagicIce;
    cc._RF.pop();
  }, {} ],
  MagicLightening: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6dfcbPWaC1Bm5ogHJjkBBm7", "MagicLightening");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MagicLightening = function(_super) {
      __extends(MagicLightening, _super);
      function MagicLightening() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.hasTargetMap = {};
        _this.needPrepare = false;
        _this.showArea = false;
        _this.isTrigger = true;
        _this.isAttacked = false;
        _this.damagePoint = 5;
        _this.checkTimeDelay = 0;
        return _this;
      }
      MagicLightening.prototype.onLoad = function() {};
      MagicLightening.prototype.start = function() {};
      MagicLightening.prototype.fall = function(needPrepare, showArea, damagePoint) {
        damagePoint && damagePoint > 0 && (this.damagePoint = damagePoint);
        this.needPrepare = needPrepare;
        this.isAttacked = false;
        var animName = "LighteningFall";
        showArea && (animName = "LighteningFallArea");
        if (needPrepare) {
          animName = "LighteningPrepareFall";
          this.isAttacked = true;
        }
        this.anim = this.getComponent(cc.Animation);
        this.anim.play(animName);
        AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
      };
      MagicLightening.prototype.AnimBegin = function() {
        this.isAttacked = false;
      };
      MagicLightening.prototype.AnimFinish = function() {
        var _this = this;
        this.scheduleOnce(function() {
          _this.node && _this.node.destroy();
        }, 2);
      };
      MagicLightening.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isTrigger) {
          this.isTrigger = false;
          this.fall(true, true);
        }
      };
      MagicLightening.prototype.onCollisionStay = function(other, self) {
        self.radius > 0 && !this.isAttacked && this.attacking(other.node);
      };
      MagicLightening.prototype.attacking = function(attackTarget) {
        if (!attackTarget) return;
        var damage = new DamageData_1.default();
        var status = StatusManager_1.default.BURNING;
        damage.magicDamage = this.damagePoint;
        status = StatusManager_1.default.DIZZ;
        var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget, !this.needPrepare);
        if (target && !target.sc.isDied) {
          target.takeDamage(damage);
          var fd = FromData_1.default.getClone("\u95ea\u7535", "magiclighteningdown1");
          target.addStatus(status, fd);
          this.isAttacked = true;
        }
      };
      MagicLightening.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .5) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      MagicLightening.prototype.update = function(dt) {};
      MagicLightening = __decorate([ ccclass ], MagicLightening);
      return MagicLightening;
    }(cc.Component);
    exports.default = MagicLightening;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer"
  } ],
  MapData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d7bcZhUYBIzJR0A6/ryRxj", "MapData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MapData = function() {
      function MapData(str) {
        this.map = new Array();
        this.init(str);
      }
      MapData.prototype.init = function(str) {
        if (!str) return;
        str = str.substring(2, str.length - 2);
        var arr = str.split("\r\n");
        this.map = new Array();
        for (var i = 0; i < arr.length; i++) this.map[i] = new Array();
        for (var i = 0; i < arr.length; i++) {
          var row = arr[arr.length - 1 - i].split("");
          var k = 0;
          for (var j = 0; j < row.length - 1; k++) {
            this.map[i][k] = row[j] + row[j + 1];
            j += 2;
          }
        }
        var turnArr = new Array();
        for (var i = 0; i < this.map[0].length; i++) {
          turnArr[i] = new Array();
          for (var j = 0; j < this.map.length; j++) turnArr[i][j] = this.map[j][i];
        }
        this.map = turnArr;
      };
      MapData.prototype.logMap = function() {
        var str = "";
        for (var j = this.map[0].length - 1; j >= 0; j--) {
          for (var i = 0; i < this.map.length; i++) str += "" + this.map[i][j];
          str += "\n";
        }
        return str;
      };
      MapData.prototype.clone = function() {
        var data = new MapData("");
        data.map = this.map.slice();
        return data;
      };
      MapData.prototype.valueCopy = function(data) {
        this.map = data && data.map ? data.map : null;
        return this;
      };
      return MapData;
    }();
    exports.default = MapData;
    cc._RF.pop();
  }, {} ],
  MapManagerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc23bpSDqZOALYDNPFUGFLx", "MapManagerData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MapManagerData = function() {
      function MapManagerData() {}
      return MapManagerData;
    }();
    exports.default = MapManagerData;
    cc._RF.pop();
  }, {} ],
  MapManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b0b2KGAWdGI6jcP8eIcPHE", "MapManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MapData_1 = require("../Data/MapData");
    var RectRoom_1 = require("../Rect/RectRoom");
    var RectDungeon_1 = require("../Rect/RectDungeon");
    var Logic_1 = require("../Logic");
    var Random4Save_1 = require("../Utils/Random4Save");
    var RoomType_1 = require("../Rect/RoomType");
    var MapManager = function() {
      function MapManager() {
        this.isloaded = false;
        this.rectDungeon = null;
        this.init();
      }
      MapManager.prototype.init = function() {
        this.isloaded = false;
      };
      MapManager.prototype.clear = function() {};
      MapManager.prototype.loadMap = function() {
        Logic_1.default.isMapReset && Logic_1.default.mapManager.reset();
        cc.log("maps loaded");
      };
      MapManager.prototype.reset = function(pos) {
        Logic_1.default.isMapReset = false;
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        this.rand4save = null;
        this.rectDungeon = new RectDungeon_1.default();
        if (Logic_1.default.profileManager.data && Logic_1.default.profileManager.data.rectDungeons["" + data.chapter + data.index]) this.rectDungeon.buildMapFromSave(Logic_1.default.profileManager.data.rectDungeons["" + data.chapter + data.index], data); else {
          this.rectDungeon.buildMap(data);
          var index = this.rectDungeon.startIndex;
          this.rectDungeon.currentPos = cc.v3(index.x, index.y);
        }
        pos && (this.rectDungeon.currentPos = pos.clone());
        cc.log(this.rectDungeon.getDisPlay());
        this.rectDungeon.changeRoomsIsFound(this.rectDungeon.currentPos.x, this.rectDungeon.currentPos.y);
      };
      MapManager.prototype.loadingNextRoom = function(dir) {
        var room = this.rectDungeon.getNeighborRoom(this.rectDungeon.currentPos.x, this.rectDungeon.currentPos.y, dir);
        if (room && room.roomType) {
          this.rectDungeon.currentPos = cc.v3(room.x, room.y);
          this.rectDungeon.changeRoomsIsFound(room.x, room.y);
        }
        return room;
      };
      MapManager.prototype.getCurrentMapStringArray = function() {
        var room = this.getCurrentRoom();
        var mdd = new MapData_1.default("");
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        mdd.map = data.getRoomMap(room.x, room.y);
        var mapdata = this.addGenerateThings(mdd, room.roomType, room.seed, data.needRadomDecorate);
        return mapdata.map;
      };
      MapManager.prototype.getCurrentSideMapStringArray = function(offset) {
        var room = this.getCurrentRoom();
        var mdd = new MapData_1.default("");
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        mdd.map = data.getRoomMap(room.x + offset.x, room.y + offset.y);
        return mdd.map;
      };
      MapManager.prototype.getCurrentMapSize = function() {
        var data = Logic_1.default.worldLoader.getCurrentLevelData();
        return cc.v3(data.roomWidth, data.roomHeight);
      };
      MapManager.prototype.getCurrentRoom = function() {
        if (this.rectDungeon && this.rectDungeon.map) {
          var room = this.rectDungeon.map[this.rectDungeon.currentPos.x][this.rectDungeon.currentPos.y];
          return room || new RectRoom_1.default(1, 1, RoomType_1.default.Z_ROOM);
        }
      };
      MapManager.prototype.getCurrentMapBuilding = function(defaultPos) {
        var buildings = this.rectDungeon.buildings["x=" + this.rectDungeon.currentPos.x + "y=" + this.rectDungeon.currentPos.y];
        if (buildings) return buildings["x=" + defaultPos.x + "y=" + defaultPos.y];
        return null;
      };
      MapManager.prototype.setCurrentBuildingData = function(data) {
        var buildings = this.rectDungeon.buildings["x=" + this.rectDungeon.currentPos.x + "y=" + this.rectDungeon.currentPos.y];
        if (!buildings) {
          buildings = {};
          this.rectDungeon.buildings["x=" + this.rectDungeon.currentPos.x + "y=" + this.rectDungeon.currentPos.y] = buildings;
        }
        buildings["x=" + data.defaultPos.x + "y=" + data.defaultPos.y] = data;
      };
      MapManager.prototype.getCurrentMapEquipments = function() {
        return this.rectDungeon.equipments["x=" + this.rectDungeon.currentPos.x + "y=" + this.rectDungeon.currentPos.y];
      };
      MapManager.prototype.setCurrentEquipmentsArr = function(arr) {
        this.rectDungeon.equipments["x=" + this.rectDungeon.currentPos.x + "y=" + this.rectDungeon.currentPos.y] = arr;
      };
      MapManager.prototype.getCurrentMapItems = function() {
        return this.rectDungeon.items["x=" + this.rectDungeon.currentPos.x + "y=" + this.rectDungeon.currentPos.y];
      };
      MapManager.prototype.setCurrentItemsArr = function(arr) {
        this.rectDungeon.items["x=" + this.rectDungeon.currentPos.x + "y=" + this.rectDungeon.currentPos.y] = arr;
      };
      MapManager.prototype.setRoomClear = function(x, y) {
        this.rectDungeon.map[x][y].state = RectRoom_1.default.STATE_CLEAR;
        this.rectDungeon.map[x][y].isReborn = false;
      };
      MapManager.prototype.getCurrentRoomState = function() {
        return this.getCurrentRoom().state;
      };
      MapManager.prototype.isCurrentRoomStateClear = function() {
        return this.getCurrentRoomState() == RectRoom_1.default.STATE_CLEAR;
      };
      MapManager.prototype.getCurrentRoomType = function() {
        return this.getCurrentRoom().roomType;
      };
      MapManager.prototype.isNeighborRoomStateClear = function(dir) {
        var room = this.rectDungeon.getNeighborRoom(this.rectDungeon.currentPos.x, this.rectDungeon.currentPos.y, dir);
        if (!room) return false;
        return room.state == RectRoom_1.default.STATE_CLEAR;
      };
      MapManager.prototype.getCurrentRoomRandom4Save = function() {
        var room = this.getCurrentRoom();
        if (room) {
          if (!this.rand4save) {
            this.rand4save = new Random4Save_1.default(room.seed);
            this.rand4save.Seed = room.seed;
          }
        } else this.rand4save || (this.rand4save = new Random4Save_1.default(0));
        return this.rand4save;
      };
      MapManager.prototype.getRebornSeed = function(seed) {
        return seed + 1e8 * Logic_1.default.mapManager.getCurrentRoom().reborn;
      };
      MapManager.prototype.getSeedFromRoom = function() {
        var rand4save = Logic_1.default.mapManager.getCurrentRoomRandom4Save();
        return rand4save.getRandomNum(0, 1e8);
      };
      MapManager.prototype.getRandom4Save = function(seed) {
        var rand4save = new Random4Save_1.default(seed > 0 ? seed : this.getSeedFromRoom());
        rand4save.rand();
        return rand4save;
      };
      MapManager.prototype.addGenerateThings = function(mapData, roomType, seed, needDecorate) {
        var rand4save = new Random4Save_1.default(seed);
        cc.log("seed:" + seed);
        this.addRandomTile(mapData, rand4save);
        if (RoomType_1.default.isDecorateRoomType(roomType) && needDecorate) {
          rand4save = new Random4Save_1.default(seed);
          this.addDecorate(mapData, rand4save);
        }
        return mapData;
      };
      MapManager.prototype.addRandomTile = function(mapData, rand4save) {
        var pos = [];
        for (var i = 0; i < 10; i++) {
          var dx = rand4save.getRandomNum(0, mapData.map.length - 1);
          var dy = rand4save.getRandomNum(0, mapData.map[0].length - 1);
          pos.push(cc.v3(dx, 0));
          pos.push(cc.v3(0, dy));
          pos.push(cc.v3(dx, dy));
        }
        for (var _i = 0, pos_1 = pos; _i < pos_1.length; _i++) {
          var p = pos_1[_i];
          "**" == mapData.map[p.x][p.y] && (mapData.map[p.x][p.y] = "*" + rand4save.getRandomNum(0, 2));
        }
      };
      MapManager.prototype.addDecorate = function(mapData, rand4save) {
        var pos = [];
        for (var i = 0; i < 2; i++) {
          var dx = rand4save.getRandomNum(1, mapData.map.length - 2);
          var dy = rand4save.getRandomNum(1, mapData.map[0].length - 2);
          pos.push(cc.v3(dx, dy));
        }
        for (var _i = 0, pos_2 = pos; _i < pos_2.length; _i++) {
          var p = pos_2[_i];
          "**" != mapData.map[p.x][p.y] && -1 == mapData.map[p.x][p.y].indexOf("W") || (mapData.map[p.x][p.y] = "W" + rand4save.getRandomNum(0, 2));
        }
      };
      return MapManager;
    }();
    exports.default = MapManager;
    cc._RF.pop();
  }, {
    "../Data/MapData": "MapData",
    "../Logic": "Logic",
    "../Rect/RectDungeon": "RectDungeon",
    "../Rect/RectRoom": "RectRoom",
    "../Rect/RoomType": "RoomType",
    "../Utils/Random4Save": "Random4Save"
  } ],
  MartCashier: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "88c99phMSBLjpgR45Dw2hZG", "MartCashier");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MartCashier = function(_super) {
      __extends(MartCashier, _super);
      function MartCashier() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      MartCashier.prototype.onLoad = function() {};
      MartCashier.prototype.start = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.WELCOME);
      };
      MartCashier.prototype.onCollisionEnter = function(other, self) {};
      MartCashier.prototype.onCollisionExit = function(other, self) {};
      MartCashier = __decorate([ ccclass ], MartCashier);
      return MartCashier;
    }(Building_1.default);
    exports.default = MartCashier;
    cc._RF.pop();
  }, {
    "../Utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  MartShelvesDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "24e528ueQhMDYfsDE3eSpqK", "MartShelvesDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GoodsData_1 = require("../../Data/GoodsData");
    var EventHelper_1 = require("../../EventHelper");
    var Goods_1 = require("../../Item/Goods");
    var Logic_1 = require("../../Logic");
    var AudioPlayer_1 = require("../../Utils/AudioPlayer");
    var BaseDialog_1 = require("./BaseDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MartShelvesDialog = function(_super) {
      __extends(MartShelvesDialog, _super);
      function MartShelvesDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.goods = null;
        _this.layer = null;
        _this.spriteNode = null;
        _this.fridgeNode = null;
        _this.fridgeLayer = null;
        _this.doorLeft = null;
        _this.doorRight = null;
        _this.payNode = null;
        _this.payTitle = null;
        _this.payDesc = null;
        _this.payIcon = null;
        _this.type = MartShelvesDialog_1.TYPE_NORMAL;
        _this.goodsList = [];
        return _this;
      }
      MartShelvesDialog_1 = MartShelvesDialog;
      MartShelvesDialog.prototype.onLoad = function() {
        var _this = this;
        cc.director.on(EventHelper_1.EventHelper.HUD_MART_SHELVES_DIALOG_PAY, function(event) {
          _this.node && _this.showPay(event.detail.data);
        });
      };
      MartShelvesDialog.prototype.showPay = function(data) {
        this.goodsData = data;
        this.payTitle.string = "" + data.item.nameCn;
        this.payDesc.string = "\u4ef7\u683c\uff1a" + data.item.price + "\n\n\u8bf4\u660e\uff1a" + data.item.info + "\n" + data.item.desc;
        if (Logic_1.default.spriteFrameRes(data.item.resName)) {
          this.payIcon.spriteFrame = Logic_1.default.spriteFrameRes(data.item.resName);
          this.payIcon.node.width = this.payIcon.spriteFrame.getOriginalSize().width;
          this.payIcon.node.height = this.payIcon.spriteFrame.getOriginalSize().height;
        }
        this.payNode.active = true;
      };
      MartShelvesDialog.prototype.Pay = function() {
        if (Logic_1.default.coins >= this.goodsData.item.price) {
          cc.director.emit(EventHelper_1.EventHelper.HUD_ADD_COIN, {
            detail: {
              count: -this.goodsData.item.price
            }
          });
          AudioPlayer_1.default.play(AudioPlayer_1.default.CASHIERING);
          cc.director.emit(EventHelper_1.EventHelper.PLAYER_CHANGEITEM, {
            detail: {
              itemData: this.goodsData.item
            }
          });
          this.close();
        } else AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT_FAIL);
      };
      MartShelvesDialog.prototype.Cancel = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.payNode.active = false;
      };
      MartShelvesDialog.prototype.updateUI = function(type, goodsNameList) {
        this.payNode.active = false;
        this.spriteNode.active = false;
        this.fridgeNode.active = false;
        this.type = type;
        this.changeBg(type);
        this.addGoods(type, goodsNameList);
      };
      MartShelvesDialog.prototype.changeBg = function(type) {
        if (!this.martshelvesbg) {
          this.martshelvesbg = this.node.getChildByName("sprite").getChildByName("martshelves");
          this.martshelvesside0 = this.node.getChildByName("sprite").getChildByName("martshelvesside0");
          this.martshelvesside1 = this.node.getChildByName("sprite").getChildByName("martshelvesside1");
          this.martshelvesside2 = this.node.getChildByName("sprite").getChildByName("martshelvesside2");
          this.martshelvesside3 = this.node.getChildByName("sprite").getChildByName("martshelvesside3");
        }
        var isFridge = type == MartShelvesDialog_1.TYPE_FRIDGE;
        if (isFridge) {
          this.fridgeNode.active = true;
          this.doorLeft.scaleX = 1;
          this.doorRight.scaleX = 1;
        } else this.spriteNode.active = true;
        var color = type == MartShelvesDialog_1.TYPE_WOOD ? "#DF8143" : "#FFFFFF";
        this.martshelvesbg.color = cc.color().fromHEX(color);
        this.martshelvesside0.color = cc.color().fromHEX(color);
        this.martshelvesside1.color = cc.color().fromHEX(color);
        this.martshelvesside2.color = cc.color().fromHEX(color);
        this.martshelvesside3.color = cc.color().fromHEX(color);
      };
      MartShelvesDialog.prototype.addGoods = function(type, goodsNameList) {
        var _this = this;
        this.layer.removeAllChildren();
        this.fridgeLayer.removeAllChildren();
        var isFridge = type == MartShelvesDialog_1.TYPE_FRIDGE;
        var layer = isFridge ? this.fridgeLayer : this.layer;
        var size = isFridge ? MartShelvesDialog_1.SIZE_FRIDGE : MartShelvesDialog_1.SIZE;
        for (var i = 0; i < size; i++) {
          if (i > goodsNameList.length - 1) continue;
          var goods = cc.instantiate(this.goods).getComponent(Goods_1.default);
          var data = new GoodsData_1.default();
          data.count = 1;
          data.item.valueCopy(Logic_1.default.items[goodsNameList[i]]);
          goods.init(data);
          this.goodsList.push(goods);
          layer.addChild(goods.node);
        }
        isFridge && this.scheduleOnce(function() {
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play();
        }, 1);
      };
      MartShelvesDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        this.fridgeNode.active = false;
        this.spriteNode.active = false;
        this.payNode.active = false;
        this.dismiss();
      };
      var MartShelvesDialog_1;
      MartShelvesDialog.SIZE = 21;
      MartShelvesDialog.SIZE_FRIDGE = 12;
      MartShelvesDialog.TYPE_NORMAL = "Sa";
      MartShelvesDialog.TYPE_WOOD = "Sb";
      MartShelvesDialog.TYPE_FRIDGE = "Sc";
      __decorate([ property(cc.Prefab) ], MartShelvesDialog.prototype, "goods", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "layer", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "spriteNode", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "fridgeNode", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "fridgeLayer", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "doorLeft", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "doorRight", void 0);
      __decorate([ property(cc.Node) ], MartShelvesDialog.prototype, "payNode", void 0);
      __decorate([ property(cc.Label) ], MartShelvesDialog.prototype, "payTitle", void 0);
      __decorate([ property(cc.Label) ], MartShelvesDialog.prototype, "payDesc", void 0);
      __decorate([ property(cc.Sprite) ], MartShelvesDialog.prototype, "payIcon", void 0);
      MartShelvesDialog = MartShelvesDialog_1 = __decorate([ ccclass ], MartShelvesDialog);
      return MartShelvesDialog;
    }(BaseDialog_1.default);
    exports.default = MartShelvesDialog;
    cc._RF.pop();
  }, {
    "../../Data/GoodsData": "GoodsData",
    "../../EventHelper": "EventHelper",
    "../../Item/Goods": "Goods",
    "../../Logic": "Logic",
    "../../Utils/AudioPlayer": "AudioPlayer",
    "./BaseDialog": "BaseDialog"
  } ],
  MartShelves: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4800aSbfApGHYS7nMK4o5Bn", "MartShelves");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GoodsData_1 = require("../Data/GoodsData");
    var EventHelper_1 = require("../EventHelper");
    var Goods_1 = require("../Item/Goods");
    var Logic_1 = require("../Logic");
    var Tips_1 = require("../UI/Tips");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MartShelves = function(_super) {
      __extends(MartShelves, _super);
      function MartShelves() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.goods = null;
        _this.layer = null;
        _this.type = MartShelves_1.TYPE_NORMAL;
        _this.goodsList = [];
        _this.goodsNameList = [];
        return _this;
      }
      MartShelves_1 = MartShelves;
      MartShelves.prototype.onLoad = function() {
        var _this = this;
        this.tips = this.getComponentInChildren(Tips_1.default);
        this.tips.onInteract(function() {
          _this.node && EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_MART_SHELVES_DIALOG, {
            type: _this.type,
            goodsNameList: _this.goodsNameList
          });
        });
      };
      MartShelves.prototype.init = function(type, goodsNameList) {
        this.goodsNameList = goodsNameList;
        this.type = type;
        this.changeBg(type);
        this.addGoods(goodsNameList);
      };
      MartShelves.prototype.changeBg = function(type) {
        if (!this.martshelvesbg) {
          this.martshelvesbg = this.node.getChildByName("sprite").getChildByName("martshelves");
          this.martshelvesside0 = this.node.getChildByName("sprite").getChildByName("martshelvesside0");
          this.martshelvesside1 = this.node.getChildByName("sprite").getChildByName("martshelvesside1");
          this.martshelvesside2 = this.node.getChildByName("sprite").getChildByName("martshelvesside2");
          this.martshelvesside3 = this.node.getChildByName("sprite").getChildByName("martshelvesside3");
        }
        var color = type == MartShelves_1.TYPE_WOOD ? "#DF8143" : "#FFFFFF";
        this.martshelvesbg.color = cc.color().fromHEX(color);
        type != MartShelves_1.TYPE_FRIDGE && (this.martshelvesside0.color = cc.color().fromHEX(color));
        this.martshelvesside1.color = cc.color().fromHEX(color);
        this.martshelvesside2.color = cc.color().fromHEX(color);
        this.martshelvesside3.color = cc.color().fromHEX(color);
      };
      MartShelves.prototype.addGoods = function(goodsNameList) {
        this.layer.removeAllChildren();
        var len = this.type == MartShelves_1.TYPE_FRIDGE ? MartShelves_1.SIZE_FRIDGE : MartShelves_1.SIZE_NORMAL;
        for (var i = 0; i < len; i++) {
          if (i > goodsNameList.length - 1) return;
          var goods = cc.instantiate(this.goods).getComponent(Goods_1.default);
          var data = new GoodsData_1.default();
          data.count = 10;
          data.item.valueCopy(Logic_1.default.items[goodsNameList[i]]);
          goods.init(data);
          this.goodsList.push(goods);
          this.layer.addChild(goods.node);
        }
      };
      MartShelves.prototype.onCollisionEnter = function(other, self) {};
      MartShelves.prototype.onCollisionExit = function(other, self) {};
      var MartShelves_1;
      MartShelves.SIZE_NORMAL = 21;
      MartShelves.SIZE_FRIDGE = 12;
      MartShelves.TYPE_NORMAL = "Sa";
      MartShelves.TYPE_WOOD = "Sb";
      MartShelves.TYPE_FRIDGE = "Sc";
      __decorate([ property(cc.Prefab) ], MartShelves.prototype, "goods", void 0);
      __decorate([ property(cc.Node) ], MartShelves.prototype, "layer", void 0);
      MartShelves = MartShelves_1 = __decorate([ ccclass ], MartShelves);
      return MartShelves;
    }(Building_1.default);
    exports.default = MartShelves;
    cc._RF.pop();
  }, {
    "../Data/GoodsData": "GoodsData",
    "../EventHelper": "EventHelper",
    "../Item/Goods": "Goods",
    "../Logic": "Logic",
    "../UI/Tips": "Tips",
    "./Building": "Building"
  } ],
  MeleeShadowWeapon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "42691fWENBA0qvnMd6/WcCK", "MeleeShadowWeapon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var Utils_1 = require("./Utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MeleeShadowWeapon = function(_super) {
      __extends(MeleeShadowWeapon, _super);
      function MeleeShadowWeapon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.player = null;
        _this.isAttacking = false;
        _this.hv = cc.v3(1, 0);
        _this.comboType = 0;
        _this.hasTargetMap = {};
        return _this;
      }
      Object.defineProperty(MeleeShadowWeapon.prototype, "IsAttacking", {
        get: function() {
          return this.isAttacking;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeShadowWeapon.prototype, "IsReflect", {
        get: function() {
          if (this.meleeWeapon) return this.meleeWeapon.IsReflect;
          return false;
        },
        enumerable: false,
        configurable: true
      });
      MeleeShadowWeapon.prototype.init = function(player, meleeWeapon) {
        this.anim = this.getComponent(cc.Animation);
        this.player = player;
        this.meleeWeapon = meleeWeapon;
      };
      Object.defineProperty(MeleeShadowWeapon.prototype, "Hv", {
        get: function() {
          return this.hv;
        },
        set: function(hv) {
          this.hv = hv.normalizeSelf();
        },
        enumerable: false,
        configurable: true
      });
      MeleeShadowWeapon.prototype.attack = function(data, comboType, hv) {
        this.updateHv(hv);
        this.comboType = comboType;
        this.hasTargetMap = {};
        this.isAttacking = true;
        var animname = this.meleeWeapon.getAttackAnimName(comboType);
        this.anim.play(animname);
        this.anim.getAnimationState(animname).speed = this.meleeWeapon.getAnimSpeed(data.FinalCommon);
        return true;
      };
      MeleeShadowWeapon.prototype.attackIdle = function(isReverse) {
        this.anim && this.anim.play(isReverse ? "MeleeAttackIdleReverse" : "MeleeAttackIdle");
      };
      MeleeShadowWeapon.prototype.MeleeAttackFinish = function() {
        this.isAttacking = false;
      };
      MeleeShadowWeapon.prototype.ComboStart = function() {};
      MeleeShadowWeapon.prototype.ComboFinish = function() {};
      MeleeShadowWeapon.prototype.ComboTime = function() {};
      MeleeShadowWeapon.prototype.ExAttackTime = function() {
        this.player.remoteExAttack(this.comboType);
      };
      MeleeShadowWeapon.prototype.AudioTime = function() {
        this.meleeWeapon && this.meleeWeapon.AudioTime();
      };
      MeleeShadowWeapon.prototype.RefreshTime = function() {
        this.hasTargetMap = {};
      };
      MeleeShadowWeapon.prototype.DashTime = function(speed) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.DASH);
      };
      MeleeShadowWeapon.prototype.EffectTime = function() {};
      MeleeShadowWeapon.prototype.updateHv = function(hv) {
        this.hv = hv;
        this.rotateCollider(cc.v2(this.hv.x, this.hv.y));
      };
      MeleeShadowWeapon.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        var sx = Math.abs(this.node.scaleX);
        var sy = Math.abs(this.node.scaleY);
        this.node.scaleX = this.player.node.scaleX > 0 ? sx : -sx;
        this.node.scaleY = this.node.scaleX < 0 ? -sy : sy;
        this.node.angle = Utils_1.default.getRotateAngle(direction, this.node.scaleX < 0);
      };
      MeleeShadowWeapon.prototype.onCollisionStay = function(other, self) {
        if (self.radius > 0) {
          if (this.hasTargetMap[other.node.uuid] && this.hasTargetMap[other.node.uuid] > 0) {
            this.hasTargetMap[other.node.uuid]++;
            return false;
          }
          this.hasTargetMap[other.node.uuid] = 1;
          if (this.meleeWeapon) return this.meleeWeapon.attacking(other, this.anim, true);
          return false;
        }
      };
      MeleeShadowWeapon = __decorate([ ccclass ], MeleeShadowWeapon);
      return MeleeShadowWeapon;
    }(cc.Component);
    exports.default = MeleeShadowWeapon;
    cc._RF.pop();
  }, {
    "./Utils/AudioPlayer": "AudioPlayer",
    "./Utils/Utils": "Utils"
  } ],
  MeleeWeaponChild: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "81ac4Ib50VMBoiaBfrNyVFU", "MeleeWeaponChild");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MeleeWeaponChild = function(_super) {
      __extends(MeleeWeaponChild, _super);
      function MeleeWeaponChild() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.meleeWeapon = null;
        return _this;
      }
      MeleeWeaponChild.prototype.onLoad = function() {
        this.getComponent(cc.Sprite).spriteFrame;
      };
      MeleeWeaponChild.prototype.start = function() {};
      MeleeWeaponChild = __decorate([ ccclass ], MeleeWeaponChild);
      return MeleeWeaponChild;
    }(cc.Component);
    exports.default = MeleeWeaponChild;
    cc._RF.pop();
  }, {} ],
  MeleeWeapon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8747dgi/6dFupzO0r46t7Ya", "MeleeWeapon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Player_1 = require("./Player");
    var NonPlayer_1 = require("./NonPlayer");
    var EventHelper_1 = require("./EventHelper");
    var Box_1 = require("./Building/Box");
    var Logic_1 = require("./Logic");
    var MeleeWeaponChild_1 = require("./MeleeWeaponChild");
    var DamageData_1 = require("./Data/DamageData");
    var StatusManager_1 = require("./Manager/StatusManager");
    var PlayerData_1 = require("./Data/PlayerData");
    var Boss_1 = require("./Boss/Boss");
    var NextStep_1 = require("./Utils/NextStep");
    var FromData_1 = require("./Data/FromData");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var IndexZ_1 = require("./Utils/IndexZ");
    var PlayerAvatar_1 = require("./PlayerAvatar");
    var InventoryManager_1 = require("./Manager/InventoryManager");
    var HitBuilding_1 = require("./Building/HitBuilding");
    var CommonData_1 = require("./Data/CommonData");
    var AvatarData_1 = require("./Data/AvatarData");
    var ColliderTag_1 = require("./Actor/ColliderTag");
    var ActorUtils_1 = require("./Utils/ActorUtils");
    var InteractBuilding_1 = require("./Building/InteractBuilding");
    var Utils_1 = require("./Utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MeleeWeapon = function(_super) {
      __extends(MeleeWeapon, _super);
      function MeleeWeapon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerNode = null;
        _this.player = null;
        _this.waveWeapon = null;
        _this.iceLight = null;
        _this.fireLight = null;
        _this.lighteningLight = null;
        _this.toxicLight = null;
        _this.curseLight = null;
        _this.meleeLightLeftPos = cc.v3(8, 0);
        _this.meleeLightRightPos = cc.v3(-8, 0);
        _this.isAttacking = false;
        _this.hv = cc.v3(1, 0);
        _this.isStab = true;
        _this.isFar = false;
        _this.isFist = true;
        _this.isBlunt = false;
        _this.weaponFirePoints = [];
        _this.isMiss = false;
        _this.drainSkill = new NextStep_1.default();
        _this.isReflect = false;
        _this.weaponSprite = null;
        _this.weaponLightSprite = null;
        _this.handSprite = null;
        _this.glovesSprite = null;
        _this.comboType = 0;
        _this.isComboing = false;
        _this.hasTargetMap = {};
        _this.isSecond = false;
        _this.currentAngle = 0;
        _this.fistCombo = 0;
        _this.exBeatBack = 0;
        _this.isAttackPressed = false;
        _this.comboMiss = false;
        _this.playerData = new PlayerData_1.default();
        return _this;
      }
      MeleeWeapon_1 = MeleeWeapon;
      Object.defineProperty(MeleeWeapon.prototype, "IsSword", {
        get: function() {
          return !this.isStab && !this.isFar && !this.isFist && !this.isBlunt;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsSecond", {
        set: function(isSecond) {
          this.isSecond = isSecond;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsFist", {
        get: function() {
          return this.isFist;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsComboing", {
        get: function() {
          return this.isComboing;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsAttacking", {
        get: function() {
          return this.isAttacking;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "IsReflect", {
        get: function() {
          return this.isReflect;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "GlovesSprite", {
        get: function() {
          return this.glovesSprite;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MeleeWeapon.prototype, "ComboType", {
        get: function() {
          return this.comboType;
        },
        enumerable: false,
        configurable: true
      });
      MeleeWeapon.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.player = this.playerNode.getComponent(Player_1.default);
        this.weaponFirePoint = this.node.getChildByName("firepoint");
        this.meleeLightLeftPos = this.player.node.convertToNodeSpaceAR(this.node.convertToWorldSpaceAR(this.meleeLightLeftPos));
        this.meleeLightRightPos = this.player.node.convertToNodeSpaceAR(this.node.convertToWorldSpaceAR(this.meleeLightRightPos));
        this.weaponSprite = this.getSpriteChildSprite([ "sprite", InventoryManager_1.default.WEAPON ]);
        this.weaponLightSprite = this.getSpriteChildSprite([ "sprite", "meleelight" ]);
        this.handSprite = this.getSpriteChildSprite([ "sprite", "hand" ]);
        this.glovesSprite = this.getSpriteChildSprite([ "sprite", "hand", "gloves" ]);
        this.handSprite.node.color = cc.Color.WHITE.fromHEX(this.player.avatar.data.skinColor);
        for (var i = 0; i < 4; i++) this.weaponFirePoints.push(this.weaponFirePoint.getChildByName("point" + i));
      };
      Object.defineProperty(MeleeWeapon.prototype, "Hv", {
        get: function() {
          return this.hv;
        },
        set: function(hv) {
          var pos = ActorUtils_1.default.getDirectionFromNearestEnemy(this.player.node.position, false, this.dungeon, false, 400);
          pos.equals(cc.Vec3.ZERO) ? this.hv = hv.normalizeSelf() : this.hv = pos;
        },
        enumerable: false,
        configurable: true
      });
      MeleeWeapon.prototype.getSpriteChildSprite = function(childNames) {
        var node = this.node;
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      MeleeWeapon.prototype.changeEquipment = function(equipData, spriteFrame, inventoryManager) {
        if (InventoryManager_1.default.WEAPON != equipData.equipmetType) {
          cc.log("its not a weapon");
          return;
        }
        this.isStab = 1 == equipData.stab;
        this.isFar = 1 == equipData.far;
        this.isReflect = 1 == equipData.isReflect;
        this.isFist = false;
        this.isBlunt = 1 == equipData.blunt;
        this.exBeatBack = inventoryManager.getEquipBySuit(equipData).exBeatBack;
        this.weaponSprite.spriteFrame = spriteFrame;
        var color1 = cc.color(255, 255, 255).fromHEX(inventoryManager.equips[InventoryManager_1.default.WEAPON].color);
        var color2 = cc.color(255, 255, 255).fromHEX(inventoryManager.equips[InventoryManager_1.default.WEAPON].lightcolor);
        this.weaponSprite.node.color = color1;
        this.weaponLightSprite.node.color = color2;
        this.isStab ? this.weaponSprite.node.angle = 15 : this.weaponSprite.node.angle = -235;
        this.weaponSprite.node.width = this.weaponSprite.spriteFrame.getOriginalSize().width;
        this.weaponSprite.node.height = this.weaponSprite.spriteFrame.getOriginalSize().height;
      };
      MeleeWeapon.prototype.updateCombo = function() {
        this.comboType == MeleeWeapon_1.COMBO1 ? this.comboType = MeleeWeapon_1.COMBO2 : this.comboType == MeleeWeapon_1.COMBO2 ? this.comboType = MeleeWeapon_1.COMBO3 : (this.comboType == MeleeWeapon_1.COMBO3, 
        this.comboType = MeleeWeapon_1.COMBO1);
        this.isComboing || (this.comboType = MeleeWeapon_1.COMBO1);
      };
      MeleeWeapon.prototype.attack = function(data, fistCombo) {
        this.playerData = data.clone();
        var isMiss = Logic_1.default.getRandomNum(0, 100) < data.StatusTotalData.missRate;
        if (this.isAttacking || !this.anim) {
          if (this.isComboing) {
            this.isAttackPressed = true;
            this.comboMiss = isMiss;
          }
          return false;
        }
        isMiss && this.player.showFloatFont(this.node.parent, 0, false, true, false, false, false);
        return this.attackDo(data, isMiss, fistCombo);
      };
      MeleeWeapon.prototype.attackDo = function(data, isMiss, fistCombo) {
        this.hasTargetMap = {};
        this.fistCombo = fistCombo;
        this.isMiss = isMiss;
        this.isAttacking = true;
        this.updateCombo();
        var animname = this.getAttackAnimName();
        this.anim.play(animname);
        this.anim.getAnimationState(animname).speed = this.getAnimSpeed(data.FinalCommon);
        return true;
      };
      MeleeWeapon.prototype.getAnimSpeed = function(finalCommon) {
        var speedScaleFix = 1;
        this.isStab && !this.isFar && (speedScaleFix = 1.8);
        this.isStab || this.isFar || (speedScaleFix = 1.5);
        this.isStab && this.isFar && (speedScaleFix = 1.2);
        !this.isStab && this.isFar && (speedScaleFix = 1);
        this.isFist && (speedScaleFix = 1);
        var animSpeed = 1 + finalCommon.attackSpeed / 500;
        animSpeed < .2 && (animSpeed = .2);
        animSpeed > 3 && (animSpeed = 3);
        return animSpeed * speedScaleFix;
      };
      MeleeWeapon.prototype.attackIdle = function(isReverse) {
        this.anim && this.anim.play(isReverse ? "MeleeAttackIdleReverse" : "MeleeAttackIdle");
      };
      MeleeWeapon.prototype.getMeleeSlowRatio = function() {
        return !this.isFar && this.isStab ? .05 : this.isFar && this.isStab ? .02 : this.isFar || this.isStab ? .01 : .02;
      };
      MeleeWeapon.prototype.getAttackAnimName = function(comboType) {
        var name = "MeleeAttackStab";
        name = !this.isFar && this.isStab ? this.isFist ? "MeleeAttackFist" : "MeleeAttackStab" : this.isFar && this.isStab ? "MeleeAttackStabFar" : this.isFar && !this.isStab ? this.isBlunt ? "MeleeAttackBluntFar" : "MeleeAttackFar" : this.isBlunt ? "MeleeAttackBlunt" : "MeleeAttack";
        return name + this.getComboSuffix(comboType);
      };
      MeleeWeapon.prototype.getComboSuffix = function(comboType) {
        if (this.isFist) {
          if (this.isSecond) return "2";
          return "1";
        }
        comboType = comboType || this.comboType;
        return comboType == MeleeWeapon_1.COMBO1 ? "1" : comboType == MeleeWeapon_1.COMBO2 ? "2" : comboType == MeleeWeapon_1.COMBO3 ? "3" : "1";
      };
      MeleeWeapon.prototype.getWaveLight = function(dungeonNode, p, elementType, isStab, isFar) {
        var lights = [ this.iceLight, this.fireLight, this.lighteningLight, this.toxicLight, this.curseLight ];
        if (elementType < 1 || elementType > lights.length || !this.dungeon) return;
        var firePrefab = cc.instantiate(lights[elementType - 1]);
        var timeScale = this.anim.getAnimationState(this.getAttackAnimName()).speed;
        var ps = [ p ];
        for (var _i = 0, _a = this.weaponFirePoints; _i < _a.length; _i++) {
          var node = _a[_i];
          ps.push(p.add(node.position));
        }
        for (var i = 0; i < ps.length; i++) {
          var psp = ps[i];
          psp = this.node.convertToWorldSpaceAR(psp);
          psp = dungeonNode.convertToNodeSpaceAR(psp);
          ps[i] = psp.clone();
        }
        firePrefab.parent = dungeonNode;
        firePrefab.position = ps[0];
        firePrefab.zIndex = IndexZ_1.default.OVERHEAD;
        firePrefab.opacity = 255;
        firePrefab.setScale(.2);
        firePrefab.active = true;
        cc.tween(firePrefab).to(.1 / timeScale, {
          position: ps[1]
        }).to(.1 / timeScale, {
          position: ps[2]
        }).to(.1 / timeScale, {
          position: ps[3]
        }).to(.1 / timeScale, {
          position: ps[4]
        }).start();
      };
      MeleeWeapon.prototype.MeleeAttackFinish = function() {
        this.isAttacking = false;
        this.isFist || (this.isComboing = false);
      };
      MeleeWeapon.prototype.ComboStart = function() {
        this.isComboing = true;
      };
      MeleeWeapon.prototype.ComboFinish = function() {
        this.isComboing = false;
      };
      MeleeWeapon.prototype.ComboTime = function() {
        if (this.isAttackPressed) {
          this.isAttackPressed = false;
          this.anim.pause();
          this.comboMiss && this.player.showFloatFont(this.node.parent, 0, false, true, false, false, false);
          this.attackDo(this.playerData, this.comboMiss, this.fistCombo);
          this.player.playerAnim(PlayerAvatar_1.default.STATE_ATTACK, this.player.currentDir);
          this.player.stopHiding();
          this.isComboing = false;
        }
      };
      MeleeWeapon.prototype.ExAttackTime = function() {
        this.player.remoteExAttack(this.comboType);
      };
      MeleeWeapon.prototype.AudioTime = function() {
        var audioName = AudioPlayer_1.default.MELEE;
        var swordNames = [ AudioPlayer_1.default.SWORD_ATTACK, AudioPlayer_1.default.SWORD_ATTACK1, AudioPlayer_1.default.SWORD_ATTACK2 ];
        var swordName = swordNames[Logic_1.default.getRandomNum(0, 2)];
        var fistNames = [ AudioPlayer_1.default.FIST, AudioPlayer_1.default.FIST1, AudioPlayer_1.default.FIST2 ];
        var fistName = fistNames[Logic_1.default.getRandomNum(0, 2)];
        if (this.isStab && !this.isFar) {
          audioName = fistName;
          this.comboType == MeleeWeapon_1.COMBO3 && (audioName = swordName);
        }
        this.isStab || this.isFar || (audioName = swordName);
        this.isStab && this.isFar && (audioName = swordName);
        !this.isStab && this.isFar && (audioName = swordName);
        this.isFist && (audioName = fistName);
        AudioPlayer_1.default.play(audioName);
      };
      MeleeWeapon.prototype.RefreshTime = function() {
        this.hasTargetMap = {};
      };
      MeleeWeapon.prototype.DashTime = function(speed) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.DASH);
        speed || (speed = 600);
        this.schedule(function() {
          _this.player.getWalkSmoke(_this.player.node, _this.node.position);
        }, .05, 4, 0);
        var pos = cc.v2(this.hv.x, this.hv.y);
        this.player.sc.isMoving = false;
        this.player.isWeaponDashing = true;
        pos = pos.equals(cc.Vec2.ZERO) ? this.player.isFaceRight ? cc.v2(1, 0) : cc.v2(-1, 0) : pos.normalizeSelf();
        var posv3 = cc.v3(pos.x, pos.y);
        this.hv = posv3.clone();
        pos = pos.mul(speed);
        this.player.rigidbody.linearVelocity = pos;
        this.scheduleOnce(function() {
          _this.player.isWeaponDashing = false;
          _this.player.rigidbody.linearVelocity = cc.Vec2.ZERO;
          _this.player.playerAnim(PlayerAvatar_1.default.STATE_IDLE, _this.player.currentDir);
        }, .2);
      };
      MeleeWeapon.prototype.EffectTime = function() {
        var _this = this;
        var p = this.weaponFirePoint.position.clone();
        var ran = Logic_1.default.getRandomNum(0, 100);
        var finalCommon = this.playerData.FinalCommon;
        var waves = [ finalCommon.magicDamage > 0 && ran < finalCommon.iceRate ? MeleeWeapon_1.ELEMENT_TYPE_ICE : 0, finalCommon.magicDamage > 0 && ran < finalCommon.fireRate ? MeleeWeapon_1.ELEMENT_TYPE_FIRE : 0, finalCommon.magicDamage > 0 && ran < finalCommon.lighteningRate ? MeleeWeapon_1.ELEMENT_TYPE_LIGHTENING : 0, finalCommon.magicDamage > 0 && ran < finalCommon.toxicRate ? MeleeWeapon_1.ELEMENT_TYPE_TOXIC : 0, finalCommon.magicDamage > 0 && ran < finalCommon.curseRate ? MeleeWeapon_1.ELEMENT_TYPE_CURSE : 0 ];
        var delay = !this.isStab && this.isFar ? .5 : 0;
        this.scheduleOnce(function() {
          for (var _i = 0, waves_1 = waves; _i < waves_1.length; _i++) {
            var w = waves_1[_i];
            _this.getWaveLight(_this.dungeon.node, p, w, _this.isStab, _this.isFar);
          }
        }, delay);
      };
      MeleeWeapon.prototype.setHandAndWeaponInVisible = function(flag) {
        if (flag) {
          this.weaponSprite.node.opacity = 0;
          this.handSprite.node.opacity = 0;
        } else {
          this.weaponSprite.node.opacity = 255;
          this.handSprite.node.opacity = 255;
        }
      };
      MeleeWeapon.prototype.updateLogic = function(dt) {
        var pos = ActorUtils_1.default.getDirectionFromNearestEnemy(this.player.node.position, false, this.dungeon, false, 400);
        pos.equals(cc.Vec3.ZERO) || (this.hv = pos);
        this.isAttacking || this.rotateCollider(cc.v2(this.hv.x, this.hv.y));
        this.node.angle = Logic_1.default.lerp(this.node.angle, this.currentAngle, 5 * dt);
      };
      MeleeWeapon.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        var sx = Math.abs(this.node.scaleX);
        this.node.scaleX = this.player.node.scaleX > 0 ? sx : -sx;
        var sy = Math.abs(this.node.scaleY);
        this.node.scaleY = this.node.scaleX < 0 ? -sy : sy;
        this.currentAngle = Utils_1.default.getRotateAngle(direction, this.node.scaleX < 0);
        this.currentAngle < 0 && (this.currentAngle += 360);
        this.currentAngle >= 0 && this.currentAngle <= 90 && this.node.angle >= 225 && this.node.angle <= 360 ? this.node.angle -= 360 : this.node.angle >= 0 && this.node.angle <= 90 && this.currentAngle >= 225 && this.currentAngle <= 360 && (this.node.angle += 360);
      };
      MeleeWeapon.prototype.onCollisionStay = function(other, self) {
        if (self.radius > 0) {
          if (this.hasTargetMap[other.node.uuid] && this.hasTargetMap[other.node.uuid] > 0) {
            this.hasTargetMap[other.node.uuid]++;
            return false;
          }
          this.hasTargetMap[other.node.uuid] = 1;
          return this.attacking(other, this.anim, false);
        }
      };
      MeleeWeapon.prototype.beatBack = function(actor) {
        var rigidBody = actor.getComponent(cc.RigidBody);
        var pos = this.Hv.clone();
        pos.equals(cc.Vec3.ZERO) && (pos = cc.v3(1, 0));
        var power = 50 + this.exBeatBack;
        power = !this.isFar && this.isStab ? 50 : this.isFar && this.isStab ? 200 : this.isFar || this.isStab ? 50 : 120;
        this.comboType == MeleeWeapon_1.COMBO3 && (power += 50);
        pos = pos.normalizeSelf().mul(power);
        this.scheduleOnce(function() {
          rigidBody.linearVelocity = cc.Vec2.ZERO;
          rigidBody.applyLinearImpulse(cc.v2(pos.x, pos.y), rigidBody.getLocalCenter(), true);
        }, .05);
      };
      MeleeWeapon.prototype.attacking = function(attackTarget, anim, isShadow) {
        var _this = this;
        if (!attackTarget || !this.isAttacking) return false;
        var damage = new DamageData_1.default();
        var common = new CommonData_1.default();
        if (this.player) {
          damage = this.player.data.getFinalAttackPoint();
          common = this.player.data.FinalCommon;
        }
        damage.isStab = this.isStab;
        damage.isFist = this.isFist;
        damage.isFar = this.isFar;
        damage.isBlunt = this.isBlunt;
        damage.isMelee = true;
        damage.comboType = this.comboType;
        this.isFist && (damage.comboType = this.fistCombo);
        var damageSuccess = false;
        var attackSuccess = false;
        if (attackTarget.tag == ColliderTag_1.ColliderTag.NONPLAYER) {
          var monster = attackTarget.node.getComponent(NonPlayer_1.default);
          if (monster && !monster.sc.isDied && !this.isMiss && monster.data.isEnemy > 0) {
            damage.isBackAttack = monster.isPlayerBehindAttack() && common.damageBack > 0;
            damage.isBackAttack && (damage.realDamage += common.damageBack);
            damageSuccess = monster.takeDamage(damage);
            if (damageSuccess) {
              this.beatBack(monster);
              this.addTargetAllStatus(common, monster);
            }
          }
        } else if (attackTarget.tag == ColliderTag_1.ColliderTag.BOSS) {
          var boss = attackTarget.node.getComponent(Boss_1.default);
          if (boss && !boss.sc.isDied && !this.isMiss) {
            damageSuccess = boss.takeDamage(damage);
            damageSuccess && this.addTargetAllStatus(common, boss);
          }
        } else if (attackTarget.tag == ColliderTag_1.ColliderTag.BUILDING || attackTarget.tag == ColliderTag_1.ColliderTag.WALL) {
          var box = attackTarget.node.getComponent(Box_1.default);
          if (box) {
            attackSuccess = true;
            box.breakBox();
          }
          if (!attackSuccess) {
            var interactBuilding = attackTarget.node.getComponent(InteractBuilding_1.default);
            if (interactBuilding && interactBuilding.data.currentHealth > 0) {
              attackSuccess = true;
              interactBuilding.takeDamage(damage);
            }
          }
          if (!attackSuccess) {
            var hitBuilding = attackTarget.node.getComponent(HitBuilding_1.default);
            if (hitBuilding && hitBuilding.data.currentHealth > 0) {
              attackSuccess = true;
              hitBuilding.takeDamage(damage);
            }
          }
        }
        damageSuccess && this.drainSkill.next(function() {
          var drain = _this.player.data.getLifeDrain();
          drain > 0 && _this.player.takeDamage(new DamageData_1.default(-drain));
        }, 1, true);
        this.isMiss = false;
        if (damageSuccess || attackSuccess) {
          anim.pause();
          isShadow || EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            isHeavyShaking: this.comboType == MeleeWeapon_1.COMBO3
          });
          this.scheduleOnce(function() {
            anim.resume();
          }, .1);
        }
        damageSuccess && this.player.data.AvatarData.organizationIndex == AvatarData_1.default.TECH && this.player.updateDream(-1);
        return damageSuccess || attackSuccess;
      };
      MeleeWeapon.prototype.addTargetAllStatus = function(data, target) {
        this.addTargetStatus(data.iceRate, target, StatusManager_1.default.FROZEN);
        this.addTargetStatus(data.fireRate, target, StatusManager_1.default.BURNING);
        this.addTargetStatus(data.lighteningRate, target, StatusManager_1.default.DIZZ);
        this.addTargetStatus(data.toxicRate, target, StatusManager_1.default.TOXICOSIS);
        this.addTargetStatus(data.curseRate, target, StatusManager_1.default.CURSING);
        this.addTargetStatus(data.realRate, target, StatusManager_1.default.BLEEDING);
      };
      MeleeWeapon.prototype.addTargetStatus = function(rate, target, statusType) {
        Logic_1.default.getRandomNum(0, 100) < rate && target.addStatus(statusType, new FromData_1.default());
      };
      var MeleeWeapon_1;
      MeleeWeapon.ELEMENT_TYPE_ICE = 1;
      MeleeWeapon.ELEMENT_TYPE_FIRE = 2;
      MeleeWeapon.ELEMENT_TYPE_LIGHTENING = 3;
      MeleeWeapon.ELEMENT_TYPE_TOXIC = 4;
      MeleeWeapon.ELEMENT_TYPE_CURSE = 5;
      MeleeWeapon.COMBO1 = 1;
      MeleeWeapon.COMBO2 = 2;
      MeleeWeapon.COMBO3 = 3;
      __decorate([ property(cc.Node) ], MeleeWeapon.prototype, "playerNode", void 0);
      __decorate([ property(MeleeWeaponChild_1.default) ], MeleeWeapon.prototype, "waveWeapon", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "iceLight", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "fireLight", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "lighteningLight", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "toxicLight", void 0);
      __decorate([ property(cc.Prefab) ], MeleeWeapon.prototype, "curseLight", void 0);
      MeleeWeapon = MeleeWeapon_1 = __decorate([ ccclass ], MeleeWeapon);
      return MeleeWeapon;
    }(cc.Component);
    exports.default = MeleeWeapon;
    cc._RF.pop();
  }, {
    "./Actor/ColliderTag": "ColliderTag",
    "./Boss/Boss": "Boss",
    "./Building/Box": "Box",
    "./Building/HitBuilding": "HitBuilding",
    "./Building/InteractBuilding": "InteractBuilding",
    "./Data/AvatarData": "AvatarData",
    "./Data/CommonData": "CommonData",
    "./Data/DamageData": "DamageData",
    "./Data/FromData": "FromData",
    "./Data/PlayerData": "PlayerData",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./Manager/InventoryManager": "InventoryManager",
    "./Manager/StatusManager": "StatusManager",
    "./MeleeWeaponChild": "MeleeWeaponChild",
    "./NonPlayer": "NonPlayer",
    "./Player": "Player",
    "./PlayerAvatar": "PlayerAvatar",
    "./Utils/ActorUtils": "ActorUtils",
    "./Utils/AudioPlayer": "AudioPlayer",
    "./Utils/IndexZ": "IndexZ",
    "./Utils/NextStep": "NextStep",
    "./Utils/Utils": "Utils"
  } ],
  MgCrack: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d929jibO9BjosaDA5nr9aL", "MgCrack");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var MonsterGenerator_1 = require("./MonsterGenerator");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MgCrack = function(_super) {
      __extends(MgCrack, _super);
      function MgCrack() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.frames = [ "crack000", "crack001", "crack002", "crack003" ];
        return _this;
      }
      MgCrack.prototype.init = function(dungeon, generatorInterval, generatorCount, generatorList) {
        _super.prototype.init.call(this, dungeon, generatorInterval, generatorCount, generatorList);
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
      };
      MgCrack.prototype.setFrames = function(frames) {
        this.frames = frames;
      };
      MgCrack.prototype.open = function() {
        var _this = this;
        if (_super.prototype.open.call(this)) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SCARABCRAWL);
          var tween = cc.tween(this.sprite);
          var _loop_1 = function(frame) {
            tween.then(cc.tween(this_1.sprite).delay(.2).call(function() {
              _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(frame);
            }));
          };
          var this_1 = this;
          for (var _i = 0, _a = this.frames; _i < _a.length; _i++) {
            var frame = _a[_i];
            _loop_1(frame);
          }
          tween.call(function() {
            _this.showMonster();
          }).start();
        }
        return true;
      };
      MgCrack.prototype.addMonster = function() {
        if (_super.prototype.addMonster.call(this)) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SCARABCRAWL);
          this.showMonster();
        }
        return true;
      };
      MgCrack = __decorate([ ccclass ], MgCrack);
      return MgCrack;
    }(MonsterGenerator_1.default);
    exports.default = MgCrack;
    cc._RF.pop();
  }, {
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./MonsterGenerator": "MonsterGenerator"
  } ],
  MgWentLine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "657e7MsMqdJ2by+hThG3E0k", "MgWentLine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var MonsterGenerator_1 = require("./MonsterGenerator");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MgWentLine = function(_super) {
      __extends(MgWentLine, _super);
      function MgWentLine() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      MgWentLine.prototype.init = function(dungeon, generatorInterval, generatorCount, generatorList) {
        _super.prototype.init.call(this, dungeon, generatorInterval, generatorCount, generatorList);
        this.node.getChildByName("sprite").getChildByName("door").opacity = this.data.isOpen ? 0 : 255;
      };
      MgWentLine.prototype.open = function() {
        if (_super.prototype.open.call(this)) {
          this.anim.play("WentLineOpen");
          AudioPlayer_1.default.play(AudioPlayer_1.default.WENTLINE_OPEN);
        }
        return true;
      };
      MgWentLine.prototype.ShowFinish = function() {
        this.showMonster();
      };
      MgWentLine.prototype.addMonster = function() {
        if (_super.prototype.addMonster.call(this)) {
          this.anim.play("WentLineShow");
          AudioPlayer_1.default.play(AudioPlayer_1.default.WENTLINE_SHOW);
        }
        return true;
      };
      MgWentLine = __decorate([ ccclass ], MgWentLine);
      return MgWentLine;
    }(MonsterGenerator_1.default);
    exports.default = MgWentLine;
    cc._RF.pop();
  }, {
    "../Utils/AudioPlayer": "AudioPlayer",
    "./MonsterGenerator": "MonsterGenerator"
  } ],
  MiniMap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b8f7e0qah9Ot5qnGbL59sxK", "MiniMap");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var RectRoom_1 = require("./Rect/RectRoom");
    var EventHelper_1 = require("./EventHelper");
    var RoomType_1 = require("./Rect/RoomType");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MiniMap = function(_super) {
      __extends(MiniMap, _super);
      function MiniMap() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.miniTile = null;
        _this.width = 0;
        _this.height = 0;
        return _this;
      }
      MiniMap_1 = MiniMap;
      MiniMap.prototype.onLoad = function() {
        var _this = this;
        cc.director.on(EventHelper_1.EventHelper.CHANGE_MINIMAP, function(event) {
          _this.changeMap(event.detail.x, event.detail.y);
        });
        this.width = Logic_1.default.mapManager.rectDungeon.map.length;
        this.height = Logic_1.default.mapManager.rectDungeon.map[0].length;
        this.map = new Array();
        for (var i = 0; i < this.width; i++) {
          this.map[i] = new Array();
          for (var j = 0; j < this.height; j++) {
            var node = cc.instantiate(this.miniTile);
            node.group = "ui";
            this.map[i][j] = node;
            this.map[i][j].parent = this.node;
            this.map[i][j].position = cc.v3(i * node.width, j * node.height);
            this.map[i][j].color = cc.Color.BLACK;
            this.map[i][j].opacity = 0;
          }
        }
      };
      MiniMap.prototype.start = function() {};
      MiniMap.prototype.changeMap = function(x, y) {
        var levelData = Logic_1.default.worldLoader.getCurrentLevelData();
        if (!this.map) return;
        var groundOilGoldData = Logic_1.default.groundOilGoldData.clone();
        for (var j = 0; j < this.height; j++) for (var i = 0; i < this.width; i++) {
          var isFound = true;
          var rectroom = Logic_1.default.mapManager.rectDungeon.map[i][j];
          if (!rectroom) continue;
          var state = rectroom.state;
          var roomType = rectroom.roomType;
          levelData.minimap[i][j] && (this.map[i][j].getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("minimap" + levelData.minimap[i][j]));
          levelData.minimaplock[i][j] ? this.map[i][j].getChildByName("lock").getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("minimaplock" + levelData.minimaplock[i][j]) : this.map[i][j].getChildByName("lock").getComponent(cc.Sprite).spriteFrame = null;
          groundOilGoldData.chapter == Logic_1.default.chapterIndex && groundOilGoldData.level == Logic_1.default.level && groundOilGoldData.x == rectroom.x && groundOilGoldData.y == rectroom.y && groundOilGoldData.value > 0 && (this.map[i][j].getChildByName("label").active = true);
          this.map[i][j].color = this.getColor(MiniMap_1.ColorLevel.HIDE);
          if (isFound) {
            this.map[i][j].color = this.getColor(MiniMap_1.ColorLevel.NORMAL);
            this.map[i][j].opacity = 255;
            var isClear = state == RectRoom_1.default.STATE_CLEAR;
            this.map[i][j].color = this.getColor(isClear ? MiniMap_1.ColorLevel.CLEAR : MiniMap_1.ColorLevel.NORMAL);
            this.getMapColor(i, j, roomType, RoomType_1.default.EMPTY_ROOM, isClear, MiniMap_1.ColorLevel.EMPTY, MiniMap_1.ColorLevel.EMPTY);
            this.getMapColor(i, j, roomType, RoomType_1.default.BOSS_ROOM, isClear, MiniMap_1.ColorLevel.NORMAL_BOSS, MiniMap_1.ColorLevel.CLEAR_BOSS);
            this.getMapColor(i, j, roomType, RoomType_1.default.LOOT_ROOM, isClear, MiniMap_1.ColorLevel.NORMAL_LOOT, MiniMap_1.ColorLevel.CLEAR_LOOT);
            this.getMapColor(i, j, roomType, RoomType_1.default.MERCHANT_ROOM, isClear, MiniMap_1.ColorLevel.NORMAL_MERCHANT, MiniMap_1.ColorLevel.CLEAR_MERCHANT);
            this.getMapColor(i, j, roomType, RoomType_1.default.START_ROOM, isClear, MiniMap_1.ColorLevel.NORMAL_START, MiniMap_1.ColorLevel.NORMAL_START);
            this.getMapColor(i, j, roomType, RoomType_1.default.END_ROOM, isClear, MiniMap_1.ColorLevel.NORMAL_END, MiniMap_1.ColorLevel.CLEAR_END);
            this.getMapColor(i, j, roomType, RoomType_1.default.ELITE_ROOM, isClear, MiniMap_1.ColorLevel.NORMAL_PUZZLE, MiniMap_1.ColorLevel.CLEAR_PUZZLE);
            this.getMapColor(i, j, roomType, RoomType_1.default.REST_ROOM, isClear, MiniMap_1.ColorLevel.NORMAL_REST, MiniMap_1.ColorLevel.NORMAL_REST);
            this.getMapColor(i, j, roomType, RoomType_1.default.PREPARE_ROOM, isClear, MiniMap_1.ColorLevel.NORMAL_PREPARE, MiniMap_1.ColorLevel.NORMAL_PREPARE);
            this.getMapColor(i, j, roomType, RoomType_1.default.TEST_ROOM, isClear, MiniMap_1.ColorLevel.NORMAL_TEST, MiniMap_1.ColorLevel.NORMAL_TEST);
            roomType == RoomType_1.default.START_ROOM && (this.map[i][j].color = this.getColor(MiniMap_1.ColorLevel.NORMAL_START));
            i == x && j == y && (this.map[x][y].color = this.getColor(MiniMap_1.ColorLevel.PLAYER));
          }
        }
      };
      MiniMap.prototype.getMapColor = function(i, j, roomType, roomTypeType, isClear, typeNormal, typeClear) {
        roomType.isEqual(roomTypeType) && (this.map[i][j].color = this.getColor(isClear ? typeClear : typeNormal));
      };
      MiniMap.prototype.getColor = function(t) {
        var color = new cc.Color(0, 0, 0);
        switch (t) {
         case MiniMap_1.ColorLevel.EMPTY:
         case MiniMap_1.ColorLevel.HIDE:
          color = new cc.Color(0, 0, 0);
          break;

         case MiniMap_1.ColorLevel.NORMAL:
          color = new cc.Color(128, 128, 128);
          break;

         case MiniMap_1.ColorLevel.CLEAR:
          color = new cc.Color(255, 255, 255);
          break;

         case MiniMap_1.ColorLevel.PLAYER:
          color = new cc.Color(0, 255, 0);
          break;

         case MiniMap_1.ColorLevel.NORMAL_START:
          color = new cc.Color(144, 238, 144);
          break;

         case MiniMap_1.ColorLevel.NORMAL_END:
          color = new cc.Color(100, 149, 237);
          break;

         case MiniMap_1.ColorLevel.NORMAL_BOSS:
          color = new cc.Color(128, 0, 128);
          break;

         case MiniMap_1.ColorLevel.NORMAL_LOOT:
         case MiniMap_1.ColorLevel.NORMAL_MERCHANT:
          color = new cc.Color(255, 215, 0);
          break;

         case MiniMap_1.ColorLevel.NORMAL_REST:
          color = new cc.Color(139, 69, 19);
          break;

         case MiniMap_1.ColorLevel.NORMAL_PREPARE:
          color = new cc.Color(255, 165, 0);
          break;

         case MiniMap_1.ColorLevel.NORMAL_TEST:
          color = new cc.Color(238, 130, 238);
          break;

         case MiniMap_1.ColorLevel.NORMAL_PUZZLE:
          color = new cc.Color(128, 0, 128);
          break;

         case MiniMap_1.ColorLevel.CLEAR_LOOT:
         case MiniMap_1.ColorLevel.CLEAR_MERCHANT:
          color = new cc.Color(240, 230, 140);
          break;

         case MiniMap_1.ColorLevel.CLEAR_BOSS:
          color = new cc.Color(75, 0, 130);
          break;

         case MiniMap_1.ColorLevel.CLEAR_END:
          color = new cc.Color(176, 196, 222);
          break;

         case MiniMap_1.ColorLevel.CLEAR_PUZZLE:
          color = new cc.Color(75, 0, 130);
        }
        return color;
      };
      MiniMap.prototype.getMixColor = function(color1, color2) {
        var c1 = color1.clone();
        var c2 = color2.clone();
        var c3 = cc.color();
        var r = c1.getR() + c2.getR();
        var g = c1.getG() + c2.getG();
        var b = c1.getB() + c2.getB();
        c3.setR(r > 255 ? 255 : r);
        c3.setG(g > 255 ? 255 : g);
        c3.setB(b > 255 ? 255 : b);
        return c3;
      };
      var MiniMap_1;
      MiniMap.ColorLevel = {
        EMPTY: -1,
        HIDE: 0,
        NORMAL: 1,
        PLAYER: 2,
        CLEAR: 3,
        NORMAL_BOSS: 4,
        CLEAR_PUZZLE: 5,
        CLEAR_END: 6,
        CLEAR_BOSS: 7,
        NORMAL_LOOT: 8,
        CLEAR_LOOT: 9,
        NORMAL_START: 10,
        NORMAL_END: 11,
        NORMAL_REST: 12,
        NORMAL_PREPARE: 13,
        NORMAL_TEST: 14,
        NORMAL_PUZZLE: 15,
        NORMAL_MERCHANT: 16,
        CLEAR_MERCHANT: 17
      };
      __decorate([ property(cc.Prefab) ], MiniMap.prototype, "miniTile", void 0);
      MiniMap = MiniMap_1 = __decorate([ ccclass ], MiniMap);
      return MiniMap;
    }(cc.Component);
    exports.default = MiniMap;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./Rect/RectRoom": "RectRoom",
    "./Rect/RoomType": "RoomType"
  } ],
  MonsterGenerator: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b0bbeYGzEhP+4L1gNiAPnRb", "MonsterGenerator");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var IndexZ_1 = require("../Utils/IndexZ");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MonsterGenerator = function(_super) {
      __extends(MonsterGenerator, _super);
      function MonsterGenerator() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.canAdd = false;
        _this.addFinish = false;
        _this.count = 0;
        _this.addDelay = 2;
        _this.nonplayerlist = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      MonsterGenerator.prototype.init = function(dungeon, generatorInterval, generatorCount, generatorList) {
        this.dungeon = dungeon;
        this.data.generatorCount = generatorCount;
        this.data.generatorInterval = generatorInterval;
        this.data.generatorList = generatorList;
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position.clone().add(cc.v3(0, 120)));
        var isReborn = Logic_1.default.mapManager.getCurrentRoom().isReborn;
        var data = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
        if (data) {
          this.data.isOpen = data.isOpen;
          isReborn && (this.data.isOpen = false);
        } else Logic_1.default.mapManager.setCurrentBuildingData(this.data.clone());
        this.anim = this.getComponent(cc.Animation);
        this.addFinish = this.data.isOpen;
      };
      MonsterGenerator.prototype.isTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > this.data.generatorInterval) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      MonsterGenerator.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.isTimeDelay(dt) && this.addMonster();
      };
      MonsterGenerator.prototype.addMonster = function() {
        if (this.count >= this.data.generatorCount) {
          this.addFinish = true;
          return false;
        }
        if (!this.canAdd) return false;
        return true;
      };
      MonsterGenerator.prototype.showMonster = function() {
        var pos = Dungeon_1.default.getIndexInMap(this.node.position.clone());
        this.nonplayerlist.push(this.dungeon.monsterManager.addMonsterFromData(this.data.generatorList[Logic_1.default.getRandomNum(0, this.data.generatorList.length - 1)], pos, this.dungeon, true));
        this.count++;
      };
      MonsterGenerator.prototype.open = function() {
        var _this = this;
        if (this.data.isOpen) return false;
        this.data.isOpen = true;
        this.scheduleOnce(function() {
          _this.canAdd = true;
        }, this.addDelay);
        var savedata = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
        savedata ? savedata.isOpen = this.data.isOpen : Logic_1.default.mapManager.setCurrentBuildingData(this.data.clone());
        return true;
      };
      MonsterGenerator.prototype.onCollisionEnter = function(other, self) {
        this.data.isOpen || other.tag != ColliderTag_1.ColliderTag.PLAYER || this.open();
      };
      MonsterGenerator = __decorate([ ccclass ], MonsterGenerator);
      return MonsterGenerator;
    }(Building_1.default);
    exports.default = MonsterGenerator;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  MonsterManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "441f6g4iH9M574s+sdv3n8E", "MonsterManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NonPlayer_1 = require("../NonPlayer");
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var Slime_1 = require("../Boss/Slime");
    var RoomType_1 = require("../Rect/RoomType");
    var Boss_1 = require("../Boss/Boss");
    var BaseManager_1 = require("./BaseManager");
    var GameHud_1 = require("../UI/GameHud");
    var MonsterRandomAttr_1 = require("./MonsterRandomAttr");
    var Random4Save_1 = require("../Utils/Random4Save");
    var NonPlayerData_1 = require("../Data/NonPlayerData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MonsterManager = function(_super) {
      __extends(MonsterManager, _super);
      function MonsterManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.monster = null;
        _this.kraken = null;
        _this.captain = null;
        _this.slime = null;
        _this.warmachine = null;
        _this.rah = null;
        _this.iceDemon = null;
        _this.evilEye = null;
        _this.dryad = null;
        _this.sphinx = null;
        _this.dragon = null;
        _this.maxHealth00 = 200;
        _this.maxHealth01 = 400;
        _this.maxHealth02 = 600;
        _this.maxHealth03 = 800;
        _this.maxHealth04 = 1e3;
        _this.maxHealth05 = 1200;
        _this.maxHealth06 = 1400;
        _this.maxHealth07 = 1600;
        _this.maxHealth08 = 1800;
        _this.maxHealth09 = 2e3;
        _this.monsters = new Array();
        _this.bosses = new Array();
        _this.isRoomInitWithEnemy = false;
        _this.seed = 0;
        _this.monsterRandomAttr = new MonsterRandomAttr_1.default();
        return _this;
      }
      MonsterManager_1 = MonsterManager;
      Object.defineProperty(MonsterManager.prototype, "monsterList", {
        get: function() {
          return this.monsters;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MonsterManager.prototype, "bossList", {
        get: function() {
          return this.bosses;
        },
        enumerable: false,
        configurable: true
      });
      MonsterManager.prototype.clear = function() {
        for (var _i = 0, _a = this.monsters; _i < _a.length; _i++) {
          var m = _a[_i];
          m && m.isValid && m.destroy();
        }
        for (var _b = 0, _c = this.bosses; _b < _c.length; _b++) {
          var b = _c[_b];
          b && b.isValid && b.destroy();
        }
        this.monsters = new Array();
        this.bosses = new Array();
      };
      MonsterManager.prototype.addMonsterFromData = function(resName, indexPos, dungeon, isSummon) {
        var nonplayer = this.addMonster(this.getMonster(resName, dungeon, isSummon), indexPos, null);
        if (nonplayer.data.childCount > 0 && nonplayer.data.childResName.length > 0) for (var i = 0; i < nonplayer.data.childCount; i++) nonplayer.childNonPlayerList.push(this.addMonster(this.getMonster(nonplayer.data.childResName, dungeon, isSummon), indexPos, nonplayer));
        return nonplayer;
      };
      MonsterManager.prototype.addMonstersAndBossFromMap = function(dungeon, mapDataStr, indexPos) {
        if (Dungeon_1.default.isFirstEqual(mapDataStr, "M")) {
          var index = parseInt(mapDataStr[1]);
          if (isNaN(index)) "a" == mapDataStr[1] ? this.addMonsterFromData(MonsterManager_1.MONSTER_DUMMY, indexPos, dungeon, false) : "b" == mapDataStr[1] && this.addMonsterFromData(MonsterManager_1.MONSTER_CHEST, indexPos, dungeon, false); else {
            var arr = new Array();
            switch (Logic_1.default.chapterIndex) {
             case Logic_1.default.CHAPTER00:
              arr = MonsterManager_1.MONSTERS_LAB;
              break;

             case Logic_1.default.CHAPTER01:
              arr = MonsterManager_1.MONSTERS_SHIP;
              break;

             case Logic_1.default.CHAPTER02:
              arr = MonsterManager_1.MONSTERS_FOREST;
              break;

             case Logic_1.default.CHAPTER03:
              arr = MonsterManager_1.MONSTERS_PYRAMID;
              break;

             case Logic_1.default.CHAPTER04:
             case Logic_1.default.CHAPTER05:
              arr = MonsterManager_1.MONSTERS_DUNGEON;
              break;

             case Logic_1.default.CHAPTER099:
              arr = MonsterManager_1.MONSTERS_LAB;
            }
            this.addMonsterFromData(arr[index], indexPos, dungeon, false);
          }
          return;
        }
        if ("z0" == mapDataStr) this.addBoss(this.iceDemon, "iconboss000", this.maxHealth00, 0, 2, indexPos, dungeon); else if ("z1" == mapDataStr) this.addBoss(this.warmachine, "iconboss001", this.maxHealth01, 2, 3.5, indexPos, dungeon); else if ("z2" == mapDataStr) this.addBoss(this.captain, "iconboss002", this.maxHealth02, 2, 0, indexPos, dungeon); else if ("z3" == mapDataStr) {
          dungeon.shakeForKraken();
          this.addBoss(this.kraken, "iconboss003", this.maxHealth03, 2, 3.5, indexPos, dungeon);
        } else "z4" == mapDataStr ? this.addBossSlime(0, indexPos, dungeon) : "z5" == mapDataStr ? this.addBoss(this.dryad, "iconboss005", this.maxHealth05, 2, 2, indexPos, dungeon) : "z6" == mapDataStr ? this.addBoss(this.rah, "iconboss006", this.maxHealth06, 2, 2, indexPos, dungeon) : "z7" == mapDataStr ? this.addBoss(this.sphinx, "iconboss007", this.maxHealth07, 2, 2, indexPos, dungeon) : "z8" == mapDataStr ? this.addBoss(this.evilEye, "iconboss008", this.maxHealth08, 2, 2, indexPos, dungeon) : "z9" == mapDataStr && this.addBoss(this.dragon, "iconboss009", this.maxHealth09, 5, 2, indexPos, dungeon);
      };
      MonsterManager.prototype.getRandomMonsterSeed = function() {
        return Logic_1.default.mapManager.getCurrentRoom().seed + this.seed++;
      };
      MonsterManager.prototype.getMonster = function(resName, dungeon, isSummon) {
        var monsterPrefab = null;
        monsterPrefab = cc.instantiate(this.monster);
        monsterPrefab.active = false;
        monsterPrefab.parent = dungeon.node;
        var monster = monsterPrefab.getComponent(NonPlayer_1.default);
        var data = new NonPlayerData_1.default();
        monster.seed = this.getRandomMonsterSeed();
        monster.killPlayerCount = Logic_1.default.getKillPlayerCount(monster.seed);
        var rand4save = Logic_1.default.mapManager.getRandom4Save(monster.seed);
        monster.dungeon = dungeon;
        data.valueCopy(Logic_1.default.monsters[resName]);
        var reborn = Logic_1.default.mapManager.getCurrentRoom().reborn;
        data.reborn = reborn || 0;
        monster.isSummon = isSummon;
        if (rand4save.rand() < .1 + monster.killPlayerCount / 10) {
          this.monsterRandomAttr.addRandomAttrs(2, rand4save);
          data = this.monsterRandomAttr.updateMonsterData(data);
          monster.attrmap = this.monsterRandomAttr.attrmap;
        }
        var variationRate = 5 + 2 * monster.killPlayerCount;
        var up = 0;
        Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.DANGER_ROOM) && (up = 10);
        Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.INSANE_ROOM) && (up = 30);
        variationRate = variationRate + 2 * Logic_1.default.chapterIndex + 2 * Logic_1.default.level + up;
        monster.isVariation = rand4save.getRandomNum(0, 100) < variationRate && data.isTest < 1;
        if (monster.isVariation) {
          data.Common.maxHealth = 2 * data.Common.maxHealth;
          data.Common.maxDream = 2 * data.Common.maxDream;
          data.Common.damageMin = 2 * data.Common.damageMin;
          data.currentHealth = data.Common.maxHealth;
          data.melee > 0 && (data.melee = data.melee > 1 ? data.melee - 1 : 1);
          data.remote > 0 && (data.remote = data.remote > 1 ? data.remote - 1 : 1);
          data.dash > 0 && (data.dash = data.dash > 1 ? data.dash - 1 : 1);
          data.Common.moveSpeed = data.Common.moveSpeed > 0 ? data.Common.moveSpeed + 50 + 10 * monster.killPlayerCount : 0;
        }
        data.Common.maxDream += .25 * data.Common.maxDream * monster.killPlayerCount;
        data.Common.damageMin += .25 * data.Common.damageMin * monster.killPlayerCount;
        data.Common.maxHealth += .25 * data.Common.maxHealth * monster.killPlayerCount;
        data.Common.attackSpeed += 10 * monster.killPlayerCount;
        data.Common.defence += monster.killPlayerCount;
        data.currentHealth = data.Common.maxHealth;
        data.melee - monster.killPlayerCount > 1 && (data.melee -= monster.killPlayerCount);
        data.remote - monster.killPlayerCount > 1 && (data.remote -= monster.killPlayerCount);
        data.dash - monster.killPlayerCount > 1 && (data.dash -= monster.killPlayerCount);
        var rand = rand4save.getRandomNum(0, 100);
        var df = rand4save.getRandomNum(80, 100);
        var er = rand4save.getRandomNum(80, 100);
        var isAddElement = rand <= 5 + 3 * monster.killPlayerCount;
        rand = rand4save.getRandomNum(0, 4);
        if (isAddElement) {
          data.Common.magicDamage += 1;
          data.Common.magicDefence = data.Common.magicDefence + df > 100 ? 100 : data.Common.magicDefence + df;
          switch (rand) {
           case 0:
            data.Common.iceRate = data.Common.iceRate + er > 100 ? 100 : data.Common.iceRate + er;
            data.bodyColor = "#CCFFFF";
            break;

           case 1:
            data.Common.fireRate = data.Common.fireRate + er > 100 ? 100 : data.Common.fireRate + er;
            data.bodyColor = "#FF6633";
            break;

           case 2:
            data.Common.lighteningRate = data.Common.lighteningRate + er > 100 ? 100 : data.Common.lighteningRate + er;
            data.bodyColor = "#0099FF";
            break;

           case 3:
            data.Common.toxicRate = data.Common.toxicRate + er > 100 ? 100 : data.Common.toxicRate + er;
            data.bodyColor = "#66CC00";
            break;

           case 4:
            data.Common.curseRate = data.Common.curseRate + er > 100 ? 100 : data.Common.curseRate + er;
            data.bodyColor = "#660099";
          }
        }
        data.isEnemy = 1;
        monster.data = data;
        monster.sc.isDisguising = data.disguise > 0;
        monster.sc.isDisguising ? monster.changeBodyRes(data.resName, NonPlayer_1.default.RES_DISGUISE) : monster.changeBodyRes(resName, NonPlayer_1.default.RES_IDLE000);
        monster.addAttrIcon();
        return monster;
      };
      MonsterManager.prototype.addMonster = function(monster, pos, parent) {
        monster.node.active = true;
        monster.pos = pos;
        monster.defautPos = pos;
        monster.node.position = Dungeon_1.default.getPosInMap(pos);
        monster.parentNonPlayer = parent;
        this.isRoomInitWithEnemy = monster.data.isTest < 1;
        this.monsterList.push(monster);
        return monster;
      };
      MonsterManager.prototype.addBossSlime = function(type, index, dungeon) {
        if (!this.bosses) return;
        this.isRoomInitWithEnemy = true;
        this.bosses.push(this.getSlime(dungeon, index.clone(), type));
      };
      MonsterManager.prototype.addBoss = function(prefabAsset, resName, maxHealth, attackPoint, delayTime, indexPos, dungeon) {
        var prefab = cc.instantiate(prefabAsset);
        prefab.active = false;
        prefab.parent = dungeon.node;
        var boss = prefab.getComponent(Boss_1.default);
        boss.dungeon = dungeon;
        var data = new NonPlayerData_1.default();
        data.resName = resName;
        data.updateHA(maxHealth, maxHealth, attackPoint);
        boss.data = data;
        boss.transportBoss(indexPos.x, indexPos.y);
        boss.healthBar = this.node.parent.getComponentInChildren(GameHud_1.default).bossHealthBar;
        boss.node.active = true;
        this.bosses.push(boss);
        this.isRoomInitWithEnemy = true;
        this.scheduleOnce(function() {
          boss.showBoss();
        }, delayTime);
      };
      MonsterManager.prototype.getSlime = function(dungeon, posIndex, type) {
        var prefab = null;
        prefab = cc.instantiate(this.slime);
        prefab.active = false;
        prefab.parent = dungeon.node;
        var slime = prefab.getComponent(Slime_1.default);
        slime.dungeon = dungeon;
        var data = new NonPlayerData_1.default();
        data.resName = "iconboss004";
        data.Common.moveSpeed = 200;
        switch (type) {
         case 0:
          data.updateHA(this.maxHealth04, this.maxHealth04, 9);
          slime.scaleSize = 2;
          break;

         case 1:
          data.updateHA(200, 200, 7);
          slime.scaleSize = 1.5;
          break;

         case 2:
          data.updateHA(100, 100, 7);
          slime.scaleSize = 1;
          break;

         case 3:
          data.updateHA(50, 50, 5);
          slime.scaleSize = .5;
          break;

         case 4:
          data.updateHA(25, 25, 3);
          slime.scaleSize = .3;
          break;

         case 5:
          data.updateHA(10, 10, 2);
          slime.scaleSize = .2;
          break;

         default:
          data.updateHA(5, 5, 1);
          slime.scaleSize = .2;
        }
        slime.slimeType = type;
        slime.node.scaleY = slime.scaleSize;
        slime.node.scaleX = slime.scaleSize;
        slime.data = data;
        slime.transportBoss(posIndex.x, posIndex.y);
        slime.healthBar = this.node.parent.getComponentInChildren(GameHud_1.default).bossHealthBar;
        slime.node.active = true;
        this.bosses.push(slime);
        return slime;
      };
      MonsterManager.prototype.addRandomMonsters = function(dungeon, reborn) {
        var arr = new Array();
        var rand4save = new Random4Save_1.default(Logic_1.default.mapManager.getCurrentRoom().seed);
        var num = rand4save.getRandomNum(1, 3);
        var up = 0;
        Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.DANGER_ROOM) && (up = 2);
        Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.INSANE_ROOM) && (up = 5);
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          arr = MonsterManager_1.MONSTERS_LAB;
          num = rand4save.getRandomNum(3, 6);
          break;

         case Logic_1.default.CHAPTER01:
          arr = MonsterManager_1.MONSTERS_SHIP;
          num = rand4save.getRandomNum(3, 7);
          break;

         case Logic_1.default.CHAPTER02:
          arr = MonsterManager_1.MONSTERS_FOREST;
          num = rand4save.getRandomNum(4, 8);
          break;

         case Logic_1.default.CHAPTER03:
          arr = MonsterManager_1.MONSTERS_PYRAMID;
          num = rand4save.getRandomNum(4, 9);
          break;

         case Logic_1.default.CHAPTER04:
          arr = MonsterManager_1.MONSTERS_DUNGEON;
          num = rand4save.getRandomNum(5, 10);
          break;

         case Logic_1.default.CHAPTER05:
          arr = MonsterManager_1.MONSTERS_DUNGEON;
          num = rand4save.getRandomNum(5, 11);
          break;

         case Logic_1.default.CHAPTER099:
          arr = MonsterManager_1.MONSTERS_LAB;
          num = rand4save.getRandomNum(1, 3);
        }
        (Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.VERTICAL_ROOM) || Logic_1.default.mapManager.getCurrentRoomType().isEqual(RoomType_1.default.HORIZONTAL_ROOM)) && (num = Math.floor(num / 2));
        var indexmap = [];
        for (var i = 0; i < dungeon.floorIndexmap.length; i++) indexmap.push(dungeon.floorIndexmap[i]);
        for (var i = 0; i <= num + up; i++) {
          if (indexmap.length < 1) continue;
          var randindex = rand4save.getRandomNum(0, indexmap.length - 1);
          var pos = indexmap[randindex];
          indexmap.splice(randindex, 1);
          this.addMonsterFromData(arr[rand4save.getRandomNum(0, arr.length - 1)], cc.v3(pos.x, pos.y), dungeon, false);
        }
      };
      MonsterManager.prototype.updateLogic = function(dt) {
        for (var _i = 0, _a = this.monsters; _i < _a.length; _i++) {
          var monster = _a[_i];
          monster && monster.node.active && monster.updateLogic(dt);
        }
        for (var _b = 0, _c = this.bosses; _b < _c.length; _b++) {
          var boss = _c[_b];
          boss && boss.node.active && boss.updateLogic(dt);
        }
      };
      var MonsterManager_1;
      MonsterManager.BOSS_KRAKEN = "BOSS_KRAKEN";
      MonsterManager.MONSTER_SLIME = "monster000";
      MonsterManager.MONSTER_GOBLIN = "monster001";
      MonsterManager.MONSTER_MUMMY = "monster002";
      MonsterManager.MONSTER_ANUBIS = "monster003";
      MonsterManager.MONSTER_PIRATE = "monster004";
      MonsterManager.MONSTER_SAILOR = "monster005";
      MonsterManager.MONSTER_OCTOPUS = "monster006";
      MonsterManager.MONSTER_KILLER = "monster007";
      MonsterManager.MONSTER_STRONGSAILOR = "monster008";
      MonsterManager.MONSTER_CHEST = "monster009";
      MonsterManager.MONSTER_GARGOYLE = "monster010";
      MonsterManager.MONSTER_CHICKEN = "monster011";
      MonsterManager.MONSTER_SCARAB = "monster012";
      MonsterManager.MONSTER_GOBLIN_ARCHER = "monster013";
      MonsterManager.MONSTER_TERRORDRONE = "monster014";
      MonsterManager.MONSTER_WEREWOLF = "monster015";
      MonsterManager.MONSTER_DUMMY = "monster016";
      MonsterManager.MONSTER_ZEBRA = "monster017";
      MonsterManager.MONSTER_GIRAFFE = "monster018";
      MonsterManager.MONSTER_ZOOMBIE = "monster019";
      MonsterManager.MONSTER_ELECTRICEYE = "monster020";
      MonsterManager.MONSTER_FISH = "monster021";
      MonsterManager.MONSTER_CROCODILE = "monster022";
      MonsterManager.MONSTER_SNAKE = "monster023";
      MonsterManager.MONSTER_DEMON = "monster024";
      MonsterManager.MONSTER_WARLOCK = "monster025";
      MonsterManager.MONSTER_SPIDER = "monster026";
      MonsterManager.MONSTER_BOOMER = "monster027";
      MonsterManager.MONSTER_SANDSTATUE = "monster028";
      MonsterManager.MONSTER_HIPPO = "monster029";
      MonsterManager.MONSTER_CYCLOPS = "monster030";
      MonsterManager.MONSTER_ICEDEMON = "monster031";
      MonsterManager.MONSTER_BITE_ZOMBIE = "monster032";
      MonsterManager.MONSTER_BANANA = "monster033";
      MonsterManager.MONSTER_HOLO_DEVICE = "monster034";
      MonsterManager.MONSTER_HOLO = "monster035";
      MonsterManager.MONSTERS_LAB = [ MonsterManager_1.MONSTER_ZEBRA, MonsterManager_1.MONSTER_TERRORDRONE, MonsterManager_1.MONSTER_KILLER, MonsterManager_1.MONSTER_ZOOMBIE, MonsterManager_1.MONSTER_ELECTRICEYE, MonsterManager_1.MONSTER_GIRAFFE, MonsterManager_1.MONSTER_ICEDEMON, MonsterManager_1.MONSTER_BITE_ZOMBIE, MonsterManager_1.MONSTER_HOLO_DEVICE ];
      MonsterManager.MONSTERS_SHIP = [ MonsterManager_1.MONSTER_PIRATE, MonsterManager_1.MONSTER_SAILOR, MonsterManager_1.MONSTER_OCTOPUS, MonsterManager_1.MONSTER_STRONGSAILOR, MonsterManager_1.MONSTER_FISH, MonsterManager_1.MONSTER_BOOMER ];
      MonsterManager.MONSTERS_FOREST = [ MonsterManager_1.MONSTER_SLIME, MonsterManager_1.MONSTER_GOBLIN, MonsterManager_1.MONSTER_GOBLIN_ARCHER, MonsterManager_1.MONSTER_WEREWOLF, MonsterManager_1.MONSTER_SNAKE, MonsterManager_1.MONSTER_CHICKEN, MonsterManager_1.MONSTER_HIPPO, MonsterManager_1.MONSTER_BANANA ];
      MonsterManager.MONSTERS_PYRAMID = [ MonsterManager_1.MONSTER_MUMMY, MonsterManager_1.MONSTER_ANUBIS, MonsterManager_1.MONSTER_SCARAB, MonsterManager_1.MONSTER_CROCODILE, MonsterManager_1.MONSTER_SANDSTATUE ];
      MonsterManager.MONSTERS_DUNGEON = [ MonsterManager_1.MONSTER_GARGOYLE, MonsterManager_1.MONSTER_WARLOCK, MonsterManager_1.MONSTER_DEMON, MonsterManager_1.MONSTER_CYCLOPS, MonsterManager_1.MONSTER_SPIDER, MonsterManager_1.MONSTER_CYCLOPS ];
      MonsterManager.MONSTERS_SPECIAL = [ MonsterManager_1.MONSTER_DUMMY, MonsterManager_1.MONSTER_CHEST ];
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "monster", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "kraken", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "captain", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "slime", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "warmachine", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "rah", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "iceDemon", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "evilEye", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "dryad", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "sphinx", void 0);
      __decorate([ property(cc.Prefab) ], MonsterManager.prototype, "dragon", void 0);
      MonsterManager = MonsterManager_1 = __decorate([ ccclass ], MonsterManager);
      return MonsterManager;
    }(BaseManager_1.default);
    exports.default = MonsterManager;
    cc._RF.pop();
  }, {
    "../Boss/Boss": "Boss",
    "../Boss/Slime": "Slime",
    "../Data/NonPlayerData": "NonPlayerData",
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../NonPlayer": "NonPlayer",
    "../Rect/RoomType": "RoomType",
    "../UI/GameHud": "GameHud",
    "../Utils/Random4Save": "Random4Save",
    "./BaseManager": "BaseManager",
    "./MonsterRandomAttr": "MonsterRandomAttr"
  } ],
  MonsterRandomAttr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9949f1Fu8NGLLz3ZQCj49YJ", "MonsterRandomAttr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MonsterRandomAttr = function() {
      function MonsterRandomAttr() {
        this.attrmap = {};
        this.attrmap = {};
      }
      MonsterRandomAttr.prototype.hasAttr = function(str) {
        return this.attrmap[str] && this.attrmap[str] > 0;
      };
      MonsterRandomAttr.prototype.addAttr = function(num) {
        var s = num > 9 ? "" + num : "0" + num;
        this.attrmap["attr_" + s] = 1;
      };
      MonsterRandomAttr.prototype.removeAttr = function(num) {
        var s = num > 9 ? "" + num : "0" + num;
        this.attrmap["attr_" + s] = 0;
      };
      MonsterRandomAttr.prototype.addRandomAttrs = function(count, rand4save) {
        this.attrmap = {};
        for (var i = 0; i < count; i++) this.addAttr(rand4save.getRandomNum(1, 23));
      };
      MonsterRandomAttr.prototype.updateMonsterData = function(data) {
        if (data.isTest > 0) return data;
        if (this.hasAttr(MonsterRandomAttr.ATTR_01)) {
          data.Common.maxHealth = 1;
          data.currentHealth = 1;
          data.Common.defence += 50;
        }
        this.hasAttr(MonsterRandomAttr.ATTR_02) && (data.Common.damageMin += 10);
        if (this.hasAttr(MonsterRandomAttr.ATTR_03)) {
          data.Common.maxHealth += 50;
          data.currentHealth += 50;
        }
        this.hasAttr(MonsterRandomAttr.ATTR_04) && (data.Common.damageMin = 1);
        if (this.hasAttr(MonsterRandomAttr.ATTR_05)) {
          data.Common.moveSpeed -= 100;
          data.Common.moveSpeed < 0 && (data.Common.moveSpeed = 50);
        }
        this.hasAttr(MonsterRandomAttr.ATTR_06) && (data.Common.moveSpeed += 100);
        this.hasAttr(MonsterRandomAttr.ATTR_07) && data.melee > 0 && (data.melee += 2);
        this.hasAttr(MonsterRandomAttr.ATTR_08) && data.melee > 0 && (data.melee = 1);
        this.hasAttr(MonsterRandomAttr.ATTR_09) && data.remote > 0 && data.isLineAim <= 0 && data.isArcAim <= 0 && (data.remote = 1);
        this.hasAttr(MonsterRandomAttr.ATTR_10) && data.remote > 0 && (data.remote += 2);
        this.hasAttr(MonsterRandomAttr.ATTR_11) && data.remote > 0 && (data.bulletLineExNum += 1);
        this.hasAttr(MonsterRandomAttr.ATTR_12) && data.remote > 0 && (data.bulletExSpeed = -100);
        this.hasAttr(MonsterRandomAttr.ATTR_13) && data.remote > 0 && (data.bulletExSpeed = 100);
        if (this.hasAttr(MonsterRandomAttr.ATTR_14)) {
          data.Common.dodge += 50;
          data.Common.dodge > 60 && (data.Common.dodge = 60);
        }
        this.hasAttr(MonsterRandomAttr.ATTR_15) && (data.Common.damageBack = 15);
        this.hasAttr(MonsterRandomAttr.ATTR_16) && (data.blink > 0 ? data.blink = 2 : data.blink = 5);
        if (this.hasAttr(MonsterRandomAttr.ATTR_17)) {
          data.Common.magicDamage += 1;
          data.Common.iceRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_18)) {
          data.Common.magicDamage += 1;
          data.Common.fireRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_19)) {
          data.Common.magicDamage += 1;
          data.Common.lighteningRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_20)) {
          data.Common.magicDamage += 1;
          data.Common.toxicRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_21)) {
          data.Common.magicDamage += 1;
          data.Common.curseRate = 100;
        }
        if (this.hasAttr(MonsterRandomAttr.ATTR_22)) {
          data.Common.realDamage += 1;
          data.Common.realRate = 100;
        }
        this.hasAttr(MonsterRandomAttr.ATTR_23) && (data.isBoom = 1);
        return data;
      };
      MonsterRandomAttr.ATTR_01 = "attr_01";
      MonsterRandomAttr.ATTR_02 = "attr_02";
      MonsterRandomAttr.ATTR_03 = "attr_03";
      MonsterRandomAttr.ATTR_04 = "attr_04";
      MonsterRandomAttr.ATTR_05 = "attr_05";
      MonsterRandomAttr.ATTR_06 = "attr_06";
      MonsterRandomAttr.ATTR_07 = "attr_07";
      MonsterRandomAttr.ATTR_08 = "attr_08";
      MonsterRandomAttr.ATTR_09 = "attr_09";
      MonsterRandomAttr.ATTR_10 = "attr_10";
      MonsterRandomAttr.ATTR_11 = "attr_11";
      MonsterRandomAttr.ATTR_12 = "attr_12";
      MonsterRandomAttr.ATTR_13 = "attr_13";
      MonsterRandomAttr.ATTR_14 = "attr_14";
      MonsterRandomAttr.ATTR_15 = "attr_15";
      MonsterRandomAttr.ATTR_16 = "attr_16";
      MonsterRandomAttr.ATTR_17 = "attr_17";
      MonsterRandomAttr.ATTR_18 = "attr_18";
      MonsterRandomAttr.ATTR_19 = "attr_19";
      MonsterRandomAttr.ATTR_20 = "attr_20";
      MonsterRandomAttr.ATTR_21 = "attr_21";
      MonsterRandomAttr.ATTR_22 = "attr_22";
      MonsterRandomAttr.ATTR_23 = "attr_23";
      return MonsterRandomAttr;
    }();
    exports.default = MonsterRandomAttr;
    cc._RF.pop();
  }, {} ],
  MushRoomChild: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1cc30/RGadFmqTqY/1+mFMR", "MushRoomChild");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MushroomChild = function(_super) {
      __extends(MushroomChild, _super);
      function MushroomChild() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isRotate = false;
        _this.isPlus = false;
        return _this;
      }
      MushroomChild.prototype.onCollisionEnter = function(other, self) {
        if (other.tag == ColliderTag_1.ColliderTag.PLAYER) {
          this.isRotate = true;
          var ppos = other.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
          var mpos = this.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
          this.isPlus = ppos.x > mpos.x;
        }
      };
      MushroomChild.prototype.onCollisionExit = function(other, self) {
        other.tag == ColliderTag_1.ColliderTag.PLAYER && (this.isRotate = false);
      };
      MushroomChild.prototype.update = function(dt) {
        this.isRotate ? this.node.angle = Logic_1.default.lerp(this.node.angle, this.isPlus ? 15 : -15, 5 * dt) : this.node.angle = Logic_1.default.lerp(this.node.angle, 0, 5 * dt);
      };
      MushroomChild = __decorate([ ccclass ], MushroomChild);
      return MushroomChild;
    }(Building_1.default);
    exports.default = MushroomChild;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Logic": "Logic",
    "./Building": "Building"
  } ],
  NextStep: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "017cbligblAvaHFuvAAHvD9", "NextStep");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NextStep = function(_super) {
      __extends(NextStep, _super);
      function NextStep() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isExcuting = false;
        _this.storePoint = 1;
        _this.storePointMax = 1;
        _this.duration = 0;
        _this.isLooping = false;
        _this.excuteRest = false;
        _this.secondCount = 0;
        return _this;
      }
      NextStep.prototype.init = function(needCooling, storePointMax, storePoint, duration, lastSecond, secondCallback) {
        this.secondCallback = secondCallback;
        this.storePointMax = storePointMax || 1;
        this.duration = duration && duration > 0 ? duration : 0;
        this.storePointMax < 1 && (this.storePointMax = 1);
        this.storePoint = storePoint || 0 == storePoint ? storePoint : 1;
        this.storePoint <= 0 && (this.storePoint = 0);
        this.storePoint > this.storePointMax && (this.storePoint = this.storePointMax);
        needCooling ? this.storePoint = 0 : this.startLoop(lastSecond);
      };
      NextStep.prototype.startLoop = function(lastSecond) {
        var _this = this;
        if (this.isLooping) return;
        this.unscheduleAllCallbacks();
        this.secondCount = lastSecond && lastSecond > 0 ? lastSecond : this.duration;
        this.isLooping = true;
        if (this.storePointMax == this.storePoint) {
          this._refreshCoolDown();
          this.secondCallback && this.secondCallback(this.secondCount);
          return;
        }
        this.schedule(function() {
          _this.secondCount--;
          if (_this.secondCount <= 0) {
            _this.excuteRest && (_this.isExcuting = false);
            _this._refreshCoolDown();
          }
          _this.secondCallback && _this.secondCallback(_this.secondCount);
        }, this.duration < 1 ? this.duration : 1, cc.macro.REPEAT_FOREVER, this.duration < 1 ? this.duration : 1);
      };
      NextStep.prototype.next = function(callback, duration, excuteRest, secondCallback) {
        this.secondCallback = secondCallback;
        this.excuteRest = excuteRest;
        this.duration = duration;
        if (0 == this.storePoint) {
          this.startLoop();
          return;
        }
        this.storePoint--;
        this.storePoint <= 0 && (this.storePoint = 0);
        this.startLoop();
        callback && callback();
      };
      NextStep.prototype.cutCoolDown = function(cutSecond) {
        cutSecond && this.isLooping && (this.secondCount -= cutSecond);
        return this.secondCount <= 0 ? 0 : this.secondCount;
      };
      NextStep.prototype.refreshCoolDown = function() {
        this._refreshCoolDown();
      };
      NextStep.prototype._refreshCoolDown = function() {
        this.storePoint++;
        this.secondCount = 0;
        if (this.storePoint >= this.storePointMax) {
          this.storePoint = this.storePointMax;
          this.isLooping = false;
          this.secondCount = 0;
          this.unscheduleAllCallbacks();
        } else this.secondCount = this.duration;
      };
      Object.defineProperty(NextStep.prototype, "IsInCooling", {
        get: function() {
          return this.storePoint < this.StorePointMax;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NextStep.prototype, "IsExcuting", {
        get: function() {
          return this.isExcuting;
        },
        set: function(flag) {
          this.isExcuting = flag;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NextStep.prototype, "StorePoint", {
        get: function() {
          return this.storePoint;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NextStep.prototype, "StorePointMax", {
        get: function() {
          return this.storePointMax;
        },
        enumerable: false,
        configurable: true
      });
      return NextStep;
    }(cc.Component);
    exports.default = NextStep;
    cc._RF.pop();
  }, {} ],
  NodeKey: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "61554+RantE/Yzl2Ewb7DHo", "NodeKey");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NodeKey = function() {
      function NodeKey(key, node) {
        this.key = key;
        this.node = node;
      }
      return NodeKey;
    }();
    exports.default = NodeKey;
    cc._RF.pop();
  }, {} ],
  NonPlayerActorState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9492bjmskVBUqR8oiksJoFq", "NonPlayerActorState");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GLOBAL = exports.FALL = exports.BLINK = exports.DIZZ = exports.DODGE = exports.DASH = exports.DISGUISE = exports.BLOCK = exports.TALK = exports.HURT = exports.DIED = exports.SHOW = exports.PRPARE = exports.ATTACK = exports.WALK = exports.IDLE = void 0;
    var BaseNonPlayerActorState_1 = require("../Base/BaseNonPlayerActorState");
    var Utils_1 = require("../Utils/Utils");
    var IDLE = function(_super) {
      __extends(IDLE, _super);
      function IDLE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      IDLE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(IDLE):enter");
        entity.enterIdle();
      };
      IDLE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isMoving ? entity.stateMachine.changeState(NonPlayerActorState.WALK) : entity.sc.isAttacking ? entity.stateMachine.changeState(NonPlayerActorState.ATTACK) : entity.sc.isBlinking && entity.stateMachine.changeState(NonPlayerActorState.BLINK);
      };
      IDLE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(IDLE):exit");
      };
      IDLE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(IDLE):event");
        return true;
      };
      return IDLE;
    }(BaseNonPlayerActorState_1.default);
    exports.IDLE = IDLE;
    var WALK = function(_super) {
      __extends(WALK, _super);
      function WALK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      WALK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        entity.enterWalk();
        Utils_1.default.log(entity.actorName() + "(WALK):enter");
      };
      WALK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isMoving ? entity.sc.isAttacking ? entity.stateMachine.changeState(NonPlayerActorState.ATTACK) : entity.sc.isDodging ? entity.stateMachine.changeState(NonPlayerActorState.DODGE) : entity.sc.isBlinking && entity.stateMachine.changeState(NonPlayerActorState.BLINK) : entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      WALK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(WALK):exit");
      };
      WALK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(WALK):event");
        return true;
      };
      return WALK;
    }(BaseNonPlayerActorState_1.default);
    exports.WALK = WALK;
    var ATTACK = function(_super) {
      __extends(ATTACK, _super);
      function ATTACK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ATTACK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(ATTACK):enter");
      };
      ATTACK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isAttacking || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      ATTACK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(ATTACK):exit");
      };
      ATTACK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(ATTACK):event");
        return true;
      };
      return ATTACK;
    }(BaseNonPlayerActorState_1.default);
    exports.ATTACK = ATTACK;
    var PRPARE = function(_super) {
      __extends(PRPARE, _super);
      function PRPARE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PRPARE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(PRPARE):enter");
      };
      PRPARE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDisguising ? entity.stateMachine.changeState(NonPlayerActorState.DISGUISE) : entity.stateMachine.changeState(NonPlayerActorState.SHOW);
      };
      PRPARE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(PRPARE):exit");
      };
      PRPARE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(PRPARE):event");
        return true;
      };
      return PRPARE;
    }(BaseNonPlayerActorState_1.default);
    exports.PRPARE = PRPARE;
    var SHOW = function(_super) {
      __extends(SHOW, _super);
      function SHOW() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      SHOW.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(SHOW):enter");
        entity.enterShow();
      };
      SHOW.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isShow && entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      SHOW.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(SHOW):exit");
      };
      SHOW.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(SHOW):event");
        return true;
      };
      return SHOW;
    }(BaseNonPlayerActorState_1.default);
    exports.SHOW = SHOW;
    var DIED = function(_super) {
      __extends(DIED, _super);
      function DIED() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DIED.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DIE):enter");
        entity.killed();
      };
      DIED.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
      };
      DIED.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DIE):exit");
      };
      DIED.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(DIE):event");
        return true;
      };
      return DIED;
    }(BaseNonPlayerActorState_1.default);
    exports.DIED = DIED;
    var HURT = function(_super) {
      __extends(HURT, _super);
      function HURT() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      HURT.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(HURT):enter");
      };
      HURT.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isHurting ? entity.sc.isFalling ? entity.stateMachine.changeState(NonPlayerActorState.FALL) : entity.sc.isBlinking && entity.stateMachine.changeState(NonPlayerActorState.BLINK) : entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      HURT.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(TAKEDAMAGE):exit");
      };
      HURT.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(TAKEDAMAGE):event");
        return true;
      };
      return HURT;
    }(BaseNonPlayerActorState_1.default);
    exports.HURT = HURT;
    var TALK = function(_super) {
      __extends(TALK, _super);
      function TALK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TALK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(TALK):enter");
      };
      TALK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
      };
      TALK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(TALK):exit");
      };
      TALK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(TALK):event");
        return true;
      };
      return TALK;
    }(BaseNonPlayerActorState_1.default);
    exports.TALK = TALK;
    var BLOCK = function(_super) {
      __extends(BLOCK, _super);
      function BLOCK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BLOCK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(BLOCK):enter");
      };
      BLOCK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
      };
      BLOCK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(BLOCK):exit");
      };
      BLOCK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(BLOCK):event");
        return true;
      };
      return BLOCK;
    }(BaseNonPlayerActorState_1.default);
    exports.BLOCK = BLOCK;
    var DISGUISE = function(_super) {
      __extends(DISGUISE, _super);
      function DISGUISE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DISGUISE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DISGUISE):enter");
        entity.enterDisguise();
      };
      DISGUISE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDisguising || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      DISGUISE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DISGUISE):exit");
      };
      DISGUISE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(DISGUISE):event");
        return true;
      };
      return DISGUISE;
    }(BaseNonPlayerActorState_1.default);
    exports.DISGUISE = DISGUISE;
    var DASH = function(_super) {
      __extends(DASH, _super);
      function DASH() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DASH.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DASH):enter");
      };
      DASH.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDashing || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      DASH.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DASH):exit");
      };
      DASH.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(DASH):event");
        return true;
      };
      return DASH;
    }(BaseNonPlayerActorState_1.default);
    exports.DASH = DASH;
    var DODGE = function(_super) {
      __extends(DODGE, _super);
      function DODGE() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DODGE.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DODGE):enter");
      };
      DODGE.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDodging || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      DODGE.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DODGE):exit");
      };
      DODGE.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(DODGE):event");
        return true;
      };
      return DODGE;
    }(BaseNonPlayerActorState_1.default);
    exports.DODGE = DODGE;
    var DIZZ = function(_super) {
      __extends(DIZZ, _super);
      function DIZZ() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DIZZ.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DIZZ):enter");
        entity.enterDizz();
      };
      DIZZ.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isDizzing || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      DIZZ.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(DIZZ):exit");
      };
      DIZZ.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(DIZZ):event");
        return true;
      };
      return DIZZ;
    }(BaseNonPlayerActorState_1.default);
    exports.DIZZ = DIZZ;
    var BLINK = function(_super) {
      __extends(BLINK, _super);
      function BLINK() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BLINK.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(BLINK):enter");
        entity.enterBlink();
      };
      BLINK.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isBlinking || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      BLINK.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(BLINK):exit");
      };
      BLINK.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(BLINK):event");
        return true;
      };
      return BLINK;
    }(BaseNonPlayerActorState_1.default);
    exports.BLINK = BLINK;
    var FALL = function(_super) {
      __extends(FALL, _super);
      function FALL() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      FALL.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(FALL):enter");
        entity.enterFall();
      };
      FALL.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        entity.sc.isFalling || entity.stateMachine.changeState(NonPlayerActorState.IDLE);
      };
      FALL.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(FALL):exit");
      };
      FALL.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(FALL):event");
        return true;
      };
      return FALL;
    }(BaseNonPlayerActorState_1.default);
    exports.FALL = FALL;
    var GLOBAL = function(_super) {
      __extends(GLOBAL, _super);
      function GLOBAL() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      GLOBAL.prototype.enter = function(entity) {
        _super.prototype.enter.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(GLOBAL):enter");
      };
      GLOBAL.prototype.update = function(entity) {
        _super.prototype.update.call(this, entity);
        if (entity.sc.isDied) return;
        entity.data.currentHealth <= 0 ? entity.stateMachine.changeState(NonPlayerActorState.DIED) : !NonPlayerActorState.HURT.isRunnig && entity.sc.isHurting && entity.stateMachine.changeState(NonPlayerActorState.HURT);
      };
      GLOBAL.prototype.exit = function(entity) {
        _super.prototype.exit.call(this, entity);
        Utils_1.default.log(entity.actorName() + "(GLOBAL):exit");
      };
      GLOBAL.prototype.event = function(entity, event) {
        _super.prototype.event.call(this, entity, event);
        Utils_1.default.log(entity.actorName() + "(GLOBAL):event");
        return true;
      };
      return GLOBAL;
    }(BaseNonPlayerActorState_1.default);
    exports.GLOBAL = GLOBAL;
    var NonPlayerActorState = function() {
      function NonPlayerActorState() {}
      NonPlayerActorState.GLOBAL = new GLOBAL();
      NonPlayerActorState.WALK = new WALK();
      NonPlayerActorState.ATTACK = new ATTACK();
      NonPlayerActorState.IDLE = new IDLE();
      NonPlayerActorState.DISGUISE = new DISGUISE();
      NonPlayerActorState.DIED = new DIED();
      NonPlayerActorState.DODGE = new DODGE();
      NonPlayerActorState.HURT = new HURT();
      NonPlayerActorState.PRPARE = new PRPARE();
      NonPlayerActorState.SHOW = new SHOW();
      NonPlayerActorState.BLINK = new BLINK();
      NonPlayerActorState.FALL = new FALL();
      return NonPlayerActorState;
    }();
    exports.default = NonPlayerActorState;
    cc._RF.pop();
  }, {
    "../Base/BaseNonPlayerActorState": "BaseNonPlayerActorState",
    "../Utils/Utils": "Utils"
  } ],
  NonPlayerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e5e26RTCAFA6KSlJtwFy/GC", "NonPlayerData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("./DamageData");
    var StatusData_1 = require("./StatusData");
    var CommonData_1 = require("./CommonData");
    var NonPlayerData = function() {
      function NonPlayerData() {
        this.nameCn = "";
        this.nameEn = "";
        this.resName = "";
        this.chapter = 0;
        this.stageLevel = 0;
        this.invisible = 0;
        this.remote = 0;
        this.melee = 0;
        this.dash = 0;
        this.disguise = 0;
        this.scale = 0;
        this.bulletType = "";
        this.bulletArcExNum = 0;
        this.bulletLineExNum = 0;
        this.bulletLineInterval = 0;
        this.bulletExSpeed = 0;
        this.isArcAim = 0;
        this.isLineAim = 0;
        this.blink = 0;
        this.isBoom = 0;
        this.isHeavy = 0;
        this.isStatic = 0;
        this.isRecovery = 0;
        this.shooterOffsetX = 0;
        this.shooterOffsetY = 0;
        this.specialAttack = 0;
        this.specialType = "";
        this.specialDistance = 0;
        this.specialBulletArcExNum = 0;
        this.specialBulletLineExNum = 0;
        this.specialDelay = 0;
        this.bodyColor = "#ffffff";
        this.pos = cc.v3(0, 0);
        this.currentHealth = 0;
        this.boxType = 0;
        this.attackType = 0;
        this.isEnemy = 0;
        this.isFollow = 0;
        this.lifeTime = 0;
        this.isTest = 0;
        this.reborn = 0;
        this.attackFrames = 2;
        this.specialFrames = 2;
        this.remoteAudio = "";
        this.specialAudio = "";
        this.isPet = 0;
        this.childResName = "";
        this.childMode = 0;
        this.childCount = 0;
        this.flee = 0;
        this.statusTotalData = new StatusData_1.default();
        this.common = new CommonData_1.default();
        this.statusList = new Array();
      }
      Object.defineProperty(NonPlayerData.prototype, "StatusTotalData", {
        get: function() {
          return this.statusTotalData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NonPlayerData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NonPlayerData.prototype, "FinalCommon", {
        get: function() {
          var data = new CommonData_1.default().add(this.common).add(this.statusTotalData.Common);
          return data;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NonPlayerData.prototype, "StatusList", {
        get: function() {
          return this.statusList;
        },
        set: function(list) {
          if (!list) return;
          this.statusList = new Array();
          for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var s = list_1[_i];
            var data = new StatusData_1.default();
            data.valueCopy(s);
            this.statusList.push(data);
          }
        },
        enumerable: false,
        configurable: true
      });
      NonPlayerData.prototype.updateHA = function(currentHealth, maxHealth, attackPoint) {
        this.currentHealth = currentHealth;
        this.common.maxHealth = maxHealth;
        this.common.damageMin = attackPoint;
      };
      NonPlayerData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.common.valueCopy(data.common);
        this.StatusList = data.statusList;
        this.nameCn = data.nameCn;
        this.nameEn = data.nameEn;
        this.resName = data.resName;
        this.chapter = data.chapter;
        this.stageLevel = data.stageLevel;
        this.currentHealth = data.currentHealth ? data.currentHealth : 0;
        this.invisible = data.invisible ? data.invisible : 0;
        this.remote = data.remote ? data.remote : 0;
        this.melee = data.melee ? data.melee : 0;
        this.dash = data.dash ? data.dash : 0;
        this.pos = data.pos ? cc.v3(data.pos.x, data.pos.y) : cc.v3(0, 0);
        this.disguise = data.disguise ? data.disguise : 0;
        this.scale = data.scale ? data.scale : 0;
        this.bulletType = data.bulletType;
        this.bulletArcExNum = data.bulletArcExNum ? data.bulletArcExNum : 0;
        this.bulletLineExNum = data.bulletLineExNum ? data.bulletLineExNum : 0;
        this.bulletLineInterval = data.bulletLineInterval ? data.bulletLineInterval : 0;
        this.isArcAim = data.isArcAim ? data.isArcAim : 0;
        this.isLineAim = data.isLineAim ? data.isLineAim : 0;
        this.blink = data.blink ? data.blink : 0;
        this.isBoom = data.isBoom ? data.isBoom : 0;
        this.bulletExSpeed = data.bulletExSpeed ? data.bulletExSpeed : 0;
        this.isHeavy = data.isHeavy ? data.isHeavy : 0;
        this.isStatic = data.isStatic ? data.isStatic : 0;
        this.shooterOffsetX = data.shooterOffsetX ? data.shooterOffsetX : 0;
        this.shooterOffsetY = data.shooterOffsetY ? data.shooterOffsetY : 0;
        this.specialAttack = data.specialAttack ? data.specialAttack : 0;
        this.specialType = data.specialType ? data.specialType : "";
        this.specialDistance = data.specialDistance ? data.specialDistance : 0;
        this.specialBulletArcExNum = data.specialBulletArcExNum ? data.specialBulletArcExNum : 0;
        this.specialBulletLineExNum = data.specialBulletLineExNum ? data.specialBulletLineExNum : 0;
        this.specialDelay = data.specialDelay ? data.specialDelay : 0;
        this.boxType = data.boxType ? data.boxType : 0;
        this.attackType = data.attackType ? data.attackType : 0;
        this.isRecovery = data.isRecovery ? data.isRecovery : 0;
        this.isEnemy = data.isEnemy ? data.isEnemy : 0;
        this.isFollow = data.isFollow ? data.isFollow : 0;
        this.lifeTime = data.lifeTime ? data.lifeTime : 0;
        this.isTest = data.isTest ? data.isTest : 0;
        this.reborn = data.reborn ? data.reborn : 0;
        this.attackFrames = data.attackFrames ? data.attackFrames : 2;
        this.specialFrames = data.specialFrames ? data.specialFrames : 2;
        this.bodyColor = data.bodyColor ? data.bodyColor : "#ffffff";
        this.remoteAudio = data.remoteAudio ? data.remoteAudio : "";
        this.specialAudio = data.specialAudio ? data.specialAudio : "";
        this.isPet = data.isPet ? data.isPet : 0;
        this.childResName = data.childResName ? data.childResName : "";
        this.childMode = data.childMode ? data.childMode : 0;
        this.childCount = data.childCount ? data.childCount : 0;
        this.flee = data.flee ? data.flee : 0;
      };
      NonPlayerData.prototype.clone = function() {
        var e = new NonPlayerData();
        e.common = this.common.clone();
        e.nameCn = this.nameCn;
        e.nameEn = this.nameEn;
        e.resName = this.resName;
        e.chapter = this.chapter;
        e.stageLevel = this.stageLevel;
        e.currentHealth = this.currentHealth;
        e.invisible = this.invisible;
        e.remote = this.remote;
        e.melee = this.melee;
        e.dash = this.dash;
        e.pos = this.pos;
        e.disguise = this.disguise;
        e.scale = this.scale;
        e.bulletType = this.bulletType;
        e.bulletArcExNum = this.bulletArcExNum;
        e.bulletLineExNum = this.bulletLineExNum;
        e.bulletLineInterval = this.bulletLineInterval;
        e.isArcAim = this.isArcAim;
        e.isLineAim = this.isLineAim;
        e.blink = this.blink;
        e.isBoom = this.isBoom;
        e.bulletExSpeed = this.bulletExSpeed;
        e.isHeavy = this.isHeavy;
        e.isStatic = this.isStatic;
        e.shooterOffsetX = this.shooterOffsetX;
        e.shooterOffsetY = this.shooterOffsetY;
        e.specialAttack = this.specialAttack;
        e.specialType = this.specialType;
        e.specialDistance = this.specialDistance;
        e.specialBulletArcExNum = this.specialBulletArcExNum;
        e.specialBulletLineExNum = this.specialBulletLineExNum;
        e.specialDelay = this.specialDelay;
        e.boxType = this.boxType;
        e.attackType = this.attackType;
        e.isRecovery = this.isRecovery;
        e.bodyColor = this.bodyColor;
        e.isEnemy = this.isEnemy;
        e.isFollow = this.isFollow;
        e.lifeTime = this.lifeTime;
        e.isTest = this.isTest;
        e.reborn = this.reborn;
        e.remoteAudio = this.remoteAudio;
        e.specialAudio = this.specialAudio;
        e.isPet = this.isPet;
        e.StatusList = this.statusList;
        e.childMode = this.childMode;
        e.childResName = this.childResName;
        e.childCount = this.childCount;
        e.flee = this.flee;
        return e;
      };
      NonPlayerData.prototype.getAttackPoint = function() {
        var data = this.FinalCommon;
        var dd = new DamageData_1.default();
        dd.realDamage = data.realDamage;
        dd.physicalDamage = data.damageMin;
        dd.magicDamage = data.magicDamage;
        dd.physicalDamage < 0 && (dd.physicalDamage = 0);
        return dd;
      };
      NonPlayerData.prototype.getDamage = function(damageData) {
        var data = this.FinalCommon;
        var finalDamageData = damageData.clone();
        var defence = data.defence;
        var defecneMagic = data.magicDefence;
        finalDamageData.physicalDamage = defence >= 0 ? finalDamageData.physicalDamage * (1 - .06 * defence / (.06 * defence + 1)) : finalDamageData.physicalDamage * (2 - Math.pow(.94, -defence));
        finalDamageData.magicDamage = finalDamageData.magicDamage * (1 - defecneMagic / 100);
        return finalDamageData;
      };
      NonPlayerData.prototype.getHealth = function() {
        var rate = 1;
        var data = this.FinalCommon;
        var maxHealth = data.maxHealth;
        if (!(maxHealth > 0)) return cc.v3(1, 1);
        rate = this.currentHealth / maxHealth;
        return cc.v3(maxHealth * rate, maxHealth);
      };
      return NonPlayerData;
    }();
    exports.default = NonPlayerData;
    cc._RF.pop();
  }, {
    "./CommonData": "CommonData",
    "./DamageData": "DamageData",
    "./StatusData": "StatusData"
  } ],
  NonPlayerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2a4f27Fn0RPWppWDoGhOHT3", "NonPlayerManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var BaseManager_1 = require("./BaseManager");
    var Utils_1 = require("../Utils/Utils");
    var NonPlayer_1 = require("../NonPlayer");
    var NonPlayerData_1 = require("../Data/NonPlayerData");
    var Achievement_1 = require("../Achievement");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NonPlayerManager = function(_super) {
      __extends(NonPlayerManager, _super);
      function NonPlayerManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nonplayer = null;
        _this.nonplayers = new Array();
        _this.timeDelay = 0;
        return _this;
      }
      NonPlayerManager_1 = NonPlayerManager;
      Object.defineProperty(NonPlayerManager.prototype, "nonPlayerList", {
        get: function() {
          return this.nonplayers;
        },
        enumerable: false,
        configurable: true
      });
      NonPlayerManager.prototype.clear = function() {
        Utils_1.default.clearComponentArray(this.nonplayers);
      };
      NonPlayerManager.prototype.addNonPlayerListFromSave = function(dungeon, list, position) {
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
          var data = list_1[_i];
          (data.isPet || data.lifeTime > 0) && this.addNonPlayer(this.getNonPlayer(data, dungeon), position);
        }
      };
      NonPlayerManager.prototype.addNonPlayerFromData = function(resName, pos, dungeon) {
        var data = new NonPlayerData_1.default();
        data.valueCopy(Logic_1.default.nonplayers[resName]);
        Achievement_1.default.addNpcsAchievement(data.resName);
        this.addNonPlayer(this.getNonPlayer(data, dungeon), pos);
      };
      NonPlayerManager.prototype.isPetAlive = function() {
        if (this.pet && this.pet.isValid && this.pet.node.active && this.pet.data.currentHealth > 0) return true;
        return false;
      };
      NonPlayerManager.prototype.addPetFromData = function(data, pos, dungeon) {
        var hasPetCount = 0;
        for (var _i = 0, _a = this.nonPlayerList; _i < _a.length; _i++) {
          var p = _a[_i];
          p.data.isPet > 0 && hasPetCount++;
        }
        if (this.isPetAlive()) return;
        Achievement_1.default.addNpcsAchievement(data.resName);
        this.addNonPlayer(this.getNonPlayer(data, dungeon), pos);
      };
      NonPlayerManager.prototype.addNonPlayerFromMap = function(dungeon, mapDataStr, indexPos) {
        "N0" == mapDataStr && this.addNonPlayerFromData(NonPlayerManager_1.NON_SHADOW, Dungeon_1.default.getPosInMap(indexPos), dungeon);
      };
      NonPlayerManager.prototype.getNonPlayer = function(nonPlayerData, dungeon) {
        var nonPlayerPrefab = null;
        nonPlayerPrefab = cc.instantiate(this.nonplayer);
        nonPlayerPrefab.active = false;
        nonPlayerPrefab.parent = dungeon.node;
        var nonPlayer = nonPlayerPrefab.getComponent(NonPlayer_1.default);
        var data = new NonPlayerData_1.default();
        nonPlayer.dungeon = dungeon;
        data.valueCopy(nonPlayerData);
        data.isEnemy = 0;
        nonPlayer.data = data;
        nonPlayer.sc.isDisguising = data.disguise > 0;
        nonPlayer.sc.isDisguising ? nonPlayer.changeBodyRes(data.resName, NonPlayer_1.default.RES_DISGUISE) : nonPlayer.changeBodyRes(data.resName, NonPlayer_1.default.RES_IDLE000);
        return nonPlayer;
      };
      NonPlayerManager.prototype.addNonPlayer = function(nonPlayer, pos) {
        nonPlayer.node.active = true;
        nonPlayer.pos = Dungeon_1.default.getIndexInMap(pos);
        nonPlayer.node.position = pos;
        this.nonPlayerList.push(nonPlayer);
        nonPlayer.data.isPet > 0 && (this.pet = nonPlayer);
      };
      NonPlayerManager.prototype.updateLogic = function(dt) {
        Logic_1.default.nonPlayerList = [];
        for (var _i = 0, _a = this.nonPlayerList; _i < _a.length; _i++) {
          var monster = _a[_i];
          if (monster && monster.node.active) {
            monster.updateLogic(dt);
            var data = monster.data.clone();
            monster.leftLifeTime > 0 && (data.lifeTime = monster.leftLifeTime);
            data.currentHealth > 0 && Logic_1.default.nonPlayerList.push(data);
          }
        }
      };
      var NonPlayerManager_1;
      NonPlayerManager.NON_SHADOW = "nonplayer001";
      NonPlayerManager.SHOP_KEEPER = "nonplayer002";
      NonPlayerManager.DOG = "nonplayer100";
      __decorate([ property(cc.Prefab) ], NonPlayerManager.prototype, "nonplayer", void 0);
      NonPlayerManager = NonPlayerManager_1 = __decorate([ ccclass ], NonPlayerManager);
      return NonPlayerManager;
    }(BaseManager_1.default);
    exports.default = NonPlayerManager;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/NonPlayerData": "NonPlayerData",
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../NonPlayer": "NonPlayer",
    "../Utils/Utils": "Utils",
    "./BaseManager": "BaseManager"
  } ],
  NonPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b7513vXKLpHGrSf+utaohLs", "NonPlayer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EventHelper_1 = require("./EventHelper");
    var HealthBar_1 = require("./HealthBar");
    var Logic_1 = require("./Logic");
    var Dungeon_1 = require("./Dungeon");
    var Shooter_1 = require("./Shooter");
    var StatusManager_1 = require("./Manager/StatusManager");
    var DamageData_1 = require("./Data/DamageData");
    var FloatingLabelManager_1 = require("./Manager/FloatingLabelManager");
    var Random_1 = require("./Utils/Random");
    var NextStep_1 = require("./Utils/NextStep");
    var Item_1 = require("./Item/Item");
    var Actor_1 = require("./Base/Actor");
    var Achievement_1 = require("./Achievement");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var SpecialManager_1 = require("./Manager/SpecialManager");
    var FromData_1 = require("./Data/FromData");
    var IndexZ_1 = require("./Utils/IndexZ");
    var AreaOfEffect_1 = require("./Actor/AreaOfEffect");
    var AreaOfEffectData_1 = require("./Data/AreaOfEffectData");
    var ActorAttackBox_1 = require("./Actor/ActorAttackBox");
    var DefaultStateMachine_1 = require("./Base/fsm/DefaultStateMachine");
    var NonPlayerActorState_1 = require("./Actor/NonPlayerActorState");
    var StateContext_1 = require("./Base/StateContext");
    var NonPlayerData_1 = require("./Data/NonPlayerData");
    var ColliderTag_1 = require("./Actor/ColliderTag");
    var ActorUtils_1 = require("./Utils/ActorUtils");
    var NonPlayer = function(_super) {
      __extends(NonPlayer, _super);
      function NonPlayer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.pos = cc.v3(0, 0);
        _this.defautPos = cc.v3(0, 0);
        _this.healthBar = null;
        _this.statusManager = null;
        _this.floatinglabelManager = null;
        _this.specialManager = null;
        _this.boom = null;
        _this.dangerBox = null;
        _this.dangerTips = null;
        _this.attrPrefab = null;
        _this.isFaceRight = true;
        _this.shooter = null;
        _this.currentlinearVelocitySpeed = cc.Vec2.ZERO;
        _this.isVariation = false;
        _this.isSummon = false;
        _this.killPlayerCount = 0;
        _this.moveStep = new NextStep_1.default();
        _this.remoteStep = new NextStep_1.default();
        _this.meleeStep = new NextStep_1.default();
        _this.specialStep = new NextStep_1.default();
        _this.dashStep = new NextStep_1.default();
        _this.blinkStep = new NextStep_1.default();
        _this.attrmap = {};
        _this.animStatus = NonPlayer_1.ANIM_NONE;
        _this.data = new NonPlayerData_1.default();
        _this.leftLifeTime = 0;
        _this.childNonPlayerList = [];
        _this.moveTimeDelay = 0;
        return _this;
      }
      NonPlayer_1 = NonPlayer;
      Object.defineProperty(NonPlayer.prototype, "IsVariation", {
        get: function() {
          return this.isVariation || this.data.StatusTotalData.variation > 0;
        },
        enumerable: false,
        configurable: true
      });
      NonPlayer.prototype.onLoad = function() {
        this.graphics = this.getComponent(cc.Graphics);
        this.sc.isAttacking = false;
        this.anim = this.getComponent(cc.Animation);
        this.sprite = this.node.getChildByName("sprite");
        this.bodySprite = this.sprite.getChildByName("body").getComponent(cc.Sprite);
        this.mat = this.bodySprite.getComponent(cc.Sprite).getMaterial(0);
        this.boxCollider = this.getComponent(cc.BoxCollider);
        this.node.scale = this.getScaleSize();
        this.dashlight = this.sprite.getChildByName("dashlight");
        this.dashlight.opacity = 0;
        this.shadow = this.sprite.getChildByName("shadow");
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.shooter = this.node.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.effectNode = this.node.getChildByName("Effect");
        this.hitLightSprite = this.node.getChildByName("Effect").getChildByName("hitlight").getComponent(cc.Sprite);
        this.hitLightSprite.node.opacity = 0;
        this.particleBlood = this.node.getChildByName("Effect").getChildByName("blood").getComponent(cc.ParticleSystem);
        this.particleBlood.stopSystem();
        this.attrNode = this.node.getChildByName("attr");
        this.updatePlayerPos();
        this.resetBodyColor();
        this.data.isStatic > 0 && (this.rigidbody.type = cc.RigidBodyType.Static);
        this.dangerBox.init(this, this.dungeon, this.data.isEnemy > 0);
        this.dangerTips.opacity = 0;
        this.specialStep.init();
        this.stateMachine = new DefaultStateMachine_1.default(this, NonPlayerActorState_1.default.PRPARE, NonPlayerActorState_1.default.GLOBAL);
      };
      NonPlayer.prototype.start = function() {
        var _this = this;
        this.changeZIndex();
        this.healthBar.refreshHealth(this.data.getHealth().x, this.data.getHealth().y);
        if (this.data.lifeTime > 0) {
          var lifeTimeStep = new NextStep_1.default();
          this.leftLifeTime = this.data.lifeTime;
          lifeTimeStep.next(function() {}, this.data.lifeTime, true, function() {
            _this.leftLifeTime--;
            _this.leftLifeTime <= 0 && _this.data && (_this.data.currentHealth = 0);
          });
        }
        this.addSaveStatusList();
      };
      NonPlayer.prototype.hitLightS = function(damage) {
        var show = true;
        var resName = "hitlight1";
        var scale = 8;
        var punchNames = [ AudioPlayer_1.default.PUNCH, AudioPlayer_1.default.PUNCH1, AudioPlayer_1.default.PUNCH2 ];
        var swordhitNames = [ AudioPlayer_1.default.SWORD_HIT, AudioPlayer_1.default.SWORD_HIT1, AudioPlayer_1.default.SWORD_HIT2 ];
        if (damage.isFist) {
          resName = Logic_1.default.getHalfChance() ? "hitlight1" : "hitlight2";
          AudioPlayer_1.default.play(punchNames[Logic_1.default.getRandomNum(0, 2)]);
        } else if (damage.isRemote) resName = Logic_1.default.getHalfChance() ? "hitlight9" : "hitlight10"; else if (damage.isBlunt) {
          resName = Logic_1.default.getHalfChance() ? "hitlight3" : "hitlight4";
          scale = damage.isFar ? 10 : 8;
          AudioPlayer_1.default.play(swordhitNames[Logic_1.default.getRandomNum(0, 2)]);
        } else if (damage.isMelee) {
          AudioPlayer_1.default.play(swordhitNames[Logic_1.default.getRandomNum(0, 2)]);
          if (damage.isStab) {
            resName = Logic_1.default.getHalfChance() ? "hitlight5" : "hitlight6";
            scale = damage.isFar ? 10 : 8;
          } else {
            resName = Logic_1.default.getHalfChance() ? "hitlight7" : "hitlight8";
            scale = damage.isFar ? 10 : 8;
          }
        } else show = false;
        if (show) {
          this.hitLightSprite.node.stopAllActions();
          this.hitLightSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
          this.hitLightSprite.node.opacity = 220;
          this.hitLightSprite.node.color = cc.Color.WHITE;
          this.hitLightSprite.node.scale = damage.isCriticalStrike ? scale : scale + 3;
          cc.tween(this.hitLightSprite.node).delay(.2).to(.3, {
            opacity: 0,
            color: cc.Color.BLACK
          }).to(.3, {
            opacity: 0
          }).start();
        }
      };
      NonPlayer.prototype.addSaveStatusList = function() {
        this.statusManager && this.statusManager.addStatusListFromSave(this.data.StatusList);
      };
      NonPlayer.prototype.hitLight = function(isHit) {
        this.mat || (this.mat = this.node.getChildByName("sprite").getChildByName("body").getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
      };
      NonPlayer.prototype.addAttrIcon = function() {
        this.attrNode || (this.attrNode = this.node.getChildByName("attr"));
        this.attrNode.removeAllChildren();
        for (var key in this.attrmap) {
          var attr = cc.instantiate(this.attrPrefab);
          attr.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes(key);
          this.attrNode.addChild(attr);
        }
      };
      NonPlayer.prototype.showDangerTips = function() {
        var _this = this;
        this.dangerTips.opacity = 255;
        this.scheduleOnce(function() {
          _this.dangerTips.opacity = 0;
        }, 1);
      };
      NonPlayer.prototype.getCurrentBodyRes = function() {
        if (!this.sprite) {
          this.sprite = this.node.getChildByName("sprite");
          this.bodySprite = this.sprite.getChildByName("body").getComponent(cc.Sprite);
        }
        return this.bodySprite.spriteFrame.name;
      };
      NonPlayer.prototype.changeBodyRes = function(resName, suffix) {
        if (!this.sprite) {
          this.sprite = this.node.getChildByName("sprite");
          this.bodySprite = this.sprite.getChildByName("body").getComponent(cc.Sprite);
        }
        this.boxCollider || (this.boxCollider = this.getComponent(cc.BoxCollider));
        this.shadow || (this.shadow = this.sprite.getChildByName("shadow"));
        var spriteFrame = this.getSpriteFrameByName(resName, suffix);
        this.bodySprite.spriteFrame = spriteFrame || null;
        this.bodySprite.node.width = spriteFrame.getOriginalSize().width;
        this.bodySprite.node.height = spriteFrame.getOriginalSize().height;
        var y = 48, w = 80, h = 80;
        switch (this.data.boxType) {
         case 0:
          y = 32;
          w = 80;
          h = 64;
          break;

         case 1:
          y = 48;
          w = 48;
          h = 96;
          break;

         case 2:
          y = 48;
          w = 80;
          h = 80;
          break;

         case 3:
          y = 64;
          w = 80;
          h = 128;
          break;

         case 4:
          y = 32;
          w = 128;
          h = 48;
          break;

         case 5:
          y = 48;
          w = 128;
          h = 96;
          break;

         default:
          y = 48;
          w = 80;
          h = 80;
        }
        this.boxCollider.offset = cc.v2(0, y);
        this.boxCollider.size.width = w;
        this.boxCollider.size.height = h;
        this.boxCollider.tag = this.data.isEnemy > 0 ? ColliderTag_1.ColliderTag.NONPLAYER : ColliderTag_1.ColliderTag.GOODNONPLAYER;
        this.data.boxType > 2 ? this.shadow.scale = 3 : this.shadow.scale = 2;
      };
      NonPlayer.prototype.getSpriteFrameByName = function(resName, suffix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(resName));
        return spriteFrame;
      };
      NonPlayer.prototype.updatePlayerPos = function() {
        this.node.position = Dungeon_1.default.getPosInMap(this.pos);
      };
      NonPlayer.prototype.transportPlayer = function(x, y) {
        this.sprite.angle = 0;
        this.sprite.scale = 1;
        this.sprite.opacity = 255;
        this.sprite.x = 0;
        this.sprite.y = 0;
        this.pos.x = x;
        this.pos.y = y;
        this.changeZIndex();
        this.updatePlayerPos();
      };
      NonPlayer.prototype.changeZIndex = function() {
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      NonPlayer.prototype.showFloatFont = function(dungeonNode, d, isDodge, isMiss, isCritical, isBackStab) {
        if (!this.floatinglabelManager) return;
        var flabel = this.floatinglabelManager.getFloaingLabel(dungeonNode);
        isDodge ? flabel.showDoge() : isMiss ? flabel.showMiss() : 0 != d ? flabel.showDamage(-d, isCritical, isBackStab) : flabel.hideLabel();
      };
      NonPlayer.prototype.remoteAttack = function(target, isSpecial) {
        this.remoteStep.IsExcuting = false;
        var p = this.shooter.node.position.clone();
        p.x = this.shooter.node.scaleX > 0 ? p.x + 30 : -p.x - 30;
        var hv = target.getCenterPosition().sub(this.node.position.add(p));
        if (!hv.equals(cc.Vec3.ZERO)) {
          hv = hv.normalizeSelf();
          this.shooter.setHv(hv);
          this.shooter.from.valueCopy(FromData_1.default.getClone(this.data.nameCn, this.data.resName + "anim000", this.seed));
          this.IsVariation && (this.shooter.data.bulletSize = .5);
          this.shooter.dungeon = this.dungeon;
          this.shooter.data.remoteAudio = this.data.remoteAudio;
          this.shooter.isFromPlayer = this.data.isEnemy < 1;
          this.shooter.data.bulletArcExNum = this.data.bulletArcExNum;
          this.shooter.data.bulletLineExNum = this.data.bulletLineExNum;
          this.shooter.data.bulletLineInterval = this.data.bulletLineInterval;
          if (isSpecial) {
            this.shooter.data.bulletLineExNum = this.data.specialBulletLineExNum;
            this.shooter.data.bulletArcExNum = this.data.specialBulletArcExNum;
          }
          this.shooter.data.isLineAim = this.data.isLineAim;
          this.shooter.data.bulletType = this.data.bulletType ? this.data.bulletType : "bullet001";
          this.shooter.data.bulletExSpeed = this.data.bulletExSpeed;
          this.shooter.fireBullet(Logic_1.default.getRandomNum(0, 5) - 5, cc.v3(this.data.shooterOffsetX, this.data.shooterOffsetY));
        }
      };
      NonPlayer.prototype.showAttackAnim = function(before, attacking, finish, target, isSpecial, isMelee, isMiss) {
        var _this = this;
        var speedScale = 1 - this.data.FinalCommon.attackSpeed / 1e3;
        speedScale < .5 && (speedScale = .5);
        speedScale > 2 && (speedScale = 2);
        var pos = target.node.position.clone().sub(this.node.position);
        pos.equals(cc.Vec3.ZERO) || (pos = pos.normalizeSelf());
        this.anim.pause();
        pos.equals(cc.Vec3.ZERO) && (pos = cc.v3(1, 0));
        pos = pos.normalizeSelf().mul(this.node.scaleX > 0 ? 48 : -48);
        this.node.scaleX < 0 && (pos.y = -pos.y);
        this.sprite.stopAllActions();
        var stabDelay = 0;
        this.data.attackType == ActorAttackBox_1.default.ATTACK_STAB && isMelee && (stabDelay = .8 * speedScale);
        var beforetween = cc.tween().delay(.5 * speedScale).call(function() {
          before && before(isSpecial);
        });
        var shaketween = cc.tween().by(.1, {
          position: cc.v3(5, 0)
        }).by(.1, {
          position: cc.v3(-5, 0)
        }).by(.1, {
          position: cc.v3(5, 0)
        }).by(.1, {
          position: cc.v3(-5, 0)
        }).by(.1, {
          position: cc.v3(5, 0)
        }).by(.1, {
          position: cc.v3(-5, 0)
        }).by(.1, {
          position: cc.v3(5, 0)
        }).by(.1, {
          position: cc.v3(-5, 0)
        });
        var arr = [ "anim009" ];
        var arrspecial = [];
        var frameIndex = 0;
        while (frameIndex < this.data.attackFrames - 1) arr.push("anim0" + (10 + frameIndex++));
        for (var i = 0; i < this.data.specialFrames; i++) arrspecial.push("anim0" + (10 + frameIndex++));
        var backofftween = cc.tween().by(.5 * speedScale, {
          position: cc.v3(-pos.x / 8, -pos.y / 8)
        }).delay(stabDelay);
        var forwardtween = cc.tween().by(.2 * speedScale, {
          position: cc.v3(pos.x, pos.y)
        }).delay(stabDelay);
        var specialTypeCanMelee = this.data.specialType.length <= 0 || this.data.specialType == SpecialManager_1.default.AFTER_ASH;
        var attackpreparetween = cc.tween().call(function() {
          _this.changeBodyRes(_this.data.resName, isSpecial ? arrspecial[0] : arr[0]);
          (isMelee && !isSpecial || isSpecial && isMelee && specialTypeCanMelee) && _this.dangerBox.show(_this.data.attackType, isSpecial, 5 == _this.data.boxType, pos);
          if (isSpecial) {
            _this.data.specialType == SpecialManager_1.default.AFTER_DOWN && _this.dangerBox.show(ActorAttackBox_1.default.ATTACK_STAB, false, false, pos);
            _this.scheduleOnce(function() {
              if (!_this.sc.isDied) {
                _this.specialManager.dungeon = _this.dungeon;
                _this.specialManager.addEffect(_this.data.specialType, _this.data.specialDistance, _this.isFaceRight, FromData_1.default.getClone(_this.data.nameCn, _this.data.resName + "anim000", _this.seed), _this.IsVariation);
              }
            }, _this.data.specialDelay);
          }
        });
        var attackingtween = cc.tween().call(function() {
          _this.changeBodyRes(_this.data.resName, isSpecial ? arrspecial[1] : arr[1]);
          _this.dangerBox.hide(isMiss);
          (isMelee && !isSpecial || isSpecial && _this.data.specialType.length <= 0) && _this.data.attackType == ActorAttackBox_1.default.ATTACK_STAB && _this.move(cc.v3(_this.isFaceRight ? _this.dangerBox.hv.x : -_this.dangerBox.hv.x, _this.dangerBox.hv.y), isSpecial ? 600 : 300);
          if (isSpecial) {
            _this.data.specialType == SpecialManager_1.default.AFTER_DOWN && _this.move(cc.v3(_this.isFaceRight ? _this.dangerBox.hv.x : -_this.dangerBox.hv.x, _this.dangerBox.hv.y), 300);
            _this.scheduleOnce(function() {
              _this.specialManager.dungeon = _this.dungeon;
              _this.specialManager.addPlacement(_this.data.specialType, _this.data.specialDistance, _this.isFaceRight, FromData_1.default.getClone(_this.data.nameCn, _this.data.resName + "anim000", _this.seed), _this.IsVariation);
            }, _this.data.specialDelay);
          }
          attacking && attacking(isSpecial);
        });
        var attackback = cc.tween().call(function() {
          _this.dangerBox.finish();
        });
        var _loop_1 = function(i) {
          attackback.then(cc.tween().delay(.2 * speedScale).call(function() {
            _this.changeBodyRes(_this.data.resName, arr[i]);
          }));
        };
        for (var i = 2; i < arr.length; i++) _loop_1(i);
        var attackbackspecial = cc.tween().call(function() {
          _this.dangerBox.finish();
        });
        var _loop_2 = function(i) {
          attackbackspecial.then(cc.tween().delay(.2 * speedScale).call(function() {
            _this.changeBodyRes(_this.data.resName, arrspecial[i]);
          }));
        };
        for (var i = 2; i < arrspecial.length; i++) _loop_2(i);
        var attackfinish = cc.tween().delay(.2 * speedScale).call(function() {
          _this.dangerBox.finish();
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_IDLE000);
          _this.setLinearVelocity(cc.Vec2.ZERO);
        });
        var aftertween = cc.tween().to(.2 * speedScale, {
          position: cc.v3(0, 0)
        }).delay(.2 * speedScale).call(function() {
          finish && finish(isSpecial);
        });
        var normalMelee = cc.tween().then(attackpreparetween).then(backofftween).then(attackingtween).then(forwardtween).then(attackback).then(attackfinish);
        var normalRemote = cc.tween().then(attackpreparetween).delay(.5 * speedScale).then(attackingtween).delay(.2 * speedScale).then(attackback).then(attackfinish);
        var specialMelee = cc.tween().then(attackpreparetween).then(backofftween).then(shaketween).then(attackingtween).then(forwardtween).then(attackbackspecial).then(attackfinish);
        var specialRemote = cc.tween().then(attackpreparetween).then(shaketween).then(attackingtween).delay(.5 * speedScale).then(attackbackspecial).then(attackfinish);
        var allAction = cc.tween().then(beforetween).then(normalRemote).then(aftertween);
        isMelee && (allAction = cc.tween().then(beforetween).then(normalMelee).then(aftertween));
        if (isSpecial) {
          this.showDangerTips();
          AudioPlayer_1.default.play(this.data.specialAudio);
          allAction = cc.tween().then(beforetween).then(specialRemote).then(aftertween);
          isMelee && specialTypeCanMelee && (allAction = cc.tween().then(beforetween).then(specialMelee).then(aftertween));
        }
        cc.tween(this.sprite).then(allAction).start();
      };
      NonPlayer.prototype.move = function(pos, speed) {
        if (pos.equals(cc.Vec3.ZERO)) return;
        pos = pos.normalizeSelf();
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.node.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var mul = absh > absv ? absh : absv;
        mul = 0 == mul ? 1 : mul;
        var movement = cc.v2(h, v);
        speed < 0 && (speed = 0);
        movement = movement.mul(speed);
        this.setLinearVelocity(movement);
        this.changeZIndex();
      };
      NonPlayer.prototype.setLinearVelocity = function(movement) {
        this.currentlinearVelocitySpeed = movement;
        this.rigidbody.linearVelocity = this.currentlinearVelocitySpeed.clone();
      };
      NonPlayer.prototype.isPlayerBehindAttack = function() {
        var isPlayerRight = this.dungeon.player.node.position.x > this.node.position.x;
        var isSelfFaceRight = this.node.scaleX > 0;
        return isPlayerRight && !isSelfFaceRight || !isPlayerRight && isSelfFaceRight;
      };
      NonPlayer.prototype.isFaceTargetBehind = function(target) {
        var isTargetRight = target.node.position.x > this.node.position.x;
        var isTargetFaceRight = target.isFaceRight;
        return isTargetRight && isTargetFaceRight || !isTargetRight && !isTargetFaceRight;
      };
      NonPlayer.prototype.fall = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.BLEEDING);
        if (this.data.isStatic > 0 || this.data.isHeavy > 0 || this.IsVariation) return;
        this.sc.isFalling = true;
        this.bodySprite.node.angle = this.isPlayerBehindAttack() ? -75 : 105;
        this.anim.play("MonsterFall");
      };
      NonPlayer.prototype.FallFinish = function() {
        this.sc.isFalling = false;
        this.bodySprite.node.angle = 0;
        this.sprite.y = 0;
        this.sprite.x = 0;
      };
      NonPlayer.prototype.takeDamage = function(damageData) {
        var _this = this;
        if (!this.sc.isShow || this.sc.isDied) return false;
        if (this.data.invisible > 0 && this.sprite.opacity < 100 && Logic_1.default.getRandomNum(1, 10) > 4) {
          this.showFloatFont(this.dungeon.node, 0, true, false, damageData.isCriticalStrike, false);
          return false;
        }
        if (this.sc.isBlinking) {
          this.showFloatFont(this.dungeon.node, 0, true, false, damageData.isCriticalStrike, false);
          return false;
        }
        var dd = this.data.getDamage(damageData);
        var dodge = this.data.FinalCommon.dodge / 100;
        var isDodge = Random_1.default.rand() <= dodge && dd.getTotalDamage() > 0;
        dd = isDodge ? new DamageData_1.default() : dd;
        if (isDodge) {
          this.showFloatFont(this.dungeon.node, 0, true, false, damageData.isCriticalStrike, false);
          return false;
        }
        var isHurting = dd.getTotalDamage() > 0;
        this.sc.isHurting = isHurting && !this.specialStep.IsExcuting && damageData.isMelee;
        if (this.sc.isHurting) {
          this.sc.isDisguising = false;
          this.sc.isAttacking = false;
          this.setLinearVelocity(cc.Vec2.ZERO);
          damageData.isCriticalStrike && this.fall();
          this.sprite.stopAllActions();
          this.changeBodyRes(this.data.resName, Logic_1.default.getHalfChance() ? NonPlayer_1.RES_HIT001 : NonPlayer_1.RES_HIT002);
          this.anim.getAnimationState("MonsterIdle").isPlaying && this.anim.pause();
          this.dangerBox.finish();
        }
        if (isHurting) {
          var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
          AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
          this.hitLight(true);
          this.hitLightS(damageData);
          damageData.isBackAttack && this.showBloodEffect();
          this.scheduleOnce(function() {
            if (_this.node) {
              _this.hitLight(false);
              _this.resetBodyColor();
              if (_this.sc.isHurting) {
                _this.sc.isHurting = false;
                _this.anim.resume();
              }
            }
          }, .15);
        }
        this.sprite.opacity = 255;
        this.data.currentHealth -= dd.getTotalDamage();
        this.data.currentHealth > this.data.getHealth().y && (this.data.currentHealth = this.data.getHealth().y);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.getHealth().y);
        this.showFloatFont(this.dungeon.node, dd.getTotalDamage(), false, false, damageData.isCriticalStrike, damageData.isBackAttack);
        this.data.isRecovery > 0 && isHurting && this.addStatus(StatusManager_1.default.RECOVERY, new FromData_1.default());
        return isHurting;
      };
      NonPlayer.prototype.resetBodyColor = function() {
        if (!this.data) return;
        this.bodySprite.node.color = cc.color(255, 255, 255).fromHEX(this.data.bodyColor);
      };
      NonPlayer.prototype.getMixColor = function(color1, color2) {
        var c1 = cc.color().fromHEX(color1);
        var c2 = cc.color().fromHEX(color2);
        var c3 = cc.color();
        var r = c1.getR() + c2.getR();
        var g = c1.getG() + c2.getG();
        var b = c1.getB() + c2.getB();
        c3.setR(r > 255 ? 255 : r);
        c3.setG(g > 255 ? 255 : g);
        c3.setB(b > 255 ? 255 : b);
        return "#" + c3.toHEX("#rrggbb");
      };
      NonPlayer.prototype.addStatus = function(statusType, from) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager.addStatus(statusType, from);
      };
      NonPlayer.prototype.addCustomStatus = function(data, from) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager.addCustomStatus(data, from);
      };
      NonPlayer.prototype.stopAllDebuffs = function() {
        if (!this.node) return;
        this.statusManager.stopAllDebuffs();
      };
      NonPlayer.prototype.showAttackEffect = function(isDashing) {
        this.effectNode.setPosition(cc.v3(0, 32));
        isDashing || cc.tween(this.effectNode).to(.2, {
          position: cc.v3(32, 32)
        }).to(.2, {
          position: cc.v3(0, 16)
        }).start();
      };
      NonPlayer.prototype.showBloodEffect = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.BLEEDING);
        this.particleBlood.resetSystem();
        this.scheduleOnce(function() {
          _this.particleBlood.stopSystem();
        }, .5);
      };
      NonPlayer.prototype.addPlayerStatus = function(actor, from) {
        Logic_1.default.getRandomNum(0, 100) < this.data.FinalCommon.iceRate && actor.addStatus(StatusManager_1.default.FROZEN, from);
        Logic_1.default.getRandomNum(0, 100) < this.data.FinalCommon.fireRate && actor.addStatus(StatusManager_1.default.BURNING, from);
        Logic_1.default.getRandomNum(0, 100) < this.data.FinalCommon.lighteningRate && actor.addStatus(StatusManager_1.default.DIZZ, from);
        Logic_1.default.getRandomNum(0, 100) < this.data.FinalCommon.toxicRate && actor.addStatus(StatusManager_1.default.TOXICOSIS, from);
        Logic_1.default.getRandomNum(0, 100) < this.data.FinalCommon.curseRate && actor.addStatus(StatusManager_1.default.CURSING, from);
        Logic_1.default.getRandomNum(0, 100) < this.data.FinalCommon.realRate && actor.addStatus(StatusManager_1.default.BLEEDING, from);
      };
      NonPlayer.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        this.sc.isDied = true;
        this.sc.isDisguising = false;
        this.dashStep.IsExcuting = false;
        this.sprite.stopAllActions();
        this.dangerBox.finish();
        this.bodySprite.node.angle = 0;
        this.anim.play("MonsterDie");
        this.setLinearVelocity(cc.Vec2.ZERO);
        this.changeBodyRes(this.data.resName, NonPlayer_1.RES_HIT003);
        var collider = this.getComponent(cc.PhysicsCollider);
        collider.sensor = true;
        this.data.isEnemy > 0 && this.getLoot();
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        Logic_1.default.setKillPlayerCounts(FromData_1.default.getClone(this.actorName(), this.data.resName + "anim000", this.seed), false);
        this.scheduleOnce(function() {
          if (_this.node) {
            if (_this.data.isBoom > 0) {
              var boom = cc.instantiate(_this.boom).getComponent(AreaOfEffect_1.default);
              if (boom) {
                boom.show(_this.node.parent, _this.node.position, cc.v3(1, 0), 0, new AreaOfEffectData_1.default().init(1, .2, 0, 0, IndexZ_1.default.OVERHEAD, _this.data.isEnemy > 0, true, true, false, false, new DamageData_1.default(2), FromData_1.default.getClone("\u7206\u70b8", "boom000anim004"), []));
                AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
                cc.director.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
                  detail: {
                    isHeavyShaking: true
                  }
                });
              }
            }
            _this.scheduleOnce(function() {
              _this.node.active = false;
            }, _this.data.isPet ? 0 : 5);
          }
        }, 2);
      };
      NonPlayer.prototype.getLoot = function() {
        var rand4save = Logic_1.default.mapManager.getRandom4Save(Logic_1.default.mapManager.getRebornSeed(this.seed));
        var rand = rand4save.rand();
        var percent = .75;
        this.IsVariation && (percent = .6);
        percent -= this.killPlayerCount / 10;
        percent < .3 && (percent = .3);
        var offset = (1 - percent) / 10;
        var quality = 1 + this.killPlayerCount / 2;
        quality = Math.floor(quality);
        quality > 4 && (quality = 4);
        if (this.dungeon) {
          var count = 1;
          this.IsVariation && (count = 2);
          this.killPlayerCount > 0 && (count = 5);
          this.dungeon.player.data.StatusTotalData.exOilGold > 0 && (count += this.dungeon.player.data.StatusTotalData.exOilGold);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, {
            pos: this.node.position,
            count: count
          });
          rand < percent ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
            pos: this.node.position,
            count: rand4save.getRandomNum(1, 10)
          }) : rand >= percent && rand < percent + offset ? this.addLootSaveItem(Item_1.default.HEART, true) : rand >= percent + offset && rand < percent + 2 * offset ? this.addLootSaveItem(Item_1.default.HEART, true) : rand >= percent + 2 * offset && rand < percent + 3 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_ATTACK) : rand >= percent + 3 * offset && rand < percent + 4 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_MOVESPEED) : rand >= percent + 4 * offset && rand < percent + 5 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_HEALING) : rand >= percent + 5 * offset && rand < percent + 6 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_DREAM) : rand >= percent + 6 * offset && rand < percent + 7 * offset ? this.addLootSaveItem(Item_1.default.BOTTLE_REMOTE) : rand >= percent + 7 * offset && rand < 1 && (this.isSummon || this.dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(this.pos), null, quality));
        }
      };
      NonPlayer.prototype.addLootSaveItem = function(resName, isAuto) {
        !isAuto && this.isSummon || this.dungeon.addItem(this.node.position.clone(), resName);
      };
      NonPlayer.prototype.getCenterPosition = function() {
        return this.node.position.clone();
      };
      Object.defineProperty(NonPlayer.prototype, "isPassive", {
        get: function() {
          return !this.dungeon || this.sc.isDied || this.sc.isHurting || this.sc.isFalling || this.sc.isAttacking || !this.sc.isShow || this.sc.isDizzing || this.sc.isDisguising || this.sc.isDodging || this.sc.isDashing;
        },
        enumerable: false,
        configurable: true
      });
      NonPlayer.prototype.updateAttack = function() {
        var _this = this;
        if (this.isPassive) return;
        var target = ActorUtils_1.default.getNearestEnemyActor(this.node.position, this.data.isEnemy > 0, this.dungeon);
        var targetDis = ActorUtils_1.default.getTargetDistance(this, target);
        if (!ActorUtils_1.default.isTargetAlive(target)) return;
        this.data.specialAttack > 0 && this.specialStep.next(function() {
          _this.specialStep.IsExcuting = true;
        }, this.data.specialAttack, true);
        var range = 100;
        this.specialStep.IsExcuting && (range = 200);
        if (this.data.attackType == ActorAttackBox_1.default.ATTACK_STAB) {
          range = 300;
          this.specialStep.IsExcuting && (range = 600);
        }
        var canMelee = this.data.melee > 0 && targetDis < range * this.node.scaleY;
        var canRemote = this.data.remote > 0 && targetDis < 600 * this.node.scaleY;
        canMelee && !this.meleeStep.IsInCooling ? this.meleeStep.next(function() {
          _this.changeFaceRight(target);
          _this.setLinearVelocity(cc.Vec2.ZERO);
          _this.sc.isAttacking = true;
          _this.sprite.opacity = 255;
          _this.showAttackEffect(false);
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.MELEE
            }
          });
          var isMiss = Logic_1.default.getRandomNum(0, 100) < _this.data.StatusTotalData.missRate;
          isMiss && _this.showFloatFont(_this.dungeon.node, 0, false, true, false, false);
          _this.showAttackAnim(function() {}, function() {}, function() {
            _this.sc.isAttacking = false;
            _this.specialStep.IsExcuting = false;
          }, target, _this.specialStep.IsExcuting, true, isMiss);
        }, this.data.melee) : canRemote && this.remoteStep.next(function() {
          _this.sc.isAttacking = true;
          _this.sprite.opacity = 255;
          _this.changeFaceRight(target);
          var isLaser = Logic_1.default.bullets[_this.data.bulletType] && Logic_1.default.bullets[_this.data.bulletType].isLaser > 0;
          _this.showAttackAnim(function(isSpecial) {
            isLaser && isSpecial && _this.remoteAttack(target, isSpecial);
          }, function(isSpecial) {
            if (isLaser && isSpecial) return;
            _this.remoteAttack(target, isSpecial);
          }, function() {
            _this.specialStep.IsExcuting = false;
            _this.sc.isAttacking = false;
          }, target, _this.specialStep.IsExcuting, false, false);
        }, this.data.remote, true);
      };
      NonPlayer.prototype.dodge = function(pos) {
        var _this = this;
        if (this.isPassive) return;
        this.sc.isDodging = true;
        var speed = this.data.FinalCommon.moveSpeed;
        this.move(pos, 2.5 * speed);
        this.scheduleOnce(function() {
          _this.sc.isDodging = false;
        }, .1);
      };
      NonPlayer.prototype.updateLogic = function(dt) {
        var _this = this;
        if (!this.dungeon) return;
        this.stateMachine.update();
        this.node.position = Dungeon_1.default.fixOuterMap(this.node.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.node.position);
        this.changeZIndex();
        this.updateAttack();
        var target = ActorUtils_1.default.getNearestEnemyActor(this.node.position, this.data.isEnemy > 0, this.dungeon);
        var targetDis = ActorUtils_1.default.getTargetDistance(this, target);
        this.data.disguise > 0 && targetDis < this.data.disguise && this.sc.isDisguising && (this.sc.isDisguising = false);
        this.data.blink > 0 && !this.sc.isBlinking && this.blinkStep.next(function() {
          _this.sc.isBlinking = true;
        }, this.data.blink, true);
        var speed = this.data.FinalCommon.moveSpeed;
        this.data.dash > 0 && !this.isPassive && ActorUtils_1.default.isTargetAlive(target) && targetDis < 600 && targetDis > 100 && this.dashStep.next(function() {
          _this.sc.isDashing = true;
          _this.enterWalk();
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.MELEE
            }
          });
          _this.showAttackEffect(true);
          _this.move(_this.getMovePosFromTarget(target), speed);
          _this.scheduleOnce(function() {
            _this.node && (_this.sc.isDashing = false);
          }, 2);
        }, this.data.dash);
        var isTracking = targetDis < 500 && this.data.melee > 0;
        targetDis < 500 && targetDis > 300 && this.data.remote > 0 && (isTracking = true);
        ActorUtils_1.default.isTargetAlive(target) || (isTracking = false);
        if (!isTracking && this.data.isFollow > 0 && this.data.isEnemy < 1) {
          target = this.dungeon.player;
          targetDis = ActorUtils_1.default.getTargetDistance(this, this.dungeon.player);
          isTracking = true;
        }
        if (!this.isPassive) {
          var needStop = this.data.melee > 0 && targetDis < 64 || this.data.remote > 0 && this.data.melee <= 0 && targetDis < 300 || this.shooter.isAiming;
          needStop ? this.sc.isMoving = false : this.moveStep.next(function() {
            _this.sc.isMoving = true;
            var pos = cc.v3(0, 0);
            pos.x += Logic_1.default.getRandomNum(0, 400) - 200;
            pos.y += Logic_1.default.getRandomNum(0, 400) - 200;
            isTracking && (pos = _this.getMovePosFromTarget(target));
            if (_this.data.flee > 0) {
              pos = _this.getMovePosFromTarget(target, true);
              pos = cc.v3(-pos.x, -pos.y);
            }
            _this.move(pos, isTracking ? .5 * speed : speed);
          }, isTracking ? .5 : 2, true);
        }
        this.data.invisible > 0 && this.sprite.opacity > 20 && (this.sprite.opacity = this.lerp(this.sprite.opacity, 19, 3 * dt));
        this.dashlight.opacity = 0;
        this.dungeon && this.sc.isDashing && (this.dashlight.opacity = 128);
        this.sc.isDashing && this.setLinearVelocity(this.currentlinearVelocitySpeed);
        this.rigidbody.linearVelocity.equals(cc.Vec2.ZERO) && !this.isPassive && (this.sc.isMoving = false);
        this.healthBar.node.opacity = this.sc.isDisguising ? 0 : 255;
        this.shadow && (this.shadow.opacity = this.sc.isDisguising ? 0 : 128);
        this.sc.isDisguising && this.anim && this.anim.pause();
        this.data.invisible > 0 && (this.healthBar.node.opacity = this.sprite.opacity > 20 ? 255 : 9);
        this.healthBar.node.active = !this.sc.isDied;
        var sn = this.getScaleSize();
        this.node.scaleX = this.isFaceRight ? sn : -sn;
        this.node.scaleY = sn;
        this.healthBar.node.scaleX = this.node.scaleX > 0 ? 1 : -1;
        this.healthBar.node.x = -30 * this.node.scaleX;
        this.healthBar.node.y = 3 == this.data.boxType || 5 == this.data.boxType ? 150 : 120;
        this.healthBar.progressBar.barSprite.node.color = this.IsVariation ? cc.color(128, 0, 128) : cc.color(194, 0, 0);
        this.healthBar.progressBar.barSprite.node.color = this.killPlayerCount > 0 ? cc.color(255, 215, 0) : this.healthBar.progressBar.barSprite.node.color;
        this.dashlight.color = this.IsVariation ? cc.color(0, 0, 0) : cc.color(255, 255, 255);
        this.attrNode && (this.attrNode.opacity = this.healthBar.node.opacity);
        if (this.data.isTest > 0 && this.isTestResetTimeDelay(dt) && !this.isPassive) {
          this.pos = this.defautPos.clone();
          this.updatePlayerPos();
        }
        if (this.parentNonPlayer) {
          this.graphics.clear();
          this.graphics.strokeColor = cc.color(0, 255, 0, 128);
          this.graphics.lineWidth = 5;
          if (0 == this.parentNonPlayer.data.childMode && this.parentNonPlayer.sc.isDied) this.data.currentHealth = 0; else {
            this.graphics.moveTo(0, 32);
            var pos = cc.v3(this.parentNonPlayer.node.position.x - this.node.position.x, this.parentNonPlayer.node.position.y - this.node.position.y);
            this.graphics.lineTo(this.node.scaleX > 0 ? pos.x : -pos.x, pos.y + 32);
            this.graphics.stroke();
          }
        }
        if (1 == this.data.childMode && this.childNonPlayerList.length > 0) {
          var count = 0;
          for (var _i = 0, _a = this.childNonPlayerList; _i < _a.length; _i++) {
            var n = _a[_i];
            n.sc.isDied && count++;
          }
          count == this.childNonPlayerList.length && (this.data.currentHealth = 0);
        }
      };
      NonPlayer.prototype.getMovePosFromTarget = function(target, isFlee) {
        var newPos = cc.v3(0, 0);
        newPos.x += Logic_1.default.getRandomNum(0, 400) - 200;
        newPos.y += Logic_1.default.getRandomNum(0, 400) - 200;
        if (!ActorUtils_1.default.isTargetAlive(target)) return newPos;
        newPos = target.node.position.clone();
        if (isFlee) {
          newPos = newPos.y > this.node.position.y ? newPos.addSelf(cc.v3(0, -128)) : newPos.addSelf(cc.v3(0, 128));
          newPos = newPos.x > this.node.position.x ? newPos.addSelf(cc.v3(-64, 0)) : newPos.addSelf(cc.v3(64, 0));
        }
        newPos = newPos.x > this.node.position.x ? newPos.addSelf(cc.v3(32, 0)) : newPos.addSelf(cc.v3(-32, 0));
        var pos = newPos.sub(this.node.position);
        !this.sc.isAttacking && !this.sc.isDisguising && this.data.isStatic < 1 && this.changeFaceRight(target);
        return pos;
      };
      NonPlayer.prototype.changeFaceRight = function(target) {
        var pos = target.node.position.clone();
        pos = pos.sub(this.node.position);
        var h = pos.x;
        this.isFaceRight = h >= 0;
      };
      NonPlayer.prototype.lerp = function(a, b, r) {
        return a + (b - a) * r;
      };
      NonPlayer.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other, this.data.isEnemy < 1);
        if (target && this.sc.isDashing && this.dungeon && !this.sc.isHurting && !this.sc.isFalling && !this.sc.isDied) {
          this.sc.isDashing = false;
          this.setLinearVelocity(cc.Vec2.ZERO);
          var from = FromData_1.default.getClone(this.data.nameCn, this.data.resName + "anim000", this.seed);
          target.takeDamage(this.data.getAttackPoint(), from, this) && this.addPlayerStatus(target, from);
        }
      };
      NonPlayer.prototype.takeDizz = function(dizzDuration) {
        var _this = this;
        if (dizzDuration > 0) {
          this.sc.isDizzing = true;
          this.scheduleOnce(function() {
            _this.sc.isDizzing = false;
          }, dizzDuration);
        }
      };
      NonPlayer.prototype.getScaleSize = function() {
        var scaleNum = this.data.scale && this.data.scale > 0 ? this.data.scale : 1;
        var sn = this.IsVariation ? NonPlayer_1.SCALE_NUM * scaleNum : scaleNum;
        return sn;
      };
      NonPlayer.prototype.actorName = function() {
        return this.data.nameCn;
      };
      NonPlayer.prototype.enterShow = function() {
        var _this = this;
        this.sprite.stopAllActions();
        this.bodySprite.node.color = cc.Color.BLACK;
        cc.tween(this.bodySprite.node).to(1, {
          color: cc.color(255, 255, 255).fromHEX(this.data.bodyColor)
        }).call(function() {
          _this.sc.isShow = true;
        }).start();
      };
      NonPlayer.prototype.enterDisguise = function() {
        this.sc.isShow = true;
        this.sprite.stopAllActions();
        this.anim.getAnimationState("MonsterIdle").isPlaying && this.anim.pause();
        this.changeBodyRes(this.data.resName, NonPlayer_1.RES_DISGUISE);
      };
      NonPlayer.prototype.enterIdle = function() {
        var _this = this;
        this.sc = new StateContext_1.default();
        this.sc.isShow = true;
        var action = cc.tween().delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_IDLE000);
        }).delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_IDLE001);
        });
        this.sprite.stopAllActions();
        this.setLinearVelocity(cc.Vec2.ZERO);
        cc.tween(this.sprite).repeatForever(action).start();
        this.anim.play("MonsterIdle");
        this.dangerBox.finish();
      };
      NonPlayer.prototype.enterWalk = function() {
        var _this = this;
        var action = cc.tween().delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_WALK00);
        }).delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_WALK01);
        }).delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_WALK02);
        }).delay(.2).call(function() {
          _this.changeBodyRes(_this.data.resName, NonPlayer_1.RES_WALK03);
        });
        this.sprite.stopAllActions();
        cc.tween(this.sprite).repeatForever(action).start();
        this.anim.play("MonsterIdle");
      };
      NonPlayer.prototype.enterDizz = function() {
        this.sprite.stopAllActions();
      };
      NonPlayer.prototype.enterBlink = function() {
        var _this = this;
        this.setLinearVelocity(cc.Vec2.ZERO);
        cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
          detail: {
            name: AudioPlayer_1.default.BLINK
          }
        });
        var body = this.bodySprite.node;
        cc.tween(body).to(.2, {
          opacity: 0
        }).call(function() {
          var newPos = ActorUtils_1.default.getNearestEnemyPosition(_this.node.position, true, _this.dungeon, true);
          newPos = Dungeon_1.default.getIndexInMap(newPos);
          newPos = newPos.x > _this.pos.x ? newPos.addSelf(cc.v3(1, 0)) : newPos.addSelf(cc.v3(-1, 0));
          var pos = Dungeon_1.default.getPosInMap(newPos);
          _this.node.setPosition(pos);
        }).to(.2, {
          opacity: 255
        }).call(function() {
          _this.sc.isBlinking = false;
        }).start();
      };
      NonPlayer.prototype.isTestResetTimeDelay = function(dt) {
        this.moveTimeDelay += dt;
        if (this.moveTimeDelay > 10) {
          this.moveTimeDelay = 0;
          return true;
        }
        return false;
      };
      NonPlayer.prototype.enterFall = function() {
        this.bodySprite.node.angle = this.isPlayerBehindAttack() ? -75 : 105;
        this.anim.play("MonsterFall");
      };
      NonPlayer.prototype.updateStatus = function(statusList, totalStatusData) {
        this.data.StatusTotalData.valueCopy(totalStatusData);
        this.data.StatusList = statusList;
      };
      NonPlayer.prototype.hideSelf = function(hideDuration) {};
      NonPlayer.prototype.updateDream = function(offset) {
        return 0;
      };
      var NonPlayer_1;
      NonPlayer.RES_DISGUISE = "disguise";
      NonPlayer.RES_IDLE000 = "anim000";
      NonPlayer.RES_IDLE001 = "anim001";
      NonPlayer.RES_WALK00 = "anim002";
      NonPlayer.RES_WALK01 = "anim003";
      NonPlayer.RES_WALK02 = "anim004";
      NonPlayer.RES_WALK03 = "anim005";
      NonPlayer.RES_HIT001 = "anim006";
      NonPlayer.RES_HIT002 = "anim007";
      NonPlayer.RES_HIT003 = "anim008";
      NonPlayer.RES_ATTACK01 = "anim009";
      NonPlayer.SCALE_NUM = 1.5;
      NonPlayer.ANIM_NONE = -1;
      NonPlayer.ANIM_IDLE = 0;
      NonPlayer.ANIM_WALK = 1;
      NonPlayer.ANIM_ATTACK = 2;
      NonPlayer.ANIM_HIT = 3;
      NonPlayer.ANIM_DIED = 4;
      __decorate([ property(cc.Vec3) ], NonPlayer.prototype, "pos", void 0);
      __decorate([ property(HealthBar_1.default) ], NonPlayer.prototype, "healthBar", void 0);
      __decorate([ property(StatusManager_1.default) ], NonPlayer.prototype, "statusManager", void 0);
      __decorate([ property(FloatingLabelManager_1.default) ], NonPlayer.prototype, "floatinglabelManager", void 0);
      __decorate([ property(SpecialManager_1.default) ], NonPlayer.prototype, "specialManager", void 0);
      __decorate([ property(cc.Prefab) ], NonPlayer.prototype, "boom", void 0);
      __decorate([ property(ActorAttackBox_1.default) ], NonPlayer.prototype, "dangerBox", void 0);
      __decorate([ property(cc.Node) ], NonPlayer.prototype, "dangerTips", void 0);
      __decorate([ property(cc.Prefab) ], NonPlayer.prototype, "attrPrefab", void 0);
      NonPlayer = NonPlayer_1 = __decorate([ ccclass ], NonPlayer);
      return NonPlayer;
    }(Actor_1.default);
    exports.default = NonPlayer;
    cc._RF.pop();
  }, {
    "./Achievement": "Achievement",
    "./Actor/ActorAttackBox": "ActorAttackBox",
    "./Actor/AreaOfEffect": "AreaOfEffect",
    "./Actor/ColliderTag": "ColliderTag",
    "./Actor/NonPlayerActorState": "NonPlayerActorState",
    "./Base/Actor": "Actor",
    "./Base/StateContext": "StateContext",
    "./Base/fsm/DefaultStateMachine": "DefaultStateMachine",
    "./Data/AreaOfEffectData": "AreaOfEffectData",
    "./Data/DamageData": "DamageData",
    "./Data/FromData": "FromData",
    "./Data/NonPlayerData": "NonPlayerData",
    "./Dungeon": "Dungeon",
    "./EventHelper": "EventHelper",
    "./HealthBar": "HealthBar",
    "./Item/Item": "Item",
    "./Logic": "Logic",
    "./Manager/FloatingLabelManager": "FloatingLabelManager",
    "./Manager/SpecialManager": "SpecialManager",
    "./Manager/StatusManager": "StatusManager",
    "./Shooter": "Shooter",
    "./Utils/ActorUtils": "ActorUtils",
    "./Utils/AudioPlayer": "AudioPlayer",
    "./Utils/IndexZ": "IndexZ",
    "./Utils/NextStep": "NextStep",
    "./Utils/Random": "Random"
  } ],
  OilGoldCount: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12dafP9eVJAZosCqqpFY/Vi", "OilGoldCount");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var EventHelper_1 = require("./EventHelper");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OilGoldCount = function(_super) {
      __extends(OilGoldCount, _super);
      function OilGoldCount() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.fragmentLabel = null;
        _this.gemLabel = null;
        _this.gemCountLerp = 0;
        _this.fragmentCountLerp = 0;
        _this.progreesBar = null;
        return _this;
      }
      OilGoldCount.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        cc.director.on(EventHelper_1.EventHelper.HUD_ADD_OILGOLD, function(event) {
          _this.addCount(event.detail.count);
        });
        cc.director.on(EventHelper_1.EventHelper.HUD_LOSE_OILGOLD, function(event) {
          if (_this.node) {
            var count = Logic_1.default.playerData.OilGoldData.fragments;
            _this.addCount("" + -count);
            Logic_1.default.saveGroundOilGold(count);
          }
        });
      };
      OilGoldCount.prototype.start = function() {};
      OilGoldCount.prototype.addCount = function(value) {
        if (!this.anim) return;
        Logic_1.default.oilGolds += parseInt(value);
        var gemIndex = Logic_1.default.playerData.OilGoldData.index;
        Logic_1.default.updateOilGoldCount();
        gemIndex < Logic_1.default.playerData.OilGoldData.index && AudioPlayer_1.default.play(AudioPlayer_1.default.LEVELUP);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.PLAYER_UPDATE_OILGOLD_DATA);
      };
      OilGoldCount.prototype.update = function(dt) {
        this.gemCountLerp = Logic_1.default.lerp(this.gemCountLerp, Logic_1.default.playerData.OilGoldData.level, 5 * dt);
        this.fragmentCountLerp = Logic_1.default.lerp(this.fragmentCountLerp, Logic_1.default.playerData.OilGoldData.fragments, 5 * dt);
        this.gemLabel && (this.gemLabel.string = "" + this.gemCountLerp.toFixed(0));
        this.fragmentLabel && (this.fragmentLabel.string = this.fragmentCountLerp.toFixed(0) + "/" + Logic_1.default.OIL_GOLD_LIST[Logic_1.default.playerData.OilGoldData.index]);
        this.progreesBar && (this.progreesBar.progress = Logic_1.default.lerp(this.progreesBar.progress, Logic_1.default.playerData.OilGoldData.fragments / Logic_1.default.OIL_GOLD_LIST[Logic_1.default.playerData.OilGoldData.index], 5 * dt));
      };
      __decorate([ property(cc.Label) ], OilGoldCount.prototype, "fragmentLabel", void 0);
      __decorate([ property(cc.Label) ], OilGoldCount.prototype, "gemLabel", void 0);
      __decorate([ property(cc.ProgressBar) ], OilGoldCount.prototype, "progreesBar", void 0);
      OilGoldCount = __decorate([ ccclass ], OilGoldCount);
      return OilGoldCount;
    }(cc.Component);
    exports.default = OilGoldCount;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./Utils/AudioPlayer": "AudioPlayer"
  } ],
  OilGoldData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "700faV6hzxA44Hyyhr1kVep", "OilGoldData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseData_1 = require("./BaseData");
    var CommonData_1 = require("./CommonData");
    var OilGoldData = function(_super) {
      __extends(OilGoldData, _super);
      function OilGoldData() {
        var _this = _super.call(this) || this;
        _this.value = 0;
        _this.fragments = 0;
        _this.level = 0;
        _this.index = 0;
        _this.common = new CommonData_1.default();
        return _this;
      }
      Object.defineProperty(OilGoldData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      OilGoldData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.common.valueCopy(data.common);
        this.fragments = data.fragments ? data.fragments : 0;
        this.level = data.level ? data.level : 0;
        this.index = data.index ? data.index : 0;
        this.value = data.value ? data.value : 0;
      };
      OilGoldData.prototype.clone = function() {
        var e = new OilGoldData();
        e.fragments = this.fragments;
        e.common = this.common.clone();
        e.level = this.level;
        e.index = this.index;
        e.value = this.value;
        return e;
      };
      return OilGoldData;
    }(BaseData_1.default);
    exports.default = OilGoldData;
    cc._RF.pop();
  }, {
    "./BaseData": "BaseData",
    "./CommonData": "CommonData"
  } ],
  OilGold: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8833cW2JN9EQJVhihMruuSF", "OilGold");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var EventHelper_1 = require("../EventHelper");
    var Random_1 = require("../Utils/Random");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OilGold = function(_super) {
      __extends(OilGold, _super);
      function OilGold() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.value = 0;
        _this.isReady = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      OilGold_1 = OilGold;
      OilGold.prototype.onLoad = function() {};
      OilGold.prototype.onEnable = function() {
        var _this = this;
        this.rigidBody = this.getComponent(cc.RigidBody);
        var speed = 1200;
        var x = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        var y = Random_1.default.rand() * (Logic_1.default.getHalfChance() ? 1 : -1) * speed;
        this.rigidBody.linearVelocity = cc.v2(x, y);
        this.rigidBody.linearDamping = 10;
        this.isReady = false;
        this.scheduleOnce(function() {
          _this.isReady = true;
        }, 1);
      };
      OilGold.prototype.changeValue = function(value) {
        this.value = value;
        this.value >= OilGold_1.FACE_VALUE ? this.node.scale = 2 : this.node.scale = 1;
      };
      OilGold.prototype.getFinalValue = function() {
        var value = this.value;
        switch (Logic_1.default.chapterIndex) {
         case Logic_1.default.CHAPTER00:
          break;

         case Logic_1.default.CHAPTER01:
          value *= 10;
          break;

         case Logic_1.default.CHAPTER02:
          value *= 100;
          break;

         case Logic_1.default.CHAPTER03:
          value *= 1e3;
          break;

         case Logic_1.default.CHAPTER04:
         case Logic_1.default.CHAPTER05:
          value *= 1e4;
        }
        return value;
      };
      OilGold.prototype.start = function() {};
      OilGold.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      OilGold.prototype.getNearPlayerDistance = function(playerNode) {
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, playerNode.position.clone().addSelf(cc.v3(0, 32)));
        return dis;
      };
      OilGold.prototype.update = function(dt) {
        if (this.isCheckTimeDelay(dt) && this.player && this.getNearPlayerDistance(this.player.node) < 400 && this.node.active && this.isReady) {
          var p = this.player.node.position.clone();
          p.y += 10;
          var pos = p.sub(this.node.position);
          if (!pos.equals(cc.Vec3.ZERO)) {
            pos = pos.normalizeSelf();
            pos = pos.mul(800);
            this.rigidBody.linearVelocity = cc.v2(pos);
            this.rigidBody.linearDamping = 1;
          }
        }
        if (this.player && this.getNearPlayerDistance(this.player.node) < 64 && this.node.active && this.isReady) {
          this.isReady = false;
          AudioPlayer_1.default.play(AudioPlayer_1.default.OILGOLD);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_ADD_OILGOLD, {
            count: this.getFinalValue()
          });
          EventHelper_1.EventHelper.emit("destoryoilgold", {
            oilGoldNode: this.node
          });
        }
      };
      var OilGold_1;
      OilGold.FACE_VALUE = 100;
      OilGold = OilGold_1 = __decorate([ ccclass ], OilGold);
      return OilGold;
    }(cc.Component);
    exports.default = OilGold;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/Random": "Random"
  } ],
  OilLake: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8cd153I1qFEbb/uteHyUJpM", "OilLake");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PerlinNoise2D_1 = require("./PerlinNoise2D");
    var Random_1 = require("../Utils/Random");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OilLake = function() {
      function OilLake() {
        this.map = new Array();
        var threshold = .14, threshold2 = -.14;
        var x0 = 0, y0 = 0, dx = 20, dy = 20;
        var perlin = new PerlinNoise2D_1.default();
        perlin.seed(Random_1.default.rand());
        dx = 20 + this.getRandomNum(20);
        dy = 20 + this.getRandomNum(20);
        x0 = this.getRandomNum(9999);
        y0 = this.getRandomNum(9999);
        var w = OilLake_1.WIDTH;
        var h = OilLake_1.HEIGHT;
        this.map = new Array();
        for (var i = 0; i < w; i++) {
          this.map[i] = new Array();
          for (var j = 0; j < h; j++) {
            this.map[i][j] = ".";
            var x = dx * i / w + x0, y = dy * j / h + y0;
            var p = perlin.simplex2(x, y);
            p > threshold ? this.map[i][j] = "Y" : p < threshold2 && (this.map[i][j] = "~");
            var pr = Random_1.default.rand();
            pr >= 0 && pr < .2 && "~" != this.map[i][j] && (this.map[i][j] = "o");
            pr >= .2 && pr < .25 && "~" != this.map[i][j] && (this.map[i][j] = "w");
          }
        }
      }
      OilLake_1 = OilLake;
      OilLake.prototype.getRandomNum = function(max) {
        return Math.round(Random_1.default.rand() * max);
      };
      OilLake.prototype.getDisPlay = function() {
        var str = "";
        for (var j = OilLake_1.HEIGHT - 1; j >= 0; j--) {
          for (var i = 0; i < OilLake_1.WIDTH; i++) str += this.map[i][j];
          str += "\n";
        }
        return str;
      };
      var OilLake_1;
      OilLake.WIDTH = 64;
      OilLake.HEIGHT = 64;
      OilLake = OilLake_1 = __decorate([ ccclass ], OilLake);
      return OilLake;
    }();
    exports.default = OilLake;
    cc._RF.pop();
  }, {
    "../Utils/Random": "Random",
    "./PerlinNoise2D": "PerlinNoise2D"
  } ],
  OrganizationTalent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05cb5HVifxPKYxNiXzzrtHe", "OrganizationTalent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AvatarData_1 = require("../Data/AvatarData");
    var FromData_1 = require("../Data/FromData");
    var NonPlayerData_1 = require("../Data/NonPlayerData");
    var StatusData_1 = require("../Data/StatusData");
    var Logic_1 = require("../Logic");
    var StatusManager_1 = require("../Manager/StatusManager");
    var CoolDownView_1 = require("../UI/CoolDownView");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var Utils_1 = require("../Utils/Utils");
    var Talent_1 = require("./Talent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OrganizationTalent = function(_super) {
      __extends(OrganizationTalent, _super);
      function OrganizationTalent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.energyShieldList = [];
        _this.checkTimeDelay = 0;
        return _this;
      }
      OrganizationTalent.prototype.onLoad = function() {};
      OrganizationTalent.prototype.changePerformance = function() {};
      OrganizationTalent.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.coolDownId = CoolDownView_1.default.ORGANIZATION;
        var storePointMax = 1;
        this.player.data.AvatarData.organizationIndex == AvatarData_1.default.GURAD ? storePointMax = 1 + Math.floor(Logic_1.default.playerData.OilGoldData.level / 5) : this.player.data.AvatarData.organizationIndex == AvatarData_1.default.FOLLOWER && this.player.initShadowList(true, Math.floor(Logic_1.default.playerData.OilGoldData.level / 5 + 1), 30 + 2 * Logic_1.default.playerData.OilGoldData.level);
        this.initCoolDown(data, storePointMax);
      };
      OrganizationTalent.prototype.skillCanUse = function() {
        return true;
      };
      OrganizationTalent.prototype.doSkill = function() {
        var _this = this;
        if (this.player.data.AvatarData.organizationIndex == AvatarData_1.default.GURAD) {
          if (this.energyShieldList.length > this.talentSkill.StorePointMax) {
            var s = this.energyShieldList.pop();
            s.isShow = false;
            s && s.isValid && s.destroy();
          }
          var shield = this.player.dungeon.buildingManager.addEnergyShield(this.player);
          if (shield) {
            this.energyShieldList.push(shield);
            this.scheduleOnce(function() {
              _this.talentSkill.IsExcuting = false;
            }, 1);
          }
        } else if (this.player.data.AvatarData.organizationIndex == AvatarData_1.default.HUNTER) if (this.player.dungeon.nonPlayerManager.isPetAlive()) {
          var d = new NonPlayerData_1.default();
          d.valueCopy(Logic_1.default.nonplayers[this.player.data.AvatarData.petName]);
          var data = new StatusData_1.default();
          data.valueCopy(Logic_1.default.status[StatusManager_1.default.PET_DOG]);
          data.Common.realRate += 1 * Logic_1.default.playerData.OilGoldData.level;
          data.Common.remoteCritRate = 100;
          data.Common.realDamage += Logic_1.default.playerData.OilGoldData.level;
          data.realDamageOvertime -= Logic_1.default.playerData.OilGoldData.level / 5;
          this.player.dungeon.nonPlayerManager.pet.data.Common.maxHealth = d.Common.maxHealth + 5 * Logic_1.default.playerData.OilGoldData.level + 3 * this.data.useCount;
          this.player.dungeon.nonPlayerManager.pet.addCustomStatus(data, new FromData_1.default());
          AudioPlayer_1.default.play(d.specialAudio);
          Utils_1.default.toast("\u5ba0\u7269\u7684\u529b\u91cf\u589e\u5f3a\u4e86" + (5 * Logic_1.default.playerData.OilGoldData.level + 3 * this.data.useCount) + "\u70b9\u8840\u91cf\u4e0a\u9650\uff0c\u8840\u91cf\u4e0a\u9650\u4e3a" + this.player.dungeon.nonPlayerManager.pet.data.Common.maxHealth + "\uff0c\u653b\u51fb\u529b\u4e3a" + d.getAttackPoint().getTotalDamage());
        } else {
          if (this.data.useCount > 1) {
            this.data.useCount = this.data.useCount / 2;
            this.data.useCount < 1 && (this.data.useCount = 1);
          }
          var data = new NonPlayerData_1.default();
          data.valueCopy(Logic_1.default.nonplayers[this.player.data.AvatarData.petName]);
          data.Common.maxHealth += 5 * Logic_1.default.playerData.OilGoldData.level + 3 * this.data.useCount;
          data.currentHealth = data.Common.maxHealth;
          data.Common.damageMin += Logic_1.default.playerData.OilGoldData.level;
          data.Common.remoteDamage += Logic_1.default.playerData.OilGoldData.level;
          data.Common.defence += Logic_1.default.playerData.OilGoldData.level;
          this.player.dungeon.nonPlayerManager.addPetFromData(data, this.player.node.position, this.player.dungeon);
          AudioPlayer_1.default.play(data.specialAudio);
          Utils_1.default.toast("\u4f60\u53ec\u5524\u4e86\u5ba0\u7269" + data.nameCn + "\uff1a\u8840\u91cf\u4e0a\u9650\u4e3a" + this.player.dungeon.nonPlayerManager.pet.data.Common.maxHealth + "\uff0c\u653b\u51fb\u529b\u4e3a" + data.getAttackPoint().getTotalDamage());
        } else if (this.player.data.AvatarData.organizationIndex == AvatarData_1.default.TECH) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
          var data = new StatusData_1.default();
          data.valueCopy(Logic_1.default.status[StatusManager_1.default.REAGENT]);
          data.duration += 3 * Logic_1.default.playerData.OilGoldData.level;
          data.Common.maxHealth = this.player.data.FinalCommon.maxHealth * (.5 + .1 * Logic_1.default.playerData.OilGoldData.level);
          data.Common.damageMin = this.player.data.FinalCommon.damageMin * (.5 + .1 * Logic_1.default.playerData.OilGoldData.level);
          data.Common.defence = this.player.data.FinalCommon.defence * (.5 + .1 * Logic_1.default.playerData.OilGoldData.level);
          data.Common.remoteDamage = this.player.data.FinalCommon.remoteDamage * (.5 + .05 * Logic_1.default.playerData.OilGoldData.level);
          data.realDamageDirect -= data.Common.maxHealth;
          this.player.addCustomStatus(data, new FromData_1.default());
        } else if (this.player.data.AvatarData.organizationIndex == AvatarData_1.default.FOLLOWER) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.BLINK);
          this.player.initShadowList(false, Math.floor(Logic_1.default.playerData.OilGoldData.level / 5 + 1), 30 + 2 * Logic_1.default.playerData.OilGoldData.level);
        }
      };
      OrganizationTalent.prototype.takeDamage = function(damageData, actor) {
        var success = this.energyShieldBlock(damageData);
        return success;
      };
      OrganizationTalent.prototype.energyShieldBlock = function(damageData) {
        for (var i = this.energyShieldList.length - 1; i >= 0; i--) {
          var shield = this.energyShieldList[i];
          if (shield.node && shield.node.isValid) return shield.isShow && shield.checkTargetIn(this.player.node) && shield.takeDamage(damageData);
          this.energyShieldList.splice(i, 1);
        }
        return false;
      };
      OrganizationTalent.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      __decorate([ property(cc.Sprite) ], OrganizationTalent.prototype, "sprite", void 0);
      OrganizationTalent = __decorate([ ccclass ], OrganizationTalent);
      return OrganizationTalent;
    }(Talent_1.default);
    exports.default = OrganizationTalent;
    cc._RF.pop();
  }, {
    "../Data/AvatarData": "AvatarData",
    "../Data/FromData": "FromData",
    "../Data/NonPlayerData": "NonPlayerData",
    "../Data/StatusData": "StatusData",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../UI/CoolDownView": "CoolDownView",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/Utils": "Utils",
    "./Talent": "Talent"
  } ],
  PaletteSelector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2484805pD1NW4q2UMrBMgzJ", "PaletteSelector");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PaletteSelector = function(_super) {
      __extends(PaletteSelector, _super);
      function PaletteSelector() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.layout = null;
        _this.colors = [];
        _this.currentIndex = 0;
        return _this;
      }
      PaletteSelector_1 = PaletteSelector;
      PaletteSelector.prototype.onLoad = function() {};
      PaletteSelector.prototype.init = function(colorType, defaultIndex) {
        var _this = this;
        switch (colorType) {
         case PaletteSelector_1.TYPE_EYES:
          this.colors = PaletteSelector_1.EYESCOLORS;
          break;

         case PaletteSelector_1.TYPE_HAIR:
          this.colors = PaletteSelector_1.HAIRCOLORS;
          break;

         case PaletteSelector_1.TYPE_FACE:
          this.colors = PaletteSelector_1.FACECOLORS;
        }
        this.currentIndex = defaultIndex || 0;
        var _loop_1 = function(i) {
          var palette = this_1.layout.children[i];
          i > this_1.colors.length - 1 ? palette.color = cc.Color.BLACK : palette.color = cc.Color.WHITE.fromHEX(this_1.colors[i]);
          palette.on(cc.Node.EventType.TOUCH_START, function(event) {
            _this.updateAttribute(palette.color);
          });
        };
        var this_1 = this;
        for (var i = 0; i < this.layout.childrenCount; i++) _loop_1(i);
        this.updateAttribute(cc.Color.WHITE.fromHEX(this.colors[this.currentIndex]));
      };
      PaletteSelector.prototype.selectRandom = function() {
        this.currentIndex = Logic_1.default.getRandomNum(0, this.colors.length - 1);
        this.updateAttribute(cc.Color.WHITE.fromHEX(this.colors[this.currentIndex]));
      };
      PaletteSelector.prototype.setSelectorCallback = function(callback) {
        this.selectorCallback = callback;
      };
      PaletteSelector.prototype.updateAttribute = function(color) {
        this.selectorCallback && this.selectorCallback(color);
      };
      var PaletteSelector_1;
      PaletteSelector.TYPE_HAIR = 0;
      PaletteSelector.TYPE_EYES = 1;
      PaletteSelector.TYPE_FACE = 2;
      PaletteSelector.EYESCOLORS = [ "#000000", "#222034", "#45283c", "#663931", "#fbf236", "#6abe30", "#37946e", "#524b24", "#306082", "#5b6ee1", "#639bff", "#5fcde4", "#cbdbfc", "#ffc500", "#ffffff", "#9badb7", "#76428a", "#ac3232", "#d95763", "#8f974a", "#c20000" ];
      PaletteSelector.HAIRCOLORS = [ "#000000", "#222034", "#45283c", "#663931", "#fbf236", "#6abe30", "#37946e", "#524b24", "#306082", "#5b6ee1", "#639bff", "#5fcde4", "#cbdbfc", "#ffc500", "#ffffff", "#9badb7", "#76428a", "#ac3232", "#d95763", "#8f974a", "#c20000" ];
      PaletteSelector.FACECOLORS = [ "#FBA1DE", "#d95763", "#818185", "#d9a066", "#663931", "#fbf236", "#6abe30", "#37946e", "#524b24", "#306082", "#5b6ee1", "#639bff", "#5fcde4", "#cbdbfc", "#ffc500", "#ffffff", "#9badb7", "#76428a", "#ac3232", "#8f974a", "#c20000" ];
      __decorate([ property(cc.Node) ], PaletteSelector.prototype, "layout", void 0);
      PaletteSelector = PaletteSelector_1 = __decorate([ ccclass ], PaletteSelector);
      return PaletteSelector;
    }(cc.Component);
    exports.default = PaletteSelector;
    cc._RF.pop();
  }, {
    "../Logic": "Logic"
  } ],
  ParallaxBackground: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "509a7aimNhEX5/e74VkypMj", "ParallaxBackground");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ParallexBackground = function(_super) {
      __extends(ParallexBackground, _super);
      function ParallexBackground() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.background = null;
        _this.layer1 = null;
        _this.layer2 = null;
        return _this;
      }
      ParallexBackground.prototype.init = function() {
        this.layer1.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("chapter0" + Logic_1.default.chapterIndex + "layer1");
        this.layer2.getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("chapter0" + Logic_1.default.chapterIndex + "layer2");
      };
      ParallexBackground.prototype.getPlayer = function() {
        this.player || (this.player = this.node.parent.getComponent(Dungeon_1.default).player);
        return this.player;
      };
      ParallexBackground.prototype.start = function() {};
      ParallexBackground.prototype.lateUpdate = function() {
        var player = this.getPlayer();
        if (player) {
          var targetPos = player.node.convertToWorldSpaceAR(cc.Vec3.ZERO);
          this.layer1.position = this.lerp(this.layer1.position, this.node.convertToNodeSpaceAR(targetPos), .005);
          this.layer2.position = this.lerp(this.layer2.position, this.node.convertToNodeSpaceAR(targetPos), .015);
        }
      };
      ParallexBackground.prototype.lerp = function(self, to, ratio) {
        var out = cc.v3(0, 0);
        var x = self.x;
        var y = self.y;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        return out;
      };
      __decorate([ property(cc.Node) ], ParallexBackground.prototype, "background", void 0);
      __decorate([ property(cc.Node) ], ParallexBackground.prototype, "layer1", void 0);
      __decorate([ property(cc.Node) ], ParallexBackground.prototype, "layer2", void 0);
      ParallexBackground = __decorate([ ccclass ], ParallexBackground);
      return ParallexBackground;
    }(cc.Component);
    exports.default = ParallexBackground;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../Logic": "Logic"
  } ],
  PerlinNoise2D: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "59901zRRqlG9KvoKLDTbxq7", "PerlinNoise2D");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PerlinNoise2D = function() {
      function PerlinNoise2D() {
        this.grad3 = [ new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1) ];
        this.p = [ 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180 ];
        this.perm = new Array(512);
        this.gradP = new Array(512);
        this.F2 = .5 * (Math.sqrt(3) - 1);
        this.G2 = (3 - Math.sqrt(3)) / 6;
        this.F3 = 1 / 3;
        this.G3 = 1 / 6;
      }
      PerlinNoise2D.prototype.simplex2 = function(xin, yin) {
        var n0, n1, n2;
        var s = (xin + yin) * this.F2;
        var i = Math.floor(xin + s);
        var j = Math.floor(yin + s);
        var t = (i + j) * this.G2;
        var x0 = xin - i + t;
        var y0 = yin - j + t;
        var i1, j1;
        if (x0 > y0) {
          i1 = 1;
          j1 = 0;
        } else {
          i1 = 0;
          j1 = 1;
        }
        var x1 = x0 - i1 + this.G2;
        var y1 = y0 - j1 + this.G2;
        var x2 = x0 - 1 + 2 * this.G2;
        var y2 = y0 - 1 + 2 * this.G2;
        i &= 255;
        j &= 255;
        var gi0 = this.gradP[i + this.perm[j]];
        var gi1 = this.gradP[i + i1 + this.perm[j + j1]];
        var gi2 = this.gradP[i + 1 + this.perm[j + 1]];
        var t0 = .5 - x0 * x0 - y0 * y0;
        if (t0 < 0) n0 = 0; else {
          t0 *= t0;
          n0 = t0 * t0 * gi0.dot2(x0, y0);
        }
        var t1 = .5 - x1 * x1 - y1 * y1;
        if (t1 < 0) n1 = 0; else {
          t1 *= t1;
          n1 = t1 * t1 * gi1.dot2(x1, y1);
        }
        var t2 = .5 - x2 * x2 - y2 * y2;
        if (t2 < 0) n2 = 0; else {
          t2 *= t2;
          n2 = t2 * t2 * gi2.dot2(x2, y2);
        }
        return 70 * (n0 + n1 + n2);
      };
      PerlinNoise2D.prototype.simplex3 = function(xin, yin, zin) {
        var n0, n1, n2, n3;
        var s = (xin + yin + zin) * this.F3;
        var i = Math.floor(xin + s);
        var j = Math.floor(yin + s);
        var k = Math.floor(zin + s);
        var t = (i + j + k) * this.G3;
        var x0 = xin - i + t;
        var y0 = yin - j + t;
        var z0 = zin - k + t;
        var i1, j1, k1;
        var i2, j2, k2;
        if (x0 >= y0) if (y0 >= z0) {
          i1 = 1;
          j1 = 0;
          k1 = 0;
          i2 = 1;
          j2 = 1;
          k2 = 0;
        } else if (x0 >= z0) {
          i1 = 1;
          j1 = 0;
          k1 = 0;
          i2 = 1;
          j2 = 0;
          k2 = 1;
        } else {
          i1 = 0;
          j1 = 0;
          k1 = 1;
          i2 = 1;
          j2 = 0;
          k2 = 1;
        } else if (y0 < z0) {
          i1 = 0;
          j1 = 0;
          k1 = 1;
          i2 = 0;
          j2 = 1;
          k2 = 1;
        } else if (x0 < z0) {
          i1 = 0;
          j1 = 1;
          k1 = 0;
          i2 = 0;
          j2 = 1;
          k2 = 1;
        } else {
          i1 = 0;
          j1 = 1;
          k1 = 0;
          i2 = 1;
          j2 = 1;
          k2 = 0;
        }
        var x1 = x0 - i1 + this.G3;
        var y1 = y0 - j1 + this.G3;
        var z1 = z0 - k1 + this.G3;
        var x2 = x0 - i2 + 2 * this.G3;
        var y2 = y0 - j2 + 2 * this.G3;
        var z2 = z0 - k2 + 2 * this.G3;
        var x3 = x0 - 1 + 3 * this.G3;
        var y3 = y0 - 1 + 3 * this.G3;
        var z3 = z0 - 1 + 3 * this.G3;
        i &= 255;
        j &= 255;
        k &= 255;
        var gi0 = this.gradP[i + this.perm[j + this.perm[k]]];
        var gi1 = this.gradP[i + i1 + this.perm[j + j1 + this.perm[k + k1]]];
        var gi2 = this.gradP[i + i2 + this.perm[j + j2 + this.perm[k + k2]]];
        var gi3 = this.gradP[i + 1 + this.perm[j + 1 + this.perm[k + 1]]];
        var t0 = .6 - x0 * x0 - y0 * y0 - z0 * z0;
        if (t0 < 0) n0 = 0; else {
          t0 *= t0;
          n0 = t0 * t0 * gi0.dot3(x0, y0, z0);
        }
        var t1 = .6 - x1 * x1 - y1 * y1 - z1 * z1;
        if (t1 < 0) n1 = 0; else {
          t1 *= t1;
          n1 = t1 * t1 * gi1.dot3(x1, y1, z1);
        }
        var t2 = .6 - x2 * x2 - y2 * y2 - z2 * z2;
        if (t2 < 0) n2 = 0; else {
          t2 *= t2;
          n2 = t2 * t2 * gi2.dot3(x2, y2, z2);
        }
        var t3 = .6 - x3 * x3 - y3 * y3 - z3 * z3;
        if (t3 < 0) n3 = 0; else {
          t3 *= t3;
          n3 = t3 * t3 * gi3.dot3(x3, y3, z3);
        }
        return 32 * (n0 + n1 + n2 + n3);
      };
      PerlinNoise2D.prototype.perlin2 = function(x, y) {
        var X = Math.floor(x), Y = Math.floor(y);
        x -= X;
        y -= Y;
        X &= 255;
        Y &= 255;
        var n00 = this.gradP[X + this.perm[Y]].dot2(x, y);
        var n01 = this.gradP[X + this.perm[Y + 1]].dot2(x, y - 1);
        var n10 = this.gradP[X + 1 + this.perm[Y]].dot2(x - 1, y);
        var n11 = this.gradP[X + 1 + this.perm[Y + 1]].dot2(x - 1, y - 1);
        var u = this.fade(x);
        return this.lerp(this.lerp(n00, n10, u), this.lerp(n01, n11, u), this.fade(y));
      };
      PerlinNoise2D.prototype.perlin3 = function(x, y, z) {
        var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);
        x -= X;
        y -= Y;
        z -= Z;
        X &= 255;
        Y &= 255;
        Z &= 255;
        var n000 = this.gradP[X + this.perm[Y + this.perm[Z]]].dot3(x, y, z);
        var n001 = this.gradP[X + this.perm[Y + this.perm[Z + 1]]].dot3(x, y, z - 1);
        var n010 = this.gradP[X + this.perm[Y + 1 + this.perm[Z]]].dot3(x, y - 1, z);
        var n011 = this.gradP[X + this.perm[Y + 1 + this.perm[Z + 1]]].dot3(x, y - 1, z - 1);
        var n100 = this.gradP[X + 1 + this.perm[Y + this.perm[Z]]].dot3(x - 1, y, z);
        var n101 = this.gradP[X + 1 + this.perm[Y + this.perm[Z + 1]]].dot3(x - 1, y, z - 1);
        var n110 = this.gradP[X + 1 + this.perm[Y + 1 + this.perm[Z]]].dot3(x - 1, y - 1, z);
        var n111 = this.gradP[X + 1 + this.perm[Y + 1 + this.perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);
        var u = this.fade(x);
        var v = this.fade(y);
        var w = this.fade(z);
        return this.lerp(this.lerp(this.lerp(n000, n100, u), this.lerp(n001, n101, u), w), this.lerp(this.lerp(n010, n110, u), this.lerp(n011, n111, u), w), v);
      };
      PerlinNoise2D.prototype.seed = function(seed) {
        seed > 0 && seed < 1 && (seed *= 65536);
        seed = Math.floor(seed);
        seed < 256 && (seed |= seed << 8);
        for (var i = 0; i < 256; i++) {
          var v = void 0;
          v = 1 & i ? this.p[i] ^ 255 & seed : this.p[i] ^ seed >> 8 & 255;
          this.perm[i] = this.perm[i + 256] = v;
          this.gradP[i] = this.gradP[i + 256] = this.grad3[v % 12];
        }
      };
      PerlinNoise2D.prototype.lerp = function(a, b, t) {
        return (1 - t) * a + t * b;
      };
      PerlinNoise2D.prototype.fade = function(t) {
        return t * t * t * (t * (6 * t - 15) + 10);
      };
      PerlinNoise2D = __decorate([ ccclass ], PerlinNoise2D);
      return PerlinNoise2D;
    }();
    exports.default = PerlinNoise2D;
    var Grad = function() {
      function Grad(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
      }
      Grad.prototype.dot2 = function(x, y) {
        return this.x * x + this.y * y;
      };
      Grad.prototype.dot3 = function(x, y, z) {
        return this.x * x + this.y * y + this.z * z;
      };
      return Grad;
    }();
    cc._RF.pop();
  }, {} ],
  PickAvatar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c7974nYPCdMvb6AS/8/NF4d", "PickAvatar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var AttributeSelector_1 = require("./AttributeSelector");
    var AttributeData_1 = require("../Data/AttributeData");
    var BrightnessBar_1 = require("./BrightnessBar");
    var PaletteSelector_1 = require("./PaletteSelector");
    var AvatarData_1 = require("../Data/AvatarData");
    var EquipmentManager_1 = require("../Manager/EquipmentManager");
    var InventoryManager_1 = require("../Manager/InventoryManager");
    var LoadingManager_1 = require("../Manager/LoadingManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PickAvatar = function(_super) {
      __extends(PickAvatar, _super);
      function PickAvatar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.SELECTOR_ORGANIZATION = 0;
        _this.SELECTOR_GENGER = 1;
        _this.SELECTOR_HAIR = 2;
        _this.COLOR_PATTLE_HAIR = 3;
        _this.SELECTOR_EYES = 4;
        _this.COLOR_PATTLE_EYES = 5;
        _this.SELECTOR_FACE = 6;
        _this.COLOR_PATTLE_FACE = 7;
        _this.SELECTOR_BODY = 8;
        _this.PROGRESS_SKIN_COLOR = 9;
        _this.SELECTOR_PROFESSION = 10;
        _this.loadingBackground = null;
        _this.avatarTable = null;
        _this.attributeLayout = null;
        _this.randomLayout = null;
        _this.randomLabelTitle = null;
        _this.randomLabelName = null;
        _this.randomLabelDesc = null;
        _this.randomLabelSkillName = null;
        _this.randomLabelSkillDesc = null;
        _this.randomButton = null;
        _this.selectorPrefab = null;
        _this.brightnessBarPrefab = null;
        _this.palettePrefab = null;
        _this.cloakSprite = null;
        _this.shoesSprite1 = null;
        _this.shoesSprite2 = null;
        _this.helmetSprite = null;
        _this.pantsSprite = null;
        _this.clothesSprite = null;
        _this.glovesSprite1 = null;
        _this.glovesSprite2 = null;
        _this.weaponSprite = null;
        _this.remoteSprite = null;
        _this.shieldSprite = null;
        _this.petSprite = null;
        _this.randomTouched = false;
        _this.isShow = false;
        _this.loadingManager = new LoadingManager_1.default();
        _this.delayTime = 0;
        return _this;
      }
      PickAvatar.prototype.onLoad = function() {
        var _this = this;
        this.loadingManager.init();
        this.data = new AvatarData_1.default();
        this.bedSprite = this.getSpriteChildSprite(this.avatarTable, [ "bed" ]);
        this.coverSprite = this.getSpriteChildSprite(this.avatarTable, [ "cover" ]);
        this.petSprite = this.getSpriteChildSprite(this.avatarTable, [ "pet" ]);
        this.bodySprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body" ]);
        this.handSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "hand1" ]);
        this.handSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "hand2" ]);
        this.legSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "leg1" ]);
        this.legSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "leg2" ]);
        this.headSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head" ]);
        this.hairSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head", "hair" ]);
        this.faceSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head", "face" ]);
        this.eyesSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head", "eyes" ]);
        this.helmetSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "head", "helmet" ]);
        this.pantsSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "pants" ]);
        this.cloakSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "cloak" ]);
        this.weaponSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "weapon" ]);
        this.remoteSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "remote" ]);
        this.shieldSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "shield" ]);
        this.clothesSprite = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "clothes" ]);
        this.glovesSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "hand1", "gloves" ]);
        this.glovesSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "hand2", "gloves" ]);
        this.shoesSprite1 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "leg1", "shoes" ]);
        this.shoesSprite2 = this.getSpriteChildSprite(this.avatarTable, [ "avatar", "body", "leg2", "shoes" ]);
        this.loadingBackground.active = true;
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_TEXTURES, "ammo");
        this.loadingManager.loadSpriteAtlas(LoadingManager_1.default.KEY_NPC, "monster000anim000");
        this.loadingManager.loadProfession();
        this.loadingManager.loadEquipment();
        this.loadingManager.loadTalents();
        this.loadingManager.loadItems();
        this.loadingManager.loadSuits();
        this.attributeLayout.active = false;
        this.randomButton.on(cc.Node.EventType.TOUCH_START, function(event) {
          _this.randomTouched = true;
        }, this);
        this.randomButton.on(cc.Node.EventType.TOUCH_END, function(event) {
          _this.randomTouched = false;
        }, this);
        this.randomButton.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          _this.randomTouched = false;
        }, this);
      };
      PickAvatar.prototype.getSpriteChildSprite = function(node, childNames) {
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      PickAvatar.prototype.show = function() {
        var _this = this;
        this.isShow = true;
        this.loadingBackground.active = false;
        var organList = new Array();
        for (var i = 0; i < AvatarData_1.default.ORGANIZATION.length; i++) organList.push(new AttributeData_1.default(i, AvatarData_1.default.ORGANIZATION[i], "", "", "", ""));
        this.organizationSelector = this.addAttributeSelector("\u7ec4\u7ec7\uff1a", organList);
        this.organizationSelector.selectorCallback = function(data) {
          _this.data.organizationIndex = data.id;
          _this.bedSprite.spriteFrame = Logic_1.default.spriteFrameRes("avatarbed00" + data.id);
          _this.coverSprite.spriteFrame = Logic_1.default.spriteFrameRes("avatarcover00" + data.id);
          _this.randomLabelTitle.string = data.name;
          _this.petSelector && (_this.petSelector.node.active = data.id == AvatarData_1.default.HUNTER);
          _this.petSprite.node.active = data.id == AvatarData_1.default.HUNTER;
        };
        var professionList = new Array();
        for (var i = 0; i < Logic_1.default.professionList.length; i++) {
          var data = Logic_1.default.professionList[i];
          var talent = Logic_1.default.talents[data.talent];
          professionList.push(new AttributeData_1.default(data.id, data.nameCn, "", data.desc, "\u6280\u80fd\uff1a" + talent.nameCn, "" + talent.desc));
        }
        this.professionSelector = this.addAttributeSelector("\u804c\u4e1a\uff1a", professionList);
        this.professionSelector.selectorCallback = function(data) {
          _this.data.professionData.valueCopy(Logic_1.default.professionList[data.id]);
          _this.randomLabelName.string = "" + data.name;
          _this.randomLabelDesc.string = "" + data.desc;
          _this.randomLabelSkillName.string = "" + data.name1;
          _this.randomLabelSkillDesc.string = "" + data.desc1;
          _this.changeEquipment(Logic_1.default.professionList[data.id]);
        };
        this.skinSelector = this.addBrightnessBar();
        this.skinSelector.setSelectorCallback(function(color) {
          _this.bodySprite.node.color = color;
          _this.headSprite.node.color = color;
          _this.handSprite1.node.color = color;
          _this.handSprite2.node.color = color;
          _this.legSprite1.node.color = color;
          _this.legSprite2.node.color = color;
          _this.data.skinColor = color.toHEX("#rrggbb");
        });
        var hairList = [];
        for (var i = 0; i < 10; i++) hairList.push(new AttributeData_1.default(i, "\u6837\u5f0f" + i, "avatarhair0" + (i > 9 ? "" : "0") + i + "anim00", "", "", ""));
        this.hairSelector = this.addAttributeSelector("\u53d1\u578b\uff1a", hairList);
        this.hairSelector.selectorCallback = function(data) {
          _this.hairSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName + "0");
          _this.data.hairResName = data.resName;
        };
        this.hairColorSelector = this.addPaletteSelector(PaletteSelector_1.default.TYPE_HAIR);
        this.hairColorSelector.setSelectorCallback(function(color) {
          _this.hairSprite.node.color = color;
          _this.data.hairColor = color.toHEX("#rrggbb");
        });
        var eyesList = [];
        for (var i = 0; i < 22; i++) eyesList.push(new AttributeData_1.default(i, "\u6837\u5f0f" + i, "avatareyes0" + (i > 9 ? "" : "0") + i, "", "", ""));
        this.eyesSelector = this.addAttributeSelector("\u773c\u775b\uff1a", eyesList);
        this.eyesSelector.selectorCallback = function(data) {
          _this.eyesSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName);
          _this.data.eyesResName = data.resName;
        };
        this.eyesColorSelector = this.addPaletteSelector(PaletteSelector_1.default.TYPE_EYES);
        this.eyesColorSelector.setSelectorCallback(function(color) {
          _this.eyesSprite.node.color = color;
          _this.data.eyesColor = color.toHEX("#rrggbb");
        });
        var faceList = [];
        for (var i = 0; i < 15; i++) faceList.push(new AttributeData_1.default(i, "\u6837\u5f0f" + i, "avatarface0" + (i > 9 ? "" : "0") + i, "", "", ""));
        this.faceSelector = this.addAttributeSelector("\u9762\u988a\uff1a", faceList);
        this.faceSelector.selectorCallback = function(data) {
          _this.faceSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName);
          _this.data.faceResName = data.resName;
        };
        this.faceColorSelector = this.addPaletteSelector(PaletteSelector_1.default.TYPE_FACE);
        this.faceColorSelector.setSelectorCallback(function(color) {
          _this.faceSprite.node.color = color;
          _this.data.faceColor = color.toHEX("#rrggbb");
        });
        var petNames = [ "\u67ef\u57fa", "\u5bb6\u732b", "\u6a59\u5b50\u9c7c" ];
        var petList = [];
        for (var i = 0; i < petNames.length; i++) petList.push(new AttributeData_1.default(i, "" + petNames[i], "nonplayer1" + (i > 9 ? "" : "0") + i + "anim000", "", "", ""));
        this.petSelector = this.addAttributeSelector("\u5ba0\u7269\uff1a", petList);
        this.petSelector.selectorCallback = function(data) {
          _this.petSprite.spriteFrame = Logic_1.default.spriteFrameRes(data.resName);
          _this.data.petName = "nonplayer1" + (data.id > 9 ? "" : "0") + data.id;
        };
        this.petSelector.node.active = this.organizationSelector.CurrentData.id == AvatarData_1.default.HUNTER;
        this.petSprite.node.active = this.organizationSelector.CurrentData.id == AvatarData_1.default.HUNTER;
        this.ButtonRandom();
      };
      PickAvatar.prototype.changeEquipment = function(data) {
        this.changeRes(this.helmetSprite, data.equips[InventoryManager_1.default.HELMET], "anim0");
        this.changeRes(this.pantsSprite, data.equips[InventoryManager_1.default.TROUSERS]);
        this.changeRes(this.cloakSprite, data.equips[InventoryManager_1.default.CLOAK]);
        this.changeRes(this.weaponSprite, data.equips[InventoryManager_1.default.WEAPON]);
        this.changeRes(this.remoteSprite, data.equips[InventoryManager_1.default.REMOTE], "anim0");
        this.changeRes(this.shieldSprite, data.equips[InventoryManager_1.default.SHIELD]);
        this.changeRes(this.clothesSprite, data.equips[InventoryManager_1.default.CLOTHES], "anim0");
        this.changeRes(this.glovesSprite1, data.equips[InventoryManager_1.default.GLOVES]);
        this.changeRes(this.glovesSprite2, data.equips[InventoryManager_1.default.GLOVES]);
        this.changeRes(this.shoesSprite1, data.equips[InventoryManager_1.default.SHOES]);
        this.changeRes(this.shoesSprite2, data.equips[InventoryManager_1.default.SHOES]);
        this.resetSpriteSize(this.weaponSprite);
        this.resetSpriteSize(this.remoteSprite);
        this.resetSpriteSize(this.shieldSprite);
      };
      PickAvatar.prototype.resetSpriteSize = function(sprite) {
        if (sprite.spriteFrame) {
          sprite.node.width = sprite.spriteFrame.getOriginalSize().width;
          sprite.node.height = sprite.spriteFrame.getOriginalSize().height;
        }
      };
      PickAvatar.prototype.changeRes = function(sprite, resName, subfix) {
        if (!sprite) return false;
        var spriteFrame = Logic_1.default.spriteFrameRes(resName);
        subfix && Logic_1.default.spriteFrameRes(resName + subfix) && (spriteFrame = Logic_1.default.spriteFrameRes(resName + subfix));
        sprite.spriteFrame = spriteFrame || null;
      };
      PickAvatar.prototype.startGame = function() {
        if (this.loadingBackground.active) return;
        Logic_1.default.profileManager.clearData();
        Logic_1.default.resetData(Logic_1.default.jumpChapter);
        Logic_1.default.jumpChapter = 0;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.playerData.AvatarData = this.data.clone();
        this.addPorfessionEquipment();
        cc.director.loadScene("loading");
      };
      PickAvatar.prototype.backToHome = function() {
        cc.director.loadScene("start");
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      PickAvatar.prototype.addPorfessionEquipment = function() {
        for (var key in Logic_1.default.inventoryManager.equips) Logic_1.default.inventoryManager.equips[key].valueCopy(EquipmentManager_1.default.getNewEquipData(this.data.professionData.equips[key] ? this.data.professionData.equips[key] : ""));
      };
      PickAvatar.prototype.addBrightnessBar = function() {
        var prefab = cc.instantiate(this.brightnessBarPrefab);
        var script = prefab.getComponent(BrightnessBar_1.default);
        this.attributeLayout.addChild(prefab);
        return script;
      };
      PickAvatar.prototype.addAttributeSelector = function(title, nameList, defaultIndex) {
        var prefab = cc.instantiate(this.selectorPrefab);
        var script = prefab.getComponent(AttributeSelector_1.default);
        this.attributeLayout.addChild(prefab);
        script.init(title, nameList, defaultIndex);
        return script;
      };
      PickAvatar.prototype.addPaletteSelector = function(colorType, defaultIndex) {
        var prefab = cc.instantiate(this.palettePrefab);
        var script = prefab.getComponent(PaletteSelector_1.default);
        this.attributeLayout.addChild(prefab);
        script.init(colorType, defaultIndex);
        return script;
      };
      PickAvatar.prototype.update = function(dt) {
        if (this.loadingManager.isSpriteFramesLoaded(LoadingManager_1.default.KEY_TEXTURES) && this.loadingManager.isSpriteFramesLoaded(LoadingManager_1.default.KEY_NPC) && this.loadingManager.isProfessionLoaded && this.loadingManager.isEquipmentLoaded && this.loadingManager.isSkillsLoaded && this.loadingManager.isItemsLoaded && this.loadingManager.isSuitsLoaded) {
          this.loadingManager.reset();
          this.show();
        }
        if (this.isShow && this.isTimeDelay(dt) && this.randomTouched) {
          this.randomButton.angle = 0;
          cc.tween(this.randomButton).to(.2, {
            angle: 360
          }).start();
          this.ButtonRandom();
        }
      };
      PickAvatar.prototype.isTimeDelay = function(dt) {
        this.delayTime += dt;
        if (this.delayTime > .2) {
          this.delayTime = 0;
          return true;
        }
        return false;
      };
      PickAvatar.prototype.ButtonSwitch = function() {
        if (this.loadingBackground.active) return;
        this.randomLayout.active = !this.randomLayout.active;
        this.attributeLayout.active = !this.attributeLayout.active;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      PickAvatar.prototype.ButtonRandom = function() {
        if (this.loadingBackground.active) return;
        this.organizationSelector.selectRandom();
        this.professionSelector.selectRandom();
        this.skinSelector.selectRandom();
        this.hairSelector.selectRandom();
        this.hairColorSelector.selectRandom();
        this.eyesSelector.selectRandom();
        this.eyesColorSelector.selectRandom();
        this.faceSelector.selectRandom();
        this.faceColorSelector.selectRandom();
        this.petSelector.selectRandom();
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      PickAvatar.prototype.ButtonSelect = function(event, isLeft) {
        if (this.loadingBackground.active) return;
        this.professionSelector.selectNext(0 == isLeft);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
      };
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "loadingBackground", void 0);
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "avatarTable", void 0);
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "attributeLayout", void 0);
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "randomLayout", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelTitle", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelName", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelDesc", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelSkillName", void 0);
      __decorate([ property(cc.Label) ], PickAvatar.prototype, "randomLabelSkillDesc", void 0);
      __decorate([ property(cc.Node) ], PickAvatar.prototype, "randomButton", void 0);
      __decorate([ property(cc.Prefab) ], PickAvatar.prototype, "selectorPrefab", void 0);
      __decorate([ property(cc.Prefab) ], PickAvatar.prototype, "brightnessBarPrefab", void 0);
      __decorate([ property(cc.Prefab) ], PickAvatar.prototype, "palettePrefab", void 0);
      PickAvatar = __decorate([ ccclass ], PickAvatar);
      return PickAvatar;
    }(cc.Component);
    exports.default = PickAvatar;
    cc._RF.pop();
  }, {
    "../Data/AttributeData": "AttributeData",
    "../Data/AvatarData": "AvatarData",
    "../Logic": "Logic",
    "../Manager/EquipmentManager": "EquipmentManager",
    "../Manager/InventoryManager": "InventoryManager",
    "../Manager/LoadingManager": "LoadingManager",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./AttributeSelector": "AttributeSelector",
    "./BrightnessBar": "BrightnessBar",
    "./PaletteSelector": "PaletteSelector"
  } ],
  PlayerAvatar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7621b1Y+05Jj7j6YdAgY785", "PlayerAvatar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var InventoryManager_1 = require("./Manager/InventoryManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerAvatar = function(_super) {
      __extends(PlayerAvatar, _super);
      function PlayerAvatar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.dir = PlayerAvatar_1.DIR_RIGHT;
        _this.status = PlayerAvatar_1.STATE_IDLE;
        _this.cloakSprite = null;
        _this.legLeftSprite = null;
        _this.legRightSprite = null;
        _this.footLeftSprite = null;
        _this.footRightSprite = null;
        _this.shoesLeftSprite = null;
        _this.shoesRightSprite = null;
        _this.handLeftSprite = null;
        _this.glovesLeftSprite = null;
        _this.handRightSprite = null;
        _this.glovesRightSprite = null;
        _this.headSprite = null;
        _this.faceSprite = null;
        _this.eyesSprite = null;
        _this.hairSprite = null;
        _this.helmetSprite = null;
        _this.bodySprite = null;
        _this.pantsSprite = null;
        _this.clothesSprite = null;
        _this.avatarNode = null;
        _this.spriteNode = null;
        _this.idlehair = [ 0, 1 ];
        return _this;
      }
      PlayerAvatar_1 = PlayerAvatar;
      PlayerAvatar.prototype.onLoad = function() {
        this.init();
      };
      PlayerAvatar.prototype.init = function() {
        var _this = this;
        this.data = Logic_1.default.playerData.AvatarData.clone();
        this.anim = this.getComponent(cc.Animation);
        this.avatarNode = this.getSpriteChildNode([ "sprite", "avatar" ]);
        this.spriteNode = this.getSpriteChildNode([ "sprite" ]);
        this.cloakSprite = this.getSpriteChildSprite([ "sprite", "cloak" ]);
        this.legLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legleft" ]);
        this.legRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legright" ]);
        this.footLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legleft", "foot" ]);
        this.footRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legright", "foot" ]);
        this.shoesLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legleft", "foot", "shoes" ]);
        this.shoesRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "legright", "foot", "shoes" ]);
        this.handLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "handleft" ]);
        this.handRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "handright" ]);
        this.glovesLeftSprite = this.getSpriteChildSprite([ "sprite", "avatar", "handleft", "gloves" ]);
        this.glovesRightSprite = this.getSpriteChildSprite([ "sprite", "avatar", "handright", "gloves" ]);
        this.headSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head" ]);
        this.faceSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head", "face" ]);
        this.eyesSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head", "eyes" ]);
        this.hairSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head", "hair" ]);
        this.helmetSprite = this.getSpriteChildSprite([ "sprite", "avatar", "head", "helmet" ]);
        this.bodySprite = this.getSpriteChildSprite([ "sprite", "avatar", "body" ]);
        this.pantsSprite = this.getSpriteChildSprite([ "sprite", "avatar", "body", "pants" ]);
        this.clothesSprite = this.getSpriteChildSprite([ "sprite", "avatar", "body", "clothes" ]);
        this.headSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.faceSprite.node.color = cc.Color.WHITE.fromHEX(this.data.faceColor);
        this.eyesSprite.node.color = cc.Color.WHITE.fromHEX(this.data.eyesColor);
        this.hairSprite.node.color = cc.Color.WHITE.fromHEX(this.data.hairColor);
        this.bodySprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.legLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.legRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.footLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.footRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.handLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.handRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        this.hairSprite.node.stopAllActions();
        this.changeAvatarByDir(PlayerAvatar_1.DIR_RIGHT);
        var index = 0;
        this.schedule(function() {
          _this.hairSprite.spriteFrame = Logic_1.default.spriteFrameRes(_this.data.hairResName + _this.idlehair[index++]);
          index > 1 && (index = 0);
        }, .2, cc.macro.REPEAT_FOREVER, .1);
      };
      PlayerAvatar.prototype.getSpriteChildSprite = function(childNames) {
        var node = this.node;
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      PlayerAvatar.prototype.getSpriteChildNode = function(childNames) {
        var node = this.node;
        for (var _i = 0, childNames_2 = childNames; _i < childNames_2.length; _i++) {
          var name = childNames_2[_i];
          node = node.getChildByName(name);
        }
        return node;
      };
      PlayerAvatar.prototype.showHandsWithInteract = function(flag, isLift) {
        this.handLeftSprite.node.scaleY = .2;
        this.handRightSprite.node.scaleY = .2;
        this.handLeftSprite.node.opacity = 0;
        this.handRightSprite.node.opacity = 0;
        this.handLeftSprite.node.y = 8;
        this.handRightSprite.node.y = 8;
        if (flag) {
          this.handLeftSprite.node.opacity = 255;
          this.handRightSprite.node.opacity = 255;
          if (isLift) {
            this.handLeftSprite.node.scaleY = .3;
            this.handRightSprite.node.scaleY = .3;
            this.handLeftSprite.node.y = 16;
            this.handRightSprite.node.y = 16;
          }
        }
      };
      PlayerAvatar.prototype.playAnim = function(status, dir) {
        this.anim || this.init();
        switch (status) {
         case PlayerAvatar_1.STATE_IDLE:
          this.status != status && PlayerAvatar_1.STATE_DIE != this.status && this.playIdle(dir);
          break;

         case PlayerAvatar_1.STATE_WALK:
          this.status == status && this.dir == dir || PlayerAvatar_1.STATE_ATTACK == this.status || PlayerAvatar_1.STATE_DIE == this.status || this.playWalk(dir);
          break;

         case PlayerAvatar_1.STATE_ATTACK:
          PlayerAvatar_1.STATE_DIE != this.status && this.playAttack(dir);
          break;

         case PlayerAvatar_1.STATE_DIE:
          PlayerAvatar_1.STATE_DIE != this.status && this.playDie();
          break;

         case PlayerAvatar_1.STATE_FALL:
          PlayerAvatar_1.STATE_DIE != this.status && this.anim.play("AvatarFall");
          break;

         case PlayerAvatar_1.STATE_JUMP:
          PlayerAvatar_1.STATE_DIE != this.status && this.anim.play("AvatarJump");
        }
        this.status = status;
        this.dir = dir;
      };
      PlayerAvatar.prototype.changeLegColor = function(isLong, colorHex) {
        if (isLong) {
          this.legLeftSprite.node.color = cc.Color.WHITE.fromHEX(colorHex);
          this.legRightSprite.node.color = cc.Color.WHITE.fromHEX(colorHex);
          this.footLeftSprite.node.color = cc.Color.WHITE.fromHEX(colorHex);
          this.footRightSprite.node.color = cc.Color.WHITE.fromHEX(colorHex);
        } else {
          this.legLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
          this.legRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
          this.footLeftSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
          this.footRightSprite.node.color = cc.Color.WHITE.fromHEX(this.data.skinColor);
        }
      };
      PlayerAvatar.prototype.hitLight = function(isHit) {
        this.bodySprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.headSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.hairSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.faceSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.eyesSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.handLeftSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.handRightSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.legLeftSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.legRightSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.footLeftSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
        this.footLeftSprite.getMaterial(0).setProperty("addColor", isHit ? cc.color(200, 200, 200, 100) : cc.Color.TRANSPARENT);
      };
      PlayerAvatar.prototype.changeEquipDirSpriteFrame = function(inventoryManager, dir) {
        var helmet = inventoryManager.equips[InventoryManager_1.default.HELMET];
        var clothes = inventoryManager.equips[InventoryManager_1.default.CLOTHES];
        this.cloakSprite.node.zIndex = 0 == dir ? this.avatarNode.zIndex + 1 : this.avatarNode.zIndex - 1;
        0 == dir && Logic_1.default.spriteFrameRes(helmet.img + "anim2") ? this.helmetSprite.spriteFrame = Logic_1.default.spriteFrameRes(helmet.img + "anim2") : 1 == dir && Logic_1.default.spriteFrameRes(helmet.img + "anim1") ? this.helmetSprite.spriteFrame = Logic_1.default.spriteFrameRes(helmet.img + "anim1") : this.helmetSprite.spriteFrame = Logic_1.default.spriteFrameRes(helmet.img + "anim0");
        0 == dir && Logic_1.default.spriteFrameRes(clothes.img + "anim2") ? this.clothesSprite.spriteFrame = Logic_1.default.spriteFrameRes(clothes.img + "anim2") : 1 == dir && Logic_1.default.spriteFrameRes(clothes.img + "anim1") ? this.clothesSprite.spriteFrame = Logic_1.default.spriteFrameRes(clothes.img + "anim1") : this.clothesSprite.spriteFrame = Logic_1.default.spriteFrameRes(clothes.img + "anim0");
      };
      PlayerAvatar.prototype.playDie = function() {
        this.anim.play("AvatarDie");
      };
      PlayerAvatar.prototype.playIdle = function(dir) {
        this.anim.play("AvatarIdle");
      };
      PlayerAvatar.prototype.changeAvatarByDir = function(dir, isFaceUp) {
        var eyesprefix = this.data.eyesResName;
        var faceprefix = this.data.faceResName;
        switch (dir) {
         case PlayerAvatar_1.DIR_UP:
          this.idlehair = [ 2, 3 ];
          this.eyesSprite.spriteFrame = null;
          this.faceSprite.spriteFrame = null;
          break;

         case PlayerAvatar_1.DIR_DOWN:
          this.idlehair = [ 0, 1 ];
          this.eyesSprite.spriteFrame = Logic_1.default.spriteFrameRes(eyesprefix);
          this.faceSprite.spriteFrame = Logic_1.default.spriteFrameRes(faceprefix);
          break;

         case PlayerAvatar_1.DIR_LEFT:
         case PlayerAvatar_1.DIR_RIGHT:
          this.idlehair = [ 4, 5 ];
          this.eyesSprite.spriteFrame = Logic_1.default.spriteFrameRes("side" + eyesprefix);
          this.faceSprite.spriteFrame = Logic_1.default.spriteFrameRes("side" + faceprefix);
        }
        this.hairSprite.spriteFrame = Logic_1.default.spriteFrameRes(this.data.hairResName + this.idlehair[0]);
        if (4 != dir) {
          this.cloakSprite.node.zIndex = 0 == dir ? this.avatarNode.zIndex + 1 : this.avatarNode.zIndex - 1;
          this.handRightSprite.node.zIndex = 0 == dir ? this.bodySprite.node.zIndex - 1 : this.bodySprite.node.zIndex + 1;
        }
      };
      PlayerAvatar.prototype.playWalk = function(dir) {
        this.anim.play(dir == PlayerAvatar_1.DIR_UP || dir == PlayerAvatar_1.DIR_DOWN ? "AvatarWalkVertical" : "AvatarWalkHorizontal");
      };
      PlayerAvatar.prototype.playAttack = function(dir) {
        var _this = this;
        this.anim.play(dir == PlayerAvatar_1.DIR_UP || dir == PlayerAvatar_1.DIR_DOWN ? "AvatarAttackVertical" : "AvatarAttackHorizontal");
        var offsetX = 0;
        var offsetY = 0;
        switch (dir) {
         case PlayerAvatar_1.DIR_UP:
          offsetY = -16;
          break;

         case PlayerAvatar_1.DIR_DOWN:
          offsetY = 16;
          break;

         case PlayerAvatar_1.DIR_LEFT:
         case PlayerAvatar_1.DIR_RIGHT:
          offsetX = -16;
        }
        cc.tween(this.spriteNode).stop();
        cc.tween(this.spriteNode).to(.1, {
          position: cc.v3(offsetX, offsetY)
        }).to(.1, {
          position: cc.v3(-offsetX, -offsetY)
        }).to(.1, {
          position: cc.v3(0, 0)
        }).delay(.1).call(function() {
          _this.playAnim(PlayerAvatar_1.STATE_IDLE, dir);
        }).start();
      };
      PlayerAvatar.prototype.start = function() {};
      var PlayerAvatar_1;
      PlayerAvatar.DIR_UP = 0;
      PlayerAvatar.DIR_DOWN = 1;
      PlayerAvatar.DIR_LEFT = 2;
      PlayerAvatar.DIR_RIGHT = 3;
      PlayerAvatar.STATE_IDLE = 0;
      PlayerAvatar.STATE_WALK = 1;
      PlayerAvatar.STATE_ATTACK = 2;
      PlayerAvatar.STATE_FALL = 3;
      PlayerAvatar.STATE_DIE = 4;
      PlayerAvatar.STATE_JUMP = 5;
      PlayerAvatar = PlayerAvatar_1 = __decorate([ ccclass ], PlayerAvatar);
      return PlayerAvatar;
    }(cc.Component);
    exports.default = PlayerAvatar;
    cc._RF.pop();
  }, {
    "./Logic": "Logic",
    "./Manager/InventoryManager": "InventoryManager"
  } ],
  PlayerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "802a53ZqslNorozVvKYFivM", "PlayerData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EquipmentData_1 = require("./EquipmentData");
    var DamageData_1 = require("./DamageData");
    var StatusData_1 = require("./StatusData");
    var CommonData_1 = require("./CommonData");
    var Random_1 = require("../Utils/Random");
    var AvatarData_1 = require("./AvatarData");
    var Shield_1 = require("../Shield");
    var OilGoldData_1 = require("./OilGoldData");
    var TalentData_1 = require("./TalentData");
    var PlayerData = function() {
      function PlayerData() {
        this.name = "";
        this.pos = cc.v3(5, 5);
        this.currentHealth = PlayerData.DEFAULT_HEALTH;
        this.currentDream = PlayerData.DEFAULT_DREAM;
        this.equipmentTotalData = new EquipmentData_1.default();
        this.statusTotalData = new StatusData_1.default();
        this.avatarData = new AvatarData_1.default();
        this.oilGoldData = new OilGoldData_1.default();
        this.organizationTalentData = new TalentData_1.default();
        this.professionTalentData = new TalentData_1.default();
        this.statusList = new Array();
        this.common = new CommonData_1.default();
        this.common.maxHealth = PlayerData.DEFAULT_HEALTH;
        this.common.moveSpeed = PlayerData.DEFAULT_SPEED;
        this.common.damageMin = PlayerData.DEFAULT_ATTACK;
        this.common.damageBack = PlayerData.DEFAULT_BACK_ATTACK;
        this.common.maxDream = PlayerData.DEFAULT_DREAM;
        this.shadowList = [];
      }
      Object.defineProperty(PlayerData.prototype, "ShadowList", {
        get: function() {
          return this.shadowList;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "StatusList", {
        get: function() {
          return this.statusList;
        },
        set: function(list) {
          if (!list) return;
          this.statusList = new Array();
          for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var s = list_1[_i];
            var data = new StatusData_1.default();
            data.valueCopy(s);
            this.statusList.push(data);
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "EquipmentTotalData", {
        get: function() {
          return this.equipmentTotalData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "StatusTotalData", {
        get: function() {
          return this.statusTotalData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "AvatarData", {
        get: function() {
          return this.avatarData;
        },
        set: function(data) {
          this.avatarData = data;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "OilGoldData", {
        get: function() {
          return this.oilGoldData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "OrganizationTalentData", {
        get: function() {
          return this.organizationTalentData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "ProfessionTalentData", {
        get: function() {
          return this.professionTalentData;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PlayerData.prototype, "FinalCommon", {
        get: function() {
          var data = new CommonData_1.default().add(this.common).add(this.statusTotalData.Common).add(this.equipmentTotalData.Common).add(this.avatarData.professionData.Common).add(this.oilGoldData.Common);
          return data;
        },
        enumerable: false,
        configurable: true
      });
      PlayerData.prototype.valueCopy = function(data) {
        this.common.valueCopy(data.common);
        this.pos = data.pos ? cc.v3(data.pos.x, data.pos.y) : cc.v3(4, 7);
        this.name = data.name ? data.name : "";
        this.equipmentTotalData.valueCopy(data.equipmentTotalData);
        this.statusTotalData.valueCopy(data.statusTotalData);
        this.avatarData.valueCopy(data.avatarData);
        this.oilGoldData.valueCopy(data.oilGoldData);
        this.StatusList = data.statusList;
        this.currentHealth = data.currentHealth ? data.currentHealth : 0;
        this.currentDream = data.currentDream ? data.currentDream : 0;
        this.common.maxHealth = data.common.maxHealth ? data.common.maxHealth : 0;
        this.common.moveSpeed = data.common.moveSpeed ? data.common.moveSpeed : 0;
        this.shadowList = data.shadowList;
      };
      PlayerData.prototype.clone = function() {
        var e = new PlayerData();
        e.common = this.common.clone();
        e.pos = this.pos;
        e.name = this.name;
        e.currentHealth = this.currentHealth;
        e.currentDream = this.currentDream;
        e.equipmentTotalData = this.equipmentTotalData.clone();
        e.statusTotalData = this.statusTotalData.clone();
        e.avatarData = this.avatarData.clone();
        e.oilGoldData = this.oilGoldData.clone();
        e.organizationTalentData = this.organizationTalentData.clone();
        e.professionTalentData = this.professionTalentData.clone();
        e.StatusList = this.statusList;
        e.shadowList = this.shadowList;
        return e;
      };
      PlayerData.prototype.getFinalAttackPoint = function() {
        var data = this.FinalCommon;
        var dd = new DamageData_1.default();
        var damageMin = data.damageMin;
        var damageMax = data.damageMax;
        var chance = data.criticalStrikeRate / 100;
        var isCritical = Random_1.default.rand() < chance;
        var attack = isCritical ? damageMin + damageMax : damageMin;
        attack < 0 && (attack = 0);
        dd.isCriticalStrike = isCritical;
        dd.physicalDamage = attack;
        dd.realDamage = data.realDamage;
        dd.magicDamage = data.magicDamage;
        this.avatarData.organizationIndex == AvatarData_1.default.TECH && (dd.physicalDamage += .5 * this.currentDream);
        return dd;
      };
      PlayerData.prototype.getFinalRemoteDamage = function() {
        var data = this.FinalCommon;
        var dd = new DamageData_1.default();
        var remoteDamage = data.remoteDamage;
        this.avatarData.organizationIndex == AvatarData_1.default.HUNTER && (remoteDamage += .5 * this.currentDream);
        var chance = data.remoteCritRate / 100;
        var isCritical = Random_1.default.rand() < chance;
        var attack = isCritical ? remoteDamage + remoteDamage : remoteDamage;
        attack < 0 && (attack = 0);
        dd.physicalDamage = attack;
        dd.isCriticalStrike = isCritical;
        return dd;
      };
      PlayerData.prototype.getDamage = function(damageData, blockLevel) {
        var data = this.FinalCommon;
        var finalDamageData = damageData.clone();
        var defence = data.defence;
        var defenceMagic = data.magicDefence / 100;
        var blockPhysical = data.blockPhysical / 100;
        var blockMagic = data.blockMagic / 100;
        finalDamageData.physicalDamage = defence >= 0 ? finalDamageData.physicalDamage * (1 - .06 * defence / (.06 * defence + 1)) : finalDamageData.physicalDamage * (2 - Math.pow(.94, -defence));
        finalDamageData.magicDamage = finalDamageData.magicDamage * (1 - defenceMagic);
        if (finalDamageData.physicalDamage > 0 || finalDamageData.magicDamage > 0) if (blockLevel == Shield_1.default.BLOCK_NORMAL) {
          finalDamageData.physicalDamage = finalDamageData.physicalDamage * (1 - blockPhysical);
          finalDamageData.magicDamage = finalDamageData.magicDamage * (1 - blockMagic);
        } else if (blockLevel == Shield_1.default.BLOCK_PARRY) {
          finalDamageData.physicalDamage = 0;
          finalDamageData.magicDamage = 0;
          finalDamageData.realDamage = 0;
        }
        return finalDamageData;
      };
      PlayerData.prototype.getLifeDrain = function() {
        var data = this.FinalCommon;
        var chance = data.criticalStrikeRate / 100;
        var drainRate = data.lifeDrain / 100;
        var drain = 0;
        if (Random_1.default.rand() < drainRate) {
          drain = .2;
          Random_1.default.rand() < chance && (drain = 1);
        }
        return drain;
      };
      PlayerData.prototype.getMoveSpeed = function() {
        var data = this.FinalCommon;
        var speed = data.moveSpeed;
        speed > 2 * PlayerData.DEFAULT_SPEED && (speed = 2 * PlayerData.DEFAULT_SPEED);
        speed < 2 * -PlayerData.DEFAULT_SPEED && (speed = 2 * -PlayerData.DEFAULT_SPEED);
        return speed;
      };
      PlayerData.prototype.getHealth = function() {
        var data = this.FinalCommon;
        var rate = 1;
        var maxHealth = data.maxHealth;
        if (!(maxHealth > 0)) return cc.v3(1, 1);
        rate = this.currentHealth / maxHealth;
        return cc.v3(maxHealth * rate, maxHealth);
      };
      PlayerData.prototype.getDream = function() {
        var data = this.FinalCommon;
        var rate = 1;
        var maxDream = data.maxDream;
        if (!(maxDream > 0)) return cc.v3(1, 1);
        rate = this.currentDream / maxDream;
        return cc.v3(maxDream * rate, maxDream);
      };
      PlayerData.DEFAULT_HEALTH = 10;
      PlayerData.DEFAULT_SPEED = 350;
      PlayerData.DEFAULT_ATTACK = 1;
      PlayerData.DEFAULT_BACK_ATTACK = 0;
      PlayerData.DEFAULT_DREAM = 5;
      return PlayerData;
    }();
    exports.default = PlayerData;
    cc._RF.pop();
  }, {
    "../Shield": "Shield",
    "../Utils/Random": "Random",
    "./AvatarData": "AvatarData",
    "./CommonData": "CommonData",
    "./DamageData": "DamageData",
    "./EquipmentData": "EquipmentData",
    "./OilGoldData": "OilGoldData",
    "./StatusData": "StatusData",
    "./TalentData": "TalentData"
  } ],
  PlayerInfoDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15316LuMnlLl6y6PlDqoReo", "PlayerInfoDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AvatarData_1 = require("../Data/AvatarData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerInfoDialog = function(_super) {
      __extends(PlayerInfoDialog, _super);
      function PlayerInfoDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.attack = null;
        _this.organization = null;
        _this.criticalStrikeRate = null;
        _this.defence = null;
        _this.lifeDrain = null;
        _this.damageBack = null;
        _this.moveSpeed = null;
        _this.attackSpeed = null;
        _this.dodge = null;
        _this.health = null;
        _this.dream = null;
        _this.realDamage = null;
        _this.realRate = null;
        _this.magicDamage = null;
        _this.magicDefence = null;
        _this.iceRate = null;
        _this.fireRate = null;
        _this.lighteningRate = null;
        _this.toxicRate = null;
        _this.curseRate = null;
        _this.remoteDamage = null;
        _this.remoteCritRate = null;
        _this.remoteCooldown = null;
        _this.isShow = false;
        _this.layout = null;
        return _this;
      }
      PlayerInfoDialog.prototype.onLoad = function() {
        this.attack = this.node.getChildByName("layout").getChildByName("attack").getChildByName("label").getComponent(cc.Label);
        this.organization = this.node.getChildByName("layout").getChildByName("organization").getChildByName("label").getComponent(cc.Label);
        this.criticalStrikeRate = this.node.getChildByName("layout").getChildByName("criticalStrikeRate").getChildByName("label").getComponent(cc.Label);
        this.defence = this.node.getChildByName("layout").getChildByName("defence").getChildByName("label").getComponent(cc.Label);
        this.lifeDrain = this.node.getChildByName("layout").getChildByName("lifeDrain").getChildByName("label").getComponent(cc.Label);
        this.damageBack = this.node.getChildByName("layout").getChildByName("damageBack").getChildByName("label").getComponent(cc.Label);
        this.moveSpeed = this.node.getChildByName("layout").getChildByName("moveSpeed").getChildByName("label").getComponent(cc.Label);
        this.attackSpeed = this.node.getChildByName("layout").getChildByName("attackSpeed").getChildByName("label").getComponent(cc.Label);
        this.dodge = this.node.getChildByName("layout").getChildByName("dodge").getChildByName("label").getComponent(cc.Label);
        this.health = this.node.getChildByName("layout").getChildByName("health").getChildByName("label").getComponent(cc.Label);
        this.dream = this.node.getChildByName("layout").getChildByName("dream").getChildByName("label").getComponent(cc.Label);
        this.realDamage = this.node.getChildByName("layout").getChildByName("realDamage").getChildByName("label").getComponent(cc.Label);
        this.realRate = this.node.getChildByName("layout").getChildByName("realRate").getChildByName("label").getComponent(cc.Label);
        this.magicDamage = this.node.getChildByName("layout").getChildByName("magicDamage").getChildByName("label").getComponent(cc.Label);
        this.magicDefence = this.node.getChildByName("layout").getChildByName("magicDefence").getChildByName("label").getComponent(cc.Label);
        this.iceRate = this.node.getChildByName("layout").getChildByName("iceRate").getChildByName("label").getComponent(cc.Label);
        this.fireRate = this.node.getChildByName("layout").getChildByName("fireRate").getChildByName("label").getComponent(cc.Label);
        this.lighteningRate = this.node.getChildByName("layout").getChildByName("lighteningRate").getChildByName("label").getComponent(cc.Label);
        this.toxicRate = this.node.getChildByName("layout").getChildByName("toxicRate").getChildByName("label").getComponent(cc.Label);
        this.curseRate = this.node.getChildByName("layout").getChildByName("curseRate").getChildByName("label").getComponent(cc.Label);
        this.remoteCooldown = this.node.getChildByName("layout").getChildByName("remoteCooldown").getChildByName("label").getComponent(cc.Label);
        this.remoteCritRate = this.node.getChildByName("layout").getChildByName("remoteCritRate").getChildByName("label").getComponent(cc.Label);
        this.remoteDamage = this.node.getChildByName("layout").getChildByName("remoteDamage").getChildByName("label").getComponent(cc.Label);
        this.layout = this.node.getChildByName("layout");
        this.addSpriteTouchEvent();
      };
      PlayerInfoDialog.prototype.start = function() {};
      PlayerInfoDialog.prototype.refreshDialog = function(playerData, equipmentData, statusData) {
        if (!this.attack) return;
        var baseCommonData = playerData.Common.clone().add(playerData.AvatarData.professionData.Common);
        this.organization.string = AvatarData_1.default.ORGANIZATION[playerData.AvatarData.organizationIndex];
        this.attack.string = this.getInfo(baseCommonData.damageMin, equipmentData.Common.damageMin, statusData.Common.damageMin) + "    MAX:" + this.getInfo(baseCommonData.damageMax, equipmentData.Common.damageMax, statusData.Common.damageMax);
        this.criticalStrikeRate.string = this.getInfo(baseCommonData.criticalStrikeRate, equipmentData.Common.criticalStrikeRate, statusData.Common.criticalStrikeRate, true);
        this.defence.string = this.getInfo(baseCommonData.defence, equipmentData.Common.defence, statusData.Common.defence);
        this.lifeDrain.string = this.getInfo(baseCommonData.lifeDrain, equipmentData.Common.lifeDrain, statusData.Common.lifeDrain, true);
        this.damageBack.string = this.getInfo(baseCommonData.damageBack, equipmentData.Common.damageBack, statusData.Common.damageBack);
        this.moveSpeed.string = this.getInfo(baseCommonData.moveSpeed, equipmentData.Common.moveSpeed, statusData.Common.moveSpeed);
        this.attackSpeed.string = this.getInfo(baseCommonData.attackSpeed, equipmentData.Common.attackSpeed, statusData.Common.attackSpeed);
        this.dodge.string = this.getInfo(baseCommonData.dodge, equipmentData.Common.dodge, statusData.Common.dodge, true);
        this.health.string = playerData.currentHealth.toFixed(1).replace(".0", "") + "/" + this.getInfo(baseCommonData.maxHealth, equipmentData.Common.maxHealth, statusData.Common.maxHealth);
        this.dream.string = playerData.currentDream.toFixed(1).replace(".0", "") + "/" + this.getInfo(baseCommonData.maxDream, equipmentData.Common.maxDream, statusData.Common.maxDream);
        this.realDamage.string = this.getInfo(baseCommonData.realDamage, equipmentData.Common.realDamage, statusData.Common.realDamage);
        this.realRate.string = this.getInfo(baseCommonData.realRate, equipmentData.Common.realRate, statusData.Common.realRate, true);
        this.magicDamage.string = this.getInfo(baseCommonData.magicDamage, equipmentData.Common.magicDamage, statusData.Common.magicDamage);
        this.magicDefence.string = this.getInfo(baseCommonData.magicDefence, equipmentData.Common.magicDefence, statusData.Common.magicDefence, true);
        this.iceRate.string = this.getInfo(baseCommonData.iceRate, equipmentData.Common.iceRate, statusData.Common.iceRate, true);
        this.fireRate.string = this.getInfo(baseCommonData.fireRate, equipmentData.Common.fireRate, statusData.Common.fireRate, true);
        this.lighteningRate.string = this.getInfo(baseCommonData.lighteningRate, equipmentData.Common.lighteningRate, statusData.Common.lighteningRate, true);
        this.toxicRate.string = this.getInfo(baseCommonData.toxicRate, equipmentData.Common.toxicRate, statusData.Common.toxicRate, true);
        this.curseRate.string = this.getInfo(baseCommonData.curseRate, equipmentData.Common.curseRate, statusData.Common.curseRate, true);
        this.remoteCritRate.string = this.getInfo(baseCommonData.remoteCritRate, equipmentData.Common.remoteCritRate, statusData.Common.remoteCritRate, true);
        this.remoteDamage.string = this.getInfo(baseCommonData.remoteDamage, equipmentData.Common.remoteDamage, statusData.Common.remoteDamage);
        this.remoteCooldown.string = this.getInfo(baseCommonData.remoteCooldown, equipmentData.Common.remoteCooldown, statusData.Common.remoteCooldown);
      };
      PlayerInfoDialog.prototype.getInfo = function(base, equip, status, isPercent) {
        var s = "" + (base + equip + status).toFixed(1).replace(".0", "");
        isPercent && (s += "%");
        if (equip > 0) {
          s += " E:+" + equip.toFixed(1).replace(".0", "");
          isPercent && (s += "%");
        } else if (equip < 0) {
          s += " E:" + equip.toFixed(1).replace(".0", "");
          isPercent && (s += "%");
        }
        if (status > 0) {
          s += " S:+" + status.toFixed(1).replace(".0", "");
          isPercent && (s += "%");
        } else if (status < 0) {
          s += " S:" + status.toFixed(1).replace(".0", "");
          isPercent && (s += "%");
        }
        return s;
      };
      PlayerInfoDialog.prototype.addSpriteTouchEvent = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_START, function() {
          _this.isShow = true;
        });
        this.node.on(cc.Node.EventType.TOUCH_END, function() {
          _this.isShow = false;
        });
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          _this.isShow = false;
        });
      };
      PlayerInfoDialog.prototype.update = function(dt) {
        this.layout.active = this.isShow;
      };
      PlayerInfoDialog = __decorate([ ccclass ], PlayerInfoDialog);
      return PlayerInfoDialog;
    }(cc.Component);
    exports.default = PlayerInfoDialog;
    cc._RF.pop();
  }, {
    "../Data/AvatarData": "AvatarData"
  } ],
  PlayerWeapon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3affyq+pdEIqRjlXOazN5E", "PlayerWeapon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MeleeWeapon_1 = require("./MeleeWeapon");
    var Shooter_1 = require("./Shooter");
    var InventoryManager_1 = require("./Manager/InventoryManager");
    var PlayerAvatar_1 = require("./PlayerAvatar");
    var MeleeShadowWeapon_1 = require("./MeleeShadowWeapon");
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerWeapon = function(_super) {
      __extends(PlayerWeapon, _super);
      function PlayerWeapon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.player = null;
        _this.meleeWeapon = null;
        _this.shadowWeapon = null;
        _this.shooter = null;
        _this.isLeftHand = false;
        _this.isHeavyRemotoAttacking = false;
        _this.isShadow = false;
        _this.selfDefaultPos = cc.v3(-15, 40);
        _this.otherDefaultPos = cc.v3(20, 40);
        _this.remoteIntervalTime = 0;
        return _this;
      }
      PlayerWeapon.prototype.init = function(player, isLeftHand, isShadow) {
        this.isShadow = isShadow;
        this.isLeftHand = isLeftHand;
        this.player = player;
        this.initMelee();
        this.initShooter();
        if (isLeftHand) {
          this.selfDefaultPos = cc.v3(-15, 40);
          this.otherDefaultPos = cc.v3(20, 40);
        } else {
          this.otherDefaultPos = cc.v3(-15, 40);
          this.selfDefaultPos = cc.v3(20, 40);
        }
      };
      PlayerWeapon.prototype.initMelee = function() {
        if (this.isShadow) {
          this.shadowWeapon = this.getComponentInChildren(MeleeShadowWeapon_1.default);
          this.shadowWeapon.init(this.player, this.isLeftHand ? this.player.weaponLeft.meleeWeapon : this.player.weaponRight.meleeWeapon);
        } else {
          this.meleeWeapon = this.getComponentInChildren(MeleeWeapon_1.default);
          this.meleeWeapon.IsSecond = this.isLeftHand;
        }
      };
      PlayerWeapon.prototype.initShooter = function() {
        this.shooter = this.getComponentInChildren(Shooter_1.default);
        this.shooter.player = this.player;
        this.shooter.parentNode = this.player.node;
      };
      PlayerWeapon.prototype.changeZIndexByDir = function(avatarZindex, dir) {
        switch (dir) {
         case PlayerAvatar_1.default.DIR_UP:
          this.node.zIndex = avatarZindex - 1;
          break;

         case PlayerAvatar_1.default.DIR_DOWN:
          this.node.zIndex = avatarZindex + 1;
          break;

         case PlayerAvatar_1.default.DIR_LEFT:
         case PlayerAvatar_1.default.DIR_RIGHT:
          this.node.zIndex = this.isLeftHand ? avatarZindex - 1 : avatarZindex + 1;
        }
      };
      PlayerWeapon.prototype.changeWeapon = function(equipData, spriteFrame, inventoryManager) {
        switch (equipData.equipmetType) {
         case InventoryManager_1.default.WEAPON:
          this.meleeWeapon.changeEquipment(equipData, spriteFrame, inventoryManager);
          break;

         case InventoryManager_1.default.REMOTE:
          this.shooter.data = equipData.clone();
          this.shooter.changeRes(this.shooter.data.img);
          var c = cc.color(255, 255, 255).fromHEX(this.shooter.data.color);
          this.shooter.changeResColor(c);
        }
      };
      PlayerWeapon.prototype.meleeAttack = function(data, fistCombo) {
        if (!this.meleeWeapon || this.meleeWeapon.IsAttacking) return;
        this.meleeWeapon.attack(data, fistCombo);
      };
      PlayerWeapon.prototype.remoteAttack = function(data, cooldownNode, bulletArcExNum, bulletLineExNum) {
        var _this = this;
        var canFire = false;
        var cooldown = data.FinalCommon.remoteCooldown;
        cooldown < 100 && (cooldown = 100);
        var currentTime = Date.now();
        if (currentTime - this.remoteIntervalTime > cooldown) {
          this.remoteIntervalTime = currentTime;
          canFire = true;
        }
        if (!canFire) return false;
        this.isHeavyRemotoAttacking = 1 == this.shooter.data.isHeavy;
        this.scheduleOnce(function() {
          _this.isHeavyRemotoAttacking = false;
        }, .2);
        if (this.shooter) {
          this.shooter.remoteDamagePlayer = data.getFinalRemoteDamage();
          this.shooter.fireBullet(0, null, bulletArcExNum, bulletLineExNum);
        }
        if (cooldownNode && cooldown > 500) {
          cooldownNode.width = 80;
          cooldownNode.stopAllActions();
          cc.tween(cooldownNode).to(cooldown / 1e3, {
            width: 0
          }).start();
        }
        return true;
      };
      PlayerWeapon.prototype.updateLogic = function(dt) {
        this.node.position = Logic_1.default.lerpPos(this.node.position, this.player.isFaceRight ? this.selfDefaultPos : this.otherDefaultPos, 5 * dt);
        this.meleeWeapon && this.meleeWeapon.updateLogic(dt);
      };
      PlayerWeapon = __decorate([ ccclass ], PlayerWeapon);
      return PlayerWeapon;
    }(cc.Component);
    exports.default = PlayerWeapon;
    cc._RF.pop();
  }, {
    "./Logic": "Logic",
    "./Manager/InventoryManager": "InventoryManager",
    "./MeleeShadowWeapon": "MeleeShadowWeapon",
    "./MeleeWeapon": "MeleeWeapon",
    "./PlayerAvatar": "PlayerAvatar",
    "./Shooter": "Shooter"
  } ],
  Player: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03570PUzDdNyIu4Asd1jFZT", "Player");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Shooter_1 = require("./Shooter");
    var Logic_1 = require("./Logic");
    var Dungeon_1 = require("./Dungeon");
    var Equipment_1 = require("./Equipment/Equipment");
    var EquipmentData_1 = require("./Data/EquipmentData");
    var MeleeWeapon_1 = require("./MeleeWeapon");
    var StatusManager_1 = require("./Manager/StatusManager");
    var DamageData_1 = require("./Data/DamageData");
    var InventoryManager_1 = require("./Manager/InventoryManager");
    var FloatingLabelManager_1 = require("./Manager/FloatingLabelManager");
    var Tips_1 = require("./UI/Tips");
    var Random_1 = require("./Utils/Random");
    var Shield_1 = require("./Shield");
    var Actor_1 = require("./Base/Actor");
    var Talent_1 = require("./Talent/Talent");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var FromData_1 = require("./Data/FromData");
    var Achievement_1 = require("./Achievement");
    var Item_1 = require("./Item/Item");
    var IndexZ_1 = require("./Utils/IndexZ");
    var PlayerAvatar_1 = require("./PlayerAvatar");
    var PlayerWeapon_1 = require("./PlayerWeapon");
    var EventHelper_1 = require("./EventHelper");
    var ShadowOfSight_1 = require("./Effect/ShadowOfSight");
    var LightManager_1 = require("./Manager/LightManager");
    var AvatarData_1 = require("./Data/AvatarData");
    var ColliderTag_1 = require("./Actor/ColliderTag");
    var ProfessionTalent_1 = require("./Talent/ProfessionTalent");
    var OrganizationTalent_1 = require("./Talent/OrganizationTalent");
    var TalentData_1 = require("./Data/TalentData");
    var ShadowPlayer_1 = require("./Actor/ShadowPlayer");
    var Player = function(_super) {
      __extends(Player, _super);
      function Player() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.floatinglabelManager = null;
        _this.pos = null;
        _this.walksmoke = null;
        _this.smokePool = null;
        _this.weaponLeft = null;
        _this.weaponRight = null;
        _this.shooterEx = null;
        _this.statusManager = null;
        _this.avatar = null;
        _this.shield = null;
        _this.remoteCooldown = null;
        _this.shadowCamera = null;
        _this.shadowPrefab = null;
        _this.isStone = false;
        _this.baseAttackPoint = 1;
        _this.touchDelay = false;
        _this.currentDir = 3;
        _this.defaultPos = cc.v3(0, 0);
        _this.isWeaponDashing = false;
        _this.fistCombo = 0;
        _this.isAvoidDeathed = false;
        _this.shadowList = [];
        _this.smokeTimeDelay = 0;
        _this.dreamTimeDelay = 0;
        _this.dreamLongTimeDelay = 0;
        _this.dreamShortTimeDelay = 0;
        return _this;
      }
      Player.prototype.onLoad = function() {
        var _this = this;
        this.inventoryManager = Logic_1.default.inventoryManager;
        this.data = Logic_1.default.playerData.clone();
        this.updateStatus(this.data.StatusList, this.data.StatusTotalData);
        this.pos = cc.v3(0, 0);
        this.sc.isDied = false;
        this.isStone = false;
        this.sc.isShow = false;
        this.scheduleOnce(function() {
          _this.sc.isShow = true;
          _this.addSaveStatusList();
        }, .5);
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.initTalent();
        this.weaponLeft.init(this, true, false);
        this.weaponRight.init(this, false, false);
        this.remoteCooldown.width = 0;
        this.remoteCooldown.opacity = 200;
        cc.director.on(EventHelper_1.EventHelper.PLAYER_TRIGGER, function(event) {
          _this.node && _this.triggerThings(event && event.detail && event.detail.isLongPress);
        });
        cc.director.on(EventHelper_1.EventHelper.PLAYER_EXIT_FROM_SETTINGS, function(event) {
          cc.director.loadScene("start");
        });
        cc.director.on(EventHelper_1.EventHelper.PLAYER_USEITEM, function(event) {
          _this.node && _this.useItem(event.detail.itemData);
        });
        cc.director.on(EventHelper_1.EventHelper.PLAYER_SKILL, function(event) {
          _this.node && _this.useSkill();
        });
        cc.director.on(EventHelper_1.EventHelper.PLAYER_SKILL1, function(event) {
          _this.node && _this.useSkill1();
        });
        cc.director.on(EventHelper_1.EventHelper.PLAYER_UPDATE_OILGOLD_DATA, function(event) {
          _this.node && _this.data.OilGoldData.valueCopy(Logic_1.default.playerData.OilGoldData);
        });
        cc.director.on(EventHelper_1.EventHelper.PLAYER_ATTACK, function(event) {
          if (_this.useInteractBuilding(true)) return;
          _this.node && _this.meleeAttack();
        });
        cc.director.on(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK_CANCEL, function(event) {
          _this.shield && _this.shield.data.equipmetType == InventoryManager_1.default.SHIELD && _this.shield.cancel(_this.isFaceRight);
        });
        cc.director.on(EventHelper_1.EventHelper.PLAYER_REMOTEATTACK, function(event) {
          if (_this.useInteractBuilding(false)) return;
          _this.shield && _this.shield.data.equipmetType == InventoryManager_1.default.SHIELD ? _this.shield.use(_this.isFaceRight) : _this.node && _this.remoteAttack();
        });
        cc.director.on(EventHelper_1.EventHelper.PLAYER_USEDREAM, function(event) {
          _this.node && _this.data.AvatarData.organizationIndex == AvatarData_1.default.HUNTER && _this.updateDream(event.detail.value);
        });
        Logic_1.default.playerData.pos.y == Dungeon_1.default.HEIGHT_SIZE - 1 && (Logic_1.default.playerData.pos.y = Dungeon_1.default.HEIGHT_SIZE - 2);
        this.pos = Logic_1.default.playerData.pos.clone();
        this.defaultPos = Logic_1.default.playerData.pos.clone();
        this.baseAttackPoint = Logic_1.default.playerData.FinalCommon.damageMin;
        this.updatePlayerPos();
        cc.director.emit(EventHelper_1.EventHelper.CAMERA_LOOK);
        this.shooterEx.player = this;
        this.shooterEx.isEx = true;
        this.smokePool = new cc.NodePool();
        cc.director.on(EventHelper_1.EventHelper.POOL_DESTORY_WALKSMOKE, function(event) {
          _this.destroySmoke(event.detail.coinNode);
        });
        this.playerAnim(PlayerAvatar_1.default.STATE_IDLE, this.currentDir);
        Logic_1.default.isCheatMode && this.scheduleOnce(function() {
          _this.addStatus(StatusManager_1.default.PERFECTDEFENCE, new FromData_1.default());
          _this.data.Common.damageMin = 99;
          _this.data.Common.moveSpeed = 999;
        }, .2);
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
        LightManager_1.default.registerLight(this.lights, this.node);
        this.lights[0].radius = 0;
        Logic_1.default.chapterIndex == Logic_1.default.CHAPTER099 && (this.lights[0].radius = 0);
      };
      Player.prototype.initShadowList = function(isFromSave, count, lifeTime) {
        count > 5 && (count = 5);
        if (!this.shadowTexture) {
          this.shadowTexture = new cc.RenderTexture();
          this.shadowTexture.initWithSize(this.shadowCamera.node.width, this.shadowCamera.node.height);
          this.shadowTexture.setFilters(cc.Texture2D.Filter.NEAREST, cc.Texture2D.Filter.NEAREST);
          this.shadowCamera.targetTexture = this.shadowTexture;
          this.shadowSpriteframe = new cc.SpriteFrame(this.shadowTexture);
        }
        for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          s.isValid && s.enabled && s.node.active || s.stop();
        }
        this.shadowList = [];
        if (isFromSave) {
          for (var i = 0; i < count; i++) if (this.data.ShadowList[i] && this.data.ShadowList[i] > 0) {
            var shadow = cc.instantiate(this.shadowPrefab).getComponent(ShadowPlayer_1.default);
            shadow.init(this, this.shadowSpriteframe, i, this.data.ShadowList[i]);
            this.shadowList.push(shadow);
          }
        } else for (var i = 0; i < count; i++) {
          var shadow = cc.instantiate(this.shadowPrefab).getComponent(ShadowPlayer_1.default);
          shadow.init(this, this.shadowSpriteframe, i, lifeTime);
          this.shadowList.push(shadow);
        }
      };
      Player.prototype.addSaveStatusList = function() {
        this.statusManager && this.statusManager.addStatusListFromSave(this.data.StatusList);
      };
      Player.prototype.initTalent = function() {
        var _this = this;
        var o = new TalentData_1.default();
        var p = new TalentData_1.default();
        o.valueCopy(Logic_1.default.talents["talent10" + this.data.AvatarData.organizationIndex]);
        p.valueCopy(Logic_1.default.talents[this.data.AvatarData.professionData.talent]);
        o.resName == this.data.OrganizationTalentData.resName && o.valueCopy(this.data.OrganizationTalentData);
        p.resName == this.data.ProfessionTalentData.resName && p.valueCopy(this.data.ProfessionTalentData);
        this.data.OrganizationTalentData.valueCopy(o);
        this.data.ProfessionTalentData.valueCopy(p);
        this.professionTalent = this.getComponent(ProfessionTalent_1.default);
        this.organizationTalent = this.getComponent(OrganizationTalent_1.default);
        this.scheduleOnce(function() {
          _this.professionTalent.init(_this.data.ProfessionTalentData);
          _this.organizationTalent.init(_this.data.OrganizationTalentData);
        }, .1);
      };
      Player.prototype.actorName = function() {
        return "Player";
      };
      Player.prototype.turnStone = function(isStone, stoneLevel) {
        this.avatar.hitLight(isStone);
      };
      Player.prototype.updateFistCombo = function() {
        if (!this.weaponRight.meleeWeapon.IsFist) {
          this.fistCombo = MeleeWeapon_1.default.COMBO1;
          return;
        }
        this.fistCombo == MeleeWeapon_1.default.COMBO1 ? this.fistCombo = MeleeWeapon_1.default.COMBO2 : this.fistCombo == MeleeWeapon_1.default.COMBO2 ? this.fistCombo = MeleeWeapon_1.default.COMBO3 : (this.fistCombo == MeleeWeapon_1.default.COMBO3, 
        this.fistCombo = MeleeWeapon_1.default.COMBO1);
        this.weaponLeft.meleeWeapon.IsComboing || this.weaponRight.meleeWeapon.IsComboing || (this.fistCombo = MeleeWeapon_1.default.COMBO1);
      };
      Player.prototype.takeDizz = function(dizzDuration) {
        var _this = this;
        if (dizzDuration > 0 && !this.sc.isJumping) {
          this.sc.isDizzing = true;
          this.rigidbody.linearVelocity = cc.Vec2.ZERO;
          this.playerAnim(PlayerAvatar_1.default.STATE_IDLE, this.currentDir);
          this.scheduleOnce(function() {
            _this.sc.isDizzing = false;
          }, dizzDuration);
        }
      };
      Player.prototype.hideSelf = function(hideDuration) {
        var _this = this;
        if (hideDuration > 0) {
          this.invisible = true;
          this.scheduleOnce(function() {
            _this.stopHiding();
          }, hideDuration);
        }
      };
      Player.prototype.stopHiding = function() {
        this.invisible = false;
        this.statusManager.stopStatus(StatusManager_1.default.TALENT_INVISIBLE);
      };
      Player.prototype.updateStatus = function(statusList, totalStatusData) {
        if (!this.inventoryManager) return;
        this.data.StatusTotalData.valueCopy(totalStatusData);
        this.data.StatusList = statusList;
        this.updateInfoUi();
      };
      Player.prototype.getWalkSmoke = function(parentNode, pos) {
        var smokePrefab = null;
        this.smokePool.size() > 0 && (smokePrefab = this.smokePool.get());
        smokePrefab && !smokePrefab.active || (smokePrefab = cc.instantiate(this.walksmoke));
        smokePrefab.parent = parentNode;
        smokePrefab.position = pos;
        smokePrefab.zIndex = IndexZ_1.default.ACTOR;
        smokePrefab.opacity = 255;
        smokePrefab.active = true;
      };
      Player.prototype.destroySmoke = function(smokeNode) {
        if (!smokeNode) return;
        smokeNode.active = false;
        this.smokePool && this.smokePool.put(smokeNode);
      };
      Player.prototype.changeEquipment = function(equipData, spriteFrame) {
        var inventoryEquip = this.inventoryManager.equips[equipData.equipmetType];
        switch (equipData.equipmetType) {
         case InventoryManager_1.default.WEAPON:
          this.weaponRight.meleeWeapon.changeEquipment(equipData, spriteFrame, this.inventoryManager);
          break;

         case InventoryManager_1.default.REMOTE:
          this.weaponLeft.shooter.data = equipData.clone();
          this.weaponLeft.shooter.changeRes(this.weaponLeft.shooter.data.img);
          var c = cc.color(255, 255, 255).fromHEX(this.weaponLeft.shooter.data.color);
          this.weaponLeft.shooter.changeResColor(c);
          this.shield.data = new EquipmentData_1.default();
          this.updateEquipment(this.shield.sprite, this.inventoryManager.equips[InventoryManager_1.default.SHIELD].color, Logic_1.default.spriteFrameRes(InventoryManager_1.default.EMPTY), 1 == this.shield.data.isHeavy ? 80 : 64);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CHANGE_CONTROLLER_SHIELD, {
            isShield: false
          });
          break;

         case InventoryManager_1.default.SHIELD:
          this.shield.data = equipData.clone();
          this.shield.node.color = cc.Color.WHITE.fromHEX(inventoryEquip.color);
          this.updateEquipment(this.shield.sprite, inventoryEquip.color, spriteFrame, 1 == this.shield.data.isHeavy ? 80 : 64);
          this.weaponLeft.shooter.data = new EquipmentData_1.default();
          this.weaponLeft.shooter.changeRes(this.weaponLeft.shooter.data.img);
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CHANGE_CONTROLLER_SHIELD, {
            isShield: true
          });
          break;

         case InventoryManager_1.default.HELMET:
          this.avatar.hairSprite.node.opacity = 1 == inventoryEquip.hideHair ? 0 : 255;
          this.updateEquipment(this.avatar.helmetSprite, inventoryEquip.color, spriteFrame);
          break;

         case InventoryManager_1.default.CLOTHES:
          this.updateEquipment(this.avatar.clothesSprite, inventoryEquip.color, spriteFrame);
          break;

         case InventoryManager_1.default.TROUSERS:
          var isLong = 1 == inventoryEquip.trouserslong;
          this.avatar.changeLegColor(isLong, inventoryEquip.color);
          this.updateEquipment(this.avatar.pantsSprite, inventoryEquip.color, spriteFrame);
          break;

         case InventoryManager_1.default.GLOVES:
          this.updateEquipment(this.weaponRight.meleeWeapon.GlovesSprite, inventoryEquip.color, spriteFrame);
          this.updateEquipment(this.weaponLeft.meleeWeapon.GlovesSprite, inventoryEquip.color, spriteFrame);
          this.updateEquipment(this.avatar.glovesLeftSprite, inventoryEquip.color, spriteFrame);
          this.updateEquipment(this.avatar.glovesRightSprite, inventoryEquip.color, spriteFrame);
          break;

         case InventoryManager_1.default.SHOES:
          this.updateEquipment(this.avatar.shoesLeftSprite, inventoryEquip.color, spriteFrame);
          this.updateEquipment(this.avatar.shoesRightSprite, inventoryEquip.color, spriteFrame);
          break;

         case InventoryManager_1.default.CLOAK:
          this.updateEquipment(this.avatar.cloakSprite, inventoryEquip.color, spriteFrame);
        }
        this.avatar.changeEquipDirSpriteFrame(this.inventoryManager, this.currentDir);
        this.shield.changeZIndexByDir(this.avatar.node.zIndex, this.currentDir, this.isFaceRight);
        this.updateInfoUi();
      };
      Player.prototype.updateEquipment = function(sprite, color, spriteFrame, size) {
        sprite.spriteFrame = spriteFrame;
        if (size && size > 0) {
          sprite.node.width = size;
          sprite.node.height = size;
        }
        var c = cc.color(255, 255, 255).fromHEX(color);
        sprite.node.color = c;
      };
      Player.prototype.updateInfoUi = function() {
        var health = this.data.getHealth();
        var dream = this.data.getDream();
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_HEALTHBAR, {
          x: health.x,
          y: health.y
        });
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_DREAMBAR, {
          x: dream.x,
          y: dream.y
        });
        this.data.EquipmentTotalData.valueCopy(this.inventoryManager.getTotalEquipData());
        cc.director.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_INFODIALOG, {
          detail: {
            data: this.data
          }
        });
      };
      Player.prototype.getCenterPosition = function() {
        return this.node.position.clone().addSelf(cc.v3(0, 32 * this.node.scaleY));
      };
      Player.prototype.updatePlayerPos = function() {
        this.node.position = Dungeon_1.default.getPosInMap(this.pos);
      };
      Player.prototype.transportPlayer = function(pos) {
        if (!this.avatar.spriteNode) return;
        this.avatar.spriteNode.angle = 0;
        this.avatar.spriteNode.scale = 5;
        this.avatar.spriteNode.opacity = 255;
        this.avatar.spriteNode.x = 0;
        this.avatar.spriteNode.y = 0;
        this.pos = pos;
        this.changeZIndex(this.pos);
        this.updatePlayerPos();
      };
      Player.prototype.changeZIndex = function(pos) {
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      Player.prototype.addStatus = function(statusType, from, isFromSave) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager.addStatus(statusType, from);
      };
      Player.prototype.addCustomStatus = function(data, from) {
        if (!this.node || this.sc.isDied) return;
        this.statusManager.addCustomStatus(data, from);
      };
      Object.defineProperty(Player.prototype, "IsVariation", {
        get: function() {
          return this.data.StatusTotalData.variation > 0;
        },
        enumerable: false,
        configurable: true
      });
      Player.prototype.stopAllDebuffs = function() {
        if (!this.node) return;
        this.statusManager.stopAllDebuffs();
      };
      Object.defineProperty(Player.prototype, "isInteractBuildingAniming", {
        get: function() {
          return this.interactBuilding && this.interactBuilding.isTaken && this.interactBuilding.isAniming;
        },
        enumerable: false,
        configurable: true
      });
      Player.prototype.meleeAttack = function() {
        var _this = this;
        if (!this.weaponRight || this.sc.isDizzing || this.sc.isDied || this.sc.isFalling || this.sc.isJumping || this.isInteractBuildingAniming || this.weaponLeft.meleeWeapon.IsAttacking && this.weaponLeft.meleeWeapon.IsFist || this.weaponRight.meleeWeapon.IsAttacking && this.weaponRight.meleeWeapon.IsFist || this.shield.isDefendOrParrying) return;
        this.updateFistCombo();
        var isAttackDo = false;
        if (this.fistCombo == MeleeWeapon_1.default.COMBO1) {
          isAttackDo = this.weaponRight.meleeWeapon.attack(this.data, this.fistCombo);
          this.weaponLeft.meleeWeapon.attackIdle(false);
          if (isAttackDo) for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
            var s = _a[_i];
            s.attack(this.data, this.fistCombo, this.weaponRight.meleeWeapon.Hv, false);
          }
        } else if (this.fistCombo == MeleeWeapon_1.default.COMBO2) {
          this.weaponRight.meleeWeapon.attackIdle(true);
          isAttackDo = this.weaponLeft.meleeWeapon.attack(this.data, this.fistCombo);
          if (isAttackDo) for (var _b = 0, _c = this.shadowList; _b < _c.length; _b++) {
            var s = _c[_b];
            s.attack(this.data, this.fistCombo, this.weaponLeft.meleeWeapon.Hv, true);
          }
        } else if (this.fistCombo == MeleeWeapon_1.default.COMBO3) {
          isAttackDo = this.weaponRight.meleeWeapon.attack(this.data, this.fistCombo);
          this.weaponRight.meleeWeapon.DashTime(400);
          if (isAttackDo) for (var _d = 0, _e = this.shadowList; _d < _e.length; _d++) {
            var s = _e[_d];
            s.attack(this.data, this.fistCombo, this.weaponRight.meleeWeapon.Hv, false);
          }
          this.scheduleOnce(function() {
            var isDo = _this.weaponLeft.meleeWeapon.attack(_this.data, _this.fistCombo);
            if (isDo) for (var _i = 0, _a = _this.shadowList; _i < _a.length; _i++) {
              var s = _a[_i];
              s.attack(_this.data, _this.fistCombo, _this.weaponLeft.meleeWeapon.Hv, true);
            }
          }, .15);
        }
        if (isAttackDo) {
          var pos = this.weaponRight.meleeWeapon.Hv.clone();
          if (!this.shield.isAniming && !this.shield.isDefendOrParrying) {
            var facetemp = this.isFaceRight;
            this.isFaceRight = pos.x > 0;
            facetemp != this.isFaceRight && this.shield.faceRightChange(this.isFaceRight);
          }
          this.isFaceUp = pos.y > 0;
          this.playerAnim(PlayerAvatar_1.default.STATE_ATTACK, this.currentDir);
          this.stopHiding();
        }
      };
      Player.prototype.useShield = function() {
        if (!this.weaponRight || this.sc.isDizzing || this.sc.isDied || this.sc.isFalling || this.sc.isJumping || this.weaponRight.meleeWeapon.IsAttacking || this.weaponLeft.meleeWeapon.IsAttacking || this.isInteractBuildingAniming) return;
        if (this.shield.Status == Shield_1.default.STATUS_PARRY || this.shield.Status == Shield_1.default.STATUS_PUTDOWN) return;
      };
      Player.prototype.useInteractBuilding = function(isMelee) {
        if (!this.interactBuilding) return false;
        if (!this.interactBuilding.isTaken) return false;
        if (!this.interactBuilding.isAniming) {
          this.stopHiding();
          this.playerAnim(PlayerAvatar_1.default.STATE_ATTACK, this.currentDir);
          return this.interactBuilding.interact(this, false, isMelee, !isMelee);
        }
        return true;
      };
      Player.prototype.remoteAttack = function() {
        if (!this.data || this.sc.isDizzing || this.sc.isDied || this.sc.isFalling || !this.weaponLeft.shooter || this.sc.isJumping) return;
        var arcEx = 0;
        var lineEx = 0;
        if (this.professionTalent.hashTalent(Talent_1.default.TALENT_005) && this.professionTalent.IsExcuting) {
          arcEx = 2;
          lineEx = 1;
        }
        this.weaponLeft.shooter.data.bulletSize = this.IsVariation ? .5 : 0;
        var fireSuccess = this.weaponLeft.remoteAttack(this.data, this.remoteCooldown, arcEx, lineEx);
        if (fireSuccess) {
          for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
            var s = _a[_i];
            s.remoteAttack(true, this.weaponLeft.shooter.data, this.weaponLeft.shooter.Hv, this.data.getFinalRemoteDamage(), arcEx, lineEx);
          }
          this.stopHiding();
        }
      };
      Player.prototype.remoteExAttack = function(comboType) {
        for (var key in this.inventoryManager.equips) {
          var data = this.inventoryManager.equips[key];
          this.remoteExAttackDo(data, comboType);
        }
        for (var key in this.inventoryManager.suitMap) {
          var suit = this.inventoryManager.suitMap[key];
          if (suit) for (var i = 0; i < suit.count - 1; i++) i < suit.EquipList.length && this.remoteExAttackDo(suit.EquipList[i], comboType);
        }
      };
      Player.prototype.remoteExAttackDo = function(data, comboType) {
        var canShoot = false;
        comboType == MeleeWeapon_1.default.COMBO1 && data.exBulletCombo1 > 0 && (canShoot = true);
        comboType == MeleeWeapon_1.default.COMBO2 && data.exBulletCombo2 > 0 && (canShoot = true);
        comboType == MeleeWeapon_1.default.COMBO3 && data.exBulletCombo3 > 0 && (canShoot = true);
        if (canShoot && data.exBulletTypeAttack.length > 0 && Random_1.default.getRandomNum(0, 100) < data.exBulletRate) {
          this.shooterEx.data.bulletType = data.exBulletTypeAttack;
          this.shooterEx.data.bulletArcExNum = data.bulletArcExNum;
          this.shooterEx.data.bulletLineExNum = data.bulletLineExNum;
          this.shooterEx.data.bulletSize = data.bulletSize;
          this.shooterEx.data.bulletSize += this.IsVariation ? .5 : 0;
          this.shooterEx.fireBullet(0, cc.v3(data.exBulletOffsetX, 24));
          for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
            var s = _a[_i];
            if (s.node) {
              s.shooterEx.setHv(this.shooterEx.Hv);
              s.shooterEx.data = this.shooterEx.data.clone();
              s.shooterEx.fireBullet(0, cc.v3(data.exBulletOffsetX, 24));
            }
          }
        }
      };
      Player.prototype.remoteOrStatusExHurt = function(blockLevel, from, actor) {
        for (var key in this.inventoryManager.equips) {
          var data = this.inventoryManager.equips[key];
          this.remoteOrStatusExHurtDo(data, blockLevel, from, actor);
        }
        for (var key in this.inventoryManager.suitMap) {
          var suit = this.inventoryManager.suitMap[key];
          if (suit) for (var i = 0; i < suit.count - 1; i++) i < suit.EquipList.length && this.remoteOrStatusExHurtDo(suit.EquipList[i], blockLevel, from, actor);
        }
      };
      Player.prototype.remoteOrStatusExHurtDo = function(data, blockLevel, from, actor) {
        var needFire = false;
        if (data.exBulletTypeHurt.length > 0 && Random_1.default.getRandomNum(0, 100) < data.exBulletRate) {
          needFire = true;
          this.shooterEx.data.bulletType = data.exBulletTypeHurt;
        }
        if (blockLevel == Shield_1.default.BLOCK_PARRY && data.exBulletTypeParry.length > 0 && Random_1.default.getRandomNum(0, 100) < data.exBulletRate) {
          needFire = true;
          this.shooterEx.data.bulletType = data.exBulletTypeParry;
        }
        if (blockLevel == Shield_1.default.BLOCK_NORMAL && data.exBulletTypeBlock.length > 0 && Random_1.default.getRandomNum(0, 100) < data.exBulletRate) {
          needFire = true;
          this.shooterEx.data.bulletType = data.exBulletTypeBlock;
        }
        if (needFire) {
          this.shooterEx.data.bulletArcExNum = data.bulletArcExNum;
          this.shooterEx.data.bulletLineExNum = data.bulletLineExNum;
          this.shooterEx.data.bulletSize = data.bulletSize;
          this.shooterEx.fireBullet(0);
          for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
            var s = _a[_i];
            if (s.node) {
              s.shooterEx.setHv(this.shooterEx.Hv);
              s.shooterEx.data = this.shooterEx.data.clone();
              s.shooterEx.fireBullet(0);
            }
          }
        }
        actor && data.statusNameHurtOther.length > 0 && data.statusRateHurt > Logic_1.default.getRandomNum(0, 100) && actor.addStatus(data.statusNameHurtOther, new FromData_1.default());
        data.statusNameHurtSelf.length > 0 && data.statusRateHurt > Logic_1.default.getRandomNum(0, 100) && this.addStatus(data.statusNameHurtSelf, new FromData_1.default());
      };
      Player.prototype.move = function(dir, pos, dt) {
        if (this.sc.isDied || this.sc.isFalling || this.sc.isDizzing || !this.sc.isShow) return;
        this.weaponRight.meleeWeapon.IsAttacking && !pos.equals(cc.Vec3.ZERO) && (pos = pos.mul(this.weaponRight.meleeWeapon.getMeleeSlowRatio()));
        this.weaponLeft.meleeWeapon.IsAttacking && !pos.equals(cc.Vec3.ZERO) && (pos = pos.mul(this.weaponLeft.meleeWeapon.getMeleeSlowRatio()));
        this.weaponLeft.isHeavyRemotoAttacking && !pos.equals(cc.Vec3.ZERO) && (pos = pos.mul(.01));
        1 == this.shield.data.isHeavy && this.shield.Status > Shield_1.default.STATUS_IDLE && (pos = pos.mul(.5));
        this.interactBuilding && this.interactBuilding.isTaken && (pos = pos.mul(.5));
        this.professionTalent.IsExcuting && this.professionTalent.hashTalent(Talent_1.default.TALENT_007) && !pos.equals(cc.Vec3.ZERO) && (pos = pos.mul(.01));
        if (!pos.equals(cc.Vec3.ZERO)) {
          this.pos = Dungeon_1.default.getIndexInMap(this.node.position);
          this.data.pos = this.pos.clone();
        }
        if (!pos.equals(cc.Vec3.ZERO)) {
          this.shooterEx.setHv(cc.v3(pos.x, pos.y));
          this.weaponLeft.shooter.setHv(cc.v3(pos.x, pos.y));
          this.weaponRight.shooter.setHv(cc.v3(pos.x, pos.y));
        }
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var mul = absh > absv ? absh : absv;
        mul = 0 == mul ? 1 : mul;
        var movement = cc.v2(h, v);
        var speed = this.data.getMoveSpeed();
        speed < 0 && (speed = 0);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.sc.isMoving = 0 != h || 0 != v;
        !this.weaponRight.meleeWeapon || pos.equals(cc.Vec3.ZERO) || this.weaponRight.meleeWeapon.IsAttacking || (this.weaponRight.meleeWeapon.Hv = cc.v3(pos.x, pos.y));
        !this.weaponLeft.meleeWeapon || pos.equals(cc.Vec3.ZERO) || this.weaponLeft.meleeWeapon.IsAttacking || (this.weaponLeft.meleeWeapon.Hv = cc.v3(pos.x, pos.y));
        if (this.sc.isMoving && !this.weaponLeft.meleeWeapon.IsAttacking && !this.weaponRight.meleeWeapon.IsAttacking) {
          if (!this.shield.isAniming && !this.shield.isDefendOrParrying) {
            this.isFaceRight = this.weaponLeft.meleeWeapon.Hv.x > 0;
            var facetemp = this.isFaceRight;
            facetemp != this.isFaceRight && this.shield.faceRightChange(this.isFaceRight);
          }
          this.isFaceUp = this.weaponLeft.meleeWeapon.Hv.y > 0;
        }
        this.sc.isJumping || (this.sc.isMoving && !this.isStone ? this.playerAnim(PlayerAvatar_1.default.STATE_WALK, dir) : this.playerAnim(PlayerAvatar_1.default.STATE_IDLE, dir));
        4 != dir && this.changeZIndex(this.pos);
        if (4 != dir && !this.shield.isAniming && !this.shield.isDefendOrParrying) {
          this.currentDir = dir;
          dir == PlayerAvatar_1.default.DIR_DOWN && this.isFaceUp ? dir = PlayerAvatar_1.default.DIR_UP : dir != PlayerAvatar_1.default.DIR_UP || this.isFaceUp || (dir = PlayerAvatar_1.default.DIR_DOWN);
          this.weaponLeft.changeZIndexByDir(this.avatar.node.zIndex, dir);
          this.weaponRight.changeZIndexByDir(this.avatar.node.zIndex, dir);
          this.avatar.changeEquipDirSpriteFrame(this.inventoryManager, dir);
          this.shield.changeZIndexByDir(this.avatar.node.zIndex, dir, this.isFaceRight);
          this.avatar.changeAvatarByDir(dir);
        }
      };
      Player.prototype.playerAnim = function(status, dir) {
        if (status == PlayerAvatar_1.default.STATE_IDLE && this.avatar.status != PlayerAvatar_1.default.STATE_IDLE) {
          this.weaponLeft.shooter.playWalk(false);
          this.weaponRight.shooter.playWalk(false);
        }
        switch (status) {
         case PlayerAvatar_1.default.STATE_IDLE:
          if (this.avatar.status != PlayerAvatar_1.default.STATE_IDLE) {
            this.weaponLeft.shooter.playWalk(false);
            this.weaponRight.shooter.playWalk(false);
          }
          break;

         case PlayerAvatar_1.default.STATE_WALK:
          if (this.avatar.status != PlayerAvatar_1.default.STATE_ATTACK) {
            this.weaponLeft.shooter.playWalk(true);
            this.weaponRight.shooter.playWalk(true);
          }
          break;

         case PlayerAvatar_1.default.STATE_ATTACK:
          this.weaponLeft.shooter.playWalk(true);
          this.weaponRight.shooter.playWalk(true);
          break;

         case PlayerAvatar_1.default.STATE_FALL:
         case PlayerAvatar_1.default.STATE_DIE:
        }
        this.avatar.playAnim(status, dir);
      };
      Player.prototype.start = function() {
        if (!this.node) return;
        this.changeZIndex(this.pos);
        this.updateInfoUi();
      };
      Player.prototype.fall = function() {
        var _this = this;
        if (this.sc.isFalling || this.sc.isJumping) return;
        this.sc.isFalling = true;
        this.avatar.playAnim(PlayerAvatar_1.default.STATE_FALL, this.currentDir);
        this.scheduleOnce(function() {
          _this.transportPlayer(_this.defaultPos);
          _this.playerAnim(PlayerAvatar_1.default.STATE_IDLE, 1);
          var dd = new DamageData_1.default();
          dd.realDamage = 1;
          _this.takeDamage(dd, FromData_1.default.getClone("\u8dcc\u843d", ""));
          _this.sc.isFalling = false;
        }, 2);
      };
      Object.defineProperty(Player.prototype, "CanJump", {
        get: function() {
          if (this.sc.isDied || this.sc.isFalling || this.sc.isDizzing || !this.sc.isShow || this.sc.isJumping || this.weaponRight.meleeWeapon.IsAttacking || this.weaponLeft.meleeWeapon.IsAttacking || this.isInteractBuildingAniming) return false;
          return true;
        },
        enumerable: false,
        configurable: true
      });
      Player.prototype.jump = function() {
        var _this = this;
        if (!this.CanJump) return;
        this.sc.isJumping = true;
        this.scheduleOnce(function() {
          _this.weaponLeft.node.opacity = 0;
          _this.weaponRight.node.opacity = 0;
          _this.shield.node.opacity = 0;
        }, .1);
        this.avatar.playAnim(PlayerAvatar_1.default.STATE_JUMP, this.currentDir);
        this.scheduleOnce(function() {
          _this.avatar.playAnim(PlayerAvatar_1.default.STATE_IDLE, _this.currentDir);
          _this.sc.isJumping = false;
          _this.weaponLeft.node.opacity = 255;
          _this.weaponRight.node.opacity = 255;
          _this.shield.node.opacity = 255;
        }, 1.3);
      };
      Player.prototype.takeDamage = function(damageData, from, actor) {
        if (!this.data || this.sc.isJumping || this.sc.isDied) return false;
        var blockLevel = this.shield.blockDamage(this, damageData, actor);
        var dd = this.data.getDamage(damageData, blockLevel);
        var dodge = this.data.FinalCommon.dodge / 100;
        var isDodge = Random_1.default.rand() <= dodge && dd.getTotalDamage() > 0;
        this.professionTalent.hashTalent(Talent_1.default.TALENT_015) && this.professionTalent.IsExcuting && dd.getTotalDamage() > 0 && (isDodge = true);
        var isBlock = false;
        if (this.organizationTalent.takeDamage(dd, actor)) {
          dd = new DamageData_1.default();
          isBlock = true;
        }
        dd = isDodge ? new DamageData_1.default() : dd;
        var health = this.data.getHealth();
        var totalD = dd.getTotalDamage();
        totalD > 0 && this.data.AvatarData.organizationIndex == AvatarData_1.default.GURAD && (totalD = this.updateDream(totalD));
        health.x -= totalD;
        health.x > health.y && (health.x = health.y);
        this.data.currentHealth = health.x;
        var isAvoidDeath = false;
        if (this.data.currentHealth <= 0) if (!this.isAvoidDeathed && this.data.StatusTotalData.avoidDeath > 0) {
          this.isAvoidDeathed = true;
          isAvoidDeath = true;
          this.data.currentHealth = 0;
        } else this.killed(from);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_HEALTHBAR, {
          x: health.x,
          y: health.y
        });
        this.showFloatFont(this.node.parent, dd.getTotalDamage(), isDodge, false, false, isBlock, isAvoidDeath);
        var valid = !isDodge && dd.getTotalDamage() > 0 && blockLevel != Shield_1.default.BLOCK_PARRY;
        (valid || blockLevel == Shield_1.default.BLOCK_PARRY) && this.showDamageEffect(blockLevel, from, actor);
        return valid;
      };
      Player.prototype.updateDream = function(offset) {
        var dream = this.data.getDream();
        dream.x -= offset;
        var overflow = -dream.x;
        dream.x > dream.y && (dream.x = dream.y);
        dream.x < 0 && (dream.x = 0);
        this.data.currentDream = dream.x;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_UPDATE_PLAYER_DREAMBAR, {
          x: dream.x,
          y: dream.y
        });
        return overflow < 0 ? 0 : overflow;
      };
      Player.prototype.showDamageEffect = function(blockLevel, from, actor) {
        this.remoteOrStatusExHurt(blockLevel, from, actor);
        cc.director.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
          detail: {
            isHeavyShaking: false
          }
        });
        if (blockLevel == Shield_1.default.BLOCK_NORMAL) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.BOSS_ICEDEMON_HIT);
          cc.director.emit(EventHelper_1.EventHelper.HUD_DAMAGE_CORNER_SHOW);
        } else if (blockLevel == Shield_1.default.BLOCK_PARRY) AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY); else {
          AudioPlayer_1.default.play(AudioPlayer_1.default.PLAYER_HIT);
          cc.director.emit(EventHelper_1.EventHelper.HUD_DAMAGE_CORNER_SHOW);
        }
      };
      Player.prototype.showFloatFont = function(dungeonNode, d, isDodge, isMiss, isCritical, isBlock, isAvoidDeath) {
        if (!this.floatinglabelManager) return;
        var flabel = this.floatinglabelManager.getFloaingLabel(dungeonNode);
        isDodge ? flabel.showDoge() : isMiss ? flabel.showMiss() : isBlock ? flabel.showBlock() : isAvoidDeath ? flabel.showAvoidDeath() : 0 != d && d ? flabel.showDamage(-d, isCritical) : flabel.hideLabel();
      };
      Player.prototype.killed = function(from) {
        if (this.sc.isDied) return;
        this.sc.isDied = true;
        this.avatar.playAnim(PlayerAvatar_1.default.STATE_DIE, this.currentDir);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_STOP_COUNTTIME);
        this.scheduleOnce(function() {
          EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_FADE_OUT);
        }, 1.5);
        AudioPlayer_1.default.play(AudioPlayer_1.default.DIE);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_LOSE_OILGOLD);
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_OILGOLD_LOSE_SHOW);
        Achievement_1.default.addPlayerDiedLifesAchievement();
        this.weaponLeft.node.opacity = 0;
        this.weaponRight.node.opacity = 0;
        Logic_1.default.dieFrom.valueCopy(from);
        Logic_1.default.setKillPlayerCounts(from, true);
        Logic_1.default.saveData();
        this.scheduleOnce(function() {
          cc.audioEngine.stopMusic();
          cc.director.loadScene("gameover");
        }, 3);
        this.dungeon.darkAfterKill();
      };
      Player.prototype.playerAction = function(dir, pos, dt, dungeon) {
        this.dungeon = dungeon;
        if (this.weaponLeft.meleeWeapon && !this.weaponLeft.meleeWeapon.dungeon) {
          this.weaponLeft.meleeWeapon.dungeon = dungeon;
          this.weaponLeft.shooter.dungeon = dungeon;
          this.weaponRight.meleeWeapon.dungeon = dungeon;
          this.weaponRight.shooter.dungeon = dungeon;
          this.shooterEx.dungeon = dungeon;
        }
        for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          if (s.node && !s.weaponLeft.shadowWeapon.dungeon) {
            s.weaponLeft.shadowWeapon.dungeon = dungeon;
            s.weaponLeft.shooter.dungeon = dungeon;
            s.weaponRight.shadowWeapon.dungeon = dungeon;
            s.weaponRight.shooter.dungeon = dungeon;
            s.shooterEx.dungeon = dungeon;
          }
        }
        if (!this.sc.isShow) return;
        var isDashing = this.professionTalent.hashTalent(Talent_1.default.TALENT_015) && this.professionTalent.IsExcuting;
        !this.professionTalent || isDashing || this.isWeaponDashing || this.move(dir, pos, dt);
      };
      Player.prototype.isSmokeTimeDelay = function(dt) {
        this.smokeTimeDelay += dt;
        if (this.smokeTimeDelay > .3) {
          this.smokeTimeDelay = 0;
          return true;
        }
        return false;
      };
      Player.prototype.isDreamTimeDelay = function(dt) {
        this.dreamTimeDelay += dt;
        if (this.dreamTimeDelay > 5) {
          this.dreamTimeDelay = 0;
          return true;
        }
        return false;
      };
      Player.prototype.isDreamShortTimeDelay = function(dt) {
        this.dreamShortTimeDelay += dt;
        if (this.dreamShortTimeDelay > 1) {
          this.dreamShortTimeDelay = 0;
          return true;
        }
        return false;
      };
      Player.prototype.isDreamLongTimeDelay = function(dt) {
        this.dreamLongTimeDelay += dt;
        if (this.dreamLongTimeDelay > 20) {
          this.dreamLongTimeDelay = 0;
          return true;
        }
        return false;
      };
      Player.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.isSmokeTimeDelay(dt) && this.sc.isMoving && !this.sc.isJumping && this.getWalkSmoke(this.node.parent, this.node.position);
        this.isDreamLongTimeDelay(dt) && this.updateDream(-1);
        this.dungeon && this.dungeon.isClear && this.isDreamShortTimeDelay(dt) && this.data.AvatarData.organizationIndex == AvatarData_1.default.FOLLOWER && this.updateDream(-1);
        this.isDreamTimeDelay(dt) && this.data.AvatarData.organizationIndex == AvatarData_1.default.TECH && this.updateDream(1);
        var stone = this.isStone;
        this.isStone = this.statusManager.hasStatus(StatusManager_1.default.STONE);
        stone == !this.isStone && this.turnStone(this.isStone);
        this.node.scaleX = this.getScaleSize();
        this.avatar.node.scaleX = this.isFaceRight ? 1 : -1;
        this.node.scaleY = this.getScaleSize();
        this.node.opacity = this.invisible ? 80 : 255;
        var showHands = this.interactBuilding && this.interactBuilding.isTaken && !this.interactBuilding.isThrowing;
        var isLift = this.interactBuilding && this.interactBuilding.isTaken && this.interactBuilding.isLift;
        if (this.weaponLeft) {
          this.weaponLeft.updateLogic(dt);
          this.weaponLeft.meleeWeapon.setHandAndWeaponInVisible(showHands);
        }
        if (this.weaponRight) {
          this.weaponRight.updateLogic(dt);
          this.weaponRight.meleeWeapon.setHandAndWeaponInVisible(showHands);
        }
        this.avatar && this.avatar.showHandsWithInteract(showHands, isLift && !this.interactBuilding.isAttacking);
        this.showUiButton();
        for (var _i = 0, _a = this.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          s.node && s.updateLogic(dt);
        }
      };
      Player.prototype.getScaleSize = function() {
        var sn = this.IsVariation ? 1.5 : 1;
        return sn;
      };
      Player.prototype.useSkill = function() {
        !this.professionTalent || this.sc.isJumping || this.sc.isAttacking || this.professionTalent.useSKill();
      };
      Player.prototype.useSkill1 = function() {
        !this.organizationTalent || this.sc.isJumping || this.sc.isAttacking || this.organizationTalent.useSKill();
      };
      Player.prototype.triggerThings = function(isLongPress) {
        if (this.sc.isJumping || !this.dungeon) return;
        this.dungeon.equipmentManager.lastGroundEquip && this.dungeon.equipmentManager.lastGroundEquip.taken(isLongPress) && (this.dungeon.equipmentManager.lastGroundEquip = null);
        this.dungeon.itemManager.lastGroundItem && this.dungeon.itemManager.lastGroundItem.taken(this, isLongPress) && (this.dungeon.itemManager.lastGroundItem = null);
        if (this.interactBuilding && this.interactBuilding.isTaken) this.interactBuilding.interact(this, isLongPress, false, false); else if (this.dungeon.buildingManager.lastInteractBuilding && this.dungeon.buildingManager.lastInteractBuilding.taken(this, isLongPress)) {
          this.interactBuilding = this.dungeon.buildingManager.lastInteractBuilding;
          this.dungeon.buildingManager.lastInteractBuilding = null;
        }
        this.touchedTips && this.touchedTips.next(isLongPress, this);
      };
      Player.prototype.showUiButton = function() {
        if (!this.dungeon) return;
        this.dungeon.equipmentManager.lastGroundEquip || this.dungeon.itemManager.lastGroundItem || this.dungeon.buildingManager.lastInteractBuilding || this.interactBuilding && this.interactBuilding.isTaken || this.touchedTips ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_INTERACT_SHOW, {
          isShow: true
        }) : EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_INTERACT_SHOW, {
          isShow: false
        });
        this.shield && this.shield.data.equipmetType == InventoryManager_1.default.SHIELD || this.interactBuilding && this.interactBuilding.isTaken || this.weaponLeft.shooter.data.equipmetType == InventoryManager_1.default.REMOTE ? EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_REMOTE_SHOW, {
          isShow: true
        }) : EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_REMOTE_SHOW, {
          isShow: false
        });
      };
      Player.prototype.onPreSolve = function(contact, selfCollider, otherCollider) {
        otherCollider.tag != ColliderTag_1.ColliderTag.NONPLAYER && otherCollider.tag != ColliderTag_1.ColliderTag.GOODNONPLAYER || (contact.disabledOnce = true);
      };
      Player.prototype.onCollisionEnter = function(other, self) {
        this.touchedTips = null;
      };
      Player.prototype.onCollisionExit = function(other, self) {
        this.touchedTips = null;
      };
      Player.prototype.onCollisionStay = function(other, self) {
        var _this = this;
        if (this.touchDelay) return;
        var isInteract = false;
        var equipment = other.node.getComponent(Equipment_1.default);
        equipment && (isInteract = true);
        var item = other.node.getComponent(Item_1.default);
        item && (isInteract = true);
        var tips = other.node.getComponent(Tips_1.default);
        if (tips) {
          isInteract = true;
          this.touchedTips = tips;
        }
        if (isInteract) {
          this.touchDelay = true;
          this.scheduleOnce(function() {
            _this.touchDelay = false;
          }, .1);
        }
      };
      Object.defineProperty(Player.prototype, "Hv", {
        get: function() {
          return this.weaponRight.meleeWeapon.Hv;
        },
        enumerable: false,
        configurable: true
      });
      Player.prototype.useItem = function(data) {
        Item_1.default.userIt(data, this);
      };
      Player.prototype.setLinearVelocity = function(movement) {};
      __decorate([ property(FloatingLabelManager_1.default) ], Player.prototype, "floatinglabelManager", void 0);
      __decorate([ property(cc.Vec3) ], Player.prototype, "pos", void 0);
      __decorate([ property(cc.Prefab) ], Player.prototype, "walksmoke", void 0);
      __decorate([ property(PlayerWeapon_1.default) ], Player.prototype, "weaponLeft", void 0);
      __decorate([ property(PlayerWeapon_1.default) ], Player.prototype, "weaponRight", void 0);
      __decorate([ property(Shooter_1.default) ], Player.prototype, "shooterEx", void 0);
      __decorate([ property(StatusManager_1.default) ], Player.prototype, "statusManager", void 0);
      __decorate([ property(PlayerAvatar_1.default) ], Player.prototype, "avatar", void 0);
      __decorate([ property(Shield_1.default) ], Player.prototype, "shield", void 0);
      __decorate([ property(cc.Node) ], Player.prototype, "remoteCooldown", void 0);
      __decorate([ property(cc.Camera) ], Player.prototype, "shadowCamera", void 0);
      __decorate([ property(cc.Prefab) ], Player.prototype, "shadowPrefab", void 0);
      Player = __decorate([ ccclass ], Player);
      return Player;
    }(Actor_1.default);
    exports.default = Player;
    cc._RF.pop();
  }, {
    "./Achievement": "Achievement",
    "./Actor/ColliderTag": "ColliderTag",
    "./Actor/ShadowPlayer": "ShadowPlayer",
    "./Base/Actor": "Actor",
    "./Data/AvatarData": "AvatarData",
    "./Data/DamageData": "DamageData",
    "./Data/EquipmentData": "EquipmentData",
    "./Data/FromData": "FromData",
    "./Data/TalentData": "TalentData",
    "./Dungeon": "Dungeon",
    "./Effect/ShadowOfSight": "ShadowOfSight",
    "./Equipment/Equipment": "Equipment",
    "./EventHelper": "EventHelper",
    "./Item/Item": "Item",
    "./Logic": "Logic",
    "./Manager/FloatingLabelManager": "FloatingLabelManager",
    "./Manager/InventoryManager": "InventoryManager",
    "./Manager/LightManager": "LightManager",
    "./Manager/StatusManager": "StatusManager",
    "./MeleeWeapon": "MeleeWeapon",
    "./PlayerAvatar": "PlayerAvatar",
    "./PlayerWeapon": "PlayerWeapon",
    "./Shield": "Shield",
    "./Shooter": "Shooter",
    "./Talent/OrganizationTalent": "OrganizationTalent",
    "./Talent/ProfessionTalent": "ProfessionTalent",
    "./Talent/Talent": "Talent",
    "./UI/Tips": "Tips",
    "./Utils/AudioPlayer": "AudioPlayer",
    "./Utils/IndexZ": "IndexZ",
    "./Utils/Random": "Random"
  } ],
  Portal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "deb90P3hX5AB5svKZmVAO6Q", "Portal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Player_1 = require("../Player");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../Utils/IndexZ");
    var Logic_1 = require("../Logic");
    var ExitData_1 = require("../Data/ExitData");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var EventHelper_1 = require("../EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Portal = function(_super) {
      __extends(Portal, _super);
      function Portal() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        _this.exitData = new ExitData_1.default();
        return _this;
      }
      Portal.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      Portal.prototype.start = function() {
        this.anim = this.getComponent(cc.Animation);
        this.anim.play("PortalCloseIdle");
      };
      Portal.prototype.setPos = function(pos) {
        this.node.position = Dungeon_1.default.getPosInMap(pos);
        this.node.zIndex = IndexZ_1.default.BASE + 10 * (Dungeon_1.default.HEIGHT_SIZE - pos.y) + 1;
      };
      Portal.prototype.AnimGateClose = function() {
        this.anim.play("PortalCloseIdle");
      };
      Portal.prototype.AnimGateOpen = function() {
        this.anim.play("PortalOpenIdle");
      };
      Portal.prototype.openGate = function() {
        var _this = this;
        if (this.isOpen) return;
        this.isOpen = true;
        this.scheduleOnce(function() {
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.play("PortalOpen");
        }, .1);
      };
      Portal.prototype.closeGate = function() {
        if (!this.isOpen) return;
        this.isOpen = false;
        this.anim.play("PortalClose");
      };
      Portal.prototype.onCollisionEnter = function(other, self) {
        var player = other.node.getComponent(Player_1.default);
        if (player && this.isOpen) {
          this.closeGate();
          Logic_1.default.playerData = player.data.clone();
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.EXIT
            }
          });
          Logic_1.default.loadingNextLevel(this.exitData);
        }
      };
      Portal = __decorate([ ccclass ], Portal);
      return Portal;
    }(Building_1.default);
    exports.default = Portal;
    cc._RF.pop();
  }, {
    "../Data/ExitData": "ExitData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Player": "Player",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  ProfessionData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a352fkUprhBDLnAwraLUc3I", "ProfessionData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CommonData_1 = require("./CommonData");
    var ProfessionData = function() {
      function ProfessionData() {
        this.id = 0;
        this.desc = "";
        this.nameCn = "";
        this.nameEn = "";
        this.equips = {};
        this.talent = "";
        this.items = [];
        this.common = new CommonData_1.default();
      }
      Object.defineProperty(ProfessionData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      ProfessionData.prototype.valueCopy = function(data) {
        this.common.valueCopy(data.common);
        this.nameCn = data.nameCn ? data.nameCn : this.nameCn;
        this.nameEn = data.nameEn ? data.nameEn : this.nameEn;
        this.desc = data.desc ? data.desc : this.desc;
        this.equips = data.equips ? data.equips : {};
        this.id = data.id ? data.id : 0;
        this.talent = data.talent ? data.talent : "";
        this.items = data.items ? data.items : [];
      };
      ProfessionData.prototype.clone = function() {
        var e = new ProfessionData();
        e.common = this.common.clone();
        e.nameCn = this.nameCn;
        e.nameEn = this.nameEn;
        e.desc = this.desc;
        e.id = this.id;
        e.equips = this.equips;
        e.talent = this.talent;
        e.items = this.items;
        return e;
      };
      return ProfessionData;
    }();
    exports.default = ProfessionData;
    cc._RF.pop();
  }, {
    "./CommonData": "CommonData"
  } ],
  ProfessionTalent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a250fm206dD/bouLDpaklSh", "ProfessionTalent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var FromData_1 = require("../Data/FromData");
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var Shooter_1 = require("../Shooter");
    var FireGhost_1 = require("./FireGhost");
    var Talent_1 = require("./Talent");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var IndexZ_1 = require("../Utils/IndexZ");
    var StatusManager_1 = require("../Manager/StatusManager");
    var PlayerAvatar_1 = require("../PlayerAvatar");
    var NonPlayer_1 = require("../NonPlayer");
    var Boss_1 = require("../Boss/Boss");
    var AreaOfEffectData_1 = require("../Data/AreaOfEffectData");
    var NonPlayerManager_1 = require("../Manager/NonPlayerManager");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var CoolDownView_1 = require("../UI/CoolDownView");
    var InventoryManager_1 = require("../Manager/InventoryManager");
    var Utils_1 = require("../Utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ProfessionTalent = function(_super) {
      __extends(ProfessionTalent, _super);
      function ProfessionTalent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.aoe = null;
        _this.fireball = null;
        _this.icethron = null;
        _this.fireGhost = null;
        _this.healingLight = null;
        _this.rageLight = null;
        _this.broomPrefab = null;
        _this.cookingPrefab = null;
        _this.swordLightPrefab = null;
        _this.smokePrefab = null;
        _this.skyhandPrefab = null;
        _this.fireGhostNum = 0;
        return _this;
      }
      ProfessionTalent.prototype.onLoad = function() {
        var _this = this;
        this.ghostPool = new cc.NodePool(FireGhost_1.default);
        cc.director.on("destoryfireghost", function(event) {
          _this.destroyGhost(event.detail.coinNode);
        });
      };
      ProfessionTalent.prototype.destroyGhost = function(ghostNode) {
        if (!ghostNode) return;
        ghostNode.active = false;
        if (this.ghostPool) {
          this.ghostPool.put(ghostNode);
          this.fireGhostNum--;
          cc.log("destroyGhost");
        }
      };
      ProfessionTalent.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.coolDownId = CoolDownView_1.default.PROFESSION;
        var storePointMax = 1;
        this.data.resName == Talent_1.default.TALENT_014 && (storePointMax = 3);
        this.initCoolDown(data, storePointMax);
      };
      ProfessionTalent.prototype.skillCanUse = function() {
        switch (this.data.resName) {
         case Talent_1.default.TALENT_009:
          return this.canSteal();

         case Talent_1.default.TALENT_019:
          return this.player.CanJump;
        }
        return true;
      };
      ProfessionTalent.prototype.doSkill = function() {
        this.excuteSkill(null);
        for (var _i = 0, _a = this.player.shadowList; _i < _a.length; _i++) {
          var s = _a[_i];
          s.node && this.excuteSkill(s);
        }
      };
      ProfessionTalent.prototype.excuteSkill = function(shadowPlayer) {
        var _this = this;
        var shooterEx = shadowPlayer ? shadowPlayer.shooterEx : this.player.shooterEx;
        switch (this.data.resName) {
         case Talent_1.default.TALENT_000:
          Utils_1.default.toast("\u68a6\u5883\u5f00\u53d1\u4e2d,\u65e0\u6cd5\u4f7f\u7528");
          break;

         case Talent_1.default.TALENT_001:
          AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
          this.shoot(shooterEx, 0, 0, "bullet040", null, null);
          break;

         case Talent_1.default.TALENT_002:
          this.healing();
          break;

         case Talent_1.default.TALENT_003:
          this.cooking(shooterEx);
          break;

         case Talent_1.default.TALENT_004:
          this.showIceThron(shooterEx);
          break;

         case Talent_1.default.TALENT_005:
          shadowPlayer || this.rageShoot();
          break;

         case Talent_1.default.TALENT_006:
          this.flash(shadowPlayer);
          break;

         case Talent_1.default.TALENT_007:
          this.addSwordLight(shooterEx);
          break;

         case Talent_1.default.TALENT_008:
          if (!shadowPlayer) {
            this.player.addStatus(StatusManager_1.default.TALENT_INVISIBLE, new FromData_1.default());
            break;
          }

         case Talent_1.default.TALENT_009:
          this.steal(shadowPlayer);
          break;

         case Talent_1.default.TALENT_010:
          Utils_1.default.toast("\u68a6\u5883\u5f00\u53d1\u4e2d,\u65e0\u6cd5\u4f7f\u7528");
          break;

         case Talent_1.default.TALENT_011:
          shadowPlayer || this.aimedShoot();
          break;

         case Talent_1.default.TALENT_012:
          this.addBroom(shooterEx);
          break;

         case Talent_1.default.TALENT_013:
          this.showFireBall(shooterEx);
          break;

         case Talent_1.default.TALENT_014:
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL1);
          this.shoot(shooterEx, Shooter_1.default.ARC_EX_NUM_8, 0, "bullet035", null, null);
          this.scheduleOnce(function() {
            _this.IsExcuting = false;
          }, .1);
          break;

         case Talent_1.default.TALENT_015:
          shadowPlayer || this.dash();
          break;

         case Talent_1.default.TALENT_016:
          this.addClearCircle(shadowPlayer);
          break;

         case Talent_1.default.TALENT_017:
          this.showSmoke(shooterEx);
          break;

         case Talent_1.default.TALENT_018:
          this.addShadowFighter(shadowPlayer);
          break;

         case Talent_1.default.TALENT_019:
          this.jump(shooterEx);
        }
      };
      ProfessionTalent.prototype.addClearCircle = function(shadowPlayer) {
        this.player.stopAllDebuffs();
        this.player.dungeon.nonPlayerManager.isPetAlive() && this.player.dungeon.nonPlayerManager.pet.stopAllDebuffs();
        this.addAoe(this.aoe, shadowPlayer ? shadowPlayer.getCenterPosition() : this.player.getCenterPosition(), new AreaOfEffectData_1.default().init(2, .2, 0, this.player.IsVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(this.player.getCenterPosition()), false, false, true, false, false, new DamageData_1.default(0), new FromData_1.default(), []), [ "clearcircle1", "clearcircle2", "clearcircle3", "clearcircle4" ], false, true);
      };
      ProfessionTalent.prototype.addShadowFighter = function(shadowPlayer) {
        for (var i = 0; i < 3; i++) this.player.weaponRight.meleeWeapon.dungeon.nonPlayerManager.addNonPlayerFromData(NonPlayerManager_1.default.NON_SHADOW, shadowPlayer ? shadowPlayer.node.position : this.player.node.position, this.player.weaponRight.meleeWeapon.dungeon);
      };
      ProfessionTalent.prototype.healing = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        var light = cc.instantiate(this.healingLight);
        light.parent = this.player.node;
        light.position = cc.v3(0, 64);
        light.zIndex = IndexZ_1.default.OVERHEAD;
        this.player.addStatus(StatusManager_1.default.HEALING, new FromData_1.default());
        this.player.dungeon.nonPlayerManager.isPetAlive() && this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.HEALING, new FromData_1.default());
      };
      ProfessionTalent.prototype.rageShoot = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.PICK_ITEM);
        var light = cc.instantiate(this.rageLight);
        light.parent = this.player.node;
        light.position = cc.v3(0, 64);
        light.zIndex = IndexZ_1.default.OVERHEAD;
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
          light && cc.isValid(light) && light.destroy();
        }, 3);
      };
      ProfessionTalent.prototype.flash = function(shadowPlayer) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.TAKEPHOTO);
        cc.tween(this.sprite.node).call(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_FLASH_SPEED, new FromData_1.default());
          _this.player.dungeon.nonPlayerManager.isPetAlive() && _this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.TALENT_FLASH_SPEED, new FromData_1.default());
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("flash");
          _this.sprite.node.width = 128;
          _this.sprite.node.height = 128;
          _this.sprite.node.opacity = 255;
          _this.sprite.node.position = cc.v3(0, 32);
        }).to(.1, {
          opacity: 0
        }).call(function() {
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("singleColor");
          _this.sprite.node.width = 2e3;
          _this.sprite.node.height = 2e3;
          _this.sprite.node.opacity = 255;
        }).to(.1, {
          opacity: 0
        }).call(function() {
          _this.addStatus2NearEnemy(shadowPlayer ? shadowPlayer.node : _this.player.node, StatusManager_1.default.TALENT_FLASH_DIZZ, _this.player.IsVariation ? 500 : 400);
          _this.sprite.spriteFrame = null;
        }).start();
      };
      ProfessionTalent.prototype.aimedShoot = function() {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.RELOAD);
        cc.tween(this.sprite.node).call(function() {
          _this.player.addStatus(StatusManager_1.default.TALENT_AIMED, new FromData_1.default());
          _this.player.dungeon.nonPlayerManager.isPetAlive() && _this.player.dungeon.nonPlayerManager.pet.addStatus(StatusManager_1.default.TALENT_AIMED, new FromData_1.default());
          _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talentshoot");
          _this.sprite.node.width = 64;
          _this.sprite.node.height = 64;
          _this.sprite.node.opacity = 255;
          _this.sprite.node.scale = 1;
          _this.sprite.node.position = cc.v3(0, 128);
        }).repeat(5, cc.tween().to(1, {
          scale: 1.5
        }).to(1, {
          scale: 1
        })).call(function() {
          _this.sprite.spriteFrame = null;
        }).start();
      };
      ProfessionTalent.prototype.dash = function() {
        var _this = this;
        var speed = 1500;
        this.player.IsVariation && (speed = 2e3);
        AudioPlayer_1.default.play(AudioPlayer_1.default.DASH);
        this.schedule(function() {
          _this.player.getWalkSmoke(_this.node.parent, _this.node.position);
        }, .05, 4, 0);
        var pos = this.player.rigidbody.linearVelocity.clone();
        this.player.sc.isMoving = false;
        pos = pos.equals(cc.Vec2.ZERO) ? cc.v2(this.player.Hv.clone()) : pos.normalizeSelf();
        var posv3 = cc.v3(pos.x, pos.y);
        this.hv = posv3.clone();
        pos = pos.mul(speed);
        this.player.rigidbody.linearVelocity = pos;
        this.scheduleOnce(function() {
          _this.player.rigidbody.linearVelocity = cc.Vec2.ZERO;
          _this.player.playerAnim(PlayerAvatar_1.default.STATE_IDLE, _this.player.currentDir);
          _this.IsExcuting = false;
        }, .5);
      };
      ProfessionTalent.prototype.jump = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.DASH);
        this.player.jump();
        this.scheduleOnce(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.BOOM);
          var d = _this.player.data.getFinalAttackPoint();
          d.isMelee = true;
          d.isCriticalStrike = true;
          var scale = 2;
          _this.player.IsVariation && (scale += 1);
          shooterEx.fireAoe(_this.skyhandPrefab, new AreaOfEffectData_1.default().init(0, .15, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, false, d, new FromData_1.default(), [ StatusManager_1.default.DIZZ ]));
          _this.talentSkill.IsExcuting = false;
        }, .8);
      };
      ProfessionTalent.prototype.canSteal = function() {
        var actor = ActorUtils_1.default.getNearestEnemyActor(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon);
        if (!actor) return false;
        var monster = actor.getComponent(NonPlayer_1.default);
        var boss = actor.getComponent(Boss_1.default);
        if (monster && monster.data.isTest < 1) return true;
        if (boss) return true;
        return false;
      };
      ProfessionTalent.prototype.steal = function(shadowPlayer) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.FIREBALL);
        var node = ActorUtils_1.default.getNearestEnemyActor(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon);
        if (!node) return;
        var monster = node.getComponent(NonPlayer_1.default);
        var boss = node.getComponent(Boss_1.default);
        monster && monster.data.isTest < 1 && monster.getLoot();
        boss && boss.getLoot();
        if (!shadowPlayer) {
          this.sprite.node.width = 128;
          this.sprite.node.height = 128;
          this.sprite.node.opacity = 255;
          this.sprite.node.scale = 1;
          this.sprite.node.position = cc.v3(0, 128);
          cc.tween(this.sprite.node).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand01");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand02");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand03");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = Logic_1.default.spriteFrameRes("talenthand04");
          }).delay(.2).call(function() {
            _this.sprite.spriteFrame = null;
          }).start();
        }
      };
      ProfessionTalent.prototype.showSmoke = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        var scale = 1;
        this.player.IsVariation && (scale += 1);
        this.shoot(shooterEx, 0, 0, "bullet041", this.smokePrefab, new AreaOfEffectData_1.default().init(7, .1, 0, scale, IndexZ_1.default.OVERHEAD, false, false, false, false, false, new DamageData_1.default(), new FromData_1.default(), [ StatusManager_1.default.WINE_CLOUD ]));
      };
      ProfessionTalent.prototype.showFireBall = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_FIREBALL);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        d.isMelee = true;
        var scale = 4;
        this.player.IsVariation && (scale += 1);
        shooterEx.fireAoe(this.fireball, new AreaOfEffectData_1.default().init(0, .1, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.BURNING ]));
      };
      ProfessionTalent.prototype.showIceThron = function(shooterEx) {
        this.scheduleOnce(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_ICETHRON);
        }, 1);
        var d = new DamageData_1.default();
        d.magicDamage = 3 + Logic_1.default.playerData.OilGoldData.level;
        d.isMelee = true;
        var offset1 = 100;
        var offset2 = 60;
        var scale = 3;
        if (this.player.IsVariation) {
          scale += 1;
          offset1 = 150;
          offset2 = 90;
        }
        var angles1 = [ 0, 45, 90, 135, 180, 225, 270, 315 ];
        var posRight = [ cc.v3(0, offset1), cc.v3(-offset2, offset2), cc.v3(-offset1, 0), cc.v3(-offset2, -offset2), cc.v3(0, -offset1), cc.v3(offset2, -offset2), cc.v3(offset1, 0), cc.v3(offset2, offset2) ];
        var posLeft = [ cc.v3(0, -offset1), cc.v3(-offset2, -offset2), cc.v3(-offset1, 0), cc.v3(-offset2, offset2), cc.v3(0, offset1), cc.v3(offset2, offset2), cc.v3(offset1, 0), cc.v3(offset2, -offset2) ];
        var a1 = [ angles1 ];
        var a = a1;
        var index = 0;
        for (var i = 0; i < a[index].length; i++) shooterEx.fireAoe(this.icethron, new AreaOfEffectData_1.default().init(0, 2, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.v3(this.player.isFaceRight ? posRight[i] : posLeft[i]), angles1[i], null, true);
      };
      ProfessionTalent.prototype.changePerformance = function() {};
      ProfessionTalent.prototype.takeDamage = function(damageData, actor) {
        return false;
      };
      ProfessionTalent.prototype.addLighteningFall = function(isArea, damagePoint) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_LIGHTENINGFALL, {
          pos: ActorUtils_1.default.getNearestEnemyPosition(this.player.node.position, false, this.player.weaponRight.meleeWeapon.dungeon, true),
          showArea: isArea,
          damage: damagePoint
        });
      };
      ProfessionTalent.prototype.addBroom = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        var scale = 1.5;
        this.player.IsVariation && (scale += 1);
        shooterEx.fireAoe(this.broomPrefab, new AreaOfEffectData_1.default().init(0, .5, .2, scale, IndexZ_1.default.OVERHEAD, false, true, true, true, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]), cc.v3(0, 32 * this.player.node.scaleY));
      };
      ProfessionTalent.prototype.cooking = function(shooterEx) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.MELEE_PARRY);
        var d = this.player.data.getFinalAttackPoint();
        d.isMelee = true;
        var scale = 1;
        this.player.IsVariation && (scale += 1);
        shooterEx.fireAoe(this.cookingPrefab, new AreaOfEffectData_1.default().init(0, 2, 0, scale, IndexZ_1.default.OVERHEAD, false, false, false, false, false, d, new FromData_1.default(), []), cc.v3(0, 32), 0, function(actor) {
          var monster = actor.node.getComponent(NonPlayer_1.default);
          monster && monster.dungeon.addItem(monster.node.position.clone(), "food" + monster.data.resName.replace("monster", ""));
          var boss = actor.node.getComponent(Boss_1.default);
          boss && boss.dungeon.addItem(boss.node.position.clone(), "foodboss" + boss.data.resName.replace("iconboss", ""));
        });
      };
      ProfessionTalent.prototype.addSwordLight = function(shooterEx) {
        var _this = this;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL);
        AudioPlayer_1.default.play(AudioPlayer_1.default.SWORD_SHOW);
        var d = new DamageData_1.default();
        d.isMelee = true;
        var scale = 5;
        d.physicalDamage = 2 + Logic_1.default.playerData.OilGoldData.level;
        if (this.player.weaponRight.meleeWeapon.IsSword) {
          d = this.player.data.getFinalAttackPoint();
          scale = 6;
        }
        this.player.IsVariation && (scale += 1);
        var swordlight = shooterEx.fireAoe(this.swordLightPrefab, new AreaOfEffectData_1.default().init(0, .35, 0, scale, IndexZ_1.default.OVERHEAD, false, true, true, false, true, d, new FromData_1.default(), [ StatusManager_1.default.FROZEN ]));
        var color = cc.color(255, 255, 255).fromHEX(this.player.inventoryManager.equips[InventoryManager_1.default.WEAPON].lightcolor);
        swordlight.node.getChildByName("sprite").color = color;
        this.scheduleOnce(function() {
          _this.talentSkill.IsExcuting = false;
        }, 1);
      };
      ProfessionTalent.prototype.initFireGhosts = function() {
        var length = 5;
        var count = this.fireGhostNum;
        for (var i = 0; i < length - count; i++) {
          var ghostNode = null;
          this.ghostPool.size() > 0 && (ghostNode = this.ghostPool.get());
          ghostNode && !ghostNode.active || (ghostNode = cc.instantiate(this.fireGhost));
          this.fireGhostNum++;
          ghostNode.active = true;
          var fg = ghostNode.getComponent(FireGhost_1.default);
          this.player.node.parent.addChild(fg.node);
          fg.init(this.player, 72 * i);
        }
      };
      __decorate([ property(cc.Sprite) ], ProfessionTalent.prototype, "sprite", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "aoe", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "fireball", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "icethron", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "fireGhost", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "healingLight", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "rageLight", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "broomPrefab", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "cookingPrefab", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "swordLightPrefab", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "smokePrefab", void 0);
      __decorate([ property(cc.Prefab) ], ProfessionTalent.prototype, "skyhandPrefab", void 0);
      ProfessionTalent = __decorate([ ccclass ], ProfessionTalent);
      return ProfessionTalent;
    }(Talent_1.default);
    exports.default = ProfessionTalent;
    cc._RF.pop();
  }, {
    "../Boss/Boss": "Boss",
    "../Data/AreaOfEffectData": "AreaOfEffectData",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/InventoryManager": "InventoryManager",
    "../Manager/NonPlayerManager": "NonPlayerManager",
    "../Manager/StatusManager": "StatusManager",
    "../NonPlayer": "NonPlayer",
    "../PlayerAvatar": "PlayerAvatar",
    "../Shooter": "Shooter",
    "../UI/CoolDownView": "CoolDownView",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "../Utils/Utils": "Utils",
    "./FireGhost": "FireGhost",
    "./Talent": "Talent"
  } ],
  ProfileData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ba48LTPitPa5dUl/wXJcJ0", "ProfileData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerData_1 = require("./PlayerData");
    var SavePointData_1 = require("./SavePointData");
    var GroundOilGoldData_1 = require("./GroundOilGoldData");
    var ProfileData = function() {
      function ProfileData() {
        this.rectDungeons = {};
        this.chapterIndex = 0;
        this.chapterMaxIndex = 0;
        this.playerData = new PlayerData_1.default();
        this.playerEquips = {};
        this.playerItemList = new Array();
        this.playerInventoryList = new Array();
        this.nonPlayerList = new Array();
        this.level = 0;
        this.time = "00:00:00";
        this.savePointData = new SavePointData_1.default();
        this.groundOilGoldData = new GroundOilGoldData_1.default();
        this.oilGolds = 0;
        this.killPlayerCounts = {};
      }
      return ProfileData;
    }();
    exports.default = ProfileData;
    cc._RF.pop();
  }, {
    "./GroundOilGoldData": "GroundOilGoldData",
    "./PlayerData": "PlayerData",
    "./SavePointData": "SavePointData"
  } ],
  ProfileManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5915dTUdVpDi5LG7x2qxIEk", "ProfileManager");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfileData_1 = require("../Data/ProfileData");
    var RectDungeon_1 = require("../Rect/RectDungeon");
    var LocalStorage_1 = require("../Utils/LocalStorage");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ProfileManager = function() {
      function ProfileManager() {
        this.data = new ProfileData_1.default();
        this.hasSaveData = false;
        this.loadData();
      }
      ProfileManager.prototype.loadData = function() {
        this.loadProfile();
      };
      ProfileManager.prototype.getSaveData = function() {
        var s = LocalStorage_1.default.getValue(LocalStorage_1.default.SAVE_DUNGEON);
        if (s) return JSON.parse(s);
        return null;
      };
      ProfileManager.prototype.saveData = function() {
        LocalStorage_1.default.putValue(LocalStorage_1.default.SAVE_DUNGEON, this.data);
        this.hasSaveData = true;
        console.log("save data");
      };
      ProfileManager.prototype.clearData = function() {
        cc.sys.localStorage.setItem("data", "");
        this.hasSaveData = false;
        this.data = new ProfileData_1.default();
        console.log("clear data");
      };
      ProfileManager.prototype.loadProfile = function() {
        var data = this.getSaveData();
        if (!data) {
          this.hasSaveData = false;
          return false;
        }
        if (!data.savePointData || !data.playerData || !data.playerEquips || !data.playerItemList || !data.rectDungeons) {
          this.hasSaveData = false;
          return false;
        }
        this.data = new ProfileData_1.default();
        this.hasSaveData = true;
        this.data.playerData.valueCopy(data.playerData);
        this.data.chapterIndex = data.chapterIndex;
        this.data.chapterMaxIndex = data.chapterMaxIndex;
        this.data.level = data.level;
        this.data.savePointData.valueCopy(data.savePointData);
        this.data.oilGolds = data.oilGolds ? data.oilGolds : 0;
        this.data.groundOilGoldData.valueCopy(data.groundOilGoldData);
        for (var key in data.playerEquips) this.data.playerEquips[key] = data.playerEquips[key];
        if (data.playerItemList) for (var i = 0; i < data.playerItemList.length; i++) this.data.playerItemList[i] = data.playerItemList[i];
        if (data.playerInventoryList) for (var i = 0; i < data.playerInventoryList.length; i++) this.data.playerInventoryList[i] = data.playerInventoryList[i];
        if (data.nonPlayerList) for (var i = 0; i < data.nonPlayerList.length; i++) this.data.nonPlayerList[i] = data.nonPlayerList[i];
        for (var key in data.rectDungeons) {
          var rect = new RectDungeon_1.default();
          rect.buildMapFromSave(data.rectDungeons[key]);
          this.data.rectDungeons[key] = rect;
        }
        data.killPlayerCounts && (this.data.killPlayerCounts = data.killPlayerCounts);
        data.time && (this.data.time = data.time);
        console.log("data", this);
        return true;
      };
      ProfileManager = __decorate([ ccclass ], ProfileManager);
      return ProfileManager;
    }();
    exports.default = ProfileManager;
    cc._RF.pop();
  }, {
    "../Data/ProfileData": "ProfileData",
    "../Rect/RectDungeon": "RectDungeon",
    "../Utils/LocalStorage": "LocalStorage"
  } ],
  Rah: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d367aUD8qtMnYoMv/zpvvi2", "Rah");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var DamageData_1 = require("../Data/DamageData");
    var Shooter_1 = require("../Shooter");
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var StatusManager_1 = require("../Manager/StatusManager");
    var NextStep_1 = require("../Utils/NextStep");
    var EventHelper_1 = require("../EventHelper");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Rah = function(_super) {
      __extends(Rah, _super);
      function Rah() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isFaceRight = true;
        _this.isMoving = false;
        _this.darkSkill = new NextStep_1.default();
        _this.blinkSkill = new NextStep_1.default();
        _this.snakeSkill = new NextStep_1.default();
        _this.bugsSkill = new NextStep_1.default();
        _this.meleeSkill = new NextStep_1.default();
        _this.actionTimeDelay = 0;
        return _this;
      }
      Rah.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter = this.node.getChildByName("Shooter").getComponent(Shooter_1.default);
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.shooter.from.valueCopy(FromData_1.default.getClone(this.actorName(), "bossrahhead"));
      };
      Rah.prototype.start = function() {
        _super.prototype.start.call(this);
      };
      Rah.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow || this.blinkSkill.IsExcuting) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Rah.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        cc.tween(this.node).to(3, {
          opacity: 0
        }).start();
        this.sc.isDied = true;
        cc.tween(this.dungeon.fog).to(3, {
          scale: 5
        }).start();
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Rah.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.node.position = Dungeon_1.default.fixOuterMap(this.node.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.node.position);
        this.changeZIndex();
        var newPos = this.dungeon.player.pos.clone();
        var pos = Dungeon_1.default.getPosInMap(newPos).sub(this.node.position);
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        this.isFaceRight = h > 0;
        var isHalf = this.data.currentHealth < this.data.Common.maxHealth / 2;
        playerDis < 100 && (this.rigidbody.linearVelocity = cc.Vec2.ZERO);
        Logic_1.default.getChance(20) && isHalf && this.dark();
        Logic_1.default.getChance(80) && this.blink();
        playerDis < 600 && !this.blinkSkill.IsExcuting && this.fireSnake();
        Logic_1.default.getChance(90) && !this.blinkSkill.IsExcuting && this.fireBugs(isHalf);
        playerDis < 100 && !this.blinkSkill.IsExcuting && this.attack();
        if (!pos.equals(cc.Vec3.ZERO) && !this.meleeSkill.IsExcuting && !this.blinkSkill.IsExcuting && playerDis > 100) {
          pos = pos.normalizeSelf();
          this.move(pos, 100);
        }
      };
      Rah.prototype.blink = function() {
        var _this = this;
        this.blinkSkill.next(function() {
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.BLINK
            }
          });
          _this.blinkSkill.IsExcuting = true;
          _this.rigidbody.linearVelocity = cc.Vec2.ZERO;
          cc.tween(_this.node).to(1, {
            opacity: 0
          }).call(function() {
            var p = _this.dungeon.player.pos.clone();
            p.y > Dungeon_1.default.HEIGHT_SIZE - 1 ? p.y -= 1 : p.y += 1;
            _this.transportBoss(p.x, p.y);
          }).to(1, {
            opacity: 255
          }).call(function() {
            _this.attack();
          }).start();
          _this.scheduleOnce(function() {
            _this.blinkSkill.IsExcuting = false;
          }, 5);
        }, 10);
        return;
      };
      Rah.prototype.attack = function() {
        var _this = this;
        this.meleeSkill.next(function() {
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.MELEE
            }
          });
          _this.meleeSkill.IsExcuting = true;
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.playAdditive("RahAttack001");
        }, 2, true);
      };
      Rah.prototype.dark = function() {
        var _this = this;
        this.darkSkill.next(function() {
          cc.tween(_this.dungeon.fog).to(2, {
            scale: 1.75
          }).to(6, {
            angle: 0
          }).to(2, {
            scale: .6
          }).start();
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.playAdditive("RahSpellDark");
        }, 20);
      };
      Rah.prototype.fireSnake = function() {
        var _this = this;
        this.snakeSkill.next(function() {
          _this.shooter.setHv(cc.v3(0, -1));
          var pos = _this.node.position.clone().add(_this.shooter.node.position);
          var hv = _this.dungeon.player.getCenterPosition().sub(pos);
          if (!hv.equals(cc.Vec3.ZERO)) {
            hv = hv.normalizeSelf();
            _this.shooter.setHv(hv);
            _this.fireShooter(_this.shooter, "bullet014", 1, 0);
          }
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.playAdditive("RahSpellSnake");
        }, 6);
      };
      Rah.prototype.fireBugs = function(isHalf) {
        var _this = this;
        this.bugsSkill.next(function() {
          _this.shooter.data.bulletLineInterval = .5;
          var pos = _this.node.position.clone().add(_this.shooter.node.position);
          var hv = _this.dungeon.player.getCenterPosition().sub(pos);
          if (!hv.equals(cc.Vec3.ZERO)) {
            hv = hv.normalizeSelf();
            _this.shooter.setHv(hv);
          }
          _this.fireShooter(_this.shooter, "bullet017", 99, 0);
          _this.anim || (_this.anim = _this.getComponent(cc.Animation));
          _this.anim.playAdditive("RahSpellBugs");
        }, 4);
      };
      Rah.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle);
      };
      Rah.prototype.showBoss = function() {
        this.sc.isShow = true;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      Rah.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Rah.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.sc.isDied && (this.rigidbody.linearVelocity = cc.Vec2.ZERO);
        this.node.scaleX = this.isFaceRight ? 1 : -1;
      };
      Rah.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.node.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.changeZIndex();
      };
      Rah.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.meleeSkill.IsExcuting && !this.sc.isDied) {
          var d = new DamageData_1.default();
          d.physicalDamage = 15;
          target.takeDamage(d, FromData_1.default.getClone(this.actorName(), "bossrahhead"), this);
        }
      };
      Rah.prototype.actorName = function() {
        return "\u673a\u68b0\u62c9\u795e";
      };
      Rah = __decorate([ ccclass ], Rah);
      return Rah;
    }(Boss_1.default);
    exports.default = Rah;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Shooter": "Shooter",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/NextStep": "NextStep",
    "./Boss": "Boss"
  } ],
  Random4Save: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74f98/L5YNOk7ZP1QlogXyD", "Random4Save");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Random4Save = function() {
      function Random4Save(seed) {
        this.seed = 0;
        this.seed = seed;
        seed <= 0 && (seed = new Date().getTime());
      }
      Object.defineProperty(Random4Save.prototype, "Seed", {
        get: function() {
          return this.seed;
        },
        set: function(seed) {
          this.seed = seed;
        },
        enumerable: false,
        configurable: true
      });
      Random4Save.prototype.rand = function() {
        this.seed = (9301 * this.seed + 49297) % 233280;
        return this.seed / 233280;
      };
      Random4Save.prototype.getRandomNum = function(min, max) {
        return min + Math.round(this.rand() * (max - min));
      };
      Random4Save.prototype.getHalfChance = function() {
        return this.rand() > .5;
      };
      return Random4Save;
    }();
    exports.default = Random4Save;
    cc._RF.pop();
  }, {} ],
  Random: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b33a81ZfJ9HoIP2sjcUTtfA", "Random");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Random = function() {
      function Random() {}
      Random.prototype.setSeed = function(seed) {
        Random.seed = seed;
      };
      Random.rand = function() {
        Random.seed = (9301 * Random.seed + 49297) % 233280;
        return Random.seed / 233280;
      };
      Random.getRandomNum = function(min, max) {
        return min + Math.round(Random.rand() * (max - min));
      };
      Random.getHalfChance = function() {
        return Random.rand() > .5;
      };
      Random.seed = new Date().getTime();
      return Random;
    }();
    exports.default = Random;
    cc._RF.pop();
  }, {} ],
  RectDoor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d41e5HipSBBVLDWw2G1WR/C", "RectDoor");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RectDoor = function() {
      function RectDoor(dir, isDoor, isHidden) {
        this.isDoor = false;
        this.isHidden = false;
        this.dir = dir;
        this.isDoor = isDoor;
        this.isHidden = isHidden;
      }
      return RectDoor;
    }();
    exports.default = RectDoor;
    cc._RF.pop();
  }, {} ],
  RectDungeon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b710jO571KQpPd9DCAmaJb", "RectDungeon");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RectRoom_1 = require("./RectRoom");
    var RoomType_1 = require("./RoomType");
    var BuildingData_1 = require("../Data/BuildingData");
    var EquipmentData_1 = require("../Data/EquipmentData");
    var ItemData_1 = require("../Data/ItemData");
    var RectDungeon = function() {
      function RectDungeon() {
        this.id = "00";
        this.width = 0;
        this.height = 0;
        this.currentPos = cc.v3(1, 1);
        this.buildings = {};
        this.equipments = {};
        this.items = {};
        this.startIndex = cc.Vec2.ZERO;
        this.endIndex = cc.v2(-1, -1);
      }
      RectDungeon.prototype.buildMapFromSave = function(dungeon, levelData) {
        this.id = dungeon.id;
        this.width = dungeon.width;
        this.height = dungeon.height;
        this.map = new Array();
        this.currentPos = dungeon.currentPos ? cc.v3(dungeon.currentPos.x, dungeon.currentPos.y) : cc.v3(0, 0);
        for (var key1 in dungeon.buildings) {
          var map = dungeon.buildings[key1];
          this.buildings[key1] = {};
          for (var key2 in map) {
            var data = new BuildingData_1.default();
            data.valueCopy(map[key2]);
            this.buildings[key1][key2] = data;
          }
        }
        for (var key in dungeon.equipments) {
          var list = dungeon.equipments[key];
          this.equipments[key] = new Array();
          for (var i = 0; i < list.length; i++) {
            var equip = new EquipmentData_1.default();
            equip.valueCopy(list[i]);
            this.equipments[key][i] = equip;
          }
        }
        for (var key in dungeon.items) {
          var list = dungeon.items[key];
          this.items[key] = new Array();
          for (var i = 0; i < list.length; i++) {
            var item = new ItemData_1.default();
            item.valueCopy(list[i]);
            this.items[key][i] = item;
          }
        }
        for (var i = 0; i < this.width; i++) {
          this.map[i] = new Array();
          for (var j = 0; j < this.height; j++) {
            this.map[i][j] = new RectRoom_1.default(i, j, RoomType_1.default.EMPTY_ROOM).initFromSave(dungeon.map[i][j]);
            levelData && (this.map[i][j].roomType = RoomType_1.default.getTypeByName(levelData.roomTypes[i][j]));
            if (this.map[i][j].roomType.isEqual(RoomType_1.default.START_ROOM)) {
              this.map[i][j].state != RectRoom_1.default.STATE_CLEAR && (this.map[i][j].state = RectRoom_1.default.STATE_FOUND);
              this.startIndex = cc.v2(i, j);
            }
            if (this.map[i][j].roomType.isEqual(RoomType_1.default.END_ROOM)) {
              this.map[i][j].state != RectRoom_1.default.STATE_CLEAR && (this.map[i][j].state = RectRoom_1.default.STATE_FOUND);
              this.endIndex = cc.v2(i, j);
            }
          }
        }
        this.endIndex.x < 0 && this.endIndex.y < 0 && (this.endIndex = this.startIndex.clone());
        return this;
      };
      RectDungeon.prototype.buildMap = function(levelData) {
        this.map = new Array();
        this.id = "" + levelData.chapter + levelData.index;
        this.width = levelData.width;
        this.height = levelData.height;
        this.buildings = {};
        this.equipments = {};
        this.items = {};
        for (var i = 0; i < levelData.width; i++) {
          this.map[i] = new Array();
          for (var j = 0; j < levelData.height; j++) {
            this.map[i][j] = new RectRoom_1.default(i, j, RoomType_1.default.getTypeByName(levelData.roomTypes[i][j]));
            if (this.map[i][j].roomType.isEqual(RoomType_1.default.START_ROOM)) {
              this.map[i][j].state != RectRoom_1.default.STATE_CLEAR && (this.map[i][j].state = RectRoom_1.default.STATE_FOUND);
              this.startIndex = cc.v2(i, j);
            }
            if (this.map[i][j].roomType.isEqual(RoomType_1.default.END_ROOM)) {
              this.map[i][j].state != RectRoom_1.default.STATE_CLEAR && (this.map[i][j].state = RectRoom_1.default.STATE_FOUND);
              this.endIndex = cc.v2(i, j);
            }
          }
        }
        this.endIndex.x < 0 && this.endIndex.y < 0 && (this.endIndex = this.startIndex.clone());
      };
      RectDungeon.prototype.getDisPlay = function() {
        var str = "";
        for (var j = this.height - 1; j >= 0; j--) {
          for (var i = 0; i < this.width; i++) str += this.map[i][j].roomType.NAME;
          str += "\n";
        }
        return str;
      };
      RectDungeon.prototype.getNeighborRoom = function(i, j, dir) {
        var x = i;
        var y = j;
        if (-1 == dir) return this.map[x][y];
        0 == dir && (y += 1);
        1 == dir && (y -= 1);
        2 == dir && (x -= 1);
        3 == dir && (x += 1);
        if (x >= this.width || x < 0 || y >= this.height || y < 0 || dir < 0 || dir > 4) return null;
        return this.map[x][y];
      };
      RectDungeon.prototype.changeRoomsIsFound = function(x, y) {
        this.changeRoomIsFound(x, y);
        this.changeRoomIsFound(x + 1, y);
        this.changeRoomIsFound(x - 1, y);
        this.changeRoomIsFound(x, y + 1);
        this.changeRoomIsFound(x, y - 1);
        this.changeRoomIsFound(x + 1, y - 1);
        this.changeRoomIsFound(x - 1, y - 1);
        this.changeRoomIsFound(x + 1, y - 1);
        this.changeRoomIsFound(x - 1, y - 1);
      };
      RectDungeon.prototype.changeRoomIsFound = function(x, y) {
        if (x >= this.width || x < 0 || y >= this.height || y < 0) return;
        this.map[x][y].state != RectRoom_1.default.STATE_CLEAR && (this.map[x][y].state = RectRoom_1.default.STATE_FOUND);
      };
      RectDungeon.isRoomEqual = function(room1, room2) {
        return room1.x == room2.x && room1.y == room2.y;
      };
      RectDungeon.prototype.changeAllClearRoomsReborn = function() {
        for (var i = 0; i < this.width; i++) for (var j = 0; j < this.height; j++) if (this.map[i][j].isClear()) {
          this.map[i][j].reborn++;
          this.map[i][j].isReborn = true;
        }
      };
      return RectDungeon;
    }();
    exports.default = RectDungeon;
    cc._RF.pop();
  }, {
    "../Data/BuildingData": "BuildingData",
    "../Data/EquipmentData": "EquipmentData",
    "../Data/ItemData": "ItemData",
    "./RectRoom": "RectRoom",
    "./RoomType": "RoomType"
  } ],
  RectRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d55edjfV4pLuKPki2DqAONx", "RectRoom");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RoomType_1 = require("./RoomType");
    var Random_1 = require("../Utils/Random");
    var RectRoom = function() {
      function RectRoom(x, y, roomType) {
        this.state = RectRoom.STATE_SLEEP;
        this.seed = 0;
        this.isReborn = false;
        this.reborn = 0;
        this.x = x;
        this.y = y;
        this.roomType = roomType;
        this.seed = RectRoom.getRandomNum(0, 1e8);
        this.init();
      }
      RectRoom.prototype.initFromSave = function(room) {
        if (!room) return;
        this.x = room.x;
        this.y = room.y;
        this.roomType = new RoomType_1.default(0, "");
        this.roomType.valueCopy(room.roomType);
        this.state = room.state;
        this.reborn = room.reborn;
        this.isReborn = room.isReborn;
        this.seed = room.seed ? room.seed : RectRoom.getRandomNum(0, 1e8);
        return this;
      };
      RectRoom.prototype.init = function() {
        this.state = RectRoom.STATE_SLEEP;
      };
      RectRoom.prototype.isFound = function() {
        return this.state == RectRoom.STATE_FOUND || this.state == RectRoom.STATE_CLEAR;
      };
      RectRoom.prototype.isClear = function() {
        return this.state == RectRoom.STATE_CLEAR;
      };
      RectRoom.getRandomNum = function(min, max) {
        return min + Math.round(Random_1.default.rand() * (max - min));
      };
      RectRoom.STATE_SLEEP = 0;
      RectRoom.STATE_FOUND = 1;
      RectRoom.STATE_CLEAR = 2;
      return RectRoom;
    }();
    exports.default = RectRoom;
    cc._RF.pop();
  }, {
    "../Utils/Random": "Random",
    "./RoomType": "RoomType"
  } ],
  RoomBed: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3cd15zS7p1FoqGJnOp3C8cF", "RoomBed");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ExitData_1 = require("../Data/ExitData");
    var FromData_1 = require("../Data/FromData");
    var Dungeon_1 = require("../Dungeon");
    var ShadowOfSight_1 = require("../Effect/ShadowOfSight");
    var Logic_1 = require("../Logic");
    var StatusManager_1 = require("../Manager/StatusManager");
    var Player_1 = require("../Player");
    var Tips_1 = require("../UI/Tips");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomBed = function(_super) {
      __extends(RoomBed, _super);
      function RoomBed() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isWakeUp = false;
        _this.isFirst = true;
        _this.isDecorate = false;
        return _this;
      }
      RoomBed.prototype.onLoad = function() {
        var _this = this;
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
        this.tips = this.getComponentInChildren(Tips_1.default);
        this.tips.onInteract(function(isLongPress, player) {
          _this.node && _this.enterDream(player);
        });
      };
      RoomBed.prototype.init = function(dungeon, isDecorate) {
        this.dungeon = dungeon;
        this.isDecorate = isDecorate;
        this.tips.node.active = !isDecorate;
      };
      RoomBed.prototype.start = function() {
        this.node.getChildByName("sprite").getChildByName("bed").getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("avatarbed00" + Logic_1.default.playerData.AvatarData.organizationIndex);
        this.node.getChildByName("sprite").getChildByName("cover").getComponent(cc.Sprite).spriteFrame = Logic_1.default.spriteFrameRes("avatarcover00" + Logic_1.default.playerData.AvatarData.organizationIndex);
        for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(!this.isDecorate);
        }
      };
      RoomBed.prototype.onCollisionEnter = function(other, self) {
        if (this.isDecorate) return;
        var player = other.node.getComponent(Player_1.default);
        this.enterDream(player);
      };
      RoomBed.prototype.enterDream = function(player) {
        var _this = this;
        if (player && !this.isWakeUp && this.isFirst) {
          this.isFirst = false;
          this.dungeon && (this.dungeon.CameraZoom = Dungeon_1.default.DEFAULT_ZOOM_MAX);
          player.addStatus(StatusManager_1.default.DIZZ, new FromData_1.default());
          this.scheduleOnce(function() {
            Logic_1.default.playerData = player.data.clone();
            Logic_1.default.playerData.pos.equals(_this.data.defaultPos) && (Logic_1.default.playerData.pos.y = _this.data.defaultPos.y - 1);
            AudioPlayer_1.default.play(AudioPlayer_1.default.EXIT);
            Logic_1.default.loadingNextLevel(ExitData_1.default.getDreamExitDataFromReal());
          }, .5);
        }
      };
      RoomBed.prototype.onCollisionExit = function(other, self) {
        if (this.isDecorate) return;
        var player = other.node.getComponent(Player_1.default);
        player && !this.isWakeUp && (this.isWakeUp = true);
      };
      RoomBed = __decorate([ ccclass ], RoomBed);
      return RoomBed;
    }(Building_1.default);
    exports.default = RoomBed;
    cc._RF.pop();
  }, {
    "../Data/ExitData": "ExitData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../Effect/ShadowOfSight": "ShadowOfSight",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Player": "Player",
    "../UI/Tips": "Tips",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  RoomFishtank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30f0d2Yp1xAsZ+my9YFNTdG", "RoomFishtank");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var Utils_1 = require("../Utils/Utils");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomFishtank = function(_super) {
      __extends(RoomFishtank, _super);
      function RoomFishtank() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.fish = null;
        _this.food = null;
        _this.layout = null;
        _this.isFeeding = false;
        _this.foodList = [];
        _this.isFirst = true;
        _this.showAudio = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      RoomFishtank.prototype.onLoad = function() {
        this.fishSprite = this.fish.getChildByName("sprite").getComponent(cc.Sprite);
        this.fishIdle();
        this.fishMove();
      };
      RoomFishtank.prototype.init = function(indexPos) {
        this.data.defaultPos = indexPos;
      };
      RoomFishtank.prototype.zoomCamera = function(zoomIn) {
        if (this.isFirst) return;
        this.showAudio = !!zoomIn;
        EventHelper_1.EventHelper.emit(zoomIn ? EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN : EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_OUT);
      };
      RoomFishtank.prototype.feed = function() {
        var _this = this;
        if (this.isFeeding) return;
        if (this.foodList.length > 50) {
          Utils_1.default.toast("\u5582\u5f97\u592a\u591a\u4e86\u554a");
          return;
        }
        this.isFirst = false;
        this.zoomCamera(true);
        for (var i = 0; i < 5; i++) this.initFood();
        this.isFeeding = true;
        this.unscheduleAllCallbacks();
        AudioPlayer_1.default.play(AudioPlayer_1.default.FEED_FISH);
        this.scheduleOnce(function() {
          _this.isFeeding = false;
        }, 2);
      };
      RoomFishtank.prototype.initFood = function() {
        var _this = this;
        var food = cc.instantiate(this.food);
        food.parent = this.layout;
        var width = this.layout.width;
        var height = this.layout.height;
        var startPos = cc.v3(Logic_1.default.getRandomNum(food.width / 2, width - food.width / 2 - this.fish.width * this.fish.anchorX), Logic_1.default.getRandomNum(height, 1.5 * height));
        var endPos = cc.v3(startPos.x, Logic_1.default.getRandomNum(food.height / 2 + this.fish.height * this.fish.anchorY, height / 2));
        food.position = startPos;
        var duration = Logic_1.default.getRandomNum(700, 1e3) / 1e3;
        cc.tween(food).call(function() {
          _this.scheduleOnce(function() {
            _this.foodList.push(food);
          }, duration / 2);
        }).to(duration, {
          position: endPos
        }).start();
      };
      RoomFishtank.prototype.changeFishRes = function(resName, suffix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + suffix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(resName));
        this.fishSprite.spriteFrame = spriteFrame;
      };
      RoomFishtank.prototype.fishIdle = function() {
        var _this = this;
        var action = cc.tween().delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim002");
        }).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim003");
        }).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim004");
        }).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim005");
        });
        this.fishSprite.node.stopAllActions();
        cc.tween(this.fishSprite.node).repeatForever(action).start();
      };
      RoomFishtank.prototype.fishEat = function(index) {
        var _this = this;
        this.fishSprite.node.stopAllActions();
        cc.tween(this.fishSprite.node).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim010");
          if (index >= 0 && index < _this.foodList.length && _this.foodList[index].isValid) {
            _this.foodList[index].active = false;
            _this.foodList[index].destroy();
            _this.foodList.splice(index, 1);
          }
        }).delay(.2).call(function() {
          _this.changeFishRes("nonplayer102anim009");
        }).delay(.2).call(function() {
          _this.fishIdle();
          _this.foodList.length > 0 ? _this.fishSearch() : _this.fishMove();
        }).start();
      };
      RoomFishtank.prototype.fishSearch = function() {
        var _this = this;
        this.bubbleSort();
        var targetPos = this.foodList[0].position.clone();
        var scaleX = targetPos.x > this.fish.position.x ? 1 : -1;
        var distance = Logic_1.default.getDistanceNoSqrt(this.fish.position, targetPos);
        cc.tween(this.fish).to(.2, {
          scaleX: scaleX
        }).to(distance / 10, {
          position: targetPos
        }).call(function() {
          _this.fishEat(0);
        }).start();
      };
      RoomFishtank.prototype.fishMove = function() {
        var _this = this;
        var width = this.layout.width;
        var height = this.layout.height;
        var randomPos = cc.v3(Logic_1.default.getRandomNum(this.fish.width / 2, width - this.fish.width / 2), Logic_1.default.getRandomNum(this.fish.height / 2, height - this.fish.height / 2));
        var scaleX = randomPos.x > this.fish.position.x ? 1 : -1;
        var distance = Logic_1.default.getDistanceNoSqrt(this.fish.position, randomPos);
        cc.tween(this.fish).to(.2, {
          scaleX: scaleX
        }).to(distance / 5, {
          position: randomPos
        }).delay(.5).call(function() {
          _this.foodList.length > 0 ? _this.fishSearch() : _this.fishMove();
        }).start();
      };
      RoomFishtank.prototype.bubbleSort = function() {
        var len = this.foodList.length;
        for (var i = 0; i < len - 1; i++) for (var j = 0; j < len - 1 - i; j++) if (Math.abs(this.foodList[j].x - this.fish.x) > Math.abs(this.foodList[j + 1].x - this.fish.x)) {
          var temp = this.foodList[j + 1];
          this.foodList[j + 1] = this.foodList[j];
          this.foodList[j] = temp;
        }
      };
      RoomFishtank.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 5) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      RoomFishtank.prototype.update = function(dt) {
        this.showAudio && this.isCheckTimeDelay(dt) && AudioPlayer_1.default.play(AudioPlayer_1.default.FISHTANK);
      };
      __decorate([ property(cc.Node) ], RoomFishtank.prototype, "fish", void 0);
      __decorate([ property(cc.Prefab) ], RoomFishtank.prototype, "food", void 0);
      __decorate([ property(cc.Node) ], RoomFishtank.prototype, "layout", void 0);
      RoomFishtank = __decorate([ ccclass ], RoomFishtank);
      return RoomFishtank;
    }(Building_1.default);
    exports.default = RoomFishtank;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/Utils": "Utils",
    "./Building": "Building"
  } ],
  RoomStool: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b3a88wYknRFJqEjNBOhztfv", "RoomStool");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var FromData_1 = require("../Data/FromData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var IndexZ_1 = require("../Utils/IndexZ");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomStool = function(_super) {
      __extends(RoomStool, _super);
      function RoomStool() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mosaic = null;
        _this.isOpen = false;
        return _this;
      }
      RoomStool.prototype.onLoad = function() {};
      RoomStool.prototype.init = function(indexPos, dungeon) {
        this.dungeon = dungeon;
        this.data.defaultPos = indexPos;
        var p = this.mosaic.convertToWorldSpaceAR(cc.v3(0, 0));
        this.mosaic.parent = this.node.parent;
        this.mosaic.position = this.mosaic.parent.convertToNodeSpaceAR(p);
        this.mosaic.zIndex = IndexZ_1.default.OVERHEAD;
        this.mosaic.opacity = 0;
      };
      RoomStool.prototype.open = function() {
        var _this = this;
        if (this.isOpen) return;
        this.isOpen = true;
        this.mosaic.opacity = 255;
        this.unscheduleAllCallbacks();
        this.dungeon && this.dungeon.player.addStatus(StatusManager_1.default.DIZZ_LONG, new FromData_1.default());
        this.scheduleOnce(function() {
          _this.mosaic.opacity = 0;
          AudioPlayer_1.default.play(AudioPlayer_1.default.CLOSESTOOL);
        }, 5);
        this.scheduleOnce(function() {
          _this.isOpen = false;
        }, 10);
      };
      __decorate([ property(cc.Node) ], RoomStool.prototype, "mosaic", void 0);
      RoomStool = __decorate([ ccclass ], RoomStool);
      return RoomStool;
    }(Building_1.default);
    exports.default = RoomStool;
    cc._RF.pop();
  }, {
    "../Data/FromData": "FromData",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  RoomTv: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c83fKZL65BO7yZt9toJ0M8", "RoomTv");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ShadowOfSight_1 = require("../Effect/ShadowOfSight");
    var Logic_1 = require("../Logic");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoomTv = function(_super) {
      __extends(RoomTv, _super);
      function RoomTv() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.screen = null;
        _this.isOpen = false;
        return _this;
      }
      RoomTv.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
      };
      RoomTv.prototype.start = function() {
        for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(false);
        }
      };
      RoomTv.prototype.open = function() {
        var _this = this;
        this.isOpen = true;
        if (this.lights) for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(true);
        }
        this.unscheduleAllCallbacks();
        this.anim.stop();
        this.anim.play("RoomTvOpen");
        this.scheduleOnce(function() {
          if (Logic_1.default.getHalfChance()) {
            _this.anim.play("RoomTvNoSignalIdle");
            AudioPlayer_1.default.play(AudioPlayer_1.default.TVWHITE, false, true);
          } else {
            _this.anim.play("RoomTvOpenIdle");
            AudioPlayer_1.default.play(AudioPlayer_1.default.TVCOLOR, false, true);
          }
        }, .5);
      };
      RoomTv.prototype.close = function() {
        var _this = this;
        this.isOpen = false;
        if (this.lights) for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(false);
        }
        this.unscheduleAllCallbacks();
        this.anim.stop();
        this.anim.play("RoomTvClose");
        AudioPlayer_1.default.stopAllEffect();
        this.scheduleOnce(function() {
          _this.anim.play("RoomTvClosedIdle");
        }, .5);
      };
      RoomTv.prototype.interact = function() {
        this.isOpen ? this.close() : this.open();
      };
      __decorate([ property(cc.Sprite) ], RoomTv.prototype, "screen", void 0);
      RoomTv = __decorate([ ccclass ], RoomTv);
      return RoomTv;
    }(Building_1.default);
    exports.default = RoomTv;
    cc._RF.pop();
  }, {
    "../Effect/ShadowOfSight": "ShadowOfSight",
    "../Logic": "Logic",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  RoomType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "877a0zZc/9EjpFiULm+otfY", "RoomType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RoomType = function() {
      function RoomType(id, name) {
        this.id = 0;
        this.name = "";
        this.id = id;
        this.name = name;
      }
      Object.defineProperty(RoomType.prototype, "ID", {
        get: function() {
          return this.id;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RoomType.prototype, "NAME", {
        get: function() {
          return this.name;
        },
        enumerable: false,
        configurable: true
      });
      RoomType.prototype.valueCopy = function(data) {
        this.id = data.id;
        this.name = data.name;
      };
      RoomType.getIdByName = function(name) {
        return name.charCodeAt(0) - "A".charCodeAt(0);
      };
      RoomType.getNameById = function(id) {
        return String.fromCharCode("A".charCodeAt(0) + id);
      };
      RoomType.getTypeByName = function(name) {
        return new RoomType(RoomType.getIdByName(name), name);
      };
      RoomType.getTypeById = function(id) {
        return new RoomType(id, RoomType.getNameById(id));
      };
      RoomType.isDecorateRoomType = function(roomType) {
        return RoomType.START_ROOM.isNotEqual(roomType) && RoomType.TEST_ROOM.isNotEqual(roomType) && RoomType.PREPARE_ROOM.isNotEqual(roomType);
      };
      RoomType.isMonsterGenerateRoom = function(roomType) {
        return RoomType.DANGER_ROOM.isEqual(roomType) || RoomType.INSANE_ROOM.isEqual(roomType) || RoomType.BOSS_ROOM.isEqual(roomType) || RoomType.KEY_ROOM.isEqual(roomType) || RoomType.LOOT_ROOM.isEqual(roomType) || RoomType.NORMAL_ROOM.isEqual(roomType) || RoomType.END_ROOM.isEqual(roomType) || RoomType.VERTICAL_ROOM.isEqual(roomType) || RoomType.HORIZONTAL_ROOM.isEqual(roomType);
      };
      RoomType.prototype.isEqual = function(roomType) {
        return roomType.ID == this.ID;
      };
      RoomType.prototype.isNotEqual = function(roomType) {
        return roomType.ID != this.ID;
      };
      RoomType.ELITE_ROOM = new RoomType(0, "A");
      RoomType.BOSS_ROOM = new RoomType(1, "B");
      RoomType.CROSS_ROOM = new RoomType(2, "C");
      RoomType.DANGER_ROOM = new RoomType(3, "D");
      RoomType.END_ROOM = new RoomType(4, "E");
      RoomType.FINAL_ROOM = new RoomType(5, "F");
      RoomType.G_ROOM = new RoomType(6, "G");
      RoomType.HORIZONTAL_ROOM = new RoomType(7, "H");
      RoomType.INSANE_ROOM = new RoomType(8, "I");
      RoomType.TUTORIAL_ROOM = new RoomType(9, "J");
      RoomType.KEY_ROOM = new RoomType(10, "K");
      RoomType.LOOT_ROOM = new RoomType(11, "L");
      RoomType.MERCHANT_ROOM = new RoomType(12, "M");
      RoomType.NORMAL_ROOM = new RoomType(13, "N");
      RoomType.EMPTY_ROOM = new RoomType(14, "O");
      RoomType.PREPARE_ROOM = new RoomType(15, "P");
      RoomType.Q_ROOM = new RoomType(16, "Q");
      RoomType.REST_ROOM = new RoomType(17, "R");
      RoomType.START_ROOM = new RoomType(18, "S");
      RoomType.TEST_ROOM = new RoomType(19, "T");
      RoomType.U_ROOM = new RoomType(20, "U");
      RoomType.VERTICAL_ROOM = new RoomType(21, "V");
      RoomType.WATER_ROOM = new RoomType(22, "W");
      RoomType.X_ROOM = new RoomType(23, "X");
      RoomType.HIDDEN_ROOM = new RoomType(24, "Y");
      RoomType.Z_ROOM = new RoomType(25, "Z");
      return RoomType;
    }();
    exports.default = RoomType;
    cc._RF.pop();
  }, {} ],
  SavePointData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2940aORMiBLQ5k/LNcPv2bl", "SavePointData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SavePointData = function() {
      function SavePointData() {
        this.x = 16;
        this.y = 16;
        this.chapter = 0;
        this.level = 0;
      }
      SavePointData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.x = data.x || 0 == data.x ? data.x : 16;
        this.y = data.y || 0 == data.y ? data.y : 16;
        this.chapter = data.chapter ? data.chapter : 0;
        this.level = data.level ? data.level : 0;
      };
      SavePointData.prototype.clone = function() {
        var data = new SavePointData();
        data.x = this.x;
        data.y = this.y;
        data.chapter = this.chapter;
        data.level = this.level;
        return data;
      };
      return SavePointData;
    }();
    exports.default = SavePointData;
    cc._RF.pop();
  }, {} ],
  SavePoint: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b080bpXecxCVaM8ctiNSXZl", "SavePoint");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ExitData_1 = require("../Data/ExitData");
    var ShadowOfSight_1 = require("../Effect/ShadowOfSight");
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var Tips_1 = require("../UI/Tips");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SavePoint = function(_super) {
      __extends(SavePoint, _super);
      function SavePoint() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      SavePoint.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        this.lights = this.getComponentsInChildren(ShadowOfSight_1.default);
        this.tips = this.getComponentInChildren(Tips_1.default);
        this.tips.onInteract(function(isLongPress, player) {
          if (_this.node) {
            player && (Logic_1.default.playerData = player.data.clone());
            Logic_1.default.savePonit(_this.data.defaultPos);
            Logic_1.default.resetData();
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CAMERA_ZOOM_IN, {});
            AudioPlayer_1.default.play(AudioPlayer_1.default.EXIT);
            Logic_1.default.loadingNextLevel(ExitData_1.default.getRealWorldExitDataFromDream(Logic_1.default.chapterIndex, Logic_1.default.level));
          }
        });
      };
      SavePoint.prototype.start = function() {
        for (var _i = 0, _a = this.lights; _i < _a.length; _i++) {
          var light = _a[_i];
          light.updateRender(false);
        }
      };
      SavePoint.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .05) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      SavePoint.prototype.update = function(dt) {
        this.lights.length > 0 && this.lights[0].showShadow && this.isCheckTimeDelay(dt) && (this.lights[0].radius = Logic_1.default.lerp(this.lights[0].radius, 300, 5 * dt));
      };
      SavePoint.prototype.open = function() {
        var _this = this;
        if (this.isOpen) return;
        Logic_1.default.savePonit(this.data.defaultPos);
        this.isOpen = true;
        this.scheduleOnce(function() {
          _this.anim.play("SavePointActive");
          _this.scheduleOnce(function() {
            for (var _i = 0, _a = _this.lights; _i < _a.length; _i++) {
              var light = _a[_i];
              light.radius = 0;
              light.updateRender(true);
            }
            _this.anim.play("SavePointIdleActive");
            _this.tips.node.active = true;
          }, 1);
        }, 1);
      };
      SavePoint = __decorate([ ccclass ], SavePoint);
      return SavePoint;
    }(Building_1.default);
    exports.default = SavePoint;
    cc._RF.pop();
  }, {
    "../Data/ExitData": "ExitData",
    "../Effect/ShadowOfSight": "ShadowOfSight",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../UI/Tips": "Tips",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./Building": "Building"
  } ],
  Saw: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4758hHN8ZNFpX/Yga2qrRo", "Saw");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var DamageData_1 = require("../Data/DamageData");
    var Building_1 = require("./Building");
    var StatusManager_1 = require("../Manager/StatusManager");
    var Random_1 = require("../Utils/Random");
    var FromData_1 = require("../Data/FromData");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Saw = function(_super) {
      __extends(Saw, _super);
      function Saw() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.normalSpriteFrame = null;
        _this.bloodSpriteFrame = null;
        _this.pos = cc.v3(0, 0);
        return _this;
      }
      Saw.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.sprite.spriteFrame = this.normalSpriteFrame;
      };
      Saw.prototype.start = function() {};
      Saw.prototype.setPos = function(pos) {
        this.pos = pos;
        var p = Dungeon_1.default.getPosInMap(pos);
        this.node.position = cc.v3(p.x, p.y);
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      Saw.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target) {
          var from = FromData_1.default.getClone(this.actorName(), "saw002");
          target.takeDamage(new DamageData_1.default(1), from);
          Random_1.default.rand() < .1 && target.addStatus(StatusManager_1.default.BLEEDING, from);
          this.sprite.spriteFrame = this.bloodSpriteFrame;
        }
      };
      Saw.prototype.update = function(dt) {};
      Saw.prototype.actorName = function() {
        return "\u952f\u9f7f\u8f6e";
      };
      __decorate([ property(cc.SpriteFrame) ], Saw.prototype, "normalSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], Saw.prototype, "bloodSpriteFrame", void 0);
      Saw = __decorate([ ccclass ], Saw);
      return Saw;
    }(Building_1.default);
    exports.default = Saw;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/IndexZ": "IndexZ",
    "../Utils/Random": "Random",
    "./Building": "Building"
  } ],
  Seeker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d901Qk1AZCcpW5rnbx33wB", "Seeker");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Seeker = function(_super) {
      __extends(Seeker, _super);
      function Seeker() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isMoving = false;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Seeker.prototype.onLoad = function() {
        var _this = this;
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.node.zIndex = 1e3;
        cc.director.on(EventHelper_1.EventHelper.PLAYER_MOVE, function(event) {
          _this.move(event.detail.dir, event.detail.pos, event.detail.dt);
        });
      };
      Seeker.prototype.move = function(dir, pos, dt) {
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var mul = absh > absv ? absh : absv;
        mul = 0 == mul ? 1 : mul;
        var movement = cc.v2(h, v);
        var speed = 500;
        speed < 0 && (speed = 0);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
      };
      Seeker.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .2) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      Seeker.prototype.update = function(dt) {
        this.isCheckTimeDelay(dt) && this.isMoving && cc.director.emit(EventHelper_1.EventHelper.CHUNK_LOAD, {
          detail: {
            pos: this.node.position.clone()
          }
        });
      };
      Seeker = __decorate([ ccclass ], Seeker);
      return Seeker;
    }(cc.Component);
    exports.default = Seeker;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper"
  } ],
  SettingsDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "201faQ17bhLsoyeY0sNn6x5", "SettingsDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../../EventHelper");
    var Logic_1 = require("../../Logic");
    var AudioPlayer_1 = require("../../Utils/AudioPlayer");
    var LocalStorage_1 = require("../../Utils/LocalStorage");
    var BaseDialog_1 = require("./BaseDialog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SettingsDialog = function(_super) {
      __extends(SettingsDialog, _super);
      function SettingsDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.tgShadow = null;
        _this.tgGamepad = null;
        return _this;
      }
      SettingsDialog.prototype.onLoad = function() {};
      SettingsDialog.prototype.start = function() {};
      SettingsDialog.prototype.show = function() {
        _super.prototype.show.call(this);
        this.initToggle(this.tgShadow, LocalStorage_1.default.isSwitchOpen(LocalStorage_1.default.KEY_SWITCH_SHOW_SHADOW));
        this.initToggle(this.tgGamepad, LocalStorage_1.default.isSwitchOpen(LocalStorage_1.default.KEY_SWITCH_SHOW_GAMEPAD));
      };
      SettingsDialog.prototype.initToggle = function(toggle, isOpen) {
        isOpen ? toggle.check() : toggle.uncheck();
      };
      SettingsDialog.prototype.toggleShadow = function(toggle, customEventData) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.settings.showShadow = toggle.isChecked;
        LocalStorage_1.default.saveSwitch(LocalStorage_1.default.KEY_SWITCH_SHOW_SHADOW, Logic_1.default.settings.showShadow);
      };
      SettingsDialog.prototype.toggleGamepad = function(toggle, customEventData) {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.settings.showGamepad = toggle.isChecked;
        LocalStorage_1.default.saveSwitch(LocalStorage_1.default.KEY_SWITCH_SHOW_GAMEPAD, Logic_1.default.settings.showGamepad);
        cc.director.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_UPDATE_GAMEPAD);
      };
      SettingsDialog.prototype.close = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.getScheduler().setTimeScale(1);
        this.dismiss();
      };
      SettingsDialog.prototype.home = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        Logic_1.default.saveData();
        cc.director.loadScene("start");
      };
      __decorate([ property(cc.Toggle) ], SettingsDialog.prototype, "tgShadow", void 0);
      __decorate([ property(cc.Toggle) ], SettingsDialog.prototype, "tgGamepad", void 0);
      SettingsDialog = __decorate([ ccclass ], SettingsDialog);
      return SettingsDialog;
    }(BaseDialog_1.default);
    exports.default = SettingsDialog;
    cc._RF.pop();
  }, {
    "../../EventHelper": "EventHelper",
    "../../Logic": "Logic",
    "../../Utils/AudioPlayer": "AudioPlayer",
    "../../Utils/LocalStorage": "LocalStorage",
    "./BaseDialog": "BaseDialog"
  } ],
  Settings: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9f7a3vE481MQYBScX8VK6ox", "Settings");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Settings = function() {
      function Settings() {
        this.showShadow = true;
        this.showGamepad = true;
        this.showEquipDialog = false;
      }
      return Settings;
    }();
    exports.default = Settings;
    cc._RF.pop();
  }, {} ],
  ShadowOfSight: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6922FctbtKnrAA7zoIN/Yg", "ShadowOfSight");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ShadowOfSight = function(_super) {
      __extends(ShadowOfSight, _super);
      function ShadowOfSight() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.ray = null;
        _this.rayNum = 180;
        _this.renderColor = cc.color(255, 255, 255, 40);
        _this.showLight = true;
        _this.showRayCast = false;
        _this.fromSky = false;
        _this.showShadow = true;
        _this.lightVertsArray = new Array();
        _this.lightRects = {};
        _this.circle = cc.v3(0, 0, 0);
        _this.offset = 0;
        _this.offsetPlus = false;
        return _this;
      }
      ShadowOfSight.prototype.onLoad = function() {
        this.mat = this.ray.getMaterial(0);
        this.polygonCollider = this.getComponent(cc.PolygonCollider);
        this.circleCollider = this.getComponent(cc.CircleCollider);
      };
      ShadowOfSight.prototype.renderSightArea = function(camera) {
        var pos = this.node.convertToWorldSpaceAR(cc.v2(0, 0));
        var size = 20;
        var delta = .1;
        this.offset > size ? this.offsetPlus = false : this.offset < -size && (this.offsetPlus = true);
        this.offset = this.offsetPlus ? this.offset + delta : this.offset - delta;
        this.ray.clear();
        if (Logic_1.default.settings.showShadow && this.showShadow) {
          this.lightRects = {};
          this.lightVertsArray = [];
          this.circle = cc.v3(0, 0, 0);
          this.showRayCast ? this.drawRayByNum(pos, camera, this.showLight) : this.drawCustom(pos, camera, this.showLight);
        }
      };
      ShadowOfSight.prototype.updateRender = function(showShadow) {
        this.showShadow = showShadow;
      };
      ShadowOfSight.prototype.drawCustom = function(pos, camera, renderLight) {
        this.ray.lineWidth = 10;
        this.ray.fillColor = this.renderColor;
        if (this.polygonCollider && this.polygonCollider.points.length > 2) {
          for (var i = 0; i < this.polygonCollider.points.length; i++) {
            var p = this.node.convertToWorldSpaceAR(this.polygonCollider.points[i]);
            this.lightVertsArray.push(p);
            renderLight && (0 == i ? this.ray.moveTo(this.polygonCollider.points[i].x, this.polygonCollider.points[i].y) : this.ray.lineTo(this.polygonCollider.points[i].x, this.polygonCollider.points[i].y));
          }
          if (renderLight) {
            this.ray.close();
            this.ray.fill();
            var sp = camera.getWorldToScreenPoint(pos);
            this.updateMat(this.mat, cc.v2(sp.x, sp.y), camera.zoomRatio);
          }
        }
        if (this.circleCollider && this.circleCollider.radius > 0) {
          var p = this.node.convertToWorldSpaceAR(this.circleCollider.offset);
          this.circle = cc.v3(p.x, p.y, this.getRadius());
          if (renderLight) {
            this.ray.lineWidth = 10;
            this.ray.fillColor = this.renderColor;
            var center = this.circleCollider.offset;
            this.ray.circle(center.x, center.y, this.getRadius());
            this.ray.fill();
            var sp = camera.getWorldToScreenPoint(pos);
            this.updateMat(this.mat, cc.v2(sp.x, sp.y), camera.zoomRatio);
          }
        }
      };
      ShadowOfSight.prototype.drawRayByNum = function(pos, camera, renderLight) {
        if (!this.circleCollider || this.circleCollider.radius <= 0) return;
        this.ray.lineWidth = 10;
        this.ray.fillColor = this.renderColor;
        var unitRd = 2 * Math.PI / this.rayNum;
        this.lightVertsArray = new Array();
        this.lightRects = {};
        for (var i = 0; i < this.rayNum; i++) {
          var p3 = cc.v2(Math.cos(i * unitRd) * this.getRadius() + pos.x, Math.sin(i * unitRd) * this.getRadius() + pos.y);
          var physicsManager = cc.director.getPhysicsManager();
          var result = physicsManager.rayCast(pos, p3, cc.RayCastType.Closest);
          if (result.length > 0 && !result[0].collider.sensor && result[0].collider.node != this.node.parent && (result[0].collider.tag == ColliderTag_1.ColliderTag.WALL || result[0].collider.tag == ColliderTag_1.ColliderTag.BUILDING || result[0].collider.tag == ColliderTag_1.ColliderTag.PLAYER || result[0].collider.tag == ColliderTag_1.ColliderTag.WALL_TOP || result[0].collider.tag == ColliderTag_1.ColliderTag.NONPLAYER)) {
            p3 = result[0].point;
            var node = result[0].collider.node;
            var bottomPos = node.convertToNodeSpaceAR(p3);
            if (bottomPos.y <= 0 && p3.y > pos.y) {
              var np = node.convertToWorldSpaceAR(cc.v3(0, 0));
              var offset = 0;
              var r = cc.rect(np.x - node.width * node.anchorX, np.y - node.height * node.anchorY - offset, node.width, node.height + offset);
              this.lightRects[node.uuid] = r;
            }
          }
          this.lightVertsArray.push(p3);
          this.ray.lineWidth = 3;
          this.ray.strokeColor = cc.color(0, 0, 0, 80);
          if (renderLight) if (0 == i) {
            var p0 = this.node.convertToNodeSpaceAR(p3);
            this.ray.moveTo(p0.x, p0.y);
          } else {
            var p = this.node.convertToNodeSpaceAR(p3);
            this.ray.lineTo(p.x, p.y);
          }
        }
        if (renderLight) {
          this.ray.close();
          this.ray.fill();
          this.ray.fillColor.a = this.ray.fillColor.a / 2;
          for (var key in this.lightRects) {
            var r = this.lightRects[key];
            var p = this.node.convertToNodeSpaceAR(cc.v3(r.x, r.y));
            this.ray.rect(p.x, p.y, r.width, r.height);
            this.ray.fill();
          }
          var sp = camera.getWorldToScreenPoint(pos);
          this.updateMat(this.mat, cc.v2(sp.x, sp.y), camera.zoomRatio);
        }
      };
      ShadowOfSight.prototype.getRadius = function() {
        return this.radius + this.offset;
      };
      Object.defineProperty(ShadowOfSight.prototype, "radius", {
        get: function() {
          return this.circleCollider && !this.polygonCollider ? this.circleCollider.radius : this.node.width / 2;
        },
        set: function(r) {
          this.circleCollider && (this.circleCollider.radius = r);
        },
        enumerable: false,
        configurable: true
      });
      ShadowOfSight.prototype.updateMat = function(mat, pos, zoomRatio) {
        var canvasSize = cc.view.getCanvasSize();
        var visibleSize = cc.view.getVisibleSize();
        var visibleRatio = visibleSize.width / visibleSize.height;
        var r = this.getRadius() / visibleSize.height;
        var scale = canvasSize.width / visibleSize.width;
        mat.setProperty("screen", cc.v2(canvasSize.width, canvasSize.height));
        mat.setProperty("maxRadius", r * zoomRatio);
        mat.setProperty("whRatio", visibleRatio);
        var lightPos = cc.v2(pos.x / visibleSize.width, pos.y / visibleSize.height);
        var y = Math.abs(lightPos.y - .5) * visibleSize.height * scale / canvasSize.height;
        this.mat.setProperty("lightPos", cc.v2(lightPos.x, lightPos.y > .5 ? .5 + y : .5 - y));
      };
      __decorate([ property(cc.Graphics) ], ShadowOfSight.prototype, "ray", void 0);
      __decorate([ property(cc.Color) ], ShadowOfSight.prototype, "renderColor", void 0);
      __decorate([ property ], ShadowOfSight.prototype, "showLight", void 0);
      __decorate([ property ], ShadowOfSight.prototype, "showRayCast", void 0);
      __decorate([ property ], ShadowOfSight.prototype, "fromSky", void 0);
      ShadowOfSight = __decorate([ ccclass ], ShadowOfSight);
      return ShadowOfSight;
    }(cc.Component);
    exports.default = ShadowOfSight;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Logic": "Logic"
  } ],
  ShadowPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37457/YUj5OXbrBhQ2rg17W", "ShadowPlayer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var PlayerWeapon_1 = require("../PlayerWeapon");
    var Shooter_1 = require("../Shooter");
    var IndexZ_1 = require("../Utils/IndexZ");
    var NextStep_1 = require("../Utils/NextStep");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ShadowPlayer = function(_super) {
      __extends(ShadowPlayer, _super);
      function ShadowPlayer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.weaponLeft = null;
        _this.weaponRight = null;
        _this.shooterEx = null;
        _this.sprite = null;
        _this.index = 0;
        _this.lifeNext = new NextStep_1.default();
        _this.isStop = false;
        _this.targetPos = cc.v3(0, 0);
        _this.movePos = cc.v3(0, 0);
        _this.playerLastPos = cc.v3(0, 0);
        _this.moveList = [];
        _this.SCALE = 3;
        return _this;
      }
      ShadowPlayer.prototype.init = function(player, spriteframe, index, lifeTime) {
        var _this = this;
        this.player = player;
        this.index = index;
        this.player.data.ShadowList[this.index] = lifeTime || 30;
        this.node.parent = this.player.node.parent;
        this.weaponLeft.init(this.player, true, true);
        this.weaponRight.init(this.player, false, true);
        this.weaponLeft.node.opacity = 0;
        this.weaponRight.node.opacity = 0;
        this.shooterEx.player = this.player;
        this.shooterEx.isEx = true;
        this.mat = this.sprite.getMaterial(0);
        this.sprite.node.scaleX = this.SCALE;
        this.sprite.node.scaleY = -this.SCALE;
        this.sprite.spriteFrame = spriteframe;
        this.node.zIndex = IndexZ_1.default.getActorZIndex(Dungeon_1.default.getIndexInMap(this.node.position));
        this.sprite.node.width = this.sprite.spriteFrame.getOriginalSize().width;
        this.sprite.node.height = this.sprite.spriteFrame.getOriginalSize().height;
        this.node.position = this.player.node.position.clone();
        this.targetPos = this.player.node.position.clone();
        this.playerLastPos = this.player.node.position.clone();
        this.isStop = false;
        this.lifeNext.next(function() {}, lifeTime || 30, true, function(secondCount) {
          secondCount >= 0 && _this.node && _this.isValid && !_this.isStop && (_this.player.data.ShadowList[_this.index] = secondCount);
          secondCount <= 0 && _this.stop();
        });
      };
      ShadowPlayer.prototype.attack = function(data, comboType, hv, isLeft) {
        if (!this.node) return false;
        return isLeft ? this.weaponLeft.shadowWeapon.attack(data, comboType, hv) : this.weaponRight.shadowWeapon.attack(data, comboType, hv);
      };
      ShadowPlayer.prototype.remoteAttack = function(isLeft, data, hv, damage, bulletArcExNum, bulletLineExNum) {
        if (!this.node) return false;
        var shooter = isLeft ? this.weaponLeft.shooter : this.weaponRight.shooter;
        shooter.data = data.clone();
        shooter.setHv(hv);
        shooter.remoteDamagePlayer = damage;
        shooter.fireBullet(0, null, bulletArcExNum, bulletLineExNum);
      };
      ShadowPlayer.prototype.stop = function() {
        if (this.isValid) {
          this.isStop = true;
          this.player.data.ShadowList[this.index] = 0;
          this.node.active = false;
          this.enabled = false;
          this.destroy();
        }
      };
      ShadowPlayer.prototype.getCenterPosition = function() {
        return this.node.position.clone().addSelf(cc.v3(0, 32 * this.node.scaleY));
      };
      ShadowPlayer.prototype.updateLogic = function(dt) {
        if (this.player) {
          this.movePos.x += Math.abs(this.player.node.position.x - this.playerLastPos.x);
          this.movePos.y += Math.abs(this.player.node.position.y - this.playerLastPos.y);
          this.playerLastPos = this.player.node.position.clone();
          var offset = 5;
          if (this.movePos.x > offset || this.movePos.y > offset) {
            this.movePos = cc.v3(0, 0);
            var p = this.player.node.position.clone();
            p.z = this.player.isFaceRight ? 1 : -1;
            this.moveList.push(p);
          }
          if (this.moveList.length > 0) {
            var x = this.moveList[0].x - this.targetPos.x;
            var y = this.moveList[0].y - this.targetPos.y;
            x * x + y * y < offset * offset && this.moveList.splice(0, 1);
            if (this.moveList.length > 10 * (this.index + 1)) {
              this.targetPos = this.moveList[0].clone();
              this.node.scaleX = this.targetPos.z;
            }
          }
          this.node.zIndex = IndexZ_1.default.getActorZIndex(Dungeon_1.default.getIndexInMap(this.node.position));
          this.sprite.node.opacity = 200 - 20 * this.index;
          this.mat.setProperty("textureSizeWidth", this.sprite.spriteFrame.getTexture().width * this.SCALE);
          this.mat.setProperty("textureSizeHeight", this.sprite.spriteFrame.getTexture().height * this.SCALE);
          this.mat.setProperty("outlineColor", cc.color(200, 200, 200));
          this.mat.setProperty("outlineSize", 4);
          this.weaponLeft.shadowWeapon.IsAttacking || this.weaponRight.shadowWeapon.IsAttacking || (this.node.position = Logic_1.default.lerpPos(this.node.position, this.targetPos, 3 * dt));
        }
      };
      __decorate([ property(PlayerWeapon_1.default) ], ShadowPlayer.prototype, "weaponLeft", void 0);
      __decorate([ property(PlayerWeapon_1.default) ], ShadowPlayer.prototype, "weaponRight", void 0);
      __decorate([ property(Shooter_1.default) ], ShadowPlayer.prototype, "shooterEx", void 0);
      __decorate([ property(cc.Sprite) ], ShadowPlayer.prototype, "sprite", void 0);
      ShadowPlayer = __decorate([ ccclass ], ShadowPlayer);
      return ShadowPlayer;
    }(cc.Component);
    exports.default = ShadowPlayer;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../PlayerWeapon": "PlayerWeapon",
    "../Shooter": "Shooter",
    "../Utils/IndexZ": "IndexZ",
    "../Utils/NextStep": "NextStep"
  } ],
  Shield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9e32odPWRNMpWClq+mn20V", "Shield");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var PlayerAvatar_1 = require("./PlayerAvatar");
    var EquipmentData_1 = require("./Data/EquipmentData");
    var EventHelper_1 = require("./EventHelper");
    var IndexZ_1 = require("./Utils/IndexZ");
    var BlockLight_1 = require("./Effect/BlockLight");
    var DamageData_1 = require("./Data/DamageData");
    var StatusManager_1 = require("./Manager/StatusManager");
    var FromData_1 = require("./Data/FromData");
    var InventoryManager_1 = require("./Manager/InventoryManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Shield = function(_super) {
      __extends(Shield, _super);
      function Shield() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.blockLightPrefab = null;
        _this.status = -1;
        _this.data = new EquipmentData_1.default();
        _this.isBehind = false;
        _this.avatarZindex = 0;
        _this.isBehindChange = false;
        _this.dir = 3;
        _this.isButtonPressing = false;
        return _this;
      }
      Shield_1 = Shield;
      Object.defineProperty(Shield.prototype, "isAniming", {
        get: function() {
          return this.status == Shield_1.STATUS_PUTDOWN || this.status == Shield_1.STATUS_PARRY;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Shield.prototype, "isDefendOrParrying", {
        get: function() {
          return this.status == Shield_1.STATUS_DEFEND || this.status == Shield_1.STATUS_PARRY;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Shield.prototype, "Status", {
        get: function() {
          return this.status;
        },
        enumerable: false,
        configurable: true
      });
      Shield.prototype.onLoad = function() {
        var _this = this;
        cc.director.on(EventHelper_1.EventHelper.POOL_DESTORY_BLOCKLIGHT, function(event) {
          _this.destroySmoke(event.detail.targetNode);
        });
        this.blocklightPool = new cc.NodePool();
      };
      Shield.prototype.getBlockLight = function(parentNode, pos) {
        var prefab = null;
        this.blocklightPool.size() > 0 && (prefab = this.blocklightPool.get());
        prefab && !prefab.active || (prefab = cc.instantiate(this.blockLightPrefab));
        prefab.parent = parentNode;
        prefab.position = pos;
        prefab.zIndex = IndexZ_1.default.OVERHEAD;
        prefab.scale = this.status == Shield_1.STATUS_PARRY ? 2 : 1;
        prefab.opacity = 255;
        prefab.active = true;
        prefab.getComponent(BlockLight_1.default).show();
      };
      Shield.prototype.blockDamage = function(player, damage, actor) {
        if (this.status < 0 || this.status == Shield_1.STATUS_IDLE || this.status == Shield_1.STATUS_PUTDOWN) return 0;
        if (damage.getTotalDamage() <= 0) return 0;
        var pos = player.node.parent.convertToNodeSpaceAR(this.node.convertToWorldSpaceAR(cc.Vec2.ZERO));
        this.getBlockLight(player.node.parent, cc.v3(pos.x, pos.y));
        if (actor) {
          if (this.status == Shield_1.STATUS_PARRY) {
            actor.addStatus(StatusManager_1.default.SHIELD_PARRY, new FromData_1.default());
            actor.takeDamage(new DamageData_1.default(this.data.Common.blockDamage));
            this.data.statusNameParryOther.length > 0 && this.data.statusRateParry > Logic_1.default.getRandomNum(0, 100) && actor.addStatus(this.data.statusNameParryOther, new FromData_1.default());
            this.data.statusNameParrySelf.length > 0 && this.data.statusRateParry > Logic_1.default.getRandomNum(0, 100) && player.addStatus(this.data.statusNameParrySelf, new FromData_1.default());
          }
          if (this.status == Shield_1.STATUS_DEFEND) {
            this.data.statusNameBlockOther.length > 0 && this.data.statusRateBlock > Logic_1.default.getRandomNum(0, 100) && actor.addStatus(this.data.statusNameBlockOther, new FromData_1.default());
            this.data.statusNameBlockSelf.length > 0 && this.data.statusRateBlock > Logic_1.default.getRandomNum(0, 100) && player.addStatus(this.data.statusNameBlockSelf, new FromData_1.default());
          }
        }
        return this.status == Shield_1.STATUS_PARRY ? Shield_1.BLOCK_PARRY : Shield_1.BLOCK_NORMAL;
      };
      Shield.prototype.destroySmoke = function(targetNode) {
        if (!targetNode) return;
        targetNode.active = false;
        this.blocklightPool && this.blocklightPool.put(targetNode);
      };
      Shield.prototype.playIdle = function() {
        if (this.status == Shield_1.STATUS_DEFEND || this.status == Shield_1.STATUS_PARRY || this.status == Shield_1.STATUS_IDLE) return;
        this.status = Shield_1.STATUS_IDLE;
        cc.log("\u7b49\u5f85 isBehind:" + this.isBehind + " zIndex:" + this.node.zIndex);
        this.sprite.node.stopAllActions();
        var duration = 1 == this.data.isHeavy ? .4 : .2;
        var idle = cc.tween().to(duration, {
          y: 2
        }).to(duration, {
          y: -2
        });
        cc.tween(this.sprite.node).repeatForever(idle).start();
      };
      Shield.prototype.playParry = function(isFaceRight) {
        var _this = this;
        if (this.status == Shield_1.STATUS_PUTDOWN || this.status == Shield_1.STATUS_DEFEND || this.status == Shield_1.STATUS_PARRY) return;
        this.status = Shield_1.STATUS_PARRY;
        var duration = 1 == this.data.isHeavy ? .15 : .1;
        var durationdelay = 1 == this.data.isHeavy ? .1 : .15;
        var dp = Shield_1.DEFAULT_POS[this.dir].clone();
        var tp = Shield_1.TRANSFORM_POS[this.dir].clone();
        if (!isFaceRight) {
          dp.x = -dp.x;
          tp.x = -tp.x;
        }
        cc.log("\u4e3e\u8d77 isBehind:" + this.isBehind + " zIndex:" + this.node.zIndex);
        cc.tween(this.node).to(duration, {
          position: tp
        }).call(function() {
          _this.node.zIndex = _this.isBehind ? _this.avatarZindex + Shield_1.ZOFFSET : _this.avatarZindex - Shield_1.ZOFFSET;
          _this.sprite.node.color = _this.isBehind ? cc.Color.WHITE : cc.color(32, 32, 32);
        }).to(duration, {
          position: dp
        }).delay(durationdelay).call(function() {
          _this.isButtonPressing ? _this.playDefend() : _this.playPutDown(isFaceRight);
        }).start();
      };
      Shield.prototype.playDefend = function() {
        if (this.status == Shield_1.STATUS_PUTDOWN || this.status == Shield_1.STATUS_DEFEND) return;
        this.status = Shield_1.STATUS_DEFEND;
        cc.log("\u9632\u5fa1 isBehind:" + this.isBehind + " zIndex:" + this.node.zIndex);
      };
      Shield.prototype.playPutDown = function(isFaceRight) {
        var _this = this;
        if (this.status == Shield_1.STATUS_PUTDOWN || this.status == Shield_1.STATUS_IDLE) return;
        var isBehindTemp = this.isBehindChange ? !this.isBehind : this.isBehind;
        this.status = Shield_1.STATUS_PUTDOWN;
        var duration = 1 == this.data.isHeavy ? .2 : .1;
        var dp = Shield_1.DEFAULT_POS[this.dir].clone();
        var tp = Shield_1.TRANSFORM_POS[this.dir].clone();
        if (!isFaceRight) {
          dp.x = -dp.x;
          tp.x = -tp.x;
        }
        cc.log("\u653e\u4e0b isBehind:" + this.isBehind + " isBehindTemp:" + isBehindTemp + " zIndex:" + this.node.zIndex);
        cc.tween(this.node).to(duration, {
          position: tp
        }).call(function() {
          _this.node.zIndex = isBehindTemp ? _this.avatarZindex - Shield_1.ZOFFSET : _this.avatarZindex + Shield_1.ZOFFSET;
          _this.sprite.node.color = isBehindTemp ? cc.color(32, 32, 32) : cc.Color.WHITE;
        }).to(duration, {
          position: dp
        }).call(function() {
          _this.playIdle();
        }).start();
      };
      Shield.prototype.changeZIndexByDir = function(avatarZindex, dir, isFaceRight) {
        if (this.isAniming) return;
        this.avatarZindex = avatarZindex;
        this.dir = dir;
        var isDefending = this.status == Shield_1.STATUS_DEFEND;
        var currentIndex = avatarZindex - Shield_1.ZOFFSET;
        switch (dir) {
         case PlayerAvatar_1.default.DIR_UP:
          currentIndex = avatarZindex + (isDefending ? -Shield_1.ZOFFSET : Shield_1.ZOFFSET);
          this.sprite.node.color = isDefending ? cc.color(32, 32, 32) : cc.Color.WHITE;
          break;

         case PlayerAvatar_1.default.DIR_DOWN:
          currentIndex = avatarZindex + (isDefending ? Shield_1.ZOFFSET : -Shield_1.ZOFFSET);
          this.sprite.node.color = isDefending ? cc.Color.WHITE : cc.color(32, 32, 32);
          break;

         case PlayerAvatar_1.default.DIR_LEFT:
         case PlayerAvatar_1.default.DIR_RIGHT:
          currentIndex = avatarZindex + (isDefending ? Shield_1.ZOFFSET : -Shield_1.ZOFFSET);
          this.sprite.node.color = isDefending ? cc.Color.WHITE : cc.color(32, 32, 32);
        }
        var temp = this.isBehind;
        this.isBehind = dir != PlayerAvatar_1.default.DIR_UP;
        this.isBehindChange = this.isBehind != temp;
        this.node.zIndex = currentIndex;
        var p = isDefending ? Shield_1.DEFEND_POS[dir] : Shield_1.DEFAULT_POS[dir].clone();
        isFaceRight || (p.x = -p.x);
        this.node.position = p;
      };
      Shield.prototype.use = function(isFaceRight) {
        this.isButtonPressing = true;
        if (this.data.equipmetType != InventoryManager_1.default.SHIELD) return;
        if (this.status == Shield_1.STATUS_PUTDOWN) return;
        if (this.isDefendOrParrying) return;
        this.playParry(isFaceRight);
      };
      Shield.prototype.cancel = function(isFaceRight) {
        this.isButtonPressing = false;
        if (this.status != Shield_1.STATUS_DEFEND) return;
        this.playPutDown(isFaceRight);
      };
      Shield.prototype.changeRes = function(resName) {
        if (!resName || resName.length < 1) return;
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
        this.sprite.node.width = 1 == this.data.isHeavy ? 80 : 64;
        this.sprite.node.height = 1 == this.data.isHeavy ? 80 : 64;
        this.data.equipmetType == InventoryManager_1.default.SHIELD && this.playIdle();
      };
      Shield.prototype.faceRightChange = function(isFaceRight) {
        if (this.status == Shield_1.STATUS_PUTDOWN || this.status == Shield_1.STATUS_DEFEND || this.status == Shield_1.STATUS_PARRY) return;
        var duration = 1 == this.data.isHeavy ? .2 : .1;
        var dp = Shield_1.DEFAULT_POS[this.dir].clone();
        isFaceRight || (dp.x = -dp.x);
        cc.tween(this.node).to(duration, {
          position: dp
        }).start();
      };
      var Shield_1;
      Shield.BLOCK_FAILED = 0;
      Shield.BLOCK_NORMAL = 1;
      Shield.BLOCK_PARRY = 2;
      Shield.STATUS_IDLE = 0;
      Shield.STATUS_PARRY = 1;
      Shield.STATUS_DEFEND = 2;
      Shield.STATUS_PUTDOWN = 3;
      Shield.ZOFFSET = 2;
      Shield.DEFAULT_POS = [ cc.v3(0, 32), cc.v3(0, 48), cc.v3(-8, 48), cc.v3(-8, 48) ];
      Shield.TRANSFORM_POS = [ cc.v3(10, 40), cc.v3(10, 40), cc.v3(32, 44), cc.v3(32, 44) ];
      Shield.DEFEND_POS = [ cc.v3(0, 48), cc.v3(0, 32), cc.v3(24, 40), cc.v3(24, 40) ];
      __decorate([ property(cc.Sprite) ], Shield.prototype, "sprite", void 0);
      __decorate([ property(cc.Prefab) ], Shield.prototype, "blockLightPrefab", void 0);
      Shield = Shield_1 = __decorate([ ccclass ], Shield);
      return Shield;
    }(cc.Component);
    exports.default = Shield;
    cc._RF.pop();
  }, {
    "./Data/DamageData": "DamageData",
    "./Data/EquipmentData": "EquipmentData",
    "./Data/FromData": "FromData",
    "./Effect/BlockLight": "BlockLight",
    "./EventHelper": "EventHelper",
    "./Logic": "Logic",
    "./Manager/InventoryManager": "InventoryManager",
    "./Manager/StatusManager": "StatusManager",
    "./PlayerAvatar": "PlayerAvatar",
    "./Utils/IndexZ": "IndexZ"
  } ],
  Shooter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9805u1Wn9OeouYmQSWcHcq", "Shooter");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Bullet_1 = require("./Item/Bullet");
    var Logic_1 = require("./Logic");
    var EquipmentData_1 = require("./Data/EquipmentData");
    var BulletData_1 = require("./Data/BulletData");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var FromData_1 = require("./Data/FromData");
    var DamageData_1 = require("./Data/DamageData");
    var IndexZ_1 = require("./Utils/IndexZ");
    var AreaOfEffect_1 = require("./Actor/AreaOfEffect");
    var ColliderTag_1 = require("./Actor/ColliderTag");
    var InventoryManager_1 = require("./Manager/InventoryManager");
    var ActorUtils_1 = require("./Utils/ActorUtils");
    var Utils_1 = require("./Utils/Utils");
    var NodeKey_1 = require("./Utils/NodeKey");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Shooter = function(_super) {
      __extends(Shooter, _super);
      function Shooter() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bullet = null;
        _this.isAI = false;
        _this.isFromPlayer = false;
        _this.dungeon = null;
        _this.player = null;
        _this.isEx = false;
        _this.isAutoAim = true;
        _this.bulletName = "";
        _this.data = new EquipmentData_1.default();
        _this.hv = cc.v3(1, 0);
        _this.isAiming = false;
        _this.remoteDamagePlayer = new DamageData_1.default();
        _this.from = new FromData_1.default();
        _this.skipTopwall = false;
        _this.isBuilding = false;
        _this.aoePools = {};
        _this.delayDestoryAoeList = [];
        _this.delayDestoryBulletList = [];
        _this.checkAoeTimeDelay = 0;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Shooter_1 = Shooter;
      Shooter.prototype.onLoad = function() {
        this.graphics = this.getComponent(cc.Graphics);
        this.bulletPool = new cc.NodePool(Bullet_1.default);
        this.sprite = this.node.getChildByName("sprite");
        this.anim = this.getComponent(cc.Animation);
      };
      Shooter.prototype.playWalk = function(isPlay) {
        if (!this.anim) return;
        if (isPlay) this.anim.play("ShooterWalk"); else {
          this.anim.pause();
          this.sprite.y = 0;
        }
      };
      Shooter.prototype.changeRes = function(resName, subfix) {
        this.sprite || (this.sprite = this.node.getChildByName("sprite"));
        if (!this.sprite) return;
        var spriteFrame = this.getSpriteFrameByName(resName, subfix);
        this.sprite.getComponent(cc.Sprite).spriteFrame = spriteFrame;
        if (!this.isBuilding) {
          this.sprite.width = 1.5 * spriteFrame.getOriginalSize().width;
          this.sprite.height = 1.5 * spriteFrame.getOriginalSize().height;
          this.sprite.anchorX = .2;
          if (1 == this.data.far) {
            this.sprite.width = 2 * this.sprite.width;
            this.sprite.height = 2 * this.sprite.height;
            this.sprite.anchorX = .5;
          }
        }
      };
      Shooter.prototype.changeResColor = function(color) {
        this.sprite.color = color;
      };
      Shooter.prototype.getSpriteFrameByName = function(resName, subfix) {
        var spriteFrame = Logic_1.default.spriteFrameRes(resName + subfix);
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(resName + "anim0"));
        spriteFrame || (spriteFrame = Logic_1.default.spriteFrameRes(resName));
        return spriteFrame;
      };
      Object.defineProperty(Shooter.prototype, "Hv", {
        get: function() {
          return this.hv;
        },
        enumerable: false,
        configurable: true
      });
      Shooter.prototype.setHv = function(hv) {
        this.hv = hv;
        var pos = this.hasNearEnemy();
        pos.equals(cc.Vec3.ZERO) || (this.hv = pos);
        this.rotateCollider(cc.v2(this.hv.x, this.hv.y));
      };
      Shooter.prototype.getAoeNode = function(prefab, usePool) {
        var temp = null;
        this.aoePools[prefab.name] || (this.aoePools[prefab.name] = new cc.NodePool(AreaOfEffect_1.default));
        this.aoePools[prefab.name] && this.aoePools[prefab.name].size() > 0 && usePool && (temp = this.aoePools[prefab.name].get());
        temp && !temp.active || (temp = cc.instantiate(prefab));
        temp.opacity = 255;
        temp.active = true;
        return temp;
      };
      Shooter.prototype.destroyAoePrefab = function(nodeKey) {
        if (!nodeKey) return;
        this.aoePools[nodeKey.key] || (this.aoePools[nodeKey.key] = new cc.NodePool(AreaOfEffect_1.default));
        nodeKey.node.active = false;
        this.aoePools[nodeKey.key] && this.aoePools[nodeKey.key].put(nodeKey.node);
      };
      Shooter.prototype.fireAoe = function(prefab, aoeData, defaultPos, angleOffset, killCallBack, usePool) {
        var _this = this;
        if (!this.dungeon) return null;
        angleOffset || (angleOffset = 0);
        var aoe = this.getAoeNode(prefab, usePool).getComponent(AreaOfEffect_1.default);
        if (aoe) {
          var pos = this.node.convertToWorldSpaceAR(defaultPos || cc.v3(30, 0));
          pos = this.dungeon.node.convertToNodeSpaceAR(pos);
          aoe.show(this.dungeon.node, pos, this.hv, angleOffset, aoeData, killCallBack, usePool, function(node) {
            if (usePool) {
              node.active = false;
              _this.delayDestoryAoeList.push(new NodeKey_1.default(prefab.name, node));
            }
          });
        }
        return aoe;
      };
      Shooter.prototype.fireBullet = function(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData) {
        1 == this.data.isLineAim && this.graphics ? this.aimTargetLine(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData) : this.fireBulletDo(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData);
      };
      Shooter.prototype.fireBulletDo = function(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData) {
        var _this = this;
        if (this.sprite) {
          this.sprite.stopAllActions();
          this.sprite.position = cc.Vec3.ZERO;
          cc.tween(this.sprite).call(function() {
            _this.changeRes(_this.data.img, "anim1");
          }).by(.1, {
            position: cc.v3(10, 0)
          }).call(function() {
            _this.changeRes(_this.data.img, "anim2");
          }).by(.05, {
            position: cc.v3(-5, 0)
          }).by(.05, {
            position: cc.v3(0, 0)
          }).call(function() {
            _this.changeRes(_this.data.img, "anim0");
          }).start();
        }
        angleOffset || (angleOffset = 0);
        if (!this.dungeon) return;
        if (!this.isAI && !this.isEx && this.player.inventoryManager.equips[InventoryManager_1.default.REMOTE].equipmetType != InventoryManager_1.default.REMOTE) return;
        this.data.remoteAudio && this.data.remoteAudio.length > 0 ? AudioPlayer_1.default.play(this.data.remoteAudio) : AudioPlayer_1.default.play(AudioPlayer_1.default.SHOOT);
        this.fire(this.data.bulletType, this.bullet, this.bulletPool, angleOffset, this.hv.clone(), defaultPos, prefab, aoeData);
        this.fireArcBullet(this.data.bulletType, defaultPos, bulletArcExNum, prefab, aoeData);
        this.fireLinecBullet(this.data.bulletType, angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData);
      };
      Shooter.prototype.fireArcBullet = function(bulletType, defaultPos, bulletArcExNum, prefab, aoeData) {
        var exNum = bulletArcExNum ? this.data.bulletArcExNum + bulletArcExNum : this.data.bulletArcExNum;
        if (exNum <= 0) return;
        var angles = [ 10, -10, 20, -20, 30, -30, 40, -40, 50, -50, 60, -60, -70, -70, 80, -80, 90, -90, 100, -100, 110, -110, 120, -120, 130, -130, 140, -140, 150, -150, 160, -160, 170, -170, 180, -180 ];
        if (this.data.bulletArcExNum > angles.length) {
          var circleAngles = [ 0, 20, 45, 65, 90, 110, 135, 155, 180, 200, 225, 245, 270, 290, 315, 335 ];
          this.data.bulletArcExNum == Shooter_1.ARC_EX_NUM_8 && (circleAngles = [ 0, 45, 90, 135, 180, 225, 270, 315, 335 ]);
          for (var i = 0; i < circleAngles.length; i++) this.fire(bulletType, this.bullet, this.bulletPool, circleAngles[i], this.hv.clone(), defaultPos, prefab, aoeData);
        } else for (var i = 0; i < exNum; i++) i < angles.length && this.fire(bulletType, this.bullet, this.bulletPool, angles[i], this.hv.clone(), defaultPos, prefab, aoeData);
      };
      Shooter.prototype.fireLinecBullet = function(bulletType, angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData) {
        var _this = this;
        var exNum = bulletLineExNum ? this.data.bulletLineExNum + bulletLineExNum : this.data.bulletLineExNum;
        if (0 == exNum) return;
        this.schedule(function() {
          _this.fire(bulletType, _this.bullet, _this.bulletPool, angleOffset, _this.hv.clone(), defaultPos, prefab, aoeData);
          _this.fireArcBullet(bulletType, defaultPos, bulletArcExNum, prefab, aoeData);
        }, this.data.bulletLineInterval > 0 ? this.data.bulletLineInterval : .2, exNum, 0);
      };
      Shooter.prototype.fire = function(bulletType, prefab, pool, angleOffset, hv, defaultPos, aoePrefab, aoeData) {
        var bulletPrefab = null;
        pool.size() > 0 && (bulletPrefab = pool.get());
        bulletPrefab && !bulletPrefab.active || (bulletPrefab = cc.instantiate(prefab));
        bulletPrefab.parent = this.node;
        var pos = this.node.convertToWorldSpaceAR(defaultPos || cc.v3(30, 0));
        pos = this.dungeon.node.convertToNodeSpaceAR(pos);
        bulletPrefab.parent = this.dungeon.node;
        bulletPrefab.position = pos;
        bulletPrefab.scaleX = 1;
        bulletPrefab.scaleY = 1;
        bulletPrefab.active = true;
        var bullet = bulletPrefab.getComponent(Bullet_1.default);
        bullet.shooter = this;
        bullet.node.scaleY = this.node.scaleX > 0 ? 1 : -1;
        bullet.node.zIndex = IndexZ_1.default.OVERHEAD;
        bullet.isFromPlayer = !this.isAI || this.isFromPlayer;
        bullet.dungeon = this.dungeon;
        bullet.skipTopwall = this.skipTopwall;
        var bd = new BulletData_1.default();
        bd.valueCopy(Logic_1.default.bullets[bulletType]);
        if (bullet.isFromPlayer && this.player && !this.isEx) {
          bd.damage.physicalDamage = this.remoteDamagePlayer.physicalDamage;
          bd.damage.isCriticalStrike = this.remoteDamagePlayer.isCriticalStrike;
        }
        bd.size += this.data.bulletSize;
        bd.speed += this.data.bulletExSpeed;
        bd.speed + this.data.bulletExSpeed > 50 && (bd.speed += this.data.bulletExSpeed);
        bd.from.valueCopy(this.from);
        bullet.changeBullet(bd);
        this.bulletName = bullet.name + bd.resName;
        bullet.enabled = true;
        bullet.aoeData.valueCopy(aoeData);
        bullet.aoePrefab = aoePrefab;
        bullet.showBullet(cc.v3(cc.v2(hv).rotateSelf(angleOffset * Math.PI / 180)));
      };
      Shooter.prototype.addDestroyBullet = function(bulletNode) {
        bulletNode.active = false;
        this.delayDestoryBulletList.push(bulletNode);
      };
      Shooter.prototype.destroyBullet = function(bulletNode) {
        this.bulletPool && bulletNode && this.bulletPool.put(bulletNode);
      };
      Shooter.prototype.start = function() {};
      Shooter.prototype.drawLine = function(color, range, width) {
        if (!this.graphics) return;
        this.graphics.clear();
        this.graphics.fillColor = color;
        this.graphics.circle(0, 0, width / 2 + 1);
        this.graphics.circle(range, 0, width / 2 + 1);
        this.graphics.rect(0, -width / 2, range, width);
        this.graphics.fill();
      };
      Shooter.prototype.getRayCastPoint = function(range, startPos) {
        var s = startPos || cc.v3(0, 0);
        var r = range || 3e3;
        var p = cc.v3(r, 0);
        var p1 = this.node.convertToWorldSpaceAR(s);
        var p2 = this.node.convertToWorldSpaceAR(p);
        var results = cc.director.getPhysicsManager().rayCast(cc.v2(p1), cc.v2(p2), cc.RayCastType.All);
        var arr = new Array();
        if (results.length > 0) for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {
          var result = results_1[_i];
          if (this.isValidRayCastCollider(result.collider)) {
            p = this.node.convertToNodeSpaceAR(cc.v3(result.point));
            arr.push(p);
          }
        }
        var distance = r;
        for (var _a = 0, arr_1 = arr; _a < arr_1.length; _a++) {
          var point = arr_1[_a];
          var dtemp = Logic_1.default.getDistanceNoSqrt(point, s);
          if (distance >= dtemp) {
            distance = dtemp;
            p = point;
          }
        }
        return p;
      };
      Shooter.prototype.isValidRayCastCollider = function(collider) {
        var isInvalid = false;
        this.isAI ? collider.tag != ColliderTag_1.ColliderTag.NONPLAYER && collider.tag != ColliderTag_1.ColliderTag.BOSS || (isInvalid = true) : collider.tag == ColliderTag_1.ColliderTag.PLAYER && (isInvalid = true);
        collider.tag == ColliderTag_1.ColliderTag.BULLET && (isInvalid = true);
        collider.sensor && (isInvalid = true);
        return !isInvalid;
      };
      Shooter.prototype.aimTargetLine = function(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData) {
        var _this = this;
        if (this.isAiming) return;
        this.isAiming = true;
        if (!this.graphics) return;
        var width = 0;
        var p = this.getRayCastPoint();
        var isOver = false;
        var fun = function() {
          if (width < 1 && isOver) {
            _this.fireBulletDo(angleOffset, defaultPos, bulletArcExNum, bulletLineExNum, prefab, aoeData);
            _this.unschedule(fun);
            _this.graphics.clear();
            _this.isAiming = false;
          } else _this.drawLine(cc.color(255, 0, 0, 200), p.x, width);
          width > 10 && !isOver ? isOver = true : isOver ? width -= 1 : width += 1;
        };
        this.schedule(fun, .02, 30);
      };
      Shooter.prototype.drawArc = function(angle) {
        if (!this.graphics) return;
        this.graphics.clear();
        if (angle < 0) return;
        var r = 1e3;
        var startAngle = 2 * -angle * Math.PI / 360;
        var endAngle = 2 * angle * Math.PI / 360;
        var startPos = cc.v3(r * Math.cos(startAngle), r * Math.sin(startAngle));
        var endPos = cc.v3(r * Math.cos(endAngle), r * Math.sin(endAngle));
        this.graphics.arc(0, 0, r, 2 * Math.PI - startAngle, 2 * Math.PI - endAngle);
        this.graphics.fill();
        this.graphics.moveTo(0, 0);
        this.graphics.lineTo(startPos.x, startPos.y);
        this.graphics.lineTo(endPos.x, endPos.y);
        this.graphics.close();
        this.graphics.fill();
      };
      Shooter.prototype.isCheckAoeTimeDelay = function(dt) {
        this.checkAoeTimeDelay += dt;
        if (this.checkAoeTimeDelay > .1) {
          this.checkAoeTimeDelay = 0;
          return true;
        }
        return false;
      };
      Shooter.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > .05) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      Shooter.prototype.update = function(dt) {
        this.isCheckAoeTimeDelay(dt) && this.destroyAoePrefab(this.delayDestoryAoeList.pop());
        this.isCheckTimeDelay(dt) && this.destroyBullet(this.delayDestoryBulletList.pop());
      };
      Shooter.prototype.getParentNode = function() {
        return this.parentNode ? this.parentNode : this.node.parent;
      };
      Shooter.prototype.hasNearEnemy = function() {
        if (!this.isAutoAim) return cc.Vec3.ZERO;
        if (!this.isAI && this.dungeon) return ActorUtils_1.default.getDirectionFromNearestEnemy(this.player.node.position, this.isAI, this.dungeon, false, 600);
        return cc.Vec3.ZERO;
      };
      Shooter.prototype.rotateCollider = function(direction) {
        if (direction.equals(cc.Vec2.ZERO)) return;
        var sx = Math.abs(this.node.scaleX);
        this.node.scaleX = this.getParentNode().scaleX > 0 ? sx : -sx;
        var sy = Math.abs(this.node.scaleY);
        this.node.scaleY = this.node.scaleX < 0 ? -sy : sy;
        this.node.angle = Utils_1.default.getRotateAngle(direction, this.node.scaleX < 0);
      };
      var Shooter_1;
      Shooter.DefAULT_SPEED = 300;
      Shooter.ARC_EX_NUM_8 = 80;
      Shooter.ARC_EX_NUM_16 = 99;
      __decorate([ property(cc.Prefab) ], Shooter.prototype, "bullet", void 0);
      __decorate([ property ], Shooter.prototype, "isAI", void 0);
      Shooter = Shooter_1 = __decorate([ ccclass ], Shooter);
      return Shooter;
    }(cc.Component);
    exports.default = Shooter;
    cc._RF.pop();
  }, {
    "./Actor/AreaOfEffect": "AreaOfEffect",
    "./Actor/ColliderTag": "ColliderTag",
    "./Data/BulletData": "BulletData",
    "./Data/DamageData": "DamageData",
    "./Data/EquipmentData": "EquipmentData",
    "./Data/FromData": "FromData",
    "./Item/Bullet": "Bullet",
    "./Logic": "Logic",
    "./Manager/InventoryManager": "InventoryManager",
    "./Utils/ActorUtils": "ActorUtils",
    "./Utils/AudioPlayer": "AudioPlayer",
    "./Utils/IndexZ": "IndexZ",
    "./Utils/NodeKey": "NodeKey",
    "./Utils/Utils": "Utils"
  } ],
  ShopMart: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1b8085+xzBE16cPL5KYFJeE", "ShopMart");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Player_1 = require("../Player");
    var Building_1 = require("./Building");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ShopMart = function(_super) {
      __extends(ShopMart, _super);
      function ShopMart() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isOpen = false;
        return _this;
      }
      ShopMart.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
      };
      ShopMart.prototype.open = function() {};
      ShopMart.prototype.close = function() {};
      ShopMart.prototype.onCollisionEnter = function(other, self) {
        var player = other.node.getComponent(Player_1.default);
        player && this.open();
      };
      ShopMart.prototype.onCollisionExit = function(other, self) {
        var player = other.node.getComponent(Player_1.default);
        player && this.close();
      };
      ShopMart = __decorate([ ccclass ], ShopMart);
      return ShopMart;
    }(Building_1.default);
    exports.default = ShopMart;
    cc._RF.pop();
  }, {
    "../Player": "Player",
    "./Building": "Building"
  } ],
  ShopTable: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "feb404aValPAJxRKh4uvHLm", "ShopTable");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../Utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ShopTable = function(_super) {
      __extends(ShopTable, _super);
      function ShopTable() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ShopTable_1 = ShopTable;
      ShopTable.prototype.onLoad = function() {
        this.info = this.node.getChildByName("info");
        this.label = this.info.getComponentInChildren(cc.Label);
      };
      ShopTable.prototype.start = function() {};
      ShopTable.prototype.showItem = function() {
        if (!this.node.parent) return;
        if (this.data.isSaled) this.sale(true); else {
          var dungeon = this.node.parent.getComponent(Dungeon_1.default);
          if (dungeon) {
            var rand4save = Logic_1.default.mapManager.getRandom4Save(Logic_1.default.mapManager.getRebornSeed(this.seed));
            this.data.shopType == ShopTable_1.EQUIPMENT ? dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(this.data.defaultPos), this.data.equipdata, 3, this) : this.data.shopType == ShopTable_1.ITEM && dungeon.addItem(Dungeon_1.default.getPosInMap(this.data.defaultPos), Logic_1.default.getRandomItemType(rand4save), 0, this);
          }
          this.sale(false);
        }
      };
      ShopTable.prototype.setDefaultPos = function(defaultPos) {
        this.data.defaultPos = defaultPos;
        this.node.position = Dungeon_1.default.getPosInMap(defaultPos);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      ShopTable.prototype.sale = function(isSaled) {
        this.info || (this.info = this.node.getChildByName("info"));
        this.label || (this.label = this.info.getComponentInChildren(cc.Label));
        this.data.isSaled = isSaled;
        this.label.string = "" + this.data.price;
        this.info.opacity = this.data.isSaled ? 0 : 255;
        var saveTable = Logic_1.default.mapManager.getCurrentMapBuilding(this.data.defaultPos);
        saveTable && saveTable.valueCopy(this.data);
      };
      var ShopTable_1;
      ShopTable.EQUIPMENT = 0;
      ShopTable.ITEM = 1;
      ShopTable = ShopTable_1 = __decorate([ ccclass ], ShopTable);
      return ShopTable;
    }(Building_1.default);
    exports.default = ShopTable;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  SlimeVenom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a7fa4vRR+xDO6TrjB6jQViO", "SlimeVenom");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("../Logic");
    var DamageData_1 = require("../Data/DamageData");
    var Actor_1 = require("../Base/Actor");
    var FromData_1 = require("../Data/FromData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SlimeVenom = function(_super) {
      __extends(SlimeVenom, _super);
      function SlimeVenom() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.isHide = false;
        _this.isForever = false;
        _this.from = FromData_1.default.getClone("\u53f2\u83b1\u59c6\u6bd2\u6db2", "venom");
        _this.checkTimeDelay = 0;
        return _this;
      }
      SlimeVenom.prototype.onLoad = function() {
        this.venom1 = this.node.getChildByName("sprite").getChildByName("venom1");
        this.venom2 = this.node.getChildByName("sprite").getChildByName("venom2");
        this.venom3 = this.node.getChildByName("sprite").getChildByName("venom2");
        this.anim = this.getComponent(cc.Animation);
        this.sprite = this.node.getChildByName("sprite");
      };
      SlimeVenom.prototype.onEnable = function() {
        var _this = this;
        this.isHide = false;
        this.sprite.opacity = 255;
        this.venom1.angle = Logic_1.default.getRandomNum(0, 180);
        this.venom2.angle = Logic_1.default.getRandomNum(0, 180);
        this.venom2.angle = Logic_1.default.getRandomNum(0, 180);
        this.anim.play();
        this.isForever || this.scheduleOnce(function() {
          if (_this.anim) {
            _this.isHide = true;
            _this.anim.play("VenomHide");
            _this.scheduleOnce(function() {
              cc.director.emit("destoryvenom", {
                detail: {
                  coinNode: _this.node
                }
              });
            }, 1.5);
          }
        }, 3);
        this.damagePlayer(this.from);
      };
      SlimeVenom.prototype.addStatus = function(statusType, from) {};
      SlimeVenom.prototype.getNearPlayerDistance = function(playerNode) {
        var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, playerNode.position);
        return dis;
      };
      SlimeVenom.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      SlimeVenom.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.isCheckTimeDelay(dt) && this.damagePlayer(this.from);
      };
      SlimeVenom.prototype.damagePlayer = function(from) {
        if (this.target && this.getNearPlayerDistance(this.target.node) < 60 * this.node.scale && this.node.active && !this.isHide) {
          var dd = new DamageData_1.default();
          dd.magicDamage = 3;
          this.target.takeDamage(dd, from);
        }
      };
      SlimeVenom.prototype.getCenterPosition = function() {
        return this.node.position.clone();
      };
      SlimeVenom.prototype.takeDamage = function(damge) {
        return false;
      };
      SlimeVenom.prototype.actorName = function() {
        return "\u53f2\u83b1\u59c6\u6bd2\u6db2";
      };
      SlimeVenom.prototype.takeDizz = function(dizzDuration) {};
      SlimeVenom.prototype.updateStatus = function(statusList, totalStatusData) {};
      SlimeVenom.prototype.hideSelf = function(hideDuration) {};
      SlimeVenom.prototype.updateDream = function(offset) {
        return 0;
      };
      SlimeVenom.prototype.setLinearVelocity = function(movement) {};
      SlimeVenom = __decorate([ ccclass ], SlimeVenom);
      return SlimeVenom;
    }(Actor_1.default);
    exports.default = SlimeVenom;
    cc._RF.pop();
  }, {
    "../Base/Actor": "Actor",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Logic": "Logic"
  } ],
  Slime: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "263b6VIDCJP+LELMRjXCL3M", "Slime");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var Dungeon_1 = require("../Dungeon");
    var SlimeVenom_1 = require("./SlimeVenom");
    var MonsterManager_1 = require("../Manager/MonsterManager");
    var NextStep_1 = require("../Utils/NextStep");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var Item_1 = require("../Item/Item");
    var IndexZ_1 = require("../Utils/IndexZ");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Slime = function(_super) {
      __extends(Slime, _super);
      function Slime() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.venom = null;
        _this.healthBar = null;
        _this.isFaceRight = true;
        _this.isMoving = false;
        _this.timeDelay = 0;
        _this.isHurt = false;
        _this.isCrownFall = false;
        _this.isDashing = false;
        _this.currentlinearVelocitySpeed = cc.Vec2.ZERO;
        _this.scaleSize = 1;
        _this.slimeType = 0;
        _this.meleeSkill = new NextStep_1.default();
        _this.venomTimeDelay = 0;
        _this.childSlimeTimeDelay = 0;
        return _this;
      }
      Slime_1 = Slime;
      Slime.prototype.onLoad = function() {
        var _this = this;
        this.meleeSkill.IsExcuting = false;
        this.sc.isDied = false;
        this.anim = this.getComponent(cc.Animation);
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.updatePlayerPos();
        this.venomPool = new cc.NodePool();
        this.sprite = this.node.getChildByName("sprite");
        this.crown = this.sprite.getChildByName("crown");
        this.decorate = this.node.getChildByName("sprite").getChildByName("body").getChildByName("decorate");
        this.dashlight = this.sprite.getChildByName("dashlight");
        this.dashlight.opacity = 0;
        EventHelper_1.EventHelper.on("destoryvenom", function(detail) {
          _this.destroyVenom(detail.coinNode);
        });
        this.scheduleOnce(function() {
          _this.sc.isShow = true;
        }, 1);
      };
      Slime.prototype.start = function() {
        _super.prototype.start.call(this);
        this.crown && 0 != this.slimeType && (this.crown.opacity = 0);
        this.decorate && this.slimeType > 2 && (this.decorate.opacity = 0);
      };
      Slime.prototype.getVenom = function(parentNode, pos) {
        if (this.scaleSize < 1 || this.sc.isDied) return;
        var venomPrefab = null;
        this.venomPool.size() > 0 && (venomPrefab = this.venomPool.get());
        venomPrefab && !venomPrefab.active || (venomPrefab = cc.instantiate(this.venom));
        venomPrefab.parent = parentNode;
        venomPrefab.position = pos;
        venomPrefab.scale = 0 == this.slimeType ? 1.5 : 1;
        venomPrefab.getComponent(SlimeVenom_1.default).target = this.dungeon.player;
        venomPrefab.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
        venomPrefab.opacity = 255;
        venomPrefab.active = true;
      };
      Slime.prototype.destroyVenom = function(venomNode) {
        if (!venomNode) return;
        venomNode.active = false;
        this.venomPool && this.venomPool.put(venomNode);
      };
      Slime.prototype.AnimAttacking = function() {
        this.meleeSkill.IsExcuting = false;
        var attackRange = 64 + 50 * this.scaleSize;
        var target = ActorUtils_1.default.getNearestEnemyActor(this.node.position, true, this.dungeon);
        var newdis = ActorUtils_1.default.getTargetDistance(this, target);
        newdis < attackRange && target && target.takeDamage(this.data.getAttackPoint(), FromData_1.default.getClone(this.actorName(), "bossslimehelmet"), this);
      };
      Slime.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && this.isDashing && this.dungeon && !this.isHurt && !this.sc.isDied) {
          this.isDashing = false;
          this.rigidbody.linearVelocity = cc.Vec2.ZERO;
          target.takeDamage(this.data.getAttackPoint(), FromData_1.default.getClone(this.actorName(), "bossslimehelmet"), this);
        }
      };
      Slime.prototype.isVenomTimeDelay = function(dt) {
        this.venomTimeDelay += dt;
        if (this.venomTimeDelay > .2) {
          this.venomTimeDelay = 0;
          return true;
        }
        return false;
      };
      Slime.prototype.isChildSlimeTimeDelay = function(dt) {
        this.childSlimeTimeDelay += dt;
        if (this.childSlimeTimeDelay > 5) {
          this.childSlimeTimeDelay = 0;
          return true;
        }
        return false;
      };
      Slime.prototype.updateLogic = function(dt) {
        this.healthBar.node.active = !this.sc.isDied;
        this.timeDelay += dt;
        if (this.timeDelay > .016) {
          this.timeDelay = 0;
          this.bossAction();
        }
        this.dashlight.opacity = 0;
        if (this.dungeon && this.isDashing) {
          this.dashlight.opacity = 128;
          this.rigidbody.linearVelocity = this.currentlinearVelocitySpeed.clone();
        }
        if (this.dungeon) {
          var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
          playerDis < 64 && !this.isHurt && (this.rigidbody.linearVelocity = cc.v2(0, 0));
        }
        this.sc.isDied && (this.rigidbody.linearVelocity = cc.Vec2.ZERO);
        this.healthBar.node.active = !this.sc.isDied;
        this.data.currentHealth < 1 && this.killed();
        this.node.scaleY = this.scaleSize;
        this.node.scaleX = this.isFaceRight ? this.scaleSize : -this.scaleSize;
        this.isVenomTimeDelay(dt) && this.isMoving && !this.meleeSkill.IsExcuting && this.getVenom(this.node.parent, this.node.position);
        if (this.isChildSlimeTimeDelay(dt) && !this.sc.isDied && 0 == this.slimeType && this.dungeon) {
          var count = 0;
          for (var _i = 0, _a = this.dungeon.monsterManager.monsterList; _i < _a.length; _i++) {
            var m = _a[_i];
            m.sc.isDied || count++;
          }
          if (count < 10 && this.dungeon.monsterManager.monsterList.length < 50) {
            var pos = Dungeon_1.default.getIndexInMap(this.node.position.clone());
            this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_SLIME, pos, this.dungeon, true);
          }
        }
      };
      Slime.prototype.takeDamage = function(damage) {
        var _this = this;
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.isHurt = true;
        this.isDashing = false;
        this.scheduleOnce(function() {
          _this.node && (_this.isHurt = false);
        }, .1);
        this.anim.play("SlimeHit");
        this.meleeSkill.IsExcuting = false;
        if (this.data.currentHealth < this.data.Common.maxHealth / 2 && !this.isCrownFall && 0 == this.slimeType) {
          this.isCrownFall = true;
          this.sc.isShow = false;
          this.scheduleOnce(function() {
            _this.sc.isShow = true;
            _this.crown.opacity = 0;
          }, 1);
          this.anim.play("SlimeCrownFall");
        }
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Slime.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        this.sc.isDied = true;
        this.isDashing = false;
        this.anim.play("SlimeDie");
        var collider = this.getComponent(cc.PhysicsBoxCollider);
        collider.sensor = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        if (this.dungeon) {
          if (0 == this.slimeType) {
            var rand4save = Logic_1.default.mapManager.getRandom4Save(this.seed);
            Achievement_1.default.addMonsterKillAchievement(this.data.resName);
            EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_OILGOLD, {
              pos: this.node.position,
              count: 100
            });
            cc.director.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              detail: {
                pos: this.node.position,
                res: Item_1.default.HEART
              }
            });
            cc.director.emit(EventHelper_1.EventHelper.DUNGEON_ADD_ITEM, {
              detail: {
                pos: this.node.position,
                res: Item_1.default.DREAM
              }
            });
            this.dungeon.addEquipment(Logic_1.default.getRandomEquipType(rand4save), Dungeon_1.default.getPosInMap(this.pos), null, 3);
          }
          if (this.slimeType < Slime_1.DIVIDE_COUNT) {
            cc.director.emit(EventHelper_1.EventHelper.DUNGEON_ADD_COIN, {
              detail: {
                pos: this.node.position,
                count: 5
              }
            });
            cc.director.emit(EventHelper_1.EventHelper.BOSS_ADDSLIME, {
              detail: {
                posIndex: this.pos.clone(),
                slimeType: this.slimeType + 1
              }
            });
            cc.director.emit(EventHelper_1.EventHelper.BOSS_ADDSLIME, {
              detail: {
                posIndex: this.pos.clone(),
                slimeType: this.slimeType + 1
              }
            });
          }
        }
      };
      Slime.prototype.bossAction = function() {
        var _this = this;
        if (this.sc.isDied || !this.dungeon || this.isHurt) return;
        var newPos = cc.v3(0, 0);
        newPos.x += Logic_1.default.getRandomNum(0, 2e3) - 1e3;
        newPos.y += Logic_1.default.getRandomNum(0, 2e3) - 1e3;
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        this.node.position = Dungeon_1.default.fixOuterMap(this.node.position);
        this.pos = Dungeon_1.default.getIndexInMap(this.node.position);
        this.changeZIndex();
        var pos = newPos.clone();
        var attackRange = 64 + 50 * this.scaleSize;
        if (playerDis < attackRange && !this.dungeon.player.sc.isDied && !this.isDashing && this.sc.isShow && this.scaleSize >= 1) {
          pos = this.dungeon.player.getCenterPosition().sub(this.node.position);
          pos.equals(cc.Vec3.ZERO) || (pos = pos.normalizeSelf());
          var isPlayAttack = this.anim.getAnimationState("SlimeAttack").isPlaying;
          if (!isPlayAttack) {
            this.meleeSkill.IsExcuting = true;
            this.anim.play("SlimeAttack");
          }
        }
        var speed = 300 - 50 * this.scaleSize;
        var dashRange = 128 + 35 * this.scaleSize;
        if (playerDis > dashRange && !this.dungeon.player.sc.isDied && !this.isDashing && this.sc.isShow && Logic_1.default.getHalfChance()) {
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.MELEE
            }
          });
          Logic_1.default.getHalfChance() && (pos = this.dungeon.player.getCenterPosition().sub(this.node.position));
          this.move(pos, 1.5 * speed);
          this.isDashing = true;
          this.scheduleOnce(function() {
            _this.node && (_this.isDashing = false);
          }, 2);
        }
        Logic_1.default.getRandomNum(1, 10) < 3 && this.move(pos, speed);
      };
      Slime.prototype.move = function(pos, speed) {
        if (this.sc.isDied || this.isHurt || this.isDashing || !this.sc.isShow || this.meleeSkill.IsExcuting) return;
        if (pos.equals(cc.Vec3.ZERO)) return;
        pos = pos.normalizeSelf();
        this.meleeSkill.IsExcuting && !pos.equals(cc.Vec3.ZERO) && (pos = pos.mul(.5));
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.node.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement.clone();
        this.currentlinearVelocitySpeed = movement.clone();
        this.isMoving = 0 != h || 0 != v;
        this.isMoving && (this.isFaceRight = h > 0);
        var isPlayAttack = this.anim.getAnimationState("SlimeAttack").isPlaying;
        this.anim.getAnimationState("SlimeIdle").isPlaying || isPlayAttack || this.anim.play("SlimeIdle");
        this.changeZIndex();
      };
      Slime.prototype.actorName = function() {
        return "\u53f2\u83b1\u59c6\u4e4b\u738b";
      };
      var Slime_1;
      Slime.DIVIDE_COUNT = 4;
      __decorate([ property(cc.Prefab) ], Slime.prototype, "venom", void 0);
      Slime = Slime_1 = __decorate([ ccclass ], Slime);
      return Slime;
    }(Boss_1.default);
    exports.default = Slime;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Item/Item": "Item",
    "../Logic": "Logic",
    "../Manager/MonsterManager": "MonsterManager",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "../Utils/NextStep": "NextStep",
    "./Boss": "Boss",
    "./SlimeVenom": "SlimeVenom"
  } ],
  SpecialManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e58b4559dND3JlWZESKg4rV", "SpecialManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SlimeVenom_1 = require("../Boss/SlimeVenom");
    var DamageData_1 = require("../Data/DamageData");
    var StatusManager_1 = require("./StatusManager");
    var NonPlayer_1 = require("../NonPlayer");
    var IndexZ_1 = require("../Utils/IndexZ");
    var AreaOfEffect_1 = require("../Actor/AreaOfEffect");
    var AreaOfEffectData_1 = require("../Data/AreaOfEffectData");
    var Logic_1 = require("../Logic");
    var EventHelper_1 = require("../EventHelper");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SpecialManager = function(_super) {
      __extends(SpecialManager, _super);
      function SpecialManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.aoe = null;
        _this.venom = null;
        _this.howl = null;
        _this.claw = null;
        _this.blade = null;
        return _this;
      }
      SpecialManager_1 = SpecialManager;
      SpecialManager.prototype.clear = function() {};
      SpecialManager.prototype.addPlacement = function(placeType, distance, isFaceRight, from, isVariation) {
        if (!this.dungeon) return;
        var pos = this.node.convertToWorldSpaceAR(cc.v3(distance, 0));
        pos = this.dungeon.node.convertToNodeSpaceAR(pos);
        switch (placeType) {
         case SpecialManager_1.AFTER_VENOM:
          this.addVenom(pos, isFaceRight, from, isVariation);
          break;

         case SpecialManager_1.AFTER_CLAW:
          this.addClaw(pos, isFaceRight, from, isVariation);
          break;

         case SpecialManager_1.AFTER_BLADE:
          this.addBlade(pos, isFaceRight, from, isVariation);
          break;

         case SpecialManager_1.AFTER_ASH:
          this.addAoe(pos, new AreaOfEffectData_1.default().init(.3, .3, .1, isVariation ? 4 : 3, IndexZ_1.default.getActorZIndex(this.node.parent.position), true, true, true, false, false, new DamageData_1.default(2), from, [ StatusManager_1.default.DIZZ ]), [ "ash001", "ash002", "ash003", "ash004" ], false, isFaceRight);
          cc.director.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            detail: {
              isHeavyShaking: true
            }
          });
          break;

         case SpecialManager_1.AFTER_ICE:
          AudioPlayer_1.default.play(AudioPlayer_1.default.ICEBOOM);
          this.addAoe(pos, new AreaOfEffectData_1.default().init(.8, 1, .2, isVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(this.node.parent.position), true, true, true, false, false, new DamageData_1.default(3), from, [ StatusManager_1.default.FROZEN ]), [ "ice001", "ice002", "ice002", "ice003", "ice004" ], false, isFaceRight);
          cc.director.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            detail: {
              isHeavyShaking: false
            }
          });
          break;

         case SpecialManager_1.AFTER_DOWN:
          this.addAoe(pos, new AreaOfEffectData_1.default().init(.3, 1, .1, isVariation ? 2 : 1, IndexZ_1.default.getActorZIndex(this.node.parent.position), true, true, true, false, false, new DamageData_1.default(1), from, [ StatusManager_1.default.FALLEN_DOWN ]), [ "ash001", "ash002", "ash003", "ash004" ], false, isFaceRight);
          cc.director.emit(EventHelper_1.EventHelper.CAMERA_SHAKE, {
            detail: {
              isHeavyShaking: false
            }
          });
          break;

         case SpecialManager_1.AFTER_SWORD:
          pos.y += 32;
          this.addAoe(pos, new AreaOfEffectData_1.default().init(.4, .1, 0, isVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(this.node.parent.position), true, true, true, false, false, new DamageData_1.default(4), from, [ StatusManager_1.default.BLEEDING ]), [ "specialswordlight001", "specialswordlight002", "specialswordlight003", "specialswordlight004" ], false, isFaceRight);
        }
      };
      SpecialManager.prototype.addEffect = function(placeType, distance, isFaceRight, from, isVariation) {
        if (!this.dungeon) return;
        var pos = this.node.convertToWorldSpaceAR(cc.v3(distance, 0));
        pos = this.dungeon.node.convertToNodeSpaceAR(pos);
        switch (placeType) {
         case SpecialManager_1.BEFORE_HOWL:
          this.addHowl(pos, isFaceRight, from, isVariation);
        }
      };
      SpecialManager.prototype.addVenom = function(pos, isFaceRight, from, isVariation) {
        var venom = cc.instantiate(this.venom);
        venom.getComponent(SlimeVenom_1.default).target = this.dungeon.player;
        venom.getComponent(SlimeVenom_1.default).isForever = false;
        venom.getComponent(SlimeVenom_1.default).from.valueCopy(from);
        venom.parent = this.dungeon.node;
        venom.position = pos;
        venom.zIndex = IndexZ_1.default.ACTOR;
        venom.scale = 0;
        cc.tween(venom).to(.5, {
          scale: isVariation ? 3 : 2
        }).start();
      };
      SpecialManager.prototype.addHowl = function(pos, isFaceRight, from, isVariation) {
        var monster = this.node.parent.getComponent(NonPlayer_1.default);
        monster && monster.addStatus(StatusManager_1.default.WEREWOLFDEFENCE, from);
        var howl = cc.instantiate(this.howl);
        var howlScript = howl.getComponent(AreaOfEffect_1.default);
        howlScript.show(this.dungeon.node, pos, cc.v3(1, 0), 0, new AreaOfEffectData_1.default().init(0, 2, 1.5, isVariation ? 3 : 2, IndexZ_1.default.getActorZIndex(howl.position), true, false, true, false, false, new DamageData_1.default(1), from, [ StatusManager_1.default.DIZZ ]));
      };
      SpecialManager.prototype.addClaw = function(pos, isFaceRight, from, isVariation) {
        var claw = cc.instantiate(this.claw);
        pos.y += 32;
        var areaScript = claw.getComponent(AreaOfEffect_1.default);
        areaScript.show(this.dungeon.node, pos, cc.v3(1, 0), 0, new AreaOfEffectData_1.default().init(0, .15, .1, isVariation ? 2 : 1, IndexZ_1.default.getActorZIndex(claw.position), true, false, true, false, false, new DamageData_1.default(2), from, [ StatusManager_1.default.BLEEDING ]));
      };
      SpecialManager.prototype.addAoe = function(pos, aoeData, spriteFrameNames, repeatForever, isFaceRight) {
        var aoe = cc.instantiate(this.aoe);
        pos.y += 32;
        var sprite = aoe.getChildByName("sprite").getComponent(cc.Sprite);
        var collider = aoe.getComponent(cc.BoxCollider);
        if (spriteFrameNames.length > 0) {
          var spriteframe = Logic_1.default.spriteFrameRes(spriteFrameNames[0]);
          sprite.node.width = spriteframe.getOriginalSize().width;
          sprite.node.height = spriteframe.getOriginalSize().height;
          sprite.node.scale = 4;
          sprite.node.scaleX = isFaceRight ? 4 : -4;
          collider.size.width = 3 * sprite.node.width;
          collider.size.height = 3 * sprite.node.height;
        }
        var tween = cc.tween();
        var _loop_1 = function(name) {
          tween.then(cc.tween().delay(.2).call(function() {
            sprite.spriteFrame = Logic_1.default.spriteFrameRes(name);
          }));
        };
        for (var _i = 0, spriteFrameNames_1 = spriteFrameNames; _i < spriteFrameNames_1.length; _i++) {
          var name = spriteFrameNames_1[_i];
          _loop_1(name);
        }
        repeatForever ? cc.tween(aoe).repeatForever(tween).start() : cc.tween(aoe).then(tween).delay(.2).call(function() {
          sprite.spriteFrame = null;
        }).start();
        var areaScript = aoe.getComponent(AreaOfEffect_1.default);
        areaScript.show(this.dungeon.node, pos, cc.v3(1, 0), 0, aoeData);
      };
      SpecialManager.prototype.addBlade = function(pos, isFaceRight, from, isVariation) {
        var prefab = cc.instantiate(this.blade);
        pos.y += 64;
        prefab.scaleX = isFaceRight ? 1 : -1;
        var areaScript = prefab.getComponent(AreaOfEffect_1.default);
        areaScript.show(this.dungeon.node, pos, cc.v3(1, 0), 0, new AreaOfEffectData_1.default().init(0, .2, .1, isVariation ? 2 : 1, IndexZ_1.default.getActorZIndex(prefab.position), true, false, true, false, false, new DamageData_1.default(2), from, []));
      };
      var SpecialManager_1;
      SpecialManager.BEFORE_HOWL = "special015";
      SpecialManager.AFTER_VENOM = "special019";
      SpecialManager.AFTER_CLAW = "special024";
      SpecialManager.AFTER_BLADE = "special008";
      SpecialManager.AFTER_ASH = "special030";
      SpecialManager.AFTER_ICE = "special031";
      SpecialManager.AFTER_DOWN = "special032";
      SpecialManager.AFTER_SWORD = "special033";
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "aoe", void 0);
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "venom", void 0);
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "howl", void 0);
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "claw", void 0);
      __decorate([ property(cc.Prefab) ], SpecialManager.prototype, "blade", void 0);
      SpecialManager = SpecialManager_1 = __decorate([ ccclass ], SpecialManager);
      return SpecialManager;
    }(cc.Component);
    exports.default = SpecialManager;
    cc._RF.pop();
  }, {
    "../Actor/AreaOfEffect": "AreaOfEffect",
    "../Boss/SlimeVenom": "SlimeVenom",
    "../Data/AreaOfEffectData": "AreaOfEffectData",
    "../Data/DamageData": "DamageData",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../NonPlayer": "NonPlayer",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/IndexZ": "IndexZ",
    "./StatusManager": "StatusManager"
  } ],
  Sphinx: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "613334RiSdNUKEp1LtYmQ1e", "Sphinx");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var Shooter_1 = require("../Shooter");
    var Dungeon_1 = require("../Dungeon");
    var StatusManager_1 = require("../Manager/StatusManager");
    var NextStep_1 = require("../Utils/NextStep");
    var MonsterManager_1 = require("../Manager/MonsterManager");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var EventHelper_1 = require("../EventHelper");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Sphinx = function(_super) {
      __extends(Sphinx, _super);
      function Sphinx() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.stormSkill = new NextStep_1.default();
        _this.summonSkill = new NextStep_1.default();
        _this.actionTimeDelay = 0;
        return _this;
      }
      Sphinx.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter01 = this.node.getChildByName("Shooter01").getComponent(Shooter_1.default);
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        this.shooter01.from.valueCopy(FromData_1.default.getClone(this.actorName(), "sphinxhead"));
      };
      Sphinx.prototype.start = function() {};
      Sphinx.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        this.playHit(this.node.getChildByName("sprite"));
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      Sphinx.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      Sphinx.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) return;
        this.changeZIndex();
        this.fireStorm();
        this.summonMonster();
      };
      Sphinx.prototype.summonMonster = function() {
        var _this = this;
        if (this.dungeon.getMonsterAliveNum() > 1) return;
        this.summonSkill.next(function() {
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.MELEE
            }
          });
          _this.summonSkill.IsExcuting = true;
          var pos = Dungeon_1.default.getIndexInMap(_this.node.position.clone());
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_SANDSTATUE, cc.v3(pos.x, pos.y - 1), _this.dungeon, true);
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_SANDSTATUE, cc.v3(pos.x + 1, pos.y - 1), _this.dungeon, true);
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_SANDSTATUE, cc.v3(pos.x - 1, pos.y - 1), _this.dungeon, true);
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_ANUBIS, cc.v3(pos.x - 1, pos.y - 2), _this.dungeon, true);
          _this.dungeon.monsterManager.addMonsterFromData(MonsterManager_1.default.MONSTER_ANUBIS, cc.v3(pos.x + 1, pos.y - 2), _this.dungeon, true);
        }, 15, true);
      };
      Sphinx.prototype.fireStorm = function() {
        var _this = this;
        this.stormSkill.next(function() {
          _this.stormSkill.IsExcuting = true;
          _this.anim.play("SphinxStorm");
          _this.scheduleOnce(function() {
            var pos = _this.node.position.clone().add(_this.shooter01.node.position);
            var hv = _this.dungeon.player.getCenterPosition().sub(pos);
            if (!hv.equals(cc.Vec3.ZERO)) {
              hv = hv.normalizeSelf();
              _this.shooter01.setHv(hv);
              _this.fireShooter(_this.shooter01, "bullet023", 0, -20);
              _this.fireShooter(_this.shooter01, "bullet123", 0, 0, 0);
              _this.fireShooter(_this.shooter01, "bullet223", 0, 0, 20);
            }
          }, .3);
          _this.scheduleOnce(function() {
            _this.stormSkill.IsExcuting = false;
            _this.anim.play("SphinxIdle");
          }, 2);
        }, 8, true);
      };
      Sphinx.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle) {
        shooter.dungeon = this.dungeon;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle, cc.Vec3.ZERO);
      };
      Sphinx.prototype.showBoss = function() {
        this.sc.isShow = true;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      Sphinx.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      Sphinx.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
        this.rigidbody.linearVelocity = cc.Vec2.ZERO;
      };
      Sphinx.prototype.actorName = function() {
        return "\u65af\u82ac\u514b\u65af";
      };
      Sphinx = __decorate([ ccclass ], Sphinx);
      return Sphinx;
    }(Boss_1.default);
    exports.default = Sphinx;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/MonsterManager": "MonsterManager",
    "../Manager/StatusManager": "StatusManager",
    "../Shooter": "Shooter",
    "../Utils/AudioPlayer": "AudioPlayer",
    "../Utils/NextStep": "NextStep",
    "./Boss": "Boss"
  } ],
  StackStateMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d89awtDlhAe5Rtlx6ayPx5", "StackStateMachine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DefaultStateMachine_1 = require("./DefaultStateMachine");
    var StackStateMachine = function(_super) {
      __extends(StackStateMachine, _super);
      function StackStateMachine(owner, initialState, globalState) {
        return _super.call(this, owner, initialState, globalState) || this;
      }
      StackStateMachine.prototype.setInitialState = function(state) {
        this.stateStack = new Array();
        this.currentState = state;
      };
      StackStateMachine.prototype.getCurrentState = function() {
        return this.currentState;
      };
      StackStateMachine.prototype.getPreviousState = function() {
        return 0 == this.stateStack.length ? null : this.stateStack[this.stateStack.length - 1];
      };
      StackStateMachine.prototype.changeState = function(newState) {
        this._changeState(newState, true);
      };
      StackStateMachine.prototype.revertToPreviousState = function() {
        if (0 == this.stateStack.length) return false;
        var previousState = this.stateStack.pop();
        this._changeState(previousState, false);
        return true;
      };
      StackStateMachine.prototype._changeState = function(newState, pushCurrentStateToStack) {
        pushCurrentStateToStack && this.currentState && this.stateStack.push(this.currentState);
        this.currentState && this.currentState.exit(this.owner);
        this.currentState = newState;
        this.currentState.enter(this.owner);
      };
      return StackStateMachine;
    }(DefaultStateMachine_1.default);
    exports.default = StackStateMachine;
    cc._RF.pop();
  }, {
    "./DefaultStateMachine": "DefaultStateMachine"
  } ],
  Start: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e1b90/rohdEk4SdmmEZANaD", "Start");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var AudioPlayer_1 = require("./Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Start = function(_super) {
      __extends(Start, _super);
      function Start() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.startButton = null;
        _this.continueButton = null;
        _this.cheatButton = null;
        _this.debugButton = null;
        _this.tourButton = null;
        _this.cheatClickCount = 0;
        _this.debugClickCount = 0;
        _this.tourClickCount = 0;
        return _this;
      }
      Start.prototype.start = function() {
        var _this = this;
        if (this.continueButton) {
          this.continueButton.active = Logic_1.default.profileManager.hasSaveData;
          this.continueButton.active ? this.scheduleOnce(function() {
            _this.continueButton.getComponent(cc.Animation).play();
          }, 2) : this.scheduleOnce(function() {
            _this.startButton.getComponent(cc.Animation).play();
          }, 2);
        }
      };
      Start.prototype.startGame = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.loadScene("pickavatar");
      };
      Start.prototype.chooseChapter = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.loadScene("chapter");
      };
      Start.prototype.achievementScene = function() {
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.loadScene("achievement");
      };
      Start.prototype.continueGame = function() {
        Logic_1.default.resetData();
        Logic_1.default.isFirst = 1;
        AudioPlayer_1.default.play(AudioPlayer_1.default.SELECT);
        cc.director.loadScene("loading");
      };
      Start.prototype.cheatModeChange = function() {
        if (!this.cheatButton) return;
        this.cheatClickCount++;
        if (this.cheatClickCount > 2) {
          this.cheatClickCount = 0;
          Logic_1.default.isCheatMode = true;
          this.cheatButton.opacity = Logic_1.default.isCheatMode ? 255 : 0;
        } else {
          Logic_1.default.isCheatMode = false;
          this.cheatButton.opacity = 0;
        }
      };
      Start.prototype.debugModeChange = function() {
        if (!this.debugButton) return;
        this.debugClickCount++;
        if (this.debugClickCount > 2) {
          this.debugClickCount = 0;
          Logic_1.default.isDebug = true;
          this.debugButton.opacity = Logic_1.default.isDebug ? 255 : 0;
          cc.director.getCollisionManager().enabledDebugDraw = true;
          cc.director.getPhysicsManager().debugDrawFlags = cc.PhysicsManager.DrawBits.e_aabbBit | cc.PhysicsManager.DrawBits.e_jointBit | cc.PhysicsManager.DrawBits.e_shapeBit;
        } else {
          Logic_1.default.isDebug = false;
          this.debugButton.opacity = 0;
          cc.director.getCollisionManager().enabledDebugDraw = false;
          cc.director.getPhysicsManager().debugDrawFlags = 0;
        }
      };
      Start.prototype.tourChange = function() {
        if (!this.tourButton) return;
        this.cheatClickCount++;
        if (this.cheatClickCount > 2) {
          this.cheatClickCount = 0;
          Logic_1.default.isTour = true;
          this.tourButton.opacity = Logic_1.default.isTour ? 255 : 0;
        } else {
          Logic_1.default.isTour = false;
          this.tourButton.opacity = 0;
        }
      };
      Start.prototype.goTest = function() {
        cc.director.loadScene("test");
      };
      __decorate([ property(cc.Node) ], Start.prototype, "startButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "continueButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "cheatButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "debugButton", void 0);
      __decorate([ property(cc.Node) ], Start.prototype, "tourButton", void 0);
      Start = __decorate([ ccclass ], Start);
      return Start;
    }(cc.Component);
    exports.default = Start;
    cc._RF.pop();
  }, {
    "./Logic": "Logic",
    "./Utils/AudioPlayer": "AudioPlayer"
  } ],
  StateContext: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "355460dkOZEM7Y62EU2S7oe", "StateContext");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StateContext = function() {
      function StateContext() {
        this.isShow = false;
        this.isDied = false;
        this.isAttacking = false;
        this.isDisguising = false;
        this.isMoving = false;
        this.isDodging = false;
        this.isHurting = false;
        this.isDashing = false;
        this.isDizzing = false;
        this.isFalling = false;
        this.isBlinking = false;
        this.isJumping = false;
      }
      return StateContext;
    }();
    exports.default = StateContext;
    cc._RF.pop();
  }, {} ],
  StateMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d6268XDmGFEdZj+80HdRhZG", "StateMachine");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  State: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee6413dVQ9N85ndee/MSlIy", "State");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  StatusConditionType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cfb92WuPb1L4plYKZHdFxR/", "StatusConditionType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusConditionType = void 0;
    var StatusConditionType;
    (function(StatusConditionType) {
      StatusConditionType[StatusConditionType["SUITS1"] = 0] = "SUITS1";
      StatusConditionType[StatusConditionType["SUITS2"] = 1] = "SUITS2";
      StatusConditionType[StatusConditionType["SUITS3"] = 2] = "SUITS3";
      StatusConditionType[StatusConditionType["ITEM_REMOVE"] = 3] = "ITEM_REMOVE";
      StatusConditionType[StatusConditionType["ITEM_TICK"] = 4] = "ITEM_TICK";
      StatusConditionType[StatusConditionType["ITEM_USE"] = 5] = "ITEM_USE";
      StatusConditionType[StatusConditionType["MELEE_ATTACK"] = 6] = "MELEE_ATTACK";
      StatusConditionType[StatusConditionType["MELEE_COMBO"] = 7] = "MELEE_COMBO";
      StatusConditionType[StatusConditionType["MELEE_KILL"] = 8] = "MELEE_KILL";
      StatusConditionType[StatusConditionType["REMOTE_ATTACK"] = 9] = "REMOTE_ATTACK";
      StatusConditionType[StatusConditionType["REMOTE_HIT"] = 10] = "REMOTE_HIT";
      StatusConditionType[StatusConditionType["REMOTE_KILL"] = 11] = "REMOTE_KILL";
      StatusConditionType[StatusConditionType["REMOTE_COMBO"] = 12] = "REMOTE_COMBO";
      StatusConditionType[StatusConditionType["SKILL_START"] = 13] = "SKILL_START";
      StatusConditionType[StatusConditionType["SKILL_END"] = 14] = "SKILL_END";
      StatusConditionType[StatusConditionType["SKILL_TICK"] = 15] = "SKILL_TICK";
      StatusConditionType[StatusConditionType["TAKE_DAMAGE"] = 16] = "TAKE_DAMAGE";
      StatusConditionType[StatusConditionType["AOE_HIT"] = 17] = "AOE_HIT";
      StatusConditionType[StatusConditionType["AOE_ADD"] = 18] = "AOE_ADD";
      StatusConditionType[StatusConditionType["AOE_REMOVE"] = 19] = "AOE_REMOVE";
      StatusConditionType[StatusConditionType["AOE_TICK"] = 20] = "AOE_TICK";
      StatusConditionType[StatusConditionType["AOE_KILL"] = 21] = "AOE_KILL";
      StatusConditionType[StatusConditionType["STATUS_KILL"] = 22] = "STATUS_KILL";
      StatusConditionType[StatusConditionType["STANDSTILL"] = 23] = "STANDSTILL";
      StatusConditionType[StatusConditionType["MOVE"] = 24] = "MOVE";
      StatusConditionType[StatusConditionType["DREAM_OUT"] = 25] = "DREAM_OUT";
      StatusConditionType[StatusConditionType["DREAM_FULL"] = 26] = "DREAM_FULL";
      StatusConditionType[StatusConditionType["HEALTH_OUT"] = 27] = "HEALTH_OUT";
      StatusConditionType[StatusConditionType["HEALTH_FULL"] = 28] = "HEALTH_FULL";
      StatusConditionType[StatusConditionType["HEALTH_HALF"] = 29] = "HEALTH_HALF";
      StatusConditionType[StatusConditionType["DISPEL"] = 30] = "DISPEL";
    })(StatusConditionType = exports.StatusConditionType || (exports.StatusConditionType = {}));
    cc._RF.pop();
  }, {} ],
  StatusData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6cc1ffzwVEGqcTbp1oM4Mh", "StatusData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CommonData_1 = require("./CommonData");
    var FromData_1 = require("./FromData");
    var StatusData = function() {
      function StatusData() {
        this.id = 0;
        this.type = 0;
        this.nameCn = "";
        this.nameEn = "";
        this.duration = 0;
        this.desc = "";
        this.spriteFrameName = "";
        this.physicalDamageDirect = 0;
        this.physicalDamageOvertime = 0;
        this.missRate = 0;
        this.realDamageDirect = 0;
        this.realDamageOvertime = 0;
        this.dreamDirect = 0;
        this.dreamOvertime = 0;
        this.magicDamageDirect = 0;
        this.magicDamageOvertime = 0;
        this.dizzDurationDirect = 0;
        this.dizzDurationOvertime = 0;
        this.invisibleDuratonDirect = 0;
        this.variation = 0;
        this.finishStatus = "";
        this.unique = 0;
        this.exOilGold = 0;
        this.clearHealth = 0;
        this.avoidDeath = 0;
        this.common = new CommonData_1.default();
        this.from = new FromData_1.default();
      }
      Object.defineProperty(StatusData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(StatusData.prototype, "From", {
        get: function() {
          return this.from;
        },
        enumerable: false,
        configurable: true
      });
      StatusData.prototype.valueCopy = function(data) {
        if (!data) return;
        this.common.valueCopy(data.common);
        this.from.valueCopy(data.from);
        this.nameCn = data.nameCn ? data.nameCn : this.nameCn;
        this.nameEn = data.nameEn;
        this.id = data.id ? data.id : 0;
        this.type = data.type ? data.type : 0;
        this.duration = data.duration ? data.duration : 0;
        this.spriteFrameName = data.spriteFrameName;
        this.desc = data.desc;
        this.physicalDamageDirect = data.physicalDamageDirect ? data.physicalDamageDirect : 0;
        this.physicalDamageOvertime = data.physicalDamageOvertime ? data.physicalDamageOvertime : 0;
        this.missRate = data.missRate ? data.missRate : 0;
        this.realDamageDirect = data.realDamageDirect ? data.realDamageDirect : 0;
        this.realDamageOvertime = data.realDamageOvertime ? data.realDamageOvertime : 0;
        this.magicDamageDirect = data.magicDamageDirect ? data.magicDamageDirect : 0;
        this.magicDamageOvertime = data.magicDamageOvertime ? data.magicDamageOvertime : 0;
        this.dizzDurationDirect = data.dizzDurationDirect ? data.dizzDurationDirect : 0;
        this.dizzDurationOvertime = data.dizzDurationOvertime ? data.dizzDurationOvertime : 0;
        this.invisibleDuratonDirect = data.invisibleDuratonDirect ? data.invisibleDuratonDirect : 0;
        this.dreamDirect = data.dreamDirect ? data.dreamDirect : 0;
        this.dreamOvertime = data.dreamOvertime ? data.dreamOvertime : 0;
        this.variation = data.variation ? data.variation : 0;
        this.unique = data.unique ? data.unique : 0;
        this.exOilGold = data.exOilGold ? data.exOilGold : 0;
        this.clearHealth = data.clearHealth ? data.clearHealth : 0;
        this.avoidDeath = data.avoidDeath ? data.avoidDeath : 0;
        this.finishStatus = data.finishStatus ? data.finishStatus : "";
      };
      StatusData.prototype.clone = function() {
        var e = new StatusData();
        e.common = this.common.clone();
        e.from = this.from.clone();
        e.nameCn = this.nameCn;
        e.nameEn = this.nameEn;
        e.id = this.id;
        e.duration = this.duration;
        e.desc = this.desc;
        e.physicalDamageDirect = this.physicalDamageDirect;
        e.physicalDamageOvertime = this.physicalDamageOvertime;
        e.missRate = this.missRate;
        e.realDamageDirect = this.realDamageDirect;
        e.realDamageOvertime = this.realDamageOvertime;
        e.magicDamageDirect = this.magicDamageDirect;
        e.magicDamageOvertime = this.magicDamageOvertime;
        e.spriteFrameName = this.spriteFrameName;
        e.dizzDurationDirect = this.dizzDurationDirect;
        e.dizzDurationOvertime = this.dizzDurationOvertime;
        e.invisibleDuratonDirect = this.invisibleDuratonDirect;
        e.dreamDirect = this.dreamDirect;
        e.dreamOvertime = this.dreamOvertime;
        e.type = this.type;
        e.variation = this.variation;
        e.finishStatus = this.finishStatus;
        e.unique = this.unique;
        e.exOilGold = this.exOilGold;
        e.clearHealth = this.clearHealth;
        e.avoidDeath = this.avoidDeath;
        return e;
      };
      return StatusData;
    }();
    exports.default = StatusData;
    cc._RF.pop();
  }, {
    "./CommonData": "CommonData",
    "./FromData": "FromData"
  } ],
  StatusEventType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e9268x4uqpM3ZwTAm8dK3a3", "StatusEventType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusEventType = void 0;
    var StatusEventType;
    (function(StatusEventType) {
      StatusEventType[StatusEventType["INIT"] = 0] = "INIT";
      StatusEventType[StatusEventType["DIED"] = 1] = "DIED";
      StatusEventType[StatusEventType["ITEM_ADD"] = 2] = "ITEM_ADD";
      StatusEventType[StatusEventType["ITEM_REMOVE"] = 3] = "ITEM_REMOVE";
      StatusEventType[StatusEventType["ITEM_TICK"] = 4] = "ITEM_TICK";
      StatusEventType[StatusEventType["ITEM_USE"] = 5] = "ITEM_USE";
      StatusEventType[StatusEventType["MELEE_ATTACK"] = 6] = "MELEE_ATTACK";
      StatusEventType[StatusEventType["MELEE_COMBO"] = 7] = "MELEE_COMBO";
      StatusEventType[StatusEventType["MELEE_KILL"] = 8] = "MELEE_KILL";
      StatusEventType[StatusEventType["REMOTE_ATTACK"] = 9] = "REMOTE_ATTACK";
      StatusEventType[StatusEventType["REMOTE_HIT"] = 10] = "REMOTE_HIT";
      StatusEventType[StatusEventType["REMOTE_KILL"] = 11] = "REMOTE_KILL";
      StatusEventType[StatusEventType["REMOTE_COMBO"] = 12] = "REMOTE_COMBO";
      StatusEventType[StatusEventType["SKILL_START"] = 13] = "SKILL_START";
      StatusEventType[StatusEventType["SKILL_END"] = 14] = "SKILL_END";
      StatusEventType[StatusEventType["SKILL_TICK"] = 15] = "SKILL_TICK";
      StatusEventType[StatusEventType["TAKE_DAMAGE"] = 16] = "TAKE_DAMAGE";
      StatusEventType[StatusEventType["DODGE"] = 17] = "DODGE";
      StatusEventType[StatusEventType["BLOCK"] = 18] = "BLOCK";
      StatusEventType[StatusEventType["PRARRY"] = 19] = "PRARRY";
      StatusEventType[StatusEventType["AOE_HIT"] = 20] = "AOE_HIT";
      StatusEventType[StatusEventType["AOE_ADD"] = 21] = "AOE_ADD";
      StatusEventType[StatusEventType["AOE_REMOVE"] = 22] = "AOE_REMOVE";
      StatusEventType[StatusEventType["AOE_TICK"] = 23] = "AOE_TICK";
      StatusEventType[StatusEventType["AOE_KILL"] = 24] = "AOE_KILL";
      StatusEventType[StatusEventType["STATUS_KILL"] = 25] = "STATUS_KILL";
      StatusEventType[StatusEventType["STANDSTILL"] = 26] = "STANDSTILL";
      StatusEventType[StatusEventType["MOVE"] = 27] = "MOVE";
      StatusEventType[StatusEventType["DREAM_OUT"] = 28] = "DREAM_OUT";
      StatusEventType[StatusEventType["DREAM_FULL"] = 29] = "DREAM_FULL";
      StatusEventType[StatusEventType["HEALTH_OUT"] = 30] = "HEALTH_OUT";
      StatusEventType[StatusEventType["HEALTH_FULL"] = 31] = "HEALTH_FULL";
      StatusEventType[StatusEventType["HEALTH_HALF"] = 32] = "HEALTH_HALF";
      StatusEventType[StatusEventType["DISPEL"] = 33] = "DISPEL";
    })(StatusEventType = exports.StatusEventType || (exports.StatusEventType = {}));
    cc._RF.pop();
  }, {} ],
  StatusManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70cfczADURLkqYmvLLsshT9", "StatusManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StatusData_1 = require("../Data/StatusData");
    var Logic_1 = require("../Logic");
    var FromData_1 = require("../Data/FromData");
    var Status_1 = require("../Status/Status");
    var Actor_1 = require("../Base/Actor");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StatusManager = function(_super) {
      __extends(StatusManager, _super);
      function StatusManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.statusPrefab = null;
        _this.totalStatusData = new StatusData_1.default();
        _this.timeDelay = 0;
        return _this;
      }
      StatusManager.prototype.onLoad = function() {
        this.statusList = new Array();
        this.actor = this.node.parent.getComponent(Actor_1.default);
      };
      StatusManager.prototype.start = function() {};
      StatusManager.prototype.addCustomStatus = function(data, from) {
        if (!data) return;
        var sd = new StatusData_1.default();
        sd.valueCopy(data);
        sd.From.valueCopy(from);
        this.stopOtherUniqueStatus(sd.unique);
        this.showStatus(sd, false);
      };
      StatusManager.prototype.addStatus = function(resName, from, isFromSave) {
        if (resName.length < 1) return;
        var sd = new StatusData_1.default();
        sd.valueCopy(Logic_1.default.status[resName]);
        sd.From.valueCopy(from);
        this.stopOtherUniqueStatus(sd.unique);
        this.showStatus(sd, isFromSave);
      };
      StatusManager.prototype.addStatusListFromSave = function(statusList) {
        if (statusList && statusList.length > 0) for (var _i = 0, statusList_1 = statusList; _i < statusList_1.length; _i++) {
          var s = statusList_1[_i];
          var sd = new StatusData_1.default();
          sd.valueCopy(s);
          sd.From.valueCopy(new FromData_1.default());
          this.showStatus(sd, true);
        }
      };
      StatusManager.prototype.hasStatus = function(resName) {
        var hasStatus = false;
        var sd = new StatusData_1.default();
        sd.valueCopy(Logic_1.default.status[resName]);
        for (var i = this.statusList.length - 1; i >= 0; i--) {
          var s = this.statusList[i];
          if (s && s.node && s.isValid && s.isStatusRunning() && s.data.id == sd.id) {
            hasStatus = true;
            break;
          }
        }
        return hasStatus;
      };
      StatusManager.prototype.stopStatus = function(resName) {
        var sd = new StatusData_1.default();
        sd.valueCopy(Logic_1.default.status[resName]);
        for (var i = this.statusList.length - 1; i >= 0; i--) {
          var s = this.statusList[i];
          s && s.node && s.isValid && s.isStatusRunning() && s.data.id == sd.id && s.stopStatus();
        }
        return;
      };
      StatusManager.prototype.stopOtherUniqueStatus = function(unique) {
        if (unique < 1) return;
        for (var i = this.statusList.length - 1; i >= 0; i--) {
          var s = this.statusList[i];
          s && s.data && s.data.unique == unique && s.stopStatus();
        }
      };
      StatusManager.prototype.stopAllStatus = function() {
        for (var i = this.statusList.length - 1; i >= 0; i--) {
          var s = this.statusList[i];
          s.stopStatus();
        }
      };
      StatusManager.prototype.stopAllBuffs = function() {
        for (var i = this.statusList.length - 1; i >= 0; i--) {
          var s = this.statusList[i];
          s && s.data && s.data.type == Status_1.default.BUFF && s.stopStatus();
        }
      };
      StatusManager.prototype.stopAllDebuffs = function() {
        for (var i = this.statusList.length - 1; i >= 0; i--) {
          var s = this.statusList[i];
          s && s.data && s.data.type == Status_1.default.DEBUFF && s.stopStatus();
        }
      };
      StatusManager.prototype.showStatus = function(data, isFromSave) {
        for (var i = this.statusList.length - 1; i >= 0; i--) {
          var s = this.statusList[i];
          s && s.node && s.isValid || this.statusList.splice(i, 1);
        }
        var hasStatus = false;
        for (var i = this.statusList.length - 1; i >= 0; i--) {
          var s = this.statusList[i];
          if (s && s.node && s.isValid && s.isStatusRunning() && s.data.id == data.id) {
            s.data.duration = data.duration;
            s.showStatus(data, this.actor, isFromSave);
            hasStatus = true;
            break;
          }
        }
        if (hasStatus) return;
        var statusNode = cc.instantiate(this.statusPrefab);
        statusNode.parent = this.node;
        statusNode.active = true;
        var status = statusNode.getComponent(Status_1.default);
        this.statusList.push(status);
        status.showStatus(data, this.actor, isFromSave);
      };
      StatusManager.prototype.update = function(dt) {
        if (Logic_1.default.isGamePause) return;
        this.node.parent && (this.node.scaleX = this.node.parent.scaleX > 0 ? 1 : -1);
        if (this.isTimeDelay(dt) && this.actor) {
          var dataList = this.updateStatus();
          this.actor.updateStatus(dataList, this.totalStatusData);
        }
      };
      StatusManager.prototype.isTimeDelay = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > 1) {
          this.timeDelay = 0;
          return true;
        }
        return false;
      };
      StatusManager.prototype.updateStatus = function() {
        this.totalStatusData = new StatusData_1.default();
        var dataList = new Array();
        for (var i = this.statusList.length - 1; i >= 0; i--) {
          var s = this.statusList[i];
          if (!s || !s.node || !s.isValid) continue;
          s.updateLogic();
          if (0 == s.data.duration) {
            this.addStatus(s.data.finishStatus, s.data.From);
            continue;
          }
          this.totalStatusData.missRate += s.data.missRate ? s.data.missRate : 0;
          this.totalStatusData.variation += s.data.variation ? s.data.variation : 0;
          this.totalStatusData.exOilGold += s.data.exOilGold ? s.data.exOilGold : 0;
          this.totalStatusData.clearHealth += s.data.clearHealth ? s.data.clearHealth : 0;
          this.totalStatusData.avoidDeath += s.data.avoidDeath ? s.data.avoidDeath : 0;
          this.totalStatusData.Common.add(s.data.Common);
          dataList.push(s.data.clone());
        }
        return dataList;
      };
      StatusManager.FROZEN = "status001";
      StatusManager.BURNING = "status002";
      StatusManager.DIZZ = "status003";
      StatusManager.TOXICOSIS = "status004";
      StatusManager.CURSING = "status005";
      StatusManager.BLEEDING = "status006";
      StatusManager.ATTACKPLUS = "status007";
      StatusManager.FASTMOVE = "status008";
      StatusManager.FASTATTACK = "status009";
      StatusManager.PERFECTDEFENCE = "status010";
      StatusManager.HEALING = "status011";
      StatusManager.RECOVERY = "status012";
      StatusManager.STONE = "status013";
      StatusManager.TWINE = "status014";
      StatusManager.SHIELD_NORMAL = "status015";
      StatusManager.SHIELD_LONG = "status016";
      StatusManager.BOTTLE_HEALING = "status017";
      StatusManager.TALENT_AIMED = "status018";
      StatusManager.SHOES_SPEED = "status019";
      StatusManager.CLOTHES_RECOVERY = "status020";
      StatusManager.WEREWOLFDEFENCE = "status021";
      StatusManager.GOLDAPPLE = "status022";
      StatusManager.MAGIC_WEAPON = "status023";
      StatusManager.MAGIC_WEAPON_STRONG = "status024";
      StatusManager.FROZEN_STRONG = "status025";
      StatusManager.TALENT_INVISIBLE = "status026";
      StatusManager.SHIELD_PARRY = "status027";
      StatusManager.TALENT_FLASH_DIZZ = "status028";
      StatusManager.TALENT_FLASH_SPEED = "status029";
      StatusManager.BOTTLE_REMOTE = "status030";
      StatusManager.WINE_CLOUD = "status033";
      StatusManager.FALLEN_DOWN = "status034";
      StatusManager.DIZZ_LONG = "status035";
      StatusManager.PET_DOG = "status037";
      StatusManager.REAGENT = "status038";
      StatusManager.REAGENT_SIDE_EFFECT = "status039";
      StatusManager.AVOID_DEATH = "status065";
      StatusManager.CAMP_FIRE = "status066";
      StatusManager.HOLOGRAPHIC_DODGE = "status067";
      __decorate([ property(cc.Prefab) ], StatusManager.prototype, "statusPrefab", void 0);
      StatusManager = __decorate([ ccclass ], StatusManager);
      return StatusManager;
    }(cc.Component);
    exports.default = StatusManager;
    cc._RF.pop();
  }, {
    "../Base/Actor": "Actor",
    "../Data/FromData": "FromData",
    "../Data/StatusData": "StatusData",
    "../Logic": "Logic",
    "../Status/Status": "Status"
  } ],
  Status: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "71809qjadJJZIMwM9M2G6cL", "Status");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DamageData_1 = require("../Data/DamageData");
    var StatusData_1 = require("../Data/StatusData");
    var Logic_1 = require("../Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Status = function(_super) {
      __extends(Status, _super);
      function Status() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.stateRunning = false;
        _this.sprite = null;
        _this.data = new StatusData_1.default();
        return _this;
      }
      Status.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite").getComponent(cc.Sprite);
        this.label = this.node.getChildByName("sprite").getChildByName("label").getComponent(cc.Label);
        this.anim = this.getComponent(cc.Animation);
      };
      Status.prototype.start = function() {};
      Status.prototype.showStatus = function(data, actor, isFromSave) {
        if (!this.anim) return;
        this.data = data;
        this.actor = actor;
        this.sprite.spriteFrame = Logic_1.default.spriteFrameRes(data.spriteFrameName);
        this.anim.playAdditive("StatusShow");
        isFromSave || this.doStatusDamage(true);
        this.stateRunning = true;
        this.label.string = "" + (this.data.duration > 0 ? this.data.duration : "");
        this.label.node.opacity = this.data.duration < 0 || this.data.duration > 500 ? 0 : 255;
      };
      Status.prototype.stopStatus = function() {
        if (!this.node) return;
        this.data.duration = 0;
        this.stateRunning && this.node.destroy();
      };
      Status.prototype.isStatusRunning = function() {
        return this.data.duration > 0 || -1 == this.data.duration;
      };
      Status.prototype.doStatusDamage = function(isDirect) {
        if (!this.data) return;
        var dd = isDirect ? this.getDamageDirect() : this.getDamageOverTime();
        var dizzDuration = isDirect ? this.data.dizzDurationDirect : this.data.dizzDurationOvertime;
        var dream = isDirect ? this.data.dreamDirect : this.data.dreamOvertime;
        if (this.actor) {
          0 != dd.getTotalDamage() && this.actor.takeDamage(dd, this.data.From);
          dizzDuration > 0 && this.actor.takeDizz(dizzDuration);
          dream && 0 != dream && this.actor.updateDream(dream);
          this.data.invisibleDuratonDirect > 0 && this.actor.hideSelf(this.data.invisibleDuratonDirect);
        }
      };
      Status.prototype.updateLogic = function() {
        var _this = this;
        this.label.string = "" + (this.data.duration > 0 ? this.data.duration : "");
        this.label.node.opacity = this.data.duration < 0 || this.data.duration > 500 ? 0 : 255;
        if (this.data.duration > 0) {
          -1 != this.data.duration && this.data.duration--;
          this.doStatusDamage(false);
        }
        if (0 == this.data.duration && this.stateRunning) {
          this.stateRunning = false;
          this.anim.play("StatusHide");
          this.scheduleOnce(function() {
            _this.node && _this.node.destroy();
          }, .5);
        }
      };
      Status.prototype.getDamageDirect = function() {
        var dd = new DamageData_1.default();
        dd.realDamage = this.data.realDamageDirect ? this.data.realDamageDirect : 0;
        dd.physicalDamage = this.data.physicalDamageDirect ? this.data.physicalDamageDirect : 0;
        dd.magicDamage = this.data.magicDamageDirect ? this.data.magicDamageDirect : 0;
        return dd;
      };
      Status.prototype.getDamageOverTime = function() {
        var dd = new DamageData_1.default();
        dd.realDamage = this.data.realDamageOvertime ? this.data.realDamageOvertime : 0;
        dd.physicalDamage = this.data.physicalDamageOvertime ? this.data.physicalDamageOvertime : 0;
        dd.magicDamage = this.data.magicDamageOvertime ? this.data.magicDamageOvertime : 0;
        return dd;
      };
      Status.BUFF = 0;
      Status.DEBUFF = 1;
      Status = __decorate([ ccclass ], Status);
      return Status;
    }(cc.Component);
    exports.default = Status;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/StatusData": "StatusData",
    "../Logic": "Logic"
  } ],
  SuitData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9543VeOPVDfIOgvubFIjVk", "SuitData");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseData_1 = require("./BaseData");
    var EquipmentData_1 = require("./EquipmentData");
    var SuitData = function(_super) {
      __extends(SuitData, _super);
      function SuitData() {
        var _this = _super.call(this) || this;
        _this.nameCn = "";
        _this.nameEn = "";
        _this.suitType = "";
        _this.suitNames = "";
        _this.desc = "";
        _this.count = 0;
        _this.equipList = [];
        return _this;
      }
      Object.defineProperty(SuitData.prototype, "EquipList", {
        get: function() {
          return this.equipList;
        },
        enumerable: false,
        configurable: true
      });
      SuitData.prototype.valueCopy = function(data) {
        if (!data) return;
        for (var _i = 0, _a = data.equipList; _i < _a.length; _i++) {
          var equip = _a[_i];
          var e = new EquipmentData_1.default();
          e.valueCopy(equip);
          this.equipList.push(e);
        }
        this.count = data.count ? data.count : 0;
        this.nameCn = data.nameCn ? data.nameCn : "";
        this.nameEn = data.nameEn ? data.nameEn : "";
        this.suitType = data.suitType ? data.suitType : "";
        this.desc = data.desc ? data.desc : "";
        this.suitNames = data.suitNames ? data.suitNames : "";
      };
      SuitData.prototype.clone = function() {
        var e = new SuitData();
        var list = [];
        for (var _i = 0, _a = this.equipList; _i < _a.length; _i++) {
          var equip = _a[_i];
          var eq = new EquipmentData_1.default();
          eq.valueCopy(equip);
          list.push(eq);
        }
        e.equipList = list;
        e.nameCn = this.nameCn;
        e.nameEn = this.nameEn;
        e.count = this.count;
        e.suitType = this.suitType;
        e.desc = this.desc;
        e.suitNames = this.suitNames;
        return e;
      };
      return SuitData;
    }(BaseData_1.default);
    exports.default = SuitData;
    cc._RF.pop();
  }, {
    "./BaseData": "BaseData",
    "./EquipmentData": "EquipmentData"
  } ],
  TalentDash: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "52ac4HK4rpMhYIJb8+wkG1J", "TalentDash");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var Talent_1 = require("./Talent");
    var DashShadow_1 = require("../Item/DashShadow");
    var DamageData_1 = require("../Data/DamageData");
    var StatusManager_1 = require("../Manager/StatusManager");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var PlayerAvatar_1 = require("../PlayerAvatar");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TalentDash = function(_super) {
      __extends(TalentDash, _super);
      function TalentDash() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.dashShadow = null;
        return _this;
      }
      TalentDash.prototype.onLoad = function() {};
      TalentDash.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.dashShadow.node.active = false;
        this.node.parent = this.player.node.parent;
        this.dashShadow.init(this);
      };
      TalentDash.prototype.skillCanUse = function() {
        return true;
      };
      TalentDash.prototype.useSKill = function() {
        this.doSkill();
      };
      TalentDash.prototype.doSkill = function() {
        var _this = this;
        if (!this.talentSkill) return;
        if (this.talentSkill.IsExcuting) return;
        var cooldown = 3;
        this.hashTalent(Talent_1.default.DASH_13) && (cooldown = 2);
        var speed = 1200;
        this.hashTalent(Talent_1.default.DASH_14) && (speed = 2400);
        this.talentSkill.next(function() {
          _this.talentSkill.IsExcuting = true;
          cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
            detail: {
              name: AudioPlayer_1.default.DASH
            }
          });
          _this.schedule(function() {
            _this.player.getWalkSmoke(_this.node.parent, _this.node.position);
          }, .05, 4, 0);
          var pos = _this.player.rigidbody.linearVelocity.clone();
          _this.player.sc.isMoving = false;
          pos = pos.equals(cc.Vec2.ZERO) ? _this.player.isFaceRight ? cc.v2(1, 0) : cc.v2(-1, 0) : pos.normalizeSelf();
          var posv3 = cc.v3(pos.x, pos.y);
          if (_this.hashTalent(Talent_1.default.DASH_08)) {
            speed = 100;
            _this.showShadow(posv3);
          }
          _this.hv = posv3.clone();
          pos = pos.mul(speed);
          _this.player.rigidbody.linearVelocity = pos;
          _this.scheduleOnce(function() {
            _this.player.rigidbody.linearVelocity = cc.Vec2.ZERO;
            _this.player.playerAnim(PlayerAvatar_1.default.STATE_IDLE, _this.player.currentDir);
            _this.IsExcuting = false;
          }, .5);
        }, cooldown, true);
      };
      TalentDash.prototype.showShadow = function(pos) {
        if (this.dashShadow) {
          this.dashShadow.setHv(pos.clone());
          this.dashShadow.show();
        }
      };
      TalentDash.prototype.changePerformance = function() {};
      TalentDash.prototype.onBeginContact = function(contact, selfCollider, otherCollider) {
        this.hashTalent(Talent_1.default.DASH_02) && !this.hashTalent(Talent_1.default.DASH_08) && this.attacking(otherCollider, this.node);
      };
      TalentDash.prototype.attacking = function(attackTarget, currentNode) {
        if (!attackTarget || !currentNode.active) return;
        var damage = new DamageData_1.default(1);
        this.hashTalent(Talent_1.default.DASH_07) && (damage.realDamage = 5);
        var damageSuccess = false;
        var target = ActorUtils_1.default.getEnemyActorByNode(attackTarget.node, true);
        if (target && !target.sc.isDied) {
          damageSuccess = target.takeDamage(damage);
          if (damageSuccess) {
            this.beatBack(target.node);
            this.addTargetAllStatus(target);
          }
        }
      };
      TalentDash.prototype.beatBack = function(node) {
        if (!this.hashTalent(Talent_1.default.DASH_04)) return;
        var rigidBody = node.getComponent(cc.RigidBody);
        var pos = this.hv.clone();
        var power = 1e3;
        pos = pos.normalizeSelf().mul(power);
        rigidBody.applyLinearImpulse(cc.v2(pos.x, pos.y), rigidBody.getLocalCenter(), true);
      };
      TalentDash.prototype.addTargetAllStatus = function(actor) {
        this.addTargetStatus(Talent_1.default.DASH_05, actor, StatusManager_1.default.FROZEN);
        this.addTargetStatus(Talent_1.default.DASH_06, actor, StatusManager_1.default.DIZZ);
        this.addTargetStatus(Talent_1.default.DASH_03, actor, StatusManager_1.default.BLEEDING);
      };
      TalentDash.prototype.addTargetStatus = function(talentType, actor, statusType) {
        this.hashTalent(talentType) && actor.addStatus(statusType, new FromData_1.default());
      };
      TalentDash.prototype.takeDamage = function() {
        return false;
      };
      __decorate([ property(DashShadow_1.default) ], TalentDash.prototype, "dashShadow", void 0);
      TalentDash = __decorate([ ccclass ], TalentDash);
      return TalentDash;
    }(Talent_1.default);
    exports.default = TalentDash;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../EventHelper": "EventHelper",
    "../Item/DashShadow": "DashShadow",
    "../Manager/StatusManager": "StatusManager",
    "../PlayerAvatar": "PlayerAvatar",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./Talent": "Talent"
  } ],
  TalentData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "337bcbBGB9GS4DrPZ+ZKu25", "TalentData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var CommonData_1 = require("./CommonData");
    var TalentData = function() {
      function TalentData() {
        this.desc = "";
        this.nameCn = "";
        this.nameEn = "";
        this.resName = "";
        this.cooldown = 0;
        this.passive = 0;
        this.cost = 1;
        this.secondCount = 0;
        this.storePoint = 0;
        this.useCount = 0;
        this.common = new CommonData_1.default();
      }
      Object.defineProperty(TalentData.prototype, "Common", {
        get: function() {
          return this.common;
        },
        enumerable: false,
        configurable: true
      });
      TalentData.prototype.valueCopy = function(data) {
        this.common.valueCopy(data.common);
        this.nameCn = data.nameCn ? data.nameCn : this.nameCn;
        this.nameEn = data.nameEn ? data.nameEn : this.nameEn;
        this.desc = data.desc ? data.desc : this.desc;
        this.resName = data.resName ? data.resName : "";
        this.cooldown = data.cooldown ? data.cooldown : 0;
        this.passive = data.passive ? data.passive : 0;
        this.secondCount = data.secondCount ? data.secondCount : 0;
        this.storePoint = data.storePoint || 0 == data.storePoint ? data.storePoint : 1;
        this.cost = data.cost || 0 == data.cost ? data.cost : 1;
        this.useCount = data.useCount ? data.useCount : 0;
      };
      TalentData.prototype.clone = function() {
        var e = new TalentData();
        e.common = this.common.clone();
        e.nameCn = this.nameCn;
        e.nameEn = this.nameEn;
        e.desc = this.desc;
        e.resName = this.resName;
        e.cooldown = this.cooldown;
        e.passive = this.passive;
        e.secondCount = this.secondCount;
        e.storePoint = this.storePoint;
        e.cost = this.cost;
        e.useCount = this.useCount;
        return e;
      };
      return TalentData;
    }();
    exports.default = TalentData;
    cc._RF.pop();
  }, {
    "./CommonData": "CommonData"
  } ],
  TalentMagic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3909410aVM/oDLjAGklG7U", "TalentMagic");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var Talent_1 = require("./Talent");
    var StatusManager_1 = require("../Manager/StatusManager");
    var FromData_1 = require("../Data/FromData");
    var MagicCircle_1 = require("./MagicCircle");
    var MagicIce_1 = require("./MagicIce");
    var FireGhost_1 = require("./FireGhost");
    var Logic_1 = require("../Logic");
    var IceThron_1 = require("./IceThron");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TalentMagic = function(_super) {
      __extends(TalentMagic, _super);
      function TalentMagic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.magiccircle = null;
        _this.magicice = null;
        _this.icethron = null;
        _this.fireGhost = null;
        _this.magicLighteningCircle = null;
        _this.fireGhostNum = 0;
        _this.checkTimeDelay = 0;
        return _this;
      }
      TalentMagic_1 = TalentMagic;
      TalentMagic.prototype.onLoad = function() {
        var _this = this;
        this.ghostPool = new cc.NodePool(FireGhost_1.default);
        cc.director.on("destoryfireghost", function(event) {
          _this.destroyGhost(event.detail.coinNode);
        });
      };
      TalentMagic.prototype.destroyGhost = function(ghostNode) {
        if (!ghostNode) return;
        ghostNode.active = false;
        if (this.ghostPool) {
          this.ghostPool.put(ghostNode);
          this.fireGhostNum--;
          cc.log("destroyGhost");
        }
      };
      TalentMagic.prototype.init = function(data) {
        var _this = this;
        this.magicLighteningCircle.opacity = 0;
        _super.prototype.init.call(this, data);
        this.scheduleOnce(function() {
          _this.hashTalent(Talent_1.default.MAGIC_07) && _this.player.addStatus(_this.hashTalent(TalentMagic_1.MAGIC_06) ? StatusManager_1.default.MAGIC_WEAPON_STRONG : StatusManager_1.default.MAGIC_WEAPON, new FromData_1.default());
          _this.hashTalent(Talent_1.default.MAGIC_13) && !_this.magicice.isShow && _this.magicice.showIce();
          _this.hashTalent(Talent_1.default.MAGIC_10) && _this.initFireGhosts();
          _this.hashTalent(TalentMagic_1.MAGIC_16) && _this.showLighteningCircle();
        }, .2);
      };
      TalentMagic.prototype.skillCanUse = function() {
        return true;
      };
      TalentMagic.prototype.useSKill = function() {
        this.doSkill();
      };
      TalentMagic.prototype.doSkill = function() {
        var _this = this;
        if (!this.talentSkill) return;
        if (this.talentSkill.IsExcuting) return;
        var cooldown = 7;
        this.hashTalent(Talent_1.default.MAGIC_04) && (cooldown = 3);
        this.talentSkill.next(function() {
          _this.talentSkill.IsExcuting = true;
          _this.magiccircle.talentMaigc = _this;
          _this.magiccircle.playMagic(_this.hashTalent(Talent_1.default.MAGIC_03));
        }, cooldown, true);
      };
      TalentMagic.prototype.MagicFinish = function() {
        var _this = this;
        if (this.hashTalent(Talent_1.default.MAGIC_09)) ; else if (this.hashTalent(Talent_1.default.MAGIC_08)) ; else if (this.hashTalent(Talent_1.default.MAGIC_12)) this.showIceThron(); else if (this.hashTalent(Talent_1.default.MAGIC_11)) this.showIceThron(); else if (this.hashTalent(Talent_1.default.MAGIC_15)) this.schedule(function() {
          _this.addLighteningFall(_this.hashTalent(Talent_1.default.MAGIC_06), 8);
        }, .2, this.hashTalent(Talent_1.default.MAGIC_02) ? 1 : 0); else if (this.hashTalent(Talent_1.default.MAGIC_14)) this.schedule(function() {
          _this.addLighteningFall(_this.hashTalent(Talent_1.default.MAGIC_06), 5);
        }, .2, this.hashTalent(Talent_1.default.MAGIC_02) ? 1 : 0); else if (this.hashTalent(Talent_1.default.MAGIC_01)) {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_MAGICBALL);
          this.fire(this.player.shooterEx, 80, this.hashTalent(Talent_1.default.MAGIC_06) ? "bullet135" : "bullet035");
        }
      };
      TalentMagic.prototype.showIceThron = function() {
        var _this = this;
        this.scheduleOnce(function() {
          AudioPlayer_1.default.play(AudioPlayer_1.default.SKILL_ICETHRON);
        }, 1);
        var angles1 = [ 0, 45, 90, 135, 180, 225, 270, 315 ];
        var angles2 = [ 15, 60, 105, 150, 195, 240, 285, 330 ];
        var distance1 = [ 100 ];
        var distance2 = [ 100, 150 ];
        var distance3 = [ 100, 150, 200 ];
        var scale1 = [ 3 ];
        var scale2 = [ 3, 4 ];
        var scale3 = [ 3, 4, 5 ];
        var scale4 = [ 3, 5 ];
        var a1 = [ angles1 ];
        var a2 = [ angles1, angles2 ];
        var a3 = [ angles1, angles2, angles1 ];
        var a = a1;
        var scale = scale1;
        var distance = distance1;
        if (this.hashTalent(Talent_1.default.MAGIC_02)) {
          a = a2;
          scale = scale2;
          distance = distance2;
        }
        if (this.hashTalent(Talent_1.default.MAGIC_12)) {
          a = a2;
          scale = scale4;
          distance = distance2;
          if (this.hashTalent(Talent_1.default.MAGIC_02)) {
            a = a3;
            scale = scale3;
            distance = distance3;
          }
        }
        var index = 0;
        this.schedule(function() {
          for (var i = 0; i < a[index].length; i++) cc.instantiate(_this.icethron).getComponent(IceThron_1.default).show(_this.player, a[index][i], distance[index], scale[index]);
          index++;
        }, .5, a.length - 1);
      };
      TalentMagic.prototype.fire = function(shooter, bulletArcExNum, bulletType) {
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        this.hashTalent(Talent_1.default.MAGIC_02) && (shooter.data.bulletArcExNum = 80 == bulletArcExNum ? 99 : 2);
        shooter.data.bulletLineExNum = 0;
        shooter.fireBullet(0);
      };
      TalentMagic.prototype.changePerformance = function() {};
      TalentMagic.prototype.takeIce = function() {
        if (this.hashTalent(Talent_1.default.MAGIC_13) && this.magicice.isShow) {
          this.addStatus2NearEnemy(this.player.node, StatusManager_1.default.FROZEN, 300);
          this.magicice.breakIce();
          return true;
        }
        return false;
      };
      TalentMagic.prototype.takeDamage = function(damageData, actor) {
        return false;
      };
      TalentMagic.prototype.addLighteningFall = function(isArea, damagePoint) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.DUNGEON_ADD_LIGHTENINGFALL, {
          pos: this.getNearestEnemyPosition(),
          showArea: isArea,
          damage: damagePoint
        });
      };
      TalentMagic.prototype.getNearestEnemyPosition = function() {
        var shortdis = 99999;
        var targetNode;
        for (var _i = 0, _a = this.player.weaponRight.meleeWeapon.dungeon.monsterManager.monsterList; _i < _a.length; _i++) {
          var monster = _a[_i];
          if (!monster.sc.isDied) {
            var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, monster.node.position);
            if (dis < shortdis) {
              shortdis = dis;
              targetNode = monster.node;
            }
          }
        }
        for (var _b = 0, _c = this.player.weaponRight.meleeWeapon.dungeon.monsterManager.bossList; _b < _c.length; _b++) {
          var boss = _c[_b];
          if (!boss.sc.isDied) {
            var dis = Logic_1.default.getDistanceNoSqrt(this.node.position, boss.node.position);
            if (dis < shortdis) {
              shortdis = dis;
              targetNode = boss.node;
            }
          }
        }
        if (targetNode) return targetNode.position;
        return this.node.position.addSelf(cc.v3(Logic_1.default.getRandomNum(0, 600) - 300, Logic_1.default.getRandomNum(0, 600) - 300));
      };
      TalentMagic.prototype.showLighteningCircle = function() {
        var _this = this;
        this.magicLighteningCircle.opacity = 128;
        this.magicLighteningCircle.scale = 1;
        cc.tween(this.magicLighteningCircle).to(1, {
          scale: 10
        }).call(function() {
          _this.addStatus2NearEnemy(_this.player.node, StatusManager_1.default.DIZZ, 300);
          _this.magicLighteningCircle.opacity = 0;
          _this.magicLighteningCircle.scale = 1;
        }).start();
      };
      TalentMagic.prototype.initFireGhosts = function() {
        var length = 5;
        var count = this.fireGhostNum;
        for (var i = 0; i < length - count; i++) {
          var ghostNode = null;
          this.ghostPool.size() > 0 && (ghostNode = this.ghostPool.get());
          ghostNode && !ghostNode.active || (ghostNode = cc.instantiate(this.fireGhost));
          this.fireGhostNum++;
          ghostNode.active = true;
          var fg = ghostNode.getComponent(FireGhost_1.default);
          this.player.node.parent.addChild(fg.node);
          fg.init(this.player, 72 * i);
        }
      };
      TalentMagic.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 10) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      var TalentMagic_1;
      __decorate([ property(MagicCircle_1.default) ], TalentMagic.prototype, "magiccircle", void 0);
      __decorate([ property(MagicIce_1.default) ], TalentMagic.prototype, "magicice", void 0);
      __decorate([ property(cc.Prefab) ], TalentMagic.prototype, "icethron", void 0);
      __decorate([ property(cc.Prefab) ], TalentMagic.prototype, "fireGhost", void 0);
      __decorate([ property(cc.Node) ], TalentMagic.prototype, "magicLighteningCircle", void 0);
      TalentMagic = TalentMagic_1 = __decorate([ ccclass ], TalentMagic);
      return TalentMagic;
    }(Talent_1.default);
    exports.default = TalentMagic;
    cc._RF.pop();
  }, {
    "../Data/FromData": "FromData",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./FireGhost": "FireGhost",
    "./IceThron": "IceThron",
    "./MagicCircle": "MagicCircle",
    "./MagicIce": "MagicIce",
    "./Talent": "Talent"
  } ],
  TalentShield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9db0eWCt9hLa7XLpSo6xHBj", "TalentShield");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StatusManager_1 = require("../Manager/StatusManager");
    var EventHelper_1 = require("../EventHelper");
    var Logic_1 = require("../Logic");
    var DamageData_1 = require("../Data/DamageData");
    var Talent_1 = require("./Talent");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var FromData_1 = require("../Data/FromData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TalentShield = function(_super) {
      __extends(TalentShield, _super);
      function TalentShield() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.shieldBackSprite = null;
        _this.shieldFrontSprite = null;
        return _this;
      }
      TalentShield_1 = TalentShield;
      TalentShield.prototype.onLoad = function() {};
      TalentShield.prototype.init = function(data) {
        _super.prototype.init.call(this, data);
        this.shieldBackSprite = this.getSpriteChildSprite([ "shieldback" ]);
        this.shieldFrontSprite = this.getSpriteChildSprite([ "shieldfront" ]);
        this.shieldBackSprite.node.opacity = 0;
        this.shieldFrontSprite.node.opacity = 0;
        this.sprites = new Array();
        var arr = [ 2, 3, 4, 5, 9, 12, 13, 14 ];
        for (var i = 0; i < arr.length; i++) {
          var sprite = this.getSpriteChildSprite([ "shieldfront", "sprite" + arr[i] ]);
          sprite.node.opacity = 0;
          this.sprites.push(sprite);
        }
      };
      TalentShield.prototype.changePerformance = function() {
        for (var _i = 0, _a = this.sprites; _i < _a.length; _i++) {
          var sprite = _a[_i];
          sprite.node.opacity = 0;
        }
        this.shieldFrontSprite.node.color = cc.color(255, 255, 255);
        var isThrow = false;
        this.changeRes(isThrow ? "shield06" : "shield01");
      };
      TalentShield.prototype.changeRes = function(resName) {
        if (!resName || resName.length < 1) return;
        this.shieldBackSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
        this.shieldFrontSprite.spriteFrame = Logic_1.default.spriteFrameRes(resName);
      };
      TalentShield.prototype.skillCanUse = function() {
        return true;
      };
      TalentShield.prototype.useSKill = function() {
        this.doSkill();
      };
      TalentShield.prototype.doSkill = function() {
        var _this = this;
        if (!this.talentSkill) return;
        if (this.talentSkill.IsExcuting) return;
        var cooldown = 7;
        var invulnerabilityTime = 1;
        this.hashTalent(TalentShield_1.SHIELD_13) && (cooldown = 5);
        this.talentSkill.next(function() {
          var statusName = StatusManager_1.default.SHIELD_NORMAL;
          var animOverTime = .1;
          _this.talentSkill.IsExcuting = true;
          var y = _this.shieldFrontSprite.node.y;
          _this.shieldBackSprite.node.scaleX = 1;
          _this.shieldFrontSprite.node.scaleX = 0;
          _this.shieldBackSprite.node.opacity = 255;
          _this.shieldFrontSprite.node.opacity = 255;
          _this.shieldFrontSprite.node.x = -8;
          if (_this.hashTalent(TalentShield_1.SHIELD_14)) {
            statusName = StatusManager_1.default.SHIELD_LONG;
            invulnerabilityTime = 2;
          }
          if (_this.hashTalent(TalentShield_1.SHIELD_06)) {
            invulnerabilityTime = 0;
            animOverTime = 0;
          }
          cc.tween(_this.shieldBackSprite.node).to(.1, {
            scaleX: 0,
            scaleY: 1
          }).to(.1, {
            position: cc.v3(-16, y)
          }).delay(invulnerabilityTime).to(animOverTime, {
            position: cc.v3(-8, y)
          }).to(animOverTime, {
            scale: 1
          }).start();
          cc.tween(_this.shieldFrontSprite.node).to(.1, {
            scale: 1
          }).to(.1, {
            position: cc.v3(8, y)
          }).delay(invulnerabilityTime).to(animOverTime, {
            position: cc.v3(-8, y)
          }).to(animOverTime, {
            scaleX: 0,
            scaleY: 1
          }).start();
          _this.player.addStatus(statusName, new FromData_1.default());
          _this.scheduleOnce(function() {
            cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
              detail: {
                name: AudioPlayer_1.default.MELEE
              }
            });
          }, .2);
          _this.scheduleOnce(function() {
            _this.talentSkill.IsExcuting = false;
          }, invulnerabilityTime + .2);
          _this.scheduleOnce(function() {
            _this.shieldBackSprite.node.opacity = 255;
          }, 1);
        }, cooldown, true);
      };
      TalentShield.prototype.canAddStatus = function(statusType) {
        if (!this.hashTalent(TalentShield_1.SHIELD_04)) return true;
        var cant = statusType == StatusManager_1.default.FROZEN || statusType == StatusManager_1.default.BURNING || statusType == StatusManager_1.default.DIZZ || statusType == StatusManager_1.default.TOXICOSIS || statusType == StatusManager_1.default.CURSING || statusType == StatusManager_1.default.BLEEDING;
        return !cant;
      };
      TalentShield.prototype.takeDamage = function(damageData, actor) {
        if (actor && this.IsExcuting) {
          if (this.hashTalent(TalentShield_1.SHIELD_05)) return actor.takeDamage(new DamageData_1.default(5));
          if (this.hashTalent(TalentShield_1.SHIELD_02)) return actor.takeDamage(new DamageData_1.default(1));
        }
        return false;
      };
      var TalentShield_1;
      TalentShield = TalentShield_1 = __decorate([ ccclass ], TalentShield);
      return TalentShield;
    }(Talent_1.default);
    exports.default = TalentShield;
    cc._RF.pop();
  }, {
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./Talent": "Talent"
  } ],
  Talent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11194HbWx5MlLwfYetzGt8W", "Talent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NextStep_1 = require("../Utils/NextStep");
    var Player_1 = require("../Player");
    var Logic_1 = require("../Logic");
    var FromData_1 = require("../Data/FromData");
    var EventHelper_1 = require("../EventHelper");
    var AreaOfEffect_1 = require("../Actor/AreaOfEffect");
    var CoolDownView_1 = require("../UI/CoolDownView");
    var Utils_1 = require("../Utils/Utils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Talent = function(_super) {
      __extends(Talent, _super);
      function Talent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.talentSkill = new NextStep_1.default();
        _this.coolDownId = CoolDownView_1.default.PROFESSION;
        _this.checkTimeDelay = 0;
        return _this;
      }
      Talent_1 = Talent;
      Object.defineProperty(Talent.prototype, "IsExcuting", {
        get: function() {
          return this.talentSkill.IsExcuting;
        },
        set: function(flag) {
          this.talentSkill.IsExcuting = flag;
        },
        enumerable: false,
        configurable: true
      });
      Talent.prototype.onLoad = function() {};
      Talent.prototype.init = function(data) {
        this.player = this.getComponent(Player_1.default);
        this.data = data;
      };
      Talent.prototype.initCoolDown = function(data, storePointMax) {
        var _this = this;
        this.talentSkill.init(false, storePointMax, data.storePoint, data.cooldown, data.secondCount, function(secondCount) {
          _this.updateCooldownAndHud(data.cooldown, secondCount);
        });
      };
      Talent.prototype.useSKill = function() {
        var _this = this;
        if (!this.talentSkill) return;
        if (this.talentSkill.IsExcuting) {
          Utils_1.default.toast("\u6280\u80fd\u65bd\u653e\u6216\u8005\u51b7\u5374\u4e2d");
          return;
        }
        if (this.player.data.currentDream >= this.data.cost && this.skillCanUse()) {
          var cooldown_1 = this.data.cooldown;
          this.talentSkill.IsInCooling && Utils_1.default.toast("\u6280\u80fd\u51b7\u5374\u4e2d");
          this.talentSkill.next(function() {
            _this.talentSkill.IsExcuting = true;
            _this.player.updateDream(_this.data.cost);
            _this.data.useCount++;
            _this.doSkill();
            _this.updateCooldownAndHud(cooldown_1, cooldown_1);
          }, cooldown_1, true, function(secondCount) {
            _this.updateCooldownAndHud(cooldown_1, secondCount);
          });
        } else {
          cc.director.emit(EventHelper_1.EventHelper.HUD_SHAKE_PLAYER_DREAMBAR);
          Utils_1.default.toast("\u80fd\u91cf\u4e0d\u8db3");
        }
      };
      Talent.prototype.refreshCooldown = function() {
        this.talentSkill.refreshCoolDown();
        this.updateCooldownAndHud(this.data.cooldown, 0);
      };
      Talent.prototype.cutCooldown = function(cutSecond) {
        var second = this.talentSkill.cutCoolDown(cutSecond);
        this.updateCooldownAndHud(this.data.cooldown, this.talentSkill.cutCoolDown(second));
      };
      Talent.prototype.updateCooldownAndHud = function(duration, secondCount) {
        if (!this.node) return;
        this.data.secondCount = secondCount;
        this.data.storePoint = this.talentSkill.StorePoint;
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_CONTROLLER_COOLDOWN, {
          id: this.coolDownId,
          duration: duration,
          secondCount: secondCount,
          storePoint: this.talentSkill.StorePoint,
          storePointMax: this.talentSkill.StorePointMax
        });
      };
      Talent.prototype.getSpriteChildSprite = function(childNames) {
        var node = this.node;
        for (var _i = 0, childNames_1 = childNames; _i < childNames_1.length; _i++) {
          var name = childNames_1[_i];
          node = node.getChildByName(name);
        }
        return node.getComponent(cc.Sprite);
      };
      Talent.prototype.hashTalent = function(resName) {
        return this.data.resName == resName;
      };
      Talent.prototype.shoot = function(shooter, bulletArcExNum, bulletLineExNum, bulletType, prefab, data) {
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(0, null, 0, 0, prefab, data);
      };
      Talent.prototype.addStatus2NearEnemy = function(targetNode, statusName, range) {
        if (!this.player) return cc.Vec3.ZERO;
        for (var _i = 0, _a = this.player.weaponRight.meleeWeapon.dungeon.monsterManager.monsterList; _i < _a.length; _i++) {
          var monster = _a[_i];
          var dis = Logic_1.default.getDistanceNoSqrt(targetNode.position, monster.node.position);
          dis < range && !monster.sc.isDied && !monster.sc.isDisguising && monster.addStatus(statusName, new FromData_1.default());
        }
        for (var _b = 0, _c = this.player.weaponRight.meleeWeapon.dungeon.monsterManager.bossList; _b < _c.length; _b++) {
          var boss = _c[_b];
          var dis = Logic_1.default.getDistanceNoSqrt(targetNode.position, boss.node.position);
          dis < range && !boss.sc.isDied && boss.addStatus(statusName, new FromData_1.default());
        }
      };
      Talent.prototype.addAoe = function(aoePreab, pos, aoeData, spriteFrameNames, repeatForever, isFaceRight) {
        var aoe = cc.instantiate(aoePreab);
        pos.y += 32;
        var sprite = aoe.getChildByName("sprite").getComponent(cc.Sprite);
        var collider = aoe.getComponent(cc.BoxCollider);
        if (spriteFrameNames.length > 0) {
          var spriteframe = Logic_1.default.spriteFrameRes(spriteFrameNames[0]);
          sprite.node.width = spriteframe.getOriginalSize().width;
          sprite.node.height = spriteframe.getOriginalSize().height;
          sprite.node.scale = 4;
          sprite.node.scaleX = isFaceRight ? 4 : -4;
          collider.size.width = 3 * sprite.node.width;
          collider.size.height = 3 * sprite.node.height;
        }
        var tween = cc.tween();
        var _loop_1 = function(name) {
          tween.then(cc.tween().delay(.2).call(function() {
            sprite.spriteFrame = Logic_1.default.spriteFrameRes(name);
          }));
        };
        for (var _i = 0, spriteFrameNames_1 = spriteFrameNames; _i < spriteFrameNames_1.length; _i++) {
          var name = spriteFrameNames_1[_i];
          _loop_1(name);
        }
        repeatForever ? cc.tween(aoe).repeatForever(tween).start() : cc.tween(aoe).then(tween).delay(.2).call(function() {
          sprite.spriteFrame = null;
        }).start();
        var areaScript = aoe.getComponent(AreaOfEffect_1.default);
        areaScript.show(this.player.dungeon.node, pos, cc.v3(1, 0), 0, aoeData);
      };
      Talent.prototype.isCheckTimeDelay = function(dt) {
        this.checkTimeDelay += dt;
        if (this.checkTimeDelay > 1) {
          this.checkTimeDelay = 0;
          return true;
        }
        return false;
      };
      var Talent_1;
      Talent.DASH = "1000000";
      Talent.SHIELD = "2000000";
      Talent.MAGIC = "3000000";
      Talent.ARCHER = "4000000";
      Talent.DASH_01 = Talent_1.DASH + 1;
      Talent.DASH_02 = Talent_1.DASH + 2;
      Talent.DASH_03 = Talent_1.DASH + 3;
      Talent.DASH_04 = Talent_1.DASH + 4;
      Talent.DASH_05 = Talent_1.DASH + 5;
      Talent.DASH_06 = Talent_1.DASH + 6;
      Talent.DASH_07 = Talent_1.DASH + 7;
      Talent.DASH_08 = Talent_1.DASH + 8;
      Talent.DASH_09 = Talent_1.DASH + 9;
      Talent.DASH_10 = Talent_1.DASH + 10;
      Talent.DASH_11 = Talent_1.DASH + 11;
      Talent.DASH_12 = Talent_1.DASH + 12;
      Talent.DASH_13 = Talent_1.DASH + 13;
      Talent.DASH_14 = Talent_1.DASH + 14;
      Talent.SHIELD_01 = Talent_1.SHIELD + 1;
      Talent.SHIELD_02 = Talent_1.SHIELD + 2;
      Talent.SHIELD_03 = Talent_1.SHIELD + 3;
      Talent.SHIELD_04 = Talent_1.SHIELD + 4;
      Talent.SHIELD_05 = Talent_1.SHIELD + 5;
      Talent.SHIELD_06 = Talent_1.SHIELD + 6;
      Talent.SHIELD_07 = Talent_1.SHIELD + 7;
      Talent.SHIELD_08 = Talent_1.SHIELD + 8;
      Talent.SHIELD_09 = Talent_1.SHIELD + 9;
      Talent.SHIELD_10 = Talent_1.SHIELD + 10;
      Talent.SHIELD_11 = Talent_1.SHIELD + 11;
      Talent.SHIELD_12 = Talent_1.SHIELD + 12;
      Talent.SHIELD_13 = Talent_1.SHIELD + 13;
      Talent.SHIELD_14 = Talent_1.SHIELD + 14;
      Talent.MAGIC_01 = Talent_1.MAGIC + 1;
      Talent.MAGIC_02 = Talent_1.MAGIC + 2;
      Talent.MAGIC_03 = Talent_1.MAGIC + 3;
      Talent.MAGIC_04 = Talent_1.MAGIC + 4;
      Talent.MAGIC_05 = Talent_1.MAGIC + 5;
      Talent.MAGIC_06 = Talent_1.MAGIC + 6;
      Talent.MAGIC_07 = Talent_1.MAGIC + 7;
      Talent.MAGIC_08 = Talent_1.MAGIC + 8;
      Talent.MAGIC_09 = Talent_1.MAGIC + 9;
      Talent.MAGIC_10 = Talent_1.MAGIC + 10;
      Talent.MAGIC_11 = Talent_1.MAGIC + 11;
      Talent.MAGIC_12 = Talent_1.MAGIC + 12;
      Talent.MAGIC_13 = Talent_1.MAGIC + 13;
      Talent.MAGIC_14 = Talent_1.MAGIC + 14;
      Talent.MAGIC_15 = Talent_1.MAGIC + 15;
      Talent.MAGIC_16 = Talent_1.MAGIC + 16;
      Talent.TALENT_000 = "talent000";
      Talent.TALENT_001 = "talent001";
      Talent.TALENT_002 = "talent002";
      Talent.TALENT_003 = "talent003";
      Talent.TALENT_004 = "talent004";
      Talent.TALENT_005 = "talent005";
      Talent.TALENT_006 = "talent006";
      Talent.TALENT_007 = "talent007";
      Talent.TALENT_008 = "talent008";
      Talent.TALENT_009 = "talent009";
      Talent.TALENT_010 = "talent010";
      Talent.TALENT_011 = "talent011";
      Talent.TALENT_012 = "talent012";
      Talent.TALENT_013 = "talent013";
      Talent.TALENT_014 = "talent014";
      Talent.TALENT_015 = "talent015";
      Talent.TALENT_016 = "talent016";
      Talent.TALENT_017 = "talent017";
      Talent.TALENT_018 = "talent018";
      Talent.TALENT_019 = "talent019";
      Talent.TALENT_100 = "talent100";
      Talent.TALENT_101 = "talent101";
      Talent.TALENT_102 = "talent102";
      Talent.TALENT_103 = "talent103";
      Talent = Talent_1 = __decorate([ ccclass ], Talent);
      return Talent;
    }(cc.Component);
    exports.default = Talent;
    cc._RF.pop();
  }, {
    "../Actor/AreaOfEffect": "AreaOfEffect",
    "../Data/FromData": "FromData",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Player": "Player",
    "../UI/CoolDownView": "CoolDownView",
    "../Utils/NextStep": "NextStep",
    "../Utils/Utils": "Utils"
  } ],
  TarotCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4b2bYbHidG7bCWzE85sIMb", "TarotCard");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TarotData_1 = require("../Data/TarotData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TarotCard = function(_super) {
      __extends(TarotCard, _super);
      function TarotCard() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.indexLabel = null;
        _this.anim = null;
        _this.frontNode = null;
        _this.backNode = null;
        _this.data = new TarotData_1.default();
        return _this;
      }
      TarotCard.prototype.onLoad = function() {
        this.anim = this.getComponent(cc.Animation);
        this.frontNode = this.node.getChildByName("sprite").getChildByName("front");
        this.backNode = this.node.getChildByName("sprite").getChildByName("back");
        this.indexLabel = this.node.getChildByName("sprite").getChildByName("front").getChildByName("index").getComponent(cc.Label);
        this.frontNode.scaleX = 0;
        this.backNode.scaleY = 1;
      };
      TarotCard.prototype.initFromGround = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("TarotIdle");
      };
      TarotCard.prototype.showCard = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("TarotFilpToFront");
      };
      TarotCard.prototype.coverCard = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play("TarotFilpToBack");
      };
      TarotCard.prototype.start = function() {};
      TarotCard = __decorate([ ccclass ], TarotCard);
      return TarotCard;
    }(cc.Component);
    exports.default = TarotCard;
    cc._RF.pop();
  }, {
    "../Data/TarotData": "TarotData"
  } ],
  TarotData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2921ee/FxFNuIPjZdXjGRw+", "TarotData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TarotData = function() {
      function TarotData() {
        this.nameCn = "";
        this.nameEn = "";
        this.desc = "";
        this.resName = "";
        this.index = 0;
        this.word1 = "";
        this.word2 = "";
        this.word3 = "";
        this.word4 = "";
        this.word5 = "";
        this.word6 = "";
      }
      TarotData.prototype.valueCopy = function(data) {
        this.nameCn = data.nameCn ? data.nameCn : this.nameCn;
        this.nameEn = data.nameEn ? data.nameEn : this.nameEn;
        this.index = data.index ? data.index : this.index;
        this.resName = data.resName ? data.resName : this.resName;
        this.desc = data.desc;
      };
      TarotData.prototype.clone = function() {
        var e = new TarotData();
        e.nameCn = this.nameCn;
        e.nameEn = this.nameEn;
        e.index = this.index;
        e.resName = this.resName;
        e.desc = this.desc;
        return e;
      };
      return TarotData;
    }();
    exports.default = TarotData;
    cc._RF.pop();
  }, {} ],
  TarotManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b67c009qhlE0oYcKSjCxjFX", "TarotManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TarotCard_1 = require("../Item/TarotCard");
    var Dungeon_1 = require("../Dungeon");
    var IndexZ_1 = require("../Utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TarotManager = function(_super) {
      __extends(TarotManager, _super);
      function TarotManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.card = null;
        return _this;
      }
      TarotManager.prototype.getCard = function(resName, pos) {
        var cardPrefab = cc.instantiate(this.card);
        cardPrefab.parent = this.node;
        cardPrefab.position = Dungeon_1.default.getPosInMap(pos);
        cardPrefab.zIndex = IndexZ_1.default.getActorZIndex(cardPrefab.position);
        var card = cardPrefab.getComponent(TarotCard_1.default);
        card.data.resName = resName;
        return card;
      };
      TarotManager.THE_FOOL = "tarot00";
      TarotManager.THE_MAGICIAN = "tarot01";
      TarotManager.THE_HIGH_PRIESTESS = "tarot02";
      TarotManager.THE_EMPRESS = "tarot03";
      TarotManager.THE_EMPEROR = "tarot04";
      TarotManager.THE_HIEROPHANT = "tarot05";
      TarotManager.THE_LOVERS = "tarot06";
      TarotManager.THE_CHARIOT = "tarot07";
      TarotManager.STRENGTH = "tarot08";
      TarotManager.THE_HERMIT = "tarot09";
      TarotManager.THE_WHEEL_OF_FORTUNE = "tarot10";
      TarotManager.JUSTICE = "tarot11";
      TarotManager.THE_HANGEDMAN = "tarot12";
      TarotManager.DEATH = "tarot13";
      TarotManager.TEMPERANCE = "tarot14";
      TarotManager.THE_DEVIL = "tarot15";
      TarotManager.THE_TOWER = "tarot16";
      TarotManager.THE_STAR = "tarot17";
      TarotManager.THE_MOON = "tarot18";
      TarotManager.THE_SUN = "tarot19";
      TarotManager.JUDGEMENT = "tarot20";
      TarotManager.THE_WORLD = "tarot21";
      __decorate([ property(cc.Prefab) ], TarotManager.prototype, "card", void 0);
      return TarotManager;
    }(cc.Component);
    exports.default = TarotManager;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../Item/TarotCard": "TarotCard",
    "../Utils/IndexZ": "IndexZ"
  } ],
  TarotTable: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f0e8dVSyEpP0bI6DNiqwoQc", "TarotTable");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Tips_1 = require("../UI/Tips");
    var Building_1 = require("./Building");
    var IndexZ_1 = require("../Utils/IndexZ");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TarotTable = function(_super) {
      __extends(TarotTable, _super);
      function TarotTable() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TarotTable.prototype.onLoad = function() {
        var _this = this;
        this.anim = this.getComponent(cc.Animation);
        this.tips = this.node.getChildByName("Tips").getComponent(Tips_1.default);
        this.tips.onInteract(function() {
          _this.node && _this.showCards();
        });
      };
      TarotTable.prototype.start = function() {};
      TarotTable.prototype.showCards = function() {
        this.anim || (this.anim = this.getComponent(cc.Animation));
        this.anim.play();
      };
      TarotTable.prototype.setPos = function(pos) {
        this.pos = pos;
        this.node.position = Dungeon_1.default.getPosInMap(pos);
        this.node.zIndex = IndexZ_1.default.getActorZIndex(this.node.position);
      };
      TarotTable = __decorate([ ccclass ], TarotTable);
      return TarotTable;
    }(Building_1.default);
    exports.default = TarotTable;
    cc._RF.pop();
  }, {
    "../Dungeon": "Dungeon",
    "../UI/Tips": "Tips",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  TestFog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1aa806ypbFLYIf29yLJ7ObM", "TestFog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TestFrog = function(_super) {
      __extends(TestFrog, _super);
      function TestFrog() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TestFrog.prototype.start = function() {};
      TestFrog.prototype.show = function() {
        this.mat || (this.mat = this.node.getComponent(cc.Sprite).getMaterial(0));
        this.mat.setProperty("wh_ratio", this.node.width / this.node.height);
        this.mat.setProperty("center", cc.v2(.5, .5));
        this.mat.setProperty("radius", .5);
      };
      TestFrog = __decorate([ ccclass ], TestFrog);
      return TestFrog;
    }(cc.Component);
    exports.default = TestFrog;
    cc._RF.pop();
  }, {} ],
  Test: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f27abc9Kq9M9YY+mw/i2T6U", "Test");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Test = function(_super) {
      __extends(Test, _super);
      function Test() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.graphics = null;
        _this.camera = null;
        _this.ray = null;
        _this.shadow = null;
        _this.shadowCamera = null;
        _this.radius = 200;
        _this.playerPos = cc.v2(640, 360);
        _this.zoomArr = [ 1, .5 ];
        _this.index = 0;
        return _this;
      }
      Test.prototype.onLoad = function() {
        var _this = this;
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          var pos = event.getLocation();
          _this.playerPos = pos.clone();
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          var pos = event.getLocation();
          _this.playerPos = pos.clone();
          cc.log("playerPos:" + pos.x + "," + pos.y);
        }, this);
      };
      Test.prototype.changeZoom = function() {
        if (this.camera) {
          this.camera.zoomRatio = this.zoomArr[this.index++];
          this.index > this.zoomArr.length - 1 && (this.index = 0);
        }
      };
      Test.prototype.changeRayCast = function() {};
      Test.prototype.start = function() {
        this.mat = this.graphics.getMaterial(0);
        this.mat1 = this.ray.getMaterial(0);
        this.render(this.playerPos);
        var texture = new cc.RenderTexture();
        texture.initWithSize(cc.visibleRect.width / 8, cc.visibleRect.height / 8);
        texture.setFilters(cc.Texture2D.Filter.NEAREST, cc.Texture2D.Filter.NEAREST);
        this.shadowCamera.targetTexture = texture;
        this.shadowCamera.render();
        this.shadow.spriteFrame = new cc.SpriteFrame(texture);
      };
      Test.prototype.render = function(pos) {
        var p = this.graphics.node.convertToNodeSpaceAR(pos);
        this.graphics.clear();
        this.graphics.fillColor = cc.color(0, 255, 0);
        this.graphics.circle(p.x, p.y, this.radius);
        this.graphics.fill();
      };
      Test.prototype.updateMat = function(mat, pos, rayRadius) {
        var canvasSize = cc.view.getCanvasSize();
        var visibleSize = cc.view.getVisibleSize();
        var visibleRatio = visibleSize.width / visibleSize.height;
        var r = rayRadius / visibleSize.height;
        var scale = canvasSize.width / visibleSize.width;
        mat.setProperty("screen", cc.v2(canvasSize.width, canvasSize.height));
        mat.setProperty("maxRadius", r * this.camera.zoomRatio);
        mat.setProperty("whRatio", visibleRatio);
        var lightPos = cc.v2(pos.x / visibleSize.width, pos.y / visibleSize.height);
        var y = Math.abs(lightPos.y - .5) * visibleSize.height * scale / canvasSize.height;
        mat.setProperty("lightPos", cc.v2(lightPos.x, lightPos.y > .5 ? .5 + y : .5 - y));
      };
      Test.prototype.lateUpdate = function(dt) {
        this.render(this.playerPos);
        var pos = this.camera.getWorldToScreenPoint(this.playerPos);
        this.updateMat(this.mat, cc.v2(pos.x, pos.y), this.radius);
      };
      __decorate([ property(cc.Graphics) ], Test.prototype, "graphics", void 0);
      __decorate([ property(cc.Camera) ], Test.prototype, "camera", void 0);
      __decorate([ property(cc.Graphics) ], Test.prototype, "ray", void 0);
      __decorate([ property(cc.Sprite) ], Test.prototype, "shadow", void 0);
      __decorate([ property(cc.Camera) ], Test.prototype, "shadowCamera", void 0);
      Test = __decorate([ ccclass ], Test);
      return Test;
    }(cc.Component);
    exports.default = Test;
    cc._RF.pop();
  }, {} ],
  Tile: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8047r9sJ5IqqTgIdjYi6dc", "Tile");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Tile = function(_super) {
      __extends(Tile, _super);
      function Tile() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.isBroken = false;
        _this.isAutoShow = true;
        _this.timeDelay = 0;
        _this.isAnimPlaying = false;
        _this.isBreakingNow = false;
        _this.tileType = "**";
        _this.coverPrefix = "";
        _this.cover1 = "";
        _this.cover2 = "";
        _this.cover3 = "";
        _this.cover4 = "";
        _this.cover5 = "";
        _this.floorPrefix = "";
        _this.isSmall = false;
        return _this;
      }
      Tile.prototype.onLoad = function() {
        this.isAutoShow = true;
        this.anim = this.getComponent(cc.Animation);
        this.floor = this.node.getChildByName("sprite").getChildByName("floor").getComponent(cc.Sprite);
      };
      Tile.prototype.start = function() {
        this.changeRes(this.getRes());
      };
      Tile.prototype.getRes = function() {
        var s = this.floorPrefix + "001";
        switch (this.tileType) {
         case "**":
          s = this.floorPrefix + "001";
          break;

         case "*0":
          s = this.floorPrefix + "002";
          this.isSmall = true;
          break;

         case "*1":
          s = this.floorPrefix + "003";
          this.isSmall = true;
          break;

         case "*2":
          s = this.floorPrefix + "001";
          this.isSmall = true;
          break;

         case "*3":
          s = this.floorPrefix + "002";
          this.isSmall = true;
          break;

         case "*4":
          s = this.coverPrefix + "004";
          break;

         case "*5":
          s = this.cover1;
          break;

         case "*6":
          s = this.cover2;
          break;

         case "*7":
          s = this.cover3;
          break;

         case "*8":
          s = this.cover4;
          break;

         case "*9":
          s = this.cover5;
        }
        return s;
      };
      Tile.prototype.TileBreak = function() {};
      Tile.prototype.TileBreakFinish = function() {
        var _this = this;
        this.isBroken = true;
        this.isAnimPlaying = false;
        this.isAutoShow && this.scheduleOnce(function() {
          _this.showTile();
        }, 2);
      };
      Tile.prototype.TileShow = function() {
        this.isAnimPlaying = false;
      };
      Tile.prototype.breakTile = function() {
        if (this.isAnimPlaying) return;
        this.anim.play("TileBreak");
        this.isBreakingNow = true;
        this.isAnimPlaying = true;
      };
      Tile.prototype.showTile = function() {
        if (this.isAnimPlaying || !this.anim) return;
        this.anim.play("TileShow");
        this.isBroken = false;
        this.isBreakingNow = false;
        this.isAnimPlaying = true;
      };
      Tile.prototype.changeRes = function(resName) {
        this.floor.spriteFrame = Logic_1.default.spriteFrameRes(resName);
        null == this.floor.spriteFrame && (this.floor.spriteFrame = Logic_1.default.spriteFrameRes(this.floorPrefix + "001"));
        this.floor.node.width = this.isSmall ? 17 : 33;
        this.floor.node.height = this.isSmall ? 17 : 33;
      };
      __decorate([ property(cc.Label) ], Tile.prototype, "label", void 0);
      Tile = __decorate([ ccclass ], Tile);
      return Tile;
    }(cc.Component);
    exports.default = Tile;
    cc._RF.pop();
  }, {
    "./Logic": "Logic"
  } ],
  Tips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36c4bnGdrlOy4Y1XkbF9xfT", "Tips");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Tips = function(_super) {
      __extends(Tips, _super);
      function Tips() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Tips.prototype.onLoad = function() {
        this.node.opacity = 0;
      };
      Tips.prototype.start = function() {};
      Tips.prototype.next = function(isLongPress, player) {
        this.node && this.node.active && this.interactCallback && this.interactCallback(isLongPress, player);
      };
      Tips.prototype.onInteract = function(callback) {
        this.interactCallback = callback;
      };
      Tips.prototype.onEnter = function(callback) {
        this.enterCallback = callback;
      };
      Tips.prototype.onExit = function(callback) {
        this.exitCallback = callback;
      };
      Tips.prototype.onCollisionEnter = function(other, self) {
        if (other.tag == ColliderTag_1.ColliderTag.PLAYER) {
          this.node.opacity = 255;
          this.enterCallback && this.enterCallback(other.node);
        }
      };
      Tips.prototype.onCollisionExit = function(other, self) {
        if (other.tag == ColliderTag_1.ColliderTag.PLAYER) {
          this.node.opacity = 0;
          this.exitCallback && this.exitCallback(other.node);
        }
      };
      Tips = __decorate([ ccclass ], Tips);
      return Tips;
    }(cc.Component);
    exports.default = Tips;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag"
  } ],
  Toast: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2b27dQlgMFPKqLUuvpM/s/8", "Toast");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Toast = function(_super) {
      __extends(Toast, _super);
      function Toast() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        return _this;
      }
      Toast.prototype.onLoad = function() {
        var _this = this;
        EventHelper_1.EventHelper.on(EventHelper_1.EventHelper.HUD_TOAST, function(detail) {
          _this.node && _this.showToast(detail.msg, detail.isCenter, detail.isTap);
        });
        this.node.active = false;
      };
      Toast.prototype.showToast = function(msg, isCenter, isTap) {
        var _this = this;
        if (msg.length < 1) return;
        this.label.node.width = isCenter ? 300 : 600;
        var node = this.node;
        node.stopAllActions();
        var delay = 1.5;
        if (isTap) {
          delay = .05 * msg.length;
          delay < 1.5 && (delay = 1.5);
          var count_1 = 0;
          this.schedule(function() {
            _this.label.string = "" + msg.substr(0, count_1++);
            node.width = _this.label.node.width + 10;
            node.height = _this.label.node.height + 10;
            node.opacity = 255;
            node.active = true;
          }, .05, msg.length, .3);
        } else this.scheduleOnce(function() {
          _this.label.string = "" + msg;
          node.width = _this.label.node.width + 10;
          node.height = _this.label.node.height + 10;
          node.opacity = 255;
          node.active = true;
        }, .05);
        var y = isCenter ? 360 : 100;
        node.y = y - 100;
        node.scale = 0;
        cc.tween(node).to(.1, {
          scaleX: 1
        }).to(.1, {
          scaleY: 1
        }).to(.2, {
          y: y
        }).delay(delay).call(function() {
          cc.tween(node).to(.1, {
            scaleY: .1
          }).to(.1, {
            scaleX: 0
          }).to(.1, {
            opacity: 0
          }).call(function() {
            node.active = false;
          }).start();
        }).start();
      };
      __decorate([ property(cc.Label) ], Toast.prototype, "label", void 0);
      Toast = __decorate([ ccclass ], Toast);
      return Toast;
    }(cc.Component);
    exports.default = Toast;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper"
  } ],
  Trap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67e3dv84GNOwbSynhs23bOv", "Trap");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Player_1 = require("../Player");
    var DamageData_1 = require("../Data/DamageData");
    var Building_1 = require("./Building");
    var FromData_1 = require("../Data/FromData");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var IndexZ_1 = require("../Utils/IndexZ");
    var InventoryManager_1 = require("../Manager/InventoryManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Trap = function(_super) {
      __extends(Trap, _super);
      function Trap() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.openSpriteFrame = null;
        _this.closeSpriteFrame = null;
        _this.halfSpriteFrame = null;
        _this.isOpen = false;
        _this.pos = cc.v3(0, 0);
        _this.timeDelay = 0;
        return _this;
      }
      Trap.prototype.onLoad = function() {
        this.sprite = this.node.getChildByName("sprite");
      };
      Trap.prototype.start = function() {};
      Trap.prototype.setPos = function(pos) {
        this.pos = pos;
        this.node.position = Dungeon_1.default.getPosInMap(pos);
        this.node.zIndex = IndexZ_1.default.FLOOR;
      };
      Trap.prototype.openTrap = function() {
        var _this = this;
        if (this.isOpen) return;
        this.isOpen = true;
        this.sprite.getComponent(cc.Sprite).spriteFrame = this.openSpriteFrame;
        this.scheduleOnce(function() {
          _this.isOpen = false;
          if (_this.halfSpriteFrame) {
            _this.sprite.getComponent(cc.Sprite).spriteFrame = _this.halfSpriteFrame;
            _this.scheduleOnce(function() {
              _this.closeSpriteFrame && (_this.sprite.getComponent(cc.Sprite).spriteFrame = _this.closeSpriteFrame);
            }, .2);
          }
        }, .5);
      };
      Trap.prototype.onCollisionStay = function(other, self) {
        if (other.tag == ColliderTag_1.ColliderTag.PLAYER && this.isOpen) {
          this.isOpen = false;
          var player = other.getComponent(Player_1.default);
          player && player.inventoryManager.getEquipBySuit(player.inventoryManager.equips[InventoryManager_1.default.SHOES]).ignoreTrap < 1 && player.takeDamage(new DamageData_1.default(1), FromData_1.default.getClone(this.actorName(), "trap001"), this);
        }
      };
      Trap.prototype.update = function(dt) {
        this.timeDelay += dt;
        if (this.timeDelay > 3) {
          this.openTrap();
          this.timeDelay = 0;
        }
      };
      Trap.prototype.actorName = function() {
        return "\u5c16\u523a";
      };
      __decorate([ property(cc.SpriteFrame) ], Trap.prototype, "openSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], Trap.prototype, "closeSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], Trap.prototype, "halfSpriteFrame", void 0);
      Trap = __decorate([ ccclass ], Trap);
      return Trap;
    }(Building_1.default);
    exports.default = Trap;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../Manager/InventoryManager": "InventoryManager",
    "../Player": "Player",
    "../Utils/IndexZ": "IndexZ",
    "./Building": "Building"
  } ],
  Utils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f719fThqrBMn6NkMcXey0jG", "Utils");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("../EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Utils = function() {
      function Utils() {}
      Utils.log = function(msg) {
        this.showLog && cc.log(msg);
      };
      Utils.clearComponentArray = function(arr) {
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var n = arr_1[_i];
          n && n.isValid && n.destroy();
        }
      };
      Utils.toast = function(msg, isCenter, isTap) {
        EventHelper_1.EventHelper.emit(EventHelper_1.EventHelper.HUD_TOAST, {
          msg: msg,
          isCenter: isCenter,
          isTap: isTap
        });
      };
      Utils.getRotateAngle = function(direction, isFlip) {
        var angle = 180 * cc.v2(1, 0).signAngle(cc.v2(direction.normalize())) / Math.PI;
        return isFlip ? -angle : angle;
      };
      Utils.showLog = false;
      Utils = __decorate([ ccclass ], Utils);
      return Utils;
    }();
    exports.default = Utils;
    cc._RF.pop();
  }, {
    "../EventHelper": "EventHelper"
  } ],
  WalkSmoke: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3d56K96jBFs6t/GiwCmf8x", "WalkSmoke");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventHelper_1 = require("./EventHelper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WalkSmoke = function(_super) {
      __extends(WalkSmoke, _super);
      function WalkSmoke() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      WalkSmoke.prototype.start = function() {
        var _this = this;
        this.scheduleOnce(function() {
          cc.director.emit(EventHelper_1.EventHelper.POOL_DESTORY_WALKSMOKE, {
            detail: {
              coinNode: _this.node
            }
          });
        }, .3);
      };
      WalkSmoke = __decorate([ ccclass ], WalkSmoke);
      return WalkSmoke;
    }(cc.Component);
    exports.default = WalkSmoke;
    cc._RF.pop();
  }, {
    "./EventHelper": "EventHelper"
  } ],
  Wall: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7c06zRjp9J+piF+ZsFdjSH", "Wall");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var Building_1 = require("./Building");
    var ColliderTag_1 = require("../Actor/ColliderTag");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Wall = function(_super) {
      __extends(Wall, _super);
      function Wall() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.half = false;
        _this.mapStr = "##";
        _this.wallName = "";
        _this.roofName = "";
        _this.resNameSecond = "";
        _this.type = Wall_1.TYPE_EMPTY;
        _this.dir = 0;
        return _this;
      }
      Wall_1 = Wall;
      Wall.prototype.onLoad = function() {
        this.wallsprite = this.node.getChildByName("sprite").getChildByName("wallsprite").getComponent(cc.Sprite);
        this.roofsprite = this.node.getChildByName("sprite").getChildByName("roofsprite").getComponent(cc.Sprite);
        this.shadowsprite = this.node.getChildByName("sprite").getChildByName("shadow").getComponent(cc.Sprite);
      };
      Wall.prototype.changeRes = function(wallName, roofName) {
        this.wallsprite.spriteFrame = Logic_1.default.spriteFrameRes(wallName);
        this.roofsprite.spriteFrame = Logic_1.default.spriteFrameRes(roofName);
        if (this.type == Wall_1.TYPE_EMPTY) return this.node.opacity = 0;
        if (this.type == Wall_1.TYPE_OTHER1 || this.type == Wall_1.TYPE_OTHER2 || this.type == Wall_1.TYPE_OTHER3 || this.type == Wall_1.TYPE_OTHER4) {
          this.roofsprite.node.opacity = 0;
          this.wallsprite.node.height = 256;
        }
      };
      Wall.prototype.setPos = function(pos) {
        this.pos = pos;
        this.node.position = Dungeon_1.default.getPosInMap(pos);
      };
      Wall.prototype.start = function() {
        this.node.opacity = 255;
        this.changeRes(this.wallName, this.roofName);
      };
      Wall.prototype.ajustSpriteShow = function(isShowShadow, roofAngle, flipWall, flipRoof) {
        if (!this.wallsprite) {
          this.wallsprite = this.node.getChildByName("sprite").getChildByName("wallsprite").getComponent(cc.Sprite);
          this.roofsprite = this.node.getChildByName("sprite").getChildByName("roofsprite").getComponent(cc.Sprite);
          this.shadowsprite = this.node.getChildByName("sprite").getChildByName("shadow").getComponent(cc.Sprite);
        }
        this.shadowsprite.node.opacity = isShowShadow ? 80 : 0;
        this.roofsprite.node.angle = roofAngle;
        this.wallsprite.node.scaleX = flipWall ? -1 : 1;
        this.roofsprite.node.scaleX = flipRoof.x;
        this.roofsprite.node.scaleY = flipRoof.y;
      };
      Wall.prototype.isTop = function() {
        return this.type == Wall_1.TYPE_NORMAL && 0 == this.dir || this.type == Wall_1.TYPE_CORNER && this.dir < 2 || this.type == Wall_1.TYPE_INNER && this.dir < 2 || this.type == Wall_1.TYPE_INNER_CORNER && this.dir < 2 || this.type == Wall_1.TYPE_CONVEX && 0 == this.dir || this.type == Wall_1.TYPE_CONCAVE && 0 == this.dir;
      };
      Wall.prototype.isSide = function() {
        return this.type == Wall_1.TYPE_NORMAL && this.dir > 1;
      };
      Wall.prototype.init = function(mapStr, leveldata, onlyShow) {
        this.mapStr = mapStr;
        var dir = parseInt(mapStr[2]);
        this.dir = dir;
        var letter = mapStr[1];
        var isSencod = false;
        switch (letter) {
         case "#":
          this.type = Wall_1.TYPE_EMPTY;
          break;

         case "0":
          this.type = Wall_1.TYPE_OTHER1;
          break;

         case "1":
          this.type = Wall_1.TYPE_OTHER2;
          break;

         case "2":
          this.type = Wall_1.TYPE_OTHER3;
          break;

         case "3":
          this.type = Wall_1.TYPE_OTHER4;
          break;

         case "a":
          this.type = Wall_1.TYPE_NORMAL;
          break;

         case "b":
          this.type = Wall_1.TYPE_CORNER;
          break;

         case "c":
          this.type = Wall_1.TYPE_INNER;
          break;

         case "d":
          this.type = Wall_1.TYPE_CONVEX;
          break;

         case "e":
          this.type = Wall_1.TYPE_CONCAVE;
          break;

         case "f":
          this.type = Wall_1.TYPE_INNER_CORNER;
          break;

         case "g":
          this.type = Wall_1.TYPE_TWO_SIDES;
          break;

         case "h":
          this.type = Wall_1.TYPE_ALONE;
          break;

         case "i":
          this.type = Wall_1.TYPE_ROOF;
          break;

         case "j":
          this.type = Wall_1.TYPE_NORMAL;
          isSencod = true;
          break;

         case "k":
          this.type = Wall_1.TYPE_CORNER;
          isSencod = true;
          break;

         case "l":
          this.type = Wall_1.TYPE_INNER;
          isSencod = true;
          break;

         case "m":
          this.type = Wall_1.TYPE_CONVEX;
          isSencod = true;
          break;

         case "n":
          this.type = Wall_1.TYPE_CONCAVE;
          isSencod = true;
          break;

         case "o":
          this.type = Wall_1.TYPE_INNER_CORNER;
          isSencod = true;
          break;

         case "p":
          this.type = Wall_1.TYPE_TWO_SIDES;
          isSencod = true;
          break;

         case "q":
          this.type = Wall_1.TYPE_ALONE;
          isSencod = true;
          break;

         case "r":
          this.type = Wall_1.TYPE_ROOF;
          isSencod = true;
        }
        var res = isSencod ? leveldata.wallRes2 : leveldata.wallRes1;
        var roofdarkness = "roof" + res + "anim008";
        switch (this.type) {
         case Wall_1.TYPE_EMPTY:
          break;

         case Wall_1.TYPE_OTHER1:
          this.wallName = leveldata.wallRes3;
          break;

         case Wall_1.TYPE_OTHER2:
          this.wallName = leveldata.wallRes4;
          break;

         case Wall_1.TYPE_OTHER3:
          this.wallName = leveldata.wallRes5;
          break;

         case Wall_1.TYPE_OTHER4:
          this.wallName = leveldata.wallRes6;
          break;

         case Wall_1.TYPE_NORMAL:
          this.roofName = "roof" + res + "anim000";
          this.wallName = "wall" + res + "anim001";
          break;

         case Wall_1.TYPE_CORNER:
          this.roofName = "roof" + res + "anim001";
          this.wallName = roofdarkness;
          break;

         case Wall_1.TYPE_INNER:
          this.roofName = "roof" + res + "anim002";
          this.wallName = "wall" + res + "anim002";
          break;

         case Wall_1.TYPE_CONVEX:
          this.roofName = "roof" + res + "anim003";
          this.wallName = "wall" + res + "anim000";
          break;

         case Wall_1.TYPE_CONCAVE:
          this.roofName = "roof" + res + "anim004";
          this.wallName = roofdarkness;
          break;

         case Wall_1.TYPE_INNER_CORNER:
          this.roofName = "roof" + res + "anim005";
          this.wallName = "wall" + res + "anim002";
          break;

         case Wall_1.TYPE_TWO_SIDES:
          this.roofName = "roof" + res + "anim006";
          this.wallName = "wall" + res + "anim001";
          break;

         case Wall_1.TYPE_ALONE:
          this.roofName = "roof" + res + "anim007";
          this.wallName = "wall" + res + "anim000";
          break;

         case Wall_1.TYPE_ROOF:
          this.roofName = roofdarkness;
          this.wallName = roofdarkness;
        }
        var isWallFlip = false;
        var roofAngle = 0;
        var roofFlip = cc.v3(1, 1);
        var showShadow = false;
        switch (dir) {
         case 0:
          this.ajustSpriteShow(true, roofAngle, isWallFlip, roofFlip);
          break;

         case 1:
          if (this.isInnerOrCorner(this.type)) {
            isWallFlip = true;
            roofFlip = cc.v3(-1, 1);
            showShadow = true;
          } else if (this.type == Wall_1.TYPE_TWO_SIDES) roofAngle = 90; else {
            this.wallName = roofdarkness;
            roofFlip = cc.v3(1, -1);
          }
          this.ajustSpriteShow(showShadow, roofAngle, isWallFlip, roofFlip);
          break;

         case 2:
          if (this.isInnerOrCorner(this.type)) {
            roofFlip = cc.v3(1, -1);
            this.wallName = roofdarkness;
          } else {
            this.type == Wall_1.TYPE_CONVEX && (this.wallName = "wall" + res + "anim002");
            roofAngle = 90;
          }
          this.ajustSpriteShow(false, roofAngle, isWallFlip, roofFlip);
          break;

         case 3:
          if (this.isInnerOrCorner(this.type)) {
            roofFlip = cc.v3(-1, -1);
            this.wallName = roofdarkness;
          } else {
            if (this.type == Wall_1.TYPE_CONVEX) {
              this.wallName = "wall" + res + "anim002";
              isWallFlip = true;
            }
            roofAngle = -90;
          }
          this.ajustSpriteShow(false, roofAngle, isWallFlip, roofFlip);
        }
        if (this.isTop()) {
          var collider = this.getComponent(cc.PhysicsBoxCollider);
          collider.tag = ColliderTag_1.ColliderTag.WALL_TOP;
        }
        if (onlyShow) {
          var pcollider = this.getComponent(cc.PhysicsBoxCollider);
          var rigidbody = this.getComponent(cc.RigidBody);
          pcollider && (pcollider.enabled = false);
          rigidbody && (rigidbody.active = false);
        }
      };
      Wall.prototype.isInnerOrCorner = function(type) {
        return type == Wall_1.TYPE_INNER || type == Wall_1.TYPE_CORNER || type == Wall_1.TYPE_INNER_CORNER;
      };
      Wall.prototype.onCollisionEnter = function(other, self) {
        this.type == Wall_1.TYPE_EMPTY || other.tag != ColliderTag_1.ColliderTag.PLAYER && other.tag != ColliderTag_1.ColliderTag.NONPLAYER || (this.type == Wall_1.TYPE_OTHER1 || this.type == Wall_1.TYPE_OTHER2 || this.type == Wall_1.TYPE_OTHER3 || this.type == Wall_1.TYPE_OTHER4 ? this.wallsprite.node.opacity = 180 : this.roofsprite.node.opacity = 180);
      };
      Wall.prototype.onCollisionStay = function(other, self) {
        this.type == Wall_1.TYPE_EMPTY || other.tag != ColliderTag_1.ColliderTag.PLAYER && other.tag != ColliderTag_1.ColliderTag.NONPLAYER || (this.type == Wall_1.TYPE_OTHER1 || this.type == Wall_1.TYPE_OTHER2 || this.type == Wall_1.TYPE_OTHER3 || this.type == Wall_1.TYPE_OTHER4 ? this.wallsprite.node.opacity = 180 : this.roofsprite.node.opacity = 180);
      };
      Wall.prototype.onCollisionExit = function(other, self) {
        this.type == Wall_1.TYPE_EMPTY || other.tag != ColliderTag_1.ColliderTag.PLAYER && other.tag != ColliderTag_1.ColliderTag.NONPLAYER || (this.type == Wall_1.TYPE_OTHER1 || this.type == Wall_1.TYPE_OTHER2 || this.type == Wall_1.TYPE_OTHER3 || this.type == Wall_1.TYPE_OTHER4 ? this.wallsprite.node.opacity = 255 : this.roofsprite.node.opacity = 255);
      };
      var Wall_1;
      Wall.TYPE_EMPTY = -1;
      Wall.TYPE_NORMAL = 0;
      Wall.TYPE_CORNER = 1;
      Wall.TYPE_INNER = 2;
      Wall.TYPE_CONVEX = 3;
      Wall.TYPE_CONCAVE = 4;
      Wall.TYPE_INNER_CORNER = 5;
      Wall.TYPE_TWO_SIDES = 6;
      Wall.TYPE_ALONE = 7;
      Wall.TYPE_ROOF = 8;
      Wall.TYPE_OTHER1 = 9;
      Wall.TYPE_OTHER2 = 10;
      Wall.TYPE_OTHER3 = 11;
      Wall.TYPE_OTHER4 = 12;
      Wall = Wall_1 = __decorate([ ccclass ], Wall);
      return Wall;
    }(Building_1.default);
    exports.default = Wall;
    cc._RF.pop();
  }, {
    "../Actor/ColliderTag": "ColliderTag",
    "../Dungeon": "Dungeon",
    "../Logic": "Logic",
    "./Building": "Building"
  } ],
  WarMachine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e27dcjzJmBGK54bflNR6COZ", "WarMachine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Boss_1 = require("./Boss");
    var DamageData_1 = require("../Data/DamageData");
    var Shooter_1 = require("../Shooter");
    var Dungeon_1 = require("../Dungeon");
    var Logic_1 = require("../Logic");
    var StatusManager_1 = require("../Manager/StatusManager");
    var AudioPlayer_1 = require("../Utils/AudioPlayer");
    var EventHelper_1 = require("../EventHelper");
    var FromData_1 = require("../Data/FromData");
    var Achievement_1 = require("../Achievement");
    var ActorUtils_1 = require("../Utils/ActorUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WarMachine = function(_super) {
      __extends(WarMachine, _super);
      function WarMachine() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.text = "hello";
        _this.timeDelay = 0;
        _this.isMoving = false;
        _this.isMissileCoolDown = false;
        _this.isGatlingCoolDown = false;
        _this.isMainGunCoolDown = false;
        _this.actionCount = 0;
        _this.actionTimeDelay = 0;
        return _this;
      }
      WarMachine.prototype.onLoad = function() {
        this.sc.isDied = false;
        this.sc.isShow = false;
        this.anim = this.getComponent(cc.Animation);
        this.shooter01 = this.node.getChildByName("Shooter01").getComponent(Shooter_1.default);
        this.shooter02 = this.node.getChildByName("Shooter02").getComponent(Shooter_1.default);
        this.shooter03 = this.node.getChildByName("Shooter03").getComponent(Shooter_1.default);
        this.shooter04 = this.node.getChildByName("Shooter04").getComponent(Shooter_1.default);
        this.shooter05 = this.node.getChildByName("Shooter05").getComponent(Shooter_1.default);
        this.rigidbody = this.getComponent(cc.RigidBody);
        this.statusManager = this.node.getChildByName("StatusManager").getComponent(StatusManager_1.default);
        var from = FromData_1.default.getClone(this.actorName(), "bossmachinehead");
        this.shooter01.from.valueCopy(from);
        this.shooter02.from.valueCopy(from);
        this.shooter03.from.valueCopy(from);
        this.shooter04.from.valueCopy(from);
        this.shooter05.from.valueCopy(from);
      };
      WarMachine.prototype.start = function() {
        this.initGuns();
      };
      WarMachine.prototype.takeDamage = function(damage) {
        if (this.sc.isDied || !this.sc.isShow) return false;
        this.data.currentHealth -= this.data.getDamage(damage).getTotalDamage();
        this.data.currentHealth > this.data.Common.maxHealth && (this.data.currentHealth = this.data.Common.maxHealth);
        this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
        var hitNames = [ AudioPlayer_1.default.MONSTER_HIT, AudioPlayer_1.default.MONSTER_HIT1, AudioPlayer_1.default.MONSTER_HIT2 ];
        AudioPlayer_1.default.play(hitNames[Logic_1.default.getRandomNum(0, 2)]);
        return true;
      };
      WarMachine.prototype.killed = function() {
        var _this = this;
        if (this.sc.isDied) return;
        this.anim && this.anim.pause();
        Achievement_1.default.addMonsterKillAchievement(this.data.resName);
        this.sc.isDied = true;
        this.scheduleOnce(function() {
          _this.node && (_this.node.active = false);
        }, 5);
        this.getLoot();
      };
      WarMachine.prototype.bossAction = function() {
        if (this.sc.isDied || !this.sc.isShow || !this.dungeon) {
          this.actionCount = 0;
          return;
        }
        this.changeZIndex();
        var isHalf = this.data.currentHealth < this.data.Common.maxHealth / 2;
        this.dungeon && Logic_1.default.getChance(90) && this.fireMainGun();
        var playerDis = this.getNearPlayerDistance(this.dungeon.player.node);
        playerDis < 300 ? this.fireMissile(isHalf) : Logic_1.default.getChance(20) && this.fireMissile(isHalf);
        this.fireGatling(isHalf);
        if (isHalf) {
          this.actionCount++;
          var pos_1 = cc.v3(1, 0);
          if (this.actionCount > 10) {
            cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
              detail: {
                name: AudioPlayer_1.default.MELEE
              }
            });
            pos_1 = cc.v3(-1, 0);
          }
          if (this.actionCount > 20) {
            cc.director.emit(EventHelper_1.EventHelper.PLAY_AUDIO, {
              detail: {
                name: AudioPlayer_1.default.MELEE
              }
            });
            this.actionCount = 0;
          }
          if (!pos_1.equals(cc.Vec3.ZERO)) {
            pos_1 = pos_1.normalizeSelf();
            this.move(pos_1, 600);
          }
        }
        this.shooter01.setHv(cc.v3(0, -1));
        var pos = this.node.position.clone().add(this.shooter01.node.position);
        var hv = this.dungeon.player.getCenterPosition().sub(pos);
        if (!hv.equals(cc.Vec3.ZERO)) {
          hv = hv.normalizeSelf();
          this.shooter01.setHv(hv);
        }
      };
      WarMachine.prototype.initGuns = function() {
        this.isMainGunCoolDown = false;
        this.isGatlingCoolDown = false;
        this.isMissileCoolDown = false;
        this.shooter01.setHv(cc.v3(0, -1));
        this.shooter02.setHv(cc.v3(0, -1));
        this.shooter03.setHv(cc.v3(0, -1));
        this.shooter04.setHv(cc.v3(0, -1));
        this.shooter05.setHv(cc.v3(0, -1));
        var pos = this.node.position.clone().add(this.shooter01.node.position);
        var hv = this.dungeon.player.getCenterPosition().sub(pos);
        if (!hv.equals(cc.Vec3.ZERO)) {
          hv = hv.normalizeSelf();
          this.shooter01.setHv(hv);
        }
      };
      WarMachine.prototype.fireMainGun = function() {
        var _this = this;
        if (this.isMainGunCoolDown) return;
        this.isMainGunCoolDown = true;
        this.anim.play("WarMachineMainGunShoot");
        this.scheduleOnce(function() {
          _this.isMainGunCoolDown = false;
        }, 5);
      };
      WarMachine.prototype.MainGunShootFinish = function() {
        this.shooter01.setHv(cc.v3(0, -1));
        var pos = this.node.position.clone().add(this.shooter01.node.position);
        var hv = this.dungeon.player.getCenterPosition().sub(pos);
        if (!hv.equals(cc.Vec3.ZERO)) {
          hv = hv.normalizeSelf();
          this.shooter01.setHv(hv);
          this.fireShooter(this.shooter01, "bullet016", 0, 0, 0, cc.v3(48, 0));
        }
        this.anim.play("WarMachineIdle");
      };
      WarMachine.prototype.fireGatling = function(isHalf) {
        var _this = this;
        if (this.isGatlingCoolDown) return;
        this.isGatlingCoolDown = true;
        this.shooter02.setHv(cc.v3(0, -1));
        this.shooter03.setHv(cc.v3(0, -1));
        this.shooter02.data.bulletLineInterval = .5;
        this.shooter03.data.bulletLineInterval = .5;
        var cooldown = 6;
        var angle = Logic_1.default.getRandomNum(0, 15);
        angle = Logic_1.default.getHalfChance() ? angle : -angle;
        if (isHalf) {
          this.fireShooter(this.shooter02, "bullet111", 0, 4);
          this.fireShooter(this.shooter03, "bullet111", 0, 4);
          cooldown = 3;
        } else {
          this.fireShooter(this.shooter02, "bullet111", 2, 2);
          this.fireShooter(this.shooter03, "bullet111", 2, 2);
        }
        this.scheduleOnce(function() {
          _this.isGatlingCoolDown = false;
        }, cooldown);
      };
      WarMachine.prototype.fireMissile = function(isHalf) {
        var _this = this;
        if (this.isMissileCoolDown) return;
        this.isMissileCoolDown = true;
        this.shooter04.setHv(cc.v3(0, -1));
        this.shooter05.setHv(cc.v3(0, -1));
        this.shooter04.data.bulletLineInterval = .5;
        this.shooter05.data.bulletLineInterval = .5;
        this.fireShooter(this.shooter04, "bullet015", 2, isHalf ? 1 : 0);
        this.fireShooter(this.shooter05, "bullet015", 2, isHalf ? 1 : 0);
        this.scheduleOnce(function() {
          _this.isMissileCoolDown = false;
        }, isHalf ? 4 : 8);
      };
      WarMachine.prototype.fireShooter = function(shooter, bulletType, bulletArcExNum, bulletLineExNum, angle, defaultPos) {
        shooter.dungeon = this.dungeon;
        shooter.data.bulletType = bulletType;
        shooter.data.bulletArcExNum = bulletArcExNum;
        shooter.data.bulletLineExNum = bulletLineExNum;
        shooter.fireBullet(angle, defaultPos);
      };
      WarMachine.prototype.showBoss = function() {
        this.initGuns();
        this.sc.isShow = true;
        if (this.healthBar) {
          this.healthBar.refreshHealth(this.data.currentHealth, this.data.Common.maxHealth);
          this.healthBar.node.active = !this.sc.isDied;
        }
      };
      WarMachine.prototype.isActionTimeDelay = function(dt) {
        this.actionTimeDelay += dt;
        if (this.actionTimeDelay > .2) {
          this.actionTimeDelay = 0;
          return true;
        }
        return false;
      };
      WarMachine.prototype.updateLogic = function(dt) {
        this.timeDelay += dt;
        this.timeDelay > 1 && (this.timeDelay = 0);
        this.isActionTimeDelay(dt) && this.bossAction();
        this.data.currentHealth < 1 && this.killed();
        this.healthBar.node.active = !this.sc.isDied;
      };
      WarMachine.prototype.move = function(pos, speed) {
        if (this.sc.isDied) return;
        pos.equals(cc.Vec3.ZERO) || (this.pos = Dungeon_1.default.getIndexInMap(this.node.position));
        var h = pos.x;
        var v = pos.y;
        var absh = Math.abs(h);
        var absv = Math.abs(v);
        var movement = cc.v2(h, v);
        movement = movement.mul(speed);
        this.rigidbody.linearVelocity = movement;
        this.isMoving = 0 != h || 0 != v;
        this.changeZIndex();
      };
      WarMachine.prototype.onCollisionEnter = function(other, self) {
        var target = ActorUtils_1.default.getEnemyCollisionTarget(other);
        if (target && !this.sc.isDied) {
          var d = new DamageData_1.default();
          d.physicalDamage = 5;
          target.takeDamage(d, FromData_1.default.getClone(this.actorName(), "bossmachinehead"), this);
        }
      };
      WarMachine.prototype.actorName = function() {
        return "\u6218\u4e89\u673a\u5668";
      };
      __decorate([ property(cc.Label) ], WarMachine.prototype, "label", void 0);
      __decorate([ property ], WarMachine.prototype, "text", void 0);
      WarMachine = __decorate([ ccclass ], WarMachine);
      return WarMachine;
    }(Boss_1.default);
    exports.default = WarMachine;
    cc._RF.pop();
  }, {
    "../Achievement": "Achievement",
    "../Data/DamageData": "DamageData",
    "../Data/FromData": "FromData",
    "../Dungeon": "Dungeon",
    "../EventHelper": "EventHelper",
    "../Logic": "Logic",
    "../Manager/StatusManager": "StatusManager",
    "../Shooter": "Shooter",
    "../Utils/ActorUtils": "ActorUtils",
    "../Utils/AudioPlayer": "AudioPlayer",
    "./Boss": "Boss"
  } ],
  WordManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c333CGNPJP0ov5KegA/Xzf", "WordManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var WordManager = function() {
      function WordManager() {}
      return WordManager;
    }();
    exports.default = WordManager;
    cc._RF.pop();
  }, {} ],
  WorldLoader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1da44Z4XqpEhJs0KUhYRpQR", "WorldLoader");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChapterData_1 = require("../Data/ChapterData");
    var LevelData_1 = require("../Data/LevelData");
    var Logic_1 = require("../Logic");
    var WorldLoader = function() {
      function WorldLoader() {
        this.worldMap = [];
        this.realWorldMap = new ChapterData_1.default(99);
        this.isloaded = false;
        this.isloaded00 = false;
        this.isloaded01 = false;
        this.isloaded02 = false;
        this.isloaded03 = false;
        this.isloaded04 = false;
        this.isloaded05 = false;
        this.isloaded99 = false;
        this.isloaded = false;
      }
      WorldLoader.prototype.loadWorld = function() {
        if (this.worldMap.length > 0) {
          this.isloaded = true;
          return;
        }
        this.worldMap = new Array();
        for (var i = 0; i < 6; i++) {
          var chapter = new ChapterData_1.default(i);
          this.worldMap.push(chapter);
        }
        this.loadTileSets();
      };
      WorldLoader.prototype.loadTileSets = function() {
        var _this = this;
        cc.resources.load("Data/world/tilesets", function(err, resource) {
          if (err) cc.error(err); else {
            cc.log("tilesets loaded");
            var tilesets = {};
            for (var _i = 0, _a = resource.json.tiles; _i < _a.length; _i++) {
              var value = _a[_i];
              tilesets[value.id] = value.type;
            }
            _this.loadTiledMaps(tilesets);
          }
        });
      };
      WorldLoader.prototype.loadTiledMaps = function(tilesets) {
        var _this = this;
        cc.resources.loadDir("Data/world/tiledmap", cc.JsonAsset, function(err, assert) {
          for (var _i = 0, assert_1 = assert; _i < assert_1.length; _i++) {
            var tiledmap = assert_1[_i];
            var arr = tiledmap.name.split("_");
            var chapter = parseInt(arr[1]);
            var data = 99 == chapter ? _this.realWorldMap : _this.worldMap[chapter];
            var temp = tiledmap.json.layers[0].properties;
            if (!temp.width) {
              temp = new LevelData_1.default();
              var tarr = tiledmap.json.layers[0].properties;
              for (var _a = 0, tarr_1 = tarr; _a < tarr_1.length; _a++) {
                var ld = tarr_1[_a];
                ld.name && (temp[ld.name] = ld.value);
              }
            }
            var map = new Array();
            var rooms = new Array();
            var w = temp.width * temp.roomWidth;
            var h = temp.height * temp.roomHeight;
            for (var i = 0; i < h; i++) {
              map[i] = new Array();
              rooms[i] = new Array();
              for (var j = 0; j < w; j++) {
                var value1 = tiledmap.json.layers[0].data[i * w + j];
                map[i][j] = tilesets[value1 - 1];
                var value2 = tiledmap.json.layers[1].data[i * w + j];
                rooms[i][j] = tilesets[value2 - 1];
              }
            }
            var turnMap = new Array();
            var turnRooms = new Array();
            for (var i = 0; i < map[0].length; i++) {
              turnMap[i] = new Array();
              turnRooms[i] = new Array();
              for (var j = 0; j < map.length; j++) {
                turnMap[i][map.length - 1 - j] = map[j][i];
                turnRooms[i][rooms.length - 1 - j] = rooms[j][i];
              }
            }
            temp.map = turnMap;
            var flagMap = new Array();
            var miniMap = new Array();
            var miniLockMap = new Array();
            for (var i = 0; i < temp.width; i++) {
              flagMap[i] = new Array();
              miniMap[i] = new Array();
              miniLockMap[i] = new Array();
              for (var j = 0; j < temp.height; j++) {
                flagMap[i][j] = turnRooms[i * temp.roomWidth][j * temp.roomHeight];
                miniMap[i][j] = turnRooms[i * temp.roomWidth + 1][j * temp.roomHeight];
                miniLockMap[i][j] = turnRooms[i * temp.roomWidth + 2][j * temp.roomHeight];
              }
            }
            temp.roomTypes = flagMap;
            temp.minimap = miniMap;
            temp.minimaplock = miniLockMap;
            var level = new LevelData_1.default();
            level.valueCopy(temp);
            data.list.push(level);
          }
          _this.realWorldMap.list.sort(function(a, b) {
            return a.index - b.index;
          });
          for (var _b = 0, _c = _this.worldMap; _b < _c.length; _b++) {
            var c = _c[_b];
            c.list.sort(function(a, b) {
              return a.index - b.index;
            });
          }
          _this.isloaded = true;
          cc.log("world loaded");
        });
      };
      WorldLoader.prototype.getChapterLength = function() {
        return this.worldMap.length;
      };
      WorldLoader.prototype.getChapterData = function(chapterIndex) {
        if (chapterIndex >= 99) return this.realWorldMap;
        return this.worldMap[chapterIndex];
      };
      WorldLoader.prototype.getLevelList = function(chapterIndex) {
        return this.getChapterData(chapterIndex).list;
      };
      WorldLoader.prototype.getLevelData = function(chapterIndex, levelIndex) {
        var levelList = this.getLevelList(chapterIndex);
        if (levelList.length < 1) return null;
        levelList[levelIndex].chapter = chapterIndex;
        return levelList[levelIndex];
      };
      WorldLoader.prototype.getCurrentLevelData = function() {
        return this.getLevelData(Logic_1.default.chapterIndex, Logic_1.default.level);
      };
      return WorldLoader;
    }();
    exports.default = WorldLoader;
    cc._RF.pop();
  }, {
    "../Data/ChapterData": "ChapterData",
    "../Data/LevelData": "LevelData",
    "../Logic": "Logic"
  } ],
  WxHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4e113prls5Op7r/tgtPErZz", "WxHelper");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logic_1 = require("./Logic");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WxHelper = function(_super) {
      __extends(WxHelper, _super);
      function WxHelper() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.wx = window["wx"];
        _this.user = null;
        _this.startButtonNode = null;
        _this.rankList = null;
        _this.rankListOpen = false;
        return _this;
      }
      WxHelper.prototype.start = function() {
        if (this.rankList) {
          this.CloseDialog();
          this.rankList.node.active = this.rankListOpen;
        }
        if (!this.wx) return;
        if (!this.startButtonNode) {
          this.saveRankData();
          return;
        }
        var btnSize = cc.size(this.startButtonNode.width + 10, this.startButtonNode.height + 10);
        var frameSize = cc.view.getFrameSize();
        var winSize = cc.director.getWinSize();
        var left = (.5 * winSize.width + this.startButtonNode.x - .5 * btnSize.width) / winSize.width * frameSize.width;
        var top = (.5 * winSize.height - this.startButtonNode.y - .5 * btnSize.height) / winSize.height * frameSize.height;
        var width = btnSize.width / winSize.width * frameSize.width;
        var height = btnSize.height / winSize.height * frameSize.height;
        var button = this.wx.createUserInfoButton({
          type: "text",
          text: "",
          style: {
            left: left,
            top: top,
            width: width,
            height: height,
            lineHeight: 0,
            backgroundColor: "",
            color: "#000000",
            textAlign: "center",
            fontSize: 10,
            borderRadius: 3
          }
        });
        var that = this;
        var userInfo = null;
        button.onTap(function(res) {
          if (userInfo) {
            button.hide();
            return;
          }
          switch (res.errMsg) {
           case "getUserInfo:ok":
            button.hide();
            cc.sys.localStorage.setItem("hasUserInfo", "1");
            userInfo = res.userInfo;
            var nickName = userInfo.nickName;
            var avatarUrl = userInfo.avatarUrl;
            that.setUserConfig(nickName, avatarUrl);
            that.wx.getOpenDataContext().postMessage({
              message: "User info get success."
            });

           default:
            console.error(res.errMsg);
          }
        });
        var hasUserInfo = cc.sys.localStorage.getItem("hasUserInfo");
        "1" == hasUserInfo && button.hide();
      };
      WxHelper.prototype.setUserConfig = function(nickName, avatarUrl) {
        if (!this.user) return;
        var userAvatarSprite = this.user.getChildByName("mask").getComponentInChildren(cc.Sprite);
        var nickNameLabel = this.user.getChildByName("userName").getComponent(cc.Label);
        nickNameLabel.string = nickName;
        cc.loader.load({
          url: avatarUrl,
          type: "png"
        }, function(err, texture) {
          err && console.error(err);
          userAvatarSprite.spriteFrame = new cc.SpriteFrame(texture);
        });
      };
      WxHelper.prototype.CloseDialog = function() {
        if (this.wx && this.node && this.rankList && this.rankList.node) {
          this.rankList.node.active = false;
          var openDataContext = this.wx.getOpenDataContext();
          openDataContext.postMessage({
            message: "close"
          });
        }
      };
      WxHelper.prototype.OpenDialog = function() {
        if (this.wx && this.rankList) {
          this.rankList.node.active = true;
          this.saveRankData();
        }
      };
      WxHelper.prototype.saveRankData = function() {
        if (!this.wx) {
          console.log("wx is empty");
          return;
        }
        var that = this;
        that.wx.setUserCloudStorage({
          KVDataList: [ {
            key: "score",
            value: Logic_1.default.coins + ""
          } ],
          success: function(res) {
            console.log("score" + Logic_1.default.coins);
            console.log(res);
            var openDataContext = that.wx.getOpenDataContext();
            openDataContext.postMessage({
              message: "updateMaxScore"
            });
          },
          fail: function(res) {
            console.log("failed" + Logic_1.default.coins);
            console.log(res);
          }
        });
      };
      __decorate([ property(cc.Node) ], WxHelper.prototype, "user", void 0);
      __decorate([ property(cc.Node) ], WxHelper.prototype, "startButtonNode", void 0);
      __decorate([ property(cc.WXSubContextView) ], WxHelper.prototype, "rankList", void 0);
      __decorate([ property ], WxHelper.prototype, "rankListOpen", void 0);
      WxHelper = __decorate([ ccclass ], WxHelper);
      return WxHelper;
    }(cc.Component);
    exports.default = WxHelper;
    cc._RF.pop();
  }, {
    "./Logic": "Logic"
  } ],
  use_reversed_rotateBy: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "20f25G5HaZKk4Y2GuqawsGN", "use_reversed_rotateBy");
    "use strict";
    cc.RotateBy._reverse = true;
    cc._RF.pop();
  }, {} ]
}, {}, [ "Achievement", "ActorAttackBox", "AreaDetector", "AreaOfEffect", "ColliderTag", "NonPlayerActorState", "ShadowPlayer", "Actor", "BaseNonPlayerActorState", "StateContext", "DefaultStateMachine", "FsmEvent", "StackStateMachine", "State", "StateMachine", "Boss", "BossAttackCollider", "Captain", "CaptainSword", "Dragon", "Dryad", "DryadGrass", "EvilEye", "IceDemon", "IceDemonThron", "Kraken", "KrakenSwingHand", "Rah", "Slime", "SlimeVenom", "Sphinx", "WarMachine", "AirExit", "Box", "Building", "CampFire", "Chest", "DecorationFloor", "Door", "Emplacement", "EnergyShield", "ExitDoor", "FallStone", "FootBoard", "Furniture", "HitBuilding", "InteractBuilding", "LightBuilding", "MagicLightening", "MartCashier", "MartShelves", "MgCrack", "MgWentLine", "MonsterGenerator", "MushRoomChild", "Portal", "RoomBed", "RoomFishtank", "RoomStool", "RoomTv", "SavePoint", "Saw", "ShopMart", "ShopTable", "TarotTable", "Trap", "Wall", "CameraControl", "Chapter", "CoinCount", "ColliderManager", "CustomCollider", "Controller", "AchievementData", "AreaOfEffectData", "AttributeData", "AvatarData", "BaseData", "BuildingData", "BulletData", "CellphoneData", "ChapterData", "ChunkData", "CommonData", "DamageData", "DungeonStyleData", "EquipmentData", "EquipmentDescData", "EquipmentStringData", "ExitData", "FromData", "FurnitureData", "GoodsData", "GroundOilGoldData", "InventoryData", "ItemData", "LevelData", "LightPointData", "MapData", "MapManagerData", "NonPlayerData", "OilGoldData", "PlayerData", "ProfessionData", "ProfileData", "SavePointData", "StatusData", "SuitData", "TalentData", "TarotData", "Dungeon", "BlockLight", "Light", "ShadowOfSight", "Equipment", "EventHelper", "Game", "GameFinish", "GameOver", "HealthBar", "Inventory", "Bullet", "Coin", "DashShadow", "Goods", "Item", "OilGold", "TarotCard", "JoyController", "Joystick", "KeyboardController", "Loading", "Logic", "BaseManager", "BuildingManager", "DungeonStyleManager", "EquipmentManager", "FloatingLabelManager", "InventoryManager", "ItemManager", "LightManager", "LoadingManager", "MapManager", "MonsterManager", "MonsterRandomAttr", "NonPlayerManager", "ProfileManager", "SpecialManager", "StatusManager", "TarotManager", "WordManager", "Chunk", "ChunkLookCamera", "ChunkWorld", "Seeker", "WorldLoader", "MeleeShadowWeapon", "MeleeWeapon", "MeleeWeaponChild", "MiniMap", "Settings", "NonPlayer", "OilGoldCount", "OilLake", "PerlinNoise2D", "Player", "PlayerAvatar", "PlayerWeapon", "RectDoor", "RectDungeon", "RectRoom", "RoomType", "Shield", "Shooter", "Start", "Status", "StatusConditionType", "StatusEventType", "FireGhost", "IceThron", "MagicCircle", "MagicIce", "OrganizationTalent", "ProfessionTalent", "Talent", "TalentDash", "TalentMagic", "TalentShield", "Test", "Tile", "AchievementItem", "AttributeSelector", "BrightnessBar", "Cellphone", "CellphoneItem", "CoolDownView", "CutScene", "FloatingLabel", "GameHud", "InventoryItem", "PaletteSelector", "ParallaxBackground", "PickAvatar", "PlayerInfoDialog", "TestFog", "Tips", "Toast", "AchievementItemDialog", "BaseDialog", "CellphoneDialog", "EquipmentAndItemDialog", "InventoryDialog", "MartShelvesDialog", "SettingsDialog", "ActorUtils", "AudioPlayer", "IndexZ", "LocalStorage", "NextStep", "NodeKey", "Random", "Random4Save", "Utils", "WalkSmoke", "WxHelper", "use_reversed_rotateBy" ]);