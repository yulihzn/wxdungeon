{
  "ver": "1.0.27",
  "uuid": "0c14da70-a8a2-4ef5-80de-79da11e28e63",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nattribute vec3 tangent;\nvarying vec3 lightVec;\nvarying vec3 halfVec;\nvarying vec3 eyeVec;\nvoid main () {\n  gl_TexCoord[0] =  gl_MultiTexCoord0;\n  vec3 n = normalize (gl_NormalMatrix * gl_Normal);\n  vec3 t = normalize (gl_NormalMatrix * tangent);\n  vec3 b = cross (n, t);\n  vec3 vertexPosition = vec3(gl_ModelViewMatrix *  gl_Vertex);\n  vec3 lightDir = normalize(gl_LightSource[0].position.xyz - vertexPosition);\n  vec3 v;\n  v.x = dot (lightDir, t);\n  v.y = dot (lightDir, b);\n  v.z = dot (lightDir, n);\n  lightVec = normalize (v);\n  v.x = dot (vertexPosition, t);\n  v.y = dot (vertexPosition, b);\n  v.z = dot (vertexPosition, n);\n  eyeVec = normalize (v);\n  vertexPosition = normalize(vertexPosition);\n  vec3 halfVector = normalize(vertexPosition + lightDir);\n  v.x = dot (halfVector, t);\n  v.y = dot (halfVector, b);\n  v.z = dot (halfVector, n);\n  halfVec = v ;\n  gl_Position = ftransform();\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform sampler2D diffuseTexture;\nuniform sampler2D normalTexture;\nvarying vec3 lightVec;\nvarying vec3 halfVec;\nvarying vec3 eyeVec;\nvoid main () {\n  vec3 normal = 2.0 * texture2D (normalTexture, gl_TexCoord[0].st).rgb - 1.0;\n  normal = normalize (normal);\n  float lamberFactor= max (dot (lightVec, normal), 0.0) ;\n  vec4 diffuseMaterial = 0.0;\n  vec4 diffuseLight  = 0.0;\n  vec4 specularMaterial ;\n  vec4 specularLight ;\n  float shininess ;\n  vec4 ambientLight = gl_LightSource[0].ambient;\n  if (lamberFactor > 0.0){\n    diffuseMaterial = texture2D (diffuseTexture, gl_TexCoord[0].st);\n    diffuseLight  = gl_LightSource[0].diffuse;\n    specularMaterial =  vec4(1.0)  ;\n    specularLight = gl_LightSource[0].specular;\n    shininess = pow (max (dot (halfVec, normal), 0.0), 2.0)  ;\n    gl_FragColor =  diffuseMaterial * diffuseLight * lamberFactor ;\n    gl_FragColor +=  specularMaterial * specularLight * shininess ;\n    }\n    gl_FragColor +=  ambientLight;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nattribute vec3 tangent;\nvarying vec3 lightVec;\nvarying vec3 halfVec;\nvarying vec3 eyeVec;\nvoid main () {\n  gl_TexCoord[0] =  gl_MultiTexCoord0;\n  vec3 n = normalize (gl_NormalMatrix * gl_Normal);\n  vec3 t = normalize (gl_NormalMatrix * tangent);\n  vec3 b = cross (n, t);\n  vec3 vertexPosition = vec3(gl_ModelViewMatrix *  gl_Vertex);\n  vec3 lightDir = normalize(gl_LightSource[0].position.xyz - vertexPosition);\n  vec3 v;\n  v.x = dot (lightDir, t);\n  v.y = dot (lightDir, b);\n  v.z = dot (lightDir, n);\n  lightVec = normalize (v);\n  v.x = dot (vertexPosition, t);\n  v.y = dot (vertexPosition, b);\n  v.z = dot (vertexPosition, n);\n  eyeVec = normalize (v);\n  vertexPosition = normalize(vertexPosition);\n  vec3 halfVector = normalize(vertexPosition + lightDir);\n  v.x = dot (halfVector, t);\n  v.y = dot (halfVector, b);\n  v.z = dot (halfVector, n);\n  halfVec = v ;\n  gl_Position = ftransform();\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform sampler2D diffuseTexture;\nuniform sampler2D normalTexture;\nvarying vec3 lightVec;\nvarying vec3 halfVec;\nvarying vec3 eyeVec;\nvoid main () {\n  vec3 normal = 2.0 * texture2D (normalTexture, gl_TexCoord[0].st).rgb - 1.0;\n  normal = normalize (normal);\n  float lamberFactor= max (dot (lightVec, normal), 0.0) ;\n  vec4 diffuseMaterial = 0.0;\n  vec4 diffuseLight  = 0.0;\n  vec4 specularMaterial ;\n  vec4 specularLight ;\n  float shininess ;\n  vec4 ambientLight = gl_LightSource[0].ambient;\n  if (lamberFactor > 0.0){\n    diffuseMaterial = texture2D (diffuseTexture, gl_TexCoord[0].st);\n    diffuseLight  = gl_LightSource[0].diffuse;\n    specularMaterial =  vec4(1.0)  ;\n    specularLight = gl_LightSource[0].specular;\n    shininess = pow (max (dot (halfVec, normal), 0.0), 2.0)  ;\n    gl_FragColor =  diffuseMaterial * diffuseLight * lamberFactor ;\n    gl_FragColor +=  specularMaterial * specularLight * shininess ;\n    }\n    gl_FragColor +=  ambientLight;\n}"
      }
    }
  ],
  "subMetas": {}
}