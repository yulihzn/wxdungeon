{
  "ver": "1.0.25",
  "uuid": "2b7a6d8a-40a0-4090-a9cb-81e825a93b03",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform vec2 size;\n  const float RADIUS = 20.0;\n  vec4 blur13(sampler2D image, vec2 uv) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353);\n  vec2 off2 = vec2(3.2941176470588234);\n  vec2 off3 = vec2(5.176470588235294);\n  color += texture2D(image, uv) * 0.1964825501511404;\n  color += texture2D(image, uv + (off1 / size)) * 0.2969069646728344;\n  color += texture2D(image, uv - (off1 / size)) * 0.2969069646728344;\n  color += texture2D(image, uv + (off2 / size)) * 0.09447039785044732;\n  color += texture2D(image, uv - (off2 / size)) * 0.09447039785044732;\n  color += texture2D(image, uv + (off3 / size)) * 0.010381362401148057;\n  color += texture2D(image, uv - (off3 / size)) * 0.010381362401148057;\n  return color;\n}\n  void main () {\n    vec4 color = v_color*blur13(texture,v_uv0);\n    color.a = v_color.a;\n    ALPHA_TEST(color);\n    gl_FragColor = color;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform Properties {\n    vec2 size;\n  };\n  const float RADIUS = 20.0;\n  vec4 blur13(sampler2D image, vec2 uv) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353);\n  vec2 off2 = vec2(3.2941176470588234);\n  vec2 off3 = vec2(5.176470588235294);\n  color += texture2D(image, uv) * 0.1964825501511404;\n  color += texture2D(image, uv + (off1 / size)) * 0.2969069646728344;\n  color += texture2D(image, uv - (off1 / size)) * 0.2969069646728344;\n  color += texture2D(image, uv + (off2 / size)) * 0.09447039785044732;\n  color += texture2D(image, uv - (off2 / size)) * 0.09447039785044732;\n  color += texture2D(image, uv + (off3 / size)) * 0.010381362401148057;\n  color += texture2D(image, uv - (off3 / size)) * 0.010381362401148057;\n  return color;\n}\n  void main () {\n    vec4 color = v_color*blur13(texture,v_uv0);\n    color.a = v_color.a;\n    ALPHA_TEST(color);\n    gl_FragColor = color;\n  }"
      }
    }
  ],
  "subMetas": {}
}