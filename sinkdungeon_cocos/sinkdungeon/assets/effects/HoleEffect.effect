// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.7 }
        size: { value: [320.0, 180.0], editor: { tooltip: '节点尺寸' } }
        lightColor: { value: [0.0, 0.0, 0.1, 0.1], inspector: { type: color } }
        soft: {value: 0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif
  
  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  uniform Properties {
    vec4 lightColor;
    vec2 size;
    int soft;
  };

  
  
  float getA(vec2 pos){
    vec4 color = texture2D(texture, pos);
    // float a = 0.0;
    // if(color.r == 1.0&&color.g == 1.0&&color.b == 1.0){
    //   a = 0.0;
    // }else{
    //   a = 1.0;
    // }
    //背景色为白色透明度为1 绘制的颜色为黑色透明度为0
    return step(1.0, color.r * color.g * color.b);
  }
  vec4 getC(vec2 pos){
    vec4 color = texture2D(texture, pos);
    //透明直接返回阴影色， 否则返回透明
    if(color.a == 0.){
      return lightColor;
    }else {
      return vec4(0.,0.,0.,0.);
    }
  }
  // 模糊半径
  // for 循环的次数必须为常量
  const float RADIUS = 3.0;
  vec4 getBlurColor (vec2 pos) {
    vec4 color = vec4(0);
    float sum = 0.0; // 总权重
    // 卷积过程
    for (float r = -RADIUS; r <= RADIUS; r++) { // 水平方向
      for (float c = -RADIUS; c <= RADIUS; c++) { // 垂直方向
        vec2 target = pos + vec2(r / size.x, c / size.y); // 目标像素位置
        float weight = (RADIUS - abs(r)) * (RADIUS - abs(c)); // 计算权重
        color += getC(target)*weight;// 累加颜色
        sum += weight; // 累加权重
      }
    }
    color /= sum; // 求出平均值
    return color;
  }
  vec4 blur13color(vec2 pos){
    vec4 color = vec4(0.0);
    vec2 off1 = vec2(1.411764705882353);
    vec2 off2 = vec2(3.2941176470588234);
    vec2 off3 = vec2(5.176470588235294);
    vec2 off4 = vec2(-1.411764705882353,1.411764705882353);
    vec2 off5 = vec2(-3.2941176470588234,3.2941176470588234);
    vec2 off6 = vec2(-5.176470588235294,5.176470588235294);
    color += getC(pos) * 0.1964825501511404;
    color += getC(pos + (off1 / size)) * 0.1484534823364172;
    color += getC(pos - (off1 / size)) * 0.1484534823364172;
    color += getC(pos + (off2 / size)) * 0.04723519892522366;
    color += getC(pos - (off2 / size)) * 0.04723519892522366;
    color += getC(pos + (off3 / size)) * 0.00519068120057402;
    color += getC(pos - (off3 / size)) * 0.00519068120057402;
    color += getC(pos + (off4 / size)) * 0.1484534823364172;
    color += getC(pos - (off4 / size)) * 0.1484534823364172;
    color += getC(pos + (off5 / size)) * 0.04723519892522366;
    color += getC(pos - (off5 / size)) * 0.04723519892522366;
    color += getC(pos + (off6 / size)) * 0.00519068120057402;
    color += getC(pos - (off6 / size)) * 0.00519068120057402;
    return color;
  }
  float blur13(vec2 pos){
    float alpha = 0.0;
    vec2 off1 = vec2(1.411764705882353);
    vec2 off2 = vec2(3.2941176470588234);
    vec2 off3 = vec2(5.176470588235294);
    vec2 off4 = vec2(-1.411764705882353,1.411764705882353);
    vec2 off5 = vec2(-3.2941176470588234,3.2941176470588234);
    vec2 off6 = vec2(-5.176470588235294,5.176470588235294);
    alpha += getA(pos) * 0.1964825501511404;
    alpha += getA(pos + (off1 / size)) * 0.1484534823364172;
    alpha += getA(pos - (off1 / size)) * 0.1484534823364172;
    alpha += getA(pos + (off2 / size)) * 0.04723519892522366;
    alpha += getA(pos - (off2 / size)) * 0.04723519892522366;
    alpha += getA(pos + (off3 / size)) * 0.00519068120057402;
    alpha += getA(pos - (off3 / size)) * 0.00519068120057402;
    alpha += getA(pos + (off4 / size)) * 0.1484534823364172;
    alpha += getA(pos - (off4 / size)) * 0.1484534823364172;
    alpha += getA(pos + (off5 / size)) * 0.04723519892522366;
    alpha += getA(pos - (off5 / size)) * 0.04723519892522366;
    alpha += getA(pos + (off6 / size)) * 0.00519068120057402;
    alpha += getA(pos - (off6 / size)) * 0.00519068120057402;
    return alpha;
  }

  void main () {
    vec4 o;
    if(soft == 1){
      o = getBlurColor(v_uv0);
    }else{
      o = blur13color(v_uv0);
    }
    ALPHA_TEST(o);
    gl_FragColor = o;
  }
}%
