{
  "ver": "1.0.25",
  "uuid": "7bd9b61a-13ed-4a78-a8eb-bf943619acce",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 size;\nconst float RADIUS = 20.0;\nfloat getA(vec2 pos){\n  vec4 color = texture2D(texture, pos);\n  float a = 0.0;\n  if(color.r == 1.0&&color.g == 1.0&&color.b == 1.0){\n    a = 0.0;\n  }else{\n    a = 1.0;\n  }\n  return a;\n}\nfloat blur13(vec2 pos){\n  float alpha = 0.0;\n  vec2 off1 = vec2(1.411764705882353);\n  vec2 off2 = vec2(3.2941176470588234);\n  vec2 off3 = vec2(5.176470588235294);\n  alpha += getA(pos) * 0.1964825501511404;\n  alpha += getA(pos + (off1 / size)) * 0.2969069646728344;\n  alpha += getA(pos - (off1 / size)) * 0.2969069646728344;\n  alpha += getA(pos + (off2 / size)) * 0.09447039785044732;\n  alpha += getA(pos - (off2 / size)) * 0.09447039785044732;\n  alpha += getA(pos + (off3 / size)) * 0.010381362401148057;\n  alpha += getA(pos - (off3 / size)) * 0.010381362401148057;\n  return alpha;\n}\nvoid main () {\n  vec4 o = vec4(0.0, 0.0, 0.0, 0.7);\n  o.a = o.a*blur13(v_uv0);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 size;\n};\nconst float RADIUS = 20.0;\nfloat getA(vec2 pos){\n  vec4 color = texture2D(texture, pos);\n  float a = 0.0;\n  if(color.r == 1.0&&color.g == 1.0&&color.b == 1.0){\n    a = 0.0;\n  }else{\n    a = 1.0;\n  }\n  return a;\n}\nfloat blur13(vec2 pos){\n  float alpha = 0.0;\n  vec2 off1 = vec2(1.411764705882353);\n  vec2 off2 = vec2(3.2941176470588234);\n  vec2 off3 = vec2(5.176470588235294);\n  alpha += getA(pos) * 0.1964825501511404;\n  alpha += getA(pos + (off1 / size)) * 0.2969069646728344;\n  alpha += getA(pos - (off1 / size)) * 0.2969069646728344;\n  alpha += getA(pos + (off2 / size)) * 0.09447039785044732;\n  alpha += getA(pos - (off2 / size)) * 0.09447039785044732;\n  alpha += getA(pos + (off3 / size)) * 0.010381362401148057;\n  alpha += getA(pos - (off3 / size)) * 0.010381362401148057;\n  return alpha;\n}\nvoid main () {\n  vec4 o = vec4(0.0, 0.0, 0.0, 0.7);\n  o.a = o.a*blur13(v_uv0);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}