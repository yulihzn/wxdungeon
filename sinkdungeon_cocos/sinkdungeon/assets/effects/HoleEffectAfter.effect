// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.7 }
        size: { value: [160.0, 90.0], editor: { tooltip: '节点尺寸' } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif
  
  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  uniform Properties {
    vec2 size;
  };

  vec4 getC(vec2 pos){
    return texture2D(texture, pos);
  }

  vec4 blur13color(vec2 pos, vec2 direction){
    vec4 color = vec4(0.0);
    vec2 off1 = vec2(1.411764705882353) * direction;
    vec2 off2 = vec2(3.2941176470588234) * direction;
    vec2 off3 = vec2(5.176470588235294) * direction;
    color += getC(pos) * 0.1964825501511404;
    color += getC(pos + (off1 / size)) * 0.2969069646728344;
    color += getC(pos - (off1 / size)) * 0.2969069646728344;
    color += getC(pos + (off2 / size)) * 0.09447039785044732;
    color += getC(pos - (off2 / size)) * 0.09447039785044732;
    color += getC(pos + (off3 / size)) * 0.010381362401148057;
    color += getC(pos - (off3 / size)) * 0.010381362401148057;
    return color;
  }

  void main () {
    vec4 o = blur13color(v_uv0,vec2(0.0,1.0));
    // vec4 o = getC(v_uv0);
    ALPHA_TEST(o);
    gl_FragColor = o;
  }
}%
