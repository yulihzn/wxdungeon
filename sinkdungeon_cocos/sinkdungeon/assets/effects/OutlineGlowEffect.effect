// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        outlineSize: {value: 20}
        openOutline: {value: 1.0}
        textureSizeWidth: {value: 1}
        textureSizeHeight: {value: 1}
        outlineColor: {value: [0,0,0,0], inspector: { type: color } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  uniform OutLine{
    vec4 outlineColor;
    float outlineSize;
    float textureSizeWidth;
    float textureSizeHeight;
    float openOutline;
  };
  // 判断在这个角度上距离为outlineSize那一点是不是透明
  float getIsStrokeWithAngel(float angel)
  {
    float stroke = 0.0;
    vec2 textureSize = vec2(textureSizeWidth,textureSizeHeight);
    float rad = angel * 0.01745329252; // 这个浮点数是 pi / 180，角度转弧度
    vec2 unit = 1.0 / textureSize.xy;//单位坐标
    vec2 offset = vec2(outlineSize * cos(rad) * unit.x, outlineSize * sin(rad) * unit.y); //偏移量
    vec2 v = v_uv0 + offset;
    float a = texture2D(texture, v).a;
    if (a < 0.5 )// 我把alpha值大于0.5都视为不透明，小于0.5都视为透明, 返回1代表透明
    {
        stroke = 1.0;
    }
    return stroke;
  }
  void main () {
    vec4 curr_color = texture2D(texture, v_uv0); // 正在处理的这个像素点的颜色
    if (curr_color.a < 0.5) // 关闭或者透明，不管，直接返回
    {
        gl_FragColor = v_color*curr_color;
        return;
    }
    if (openOutline < 0.9) // 关闭
    {
        gl_FragColor = v_color*curr_color;
        return;
    }
    if(v_uv0.x == 0.0||v_uv0.x==1.0||v_uv0.y==0.0||v_uv0.y==1.0)//边界非透明直接改变
    {
      curr_color = outlineColor;
      gl_FragColor = v_color*curr_color;
      return;
    }
    // OpenGL es并不是很支持循环，while和for都不要用
    float strokeCount = 0.0;
    strokeCount += getIsStrokeWithAngel(0.0);
    strokeCount += getIsStrokeWithAngel(30.0);
    strokeCount += getIsStrokeWithAngel(60.0);
    strokeCount += getIsStrokeWithAngel(90.0);
    strokeCount += getIsStrokeWithAngel(120.0);
    strokeCount += getIsStrokeWithAngel(150.0);
    strokeCount += getIsStrokeWithAngel(180.0);
    strokeCount += getIsStrokeWithAngel(210.0);
    strokeCount += getIsStrokeWithAngel(240.0);
    strokeCount += getIsStrokeWithAngel(270.0);
    strokeCount += getIsStrokeWithAngel(300.0);
    strokeCount += getIsStrokeWithAngel(330.0);
    if (strokeCount > 0.0) // 四周围至少有一个点是透明的，这个点要设成描边颜色
    {
        curr_color = outlineColor;
        curr_color.a = strokeCount/12.0;
    }
    gl_FragColor = v_color * curr_color;
  }
}%
