// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        addColor: { value: [0.0, 0.0, 0.0, 0.0], inspector: { type: color } }
        hidebottom: { value: 0.0}
        isRotated: { value: 0.0}
        amplitude: { value: 0.004}
        angularVelocity: { value: 50.0}
        frequency: { value: 10.0}
        offset: { value: 0.0}
        rect: {value: [0.0,0.0,1.0,1.0]}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  
  uniform Properties{
    vec4 addColor;
    vec4 rect;
    float hidebottom;
    float isRotated;
    float amplitude;		// 振幅
    float angularVelocity;	// 角速度
    float frequency;		// 频率
    float offset;			// 偏距
  };
  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);
    
    o.rgb = o.rgb + addColor.rgb;
    if(hidebottom > 0.9){
      // 初相位（正值表现为向左移动，负值则表现为向右移动）
      // cc_time 是 Cocos Creator 提供的运行时间全局变量（类型：vec4）
      float initiaPhase = frequency * cc_time.x;
      // 代入正弦曲线公式计算 y 值
      // y = Asin(ωx ± φt) + k
      if(isRotated>0.9){
        float x = amplitude * sin(angularVelocity * v_uv0.y + initiaPhase) + offset;
          if(v_uv0.x < rect.x+(rect.z+x)*0.5){
            if(o.a != 0.0){
              o.a = 0.1;
            }
          }else if(v_uv0.x < rect.x+(rect.z+x)*0.52){
              o = vec4(1, 1, 1, 1);
          }
        
      }else{
        float y = amplitude * sin(angularVelocity * v_uv0.x + initiaPhase) + offset;
        //如果y大于当前rect的一半
          if(v_uv0.y -rect.y> (rect.w+y)*0.5){
            if(o.a != 0.0){
              o.a = 0.1;
            }
          }else if(v_uv0.y -rect.y> (rect.w+y)*0.48){
            o = vec4(1, 1, 1, 1);
          }
        
      }
       
    }
    gl_FragColor = o;
  }
}%
